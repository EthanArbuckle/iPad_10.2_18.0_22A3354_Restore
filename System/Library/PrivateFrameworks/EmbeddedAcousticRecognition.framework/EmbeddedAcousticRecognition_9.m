void std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, quasar::corrective_reranking::Parse *a6, uint64_t a7)
{
  uint64_t v8;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  float v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  _QWORD *v49;
  __int128 v50;
  quasar::corrective_reranking::Parse *v51;
  uint64_t v52;
  float v53;
  float v54;
  __int128 *v55;
  __int128 *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  _QWORD *v61;
  __int128 v62;
  __int128 *v63;
  uint64_t v64;
  quasar::corrective_reranking::Parse *v65;
  __int128 *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  quasar::corrective_reranking::Parse *v70;

  if (a5)
  {
    v8 = a5;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4)
        return;
      v13 = 0;
      v14 = -a4;
      while (1)
      {
        v15 = (uint64_t)v13 + a1;
        if (*((float *)a2 + 36) > *(float *)((char *)v13 + a1 + 144))
          break;
        v13 = (__int128 *)((char *)v13 + 232);
        if (__CFADD__(v14++, 1))
          return;
      }
      v17 = -v14;
      v69 = a3;
      v70 = a6;
      if (-v14 >= v8)
      {
        if (v14 == -1)
        {
          std::swap[abi:ne180100]<quasar::corrective_reranking::Parse>((uint64_t)v13 + a1, a2);
          return;
        }
        if (v14 > 0)
          v17 = 1 - v14;
        v27 = v17 >> 1;
        v26 = a2;
        if (a2 != a3)
        {
          v28 = 0x34F72C234F72C235 * (((char *)a3 - (char *)a2) >> 3);
          v26 = a2;
          do
          {
            v29 = v28 >> 1;
            v30 = (char *)v26 + 232 * (v28 >> 1);
            v31 = *((float *)v30 + 36);
            v32 = (__int128 *)(v30 + 232);
            v28 += ~(v28 >> 1);
            if (v31 > *(float *)((char *)v13 + 232 * v27 + a1 + 144))
              v26 = v32;
            else
              v28 = v29;
          }
          while (v28);
        }
        v20 = (uint64_t)v13 + 232 * v27 + a1;
        v19 = 0x34F72C234F72C235 * (((char *)v26 - (char *)a2) >> 3);
      }
      else
      {
        if (v8 >= 0)
          v18 = v8;
        else
          v18 = v8 + 1;
        v19 = v18 >> 1;
        v20 = (uint64_t)a2;
        if ((__int128 *)((char *)a2 - a1) != v13)
        {
          v21 = 0x34F72C234F72C235 * (((char *)a2 - a1 - (char *)v13) >> 3);
          v20 = (uint64_t)v13 + a1;
          do
          {
            v22 = v21 >> 1;
            v23 = v20 + 232 * (v21 >> 1);
            v24 = *(float *)(v23 + 144);
            v25 = v23 + 232;
            v21 += ~(v21 >> 1);
            if (*((float *)a2 + 58 * v19 + 36) > v24)
              v21 = v22;
            else
              v20 = v25;
          }
          while (v21);
        }
        v26 = (__int128 *)((char *)a2 + 232 * v19);
        v27 = 0x34F72C234F72C235 * ((v20 - a1 - (uint64_t)v13) >> 3);
      }
      if ((__int128 *)v20 == a2)
      {
        v37 = (uint64_t)v26;
      }
      else if (v26 == a2)
      {
        v37 = v20;
      }
      else
      {
        v33 = a7;
        v34 = v27;
        v35 = v19;
        v36 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<quasar::corrective_reranking::Parse *>>(v20, a2, v26);
        v19 = v35;
        v27 = v34;
        a7 = v33;
        v37 = v36;
      }
      a4 = -(v27 + v14);
      v38 = v8 - v19;
      if (v27 + v19 >= v8 - (v27 + v19) - v14)
      {
        v41 = v26;
        a6 = v70;
        v42 = v27;
        v43 = v19;
        v40 = a7;
        std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(v37, v41, v69, -(v27 + v14), v38, v70);
        a2 = (__int128 *)v20;
        v38 = v43;
        a4 = v42;
        a3 = (__int128 *)v37;
      }
      else
      {
        v39 = (uint64_t)v13 + a1;
        v40 = a7;
        std::__inplace_merge<std::_ClassicAlgPolicy,quasar::corrective_reranking::CorrectiveReranker::rankParses(std::vector<quasar::corrective_reranking::Parse> const&,std::string const&,std::vector<int> const&,std::vector<int> const&,BOOL)::$_0 &,std::__wrap_iter<quasar::corrective_reranking::Parse*>>(v39, v20, v37, v27, v19, v70);
        v15 = v37;
        a2 = v26;
        a6 = v70;
        a3 = v69;
      }
      v8 = v38;
      a1 = v15;
      a7 = v40;
      if (!v38)
        return;
    }
    if (a4 <= v8)
    {
      if ((__int128 *)a1 == a2)
        return;
      v57 = 0;
      v45 = 0;
      do
      {
        v58 = a1 + v57;
        v59 = (char *)a6 + v57;
        v60 = *(_OWORD *)(a1 + v57);
        *((_QWORD *)v59 + 2) = *(_QWORD *)(a1 + v57 + 16);
        *(_OWORD *)v59 = v60;
        *(_QWORD *)(v58 + 8) = 0;
        *(_QWORD *)(v58 + 16) = 0;
        *(_QWORD *)v58 = 0;
        *((_DWORD *)v59 + 6) = *(_DWORD *)(a1 + v57 + 24);
        *((_QWORD *)v59 + 5) = 0;
        *((_QWORD *)v59 + 6) = 0;
        *((_QWORD *)v59 + 4) = 0;
        *((_OWORD *)v59 + 2) = *(_OWORD *)(a1 + v57 + 32);
        *((_QWORD *)v59 + 6) = *(_QWORD *)(a1 + v57 + 48);
        *(_QWORD *)(v58 + 32) = 0;
        *(_QWORD *)(v58 + 40) = 0;
        *(_QWORD *)(v58 + 48) = 0;
        *((_QWORD *)v59 + 7) = 0;
        *((_QWORD *)v59 + 8) = 0;
        *((_QWORD *)v59 + 9) = 0;
        *(_OWORD *)(v59 + 56) = *(_OWORD *)(a1 + v57 + 56);
        *((_QWORD *)v59 + 9) = *(_QWORD *)(a1 + v57 + 72);
        *(_QWORD *)(v58 + 64) = 0;
        *(_QWORD *)(v58 + 72) = 0;
        *(_QWORD *)(v58 + 56) = 0;
        *((_DWORD *)v59 + 20) = *(_DWORD *)(a1 + v57 + 80);
        *((_BYTE *)a6 + v57 + 88) = 0;
        v61 = (_QWORD *)((char *)a6 + v57 + 88);
        v59[112] = 0;
        if (*(_BYTE *)(a1 + v57 + 112))
        {
          *v61 = 0;
          *(_QWORD *)((char *)a6 + v57 + 96) = 0;
          *(_QWORD *)((char *)a6 + v57 + 104) = 0;
          *(_OWORD *)v61 = *(_OWORD *)(v58 + 88);
          *((_QWORD *)v59 + 13) = *(_QWORD *)(v58 + 104);
          *(_QWORD *)(v58 + 88) = 0;
          *(_QWORD *)(v58 + 96) = 0;
          *(_QWORD *)(v58 + 104) = 0;
          v59[112] = 1;
        }
        v62 = *(_OWORD *)(v58 + 120);
        *((_QWORD *)v59 + 17) = *(_QWORD *)(v58 + 136);
        *(_OWORD *)(v59 + 120) = v62;
        *(_QWORD *)(v58 + 128) = 0;
        *(_QWORD *)(v58 + 136) = 0;
        *(_QWORD *)(v58 + 120) = 0;
        *((_DWORD *)v59 + 36) = *(_DWORD *)(v58 + 144);
        *((_QWORD *)v59 + 20) = 0;
        *((_QWORD *)v59 + 21) = 0;
        *((_QWORD *)v59 + 19) = 0;
        *(_OWORD *)(v59 + 152) = *(_OWORD *)(v58 + 152);
        *((_QWORD *)v59 + 21) = *(_QWORD *)(v58 + 168);
        *(_QWORD *)(v58 + 160) = 0;
        *(_QWORD *)(v58 + 168) = 0;
        *(_QWORD *)(v58 + 152) = 0;
        v59[176] = *(_BYTE *)(v58 + 176);
        *((_QWORD *)v59 + 24) = 0;
        *((_QWORD *)v59 + 25) = 0;
        *((_QWORD *)v59 + 23) = 0;
        *(_OWORD *)(v59 + 184) = *(_OWORD *)(v58 + 184);
        *((_QWORD *)v59 + 25) = *(_QWORD *)(v58 + 200);
        *(_QWORD *)(v58 + 184) = 0;
        *(_QWORD *)(v58 + 192) = 0;
        *(_QWORD *)(v58 + 200) = 0;
        *((_QWORD *)v59 + 27) = 0;
        *((_QWORD *)v59 + 28) = 0;
        *((_QWORD *)v59 + 26) = 0;
        *((_OWORD *)v59 + 13) = *(_OWORD *)(v58 + 208);
        *((_QWORD *)v59 + 28) = *(_QWORD *)(v58 + 224);
        *(_QWORD *)(v58 + 208) = 0;
        *(_QWORD *)(v58 + 216) = 0;
        *(_QWORD *)(v58 + 224) = 0;
        ++v45;
        v57 += 232;
      }
      while ((__int128 *)(v58 + 232) != a2);
      if (v57)
      {
        v63 = (__int128 *)((char *)a6 + v57);
        v64 = a1;
        v65 = a6;
        while (a2 != a3)
        {
          v66 = a2;
          if (*((float *)a2 + 36) <= *((float *)v65 + 36))
          {
            quasar::corrective_reranking::Parse::operator=(a1, (__int128 *)v65);
            a2 = v66;
            v65 = (quasar::corrective_reranking::Parse *)((char *)v65 + 232);
          }
          else
          {
            quasar::corrective_reranking::Parse::operator=(a1, a2);
            a2 = (__int128 *)((char *)v66 + 232);
          }
          a1 += 232;
          v64 += 232;
          if (v63 == (__int128 *)v65)
            goto LABEL_79;
        }
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,std::__wrap_iter<quasar::corrective_reranking::Parse *>,0>((__int128 *)v65, v63, v64);
      }
    }
    else
    {
      if (a3 == a2)
        return;
      v44 = 0;
      v45 = 0;
      do
      {
        v46 = (char *)a2 + v44;
        v47 = (char *)a6 + v44;
        v48 = *(__int128 *)((char *)a2 + v44);
        *((_QWORD *)v47 + 2) = *(_QWORD *)((char *)a2 + v44 + 16);
        *(_OWORD *)v47 = v48;
        *((_QWORD *)v46 + 1) = 0;
        *((_QWORD *)v46 + 2) = 0;
        *(_QWORD *)v46 = 0;
        *((_DWORD *)v47 + 6) = *(_DWORD *)((char *)a2 + v44 + 24);
        *((_QWORD *)v47 + 5) = 0;
        *((_QWORD *)v47 + 6) = 0;
        *((_QWORD *)v47 + 4) = 0;
        *((_OWORD *)v47 + 2) = *(__int128 *)((char *)a2 + v44 + 32);
        *((_QWORD *)v47 + 6) = *(_QWORD *)((char *)a2 + v44 + 48);
        *((_QWORD *)v46 + 4) = 0;
        *((_QWORD *)v46 + 5) = 0;
        *((_QWORD *)v46 + 6) = 0;
        *((_QWORD *)v47 + 7) = 0;
        *((_QWORD *)v47 + 8) = 0;
        *((_QWORD *)v47 + 9) = 0;
        *(_OWORD *)(v47 + 56) = *(__int128 *)((char *)a2 + v44 + 56);
        *((_QWORD *)v47 + 9) = *(_QWORD *)((char *)a2 + v44 + 72);
        *((_QWORD *)v46 + 8) = 0;
        *((_QWORD *)v46 + 9) = 0;
        *((_QWORD *)v46 + 7) = 0;
        *((_DWORD *)v47 + 20) = *(_DWORD *)((char *)a2 + v44 + 80);
        *((_BYTE *)a6 + v44 + 88) = 0;
        v49 = (_QWORD *)((char *)a6 + v44 + 88);
        v47[112] = 0;
        if (*((_BYTE *)a2 + v44 + 112))
        {
          *v49 = 0;
          *(_QWORD *)((char *)a6 + v44 + 96) = 0;
          *(_QWORD *)((char *)a6 + v44 + 104) = 0;
          *(_OWORD *)v49 = *(_OWORD *)(v46 + 88);
          *((_QWORD *)v47 + 13) = *((_QWORD *)v46 + 13);
          *((_QWORD *)v46 + 11) = 0;
          *((_QWORD *)v46 + 12) = 0;
          *((_QWORD *)v46 + 13) = 0;
          v47[112] = 1;
        }
        v50 = *(_OWORD *)(v46 + 120);
        *((_QWORD *)v47 + 17) = *((_QWORD *)v46 + 17);
        *(_OWORD *)(v47 + 120) = v50;
        *((_QWORD *)v46 + 16) = 0;
        *((_QWORD *)v46 + 17) = 0;
        *((_QWORD *)v46 + 15) = 0;
        *((_DWORD *)v47 + 36) = *((_DWORD *)v46 + 36);
        *((_QWORD *)v47 + 20) = 0;
        *((_QWORD *)v47 + 21) = 0;
        *((_QWORD *)v47 + 19) = 0;
        *(_OWORD *)(v47 + 152) = *(_OWORD *)(v46 + 152);
        *((_QWORD *)v47 + 21) = *((_QWORD *)v46 + 21);
        *((_QWORD *)v46 + 20) = 0;
        *((_QWORD *)v46 + 21) = 0;
        *((_QWORD *)v46 + 19) = 0;
        v47[176] = v46[176];
        *((_QWORD *)v47 + 24) = 0;
        *((_QWORD *)v47 + 25) = 0;
        *((_QWORD *)v47 + 23) = 0;
        *(_OWORD *)(v47 + 184) = *(_OWORD *)(v46 + 184);
        *((_QWORD *)v47 + 25) = *((_QWORD *)v46 + 25);
        *((_QWORD *)v46 + 23) = 0;
        *((_QWORD *)v46 + 24) = 0;
        *((_QWORD *)v46 + 25) = 0;
        *((_QWORD *)v47 + 27) = 0;
        *((_QWORD *)v47 + 28) = 0;
        *((_QWORD *)v47 + 26) = 0;
        *((_OWORD *)v47 + 13) = *((_OWORD *)v46 + 13);
        *((_QWORD *)v47 + 28) = *((_QWORD *)v46 + 28);
        *((_QWORD *)v46 + 26) = 0;
        *((_QWORD *)v46 + 27) = 0;
        *((_QWORD *)v46 + 28) = 0;
        ++v45;
        v44 += 232;
      }
      while (v46 + 232 != (char *)a3);
      if (v44)
      {
        v51 = (quasar::corrective_reranking::Parse *)((char *)a6 + v44);
        v52 = (uint64_t)a3 - 232;
        while (a2 != (__int128 *)a1)
        {
          v53 = *((float *)v51 - 22);
          v54 = *((float *)a2 - 22);
          if (v53 <= v54)
            v55 = (__int128 *)((char *)v51 - 232);
          else
            v55 = (__int128 *)((char *)a2 - 232);
          if (v53 <= v54)
            v56 = a2;
          else
            v56 = (__int128 *)((char *)a2 - 232);
          if (v53 <= v54)
            v51 = (quasar::corrective_reranking::Parse *)((char *)v51 - 232);
          quasar::corrective_reranking::Parse::operator=(v52, v55);
          a2 = v56;
          v52 -= 232;
          if (v51 == a6)
            goto LABEL_79;
        }
        v67 = 0;
        do
        {
          v68 = v52 + v67;
          v67 -= 232;
          quasar::corrective_reranking::Parse::operator=(v68, (__int128 *)((char *)v51 + v67));
        }
        while ((quasar::corrective_reranking::Parse *)((char *)v51 + v67) != a6);
      }
    }
LABEL_79:
    if (a6)
    {
      do
      {
        quasar::corrective_reranking::Parse::~Parse(a6);
        a6 = (quasar::corrective_reranking::Parse *)((char *)a6 + 232);
        --v45;
      }
      while (v45);
    }
  }
}

void sub_1ADB90FA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  quasar::corrective_reranking::Parse *v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 1;
    do
    {
      quasar::corrective_reranking::Parse::~Parse(v2);
      v2 = (quasar::corrective_reranking::Parse *)((char *)v2 + 232);
      --v4;
    }
    while (v4);
  }
  _Unwind_Resume(exception_object);
}

void std::swap[abi:ne180100]<quasar::corrective_reranking::Parse>(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v3 = *(_OWORD *)a1;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = *(_OWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v10 = *(_DWORD *)(a1 + 80);
  LOBYTE(v11) = 0;
  v13 = 0;
  if (*(_BYTE *)(a1 + 112))
  {
    v11 = *(_OWORD *)(a1 + 88);
    v12 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    v13 = 1;
  }
  v14 = *(_OWORD *)(a1 + 120);
  v15 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v16 = *(_DWORD *)(a1 + 144);
  v17 = *(_OWORD *)(a1 + 152);
  v18 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v19 = *(_BYTE *)(a1 + 176);
  v20 = *(_OWORD *)(a1 + 184);
  v21 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v22 = *(_OWORD *)(a1 + 208);
  v23 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  quasar::corrective_reranking::Parse::operator=(a1, a2);
  quasar::corrective_reranking::Parse::operator=((uint64_t)a2, &v3);
  quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)&v3);
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::corrective_reranking::Parse *,quasar::corrective_reranking::Parse *,std::__wrap_iter<quasar::corrective_reranking::Parse *>,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v6;

  v3 = a3;
  v4 = a1;
  if (a1 != a2)
  {
    v6 = a3;
    do
    {
      quasar::corrective_reranking::Parse::operator=(v6, v4);
      v4 = (__int128 *)((char *)v4 + 232);
      v6 += 232;
      v3 += 232;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<quasar::corrective_reranking::Parse *>>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  uint64_t v6;
  __int128 *i;
  uint64_t v8;
  __int128 *v9;

  v4 = a2;
  std::swap[abi:ne180100]<quasar::corrective_reranking::Parse>(a1, a2);
  v6 = a1 + 232;
  for (i = (__int128 *)((char *)v4 + 232); i != a3; i = (__int128 *)((char *)i + 232))
  {
    if ((__int128 *)v6 == v4)
      v4 = i;
    std::swap[abi:ne180100]<quasar::corrective_reranking::Parse>(v6, i);
    v6 += 232;
  }
  if ((__int128 *)v6 != v4)
  {
    v8 = v6;
    v9 = v4;
    do
    {
      while (1)
      {
        std::swap[abi:ne180100]<quasar::corrective_reranking::Parse>(v8, v9);
        v8 += 232;
        v9 = (__int128 *)((char *)v9 + 232);
        if (v9 == a3)
          break;
        if ((__int128 *)v8 == v4)
          v4 = v9;
      }
      v9 = v4;
    }
    while ((__int128 *)v8 != v4);
  }
  return v6;
}

uint64_t *std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(uint64_t *a1, uint64_t *a2, unsigned __int8 **a3)
{
  uint64_t *v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *((unsigned __int8 *)v3 + 39);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 39);
      else
        v9 = (unsigned __int8 *)v3[3];
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[2], v7, v3[3]))
            return v3;
        }
        else
        {
          if (!*((_BYTE *)v3 + 39))
            return v3;
          v10 = 0;
          while (*((unsigned __int8 *)v3 + v10 + 16) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 = (uint64_t *)*v3;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

void std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::corrective_reranking::TokenClassification>::__emplace_back_slow_path<quasar::corrective_reranking::TokenClassification&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  std::string *v12;
  std::string::value_type *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0)
    v7 = 0x3FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = (std::string *)&v8[64 * v3];
  v14 = &v8[64 * v7];
  std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification&>((_DWORD)a1 + 16, v12, a2);
  v13 = &v12[2].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::TokenClassification>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer(&v11);
  return v9;
}

void sub_1ADB9142C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  _QWORD *result;
  std::string::size_type v7;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(this[1].__r_.__value_.__r.__words, *((const void **)a3 + 3), *((_QWORD *)a3 + 4), (uint64_t)(*((_QWORD *)a3 + 4) - *((_QWORD *)a3 + 3)) >> 2);
  v7 = *((_QWORD *)a3 + 6);
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = *((_DWORD *)a3 + 14);
  this[2].__r_.__value_.__r.__words[0] = v7;
  return result;
}

void sub_1ADB914B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::corrective_reranking::TokenClassification>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::TokenClassification>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::corrective_reranking::TokenClassification>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 - 48);
      *(_OWORD *)(v7 - 64) = v8;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 64;
      *((_QWORD *)&v15 + 1) -= 64;
      a3 -= 64;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::TokenClassification>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::TokenClassification>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::TokenClassification>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::TokenClassification>,std::reverse_iterator<quasar::corrective_reranking::TokenClassification*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100](v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::corrective_reranking::TokenClassification>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 64;
    std::allocator<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::destroy[abi:ne180100](v4, i - 64);
  }
}

uint64_t std::vector<quasar::corrective_reranking::TokenClassification>::__emplace_back_slow_path<quasar::corrective_reranking::TokenClassification const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  std::string *v12;
  std::string::value_type *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0)
    v7 = 0x3FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = (std::string *)&v8[64 * v3];
  v14 = &v8[64 * v7];
  std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification const&>((_DWORD)a1 + 16, v12, a2);
  v13 = &v12[2].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::TokenClassification>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer(&v11);
  return v9;
}

void sub_1ADB917E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  _QWORD *result;
  std::string::size_type v7;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(this[1].__r_.__value_.__r.__words, *((const void **)a3 + 3), *((_QWORD *)a3 + 4), (uint64_t)(*((_QWORD *)a3 + 4) - *((_QWORD *)a3 + 3)) >> 2);
  v7 = *((_QWORD *)a3 + 6);
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = *((_DWORD *)a3 + 14);
  this[2].__r_.__value_.__r.__words[0] = v7;
  return result;
}

void sub_1ADB9186C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void **std::vector<quasar::corrective_reranking::TokenClassification>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 64 * v6;
    std::vector<quasar::corrective_reranking::TokenClassification>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer(v7);
  }
  return result;
}

void sub_1ADB91904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::TokenClassification>::__push_back_slow_path<quasar::corrective_reranking::TokenClassification const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  std::string *v12;
  std::string::value_type *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0)
    v7 = 0x3FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = (std::string *)&v8[64 * v3];
  v14 = &v8[64 * v7];
  std::allocator<quasar::corrective_reranking::TokenClassification>::construct[abi:ne180100]<quasar::corrective_reranking::TokenClassification,quasar::corrective_reranking::TokenClassification const&>((_DWORD)a1 + 16, v12, a2);
  v13 = &v12[2].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::TokenClassification>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer(&v11);
  return v9;
}

void sub_1ADB919F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::TransformerTokenUtilities::TransformerTokenUtilities(uint64_t result, _QWORD *a2, int a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(result + 16) = a3;
  return result;
}

void quasar::corrective_reranking::TransformerTokenUtilities::tokenize(unsigned __int8 **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t *a4@<X8>)
{
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string::size_type v16;
  std::string *p_p;
  int v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  int64_t v22;
  int v23;
  char *v24;
  char *v25;
  int64_t v26;
  char *v27;
  int v28;
  int64_t v29;
  char *v30;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  std::string v42;
  void *v43;
  void *v44[2];
  char v45;
  std::string v46;
  std::string __p;
  uint64_t v48;
  uint64_t v49;

  quasar::TransformerTokenizer::tokenize(*a1, a2, &v48);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = (char *)a2;
  else
    v8 = *(char **)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  quasar::utf8::convertToLowerCaseOrEmpty(v8, v9, &__p);
  quasar::corrective_reranking::stripDiacritics((quasar::QsrText *)&__p, &v42);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v42;
  if (a3)
    std::string::operator=(a3, &__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v10 = v48;
  v11 = v49;
  if (v48 != v49)
  {
    v12 = 0;
    v39 = a4;
    v40 = v49;
    do
    {
      if (*(char *)(v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
      }
      else
      {
        v13 = *(_OWORD *)v10;
        v46.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v13;
      }
      std::string::basic_string[abi:ne180100]<0>(&v42, "##");
      std::string::basic_string[abi:ne180100]<0>(v44, "");
      quasar::replaceAll((uint64_t)&v46, (uint64_t)&v42, (char *)v44);
      if (v45 < 0)
        operator delete(v44[0]);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v46;
      else
        v14 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      else
        size = v46.__r_.__value_.__l.__size_;
      quasar::utf8::convertToLowerCaseOrEmpty((char *)v14, size, &v42);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      v46 = v42;
      quasar::corrective_reranking::stripDiacritics((quasar::QsrText *)&v46, &v42);
      v41 = v12;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      v46 = v42;
      v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v16 = __p.__r_.__value_.__l.__size_;
      v18 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      v20 = v46.__r_.__value_.__l.__size_;
      v19 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v46;
      else
        v21 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      else
        v22 = v46.__r_.__value_.__l.__size_;
      if (v16 >= (int)v41)
      {
        v23 = v41;
        if (v22)
        {
          v24 = (char *)p_p + (int)v41;
          v25 = (char *)p_p + v16;
          v26 = v16 - (int)v41;
          if (v26 >= v22)
          {
            v28 = v21->__r_.__value_.__s.__data_[0];
            do
            {
              v29 = v26 - v22;
              if (v29 == -1)
                break;
              v30 = (char *)memchr(v24, v28, v29 + 1);
              if (!v30)
                break;
              v27 = v30;
              if (!memcmp(v30, v21, v22))
                goto LABEL_52;
              v24 = v27 + 1;
              v26 = v25 - (v27 + 1);
            }
            while (v26 >= v22);
            v27 = v25;
LABEL_52:
            a4 = v39;
          }
          else
          {
            v27 = v25;
          }
          if (v27 == v25)
            v23 = -1;
          else
            v23 = (_DWORD)v27 - (_DWORD)p_p;
          v11 = v40;
        }
      }
      else
      {
        v23 = -1;
      }
      if ((v18 & 0x80) != 0)
      {
        if (v20 != 5)
        {
          if (v23 != -1)
            goto LABEL_76;
          goto LABEL_78;
        }
      }
      else
      {
        if (v18 != 5)
        {
          if (v23 != -1)
            goto LABEL_74;
          goto LABEL_78;
        }
        v19 = &v46;
      }
      if ((LODWORD(v19->__r_.__value_.__l.__data_) != 1802401115 || v19->__r_.__value_.__s.__data_[4] != 93)
        && v23 != -1)
      {
        if ((v18 & 0x80) == 0)
LABEL_74:
          LODWORD(v20) = v18;
LABEL_76:
        v12 = (v20 + v23);
        quasar::SystemConfig::Version::Version(v44, v23, v20);
        if (*(char *)(v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          v34 = *(_OWORD *)v10;
          v42.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
          *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v34;
        }
        v43 = v44[0];
        v37 = a4[1];
        if (v37 >= a4[2])
        {
          v38 = std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__emplace_back_slow_path<std::pair<std::string,quasar::corrective_reranking::TextRange>&>(a4, (__int128 *)&v42);
        }
        else
        {
          std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>&>((uint64_t)a4, (__int128 *)&v42);
          v38 = v37 + 32;
        }
        a4[1] = v38;
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        goto LABEL_88;
      }
LABEL_78:
      v42.__r_.__value_.__r.__words[0] = 0;
      v35 = a4[1];
      if (v35 >= a4[2])
      {
        v36 = std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__emplace_back_slow_path<std::string const&,quasar::corrective_reranking::TextRange>(a4, (__int128 *)v10, &v42);
        v12 = v41;
      }
      else
      {
        std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::string const&,quasar::corrective_reranking::TextRange>((uint64_t)a4, (__int128 *)v10, &v42);
        v12 = v41;
        v36 = v35 + 32;
      }
      a4[1] = v36;
LABEL_88:
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      v10 += 24;
    }
    while (v10 != v11);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
}

void sub_1ADB91E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a39 < 0)
    operator delete(__p);
  a13 = (void *)(v39 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TransformerTokenUtilities::buildTruncatedExistingAndResultingTexts(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, std::string *a5@<X8>)
{
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[3];
  std::string v26;
  void *v27[2];
  char v28;
  void *v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  std::string v46;
  std::string __str;

  quasar::corrective_reranking::TextEdit::adjustedPayload(a4, (uint64_t)a2, 1, &__str);
  quasar::corrective_reranking::TextEdit::adjustedPayload(a4, (uint64_t)a2, 0, &v46);
  quasar::corrective_reranking::TransformerTokenUtilities::tokenize((unsigned __int8 **)a1, a3, 0, (uint64_t *)v29);
  v11 = v29[0];
  v10 = v29[1];
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  quasar::corrective_reranking::TransformerTokenUtilities::tokenize((unsigned __int8 **)a1, (uint64_t)&__str, 0, (uint64_t *)v29);
  v13 = v29[0];
  v12 = v29[1];
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  quasar::corrective_reranking::TransformerTokenUtilities::tokenize((unsigned __int8 **)a1, (uint64_t)&v46, 0, (uint64_t *)v29);
  v14 = (unint64_t)(v10 - v11) >> 5;
  v15 = (unint64_t)(v12 - v13) >> 5;
  v16 = (unint64_t)((char *)v29[1] - (char *)v29[0]) >> 5;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v17 = *(_DWORD *)(a1 + 16) - v16 - (v14 + v15) - 8;
  if (v17 > 1)
  {
    v20 = v17 >> 1;
  }
  else
  {
    if (quasar::gLogLevel >= 2)
    {
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      *(_OWORD *)v29 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"WARNING: Context window of ", 27);
      v18 = (_QWORD *)std::ostream::operator<<();
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" is too short to fit the utterance, separation tokens, and the change. ", 71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Transformer input will exceed the context window length, and will be truncated by Transformer's tokenizer.", 106);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v29);
    }
    v20 = 0;
  }
  quasar::corrective_reranking::TextEdit::textSurroundingEditLocation((uint64_t)a4, a2, (std::string *)v29);
  quasar::corrective_reranking::TransformerTokenUtilities::truncateAdjacentTexts((unsigned __int8 **)a1, (uint64_t)v29, (uint64_t)&v30 + 8, v20, 1, &v26);
  quasar::corrective_reranking::TextEdit::adjustedTargetRange(a4, (uint64_t)a2, (int **)v25);
  quasar::corrective_reranking::TextEdit::assembleEditComponents(&__str, (const void **)&v26.__r_.__value_.__l.__data_, (uint64_t)v27, v25, (uint64_t)v23);
  quasar::corrective_reranking::TextEdit::assembleEditComponents(&v46, (const void **)&v26.__r_.__value_.__l.__data_, (uint64_t)v27, v25, (uint64_t)__p);
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(a5, (__int128 *)v23, (__int128 *)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  if (v28 < 0)
    operator delete(v27[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31) < 0)
    operator delete(*((void **)&v30 + 1));
  if (SBYTE7(v30) < 0)
    operator delete(v29[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1ADB921B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  if (*(char *)(v31 - 105) < 0)
    operator delete(*(void **)(v31 - 128));
  if (*(char *)(v31 - 81) < 0)
    operator delete(*(void **)(v31 - 104));
  _Unwind_Resume(exception_object);
}

void sub_1ADB9226C()
{
  JUMPOUT(0x1ADB92254);
}

void quasar::corrective_reranking::TransformerTokenUtilities::truncateAdjacentTexts(unsigned __int8 **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, int a5@<W4>, std::string *a6@<X8>)
{
  __int128 *size;
  std::wstring::size_type v13;
  std::wstring::size_type v14;
  BOOL v15;
  __int128 v16;
  __int128 *v17;
  std::wstring::size_type v18;
  std::wstring::size_type v19;
  __int128 v20;
  int v21;
  std::wstring::size_type v22;
  int v23;
  std::wstring::size_type v24;
  signed int v25;
  int v26;
  unint64_t v27;
  std::basic_string<char32_t>::size_type v28;
  std::wstring *p_p;
  std::basic_string<char32_t>::size_type v30;
  std::basic_string<char32_t> *v31;
  std::wstring::size_type v32;
  char v33;
  signed int v34;
  std::basic_string<char32_t> *v35;
  std::basic_string<char32_t>::size_type v36;
  std::basic_string<char32_t> *v37;
  std::basic_string<char32_t>::size_type v38;
  char v39;
  std::basic_string<char32_t> v40;
  std::wstring __p;
  std::wstring v42;
  std::wstring v43;
  std::basic_string<char32_t> v44;
  std::basic_string<char32_t> v45;
  void **v46[3];
  uint64_t v47[3];
  std::string v48;
  std::string v49;
  std::string v50;
  std::basic_string<char32_t> v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if ((int)a4 <= 0)
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[1],char const(&)[1],0>(a6, "", "");
  }
  else
  {
    memset(&v49, 0, sizeof(v49));
    memset(&v48, 0, sizeof(v48));
    quasar::corrective_reranking::TransformerTokenUtilities::tokenize(a1, a2, &v49, v47);
    quasar::corrective_reranking::TransformerTokenUtilities::tokenize(a1, a3, &v48, (uint64_t *)v46);
    quasar::toU32String(a2, &v45);
    quasar::toU32String(a3, &v44);
    quasar::corrective_reranking::toU32Tokens(v47, (uint64_t *)&v49, (uint64_t *)&v43);
    quasar::corrective_reranking::toU32Tokens((uint64_t *)v46, (uint64_t *)&v48, (uint64_t *)&v42);
    size = (__int128 *)v43.__r_.__value_.__l.__size_;
    v13 = v43.__r_.__value_.__r.__words[0];
    if (v43.__r_.__value_.__r.__words[0] == v43.__r_.__value_.__l.__size_)
    {
      size = (__int128 *)v43.__r_.__value_.__r.__words[0];
    }
    else
    {
      v14 = v43.__r_.__value_.__r.__words[0] + 32;
      while (*(_QWORD *)(v14 - 8))
      {
        v15 = v14 == v43.__r_.__value_.__l.__size_;
        v14 += 32;
        if (v15)
        {
          v13 = v43.__r_.__value_.__l.__size_;
          goto LABEL_18;
        }
      }
      v13 = v14 - 32;
      if (v14 - 32 != v43.__r_.__value_.__l.__size_ && v14 != v43.__r_.__value_.__l.__size_)
      {
        do
        {
          if (*(_QWORD *)(v14 + 24))
          {
            if (*(char *)(v13 + 23) < 0)
              operator delete(*(void **)v13);
            v16 = *(_OWORD *)v14;
            *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
            *(_OWORD *)v13 = v16;
            *(_BYTE *)(v14 + 23) = 0;
            *(_DWORD *)v14 = 0;
            *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
            v13 += 32;
          }
          v14 += 32;
        }
        while ((__int128 *)v14 != size);
        size = (__int128 *)v43.__r_.__value_.__l.__size_;
      }
    }
LABEL_18:
    std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::erase((uint64_t)&v43, v13, size);
    v17 = (__int128 *)v42.__r_.__value_.__l.__size_;
    v18 = v42.__r_.__value_.__r.__words[0];
    if (v42.__r_.__value_.__r.__words[0] == v42.__r_.__value_.__l.__size_)
    {
      v17 = (__int128 *)v42.__r_.__value_.__r.__words[0];
    }
    else
    {
      v19 = v42.__r_.__value_.__r.__words[0] + 32;
      while (*(_QWORD *)(v19 - 8))
      {
        v15 = v19 == v42.__r_.__value_.__l.__size_;
        v19 += 32;
        if (v15)
        {
          v18 = v42.__r_.__value_.__l.__size_;
          goto LABEL_33;
        }
      }
      v18 = v19 - 32;
      if (v19 - 32 != v42.__r_.__value_.__l.__size_ && v19 != v42.__r_.__value_.__l.__size_)
      {
        do
        {
          if (*(_QWORD *)(v19 + 24))
          {
            if (*(char *)(v18 + 23) < 0)
              operator delete(*(void **)v18);
            v20 = *(_OWORD *)v19;
            *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
            *(_OWORD *)v18 = v20;
            *(_BYTE *)(v19 + 23) = 0;
            *(_DWORD *)v19 = 0;
            *(_QWORD *)(v18 + 24) = *(_QWORD *)(v19 + 24);
            v18 += 32;
          }
          v19 += 32;
        }
        while ((__int128 *)v19 != v17);
        v17 = (__int128 *)v42.__r_.__value_.__l.__size_;
      }
    }
LABEL_33:
    std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::erase((uint64_t)&v42, v18, v17);
    v21 = a4 >> 1;
    v22 = (v43.__r_.__value_.__l.__size_ - v43.__r_.__value_.__r.__words[0]) >> 5;
    if ((int)(a4 >> 1) >= (int)v22)
      v23 = (v43.__r_.__value_.__l.__size_ - v43.__r_.__value_.__r.__words[0]) >> 5;
    else
      v23 = a4 >> 1;
    v24 = (v42.__r_.__value_.__l.__size_ - v42.__r_.__value_.__r.__words[0]) >> 5;
    if (v21 >= (int)v24)
      v25 = (v42.__r_.__value_.__l.__size_ - v42.__r_.__value_.__r.__words[0]) >> 5;
    else
      v25 = a4 >> 1;
    if (a5)
    {
      v26 = v21 - v23 + v25;
      if (v21 <= (int)v22)
        v26 = v21;
      if (v26 >= (int)v24)
        v25 = (v42.__r_.__value_.__l.__size_ - v42.__r_.__value_.__r.__words[0]) >> 5;
      else
        v25 = v26;
      if (v25 < v21)
      {
        v23 = v23 + v21 - v25;
        if (v23 >= (int)v22)
          v23 = (v43.__r_.__value_.__l.__size_ - v43.__r_.__value_.__r.__words[0]) >> 5;
      }
    }
    if (v23 < 1)
      memset(&__p, 0, sizeof(__p));
    else
      quasar::pySlice<std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>>(&v43, -v23, 0x7FFFFFFFu, (uint64_t *)&__p);
    std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)&v43);
    v43 = __p;
    memset(&__p, 0, sizeof(__p));
    v40.__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)&__p;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    quasar::pySlice<std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>>(&v42, 0, v25, (uint64_t *)&__p);
    std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)&v42);
    v42 = __p;
    memset(&__p, 0, sizeof(__p));
    v40.__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)&__p;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    quasar::corrective_reranking::TransformerTokenUtilities::removeTrailingAndLeadingSubtokens((uint64_t *)&v43, &__p);
    std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)&v43);
    v43 = __p;
    memset(&__p, 0, sizeof(__p));
    v40.__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)&__p;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    quasar::corrective_reranking::TransformerTokenUtilities::removeTrailingAndLeadingSubtokens((uint64_t *)&v42, &__p);
    std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)&v42);
    v42 = __p;
    memset(&__p, 0, sizeof(__p));
    v40.__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)&__p;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    memset(&__p, 0, sizeof(__p));
    if (v43.__r_.__value_.__r.__words[0] != v43.__r_.__value_.__l.__size_)
    {
      v27 = *(int *)(v43.__r_.__value_.__l.__size_ - 4) + (uint64_t)*(int *)(v43.__r_.__value_.__l.__size_ - 8);
      quasar::pySlice<std::basic_string<char32_t>>((uint64_t *)&v45, *(_DWORD *)(v43.__r_.__value_.__r.__words[0] + 24), *(_DWORD *)(v43.__r_.__value_.__l.__size_ - 4) + *(_DWORD *)(v43.__r_.__value_.__l.__size_ - 8), &v40);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = (std::wstring)v40;
      v28 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v28 = v45.__r_.__value_.__l.__size_;
      if (v28 > v27)
      {
        quasar::pySlice<std::basic_string<char32_t>>((uint64_t *)&v45, v27, 0x7FFFFFFFu, &v40);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::wstring *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v30 = __p.__r_.__value_.__l.__size_;
        v31 = std::basic_string<char32_t>::insert(&v40, 0, (const std::basic_string<char32_t>::value_type *)p_p, v30);
        v32 = v31->__r_.__value_.__r.__words[0];
        v51.__r_.__value_.__r.__words[0] = v31->__r_.__value_.__l.__size_;
        *(std::basic_string<char32_t>::size_type *)((char *)v51.__r_.__value_.__r.__words + 7) = *(std::basic_string<char32_t>::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
        v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = v32;
        __p.__r_.__value_.__l.__size_ = v51.__r_.__value_.__r.__words[0];
        *(std::wstring::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::basic_string<char32_t>::size_type *)((char *)v51.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v33;
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
      }
    }
    memset(&v40, 0, sizeof(v40));
    if (v42.__r_.__value_.__r.__words[0] != v42.__r_.__value_.__l.__size_)
    {
      v34 = *(_DWORD *)(v42.__r_.__value_.__r.__words[0] + 24);
      quasar::pySlice<std::basic_string<char32_t>>((uint64_t *)&v44, v34, *(_DWORD *)(v42.__r_.__value_.__l.__size_ - 4) + *(_DWORD *)(v42.__r_.__value_.__l.__size_ - 8), &v51);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      v40 = v51;
      if (v34 >= 1)
      {
        quasar::pySlice<std::basic_string<char32_t>>((uint64_t *)&v44, 0, v34, &v51);
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v40;
        else
          v35 = (std::basic_string<char32_t> *)v40.__r_.__value_.__r.__words[0];
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
        else
          v36 = v40.__r_.__value_.__l.__size_;
        v37 = std::basic_string<char32_t>::append(&v51, (const std::basic_string<char32_t>::value_type *)v35, v36);
        v38 = v37->__r_.__value_.__r.__words[0];
        v50.__r_.__value_.__r.__words[0] = v37->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 7) = *(std::basic_string<char32_t>::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7);
        v39 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        v40.__r_.__value_.__r.__words[0] = v38;
        v40.__r_.__value_.__l.__size_ = v50.__r_.__value_.__r.__words[0];
        *(std::basic_string<char32_t>::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v40.__r_.__value_.__s + 23) = v39;
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
      }
    }
    quasar::toString((uint64_t)&__p, (std::string *)&v51);
    quasar::toString((uint64_t)&v40, &v50);
    *(std::basic_string<char32_t> *)a6 = v51;
    a6[1] = v50;
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = (std::wstring::size_type)&v42;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v42.__r_.__value_.__r.__words[0] = (std::wstring::size_type)&v43;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    v45.__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)v46;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
    v46[0] = (void **)v47;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v46);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
  }
}

void sub_1ADB9293C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char **a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char **a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char *a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  a16 = &a23;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a23 = &a27;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  a36 = &a42;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  a42 = &a45;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  if (*(char *)(v45 - 145) < 0)
    operator delete(*(void **)(v45 - 168));
  if (*(char *)(v45 - 121) < 0)
    operator delete(*(void **)(v45 - 144));
  _Unwind_Resume(a1);
}

void sub_1ADB92A38()
{
  JUMPOUT(0x1ADB929C0);
}

void sub_1ADB92A40()
{
  JUMPOUT(0x1ADB929D0);
}

void sub_1ADB92A48()
{
  JUMPOUT(0x1ADB929E0);
}

void sub_1ADB92A50()
{
  JUMPOUT(0x1ADB929F0);
}

void sub_1ADB92A58()
{
  JUMPOUT(0x1ADB92A00);
}

void sub_1ADB92A60()
{
  JUMPOUT(0x1ADB92A10);
}

void quasar::corrective_reranking::toU32Tokens(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  char *v31[3];
  std::basic_string<char32_t> v32;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  quasar::corrective_reranking::getTokenRanges(a1, v31);
  v6 = (unsigned int **)quasar::corrective_reranking::TargetRange::TargetRange(&v32, (uint64_t)v31);
  quasar::corrective_reranking::TargetRange::toCodePoints(v6, a2, &v26);
  v7 = v26;
  v8 = v27;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  if (v32.__r_.__value_.__r.__words[0])
  {
    v32.__r_.__value_.__l.__size_ = v32.__r_.__value_.__r.__words[0];
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (v31[0])
  {
    v31[1] = v31[0];
    operator delete(v31[0]);
  }
  v9 = *a1;
  v10 = a1[1];
  if ((v10 - *a1) >> 5 != (v8 - v7) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"tokens.size() == tokenRangesInCodePoints.size()", 47);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v26);
  }
  if (v10 == v9)
  {
    if (!v7)
      return;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    do
    {
      quasar::toU32String(v9 + v11, &v32);
      v13 = a3[1];
      v14 = a3[2];
      if (v13 >= v14)
      {
        v16 = (uint64_t)(v13 - *a3) >> 5;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v18 = v14 - *a3;
        if (v18 >> 4 > v17)
          v17 = v18 >> 4;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
          v19 = 0x7FFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        v30 = a3 + 2;
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a3 + 2), v19);
        v21 = &v20[32 * v16];
        v26 = v20;
        v27 = v21;
        v29 = &v20[32 * v22];
        v23 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
        *((_QWORD *)v21 + 2) = *((_QWORD *)&v32.__r_.__value_.__l + 2);
        *(_OWORD *)v21 = v23;
        memset(&v32, 0, sizeof(v32));
        *((_QWORD *)v21 + 3) = *(_QWORD *)&v7[8 * v12];
        v28 = v21 + 32;
        std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a3, &v26);
        v24 = a3[1];
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v26);
        v25 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
        a3[1] = v24;
        if (v25 < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
      }
      else
      {
        v15 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
        *(_QWORD *)(v13 + 16) = *((_QWORD *)&v32.__r_.__value_.__l + 2);
        *(_OWORD *)v13 = v15;
        *(_QWORD *)(v13 + 24) = *(_QWORD *)&v7[8 * v12];
        a3[1] = v13 + 32;
      }
      ++v12;
      v9 = *a1;
      v11 += 32;
    }
    while (v12 < (a1[1] - *a1) >> 5);
  }
  operator delete(v7);
}

_QWORD *quasar::pySlice<std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>>@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  __int32 v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  unint64_t v16;
  unsigned __int32 v17;

  v5 = *result;
  v6 = result[1];
  if (*result == v6)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v7 = v6 - v5;
    v8 = vdup_n_s32((unint64_t)(v6 - v5) >> 5);
    v9 = vmax_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(a3, a2)), (int8x8_t)v8), (int32x2_t)__PAIR64__(a3, a2)), 0);
    v10 = vmin_s32(v9, v8);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v11 = v10.i32[1] - v10.i32[0];
    if (v10.i32[1] > v10.i32[0])
    {
      v12 = result;
      v17 = v9.i32[0];
      std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::reserve(a4, v11);
      if ((int)(v7 >> 5) >= (uint64_t)v17)
        v13 = v17;
      else
        v13 = (int)(v7 >> 5);
      v14 = 32 * v13;
      do
      {
        if (v13 >= (uint64_t)(v12[1] - *v12) >> 5)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        v15 = (__int128 *)(*v12 + v14);
        v16 = a4[1];
        if (v16 >= a4[2])
        {
          result = (_QWORD *)std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__push_back_slow_path<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const&>(a4, v15);
        }
        else
        {
          std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const&>((uint64_t)a4, v15);
          result = (_QWORD *)(v16 + 32);
        }
        a4[1] = (uint64_t)result;
        ++v13;
        v14 += 32;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

void sub_1ADB92E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::TransformerTokenUtilities::removeTrailingAndLeadingSubtokens@<X0>(uint64_t *a1@<X1>, std::wstring *a2@<X8>)
{
  uint64_t v3;
  _BOOL4 v4;
  _BOOL4 v5;
  char *v6;
  __int128 *v7;
  char *v8;
  __int128 *v9;
  void *__p[2];
  char v12;
  std::string v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::deque<std::__wrap_iter<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const*>,0>((uint64_t)&v14, *a1, a1[1]);
  while (1)
  {
    v3 = v18;
    if (!v18)
      goto LABEL_10;
    quasar::toString(*(_QWORD *)(v15 + ((v17 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v17 & 0x7F), &v13);
    std::string::basic_string[abi:ne180100]<0>(__p, "##");
    v4 = quasar::startsWith((unsigned __int8 *)&v13, (unsigned __int8 *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    if (!v4)
      break;
    std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::pop_front(&v14);
  }
  while (1)
  {
    v3 = v18;
LABEL_10:
    if (!v3)
      break;
    quasar::toString(*(_QWORD *)(v15 + (((v3 + v17 - 1) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v3 + v17 - 1) & 0x7F), &v13);
    std::string::basic_string[abi:ne180100]<0>(__p, "##");
    v5 = quasar::startsWith((unsigned __int8 *)&v13, (unsigned __int8 *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    if (!v5)
      break;
    std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::pop_back(&v14);
  }
  v6 = (char *)(v15 + 8 * (v17 >> 7));
  if (v16 == v15)
  {
    v7 = 0;
    v9 = 0;
    v8 = (char *)(v15 + 8 * ((v18 + v17) >> 7));
  }
  else
  {
    v7 = (__int128 *)(*(_QWORD *)v6 + 32 * (v17 & 0x7F));
    v8 = (char *)(v15 + 8 * ((v18 + v17) >> 7));
    v9 = (__int128 *)(*(_QWORD *)v8 + 32 * ((v18 + v17) & 0x7F));
  }
  std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::vector<std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,0>(a2, v6, v7, v8, v9);
  return std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::~deque[abi:ne180100](&v14);
}

void quasar::pySlice<std::basic_string<char32_t>>(uint64_t *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, std::basic_string<char32_t> *a4@<X8>)
{
  unint64_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  __int32 v10;
  unint64_t v11;
  int v12;
  uint64_t *v13;
  unsigned __int32 v14;

  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    LODWORD(v6) = *((unsigned __int8 *)a1 + 23);
    if (*((_BYTE *)a1 + 23))
      goto LABEL_3;
LABEL_16:
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  v6 = a1[1];
  if (!v6)
    goto LABEL_16;
LABEL_3:
  v7 = vdup_n_s32(v6);
  v8 = vmax_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(a3, a2)), (int8x8_t)v7), (int32x2_t)__PAIR64__(a3, a2)), 0);
  v9 = vmin_s32(v8, v7);
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  v10 = v9.i32[1] - v9.i32[0];
  if (v9.i32[1] > v9.i32[0])
  {
    v14 = v8.i32[0];
    std::basic_string<char32_t>::reserve(a4, v10);
    if ((int)v6 >= (uint64_t)v14)
      v6 = v14;
    else
      v6 = (int)v6;
    do
    {
      v11 = *((unsigned __int8 *)a1 + 23);
      v12 = (char)v11;
      if ((v11 & 0x80u) != 0)
        v11 = a1[1];
      if (v11 <= v6)
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v12 >= 0)
        v13 = a1;
      else
        v13 = (uint64_t *)*a1;
      std::basic_string<char32_t>::push_back(a4, *((_DWORD *)v13 + v6++));
      --v10;
    }
    while (v10);
  }
}

void sub_1ADB93150(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TransformerTokenUtilities::mapTransformerTokenizationToIcu(uint64_t *a1@<X1>, quasar::QsrText **a2@<X2>, uint64_t *a3@<X8>)
{
  quasar::QsrText *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  char v12;
  quasar::QsrText *v13;
  void *__p[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::string __str;
  const void *v33[2];
  char v34;
  void *v35;
  _BYTE *v36;
  char v37;
  std::string v38;
  std::string v39;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a2;
  v13 = a2[1];
  if (*a2 == v13)
    return;
  v5 = 0;
  do
  {
    quasar::corrective_reranking::stripDiacritics(v3, &v39);
    memset(&v38, 0, sizeof(v38));
    LOBYTE(v35) = 0;
    v37 = 0;
    while (1)
    {
      v6 = *a1;
      if (v5 >= (unint64_t)((a1[1] - *a1) >> 6))
        break;
      std::string::basic_string[abi:ne180100]<0>(__p, "#");
      quasar::copyAndTrimLeft((char *)(v6 + ((uint64_t)v5 << 6)), (uint64_t *)__p, v33);
      if (SBYTE7(v16) < 0)
        operator delete(__p[0]);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v38.__r_.__value_.__l.__data_, v33, (uint64_t)&__str);
      if (quasar::startsWith((unsigned __int8 *)&v39, (unsigned __int8 *)&__str))
      {
        std::string::operator=(&v38, &__str);
        if (!v37)
        {
          if (v5 >= (unint64_t)((a1[1] - *a1) >> 6))
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          std::optional<std::vector<float>>::operator=[abi:ne180100]<std::vector<float> const&,void>((uint64_t)&v35, *a1 + ((uint64_t)v5 << 6) + 24);
        }
        ++v5;
        v7 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        else
          size = v38.__r_.__value_.__l.__size_;
        v9 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v9 = v39.__r_.__value_.__l.__size_;
        if (size != v9)
          goto LABEL_30;
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &v39;
        else
          v10 = (std::string *)v39.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v38.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(v38.__r_.__value_.__l.__data_, v10, v38.__r_.__value_.__l.__size_))
            goto LABEL_30;
        }
        else if (*((_BYTE *)&v38.__r_.__value_.__s + 23))
        {
          v11 = &v38;
          while (v11->__r_.__value_.__s.__data_[0] == v10->__r_.__value_.__s.__data_[0])
          {
            v11 = (std::string *)((char *)v11 + 1);
            v10 = (std::string *)((char *)v10 + 1);
            if (!--v7)
              goto LABEL_28;
          }
LABEL_30:
          v12 = 1;
          goto LABEL_31;
        }
      }
      else if (quasar::gLogLevel >= 5)
      {
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        v19 = 0u;
        v16 = 0u;
        v17 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Couldn't match Transformer tokenization with ICU tokenization.", 62);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
LABEL_28:
      v12 = 0;
LABEL_31:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v34 < 0)
      {
        operator delete((void *)v33[0]);
        if ((v12 & 1) == 0)
          break;
      }
      else if ((v12 & 1) == 0)
      {
        break;
      }
    }
    __p[1] = 0;
    *(_QWORD *)&v16 = 0;
    __p[0] = 0;
    if (v37)
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v35, (uint64_t)v36, (v36 - (_BYTE *)v35) >> 2);
    std::vector<quasar::corrective_reranking::TokenClassification>::emplace_back<std::string const&,std::vector<float>,quasar::corrective_reranking::TextRange const&>(a3, (uint64_t)v3, (uint64_t)__p, (uint64_t)v3 + 24);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v37 && v35)
    {
      v36 = v35;
      operator delete(v35);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    v3 = (quasar::QsrText *)((char *)v3 + 32);
  }
  while (v3 != v13);
}

void sub_1ADB9344C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  void *v18;

  if (*(_BYTE *)(v16 - 144))
  {
    v18 = *(void **)(v16 - 168);
    if (v18)
    {
      *(_QWORD *)(v16 - 160) = v18;
      operator delete(v18);
    }
  }
  if (*(char *)(v16 - 113) < 0)
    operator delete(*(void **)(v16 - 136));
  if (*(char *)(v16 - 89) < 0)
    operator delete(*(void **)(v16 - 112));
  __p = a10;
  std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::vector<float>>::operator=[abi:ne180100]<std::vector<float> const&,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (a1 != a2)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t std::vector<quasar::corrective_reranking::TokenClassification>::emplace_back<std::string const&,std::vector<float>,quasar::corrective_reranking::TextRange const&>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v10 = a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  v11 = *(_QWORD *)(v8 - 8);
  if (v11 >= v10)
  {
    v13 = (uint64_t)(v11 - *a1) >> 6;
    if ((unint64_t)(v13 + 1) >> 58)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v9 - *a1;
    v15 = v14 >> 5;
    if (v14 >> 5 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0)
      v16 = 0x3FFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    v23 = v8;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>(v8, v16);
    else
      v17 = 0;
    v19 = v17;
    v20 = &v17[64 * v13];
    v22 = &v17[64 * v16];
    quasar::corrective_reranking::TokenClassification::TokenClassification(v20, a2, a3, a4);
    v21 = v20 + 64;
    std::vector<quasar::corrective_reranking::TokenClassification>::__swap_out_circular_buffer(a1, &v19);
    v12 = a1[1];
    std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer(&v19);
  }
  else
  {
    quasar::corrective_reranking::TokenClassification::TokenClassification(*(_QWORD *)(v8 - 8), a2, a3, a4);
    v12 = v11 + 64;
    a1[1] = v11 + 64;
  }
  a1[1] = v12;
  return v12 - 64;
}

void sub_1ADB936A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::pop_front(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = *(_QWORD *)(a1[1] + ((v2 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v2 & 0x7F);
  if (*(char *)(v3 + 23) < 0)
  {
    operator delete(*(void **)v3);
    v2 = a1[4];
  }
  v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;
  return std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::pop_back(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[5] - 1;
  v3 = *(_QWORD *)(a1[1] + (((unint64_t)(v2 + a1[4]) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v2 + a1[4]) & 0x7F);
  if (*(char *)(v3 + 23) < 0)
  {
    operator delete(*(void **)v3);
    v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[1],char const(&)[1],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADB937C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::erase(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if ((__int128 *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> *,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> *,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> *>((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 9) < 0)
          operator delete(*(void **)(v7 - 32));
        v7 -= 32;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> *,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> *,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((_BYTE *)v5 + 23) = 0;
      *(_DWORD *)v5 = 0;
      *(_QWORD *)(a4 + 24) = *((_QWORD *)v5 + 3);
      a4 += 32;
      v5 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::string const&,quasar::corrective_reranking::TextRange>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v5;
  __int128 v6;

  v5 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
}

void sub_1ADB93948(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange>&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  *(_QWORD *)(v4 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 8) = v4 + 32;
}

void sub_1ADB939B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__emplace_back_slow_path<std::pair<std::string,quasar::corrective_reranking::TextRange>&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  std::string *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[4 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[4 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[4 * v4 + 3] = *((_QWORD *)a2 + 3);
  v16 = (std::string *)((char *)v11 + 32);
  std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADB93AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::reverse_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADB93C94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char32_t>::__init_copy_ctor_external(*(std::wstring **)(a1 + 8), *(const std::wstring::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  *(_QWORD *)(v4 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 8) = v4 + 32;
}

void sub_1ADB93D0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__push_back_slow_path<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  std::wstring *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  std::wstring *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::wstring *)&v10[4 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[4 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char32_t>::__init_copy_ctor_external(v11, *(const std::wstring::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[4 * v4 + 3] = *((_QWORD *)a2 + 3);
  v16 = (std::wstring *)((char *)v11 + 32);
  std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADB93E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::insert(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __pos, const std::basic_string<char32_t>::value_type *__s, std::basic_string<char32_t>::size_type __n)
{
  const std::basic_string<char32_t>::value_type *v5;
  std::basic_string<char32_t>::size_type v8;
  std::basic_string<char32_t>::size_type v9;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v11;
  const std::basic_string<char32_t>::value_type *v12;
  std::basic_string<char32_t>::size_type v14;
  std::basic_string<char32_t>::size_type v15;

  v5 = __s;
  v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8 >= __pos)
    {
      v9 = 4;
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      goto LABEL_6;
    }
LABEL_24:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  size = this->__r_.__value_.__l.__size_;
  if (size < __pos)
    goto LABEL_24;
  v9 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
LABEL_6:
  if (v9 - size >= __n)
  {
    if (__n)
    {
      v11 = this;
      if ((v8 & 0x80) != 0)
        v11 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      if (size != __pos)
      {
        v12 = (const std::basic_string<char32_t>::value_type *)((char *)v11 + 4 * __pos);
        if ((char *)v11 + 4 * size <= (char *)__s || v12 > __s)
          v14 = 0;
        else
          v14 = __n;
        v5 = &__s[v14];
        memmove((void *)&v12[__n], v12, 4 * (size - __pos));
      }
      memmove((char *)v11 + 4 * __pos, v5, 4 * __n);
      v15 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v15;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v15 & 0x7F;
      v11->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::basic_string<char32_t>::__grow_by_and_replace(this, v9, size + __n - v9, size, __pos, 0, __n, __s);
  }
  return this;
}

uint64_t std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::deque<std::__wrap_iter<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const*>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__append_with_size[abi:ne180100]<std::__wrap_iter<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const*>>((_QWORD *)a1, a2, (a3 - a2) >> 5);
  return a1;
}

void sub_1ADB93F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__append_with_size[abi:ne180100]<std::__wrap_iter<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange> const*>>(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::wstring *v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[2];

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = 16 * (v7 - v6) - 1;
  v9 = a1[5] + a1[4];
  v10 = v8 - v9;
  if (a3 > v10)
  {
    std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__add_back_capacity(a1, a3 - v10);
    v6 = a1[1];
    v7 = a1[2];
    v9 = a1[4] + a1[5];
  }
  v11 = (_QWORD *)(v6 + 8 * (v9 >> 7));
  if (v7 == v6)
    v12 = 0;
  else
    v12 = *v11 + 32 * (v9 & 0x7F);
  v23[0] = v6 + 8 * (v9 >> 7);
  v23[1] = v12;
  v13 = std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>::operator+[abi:ne180100]((uint64_t)v23, a3);
  if (v12 != v14)
  {
    v15 = v13;
    v16 = v14;
    do
    {
      if (v11 == v15)
        v17 = v16;
      else
        v17 = *v11 + 4096;
      if (v12 == v17)
      {
        v17 = v12;
      }
      else
      {
        v18 = 0;
        do
        {
          v19 = (std::wstring *)(v12 + v18);
          v20 = (__int128 *)(a2 + v18);
          if (*(char *)(a2 + v18 + 23) < 0)
          {
            std::basic_string<char32_t>::__init_copy_ctor_external(v19, *(const std::wstring::value_type **)v20, *((_QWORD *)v20 + 1));
          }
          else
          {
            v21 = *v20;
            v19->__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v21;
          }
          *(_QWORD *)(v12 + v18 + 24) = *(_QWORD *)(a2 + v18 + 24);
          v18 += 32;
        }
        while (v12 + v18 != v17);
        a2 += v18;
      }
      a1[5] += (v17 - v12) >> 5;
      if (v11 == v15)
        break;
      v22 = v11[1];
      ++v11;
      v12 = v22;
    }
    while (v22 != v16);
  }
}

void sub_1ADB940F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) += v2 >> 5;
  _Unwind_Resume(a1);
}

void std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x7F) != 0)
    v6 = (v5 >> 7) + 1;
  else
    v6 = v5 >> 7;
  v7 = a1[4];
  if (v6 >= v7 >> 7)
    v8 = v7 >> 7;
  else
    v8 = v6;
  if (v6 <= v7 >> 7)
  {
    for (a1[4] = v7 - (v8 << 7); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 127;
          else
            v64 = 128;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 7);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 7;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1ADB94614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 5);
    if (v4 < 1)
      result -= (unint64_t)(127 - v4) >> 7;
    else
      result += (unint64_t)v4 >> 7;
  }
  return result;
}

uint64_t std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 7];
    v7 = (uint64_t)*v6;
    v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          v7 = (uint64_t)*v6;
        }
        v8 += 32;
        if (v8 - v7 == 4096)
        {
          v10 = (uint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 64;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_18;
    v13 = 128;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x80)
    a2 = 1;
  if (v2 < 0x100)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 128;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 16 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x80)
    a2 = 1;
  if (v5 < 0x100)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

std::wstring *std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::vector<std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,0>(std::wstring *a1, char *a2, __int128 *a3, char *a4, __int128 *a5)
{
  unint64_t v6;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a5 == a3)
    v6 = 0;
  else
    v6 = (((uint64_t)a5 - *(_QWORD *)a4) >> 5) + 16 * (a4 - a2) - (((uint64_t)a3 - *(_QWORD *)a2) >> 5);
  std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__init_with_size[abi:ne180100]<std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>>(a1, a2, a3, (int)a4, a5, v6);
  return a1;
}

std::wstring *std::vector<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>::__init_with_size[abi:ne180100]<std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>>(std::wstring *result, _QWORD *a2, __int128 *a3, int a4, __int128 *a5, unint64_t a6)
{
  std::wstring *v10;

  if (a6)
  {
    v10 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a6);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>((uint64_t)&v10->__r_.__value_.__r.__words[2], a2, a3, a4, a5, (std::wstring *)v10->__r_.__value_.__l.__size_);
    v10->__r_.__value_.__l.__size_ = (std::wstring::size_type)result;
  }
  return result;
}

void sub_1ADB949C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::wstring *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,std::__deque_iterator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>&,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>**,long,128l>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>(uint64_t a1, _QWORD *a2, __int128 *a3, int a4, __int128 *a5, std::wstring *this)
{
  std::wstring *v6;
  __int128 *v8;
  __int128 v10;
  __int128 *v11;
  _QWORD v13[3];
  char v14;
  std::wstring *v15;
  std::wstring *v16;

  v6 = this;
  v15 = this;
  v16 = this;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 != a5)
  {
    v8 = a3;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::basic_string<char32_t>::__init_copy_ctor_external(v6, *(const std::wstring::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v10 = *v8;
        v6->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v10;
      }
      v6[1].__r_.__value_.__r.__words[0] = *((_QWORD *)v8 + 3);
      v8 += 2;
      if ((__int128 *)((char *)v8 - *a2) == (__int128 *)4096)
      {
        v11 = (__int128 *)a2[1];
        ++a2;
        v8 = v11;
      }
      v6 = (std::wstring *)((char *)v16 + 32);
      v16 = (std::wstring *)((char *)v16 + 32);
    }
    while (v8 != a5);
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v6;
}

void sub_1ADB94AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>>,std::pair<std::basic_string<char32_t>,quasar::corrective_reranking::TextRange>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  return a1;
}

void TaggedVocab::TaggedVocab(TaggedVocab *this, int a2, unsigned int a3)
{
  unsigned int v3;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  std::locale v8;

  v3 = a3;
  if (a3 >= 0xFFFFE)
    a3 = 1048574;
  Vocab::Vocab(this, a2, a3);
  *v5 = &off_1E5D15DF8;
  Vocab::Vocab((Vocab *)(v5 + 12), 1u, 0xFFFu);
  *((_QWORD *)this + 24) = 0;
  if (v3 >= 0xFFFFF)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"warning: maximum tagged index lowered to ", 41);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
    v7 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale(&v8);
    std::ostream::put();
    std::ostream::flush();
  }
}

void sub_1ADB94BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  Vocab *v10;
  Vocab *v11;
  _QWORD *v12;

  std::locale::~locale(&a10);
  LHash<unsigned int,char const*>::~LHash(v12);
  Vocab::~Vocab(v11);
  Vocab::~Vocab(v10);
  _Unwind_Resume(a1);
}

_QWORD *LHash<unsigned int,char const*>::~LHash(_QWORD *a1)
{
  LHash<unsigned int,double>::clear(a1, 0);
  return a1;
}

void TaggedVocab::~TaggedVocab(TaggedVocab *this)
{
  _QWORD *v2;
  void **v3;
  int v4;
  _BYTE v5[24];
  uint64_t v6;

  *(_QWORD *)this = &off_1E5D15DF8;
  v2 = (_QWORD *)((char *)this + 192);
  LHashIter<unsigned int,char const*>::LHashIter((uint64_t)v5, (_DWORD **)this + 24, 0);
  v4 = 0;
  while (1)
  {
    v3 = (void **)LHashIter<unsigned int,unsigned long>::next((uint64_t)v5, &v4);
    if (!v3)
      break;
    free(*v3);
  }
  if (v6)
    MEMORY[0x1AF44D160](v6, 0x1000C8052888210);
  LHash<unsigned int,double>::clear(v2, 0);
  Vocab::~Vocab((TaggedVocab *)((char *)this + 96));
  Vocab::~Vocab(this);
}

{
  TaggedVocab::~TaggedVocab(this);
  JUMPOUT(0x1AF44D190);
}

_DWORD **TaggedVocab::memStats(TaggedVocab *this, int64x2_t *a2)
{
  Vocab::memStats((uint64_t)this, a2);
  a2->i64[0] -= 96;
  return Vocab::memStats((uint64_t)this + 96, a2);
}

uint64_t TaggedVocab::addWord(TaggedVocab *this, char *a2)
{
  const char *TagSep;
  _BYTE *v5;
  char v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v11;

  TagSep = findTagSep(a2);
  v5 = TagSep;
  if (TagSep)
  {
    v6 = *TagSep;
    *TagSep = 0;
    if (TagSep == a2)
      v7 = 0xFFFFF;
    else
      v7 = Vocab::addWord(this, (Vocab *)a2);
    v8 = Vocab::addWord((TaggedVocab *)((char *)this + 96), (Vocab *)(v5 + 1));
  }
  else
  {
    v7 = Vocab::addWord(this, (Vocab *)a2);
    v6 = 0;
    v8 = 0;
  }
  if (v7 == -1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"maximum number of tagged words (", 32);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") exceeded\n", 11);
  }
  if (v8 == -1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"maximum number of tags (", 24);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") exceeded\n", 11);
    if (!v5)
      return v7 & 0xFFFFF | ((unsigned __int16)v8 << 20);
    goto LABEL_11;
  }
  if (v5)
LABEL_11:
    *v5 = v6;
  return v7 & 0xFFFFF | ((unsigned __int16)v8 << 20);
}

const char *findTagSep(const char *a1)
{
  const char *v1;
  uint64_t v2;

  v1 = a1;
  v2 = strlen(a1) - 1;
  while (1)
  {
    if (v1[v2] == 47)
    {
      if (!v2)
        return v1;
      if (v1[v2 - 1] != 60)
        break;
    }
    if (&v1[--v2] < v1)
      return 0;
  }
  v1 += v2;
  return v1;
}

char *TaggedVocab::getWord(TaggedVocab *this, unsigned int a2)
{
  _QWORD *v4;
  char *v5;
  unsigned int v6;
  const char *Word;
  const char *v8;
  int v9;
  size_t v10;
  unsigned int v12;
  char v13;

  v4 = (_QWORD *)((char *)this + 192);
  v12 = 0;
  if (LHash<unsigned int,double>::locate((_DWORD **)this + 24, a2, &v12))
    return *(char **)(*v4 + 16 * v12 + 8);
  v6 = a2 & 0xFFFFF;
  if (!(a2 >> 20) && v6 != 0xFFFFF)
    return (char *)Vocab::getWord(this, a2);
  if (v6 == 0xFFFFF)
    Word = "";
  else
    Word = (const char *)Vocab::getWord(this, v6);
  if (a2 < 0x100000)
    v8 = "";
  else
    v8 = (const char *)Vocab::getWord((TaggedVocab *)((char *)this + 96), a2 >> 20);
  v5 = 0;
  if (Word && v8)
  {
    v9 = strlen(Word);
    v10 = v9 + strlen(v8) + 3;
    v5 = (char *)malloc_type_malloc(v10, 0x7C0EDEDCuLL);
    snprintf(v5, v10, "%s%c%s", Word, 47, v8);
    v13 = 0;
    *(_QWORD *)LHash<unsigned int,double>::insert(v4, a2, &v13) = v5;
  }
  return v5;
}

uint64_t TaggedVocab::getIndex(TaggedVocab *this, char *a2, uint64_t a3)
{
  const char *TagSep;
  _BYTE *v7;
  char v8;
  int Index;
  int v11;
  unsigned int v12;

  TagSep = findTagSep(a2);
  if (!TagSep)
    return Vocab::getIndex(this, (Vocab *)a2, a3);
  v7 = TagSep;
  v8 = *TagSep;
  *TagSep = 0;
  if (TagSep == a2)
    Index = 0xFFFFF;
  else
    Index = Vocab::getIndex(this, (Vocab *)a2, 0xFFFFFFFFLL);
  v11 = Vocab::getIndex((TaggedVocab *)((char *)this + 96), (Vocab *)(v7 + 1), 0xFFFFFFFFLL);
  *v7 = v8;
  v12 = Index & 0xFFFFF | ((unsigned __int16)v11 << 20);
  if (v11 == -1)
    v12 = a3;
  if (Index == -1)
    return a3;
  else
    return v12;
}

uint64_t TaggedVocab::remove(TaggedVocab *this, char *a2)
{
  const char *TagSep;
  _BYTE *v5;
  char v6;
  uint64_t result;

  TagSep = findTagSep(a2);
  if (!TagSep)
    return Vocab::remove(this, (Vocab *)a2);
  v5 = TagSep;
  v6 = *TagSep;
  *TagSep = 0;
  if (TagSep != a2)
    Vocab::remove(this, (Vocab *)a2);
  result = Vocab::remove((TaggedVocab *)((char *)this + 96), (Vocab *)(v5 + 1));
  *v5 = v6;
  return result;
}

uint64_t TaggedVocab::remove(TaggedVocab *this, unsigned int a2)
{
  TaggedVocab *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = this;
  if (a2 >= 0x100000)
  {
    v3 = a2 >> 20;
    v4 = a2 & 0xFFFFF;
    if (v4 != 0xFFFFF)
      Vocab::remove((uint64_t)this, v4);
    this = (TaggedVocab *)((char *)v2 + 96);
    a2 = v3;
  }
  return Vocab::remove((uint64_t)this, a2);
}

uint64_t TaggedVocab::write(TaggedVocab *this, File *a2, int a3)
{
  unsigned int *v6;
  uint64_t result;
  _BYTE v8[24];
  uint64_t v9;
  unsigned int v10;

  Vocab::write(this, a2, a3);
  VocabIter::VocabIter((VocabIter *)v8, (TaggedVocab *)((char *)this + 96), a3);
  while (!File::error(a2))
  {
    v10 = 0;
    v6 = VocabIter::next((VocabIter *)v8, &v10);
    if (!v6)
      break;
    File::fprintf(a2, "%c%s\n", 47, (const char *)v6);
  }
  result = v9;
  if (v9)
    return MEMORY[0x1AF44D160](v9, 0x50C80EE9192B6);
  return result;
}

void sub_1ADB9524C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    MEMORY[0x1AF44D160](a15, 0x50C80EE9192B6);
  _Unwind_Resume(exception_object);
}

uint64_t Vocab::unkIsWord(Vocab *this)
{
  return (uint64_t)this + 80;
}

uint64_t Vocab::toLower(Vocab *this)
{
  return (uint64_t)this + 81;
}

BOOL TaggedVocab::isNonEvent(TaggedVocab *this, unsigned int a2)
{
  return (~a2 & 0xFFFFF) == 0 || Vocab::isNonEvent(this, a2);
}

uint64_t Vocab::metaTag(Vocab *this)
{
  return (uint64_t)this + 88;
}

uint64_t LHashIter<unsigned int,char const*>::LHashIter(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 12) = *v4 >> 5;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
    LHashIter<unsigned int,char const*>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t LHashIter<unsigned int,char const*>::sortKeys(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  _BYTE v18[24];
  uint64_t v19;

  v2 = **(_DWORD **)a1 & 0x1F;
  v3 = operator new[]();
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = (int *)(*(_QWORD *)a1 + 16);
  do
  {
    v8 = *v7;
    v7 += 4;
    if (v8 != -1)
      *(_DWORD *)(v3 + 4 * v6++) = v5;
    ++v5;
  }
  while (!(v5 >> v2));
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = *(unsigned int *)(a1 + 12);
    LHashIter<unsigned int,double>::LHashIter((uint64_t)v18, a1);
    v10 = 126 - 2 * __clz(v9);
    if ((_DWORD)v9)
      v11 = v10;
    else
      v11 = 0;
    std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,char const*> &,unsigned int *,false>(v4, (unsigned int *)(v4 + 4 * v9), (uint64_t)v18, v11, 1);
    if (v19)
      MEMORY[0x1AF44D160](v19, 0x1000C8052888210);
    v19 = 0;
  }
  v12 = (_DWORD *)operator new[]();
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(_DWORD **)a1;
    v15 = (int *)v4;
    do
    {
      v16 = *v15++;
      *v12++ = v14[4 * v16 + 4];
      --v13;
    }
    while (v13);
  }
  return MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
}

void sub_1ADB9547C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x1AF44D160](a12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,char const*> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  int v20;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 2;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8));
        if ((result & 0x80000000) != 0)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, v9 + 1, (int *)a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, v9 + 1, v9 + 2, (int *)a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, (int *)a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(&v9[v13 >> 1], v9, (int *)a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, &v9[v13 >> 1], (int *)a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9 + 1, v15 - 1, (int *)a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9 + 2, &v9[v14 + 1], (int *)a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(v9 - 1) + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>((unsigned int *)v9, a2, a3);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>(v9, (int *)a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,char const*> &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,char const*> &,unsigned int *>(v17 + 1, (int *)a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,char const*> &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (unsigned int *)v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != (int *)a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,unsigned int *>((unsigned int *)v9, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,char const*> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v10 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) != 0)
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8)
          break;
        v15 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v13 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(unsigned int *)((char *)a1 + v14 + 4) + 8));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == (unsigned int *)a2;
    }
    v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2)
      return 1;
  }
}

uint64_t quasar::QuasarCLogger(quasar *this)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;

  v2 = &unk_1EED8B000;
  if ((v1 & 1) == 0)
  {
    v2 = (_QWORD *)&unk_1EED8B000;
    if (v4)
    {
      quasar::QuasarCLogger(void)::logger = (uint64_t)os_log_create("com.apple.siri", "QuasarC");
      v2 = (_QWORD *)&unk_1EED8B000;
    }
  }
  return v2[182];
}

uint64_t quasar::StandardErrorLoggerFatal(uint64_t a1)
{
  const char *v1;

  if (*(char *)(a1 + 23) >= 0)
    v1 = (const char *)a1;
  else
    v1 = *(const char **)a1;
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "[QSR] FATAL %s\n", v1);
}

uint64_t quasar::StandardErrorLoggerError(uint64_t a1)
{
  const char *v1;

  if (*(char *)(a1 + 23) >= 0)
    v1 = (const char *)a1;
  else
    v1 = *(const char **)a1;
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "[QSR] ERROR %s\n", v1);
}

uint64_t quasar::StandardErrorLoggerWarn(uint64_t a1)
{
  const char *v1;

  if (*(char *)(a1 + 23) >= 0)
    v1 = (const char *)a1;
  else
    v1 = *(const char **)a1;
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "[QSR] WARN %s\n", v1);
}

uint64_t quasar::StandardErrorLoggerProdInfo(uint64_t a1)
{
  const char *v1;

  if (*(char *)(a1 + 23) >= 0)
    v1 = (const char *)a1;
  else
    v1 = *(const char **)a1;
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "[QSR] PRODINFO %s\n", v1);
}

uint64_t quasar::StandardErrorLoggerInfo(uint64_t a1)
{
  const char *v1;

  if (*(char *)(a1 + 23) >= 0)
    v1 = (const char *)a1;
  else
    v1 = *(const char **)a1;
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "[QSR] INFO %s\n", v1);
}

uint64_t quasar::StandardErrorLoggerDebug(uint64_t a1)
{
  const char *v1;

  if (*(char *)(a1 + 23) >= 0)
    v1 = (const char *)a1;
  else
    v1 = *(const char **)a1;
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "[QSR] DEBUG %s\n", v1);
}

uint64_t quasar::StandardErrorLoggerTrace(uint64_t a1)
{
  const char *v1;

  if (*(char *)(a1 + 23) >= 0)
    v1 = (const char *)a1;
  else
    v1 = *(const char **)a1;
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "[QSR] TRACE %s\n", v1);
}

quasar::corrective_reranking::Models *quasar::corrective_reranking::Models::Models(quasar::corrective_reranking::Models *this, const quasar::corrective_reranking::Config *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  quasar::corrective_reranking::OverridesDictionary **v9;
  quasar::corrective_reranking::PhoneticMatcher *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  quasar::corrective_reranking::TransformerClassifier *v17;
  quasar::corrective_reranking::CorrectiveReranker *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  quasar::corrective_reranking::TargetIndexFilter *v23;
  uint64_t v24;
  quasar::corrective_reranking::OverridesDictionary *v25;
  quasar::corrective_reranking::TransformerClassifier **v27;
  uint64_t v28;

  *((_OWORD *)this + 1) = 0u;
  v4 = (uint64_t *)((char *)this + 16);
  v5 = (uint64_t *)((char *)this + 8);
  v27 = (quasar::corrective_reranking::TransformerClassifier **)((char *)this + 24);
  *((_OWORD *)this + 2) = 0u;
  v6 = (uint64_t *)((char *)this + 32);
  v7 = (uint64_t *)((char *)this + 40);
  *((_OWORD *)this + 3) = 0u;
  v8 = (uint64_t *)((char *)this + 48);
  *(_OWORD *)this = 0u;
  v9 = (quasar::corrective_reranking::OverridesDictionary **)((char *)this + 56);
  v10 = (quasar::corrective_reranking::PhoneticMatcher *)operator new();
  quasar::corrective_reranking::PhoneticMatcher::PhoneticMatcher(v10, (const quasar::corrective_reranking::Config *)((char *)a2 + 272));
  std::unique_ptr<quasar::corrective_reranking::PhoneticMatcher>::reset[abi:ne180100]((quasar::corrective_reranking::PhoneticMatcher **)this, v10);
  v11 = operator new();
  quasar::corrective_reranking::VoiceEditingWFST::VoiceEditingWFST(v11, (char *)a2 + 384, (char *)a2 + 408, *((unsigned __int8 *)a2 + 432));
  v12 = *v5;
  *v5 = v11;
  if (v12)
    std::default_delete<quasar::corrective_reranking::VoiceEditingWFST>::operator()[abi:ne180100]((uint64_t)v5, v12);
  v13 = *((unsigned __int8 *)a2 + 463);
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a2 + 56);
  if (v13)
  {
    v14 = operator new();
    quasar::corrective_reranking::VoiceEditingWFST::VoiceEditingWFST(v14, (char *)a2 + 440, (char *)a2 + 464, *((unsigned __int8 *)a2 + 488));
    v28 = 0;
    v15 = *v4;
    *v4 = v14;
    if (v15)
    {
      std::default_delete<quasar::corrective_reranking::VoiceEditingWFST>::operator()[abi:ne180100]((uint64_t)v4, v15);
      v16 = v28;
      v28 = 0;
      if (v16)
        std::default_delete<quasar::corrective_reranking::VoiceEditingWFST>::operator()[abi:ne180100]((uint64_t)&v28, v16);
    }
  }
  v17 = (quasar::corrective_reranking::TransformerClassifier *)operator new();
  quasar::corrective_reranking::TransformerClassifier::TransformerClassifier(v17, (const quasar::corrective_reranking::Config *)((char *)a2 + 328));
  std::unique_ptr<quasar::corrective_reranking::TransformerClassifier>::reset[abi:ne180100](v27, v17);
  v18 = (quasar::corrective_reranking::CorrectiveReranker *)operator new();
  quasar::corrective_reranking::CorrectiveReranker::CorrectiveReranker(v18, (const quasar::corrective_reranking::Config *)((char *)a2 + 40), (const quasar::corrective_reranking::Config *)((char *)a2 + 528), this);
  v28 = 0;
  v19 = *v6;
  *v6 = (uint64_t)v18;
  if (v19)
  {
    std::default_delete<quasar::corrective_reranking::CorrectiveReranker>::operator()[abi:ne180100]((uint64_t)v6, v19);
    v20 = v28;
    v28 = 0;
    if (v20)
      std::default_delete<quasar::corrective_reranking::CorrectiveReranker>::operator()[abi:ne180100]((uint64_t)&v28, v20);
  }
  v21 = operator new();
  quasar::corrective_reranking::FusedIntentClassifier::FusedIntentClassifier(v21, (char *)a2 + 240, (char *)a2 + 528, this, (char *)a2 + 216);
  v22 = *v7;
  *v7 = v21;
  if (v22)
    std::default_delete<quasar::corrective_reranking::FusedIntentClassifier>::operator()[abi:ne180100]((uint64_t)v7, v22);
  v23 = (quasar::corrective_reranking::TargetIndexFilter *)operator new();
  quasar::corrective_reranking::TargetIndexFilter::TargetIndexFilter(v23, (const quasar::corrective_reranking::Config *)((char *)a2 + 496), this);
  v24 = *v8;
  *v8 = (uint64_t)v23;
  if (v24)
    std::default_delete<quasar::corrective_reranking::TargetIndexFilter>::operator()[abi:ne180100]((uint64_t)v8, v24);
  v25 = (quasar::corrective_reranking::OverridesDictionary *)operator new();
  quasar::corrective_reranking::OverridesDictionary::OverridesDictionary(v25, (const quasar::corrective_reranking::Config *)((char *)a2 + 144));
  std::unique_ptr<quasar::corrective_reranking::OverridesDictionary>::reset[abi:ne180100](v9, v25);
  return this;
}

void sub_1ADB95EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, quasar::corrective_reranking::TransformerClassifier **a9)
{
  quasar::corrective_reranking::PhoneticMatcher **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  quasar::corrective_reranking::OverridesDictionary **v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  MEMORY[0x1AF44D190](v16, 0x10A0C402A29AD3ELL);
  std::unique_ptr<quasar::corrective_reranking::OverridesDictionary>::reset[abi:ne180100](v15, 0);
  v18 = *v14;
  *v14 = 0;
  if (v18)
    std::default_delete<quasar::corrective_reranking::TargetIndexFilter>::operator()[abi:ne180100]((uint64_t)v14, v18);
  v19 = *v13;
  *v13 = 0;
  if (v19)
    std::default_delete<quasar::corrective_reranking::FusedIntentClassifier>::operator()[abi:ne180100]((uint64_t)v13, v19);
  v20 = *v12;
  *v12 = 0;
  if (v20)
    std::default_delete<quasar::corrective_reranking::CorrectiveReranker>::operator()[abi:ne180100]((uint64_t)v12, v20);
  std::unique_ptr<quasar::corrective_reranking::TransformerClassifier>::reset[abi:ne180100](a9, 0);
  v21 = *v11;
  *v11 = 0;
  if (v21)
    std::default_delete<quasar::corrective_reranking::VoiceEditingWFST>::operator()[abi:ne180100]((uint64_t)v11, v21);
  v22 = *v10;
  *v10 = 0;
  if (v22)
    std::default_delete<quasar::corrective_reranking::VoiceEditingWFST>::operator()[abi:ne180100]((uint64_t)v10, v22);
  std::unique_ptr<quasar::corrective_reranking::PhoneticMatcher>::reset[abi:ne180100](v9, 0);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Models::~Models(quasar::corrective_reranking::OverridesDictionary **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  std::unique_ptr<quasar::corrective_reranking::OverridesDictionary>::reset[abi:ne180100](this + 7, 0);
  v2 = (uint64_t)this[6];
  this[6] = 0;
  if (v2)
    std::default_delete<quasar::corrective_reranking::TargetIndexFilter>::operator()[abi:ne180100]((uint64_t)(this + 6), v2);
  v3 = (uint64_t)this[5];
  this[5] = 0;
  if (v3)
    std::default_delete<quasar::corrective_reranking::FusedIntentClassifier>::operator()[abi:ne180100]((uint64_t)(this + 5), v3);
  v4 = (uint64_t)this[4];
  this[4] = 0;
  if (v4)
    std::default_delete<quasar::corrective_reranking::CorrectiveReranker>::operator()[abi:ne180100]((uint64_t)(this + 4), v4);
  std::unique_ptr<quasar::corrective_reranking::TransformerClassifier>::reset[abi:ne180100](this + 3, 0);
  v5 = (uint64_t)this[2];
  this[2] = 0;
  if (v5)
    std::default_delete<quasar::corrective_reranking::VoiceEditingWFST>::operator()[abi:ne180100]((uint64_t)(this + 2), v5);
  v6 = (uint64_t)this[1];
  this[1] = 0;
  if (v6)
    std::default_delete<quasar::corrective_reranking::VoiceEditingWFST>::operator()[abi:ne180100]((uint64_t)(this + 1), v6);
  std::unique_ptr<quasar::corrective_reranking::PhoneticMatcher>::reset[abi:ne180100](this, 0);
}

void quasar::corrective_reranking::Models::generateWFSTParses(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, unsigned __int8 *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 **v11;
  __int128 **v12;
  unint64_t v13;
  uint64_t v14;
  quasar::corrective_reranking::Parse *v15;
  quasar::corrective_reranking::Parse *v16;
  int v17;
  BOOL v18;
  unsigned __int8 *v19;
  uint64_t v20;
  void **v21;
  unint64_t v22;
  unsigned __int8 *v23;
  BOOL v24;
  BOOL v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;
  void *p_p;
  void *v36;
  _QWORD *v37;
  std::string __p;
  void *v39[2];
  unsigned __int8 v40;
  std::vector<int> v41;
  char v42;
  _QWORD v43[3];

  v43[1] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v8 = *(std::string **)(a1 + 8);
    if (v8)
      goto LABEL_6;
LABEL_60:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v41, "wfstToUse");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41);
  }
  if (a2 != 1)
    goto LABEL_60;
  v8 = *(std::string **)(a1 + 16);
  if (!v8)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    return;
  }
LABEL_6:
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  v9 = *a3;
  v10 = a3[1];
  if (*a3 != v10)
  {
    do
    {
      quasar::corrective_reranking::tokenize(v9, 0, (__int128 *)v39);
      quasar::corrective_reranking::getTokens((__int128 **)v39, (uint64_t *)&v41);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      quasar::corrective_reranking::VoiceEditingWFST::search(v8, (std::allocator<std::string> *)&v41, 0, a5, a6, (uint64_t *)v39);
      v12 = (__int128 **)v39[0];
      v11 = (__int128 **)v39[1];
      while (v12 != v11)
      {
        quasar::corrective_reranking::VoiceEditingWFST::Path::getOutputs(v12, &__p);
        p_p = COERCE_VOID_(quasar::corrective_reranking::VoiceEditingWFST::Path::getWeight((quasar::corrective_reranking::VoiceEditingWFST::Path *)v12));
        v13 = a7[1];
        if (v13 >= a7[2])
        {
          v14 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string>,double>(a7, v9, (__int128 **)&__p, (double *)&p_p);
        }
        else
        {
          std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string>,double>((uint64_t)(a7 + 2), (std::string *)a7[1], v9, (__int128 **)&__p, (double *)&p_p);
          v14 = v13 + 232;
          a7[1] = v13 + 232;
        }
        a7[1] = v14;
        p_p = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        v12 += 11;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
      std::vector<quasar::corrective_reranking::VoiceEditingWFST::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v39[0] = &v41;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
      v9 += 32;
    }
    while (v9 != v10);
    v15 = (quasar::corrective_reranking::Parse *)*a7;
    v16 = (quasar::corrective_reranking::Parse *)a7[1];
    if ((quasar::corrective_reranking::Parse *)*a7 != v16)
    {
      do
      {
        quasar::corrective_reranking::Parse::getTarget(v15, (uint64_t *)&v41);
        quasar::corrective_reranking::detokenize(v39, &v41);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v17 = (char)a4[23];
        v18 = v17 < 0;
        if (v17 >= 0)
          v19 = a4;
        else
          v19 = *(unsigned __int8 **)a4;
        if (v18)
          v20 = *((_QWORD *)a4 + 1);
        else
          v20 = a4[23];
        if ((v40 & 0x80u) == 0)
          v21 = v39;
        else
          v21 = (void **)v39[0];
        if ((v40 & 0x80u) == 0)
          v22 = v40;
        else
          v22 = (unint64_t)v39[1];
        v23 = &v19[v20];
        if (v20)
          v24 = v22 == 0;
        else
          v24 = 1;
        if (v24)
        {
          v28 = &v19[v20];
        }
        else
        {
          v27 = v19;
          v28 = &v19[v20];
          do
          {
            if (*v27 == *(unsigned __int8 *)v21)
            {
              v29 = 1;
              while (v22 != v29)
              {
                if (&v27[v29] == v23)
                  goto LABEL_33;
                v30 = v27[v29];
                v31 = *((unsigned __int8 *)v21 + v29++);
                if (v30 != v31)
                  goto LABEL_51;
              }
              v28 = v27;
            }
LABEL_51:
            ++v27;
          }
          while (v27 != v23);
        }
LABEL_33:
        v25 = v28 != v23 || v22 == 0;
        LOBYTE(v41.__begin_) = 0;
        v42 = 0;
        if (v25 && v28 - v19 != -1)
        {
          quasar::SystemConfig::Version::Version(v43, (_DWORD)v28 - (_DWORD)v19, v22);
          v26 = operator new(8uLL);
          p_p = v26;
          *v26 = v43[0];
          v36 = v26 + 1;
          v37 = v26 + 1;
          quasar::corrective_reranking::TargetRange::TargetRange(&__p, (uint64_t)&p_p);
          std::optional<quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100]<quasar::corrective_reranking::TargetRange,void>(&v41, (__n128 *)&__p);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (p_p)
          {
            v36 = p_p;
            operator delete(p_p);
          }
        }
        std::__optional_storage_base<quasar::corrective_reranking::TargetRange,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<quasar::corrective_reranking::TargetRange,false> const&>((uint64_t)v15 + 88, (uint64_t)&v41);
        if (v42 && v41.__begin_)
        {
          v41.__end_ = v41.__begin_;
          operator delete(v41.__begin_);
        }
        if ((char)v40 < 0)
          operator delete(v39[0]);
        v15 = (quasar::corrective_reranking::Parse *)((char *)v15 + 232);
      }
      while (v15 != v16);
    }
  }
}

void sub_1ADB9649C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,uint64_t a27,char a28)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::Models::clearShortTermCache(quasar::corrective_reranking::TransformerClassifier **this)
{
  quasar::corrective_reranking::TransformerClassifier::clearCache(this[3]);
}

void quasar::corrective_reranking::Models::clearLongTermCache(quasar::corrective_reranking::PhoneticMatcher **this)
{
  quasar::corrective_reranking::PhoneticMatcher::clearCache(*this);
}

quasar::corrective_reranking::PhoneticMatcher *std::unique_ptr<quasar::corrective_reranking::PhoneticMatcher>::reset[abi:ne180100](quasar::corrective_reranking::PhoneticMatcher **a1, quasar::corrective_reranking::PhoneticMatcher *a2)
{
  quasar::corrective_reranking::PhoneticMatcher *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::corrective_reranking::PhoneticMatcher::~PhoneticMatcher(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void std::default_delete<quasar::corrective_reranking::VoiceEditingWFST>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a2 + 72);
    std::__hash_table<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<quasar::corrective_reranking::VoiceEditingWFST::Edge>>>>::~__hash_table(a2 + 32);
    std::__tree<std::string>::destroy(a2 + 8, *(char **)(a2 + 16));
    JUMPOUT(0x1AF44D190);
  }
}

quasar::corrective_reranking::TransformerClassifier *std::unique_ptr<quasar::corrective_reranking::TransformerClassifier>::reset[abi:ne180100](quasar::corrective_reranking::TransformerClassifier **a1, quasar::corrective_reranking::TransformerClassifier *a2)
{
  quasar::corrective_reranking::TransformerClassifier *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::corrective_reranking::TransformerClassifier::~TransformerClassifier(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void std::default_delete<quasar::corrective_reranking::CorrectiveReranker>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a2 + 256) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = (void **)(a2 + 232);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 192);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 152);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 112);
    v4 = (void **)(a2 + 80);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = (void **)(a2 + 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    MEMORY[0x1AF44D190](a2, 0x10F2C4084E37CF3);
  }
}

void std::default_delete<quasar::corrective_reranking::FusedIntentClassifier>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = (void **)(a2 + 8);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x1AF44D190](a2, 0x60C409743DB05);
  }
}

uint64_t std::default_delete<quasar::corrective_reranking::TargetIndexFilter>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    *(_QWORD *)(a2 + 80) = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy(a2 + 80);
    kaldi::CuMatrix<float>::~CuMatrix(a2 + 32);
    v4 = (void **)(a2 + 8);
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x1AF44D190](a2, 0x10E0C4043F1346FLL);
  }
  return result;
}

quasar::corrective_reranking::OverridesDictionary *std::unique_ptr<quasar::corrective_reranking::OverridesDictionary>::reset[abi:ne180100](quasar::corrective_reranking::OverridesDictionary **a1, quasar::corrective_reranking::OverridesDictionary *a2)
{
  quasar::corrective_reranking::OverridesDictionary *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::corrective_reranking::OverridesDictionary::~OverridesDictionary(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string>,double>(uint64_t *a1, uint64_t a2, __int128 **a3, double *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  std::string *v15;
  std::string::value_type *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x11A7B9611A7B961)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3) > v6)
    v6 = 0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x34F72C234F72C235 * ((a1[2] - *a1) >> 3)) >= 0x8D3DCB08D3DCB0)
    v10 = 0x11A7B9611A7B961;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = (std::string *)&v11[232 * v5];
  v17 = &v11[232 * v10];
  std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string>,double>((uint64_t)(a1 + 2), v15, a2, a3, a4);
  v16 = &v15[9].__r_.__value_.__s.__data_[16];
  std::vector<quasar::corrective_reranking::Parse>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1ADB96984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::corrective_reranking::Parse>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::corrective_reranking::Parse>::construct[abi:ne180100]<quasar::corrective_reranking::Parse,quasar::corrective_reranking::ASRCandidate const&,std::vector<std::string>,double>(uint64_t a1, std::string *a2, uint64_t a3, __int128 **a4, double *a5)
{
  double v8;
  float v9;
  void **v10[3];
  __int128 *v11[3];
  void *__p;
  void *v13;
  uint64_t v14;
  void *v15[2];
  char v16;
  void *v17[3];
  char v18;
  void ***v19;

  v8 = *a5;
  LOBYTE(v17[0]) = 0;
  v18 = 0;
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  v9 = v8;
  __p = 0;
  v13 = 0;
  v14 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  quasar::corrective_reranking::Parse::Parse(a2, a3, a4, (uint64_t)v17, (__int128 *)v15, (uint64_t)&__p, 1, v11, v9, 0.0, (__int128 **)v10);
  v19 = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  v10[0] = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v10);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18)
  {
    if (v17[0])
    {
      v17[1] = v17[0];
      operator delete(v17[0]);
    }
  }
}

void sub_1ADB96A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(v29 - 72) = v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 72));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a24 < 0)
    operator delete(a19);
  if (a28)
  {
    if (a25)
    {
      a26 = (uint64_t)a25;
      operator delete(a25);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::DerivedEnumerator::DerivedEnumerator(uint64_t a1, __int128 *a2, quasar::SystemConfig *a3, uint64_t a4)
{
  quasar::PTree *Child;
  int **v9;
  uint64_t SpeechModelInfo;
  __int128 v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  int *v15;
  int v16;
  int v17;
  const char *v19;
  int *v22;
  int v24;
  int v25;
  quasar::EnLikeAlgorithm *v27;
  uint64_t v28;
  void *__p[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *v47[2];
  char v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;

  std::string::basic_string[abi:ne180100]<0>(__p, "tag-sequences");
  Child = (quasar::PTree *)quasar::PTree::getChild(a4, (__int128 *)__p);
  quasar::SimpleNameEnumerator::SimpleNameEnumerator((_QWORD *)a1, a2, Child);
  if (SBYTE7(v31) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &off_1E5D363E8;
  v9 = (int **)(a1 + 56);
  SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo(a3);
  if (*(char *)(SpeechModelInfo + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(SpeechModelInfo + 120), *(_QWORD *)(SpeechModelInfo + 128));
  }
  else
  {
    v11 = *(_OWORD *)(SpeechModelInfo + 120);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(SpeechModelInfo + 136);
    *(_OWORD *)v9 = v11;
  }
  v12 = operator new();
  *(_OWORD *)(v12 + 8) = xmmword_1AE1402C0;
  *(_DWORD *)(v12 + 24) = 0;
  *(_QWORD *)v12 = &unk_1E5D40240;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065185444;
  std::string::basic_string[abi:ne180100]<0>(__p, "derived");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a3, 110, 0, (uint64_t)__p);
  if (SBYTE7(v31) < 0)
    operator delete(__p[0]);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v13 = *(char *)(a1 + 79);
  if ((v13 & 0x80000000) == 0)
  {
    if (v13 != 5)
      goto LABEL_28;
    v14 = *(_DWORD *)v9 == 1432317541 && *(_BYTE *)(a1 + 60) == 83;
    v15 = (int *)(a1 + 56);
    if (!v14)
      goto LABEL_14;
LABEL_26:
    v19 = "en-like";
    goto LABEL_27;
  }
  if (*(_QWORD *)(a1 + 64) != 5)
    goto LABEL_28;
  v15 = *v9;
  if (**v9 == 1432317541 && *((_BYTE *)*v9 + 4) == 83)
    goto LABEL_26;
LABEL_14:
  v16 = *v15;
  v17 = *((unsigned __int8 *)v15 + 4);
  if (v16 == 1130326138 && v17 == 78)
  {
    v19 = "zh-like";
LABEL_27:
    MEMORY[0x1AF44C914](&v49, v19);
  }
LABEL_28:
  std::string::basic_string[abi:ne180100]<0>(__p, "algorithm");
  std::string::basic_string[abi:ne180100]<0>(v47, "Algorithm name. Possible values: en-like, zh-like");
  quasar::SystemConfig::Register<std::string>((uint64_t)a3, (const void **)__p, (uint64_t)&v49, (uint64_t)v47, 0, 110, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v48 < 0)
    operator delete(v47[0]);
  if (SBYTE7(v31) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "derived-frequency-scale");
  std::string::basic_string[abi:ne180100]<0>(v47, "Frequency of original word is multiplied by this number to obtain frequency of derived word.");
  quasar::SystemConfig::Register<float>((uint64_t)a3, (const void **)__p, a1 + 280, (uint64_t)v47, 0, 258, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v48 < 0)
    operator delete(v47[0]);
  if (SBYTE7(v31) < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::readPtreeAtPrefix(a3, 0, 0);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
    if (SHIBYTE(v51) != 7)
      goto LABEL_60;
    if ((_DWORD)v49 != 1814916709 || *(_DWORD *)((char *)&v49 + 3) != 1701538156)
    {
      v22 = (int *)&v49;
      goto LABEL_48;
    }
LABEL_54:
    v27 = (quasar::EnLikeAlgorithm *)operator new();
    *(_OWORD *)v27 = 0u;
    *((_OWORD *)v27 + 1) = 0u;
    quasar::EnLikeAlgorithm::EnLikeAlgorithm(v27);
    goto LABEL_55;
  }
  if (v50 != 7)
    goto LABEL_60;
  v22 = v49;
  if (*v49 == 1814916709 && *(int *)((char *)v49 + 3) == 1701538156)
    goto LABEL_54;
LABEL_48:
  v24 = *v22;
  v25 = *(int *)((char *)v22 + 3);
  if (v24 != 1814915194 || v25 != 1701538156)
  {
LABEL_60:
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Invalid algorithm", 17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v27 = (quasar::EnLikeAlgorithm *)operator new();
  *(_OWORD *)v27 = 0u;
  *((_OWORD *)v27 + 1) = 0u;
  quasar::ZhLikeAlgorithm::ZhLikeAlgorithm(v27);
LABEL_55:
  v28 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v27;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (SHIBYTE(v51) < 0)
    operator delete(v49);
  return a1;
}

void sub_1ADB96F88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 73) < 0)
    operator delete(*(void **)(v16 - 96));
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADB96FF4);
}

void sub_1ADB96FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    JUMPOUT(0x1ADB97000);
  JUMPOUT(0x1ADB97004);
}

void sub_1ADB96FDC()
{
  JUMPOUT(0x1ADB97004);
}

void sub_1ADB96FE4()
{
  JUMPOUT(0x1ADB97024);
}

void sub_1ADB96FF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (*(char *)(v4 - 49) < 0)
    operator delete(*(void **)(v4 - 72));
  v6 = *(_QWORD *)(v1 + 272);
  *(_QWORD *)(v1 + 272) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(v3);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  quasar::SimpleNameEnumerator::~SimpleNameEnumerator((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1ADB97044()
{
  JUMPOUT(0x1ADB97034);
}

void sub_1ADB9704C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADB9703CLL);
}

void quasar::SimpleNameEnumerator::~SimpleNameEnumerator(void **this)
{
  void **v2;

  *this = off_1E5D37CE8;
  v2 = this + 4;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::NameEnumerator::~NameEnumerator(this);
}

{
  void **v2;

  *this = off_1E5D37CE8;
  v2 = this + 4;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::NameEnumerator::~NameEnumerator(this);
}

{
  void **v2;

  *this = off_1E5D37CE8;
  v2 = this + 4;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::NameEnumerator::~NameEnumerator(this);
  MEMORY[0x1AF44D190]();
}

void quasar::DerivedEnumerator::createTokens(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int *v8;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v10;
  int v11;
  uint64_t v12;
  UChar32 v13;
  std::basic_string<char32_t>::size_type v14;
  int v15;
  uint64_t v16;
  std::basic_string<char32_t>::value_type v17;
  int v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  std::basic_string<char32_t> v26[11];
  std::basic_string<char32_t> v27;
  __int128 v28;
  unint64_t v29;

  v29 = 0;
  v3 = 0uLL;
  v28 = 0u;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    v22 = 0;
    goto LABEL_49;
  }
  v23 = a3;
  do
  {
    memset(&v27, 0, sizeof(v27));
    v7 = *(unsigned __int8 *)(v4 + 23);
    if ((v7 & 0x80u) == 0)
      v8 = (int *)v4;
    else
      v8 = *(int **)v4;
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(v4 + 8);
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(a2, v8, (int *)((char *)v8 + v7), v26);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v27 = v26[0];
    v26[0].__r_.__value_.__s.__data_[0] = 0;
    v25 = 0;
    size = HIBYTE(v26[0].__r_.__value_.__r.__words[2]);
    if ((v26[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v27;
    else
      v10 = (std::basic_string<char32_t> *)v27.__r_.__value_.__r.__words[0];
    if ((v26[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v27.__r_.__value_.__l.__size_;
    if (!size)
    {
      v24 = 2;
LABEL_34:
      if (v26[0].__r_.__value_.__s.__data_[0] > 0 || SHIDWORD(v25) >= 1)
      {
        v15 = 0;
        v24 = 0;
      }
      else
      {
        v15 = 2;
      }
      goto LABEL_38;
    }
    v11 = 0;
    v12 = 4 * size;
    do
    {
      v13 = v10->__r_.__value_.__s.__data_[0];
      if (u_isalpha(v10->__r_.__value_.__s.__data_[0]))
      {
        if (quasar::isCJK(v13))
          ++v26[0].__r_.__value_.__s.__data_[0];
        else
          ++HIDWORD(v25);
      }
      else if (u_isWhitespace(v13))
      {
        ++v11;
      }
      else if (u_charType(v13) == 20 || v13 == 39 || v13 == 34)
      {
        LODWORD(v25) = v25 + 1;
      }
      v10 = (std::basic_string<char32_t> *)((char *)v10 + 4);
      v12 -= 4;
    }
    while (v12);
    v24 = 2;
    if (v11 <= 0)
      goto LABEL_34;
    v14 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = v27.__r_.__value_.__l.__size_;
    if (v14 != v11)
      goto LABEL_34;
    v15 = 1;
    v24 = 1;
LABEL_38:
    v16 = *((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1) >= v29)
    {
      v21 = std::vector<quasar::DerivedEnumerator::Token>::__emplace_back_slow_path<std::string const&,quasar::DerivedEnumerator::TokenType &,int &,int &,int &>((uint64_t *)&v28, (__int128 *)v4, &v24, (int *)v26, (int *)&v25 + 1, (int *)&v25);
    }
    else
    {
      v18 = HIDWORD(v25);
      v17 = v26[0].__r_.__value_.__s.__data_[0];
      v19 = v25;
      if (*(char *)(v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)&v28 + 1), *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      }
      else
      {
        v20 = *(_OWORD *)v4;
        *(_QWORD *)(*((_QWORD *)&v28 + 1) + 16) = *(_QWORD *)(v4 + 16);
        *(_OWORD *)v16 = v20;
      }
      *(_DWORD *)(v16 + 24) = v15;
      *(_DWORD *)(v16 + 28) = v17;
      v21 = v16 + 40;
      *(_DWORD *)(v16 + 32) = v18;
      *(_DWORD *)(v16 + 36) = v19;
    }
    *((_QWORD *)&v28 + 1) = v21;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v4 += 24;
  }
  while (v4 != v5);
  v3 = v28;
  v22 = v29;
  a3 = v23;
LABEL_49:
  *(_OWORD *)a3 = v3;
  *(_QWORD *)(a3 + 16) = v22;
  v29 = 0;
  v28 = 0uLL;
  v26[0].__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)&v28;
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
}

void sub_1ADB97344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v14 + 312) = v13;
  if (*(char *)(v15 - 137) < 0)
    operator delete(*(void **)(v14 + 272));
  *(_QWORD *)&a13 = v15 - 128;
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void quasar::DerivedEnumerator::combineTokens(__int128 **a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  std::vector<int>::size_type v16;
  uint64_t v17;
  std::vector<int>::pointer begin;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  __int128 *v23;
  __int128 *v24;
  unint64_t v25;
  int v26;
  std::vector<int>::pointer v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  std::vector<int>::pointer v34;
  int v35;
  std::vector<int>::pointer v36;
  int v37;
  int v39;
  int v40;
  std::string::size_type size;
  uint64_t v42;
  std::vector<int> v43;
  std::vector<int> v44;

  v3 = *a1;
  v4 = a1[1];
  v5 = ((char *)v4 - (char *)*a1) / 40;
  if (v4 == *a1)
    goto LABEL_19;
  v7 = 0;
  v8 = v5 <= 1 ? 1 : ((char *)v4 - (char *)*a1) / 40;
  v9 = (int *)v3 + 6;
  v10 = -1;
  v11 = -1;
  do
  {
    v13 = *v9;
    v9 += 10;
    v12 = v13;
    if (v11 == -1 && v12 == 0)
      v11 = v7;
    if (!v12)
      v10 = v7;
    ++v7;
  }
  while (v8 != v7);
  if (v11 == -1 || v10 == -1)
  {
LABEL_19:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    std::vector<quasar::DerivedEnumerator::Token>::__init_with_size[abi:ne180100]<quasar::DerivedEnumerator::Token*,quasar::DerivedEnumerator::Token*>(a2, v3, v4, v5);
  }
  else
  {
    std::vector<int>::vector(&v44, v5);
    v16 = ((char *)a1[1] - (char *)*a1) / 40;
    if (a1[1] != *a1)
    {
      v17 = 0;
      begin = v44.__begin_;
      v19 = v11;
      if (v16 <= 1)
        v20 = 1;
      else
        v20 = ((char *)a1[1] - (char *)*a1) / 40;
      v21 = (_DWORD *)*a1 + 6;
      do
      {
        if (v17 > v19)
        {
          if (*v21)
            v22 = v11;
          else
            v22 = v17;
          if (*v21 == 1)
            v11 = -1;
          else
            v11 = v22;
        }
        begin[v17++] = v11;
        v21 += 10;
      }
      while (v20 != v17);
    }
    std::vector<int>::vector(&v43, v16);
    v23 = *a1;
    v24 = a1[1];
    v25 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v24 - (char *)*a1) >> 3);
    v26 = v25 - 1;
    if ((int)v25 >= 1)
    {
      v27 = v43.__begin_;
      v28 = -858993459 * (((char *)v24 - (char *)*a1) >> 3);
      v29 = v10;
      do
      {
        v30 = v28--;
        if (v30 <= v29)
        {
          v31 = *((_DWORD *)v23 + 10 * v28 + 6);
          if (v31 == 1)
          {
            v10 = -1;
          }
          else if (!v31)
          {
            v10 = v26;
          }
        }
        v27[v28] = v10;
        --v26;
      }
      while ((unint64_t)(v28 + 1) > 1);
    }
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    if (v24 != v23)
    {
      v32 = 0;
      v33 = 0;
      while (1)
      {
        v34 = v44.__begin_;
        v35 = v44.__begin_[v33];
        if (v35 != -1)
        {
          v36 = v43.__begin_;
          v37 = v43.__begin_[v33];
          if (v37 != -1 && v35 != v37)
          {
            v44.__begin_[v33] = -1;
            v36[v33] = -1;
          }
        }
        if (!v33)
          break;
        v39 = v34[v33];
        if (v39 == -1 && v43.__begin_[v33] == -1)
        {
          size = a2->__r_.__value_.__l.__size_;
          if (size < a2->__r_.__value_.__r.__words[2])
          {
LABEL_65:
            std::vector<quasar::DerivedEnumerator::Token>::__construct_one_at_end[abi:ne180100]<quasar::DerivedEnumerator::Token const&>((uint64_t)a2, (__int128 *)((char *)v23 + v32));
LABEL_66:
            v42 = size + 40;
LABEL_69:
            a2->__r_.__value_.__l.__size_ = v42;
            goto LABEL_70;
          }
LABEL_67:
          v23 = (__int128 *)((char *)v23 + 40 * v33);
LABEL_68:
          v42 = std::vector<quasar::DerivedEnumerator::Token>::__push_back_slow_path<quasar::DerivedEnumerator::Token const&>((uint64_t *)a2, v23);
          goto LABEL_69;
        }
        v40 = v34[v33 - 1];
        if (v40 == -1 && v43.__begin_[v33 - 1] == -1)
        {
          size = a2->__r_.__value_.__l.__size_;
          if (size < a2->__r_.__value_.__r.__words[2])
            goto LABEL_65;
          goto LABEL_67;
        }
        if (v40 == v39)
        {
          size = a2->__r_.__value_.__l.__size_;
        }
        else
        {
          size = a2->__r_.__value_.__l.__size_;
          if (v43.__begin_[v33 - 1] != v43.__begin_[v33])
          {
            v23 = (__int128 *)((char *)v23 + v32);
            if (size >= a2->__r_.__value_.__r.__words[2])
              goto LABEL_68;
            goto LABEL_57;
          }
        }
        quasar::DerivedEnumerator::Token::append((quasar::DerivedEnumerator::Token *)(size - 40), (const Token *)((char *)v23 + v32));
LABEL_70:
        ++v33;
        v23 = *a1;
        v32 += 40;
        if (0xCCCCCCCCCCCCCCCDLL * (((char *)a1[1] - (char *)*a1) >> 3) <= v33)
          goto LABEL_71;
      }
      size = a2->__r_.__value_.__l.__size_;
      if (size >= a2->__r_.__value_.__r.__words[2])
        goto LABEL_68;
LABEL_57:
      std::vector<quasar::DerivedEnumerator::Token>::__construct_one_at_end[abi:ne180100]<quasar::DerivedEnumerator::Token const&>((uint64_t)a2, v23);
      goto LABEL_66;
    }
LABEL_71:
    if (v43.__begin_)
    {
      v43.__end_ = v43.__begin_;
      operator delete(v43.__begin_);
    }
    if (v44.__begin_)
    {
      v44.__end_ = v44.__begin_;
      operator delete(v44.__begin_);
    }
  }
}

void sub_1ADB977AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

quasar::DerivedEnumerator::Token *quasar::DerivedEnumerator::Token::append(quasar::DerivedEnumerator::Token *this, const Token *data)
{
  const Token *v2;
  unint64_t size;
  std::string::size_type v5;
  int v6;
  int var0;

  v2 = data;
  size = data->tokenName.__r_.__value_.var0.var1.__size_;
  if (*((char *)&data->tokenName.__r_.__value_.var0.var1 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)&data->tokenName.__r_.__value_.var0.var1 + 23);
  }
  else
  {
    data = (const Token *)data->tokenName.__r_.__value_.var0.var1.__data_;
    v5 = size;
  }
  std::string::append((std::string *)this, data->tokenName.__r_.__value_.var0.var0.__data_, v5);
  *(int32x2_t *)((char *)this + 28) = vadd_s32(*(int32x2_t *)((char *)this + 28), *(int32x2_t *)&v2->tokenName.__r_.var1);
  *((_DWORD *)this + 9) += HIDWORD(v2->tokenName.var0);
  v6 = *((_DWORD *)this + 6);
  if (!v6)
    goto LABEL_9;
  var0 = v2->tokenName.__r_.var0;
  if (!var0)
  {
    v6 = 0;
    goto LABEL_9;
  }
  if (v6 != var0)
  {
    v6 = 2;
LABEL_9:
    *((_DWORD *)this + 6) = v6;
  }
  return this;
}

uint64_t quasar::DerivedEnumerator::processOpenPunctuation(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int *i;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v11;
  int *v12;
  int v13;

  v1 = *a1;
  v2 = a1[1] - *a1;
  if (!v2)
    return 0;
  v3 = 0;
  v4 = v2 / 40;
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  for (i = (int *)(v1 - 16); i[13] < 1; i += 10)
  {
    if (v5 == ++v3)
      return 0;
  }
  do
  {
    v9 = v3;
    if (v3-- < 1)
    {
      LODWORD(v3) = 0;
      goto LABEL_14;
    }
    v8 = *i;
    i -= 10;
  }
  while (v8 == 1);
  LODWORD(v3) = v3 + 1;
LABEL_14:
  v11 = (int)v3;
  if (v4 <= (int)v3)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v12 = (int *)(v1 + 40 * (int)(v9 & ~(v9 >> 63)) + 24);
    v3 = (int)v3;
    do
    {
      v13 = *v12;
      v12 += 10;
      if (v13)
        v7 = v7;
      else
        v7 = (v7 + 1);
      ++v3;
    }
    while (v4 > v3);
  }
  std::vector<quasar::DerivedEnumerator::Token>::resize(a1, v11);
  return v7;
}

void std::vector<quasar::DerivedEnumerator::Token>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<quasar::DerivedEnumerator::Token>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (v3 != v7)
    {
      if (*(char *)(v3 - 17) < 0)
        operator delete(*(void **)(v3 - 40));
      v3 -= 40;
    }
    a1[1] = v7;
  }
}

_QWORD *quasar::DerivedEnumerator::SpokenTokens::SpokenTokens(_QWORD *a1, uint64_t a2)
{
  void **v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[3] = 0;
  v3 = (void **)(a1 + 3);
  a1[4] = 0;
  a1[5] = 0;
  v5 = *a1;
  v4 = a1[1];
  if (v4 != *a1)
  {
    v6 = 0;
    v7 = 0;
    v8 = a1 + 5;
    do
    {
      if (!*(_DWORD *)(v5 + 40 * v7 + 24))
      {
        if ((unint64_t)v6 >= *v8)
        {
          v10 = (char *)*v3;
          v11 = (v6 - (_BYTE *)*v3) >> 2;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v13 = *v8 - (_QWORD)v10;
          if (v13 >> 1 > v12)
            v12 = v13 >> 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
            v14 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 5), v14);
            v10 = (char *)a1[3];
            v6 = (char *)a1[4];
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[4 * v11];
          *(_DWORD *)v16 = v7;
          v9 = v16 + 4;
          while (v6 != v10)
          {
            v17 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *((_DWORD *)v16 - 1) = v17;
            v16 -= 4;
          }
          a1[3] = v16;
          a1[4] = v9;
          a1[5] = &v15[4 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_DWORD *)v6 = v7;
          v9 = v6 + 4;
        }
        a1[4] = v9;
        v6 = v9;
        v5 = *a1;
        v4 = a1[1];
      }
      ++v7;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) > v7);
  }
  return a1;
}

void sub_1ADB97B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 32) = v13;
    operator delete(v13);
  }
  a10 = (void **)v10;
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void quasar::DerivedEnumerator::SpokenTokens::slice(quasar::DerivedEnumerator::SpokenTokens *this@<X0>, unsigned int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  std::string::size_type v11;
  int v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  void *__p[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if ((a2 & 0x80000000) == 0)
  {
    if ((a3 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    a3 += (*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2;
    if ((a2 & 0x80000000) != 0)
      goto LABEL_21;
    goto LABEL_7;
  }
  a2 += (*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2;
  if (a3 < 0)
    goto LABEL_6;
LABEL_3:
  if ((a2 & 0x80000000) != 0)
    goto LABEL_21;
LABEL_7:
  v6 = *((_QWORD *)this + 3);
  v7 = (unint64_t)(*((_QWORD *)this + 4) - v6) >> 2;
  if ((int)a2 >= (int)v7 || a3 < 1 || (a3 <= (int)v7 ? (v8 = a2 >= a3) : (v8 = 1), v8))
  {
LABEL_21:
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Index error: [", 14);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, ")");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v9 = *(int *)(v6 + 4 * a2);
  v10 = *(_DWORD *)(v6 + 4 * (a3 - 1));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (SBYTE7(v18) < 0)
  {
    std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v12 = SBYTE7(v18);
    a4[1].__r_.__value_.__r.__words[0] = 0;
    a4[1].__r_.__value_.__l.__size_ = 0;
    if (v12 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v11 = v18;
    a4[1].__r_.__value_.__r.__words[0] = 0;
    a4[1].__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = v11;
  }
  if ((int)v9 <= v10)
  {
    v13 = 40 * v9;
    v14 = v10 - v9 + 1;
    do
    {
      quasar::DerivedEnumerator::Token::append((quasar::DerivedEnumerator::Token *)a4, (const Token *)(*(_QWORD *)this + v13));
      v13 += 40;
      --v14;
    }
    while (v14);
  }
}

void quasar::DerivedEnumerator::preprocessWord(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _BYTE *v7;
  int v8;
  size_t v9;
  void **v10;
  const void *v11;
  unint64_t v12;
  _BYTE *v13;
  std::string __p;
  __int128 *v15[3];
  void *v16;
  _BYTE *v17;
  void *v18[2];
  char v19;
  std::string v20;
  std::vector<std::string> v21;

  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = (_BYTE *)a2;
  else
    v7 = *(_BYTE **)a2;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    while (*v7 != 64)
    {
      ++v7;
      if (!--v6)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    quasar::getWordBoundarySeparatedString((char *)a2, &v21);
    quasar::DerivedEnumerator::createTokens((uint64_t *)&v21, a1 + 80, (uint64_t)v15);
    quasar::DerivedEnumerator::combineTokens(v15, &v20);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v8 = quasar::DerivedEnumerator::processOpenPunctuation((uint64_t *)&v20);
    if (*(char *)(a2 + 47) >= 0)
      v9 = *(unsigned __int8 *)(a2 + 47);
    else
      v9 = *(_QWORD *)(a2 + 32);
    v10 = v18;
    std::string::basic_string[abi:ne180100]((uint64_t)v18, v9 + 8);
    if (v19 < 0)
      v10 = (void **)v18[0];
    if (v9)
    {
      if (*(char *)(a2 + 47) >= 0)
        v11 = (const void *)(a2 + 24);
      else
        v11 = *(const void **)(a2 + 24);
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, "-derived");
    quasar::DerivedEnumerator::SpokenTokens::SpokenTokens(v15, (uint64_t)&v20);
    if (v8 >= 1)
    {
      v12 = (unint64_t)(v17 - (_BYTE *)v16) >> 2;
      if ((int)v12 >= 1)
      {
        quasar::DerivedEnumerator::SpokenTokens::slice((quasar::DerivedEnumerator::SpokenTokens *)v15, 0, v12, &__p);
        quasar::addDerivedWord((uint64_t)&__p, (uint64_t)v18, a3, (float)*(int *)(a2 + 48));
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    v13 = v16;
    if ((int)((unint64_t)(v17 - (_BYTE *)v16) >> 2) > 1)
    {
      (*(void (**)(_QWORD, __int128 **, void **, uint64_t *, float))(**(_QWORD **)(a1 + 272) + 16))(*(_QWORD *)(a1 + 272), v15, v18, a3, (float)*(int *)(a2 + 48));
      v13 = v16;
    }
    if (v13)
    {
      v17 = v13;
      operator delete(v13);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v19 < 0)
      operator delete(v18[0]);
    v15[0] = (__int128 *)&v20;
    std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)v15);
    v15[0] = (__int128 *)&v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v15);
  }
}

void sub_1ADB97F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  quasar::DerivedEnumerator::SpokenTokens::~SpokenTokens((quasar::DerivedEnumerator::SpokenTokens *)&a17);
  if (a28 < 0)
    operator delete(a23);
  a17 = v28 - 96;
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = v28 - 72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void sub_1ADB97FF0()
{
  JUMPOUT(0x1ADB97FD4);
}

void sub_1ADB98000()
{
  JUMPOUT(0x1ADB97FD8);
}

uint64_t quasar::addDerivedWord(uint64_t result, uint64_t a2, uint64_t *a3, float a4)
{
  unint64_t v5;
  float v6;

  v6 = a4;
  if (*(int *)(result + 32) > 2 || (*(_DWORD *)(result + 28) - 2) <= 2)
  {
    v5 = a3[1];
    if (v5 >= a3[2])
    {
      result = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,std::string const&,float &>(a3, result, a2, &v6);
    }
    else
    {
      std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,float &>((uint64_t)(a3 + 2), a3[1], result, a2, &v6);
      result = v5 + 80;
      a3[1] = v5 + 80;
    }
    a3[1] = result;
  }
  return result;
}

void sub_1ADB9809C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void quasar::DerivedEnumerator::SpokenTokens::~SpokenTokens(quasar::DerivedEnumerator::SpokenTokens *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = (void **)this;
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void quasar::DerivedEnumerator::preprocess(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  _BOOL4 v9;
  _QWORD **v10;
  _QWORD **v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19[2];
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *__p[2];
  __int128 v25;
  _OWORD v26[12];
  uint64_t *v27;
  _QWORD *v28[2];

  v28[0] = 0;
  v28[1] = 0;
  v27 = (uint64_t *)v28;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v5 = *a2 + 24;
    do
    {
      std::pair<std::string,quasar::LmeDataFactoryBase::Word>::pair[abi:ne180100]<true,0>((std::string *)&v21, (__int128 *)v5, (__int128 *)(v5 - 24));
      std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::LmeDataFactoryBase::Word>>(&v27, (const void **)&v21, &v21);
      v7 = v6;
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v26, *((char **)&v26[0] + 1));
      if (SBYTE7(v25) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v23) < 0)
        operator delete(*((void **)&v22 + 1));
      if (SBYTE7(v22) < 0)
        operator delete((void *)v21);
      if ((v7 & 1) == 0)
      {
        memset(v26, 0, sizeof(v26));
        *(_OWORD *)__p = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v21 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Tag with multiple words: \"", 26);
        v13 = *(char *)(v5 + 23);
        if (v13 >= 0)
          v14 = v5;
        else
          v14 = *(_QWORD *)v5;
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(v5 + 23);
        else
          v15 = *(_QWORD *)(v5 + 8);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\" for \"", 7);
        v18 = quasar::operator<<(v17, v5 - 24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\"", 1);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v21);
      }
      v8 = v5 + 56;
      v5 += 80;
    }
    while (v8 != v4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v21, "\\contact-first-phonetic");
  if (v28 == (_QWORD **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)&v21))
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "\\contact-last-phonetic");
    v9 = v28 == (_QWORD **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)v19);
    if (v20 < 0)
      operator delete(v19[0]);
  }
  else
  {
    v9 = 0;
  }
  if (SBYTE7(v22) < 0)
  {
    operator delete((void *)v21);
    if (!v9)
      goto LABEL_27;
  }
  else if (!v9)
  {
    goto LABEL_27;
  }
  std::string::basic_string[abi:ne180100]<0>(&v21, "\\contact-first");
  v10 = (_QWORD **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)&v21);
  if (SBYTE7(v22) < 0)
    operator delete((void *)v21);
  if (v28 != v10)
    quasar::DerivedEnumerator::preprocessWord(a1, (uint64_t)(v10 + 7), a2);
  std::string::basic_string[abi:ne180100]<0>(&v21, "\\contact-last");
  v11 = (_QWORD **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)&v21);
  if (SBYTE7(v22) < 0)
    operator delete((void *)v21);
  if (v28 != v11)
    quasar::DerivedEnumerator::preprocessWord(a1, (uint64_t)(v11 + 7), a2);
LABEL_27:
  std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::destroy((uint64_t)&v27, v28[0]);
}

void sub_1ADB983D8()
{
  JUMPOUT(0x1ADB983F0);
}

void sub_1ADB983E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::pair<std::string,quasar::LmeDataFactoryBase::Word>::~pair((uint64_t)va);
  JUMPOUT(0x1ADB983F0);
}

uint64_t std::pair<std::string,quasar::LmeDataFactoryBase::Word>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a1 + 80, *(char **)(a1 + 88));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void quasar::DerivedEnumerator::addDerivedEnumerations(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  void *p_p;
  uint64_t v18;
  uint64_t j;
  __int128 *v20;
  __int128 *k;
  __int128 v22;
  void *v23;
  uint64_t v24;
  uint64_t m;
  __int128 *i;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *__p;
  uint64_t v31;
  unsigned __int8 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  std::string *v50;
  uint64_t v51;
  std::string v52;
  std::string v53;
  std::string v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a3 + 23) >= 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  v10 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a4, a2);
  v11 = v10;
  if (v9)
  {
    v27 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a4, (const void **)a3);
    if (a4 + 8 != v11 && a4 + 8 != v27)
    {
      v12 = *(__int128 **)(v11 + 56);
      for (i = *(__int128 **)(v11 + 64); v12 != i; v12 += 5)
      {
        v13 = *(__int128 **)(v27 + 56);
        v14 = *(__int128 **)(v27 + 64);
        while (v13 != v14)
        {
          std::to_string(&v52, *(float *)(a1 + 280) * (float)*((int *)v12 + 12));
          if (*((char *)v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
          }
          else
          {
            v15 = *v12;
            v53.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
            *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v15;
          }
          if (*((char *)v13 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
          }
          else
          {
            v16 = *v13;
            v54.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
            *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v16;
          }
          v50 = &v52;
          v51 = 3;
          if (quasar::gLogLevel >= 6)
          {
            v48 = 0u;
            v49 = 0u;
            v46 = 0u;
            v47 = 0u;
            v44 = 0u;
            v45 = 0u;
            v42 = 0u;
            v43 = 0u;
            v40 = 0u;
            v41 = 0u;
            v39 = 0u;
            v37 = 0u;
            v38 = 0u;
            v35 = 0u;
            v36 = 0u;
            v33 = 0u;
            v34 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
            v28 = " ";
            v29 = 1;
            quasar::join<std::initializer_list<std::string>>((uint64_t *)&v50, (uint64_t *)&v28);
            if ((v32 & 0x80u) == 0)
              p_p = &__p;
            else
              p_p = __p;
            if ((v32 & 0x80u) == 0)
              v18 = v32;
            else
              v18 = v31;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)p_p, v18);
            if ((char)v32 < 0)
              operator delete(__p);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
          }
          std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_impl<std::initializer_list<std::string>>(a5, (uint64_t)&v50);
          for (j = 0; j != -9; j -= 3)
          {
            if (SHIBYTE(v54.__r_.__value_.__r.__words[j + 2]) < 0)
              operator delete(*(void **)((char *)&v54.__r_.__value_.__l.__data_ + j * 8));
          }
          v13 += 5;
        }
      }
    }
  }
  else if (a4 + 8 != v10)
  {
    v20 = *(__int128 **)(v10 + 56);
    for (k = *(__int128 **)(v10 + 64); v20 != k; v20 += 5)
    {
      std::to_string(&v52, *(float *)(a1 + 280) * (float)*((int *)v20 + 12));
      if (*((char *)v20 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
      }
      else
      {
        v22 = *v20;
        v53.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v22;
      }
      v50 = &v52;
      v51 = 2;
      if (quasar::gLogLevel >= 6)
      {
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
        v28 = " ";
        v29 = 1;
        quasar::join<std::initializer_list<std::string>>((uint64_t *)&v50, (uint64_t *)&v28);
        if ((v32 & 0x80u) == 0)
          v23 = &__p;
        else
          v23 = __p;
        if ((v32 & 0x80u) == 0)
          v24 = v32;
        else
          v24 = v31;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)v23, v24);
        if ((char)v32 < 0)
          operator delete(__p);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
      }
      std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_impl<std::initializer_list<std::string>>(a5, (uint64_t)&v50);
      for (m = 0; m != -6; m -= 3)
      {
        if (SHIBYTE(v53.__r_.__value_.__r.__words[m + 2]) < 0)
          operator delete(*(void **)((char *)&v52 + m * 8 + 24));
      }
    }
  }
}

void sub_1ADB98800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 153) < 0)
    operator delete(*(void **)(v20 - 176));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::join<std::initializer_list<std::string>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::initializer_list<std::string>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADB989CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::DerivedEnumerator::addEnumerations(uint64_t a1, __int128 **a2, uint64_t **a3)
{
  __int128 *v6;
  __int128 *v7;
  BOOL v8;
  char v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t *v12;
  std::string *v13;
  uint64_t p_size;
  uint64_t v15;
  const void **v16;
  const void **v17;
  const void **v18;
  void *__p[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 *v36;

  if (quasar::gLogLevel >= 6)
  {
    v6 = *a2;
    v7 = a2[1];
    if (*a2 != v7)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "-derived");
        v8 = quasar::endsWith((uint64_t *)v6 + 3, (uint64_t *)__p);
        if (SBYTE7(v20) < 0)
          operator delete(__p[0]);
        v9 = quasar::gLogLevel < 6 || v8;
        if ((v9 & 1) == 0)
        {
          v34 = 0u;
          v35 = 0u;
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v20 = 0u;
          v21 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          quasar::operator<<(__p, (uint64_t)v6);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
        }
        v6 += 5;
      }
      while (v6 != v7);
    }
  }
  quasar::SimpleNameEnumerator::addEnumerations(a1, a2, a3);
  __p[1] = 0;
  *(_QWORD *)&v20 = 0;
  __p[0] = &__p[1];
  v10 = *a2;
  v11 = a2[1];
  if (*a2 != v11)
  {
    do
    {
      v36 = (__int128 *)((char *)v10 + 24);
      v12 = std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)__p, (const void **)v10 + 3, (uint64_t)&std::piecewise_construct, &v36);
      v13 = (std::string *)v12[8];
      if ((unint64_t)v13 >= v12[9])
      {
        p_size = std::vector<quasar::LmeDataFactoryBase::Word>::__push_back_slow_path<quasar::LmeDataFactoryBase::Word const&>(v12 + 7, v10);
      }
      else
      {
        std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>((_DWORD)v12 + 72, v13, v10);
        p_size = (uint64_t)&v13[3].__r_.__value_.__l.__size_;
        v12[8] = (uint64_t)&v13[3].__r_.__value_.__l.__size_;
      }
      v12[8] = p_size;
      v10 += 5;
    }
    while (v10 != v11);
  }
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 24))(*(_QWORD *)(a1 + 272));
  v16 = *(const void ***)v15;
  v17 = *(const void ***)(v15 + 8);
  while (v16 != v17)
  {
    v18 = v16 + 3;
    quasar::DerivedEnumerator::addDerivedEnumerations(a1, v16, (uint64_t)(v16 + 3), (uint64_t)__p, a3);
    v16 = v18 + 3;
  }
  std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
}

void sub_1ADB98BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, _QWORD *a10, int a11, __int16 a12, char a13, char a14)
{
  std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy((uint64_t)&__p, a10);
  _Unwind_Resume(a1);
}

void quasar::DerivedEnumerator::~DerivedEnumerator(quasar::DerivedEnumerator *this)
{
  quasar::DerivedEnumerator::~DerivedEnumerator(this);
  JUMPOUT(0x1AF44D190);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D363E8;
  v2 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  *(_QWORD *)this = off_1E5D37CE8;
  v3 = (void **)((char *)this + 32);
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  quasar::NameEnumerator::~NameEnumerator((void **)this);
}

uint64_t quasar::SimpleNameEnumerator::isCalculatedInQuasar(quasar::SimpleNameEnumerator *this)
{
  return 1;
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,std::string const&,float &>(uint64_t *a1, uint64_t a2, uint64_t a3, float *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v10 = 0x333333333333333;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[80 * v5];
  v17 = &v11[80 * v10];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,float &>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v14);
  return v12;
}

void sub_1ADB98D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,float &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5)
{
  std::string __p;
  std::string v9;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v9 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  quasar::LmeDataFactoryBase::Word::Word(a2, &v9, &__p, (int)*a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1ADB98E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,quasar::LmeDataFactoryBase::Word>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100]((uint64_t *)&this[3].__r_.__value_.__l.__size_, (uint64_t)a3 + 56);
  return this;
}

void sub_1ADB98F24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

quasar::EnLikeAlgorithm *quasar::EnLikeAlgorithm::EnLikeAlgorithm(quasar::EnLikeAlgorithm *this)
{
  _QWORD *v2;
  std::string *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 v7[3];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &unk_1E5D358E8;
  v2 = (_QWORD *)((char *)this + 8);
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[1],0>(v7, "\\contact-first-derived", "");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[1],0>(v8, "\\contact-last-derived", "");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v9, "\\contact-first-derived", "\\contact-last");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[22],0>(v10, "\\contact-first", "\\contact-last-derived");
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  v3 = (std::string *)operator new(0xC0uLL);
  *((_QWORD *)this + 3) = v3 + 8;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = v3;
  v4 = 0;
  *((_QWORD *)this + 2) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)this + 24, v7, &v11, v3);
  do
  {
    v5 = &v7[v4 / 2];
    if (SHIBYTE(v10[v4 + 5]) < 0)
      operator delete(*((void **)v5 + 21));
    if (*((char *)v5 + 167) < 0)
      operator delete(*((void **)v5 + 18));
    v4 -= 6;
  }
  while (v4 != 0x1FFFFFFFFFFFFFE8);
  return this;
}

void sub_1ADB9915C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t i;

  *(_QWORD *)(v12 + 16) = v13;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (i = 144; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair((uint64_t)(&a12 + i));
  _Unwind_Resume(a1);
}

void quasar::EnLikeAlgorithm::~EnLikeAlgorithm(quasar::EnLikeAlgorithm *this)
{
  void **v1;

  *(_QWORD *)this = &unk_1E5D358E8;
  v1 = (void **)((char *)this + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = &unk_1E5D358E8;
  v2 = (void **)((char *)this + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1AF44D190](this, 0xA1C4030951706);
}

void quasar::EnLikeAlgorithm::addDerivedWords(int a1, quasar::DerivedEnumerator::SpokenTokens *this, float a3, uint64_t a4, uint64_t *a5)
{
  std::string v9;
  __int128 v10;
  std::string __p;
  __int128 v12;

  quasar::DerivedEnumerator::SpokenTokens::slice(this, 0, 1, &__p);
  quasar::addDerivedWord((uint64_t)&__p, a4, a5, a3);
  quasar::DerivedEnumerator::SpokenTokens::slice(this, 1u, (*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2, &v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v9;
  v12 = v10;
  quasar::addDerivedWord((uint64_t)&__p, a4, a5, a3);
  if ((int)((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2) >= 3)
  {
    quasar::DerivedEnumerator::SpokenTokens::slice(this, 0, -1, &v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v9;
    v12 = v10;
    quasar::addDerivedWord((uint64_t)&__p, a4, a5, a3);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADB993A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::EnLikeAlgorithm::derivedEnumerationTags(quasar::EnLikeAlgorithm *this)
{
  return (uint64_t)this + 8;
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[1],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADB99400(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[1],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADB99450(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADB994A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[22],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADB994F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 3;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADB99598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

quasar::ZhLikeAlgorithm *quasar::ZhLikeAlgorithm::ZhLikeAlgorithm(quasar::ZhLikeAlgorithm *this)
{
  _QWORD *v2;
  std::string *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 v7[3];
  _QWORD v8[6];
  __int128 v9;

  *(_QWORD *)&v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &unk_1E5D35C38;
  v2 = (_QWORD *)((char *)this + 8);
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[1],0>(v7, "\\contact-first-derived", "");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[1],0>(v8, "\\contact-last-derived", "");
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  v3 = (std::string *)operator new(0x60uLL);
  *((_QWORD *)this + 3) = v3 + 4;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = v3;
  v4 = 0;
  *((_QWORD *)this + 2) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)this + 24, v7, &v9, v3);
  do
  {
    v5 = &v7[v4 / 2];
    if (SHIBYTE(v8[v4 + 5]) < 0)
      operator delete(*((void **)v5 + 9));
    if (*((char *)v5 + 71) < 0)
      operator delete(*((void **)v5 + 6));
    v4 -= 6;
  }
  while (v4 != 0x1FFFFFFFFFFFFFF4);
  return this;
}

void sub_1ADB996C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;

  v14 = v13;
  *(_QWORD *)(v12 + 16) = v14;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (i = 48; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair((uint64_t)(&a12 + i));
  _Unwind_Resume(a1);
}

void quasar::ZhLikeAlgorithm::~ZhLikeAlgorithm(quasar::ZhLikeAlgorithm *this)
{
  void **v1;

  *(_QWORD *)this = &unk_1E5D35C38;
  v1 = (void **)((char *)this + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = &unk_1E5D35C38;
  v2 = (void **)((char *)this + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1AF44D190](this, 0xA1C4030951706);
}

void quasar::ZhLikeAlgorithm::addDerivedWords(int a1, quasar::DerivedEnumerator::SpokenTokens *this, float a3, uint64_t a4, uint64_t *a5)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  std::string __p;
  int v16;

  v9 = 1;
  do
  {
    if (v9 >= (int)((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2))
      break;
    quasar::DerivedEnumerator::SpokenTokens::slice(this, 0, v9, &__p);
    quasar::addDerivedWord((uint64_t)&__p, a4, a5, a3);
    v10 = v16;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    ++v9;
  }
  while (v10 < 4);
  v11 = -1;
  v12 = 1;
  do
  {
    v13 = (*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2;
    if (v12 >= (int)v13)
      break;
    quasar::DerivedEnumerator::SpokenTokens::slice(this, v11 + v13, v13, &__p);
    quasar::addDerivedWord((uint64_t)&__p, a4, a5, a3);
    v14 = v16;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    --v11;
    ++v12;
  }
  while (v14 < 4);
}

void sub_1ADB998D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ZhLikeAlgorithm::derivedEnumerationTags(quasar::ZhLikeAlgorithm *this)
{
  return (uint64_t)this + 8;
}

uint64_t std::vector<quasar::DerivedEnumerator::Token>::__emplace_back_slow_path<std::string const&,quasar::DerivedEnumerator::TokenType &,int &,int &,int &>(uint64_t *a1, __int128 *a2, int *a3, int *a4, int *a5, int *a6)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v18;
  std::string *v19;
  std::string::value_type *v20;
  char *v21;
  uint64_t *v22;

  v7 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v8 = v7 + 1;
  if (v7 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v8)
    v8 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v14 = 0x666666666666666;
  else
    v14 = v8;
  v22 = a1 + 2;
  if (v14)
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v14);
  else
    v15 = 0;
  v18 = v15;
  v19 = (std::string *)&v15[40 * v7];
  v21 = &v15[40 * v14];
  std::allocator<quasar::DerivedEnumerator::Token>::construct[abi:ne180100]<quasar::DerivedEnumerator::Token,std::string const&,quasar::DerivedEnumerator::TokenType &,int &,int &,int &>((_DWORD)a1 + 16, v19, a2, a3, a4, a5, a6);
  v20 = &v19[1].__r_.__value_.__s.__data_[16];
  std::vector<quasar::DerivedEnumerator::Token>::__swap_out_circular_buffer(a1, &v18);
  v16 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)&v18);
  return v16;
}

void sub_1ADB99A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::DerivedEnumerator::Token>::construct[abi:ne180100]<quasar::DerivedEnumerator::Token,std::string const&,quasar::DerivedEnumerator::TokenType &,int &,int &,int &>(int a1, std::string *this, __int128 *a3, int *a4, int *a5, int *a6, int *a7)
{
  int v8;
  int v9;
  int v10;
  int v11;
  __int128 v12;

  v8 = *a4;
  v9 = *a5;
  v10 = *a6;
  v11 = *a7;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v12 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v12;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = v8;
  HIDWORD(this[1].__r_.__value_.__r.__words[0]) = v9;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = v10;
  HIDWORD(this[1].__r_.__value_.__r.__words[1]) = v11;
}

uint64_t std::vector<quasar::DerivedEnumerator::Token>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::DerivedEnumerator::Token>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::DerivedEnumerator::Token>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      v7 = *((_QWORD *)&v14 + 1) - 40;
      *((_QWORD *)&v14 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DerivedEnumerator::Token>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DerivedEnumerator::Token>,std::reverse_iterator<quasar::DerivedEnumerator::Token*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>::operator()[abi:ne180100](a1);
  return a1;
}

std::string *std::vector<quasar::DerivedEnumerator::Token>::__init_with_size[abi:ne180100]<quasar::DerivedEnumerator::Token*,quasar::DerivedEnumerator::Token*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DerivedEnumerator::Token>,quasar::DerivedEnumerator::Token*,quasar::DerivedEnumerator::Token*,quasar::DerivedEnumerator::Token*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1ADB99C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DerivedEnumerator::Token>,quasar::DerivedEnumerator::Token*,quasar::DerivedEnumerator::Token*,quasar::DerivedEnumerator::Token*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = *(__int128 *)((char *)v6 + 24);
      v6 = (__int128 *)((char *)v6 + 40);
      v4 = (std::string *)((char *)v8 + 40);
      v13 = (std::string *)((char *)v8 + 40);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DerivedEnumerator::Token>,quasar::DerivedEnumerator::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1ADB99D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DerivedEnumerator::Token>,quasar::DerivedEnumerator::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DerivedEnumerator::Token>,quasar::DerivedEnumerator::Token*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>::operator()[abi:ne180100](a1);
  return a1;
}

__n128 std::vector<quasar::DerivedEnumerator::Token>::__construct_one_at_end[abi:ne180100]<quasar::DerivedEnumerator::Token const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)((char *)a2 + 24);
  *(__n128 *)(v4 + 24) = result;
  *(_QWORD *)(a1 + 8) = v4 + 40;
  return result;
}

void sub_1ADB99DD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::DerivedEnumerator::Token>::__push_back_slow_path<quasar::DerivedEnumerator::Token const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  std::string *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[40 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(_OWORD *)&v10[40 * v4 + 24] = *(__int128 *)((char *)a2 + 24);
  v16 = (std::string *)((char *)v11 + 40);
  std::vector<quasar::DerivedEnumerator::Token>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADB99EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

quasar::DerivedEnumerator::Token *std::vector<quasar::DerivedEnumerator::Token>::__append(uint64_t *a1, unint64_t a2)
{
  quasar::DerivedEnumerator::Token *result;
  uint64_t v5;
  uint64_t v6;
  quasar::DerivedEnumerator::Token *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  quasar::DerivedEnumerator::Token *v13;
  uint64_t v14;
  quasar::DerivedEnumerator::Token *v15;
  uint64_t v16;
  quasar::DerivedEnumerator::Token *v17;
  uint64_t v18;
  _QWORD v19[2];
  quasar::DerivedEnumerator::Token *v20;
  char *v21;
  quasar::DerivedEnumerator::Token *v22;

  v6 = a1[2];
  result = (quasar::DerivedEnumerator::Token *)(a1 + 2);
  v5 = v6;
  v7 = (quasar::DerivedEnumerator::Token *)*((_QWORD *)result - 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (quasar::DerivedEnumerator::Token *)((char *)v7 + 40 * a2);
      v14 = 40 * a2;
      do
      {
        result = quasar::DerivedEnumerator::Token::Token(v7);
        v7 = (quasar::DerivedEnumerator::Token *)((char *)v7 + 40);
        v14 -= 40;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v22 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)result, v11);
    else
      v12 = 0;
    v15 = (quasar::DerivedEnumerator::Token *)&v12[40 * v8];
    v19[0] = v12;
    v19[1] = v15;
    v20 = v15;
    v21 = &v12[40 * v11];
    v16 = 5 * a2;
    v17 = (quasar::DerivedEnumerator::Token *)((char *)v15 + 40 * a2);
    v18 = 8 * v16;
    do
    {
      quasar::DerivedEnumerator::Token::Token(v15);
      v15 = (quasar::DerivedEnumerator::Token *)((char *)v15 + 40);
      v18 -= 40;
    }
    while (v18);
    v20 = v17;
    std::vector<quasar::DerivedEnumerator::Token>::__swap_out_circular_buffer(a1, v19);
    return (quasar::DerivedEnumerator::Token *)std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_1ADB9A050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

quasar::DerivedEnumerator::Token *quasar::DerivedEnumerator::Token::Token(quasar::DerivedEnumerator::Token *this)
{
  int v2;
  void *__p[2];
  uint64_t v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (SHIBYTE(v5) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v2 = SHIBYTE(v5);
    *(_OWORD *)((char *)this + 24) = xmmword_1AE1634A0;
    if (v2 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)this = *(_OWORD *)__p;
    *((_QWORD *)this + 2) = v5;
    *(_OWORD *)((char *)this + 24) = xmmword_1AE1634A0;
  }
  return this;
}

void sub_1ADB9A104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::LmeDataFactoryBase::Word>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::LmeDataFactoryBase::Word>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a1 + 80, *(char **)(a1 + 88));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::LmeDataFactoryBase::Word>>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x88uLL);
    v9[1] = a1 + 1;
    std::pair<std::string const,quasar::LmeDataFactoryBase::Word>::pair[abi:ne180100]<std::string,quasar::LmeDataFactoryBase::Word,0>((uint64_t)(v6 + 4), a3);
    v10 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t std::pair<std::string const,quasar::LmeDataFactoryBase::Word>::pair[abi:ne180100]<std::string,quasar::LmeDataFactoryBase::Word,0>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)result = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(result + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(result + 24) = v3;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v4 = a2[3];
  *(_QWORD *)(result + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(result + 48) = v4;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *(_DWORD *)(result + 72) = *((_DWORD *)a2 + 18);
  *(_QWORD *)(result + 80) = *((_QWORD *)a2 + 10);
  v5 = (_QWORD *)a2 + 11;
  v6 = *((_QWORD *)a2 + 11);
  *(_QWORD *)(result + 88) = v6;
  v7 = result + 88;
  v8 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(result + 96) = v8;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    *((_QWORD *)a2 + 10) = v5;
    *v5 = 0;
    *((_QWORD *)a2 + 12) = 0;
  }
  else
  {
    *(_QWORD *)(result + 80) = v7;
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::LmeDataFactoryBase::Word>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *quasar::joinToStream<std::initializer_list<std::string>>(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2[1];
  if (v3)
  {
    v5 = result;
    v6 = *a2;
    v7 = 24 * v3;
    v8 = 1;
    do
    {
      if ((v8 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, *a3, a3[1]);
      v9 = *(char *)(v6 + 23);
      if (v9 >= 0)
        v10 = v6;
      else
        v10 = *(_QWORD *)v6;
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(v6 + 23);
      else
        v11 = *(_QWORD *)(v6 + 8);
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v10, v11);
      v8 = 0;
      v6 += 24;
      v7 -= 24;
    }
    while (v7);
  }
  return result;
}

uint64_t *std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_impl<std::initializer_list<std::string>>(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  void **v5;
  uint64_t v7;
  void *__p;
  uint64_t v9;

  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__construct_node<std::initializer_list<std::string>>((uint64_t)a1, a2, (uint64_t)&__p);
  v3 = (uint64_t **)std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__find_equal<std::vector<std::string>>((uint64_t)a1, &v7, (_QWORD *)__p + 4);
  v4 = *v3;
  if (*v3)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::vector<std::string>,void *>>>::operator()[abi:ne180100]((uint64_t)&v9, v5);
  }
  else
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v7, v3, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v4;
}

void sub_1ADB9A448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::vector<std::string>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__construct_node<std::initializer_list<std::string>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  std::allocator<std::__tree_node<std::vector<std::string>,void *>>::construct[abi:ne180100]<std::vector<std::string>,std::initializer_list<std::string>>(v5, (uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1ADB9A4D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::vector<std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::allocator<std::__tree_node<std::vector<std::string>,void *>>::construct[abi:ne180100]<std::vector<std::string>,std::initializer_list<std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(__int128 **)a3;
  v4 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  v5 = a2 + 16;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (v4)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a2, v4);
    *(_QWORD *)(a2 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v5, v3, (__int128 *)((char *)v3 + 24 * v4), *(std::string **)(a2 + 8));
  }
}

void sub_1ADB9A564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t TEnvManager::TEnvManager(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E5D161C0;
  *(_QWORD *)(a1 + 8) = a3;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "");
  *(_QWORD *)a1 = off_1E5D15B58;
  *(_OWORD *)(a1 + 48) = *a2;
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

uint64_t TEnvManager::open(uint64_t this, uint64_t a2)
{
  std::exception_vtbl *v2;
  _QWORD *exception;
  void *__p[2];
  char v5;
  std::exception v6[3];
  char v7;

  if (!*(_BYTE *)(this + 40))
  {
    tknPrintf("Error: loading from file is not supported.\n", a2);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v6, (__int128 *)__p);
    v6[0].__vftable = (std::exception_vtbl *)&unk_1E5D16230;
    if (v7 >= 0)
      v2 = (std::exception_vtbl *)&v6[1];
    else
      v2 = v6[1].__vftable;
    conditionalAssert((const char *)v2, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/envmgr.cpp", 47);
    TException::~TException(v6);
    if (v5 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "");
    TException::TException(exception, (__int128 *)v6);
    *exception = &unk_1E5D16230;
  }
  return this;
}

void sub_1ADB9A6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void *TEnvManager::getVar(TEnvManager *this, const char *a2, char *a3, unint64_t a4)
{
  if (((*(uint64_t (**)(TEnvManager *))(*(_QWORD *)this + 32))(this) & 1) == 0)
    (*(void (**)(TEnvManager *))(*(_QWORD *)this + 16))(this);
  return SDEnv_GetData((uint64_t)this + 48, a2, a3, a4);
}

void TEnvManager::~TEnvManager(void **this)
{
  *this = off_1E5D161C0;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_1E5D161C0;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1AF44D190);
}

{
  *this = off_1E5D15B58;
  TEnvManager::close((TEnvManager *)this);
  *this = off_1E5D161C0;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

uint64_t TEnvManager::isOpen(TEnvManager *this)
{
  return *((unsigned __int8 *)this + 40);
}

void TIOException::~TIOException(std::exception *this)
{
  TException::~TException(this);
  JUMPOUT(0x1AF44D190);
}

int *MBRDecoder::MBRDecoder(int *a1, int a2, uint64_t a3, uint64_t a4, float a5)
{
  char **v9;
  char **v10;
  char **v11;
  char **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int i;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t *v82;
  char *v83;
  void *__p[2];
  char v85;

  *((_QWORD *)a1 + 2) = 0;
  v83 = (char *)(a1 + 4);
  *((_OWORD *)a1 + 4) = 0u;
  v82 = (uint64_t *)(a1 + 16);
  *((_OWORD *)a1 + 7) = 0u;
  v9 = (char **)(a1 + 28);
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_OWORD *)a1 + 10) = 0u;
  v10 = (char **)(a1 + 40);
  v11 = (char **)(a1 + 22);
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  v12 = (char **)(a1 + 34);
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_QWORD *)a1 + 22) = 0;
  *a1 = a2;
  v13 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "syms");
  fst::SymbolTable::SymbolTable(v13, (__int128 *)__p);
  *((_QWORD *)a1 + 5) = v13;
  if (v85 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 1) = 0x200000001;
  *((float *)a1 + 3) = a5;
  if (v83 != (char *)a4)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v83, *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  v14 = *((_QWORD *)a1 + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "<eps>");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 32))(v14, __p);
  if (v85 < 0)
    operator delete(__p[0]);
  v15 = *((_QWORD *)a1 + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "<sigma>");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 32))(v15, __p);
  if (v85 < 0)
    operator delete(__p[0]);
  v16 = *((_QWORD *)a1 + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "<rho>");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 32))(v16, __p);
  if (v85 < 0)
    operator delete(__p[0]);
  v17 = *((_QWORD *)a1 + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "<phi>");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v17 + 32))(v17, __p);
  if (v85 < 0)
    operator delete(__p[0]);
  for (i = 0; ; i = v21 + 1)
  {
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 120))(v19);
    v21 = i;
    v22 = *((_QWORD *)a1 + 5);
    if (v20 <= v21)
      break;
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
    (*(void (**)(void **__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v23 + 88))(__p, v23, v21);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 32))(v22, __p);
    if (v85 < 0)
      operator delete(__p[0]);
  }
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 120))(a3);
  fst::Relabel<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a3, v24, v22, 1, v25, v22, 1);
  v26 = (_QWORD *)operator new();
  fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFst(v26);
  *((_QWORD *)a1 + 6) = v26;
  v27 = (_QWORD *)operator new();
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v27);
  *((_QWORD *)a1 + 7) = v27;
  MBRDecoder::_alpha_normalize((uint64_t)a1, a3);
  std::vector<std::set<std::vector<int>>>::resize(v82, *a1);
  if (*a1 >= 1)
  {
    v28 = 0;
    do
    {
      v29 = (_QWORD *)operator new();
      fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFst(v29);
      v31 = (_QWORD *)*((_QWORD *)a1 + 12);
      v30 = *((_QWORD *)a1 + 13);
      if ((unint64_t)v31 >= v30)
      {
        v33 = ((char *)v31 - *v11) >> 3;
        if ((unint64_t)(v33 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v34 = v30 - (_QWORD)*v11;
        v35 = v34 >> 2;
        if (v34 >> 2 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 26), v36);
        else
          v37 = 0;
        v38 = &v37[8 * v33];
        *(_QWORD *)v38 = v29;
        v32 = v38 + 8;
        v40 = (char *)*((_QWORD *)a1 + 11);
        v39 = (char *)*((_QWORD *)a1 + 12);
        if (v39 != v40)
        {
          do
          {
            v41 = *((_QWORD *)v39 - 1);
            v39 -= 8;
            *((_QWORD *)v38 - 1) = v41;
            v38 -= 8;
          }
          while (v39 != v40);
          v39 = *v11;
        }
        *((_QWORD *)a1 + 11) = v38;
        *((_QWORD *)a1 + 12) = v32;
        *((_QWORD *)a1 + 13) = &v37[8 * v36];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *v31 = v29;
        v32 = v31 + 1;
      }
      *((_QWORD *)a1 + 12) = v32;
      v42 = (_QWORD *)operator new();
      fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFst(v42);
      v44 = (_QWORD *)*((_QWORD *)a1 + 15);
      v43 = *((_QWORD *)a1 + 16);
      if ((unint64_t)v44 >= v43)
      {
        v46 = ((char *)v44 - *v9) >> 3;
        if ((unint64_t)(v46 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v47 = v43 - (_QWORD)*v9;
        v48 = v47 >> 2;
        if (v47 >> 2 <= (unint64_t)(v46 + 1))
          v48 = v46 + 1;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
          v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 32), v49);
        else
          v50 = 0;
        v51 = &v50[8 * v46];
        *(_QWORD *)v51 = v42;
        v45 = v51 + 8;
        v53 = (char *)*((_QWORD *)a1 + 14);
        v52 = (char *)*((_QWORD *)a1 + 15);
        if (v52 != v53)
        {
          do
          {
            v54 = *((_QWORD *)v52 - 1);
            v52 -= 8;
            *((_QWORD *)v51 - 1) = v54;
            v51 -= 8;
          }
          while (v52 != v53);
          v52 = *v9;
        }
        *((_QWORD *)a1 + 14) = v51;
        *((_QWORD *)a1 + 15) = v45;
        *((_QWORD *)a1 + 16) = &v50[8 * v49];
        if (v52)
          operator delete(v52);
      }
      else
      {
        *v44 = v42;
        v45 = v44 + 1;
      }
      *((_QWORD *)a1 + 15) = v45;
      v55 = (_QWORD *)operator new();
      fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFst(v55);
      v57 = (_QWORD *)*((_QWORD *)a1 + 18);
      v56 = *((_QWORD *)a1 + 19);
      if ((unint64_t)v57 >= v56)
      {
        v59 = ((char *)v57 - *v12) >> 3;
        if ((unint64_t)(v59 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v60 = v56 - (_QWORD)*v12;
        v61 = v60 >> 2;
        if (v60 >> 2 <= (unint64_t)(v59 + 1))
          v61 = v59 + 1;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
          v62 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v62 = v61;
        if (v62)
          v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 38), v62);
        else
          v63 = 0;
        v64 = &v63[8 * v59];
        *(_QWORD *)v64 = v55;
        v58 = v64 + 8;
        v66 = (char *)*((_QWORD *)a1 + 17);
        v65 = (char *)*((_QWORD *)a1 + 18);
        if (v65 != v66)
        {
          do
          {
            v67 = *((_QWORD *)v65 - 1);
            v65 -= 8;
            *((_QWORD *)v64 - 1) = v67;
            v64 -= 8;
          }
          while (v65 != v66);
          v65 = *v12;
        }
        *((_QWORD *)a1 + 17) = v64;
        *((_QWORD *)a1 + 18) = v58;
        *((_QWORD *)a1 + 19) = &v63[8 * v62];
        if (v65)
          operator delete(v65);
      }
      else
      {
        *v57 = v55;
        v58 = v57 + 1;
      }
      *((_QWORD *)a1 + 18) = v58;
      v68 = (_QWORD *)operator new();
      fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFst(v68);
      v70 = (_QWORD *)*((_QWORD *)a1 + 21);
      v69 = *((_QWORD *)a1 + 22);
      if ((unint64_t)v70 >= v69)
      {
        v72 = ((char *)v70 - *v10) >> 3;
        if ((unint64_t)(v72 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v73 = v69 - (_QWORD)*v10;
        v74 = v73 >> 2;
        if (v73 >> 2 <= (unint64_t)(v72 + 1))
          v74 = v72 + 1;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v75 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v75 = v74;
        if (v75)
          v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 44), v75);
        else
          v76 = 0;
        v77 = &v76[8 * v72];
        *(_QWORD *)v77 = v68;
        v71 = v77 + 8;
        v79 = (char *)*((_QWORD *)a1 + 20);
        v78 = (char *)*((_QWORD *)a1 + 21);
        if (v78 != v79)
        {
          do
          {
            v80 = *((_QWORD *)v78 - 1);
            v78 -= 8;
            *((_QWORD *)v77 - 1) = v80;
            v77 -= 8;
          }
          while (v78 != v79);
          v78 = *v10;
        }
        *((_QWORD *)a1 + 20) = v77;
        *((_QWORD *)a1 + 21) = v71;
        *((_QWORD *)a1 + 22) = &v76[8 * v75];
        if (v78)
          operator delete(v78);
      }
      else
      {
        *v70 = v68;
        v71 = v70 + 1;
      }
      *((_QWORD *)a1 + 21) = v71;
      ++v28;
    }
    while (v28 < *a1);
  }
  return a1;
}

void sub_1ADB9AEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _QWORD *v21;
  uint64_t v22;
  void **v23;
  void **v24;
  void **v25;
  void **v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  MEMORY[0x1AF44D190](v22, 0xA1C40BD48D6D6);
  v28 = *v26;
  if (*v26)
  {
    v21[21] = v28;
    operator delete(v28);
  }
  v29 = *v25;
  if (*v25)
  {
    v21[18] = v29;
    operator delete(v29);
  }
  v30 = *v24;
  if (*v24)
  {
    v21[15] = v30;
    operator delete(v30);
  }
  v31 = *v23;
  if (*v23)
  {
    v21[12] = v31;
    operator delete(v31);
  }
  __p = a10;
  std::vector<std::set<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v32 = *a11;
  if (*a11)
  {
    v21[3] = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

void MBRDecoder::_alpha_normalize(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a2 + 8) + 64);
  if ((int)(v4 >> 3) >= 1)
  {
    v5 = 0;
    v6 = (v4 >> 3);
    do
    {
      v15 = &unk_1E5D212D0;
      v18 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(a2);
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 64) + 8 * v5);
      v16 = v8;
      v17 = v7 + 8;
      for (i = v18; ; i = ++v18)
      {
        v11 = v8 + 24;
        v10 = *(_QWORD *)(v8 + 24);
        if (i >= (*(_QWORD *)(v11 + 8) - v10) >> 4)
          break;
        v14 = *(__n128 *)(v10 + 16 * i);
        v14.n128_f32[2] = v14.n128_f32[2] * *(float *)(a1 + 12);
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v15, &v14);
        v8 = v16;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  fst::Push<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::ReweightType)1>(a2, *(uint64_t **)(a1 + 48), 1u, 0.00097656);
  v12 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 72)
       - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 64)) >> 3;
  if ((int)v12 >= 1)
  {
    v13 = 0;
    do
    {
      LODWORD(v15) = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v13);
      v14.n128_u32[0] = 2139095040;
      if (*(float *)&v15 != INFINITY)
        (*(void (**)(_QWORD, uint64_t, float))(**(_QWORD **)(a1 + 48) + 184))(*(_QWORD *)(a1 + 48), v13, 0.0);
      v13 = (v13 + 1);
    }
    while ((_DWORD)v12 != (_DWORD)v13);
  }
}

void std::vector<std::set<std::vector<int>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::set<std::vector<int>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      do
      {
        v8 = v3 - 24;
        std::__tree<std::vector<int>>::destroy(v3 - 24, *(_QWORD **)(v3 - 16));
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void MBRDecoder::build_decoder(MBRDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  void *__p[3];
  void *v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7);
  LOBYTE(v12) = 0;
  fst::ArcMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::WeightConvertMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v2, v3);
  MBRDecoder::count_ngrams(*((_QWORD **)this + 7), *(_DWORD *)this, (uint64_t *)&v12);
  v4 = *((_QWORD *)this + 7);
  v5 = v13;
  ++*(_DWORD *)(v13 + 56);
  v6 = *(_DWORD **)(v4 + 8);
  if (v6)
  {
    v7 = v6[14] - 1;
    v6[14] = v7;
    if (!v7)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  }
  *(_QWORD *)(v4 + 8) = v5;
  v12 = &unk_1E5D256C0;
  v8 = v13;
  if (v13)
  {
    v9 = *(_DWORD *)(v13 + 56) - 1;
    *(_DWORD *)(v13 + 56) = v9;
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7));
  memset(__p, 0, sizeof(__p));
  MBRDecoder::extract_ngrams((unsigned int *)this, v10, (const void **)__p);
  if (__p[0])
    operator delete(__p[0]);
  MBRDecoder::build_ngram_cd_fsts(this);
  MBRDecoder::build_right_pathcounters(this);
  MBRDecoder::build_decoders((void **)this);
  MBRDecoder::decode(this);
}

void sub_1ADB9B330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MBRDecoder::count_ngrams@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t result;
  int v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  __int128 __p;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  v6 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "syms");
  fst::SymbolTable::SymbolTable(v6, &__p);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "<eps>");
  (*(void (**)(_QWORD *, __int128 *))(*v6 + 32))(v6, &__p);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "<sigma>");
  (*(void (**)(_QWORD *, __int128 *))(*v6 + 32))(v6, &__p);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)__p);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7))
  {
    v8 = 0;
    v9 = 1;
    do
    {
      v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(&__p, v10, v8);
      (*(void (**)(_QWORD *, __int128 *))(*v6 + 32))(v6, &__p);
      if (SHIBYTE(v40) < 0)
        operator delete((void *)__p);
      v8 = v9;
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 120))(v11) > (unint64_t)v9++;
    }
    while (v12);
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  fst::Relabel<fst::ArcTpl<fst::LogWeightTpl<float>,int>>((uint64_t)a1, v13, (uint64_t)v6, 1, v14, (uint64_t)v6, 1);
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1);
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a1);
  v15 = (*(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64)) >> 3;
  if ((int)v15 >= 1)
  {
    v16 = 0;
    do
    {
      LODWORD(__p) = (*(float (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v16);
      LODWORD(v37) = 2139095040;
      if (*(float *)&__p != INFINITY)
        (*(void (**)(_QWORD *, uint64_t, float))(*a1 + 184))(a1, v16, 0.0);
      v16 = (v16 + 1);
    }
    while ((_DWORD)v15 != (_DWORD)v16);
  }
  v17 = (_QWORD *)operator new();
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v17);
  v18 = (*(uint64_t (**)(_QWORD *))(*v17 + 200))(v17);
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 176))(v17, v18);
  *(_QWORD *)&__p = 1;
  DWORD2(__p) = 0;
  HIDWORD(__p) = v18;
  (*(void (**)(_QWORD *, uint64_t, __int128 *))(*v17 + 208))(v17, v18, &__p);
  if (a2 >= 1)
  {
    v19 = 1;
    do
    {
      (*(void (**)(_QWORD *))(*v17 + 200))(v17);
      if ((unint64_t)(*(uint64_t (**)(_QWORD *))(*v6 + 120))(v6) >= 5)
      {
        v20 = 5;
        do
        {
          LODWORD(__p) = v20 - 1;
          *(_QWORD *)((char *)&__p + 4) = v20 - 1;
          HIDWORD(__p) = v19;
          (*(void (**)(_QWORD *, _QWORD, __int128 *))(*v17 + 208))(v17, (v19 - 1), &__p);
          (*(void (**)(_QWORD *, uint64_t, float))(*v17 + 184))(v17, v19, 0.0);
          v12 = (*(uint64_t (**)(_QWORD *))(*v6 + 120))(v6) > (unint64_t)v20++;
        }
        while (v12);
      }
      v21 = (_DWORD)v19 == a2;
      v19 = (v19 + 1);
    }
    while (!v21);
  }
  v22 = (*(uint64_t (**)(_QWORD *))(*v17 + 160))(v17);
  v23 = (v22 - 1);
  *(_QWORD *)&__p = 1;
  DWORD2(__p) = 0;
  HIDWORD(__p) = v22 - 1;
  (*(void (**)(_QWORD *, uint64_t, __int128 *))(*v17 + 208))(v17, v23, &__p);
  if (v23 >= 2)
  {
    v24 = 1;
    do
    {
      *(_QWORD *)&__p = 1;
      DWORD2(__p) = 0;
      HIDWORD(__p) = v23;
      (*(void (**)(_QWORD *, unint64_t, __int128 *))(*v17 + 208))(v17, v24, &__p);
      v24 = (v24 + 1);
    }
    while (v24 < (int)v23);
  }
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 280))(v17, v6);
  (*(void (**)(_QWORD *, _QWORD *))(*v17 + 288))(v17, v6);
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v17);
  v25 = operator new();
  fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SigmaMatcher(v25, (uint64_t)v17, 0, 1, 0, 0);
  v26 = FLAGS_fst_default_cache_gc;
  v27 = operator new();
  fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SigmaMatcher(v27, (uint64_t)a1, 3, -1, 0, 0);
  LOBYTE(__p) = v26;
  *((_QWORD *)&__p + 1) = 0;
  v40 = 0;
  v41 = v27;
  v42 = v25;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v37 = &unk_1E5D19270;
  v38 = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>((uint64_t)a1, (uint64_t)v17, (uint64_t *)&__p);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&__p, (uint64_t)&v37);
  LODWORD(v35) = 2;
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)&__p, &v35);
  v28 = (*(uint64_t (**)(__int128 *))(__p + 120))(&__p);
  (*(void (**)(__int128 *, uint64_t))(__p + 280))(&__p, v28);
  fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(&__p, 1, -1, INFINITY, 0.00097656);
  fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst(&v35, (uint64_t)&__p);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(a3, (uint64_t)&v35);
  fst::Minimize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a3, 0, 0.00097656);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetInputSymbols((uint64_t)a3, (uint64_t)v6);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetOutputSymbols((uint64_t)a3, (uint64_t)v6);
  v35 = &unk_1E5D275D8;
  v29 = v36;
  if (v36)
  {
    v30 = *(_DWORD *)(v36 + 56) - 1;
    *(_DWORD *)(v36 + 56) = v30;
    if (!v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  *(_QWORD *)&__p = &unk_1E5D256C0;
  v31 = *((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v32 = *(_DWORD *)(*((_QWORD *)&__p + 1) + 56) - 1;
    *(_DWORD *)(*((_QWORD *)&__p + 1) + 56) = v32;
    if (!v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v37 = &unk_1E5D268B8;
  result = v38;
  if (v38)
  {
    v34 = *(_DWORD *)(v38 + 56) - 1;
    *(_DWORD *)(v38 + 56) = v34;
    if (!v34)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADB9B950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, uint64_t a11, _DWORD *a12, void *__p, _DWORD *a14, int a15, __int16 a16, char a17, char a18)
{
  int v19;
  int v20;
  int v21;

  if (a10)
  {
    v19 = a10[14] - 1;
    a10[14] = v19;
    if (!v19)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  if (a14)
  {
    v20 = a14[14] - 1;
    a14[14] = v20;
    if (!v20)
      (*(void (**)(_DWORD *))(*(_QWORD *)a14 + 8))(a14);
  }
  if (a12)
  {
    v21 = a12[14] - 1;
    a12[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void MBRDecoder::extract_ngrams(unsigned int *a1, int a2, const void **a3)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t **v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *__p;
  char *v39;
  char *v40;

  v6 = (uint64_t)a3[1];
  v7 = (char *)*a3;
  v8 = v6 - (_QWORD)*a3;
  if ((const void *)v6 == *a3)
  {
    v7 = (char *)v6;
  }
  else if ((v8 & 0x200000000) == 0)
  {
    v9 = (v8 >> 2);
    v10 = (v8 >> 2) + 1;
    do
    {
      v11 = (v6 - (uint64_t)v7) >> 2;
      if (v11 > v9)
      {
        v12 = v10;
        v13 = v9;
        do
        {
          v14 = (uint64_t **)(*((_QWORD *)a1 + 8) + 24 * (v11 + ~v13));
          __p = 0;
          v39 = 0;
          v40 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&__p, &v7[4 * v13], v6, (v6 - (uint64_t)&v7[4 * v13]) >> 2);
          std::__tree<std::vector<int>>::__emplace_unique_key_args<std::vector<int>,std::vector<int>>(v14, (int **)&__p, (uint64_t)&__p);
          if (__p)
          {
            v39 = (char *)__p;
            operator delete(__p);
          }
          v13 = v12;
          v7 = (char *)*a3;
          v6 = (uint64_t)a3[1];
          v11 = (v6 - (uint64_t)*a3) >> 2;
          v15 = v11 > v12++;
        }
        while (v15);
      }
      --v10;
      v15 = (uint64_t)v9-- <= 0;
    }
    while (!v15);
  }
  if (*a1 <= (unint64_t)((v6 - (uint64_t)v7) >> 2))
  {
    v16 = v6 - (_QWORD)(v7 + 4);
    if ((char *)v6 != v7 + 4)
      memmove(v7, v7 + 4, v6 - (_QWORD)(v7 + 4));
    a3[1] = &v7[v16];
  }
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 7) + 8) + 64) + 8 * a2);
  v19 = *(_QWORD *)(v17 + 24);
  v18 = *(_QWORD *)(v17 + 32);
  if (v18 == v19)
    v20 = 0;
  else
    v20 = *(_QWORD *)(v17 + 24);
  if (v18 != v19)
  {
    v21 = 0;
    if ((unint64_t)((v18 - v19) >> 4) <= 1)
      v22 = 1;
    else
      v22 = (v18 - v19) >> 4;
    do
    {
      v23 = (_DWORD *)(v20 + 16 * v21);
      __p = 0;
      v39 = 0;
      v40 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *a3, (uint64_t)a3[1], ((_BYTE *)a3[1] - (_BYTE *)*a3) >> 2);
      v24 = v39;
      if (v39 >= v40)
      {
        v26 = (char *)__p;
        v27 = (v39 - (_BYTE *)__p) >> 2;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v29 = v40 - (_BYTE *)__p;
        if ((v40 - (_BYTE *)__p) >> 1 > v28)
          v28 = v29 >> 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
          v30 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v40, v30);
          v26 = (char *)__p;
          v24 = v39;
        }
        else
        {
          v31 = 0;
        }
        v32 = &v31[4 * v27];
        *(_DWORD *)v32 = *v23;
        v25 = (uint64_t)(v32 + 4);
        while (v24 != v26)
        {
          v33 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v32 - 1) = v33;
          v32 -= 4;
        }
        __p = v32;
        v39 = (char *)v25;
        v40 = &v31[4 * v30];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *(_DWORD *)v39 = *v23;
        v25 = (uint64_t)(v24 + 4);
      }
      v39 = (char *)v25;
      v34 = *(unsigned int *)(v20 + 16 * v21 + 12);
      v36 = 0;
      v37 = 0;
      v35 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, __p, v25, (v25 - (uint64_t)__p) >> 2);
      MBRDecoder::extract_ngrams(a1, v34, &v35);
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      if (__p)
      {
        v39 = (char *)__p;
        operator delete(__p);
      }
      ++v21;
    }
    while (v21 != v22);
  }
}

void sub_1ADB9BD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MBRDecoder::build_ngram_cd_fsts(MBRDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  const void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  std::string v24;
  void *__p;
  void *v26;
  uint64_t v27;
  std::string v28;
  unsigned int v29;

  v29 = 0;
  if (*((_QWORD *)this + 9) != *((_QWORD *)this + 8))
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v2);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 200))(v3);
      v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v29);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 176))(v4, 0);
      v5 = 0;
      v6 = *((_QWORD *)this + 8);
      do
      {
        v7 = v5;
        v8 = (_QWORD *)(v6 + 24 * v5);
        v9 = (_QWORD *)*v8;
        if ((_QWORD *)*v8 != v8 + 1)
        {
          do
          {
            v10 = (const void *)v9[4];
            v11 = v9[5];
            memset(&v28, 0, sizeof(v28));
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v28, v10, v11, (v11 - (uint64_t)v10) >> 2);
            v12 = *(_QWORD **)(*((_QWORD *)this + 11) + 8 * v29);
            v13 = (*(uint64_t (**)(_QWORD *))(*v12 + 24))(v12);
            __p = 0;
            v26 = 0;
            v27 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_, (uint64_t)(v28.__r_.__value_.__l.__size_ - v28.__r_.__value_.__r.__words[0]) >> 2);
            MBRDecoder::add_ngram((uint64_t)this, v12, v13, &__p, v9 + 4, v7 == v29);
            if (__p)
            {
              v26 = __p;
              operator delete(__p);
            }
            if (v28.__r_.__value_.__r.__words[0])
            {
              v28.__r_.__value_.__l.__size_ = v28.__r_.__value_.__r.__words[0];
              operator delete(v28.__r_.__value_.__l.__data_);
            }
            v14 = (_QWORD *)v9[1];
            if (v14)
            {
              do
              {
                v15 = v14;
                v14 = (_QWORD *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                v15 = (_QWORD *)v9[2];
                v16 = *v15 == (_QWORD)v9;
                v9 = v15;
              }
              while (!v16);
            }
            v6 = *((_QWORD *)this + 8);
            v9 = v15;
          }
          while (v15 != (_QWORD *)(v6 + 24 * v7 + 8));
        }
        v5 = v7 + 1;
      }
      while (v7 + 1 <= v29);
      MBRDecoder::connect_ngram_cd_fst((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v29), v29);
      to_string<unsigned int>();
      v17 = std::string::insert(&v24, 0, "mapper-cd-");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v28, ".fst");
      v20 = (void *)v19->__r_.__value_.__r.__words[0];
      v21 = SHIBYTE(v19->__r_.__value_.__r.__words[2]);
      v19->__r_.__value_.__r.__words[0] = 0;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      v22 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v29);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 280))(v22, *((_QWORD *)this + 5));
      v23 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v29);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 288))(v23, *((_QWORD *)this + 5));
      if (v21 < 0)
        operator delete(v20);
      v2 = ++v29;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3) > v29);
  }
}

void sub_1ADB9C05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void MBRDecoder::build_right_pathcounters(MBRDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  std::string v29;
  std::string __p;
  unsigned int v31;

  v31 = 0;
  if (*((_QWORD *)this + 9) != *((_QWORD *)this + 8))
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v2);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 200))(v3);
      v4 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v31);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 176))(v4, 0);
      v5 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v31);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_1AE163560;
      (*(void (**)(uint64_t, _QWORD, std::string *))(*(_QWORD *)v5 + 208))(v5, 0, &__p);
      v6 = v31;
      v7 = (_QWORD *)(*((_QWORD *)this + 8) + 24 * v31);
      v8 = (_QWORD *)*v7;
      if ((_QWORD *)*v7 != v7 + 1)
      {
        do
        {
          v9 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v6);
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 200))(v9);
          v11 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v31);
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 200))(v11);
          v13 = *((_QWORD *)this + 5);
          MBRDecoder::_vec_to_string((uint64_t)this, v8 + 4, &__p);
          v14 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 96))(v13, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v15 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v31);
          LODWORD(__p.__r_.__value_.__l.__data_) = v14;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v14;
          HIDWORD(__p.__r_.__value_.__r.__words[1]) = v10;
          (*(void (**)(uint64_t, _QWORD, std::string *))(*(_QWORD *)v15 + 208))(v15, 0, &__p);
          v16 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v31);
          (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v16 + 184))(v16, v10, 0.0);
          v17 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v31);
          __p.__r_.__value_.__r.__words[0] = 2;
          LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
          HIDWORD(__p.__r_.__value_.__r.__words[1]) = v10;
          (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v17 + 208))(v17, v10, &__p);
          v18 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v31);
          __p.__r_.__value_.__r.__words[0] = v14;
          LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
          HIDWORD(__p.__r_.__value_.__r.__words[1]) = v12;
          (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v18 + 208))(v18, v10, &__p);
          v19 = (_QWORD *)v8[1];
          if (v19)
          {
            do
            {
              v20 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = (_QWORD *)v8[2];
              v21 = *v20 == (_QWORD)v8;
              v8 = v20;
            }
            while (!v21);
          }
          v6 = v31;
          v8 = v20;
        }
        while (v20 != (_QWORD *)(*((_QWORD *)this + 8) + 24 * v31 + 8));
      }
      to_string<unsigned int>();
      v22 = std::string::insert(&v29, 0, "rpathcounter-");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v24 = std::string::append(&__p, ".fst");
      v25 = (void *)v24->__r_.__value_.__r.__words[0];
      v26 = SHIBYTE(v24->__r_.__value_.__r.__words[2]);
      v24->__r_.__value_.__r.__words[0] = 0;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      v27 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v31);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 280))(v27, *((_QWORD *)this + 5));
      v28 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v31);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 288))(v28, *((_QWORD *)this + 5));
      if (v26 < 0)
        operator delete(v25);
      v2 = ++v31;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3) > v31);
  }
}

void sub_1ADB9C3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MBRDecoder::build_decoders(void **this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  std::string v17;
  std::string v18;
  int v19;

  fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(this[6]);
  (*(void (**)(void *, void *))(*(_QWORD *)this[6] + 280))(this[6], this[5]);
  (*(void (**)(void *, void *))(*(_QWORD *)this[6] + 288))(this[6], this[5]);
  v19 = 0;
  if (*(int *)this >= 1)
  {
    v2 = 0;
    do
    {
      fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(*((void **)this[11] + v2));
      v3 = *((_QWORD *)this[11] + v19);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v3 + 280))(v3, this[5]);
      v4 = *((_QWORD *)this[11] + v19);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v4 + 288))(v4, this[5]);
      v5 = *((_QWORD *)this[11] + v19);
      v6 = (uint64_t)this[6];
      v7 = *((_QWORD *)this[17] + v19);
      v18.__r_.__value_.__s.__data_[0] = 1;
      HIDWORD(v18.__r_.__value_.__r.__words[0]) = 0;
      fst::Compose<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(v6, v5, v7, (uint64_t)&v18);
      v8 = *((_QWORD *)this[17] + v19);
      LODWORD(v18.__r_.__value_.__l.__data_) = 2;
      fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v8, &v18);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 280))(v8, v9);
      fst::RmEpsilon<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(*((void **)this[17] + v19), 1, -1, INFINITY, 0.00097656);
      to_string<int>();
      v10 = std::string::insert(&v17, 0, "lattice-");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v18.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = std::string::append(&v18, ".fst");
      v13 = (void *)v12->__r_.__value_.__r.__words[0];
      v14 = SHIBYTE(v12->__r_.__value_.__r.__words[2]);
      v12->__r_.__value_.__r.__words[0] = 0;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      v15 = *((_QWORD *)this[14] + v19);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v15 + 280))(v15, this[5]);
      v16 = *((_QWORD *)this[14] + v19);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v16 + 288))(v16, this[5]);
      fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(*((void **)this[14] + v19));
      fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(*((void **)this[17] + v19));
      MBRDecoder::countPaths((uint64_t)this, *((_QWORD *)this[14] + v19), *((_QWORD *)this[17] + v19), v19);
      if (v14 < 0)
        operator delete(v13);
      v2 = v19 + 1;
      v19 = v2;
    }
    while (v2 < *(_DWORD *)this);
  }
}

void sub_1ADB9C6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void MBRDecoder::decode(MBRDecoder *this)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v2 = (_QWORD *)*((_QWORD *)this + 6);
  v3 = *(_QWORD *)(v2[1] + 72) - *(_QWORD *)(v2[1] + 64);
  if ((int)(v3 >> 3) >= 1)
  {
    v4 = 0;
    v5 = (v3 >> 3);
    do
    {
      v6 = *((_QWORD *)this + 6);
      v26 = &unk_1E5D212D0;
      v29 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(v6);
      v7 = *(_QWORD *)(v6 + 8);
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 64) + 8 * v4);
      v27 = v8;
      v28 = v7 + 8;
      for (i = v29; ; i = ++v29)
      {
        v11 = v8 + 24;
        v10 = *(_QWORD *)(v8 + 24);
        if (i >= (*(_QWORD *)(v11 + 8) - v10) >> 4)
          break;
        v25 = *(__n128 *)(v10 + 16 * i);
        v25.n128_u32[2] = **((_DWORD **)this + 2);
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v26, &v25);
        v8 = v27;
      }
      ++v4;
    }
    while (v4 != v5);
    v2 = (_QWORD *)*((_QWORD *)this + 6);
  }
  fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(v2);
  v12 = *((_QWORD *)this + 6);
  v13 = **((_QWORD **)this + 11);
  v14 = **((_QWORD **)this + 20);
  LOBYTE(v26) = 1;
  HIDWORD(v26) = 0;
  fst::Compose<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(v12, v13, v14, (uint64_t)&v26);
  v15 = **((_QWORD **)this + 20);
  LODWORD(v26) = 1;
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v15, &v26);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 112))(v15);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 288))(v15, v16);
  fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(**((void ***)this + 20));
  if (*(int *)this > 1)
  {
    v17 = 0;
    do
    {
      v18 = (uint64_t *)(*((_QWORD *)this + 20) + 8 * v17);
      v19 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v17 + 8);
      v20 = *v18;
      v21 = v18[1];
      LOBYTE(v26) = 1;
      HIDWORD(v26) = 0;
      fst::Compose<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(v20, v19, v21, (uint64_t)&v26);
      v22 = *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v17 + 8);
      LODWORD(v26) = 1;
      fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v22, &v26);
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 112))(v22);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 288))(v22, v23);
      fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(*(void **)(*((_QWORD *)this + 20) + 8 * v17 + 8));
      v24 = v17 + 2;
      ++v17;
    }
    while (v24 < *(int *)this);
  }
}

void fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(void *a1)
{
  void *v1[2];
  void *__p[2];
  __int128 v3;
  char v4;

  v1[0] = a1;
  v1[1] = &v4;
  *(_OWORD *)__p = 0u;
  v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>((uint64_t)a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1ADB9C944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::Compose<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t Base;
  char v10[8];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;

  switch(*(_DWORD *)(a4 + 4))
  {
    case 0:
      v10[0] = FLAGS_fst_default_cache_gc;
      *(_QWORD *)&v11 = 0;
      v8 = &unk_1E5D19110;
      Base = fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
      goto LABEL_7;
    case 1:
      v10[0] = FLAGS_fst_default_cache_gc;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      v8 = &unk_1E5D19110;
      Base = fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
      goto LABEL_7;
    case 2:
      v10[0] = FLAGS_fst_default_cache_gc;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      v8 = &unk_1E5D19110;
      Base = fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
      goto LABEL_7;
    case 3:
      v10[0] = FLAGS_fst_default_cache_gc;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      v8 = &unk_1E5D19110;
      Base = fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
      goto LABEL_7;
    case 4:
      v10[0] = FLAGS_fst_default_cache_gc;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      v8 = &unk_1E5D19110;
      Base = fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v8);
LABEL_7:
      v8 = &unk_1E5D26758;
      v6 = Base;
      if (Base)
      {
        v7 = *(_DWORD *)(Base + 56) - 1;
        *(_DWORD *)(Base + 56) = v7;
        if (!v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      break;
    default:
      break;
  }
  if (*(_BYTE *)a4)
    fst::Connect<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a3);
}

void sub_1ADB9CB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    fst::Compose<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a10);
  _Unwind_Resume(exception_object);
}

void fst::Push<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::ReweightType)1>(uint64_t a1, uint64_t *a2, unsigned int a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  float *v15;
  int *p_p;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD v24[3];
  float v25;
  int v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  void *__p;
  uint64_t v33;
  char v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38[3];
  uint64_t v39;

  if ((a3 & 3) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(*a2 + 168))(a2, a1);
    fst::Push<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a2, 1, (a3 >> 2) & 1, a4);
  }
  else if ((a3 & 2) != 0)
  {
    memset(v38, 0, sizeof(v38));
    fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorFst(&v36);
    fst::ArcMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(a1, (uint64_t)&v36);
    if ((a3 & 1) != 0)
    {
      fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>((uint64_t)&v36, v38, 0, a4);
    }
    else
    {
      fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ArcMapFst(&__p, a1, (uint64_t)&v28);
      fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ArcMapFst(&v28, (uint64_t)&__p, (uint64_t)&v39);
      fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>((uint64_t)&v28, v38, 0, a4);
      v28 = &unk_1E5D23D50;
      v11 = v29;
      if (v29)
      {
        v12 = *(_DWORD *)(v29 + 56) - 1;
        *(_DWORD *)(v29 + 56) = v12;
        if (!v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      __p = &unk_1E5D24010;
      v13 = v33;
      if (v33)
      {
        v14 = *(_DWORD *)(v33 + 56) - 1;
        *(_DWORD *)(v33 + 56) = v14;
        if (!v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    v15 = (float *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
    *(float *)&__p = *v15;
    std::list<int>::list(&v33, (uint64_t)(v15 + 2));
    v35 = v15[8];
    if ((a3 & 0xC) != 0)
    {
      fst::ComputeTotalWeight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>((uint64_t)&v36, v38, 0, (uint64_t)&v28);
      LODWORD(__p) = (_DWORD)v28;
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v33, v30, (uint64_t)&v29);
      v35 = v31;
      std::__list_imp<char *>::clear(&v29);
      if ((a3 & 8) != 0)
        p_p = (int *)&__p;
      else
        p_p = (int *)fst::StringWeight<int,(fst::StringType)1>::One();
      v26 = *p_p;
      std::list<int>::list(v27, (uint64_t)(p_p + 2));
      v17 = v35;
      if ((a3 & 4) == 0)
        v17 = 0.0;
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v28, &v26, v17);
      LODWORD(__p) = (_DWORD)v28;
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v33, v30, (uint64_t)&v29);
      v35 = v31;
      std::__list_imp<char *>::clear(&v29);
      std::__list_imp<char *>::clear(v27);
    }
    fst::Reweight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>((uint64_t *)&v36, v38, 1);
    if ((a3 & 0xC) != 0)
    {
      v23 = (int)__p;
      std::list<int>::list(v24, (uint64_t)&v33);
      v25 = v35;
      fst::RemoveWeight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>((uint64_t)&v36, (uint64_t)&v23, 1);
      std::__list_imp<char *>::clear(v24);
    }
    fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FactorWeightFst(&v28, (uint64_t)&v36);
    v39 = 0;
    fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>((uint64_t)&v28, (uint64_t)a2, (uint64_t)&v39);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v18);
    v28 = &unk_1E5D26C38;
    v19 = v29;
    if (v29)
    {
      v20 = *(_DWORD *)(v29 + 56) - 1;
      *(_DWORD *)(v29 + 56) = v20;
      if (!v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    std::__list_imp<char *>::clear(&v33);
    v36 = &unk_1E5D25D00;
    v21 = v37;
    if (v37)
    {
      v22 = *(_DWORD *)(v37 + 56) - 1;
      *(_DWORD *)(v37 + 56) = v22;
      if (!v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    __p = v38;
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "WARNING");
    v8 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)&__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Push: pushing type is set to 0: ", 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"pushing neither labels nor weights.", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v28);
    if (v34 < 0)
      operator delete(__p);
    (*(void (**)(uint64_t *, uint64_t))(*a2 + 168))(a2, a1);
  }
}

void sub_1ADB9D030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _DWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  int v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;
  int v35;

  if (a20)
  {
    v31 = a20[14] - 1;
    a20[14] = v31;
    if (!v31)
      (*(void (**)(_DWORD *))(*(_QWORD *)a20 + 8))(a20);
  }
  __p = &unk_1E5D24010;
  v32 = a25;
  if (a25)
  {
    v33 = *(_DWORD *)(a25 + 56) - 1;
    *(_DWORD *)(a25 + 56) = v33;
    if (!v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  *(_QWORD *)(v29 - 128) = &unk_1E5D25D00;
  v34 = *(_DWORD **)(v29 - 120);
  if (v34)
  {
    v35 = v34[14] - 1;
    v34[14] = v35;
    if (!v35)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
  }
  __p = (void *)(v29 - 112);
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1ADB9D198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  fst::LogMessage::~LogMessage((fst::LogMessage *)va);
  JUMPOUT(0x1ADB9D1A4);
}

void fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(void *a1)
{
  void *v1[2];
  void *__p[2];
  __int128 v3;
  char v4;

  v1[0] = a1;
  v1[1] = &v4;
  *(_OWORD *)__p = 0u;
  v3 = 0u;
  fst::StateMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>((uint64_t)a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1ADB9D204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::RmEpsilon<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(void *a1, char a2, int a3, float a4, float a5)
{
  _QWORD *v10;
  int v11;
  float v12;
  char v13;
  char v14;
  float v15;
  int v16;
  _QWORD v17[9];
  void *v18;
  void *v19;
  uint64_t v20;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>((uint64_t)v17, (uint64_t)a1);
  v10 = v17;
  v11 = -1;
  v12 = a5;
  v13 = 0;
  v14 = a2;
  v15 = a4;
  v16 = a3;
  fst::RmEpsilon<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>>(a1, (char *)&v18, (uint64_t)&v10);
  fst::AutoQueue<int>::~AutoQueue(v17);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
}

void sub_1ADB9D2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  fst::AutoQueue<int>::~AutoQueue((uint64_t *)va);
  v7 = *(void **)(v5 - 72);
  if (v7)
  {
    *(_QWORD *)(v5 - 64) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t to_string<int>()
{
  uint64_t v0;
  _QWORD v2[13];
  char v3;
  uint64_t v4;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F50];
  v0 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v4);
}

void sub_1ADB9D3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MBRDecoder::countPaths(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  std::string::size_type size;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float *v24;
  unsigned int v25;
  uint64_t v26;
  float *v27;
  float v28;
  float v29;
  BOOL v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  float v40;
  float v41;
  float v42;
  BOOL v43;
  float v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  unint64_t i;
  uint64_t v56;
  float v57;
  uint64_t v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  void *v62;
  int v63;
  uint64_t result;
  int v65;
  std::string __p;
  std::string v67;
  unint64_t v68;
  std::vector<int> v69;
  void *v70[3];
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  void *v78;
  void *v79;
  uint64_t v80;
  int v81;

  v81 = a4;
  v7 = operator new();
  fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SigmaMatcher(v7, a2, 0, *(_DWORD *)(a1 + 4), 0, 0);
  v8 = operator new();
  fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::RhoMatcher(v8, a2, 0, *(_DWORD *)(a1 + 8), 0, v7);
  v9 = FLAGS_fst_default_cache_gc;
  v10 = operator new();
  fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::RhoMatcher(v10, a3, 3, -1, 0, 0);
  LOBYTE(v71) = v9;
  *((_QWORD *)&v71 + 1) = 0;
  v72 = 0;
  v73 = v10;
  v74 = v8;
  v75 = 0;
  v76 = 0;
  LOBYTE(v77) = 0;
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D19110;
  v67.__r_.__value_.__l.__size_ = fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a3, a2, (uint64_t *)&v71);
  fst::VectorFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::VectorFst(&v79, (uint64_t)&v67);
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D26758;
  size = v67.__r_.__value_.__l.__size_;
  if (v67.__r_.__value_.__l.__size_)
  {
    v12 = *(_DWORD *)(v67.__r_.__value_.__l.__size_ + 56) - 1;
    *(_DWORD *)(v67.__r_.__value_.__l.__size_ + 56) = v12;
    if (!v12)
      (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
  }
  BYTE2(v73) = 0;
  HIDWORD(v73) = 0;
  v72 = 0x3E4CCCCD3F000000;
  v75 = 0;
  v76 = 0;
  v78 = 0;
  v71 = xmmword_1AE163570;
  LOWORD(v73) = 256;
  v77 = xmmword_1AE163580;
  v13 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  v78 = v13;
  if ((_QWORD)v77)
  {
    v14 = *((_QWORD *)&v77 + 1);
    v15 = 8 * v77;
    do
    {
      *v13++ = v14;
      v15 -= 8;
    }
    while (v15);
  }
  fst::TopSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>>((uint64_t)&v79);
  v16 = (((*(_QWORD *)(v80 + 72) - *(_QWORD *)(v80 + 64)) << 29) + 0x100000000) >> 32;
  LODWORD(v67.__r_.__value_.__l.__data_) = 2139095040;
  std::vector<fst::LogWeightTpl<float>>::vector(v70, v16, &v67);
  *(_DWORD *)v70[0] = 0;
  std::vector<int>::vector(&v69, (((*(_QWORD *)(v80 + 72) - *(_QWORD *)(v80 + 64)) << 29) + 0x100000000) >> 32);
  *v69.__begin_ = 0;
  v17 = *(_QWORD *)(v80 + 72) - *(_QWORD *)(v80 + 64);
  if ((int)(v17 >> 3) >= 1)
  {
    v18 = 0;
    v19 = (v17 >> 3);
    while (1)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 64) + 8 * v18) + 24);
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 64) + 8 * v18) + 32) - v20;
      if (v21)
        break;
LABEL_34:
      if (++v18 == v19)
      {
        v36 = *(_QWORD *)(v80 + 72) - *(_QWORD *)(v80 + 64);
        if ((int)(v36 >> 3) >= 1)
        {
          v37 = 0;
          v38 = (v36 >> 3);
          do
          {
            v39 = *(_DWORD **)(*(_QWORD *)(v80 + 64) + 8 * v37);
            LODWORD(v67.__r_.__value_.__l.__data_) = *v39;
            LODWORD(__p.__r_.__value_.__l.__data_) = 2139095040;
            if (*(float *)&v67.__r_.__value_.__l.__data_ != INFINITY)
            {
              v40 = *((float *)v70[0] + v37);
              v41 = NAN;
              if (v40 != -INFINITY)
              {
                v42 = *(float *)v39;
                if (*(float *)v39 != -INFINITY)
                {
                  v43 = v40 == INFINITY || v42 == INFINITY;
                  v44 = v42 + v40;
                  if (v43)
                    v41 = INFINITY;
                  else
                    v41 = v44;
                }
              }
              v45 = google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::find_or_insert<google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::DefaultValue>((uint64_t)&v71, &v69.__begin_[v37]);
              v46 = *(float *)(v45 + 4);
              if (v46 != INFINITY)
              {
                if (v41 == INFINITY)
                {
                  v41 = *(float *)(v45 + 4);
                }
                else if (v46 <= v41)
                {
                  v48 = expf(-(float)(v41 - v46));
                  v41 = v46 - logf(v48 + 1.0);
                }
                else
                {
                  v47 = expf(-(float)(v46 - v41));
                  v41 = v41 - logf(v47 + 1.0);
                }
              }
              *(float *)(google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::find_or_insert<google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::DefaultValue>((uint64_t)&v71, &v69.__begin_[v37])+ 4) = v41;
            }
            ++v37;
          }
          while (v37 != v38);
        }
        goto LABEL_54;
      }
    }
    v22 = v21 >> 4;
    if (v22 <= 1)
      v23 = 1;
    else
      v23 = v22;
    v24 = (float *)(v20 + 12);
    while (1)
    {
      v25 = *((_DWORD *)v24 - 2);
      v26 = *(int *)v24;
      v27 = (float *)v70[0];
      v28 = *((float *)v70[0] + v18);
      if (v28 == -INFINITY || (v29 = *(v24 - 1), v29 == -INFINITY))
      {
        v33 = *((float *)v70[0] + v26);
        v32 = NAN;
        if (v33 != INFINITY)
          goto LABEL_26;
      }
      else
      {
        v30 = v28 == INFINITY || v29 == INFINITY;
        v31 = v29 + v28;
        if (v30)
          v32 = INFINITY;
        else
          v32 = v31;
        v33 = *((float *)v70[0] + v26);
        if (v33 == INFINITY)
          goto LABEL_27;
        if (v32 != INFINITY)
        {
          if (v33 > v32)
          {
            v35 = expf(-(float)(v33 - v32));
            v32 = v32 - logf(v35 + 1.0);
            goto LABEL_27;
          }
LABEL_26:
          v34 = expf(-(float)(v32 - v33));
          v32 = v33 - logf(v34 + 1.0);
          goto LABEL_27;
        }
        v32 = *((float *)v70[0] + v26);
      }
LABEL_27:
      v27[v26] = v32;
      if (v25)
      {
        v69.__begin_[v26] = v25;
        __p.__r_.__value_.__r.__words[0] = v25 | 0x7F80000000000000;
        google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::resize_delta((uint64_t)&v71, 1);
        google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::insert_noresize((uint64_t)&v71, (int *)&__p, (uint64_t)&v67);
      }
      else
      {
        v69.__begin_[v26] = v69.__begin_[v18];
      }
      v24 += 4;
      if (!--v23)
        goto LABEL_34;
    }
  }
LABEL_54:
  v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v81) + 8) + 72)
      - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v81) + 8) + 64);
  if ((int)(v49 >> 3) >= 1)
  {
    v50 = 0;
    v51 = (v49 >> 3);
    do
    {
      v52 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v81);
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D212D0;
      v68 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MutateCheck(v52);
      v53 = *(_QWORD *)(v52 + 8);
      v54 = *(_QWORD *)(*(_QWORD *)(v53 + 64) + 8 * v50);
      v67.__r_.__value_.__l.__size_ = v54;
      v67.__r_.__value_.__r.__words[2] = v53 + 8;
      for (i = v68; ; v68 = i)
      {
        v56 = *(_QWORD *)(v54 + 24);
        if (i >= (*(_QWORD *)(v54 + 32) - v56) >> 4)
          break;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v56 + 16 * i);
        if (HIDWORD(__p.__r_.__value_.__r.__words[0]))
        {
          if (fabsf(*(float *)(google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::find_or_insert<google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::DefaultValue>((uint64_t)&v71, (int *)__p.__r_.__value_.__r.__words + 1)+ 4)) >= 0.000976562)
          {
            v58 = google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::find_or_insert<google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::DefaultValue>((uint64_t)&v71, (int *)__p.__r_.__value_.__r.__words + 1);
            v57 = *(float *)(v58 + 4) * *(float *)(*(_QWORD *)(a1 + 16) + 4 * v81 + 4);
          }
          else
          {
            v57 = *(float *)(*(_QWORD *)(a1 + 16) + 4 * v81 + 4);
          }
          *(float *)&__p.__r_.__value_.__r.__words[1] = v57;
          fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v67, (__n128 *)&__p);
          i = v68;
          v54 = v67.__r_.__value_.__l.__size_;
        }
        ++i;
      }
      ++v50;
    }
    while (v50 != v51);
  }
  to_string<int>();
  v59 = std::string::insert(&__p, 0, "wmapper-");
  v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v60;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  v61 = std::string::append(&v67, ".fst");
  v62 = (void *)v61->__r_.__value_.__r.__words[0];
  v63 = SHIBYTE(v61->__r_.__value_.__r.__words[2]);
  v61->__r_.__value_.__r.__words[0] = 0;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  fst::ArcSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(*(void **)(*(_QWORD *)(a1 + 88) + 8 * v81));
  if (v63 < 0)
    operator delete(v62);
  if (v69.__begin_)
  {
    v69.__end_ = v69.__begin_;
    operator delete(v69.__begin_);
  }
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
  if (v78)
    free(v78);
  v79 = &unk_1E5D25440;
  result = v80;
  if (v80)
  {
    v65 = *(_DWORD *)(v80 + 56) - 1;
    *(_DWORD *)(v80 + 56) = v65;
    if (!v65)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADB9DAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  void *v38;
  int v39;
  uint64_t v40;
  _DWORD *v42;
  int v43;

  if (v39 < 0)
    operator delete(v38);
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  if (a38)
    free(a38);
  *(_QWORD *)(v40 - 144) = &unk_1E5D25440;
  v42 = *(_DWORD **)(v40 - 136);
  if (v42)
  {
    v43 = v42[14] - 1;
    v42[14] = v43;
    if (!v43)
      (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ComposeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D26758;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

BOOL fst::TopSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _QWORD v5[3];
  unsigned __int8 v6;
  void *__p;
  void *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  v6 = 0;
  v5[0] = &__p;
  v5[1] = &v6;
  fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, (uint64_t)v5, 0);
  if (v6)
  {
    fst::StateSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, &__p);
    v2 = 0x6800000000;
  }
  else
  {
    v2 = 0x8400000000;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v2, v2);
  v3 = v6;
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v3 != 0;
}

void sub_1ADB9DCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MBRDecoder::_vec_to_string(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  void **v9;
  std::string::size_type v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::basic_string[abi:ne180100]<0>(a3, "");
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 88))(__p, *(_QWORD *)(a1 + 40), *(int *)(v6 + 4 * v7));
      if ((v12 & 0x80u) == 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      if ((v12 & 0x80u) == 0)
        v10 = v12;
      else
        v10 = (std::string::size_type)__p[1];
      std::string::append(a3, (const std::string::value_type *)v9, v10);
      if ((char)v12 < 0)
        operator delete(__p[0]);
      v7 = v8;
      v6 = *a2;
      ++v8;
    }
    while (v7 < (a2[1] - *a2) >> 2);
  }
}

void sub_1ADB9DDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t to_string<unsigned int>()
{
  uint64_t v0;
  _QWORD v2[13];
  char v3;
  uint64_t v4;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F50];
  v0 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v4);
}

void sub_1ADB9DEB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void MBRDecoder::add_ngram(uint64_t a1, _QWORD *a2, uint64_t a3, void **a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v12;
  _DWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int *v29;
  _BYTE *v30;
  unsigned int *v31;
  int64_t v32;
  void *v33;
  unsigned int v34;
  void *v35;
  void *v36;
  uint64_t v37;
  std::string v38;
  _DWORD v39[4];
  void *__p;
  void *v41;
  uint64_t v42;

  if (a4[1] != *a4)
  {
    v9 = a3;
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 64) + 8 * (int)a3) + 32)
        - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 64) + 8 * (int)a3) + 24);
    v13 = v12 ? *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a2[1] + 64) + 8 * (int)a3) + 24) : 0;
    if (!v12)
      goto LABEL_17;
    v34 = a3;
    v14 = 0;
    v15 = v12 >> 4;
    v16 = v15 <= 1 ? 1 : v15;
    do
    {
      v17 = (char *)*a4;
      if (*v13 == *(_DWORD *)*a4)
      {
        v18 = v13[3];
        v19 = (char *)a4[1];
        v20 = v19 - (v17 + 4);
        if (v19 != v17 + 4)
          memmove(*a4, v17 + 4, v19 - (v17 + 4));
        v21 = *a4;
        a4[1] = &v17[v20];
        v41 = 0;
        v42 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v21, (uint64_t)&v17[v20], (&v17[v20] - (_BYTE *)v21) >> 2);
        MBRDecoder::add_ngram(a1, a2, v18, &__p, a5, a6);
        if (__p)
        {
          v41 = __p;
          operator delete(__p);
        }
        v14 = 1;
      }
      v13 += 4;
      --v16;
    }
    while (v16);
    v9 = v34;
    if ((v14 & 1) == 0)
    {
LABEL_17:
      v22 = (*(uint64_t (**)(_QWORD *))(*a2 + 200))(a2);
      v23 = v22;
      v24 = (unsigned int *)*a4;
      v25 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v25 == 4)
      {
        if ((_DWORD)a6)
        {
          v26 = *v24;
          v27 = *(_QWORD *)(a1 + 40);
          MBRDecoder::_vec_to_string(a1, a5, &v38);
          v28 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v27 + 32))(v27, &v38);
          v39[0] = v26;
          v39[1] = v28;
          v39[2] = 0;
          v39[3] = v23;
          (*(void (**)(_QWORD *, uint64_t, _DWORD *))(*a2 + 208))(a2, v9, v39);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v38.__r_.__value_.__l.__data_);
        }
        else
        {
          v38.__r_.__value_.__r.__words[0] = *v24;
          LODWORD(v38.__r_.__value_.__r.__words[1]) = 0;
          HIDWORD(v38.__r_.__value_.__r.__words[1]) = v22;
          (*(void (**)(_QWORD *, uint64_t, std::string *))(*a2 + 208))(a2, v9, &v38);
        }
        (*(void (**)(_QWORD *, uint64_t, float))(*a2 + 184))(a2, v23, 0.0);
      }
      else if (v25 >= 5)
      {
        v38.__r_.__value_.__r.__words[0] = *v24;
        LODWORD(v38.__r_.__value_.__r.__words[1]) = 0;
        HIDWORD(v38.__r_.__value_.__r.__words[1]) = v22;
        (*(void (**)(_QWORD *, uint64_t, std::string *))(*a2 + 208))(a2, v9, &v38);
        (*(void (**)(_QWORD *, uint64_t, float))(*a2 + 184))(a2, v23, 0.0);
        v30 = *a4;
        v29 = (unsigned int *)a4[1];
        v31 = (unsigned int *)((char *)*a4 + 4);
        v32 = (char *)v29 - (char *)v31;
        if (v29 != v31)
          memmove(*a4, v31, (char *)v29 - (char *)v31);
        v33 = *a4;
        a4[1] = &v30[v32];
        v36 = 0;
        v37 = 0;
        v35 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, v33, (uint64_t)&v30[v32], (&v30[v32] - (_BYTE *)v33) >> 2);
        MBRDecoder::add_ngram(a1, a2, v23, &v35, a5, a6);
        if (v35)
        {
          v36 = v35;
          operator delete(v35);
        }
      }
    }
  }
}

void sub_1ADB9E180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MBRDecoder::connect_ngram_cd_fst(uint64_t a1, unint64_t a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  int v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  int64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  int *v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  _DWORD *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  unint64_t arc;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44[2];
  unsigned __int8 v45;
  std::string v46;
  void *v47[2];
  std::string::size_type v48;
  void *__p;
  void *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;

  v3 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 24 * a3);
  v4 = (_QWORD *)*v3;
  if ((_QWORD *)*v3 != v3 + 1)
  {
    do
    {
      v52 = 0;
      v53 = 0;
      v54 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v52, (const void *)v4[4], v4[5], (uint64_t)(v4[5] - v4[4]) >> 2);
      v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2);
      __p = 0;
      v50 = 0;
      v51 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v52, (uint64_t)v53, (v53 - v52) >> 2);
      MBRDecoder::_get_arc(a1, a2, v7, (uint64_t)&__p);
      v9 = v8;
      if (__p)
      {
        v50 = __p;
        operator delete(__p);
      }
      v10 = v52;
      v11 = v53 - (v52 + 4);
      if (v53 != v52 + 4)
        memmove(v52, v52 + 4, v53 - (v52 + 4));
      v53 = &v10[v11];
      v12 = *(_QWORD **)(a1 + 64);
      v13 = (_QWORD *)*v12;
      if ((_QWORD *)*v12 != v12 + 1)
      {
        v14 = HIDWORD(v9);
        do
        {
          MBRDecoder::_vec_to_string(a1, (uint64_t *)&v52, &v46);
          v15 = (int *)v13[4];
          if ((int *)v13[5] == v15)
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 88))(v44, *(_QWORD *)(a1 + 40), *v15);
          if ((v45 & 0x80u) == 0)
            v16 = v44;
          else
            v16 = (void **)v44[0];
          if ((v45 & 0x80u) == 0)
            v17 = v45;
          else
            v17 = (std::string::size_type)v44[1];
          v18 = std::string::append(&v46, (const std::string::value_type *)v16, v17);
          v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v48 = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)v47 = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          if ((char)v45 < 0)
            operator delete(v44[0]);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v46.__r_.__value_.__l.__data_);
          if ((*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 40) + 96))(*(_QWORD *)(a1 + 40), v47) != -1)
          {
            v20 = (_DWORD *)v13[4];
            if ((_DWORD *)v13[5] == v20)
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            v21 = v53;
            if ((unint64_t)v53 >= v54)
            {
              v23 = v52;
              v24 = (v53 - v52) >> 2;
              v25 = v24 + 1;
              if ((unint64_t)(v24 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v26 = v54 - (_QWORD)v52;
              if ((uint64_t)(v54 - (_QWORD)v52) >> 1 > v25)
                v25 = v26 >> 1;
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
                v27 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v27 = v25;
              if (v27)
              {
                v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v54, v27);
                v23 = v52;
                v21 = v53;
              }
              else
              {
                v28 = 0;
              }
              v29 = &v28[4 * v24];
              *(_DWORD *)v29 = *v20;
              v22 = v29 + 4;
              while (v21 != v23)
              {
                v30 = *((_DWORD *)v21 - 1);
                v21 -= 4;
                *((_DWORD *)v29 - 1) = v30;
                v29 -= 4;
              }
              v52 = v29;
              v53 = v22;
              v54 = (unint64_t)&v28[4 * v27];
              if (v23)
                operator delete(v23);
            }
            else
            {
              *(_DWORD *)v53 = *v20;
              v22 = v21 + 4;
            }
            v53 = v22;
            v31 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2);
            v41 = 0;
            v42 = 0;
            v43 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v41, v52, (uint64_t)v53, (v53 - v52) >> 2);
            arc = MBRDecoder::_get_arc(a1, a2, v31, (uint64_t)&v41);
            v34 = v33;
            if (v41)
            {
              v42 = v41;
              operator delete(v41);
            }
            LODWORD(v46.__r_.__value_.__l.__data_) = v34;
            LODWORD(v44[0]) = 2139095040;
            if (*(float *)&v34 != INFINITY)
            {
              v46.__r_.__value_.__r.__words[0] = arc;
              LODWORD(v46.__r_.__value_.__r.__words[1]) = 0;
              HIDWORD(v46.__r_.__value_.__r.__words[1]) = HIDWORD(v34);
              (*(void (**)(unint64_t, unint64_t, std::string *, float))(*(_QWORD *)a2 + 208))(a2, v14, &v46, *(float *)&v34);
            }
            v53 -= 4;
          }
          if (SHIBYTE(v48) < 0)
            operator delete(v47[0]);
          v35 = (_QWORD *)v13[1];
          if (v35)
          {
            do
            {
              v36 = v35;
              v35 = (_QWORD *)*v35;
            }
            while (v35);
          }
          else
          {
            do
            {
              v36 = (_QWORD *)v13[2];
              v37 = *v36 == (_QWORD)v13;
              v13 = v36;
            }
            while (!v37);
          }
          v13 = v36;
        }
        while (v36 != (_QWORD *)(*(_QWORD *)(a1 + 64) + 8));
      }
      if (v52)
      {
        v53 = v52;
        operator delete(v52);
      }
      v38 = (_QWORD *)v4[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v4[2];
          v37 = *v39 == (_QWORD)v4;
          v4 = v39;
        }
        while (!v37);
      }
      v4 = v39;
    }
    while (v39 != (_QWORD *)(*(_QWORD *)(a1 + 64) + 24 * a3 + 8));
  }
}

void sub_1ADB9E5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32)
{
  uint64_t v32;
  void *v34;

  if (__p)
    operator delete(__p);
  v34 = *(void **)(v32 - 112);
  if (v34)
  {
    *(_QWORD *)(v32 - 104) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

unint64_t MBRDecoder::_get_arc(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4;
  char *v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  int64_t v24;
  _DWORD *v25;
  unint64_t arc;
  void *__p;
  void *v28;
  uint64_t v29;

  v4 = a2;
  v6 = *(_DWORD **)a4;
  v5 = *(char **)(a4 + 8);
  v7 = (unint64_t)&v5[-*(_QWORD *)a4];
  if (v7 == 4)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8 * a3);
    v10 = *(_QWORD *)(v8 + 24);
    v9 = *(_QWORD *)(v8 + 32);
    v12 = v9 - v10;
    v11 = v9 == v10;
    if (v9 == v10)
      v13 = 0;
    else
      v13 = v10;
    if (!v11)
    {
      v14 = v12 >> 4;
      if ((unint64_t)(v12 >> 4) <= 1)
        v14 = 1;
      v15 = v13 + 8;
      while (1)
      {
        v4 = *(_QWORD *)(v15 - 8);
        if (*v6 == (_DWORD)v4)
          break;
        v15 += 16;
        if (!--v14)
          goto LABEL_18;
      }
      v21 = HIDWORD(v4);
      return v4 | ((unint64_t)v21 << 32);
    }
LABEL_18:
    LODWORD(v4) = 0;
    LODWORD(v21) = 0;
    return v4 | ((unint64_t)v21 << 32);
  }
  if (v7 < 5)
    goto LABEL_18;
  v16 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8 * a3) + 24);
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8 * a3) + 32) - (_QWORD)v16;
  if (!v17)
    goto LABEL_18;
  v20 = v17 >> 4;
  if ((unint64_t)(v17 >> 4) <= 1)
    v20 = 1;
  while (*v16 != *v6)
  {
    v16 += 4;
    if (!--v20)
      goto LABEL_18;
  }
  v23 = v16[3];
  v24 = v5 - (char *)(v6 + 1);
  if (v5 == (char *)(v6 + 1))
  {
    v25 = *(_DWORD **)a4;
  }
  else
  {
    memmove(*(void **)a4, v6 + 1, v5 - (char *)(v6 + 1));
    v25 = *(_DWORD **)a4;
  }
  *(_QWORD *)(a4 + 8) = (char *)v6 + v24;
  v28 = 0;
  v29 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v25, (uint64_t)v6 + v24, ((char *)v6 + v24 - (char *)v25) >> 2);
  arc = MBRDecoder::_get_arc(a1, v4, v23, &__p);
  LODWORD(v4) = arc;
  v21 = HIDWORD(arc);
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  return v4 | ((unint64_t)v21 << 32);
}

void sub_1ADB9E7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(void *a1, char a2, int a3, float a4, float a5)
{
  _QWORD *v10;
  int v11;
  float v12;
  char v13;
  char v14;
  float v15;
  int v16;
  _QWORD v17[9];
  void *v18;
  void *v19;
  uint64_t v20;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)v17, (uint64_t)a1, (uint64_t)&v18);
  v10 = v17;
  v11 = -1;
  v12 = a5;
  v13 = 0;
  v14 = a2;
  v15 = a4;
  v16 = a3;
  fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>>(a1, (char *)&v18, (uint64_t)&v10);
  fst::AutoQueue<int>::~AutoQueue(v17);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
}

void sub_1ADB9E8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  fst::AutoQueue<int>::~AutoQueue((uint64_t *)va);
  v7 = *(void **)(v5 - 72);
  if (v7)
  {
    *(_QWORD *)(v5 - 64) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void fst::Minimize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t *a1, uint64_t a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t (**v25)(void **);
  uint64_t v26;
  uint64_t v27;

  v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x300010000, 1);
  if ((v6 & 0x10000) != 0)
  {
    if ((v6 & 0x100000000) != 0)
    {
      fst::Push<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, 0, 0, a3);
      *(float *)&v19 = a3;
      fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::QuantizeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a1, (float *)&v19);
      fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::EncodeMapper((uint64_t)&v22, 3, 1);
      v13 = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
      fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetInputSymbols(v23, v13);
      v14 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
      fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetOutputSymbols(v23, v14);
      fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t)&v22);
      fst::AcceptorMinimize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1);
      v19 = (void *)(v22 | 0x200000000);
      v20 = v23;
      v21 = v24;
      ++*(_DWORD *)(v23 + 80);
      fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t)&v19);
      fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~EncodeMapper((uint64_t)&v19);
      fst::RmFinalEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)a1);
      (*(void (**)(uint64_t *, _QWORD))(*a1 + 280))(a1, *(_QWORD *)(v23 + 88));
      (*(void (**)(uint64_t *, _QWORD))(*a1 + 288))(a1, *(_QWORD *)(v23 + 96));
      fst::EncodeMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~EncodeMapper((uint64_t)&v22);
    }
    else
    {
      fst::AcceptorMinimize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1);
    }
  }
  else
  {
    fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFst(&v25);
    fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)a1, (uint64_t)&v25);
    (*(void (**)(uint64_t *))(*a1 + 224))(a1);
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>::SetProperties((uint64_t)&v25, 0x10000, 0x10000);
    fst::Push<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)&v25, 0, 0, a3);
    *(float *)&v19 = a3;
    fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::QuantizeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t)&v25, (float *)&v19);
    fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::EncodeMapper((uint64_t)&v22, 3, 1);
    v7 = v25[14]((void **)&v25);
    fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetInputSymbols(v23, v7);
    v8 = v25[15]((void **)&v25);
    fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetOutputSymbols(v23, v8);
    fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t)&v25, (uint64_t)&v22);
    fst::AcceptorMinimize<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>(&v25);
    v19 = (void *)(v22 | 0x200000000);
    v20 = v23;
    v21 = v24;
    ++*(_DWORD *)(v23 + 80);
    fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t)&v25, (uint64_t)&v19);
    fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~EncodeMapper((uint64_t)&v19);
    fst::RmFinalEpsilon<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)&v25);
    ((void (*)(uint64_t (***)(void **), _QWORD))v25[35])(&v25, *(_QWORD *)(v23 + 88));
    ((void (*)(uint64_t (***)(void **), _QWORD))v25[36])(&v25, *(_QWORD *)(v23 + 96));
    if (a2)
    {
      v9 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v9);
      fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::GallicToNewSymbolsMapper(&v19, a2);
      fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)&v25, (uint64_t)a1, (uint64_t)&v19);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 288))(a1, v10);
      std::__hash_table<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::__unordered_map_hasher<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,true>,std::__unordered_map_equal<fst::StringWeight<int,(fst::StringType)0>,std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>,std::equal_to<fst::StringWeight<int,(fst::StringType)0>>,fst::GallicToNewSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>::StringKey,true>,std::allocator<std::__hash_value_type<fst::StringWeight<int,(fst::StringType)0>,int>>>::~__hash_table((uint64_t)&v20);
    }
    else
    {
      fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFst(&v19, (uint64_t)&v25);
      if ((*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1))
      {
        v15 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      }
      else
      {
        v16 = 0;
      }
      v27 = 0;
      fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)&v19, (uint64_t)a1, (uint64_t)&v27);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 288))(a1, v16);
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v19 = &unk_1E5D26EF8;
      v17 = v20;
      if (v20)
      {
        v18 = *(_DWORD *)(v20 + 56) - 1;
        *(_DWORD *)(v20 + 56) = v18;
        if (!v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
    }
    fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~EncodeMapper((uint64_t)&v22);
    v25 = (uint64_t (**)(void **))&unk_1E5D25E40;
    v11 = v26;
    if (v26)
    {
      v12 = *(_DWORD *)(v26 + 56) - 1;
      *(_DWORD *)(v26 + 56) = v12;
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
}

void sub_1ADB9ED00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  _DWORD *v13;
  int v14;
  va_list va;

  va_start(va, a11);
  fst::EncodeMapper<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)0>>::~EncodeMapper((uint64_t)va);
  *(_QWORD *)(v11 - 72) = &unk_1E5D25E40;
  v13 = *(_DWORD **)(v11 - 64);
  if (v13)
  {
    v14 = v13[14] - 1;
    v13[14] = v14;
    if (!v14)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D275D8;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::SymbolTable::SymbolTable(_QWORD *a1, __int128 *a2)
{
  std::string *v4;

  *a1 = &off_1E5D1AD68;
  v4 = (std::string *)operator new();
  fst::SymbolTableImpl::SymbolTableImpl(v4, a2);
  a1[1] = v4;
  return a1;
}

void sub_1ADB9EE90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(*(uint64_t **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(*(uint64_t **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

void std::vector<std::set<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<std::vector<int>>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::vector<int>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::vector<int>>::destroy(a1, *a2);
    std::__tree<std::vector<int>>::destroy(a1, a2[1]);
    v4 = (void *)a2[4];
    if (v4)
    {
      a2[5] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void fst::Relabel<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  fst *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  fst *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  void **v51;
  void *v52;
  _QWORD *v53;
  unint64_t *v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t *v60;
  char *v61;
  char *v62;
  unint64_t v63;
  fst *v64;
  _QWORD *v65;
  _QWORD *v66;
  int v68;
  uint64_t v69;
  void *v70[2];
  char v71;
  char v72;
  void *__p[2];
  unsigned __int8 v74;
  void *v75;
  unint64_t *v76;
  unint64_t *v77;
  void *v78;
  unint64_t *v79;
  unint64_t *v80;

  v78 = 0;
  v79 = 0;
  v80 = 0;
  if (a2 && a3)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
    v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
    if (v13)
    {
      v15 = v14;
      v68 = a7;
      v16 = 0;
      v17 = 0;
      v69 = a1;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(&v75, a2, v15);
        v18 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a3 + 96))(a3, &v75);
        v19 = v18;
        if (v18 == -1)
        {
          if (FLAGS_v >= 1)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v20 = fst::LogMessage::LogMessage((fst *)v70, (uint64_t)__p);
            v21 = (_QWORD *)fst::cerr(v20);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Input symbol id ", 16);
            v22 = (_QWORD *)std::ostream::operator<<();
            v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" symbol '", 9);
            v24 = SHIBYTE(v77) >= 0 ? &v75 : (void **)v75;
            v25 = SHIBYTE(v77) >= 0 ? HIBYTE(v77) : (uint64_t)v76;
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"' missing from target symbol table.", 35);
            fst::LogMessage::~LogMessage((fst::LogMessage *)v70);
            if ((char)v74 < 0)
              operator delete(__p[0]);
          }
          ++v16;
        }
        v27 = v79;
        if (v79 >= v80)
        {
          v29 = ((char *)v79 - (_BYTE *)v78) >> 3;
          if ((unint64_t)(v29 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v30 = ((char *)v80 - (_BYTE *)v78) >> 2;
          if (v30 <= v29 + 1)
            v30 = v29 + 1;
          if ((unint64_t)((char *)v80 - (_BYTE *)v78) >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v30;
          if (v31)
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v80, v31);
          else
            v32 = 0;
          v33 = (unint64_t *)&v32[8 * v29];
          *v33 = v15 | ((unint64_t)v19 << 32);
          v28 = v33 + 1;
          v35 = (char *)v78;
          v34 = (char *)v79;
          if (v79 != v78)
          {
            do
            {
              v36 = *((_QWORD *)v34 - 1);
              v34 -= 8;
              *--v33 = v36;
            }
            while (v34 != v35);
            v34 = (char *)v78;
          }
          v78 = v33;
          v79 = v28;
          v80 = (unint64_t *)&v32[8 * v31];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *v79 = v15 | ((unint64_t)v19 << 32);
          v28 = v27 + 1;
        }
        v79 = v28;
        if (SHIBYTE(v77) < 0)
          operator delete(v75);
        if (++v17 < v13)
          v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, v17);
      }
      while (v17 != v13);
      a1 = v69;
      a7 = v68;
      if (v16)
      {
        std::string::basic_string[abi:ne180100]<0>(&v75, "WARNING");
        v37 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)&v75);
        v38 = (_QWORD *)fst::cerr(v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Target symbol table missing: ", 29);
        v39 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" input symbols.", 15);
        fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
        if (SHIBYTE(v77) < 0)
          operator delete(v75);
      }
    }
    if (a4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, a3);
  }
  v75 = 0;
  v76 = 0;
  v77 = 0;
  if (a5 && a6)
  {
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 120))(a5);
    v41 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 128))(a5, 0);
    if (!v40)
      goto LABEL_80;
    v42 = v41;
    v43 = 0;
    v44 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a5 + 88))(__p, a5, v42);
      v45 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a6 + 96))(a6, __p);
      v46 = v45;
      if (v45 == -1)
      {
        if (FLAGS_v >= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v70, "INFO");
          v47 = fst::LogMessage::LogMessage((fst *)&v72, (uint64_t)v70);
          v48 = (_QWORD *)fst::cerr(v47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Output symbol id ", 17);
          v49 = (_QWORD *)std::ostream::operator<<();
          v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" symbol '", 9);
          v51 = (v74 & 0x80u) == 0 ? __p : (void **)__p[0];
          v52 = (v74 & 0x80u) == 0 ? (void *)v74 : __p[1];
          v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, (uint64_t)v52);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"' missing from target symbol table.", 35);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v72);
          if (v71 < 0)
            operator delete(v70[0]);
        }
        ++v43;
      }
      v54 = v76;
      if (v76 >= v77)
      {
        v56 = ((char *)v76 - (_BYTE *)v75) >> 3;
        if ((unint64_t)(v56 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v57 = ((char *)v77 - (_BYTE *)v75) >> 2;
        if (v57 <= v56 + 1)
          v57 = v56 + 1;
        if ((unint64_t)((char *)v77 - (_BYTE *)v75) >= 0x7FFFFFFFFFFFFFF8)
          v58 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v58 = v57;
        if (v58)
          v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v77, v58);
        else
          v59 = 0;
        v60 = (unint64_t *)&v59[8 * v56];
        *v60 = v42 | ((unint64_t)v46 << 32);
        v55 = v60 + 1;
        v62 = (char *)v75;
        v61 = (char *)v76;
        if (v76 != v75)
        {
          do
          {
            v63 = *((_QWORD *)v61 - 1);
            v61 -= 8;
            *--v60 = v63;
          }
          while (v61 != v62);
          v61 = (char *)v75;
        }
        v75 = v60;
        v76 = v55;
        v77 = (unint64_t *)&v59[8 * v58];
        if (v61)
          operator delete(v61);
      }
      else
      {
        *v76 = v42 | ((unint64_t)v46 << 32);
        v55 = v54 + 1;
      }
      v76 = v55;
      if ((char)v74 < 0)
        operator delete(__p[0]);
      if (++v44 < v40)
        v42 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 128))(a5, v44);
    }
    while (v44 != v40);
    if (!v43
      || (std::string::basic_string[abi:ne180100]<0>(__p, "WARNING"),
          v64 = fst::LogMessage::LogMessage((fst *)v70, (uint64_t)__p),
          v65 = (_QWORD *)fst::cerr(v64),
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Target symbol table missing: ", 29), v66 = (_QWORD *)std::ostream::operator<<(), std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" output symbols.", 16), fst::LogMessage::~LogMessage((fst::LogMessage *)v70), ((char)v74 & 0x80000000) == 0))
    {
LABEL_80:
      if (!a7)
        goto LABEL_82;
      goto LABEL_81;
    }
    operator delete(__p[0]);
    if (a7)
LABEL_81:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 288))(a1, a6);
  }
LABEL_82:
  fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, (uint64_t *)&v78, (uint64_t *)&v75);
  if (v75)
  {
    v76 = (unint64_t *)v75;
    operator delete(v75);
  }
  if (v78)
  {
    v79 = (unint64_t *)v78;
    operator delete(v78);
  }
}

void sub_1ADB9F754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35)
{
  if (a27 < 0)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  if (a34)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void **std::vector<std::set<std::vector<int>>>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  void **v23;

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 24 * a2;
      v14 = 24 * a2;
      v15 = (_QWORD *)(v7 + 8);
      do
      {
        *v15 = 0;
        v15[1] = 0;
        *(v15 - 1) = v15;
        v15 += 3;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      v13 = (uint64_t)*(result - 1);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v23 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v11);
    else
      v12 = 0;
    v19 = v12;
    v20 = &v12[24 * v8];
    v22 = &v12[24 * v11];
    v16 = &v20[24 * a2];
    v17 = 24 * a2;
    v18 = v20 + 8;
    do
    {
      *v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    v21 = v16;
    std::vector<std::set<std::vector<int>>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<std::set<std::vector<int>>>::~__split_buffer(&v19);
  }
  return result;
}

void sub_1ADB9F9B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::set<std::vector<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<std::vector<int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<std::vector<int>>>,std::reverse_iterator<std::set<std::vector<int>>*>,std::reverse_iterator<std::set<std::vector<int>>*>,std::reverse_iterator<std::set<std::vector<int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<std::vector<int>>>,std::reverse_iterator<std::set<std::vector<int>>*>,std::reverse_iterator<std::set<std::vector<int>>*>,std::reverse_iterator<std::set<std::vector<int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::vector<int>>>,std::reverse_iterator<std::set<std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::vector<int>>>,std::reverse_iterator<std::set<std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::vector<int>>>,std::reverse_iterator<std::set<std::vector<int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::vector<int>>>,std::reverse_iterator<std::set<std::vector<int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::vector<int>>::destroy(v1, *(_QWORD **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::set<std::vector<int>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::set<std::vector<int>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::set<std::vector<int>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<std::vector<int>>::destroy(i - 24, *(_QWORD **)(i - 16));
  }
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::WeightConvertMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v4);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v5);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result == -1)
  {
    if ((v6 & 4) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1) != 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 248))(a2, v8);
  }
  LODWORD(v16) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v14);
  while (!v14)
  {
    if ((int)v16 >= (int)v15)
      goto LABEL_14;
LABEL_9:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    else
      LODWORD(v16) = v16 + 1;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14))
    goto LABEL_9;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_14:
  v21 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v19);
  while (2)
  {
    if (!v19)
    {
      if ((int)v21 >= v20)
        goto LABEL_42;
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19))
    {
      if (v19)
      {
        v9 = (*(uint64_t (**)(void))(*(_QWORD *)v19 + 24))();
        goto LABEL_21;
      }
LABEL_20:
      v9 = v21;
LABEL_21:
      if ((_DWORD)v9 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v9);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 256))(a2, v9, v10);
      v18 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v9, &v14);
LABEL_24:
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
        {
          if (v14)
          {
            (*(void (**)(void))(*(_QWORD *)v14 + 8))();
            goto LABEL_37;
          }
LABEL_35:
          if (v17)
            --*v17;
LABEL_37:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v9);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, v9);
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
          else
            ++v21;
          continue;
        }
        if (v14)
        {
          v11 = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 32))();
          goto LABEL_30;
        }
      }
      else if (v18 >= v16)
      {
        goto LABEL_35;
      }
      v11 = (__int128 *)(v15 + 16 * v18);
LABEL_30:
      v13 = *v11;
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a2 + 208))(a2, v9, &v13);
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
      else
        ++v18;
      goto LABEL_24;
    }
    break;
  }
  if (v19)
    (*(void (**)(void))(*(_QWORD *)v19 + 8))();
LABEL_42:
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v12 | v6, 0x3FFFFFFF0007);
}

void sub_1ADB9FFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, void **a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  _BYTE *v9;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = (unint64_t)a2[5]; ; a2[5] = (void *)i)
        {
          v9 = a2[2];
          if (i >= ((_BYTE *)a2[3] - v9) >> 4)
            break;
          (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 208))(a1, v7, &v9[16 * i]);
          i = (unint64_t)a2[5] + 1;
        }
        (*(void (**)(void *, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, v7);
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 28) | 0x40000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetState(void **a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  void *v6;
  _OWORD *v7;
  unint64_t v8;
  char *v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _DWORD *v25;
  unint64_t v26;

  a1[5] = 0;
  v4 = a1 + 2;
  a1[3] = a1[2];
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v4, v5);
  v6 = *a1;
  v26 = 0;
  (*(void (**)(void *, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v24);
  while (1)
  {
    if (!v24[0])
    {
      if (v26 >= v24[2])
        goto LABEL_29;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v24[0] + 24))(v24[0]))
      break;
    if (v24[0])
    {
      v7 = (_OWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v24[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = (_OWORD *)(v24[1] + 16 * v26);
LABEL_8:
    v9 = (char *)a1[3];
    v8 = (unint64_t)a1[4];
    if ((unint64_t)v9 >= v8)
    {
      v11 = (v9 - (_BYTE *)*v4) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v13 = v8 - (_QWORD)*v4;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 4), v14);
      else
        v15 = 0;
      v16 = &v15[16 * v11];
      *(_OWORD *)v16 = *v7;
      v18 = (char *)a1[2];
      v17 = (char *)a1[3];
      v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        v17 = (char *)*v4;
      }
      v10 = v16 + 16;
      a1[2] = v19;
      a1[3] = v16 + 16;
      a1[4] = &v15[16 * v14];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_OWORD *)v9 = *v7;
      v10 = v9 + 16;
    }
    a1[3] = v10;
    if (v24[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v24[0] + 40))(v24[0]);
    else
      ++v26;
  }
  if (v24[0])
  {
    (*(void (**)(void))(*(_QWORD *)v24[0] + 8))();
    goto LABEL_31;
  }
LABEL_29:
  if (v25)
    --*v25;
LABEL_31:
  v20 = (unint64_t)a1[2];
  v21 = a1[3];
  v22 = 126 - 2 * __clz((uint64_t)((uint64_t)v21 - v20) >> 4);
  if (v21 == (_DWORD *)v20)
    v23 = 0;
  else
    v23 = v22;
  std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*,false>(v20, v21, (uint64_t)v24, v23, 1);
}

void sub_1ADBA03F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*,false>(unint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  __int128 v19;
  __int128 v20;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 4))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__n128 *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      v7 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)(a1 + 32));
      v8 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)(v8 + 4);
    if (v11 < *(_DWORD *)(v7 + 4))
    {
      v12 = *(_DWORD *)v8;
      v13 = *(_QWORD *)(v8 + 8);
      v14 = v9;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_DWORD *)(a1 + v14 + 20);
        v14 -= 16;
        if (v11 >= v15)
        {
          v16 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *(_DWORD *)v16 = v12;
      *(_DWORD *)(v16 + 4) = v11;
      *(_QWORD *)(v16 + 8) = v13;
      if (++v10 == 8)
        return v8 + 16 == a2;
    }
    v7 = v8;
    v9 += 16;
    v8 += 16;
    if (v8 == a2)
      return 1;
  }
}

void fst::Connect<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  void *__p;
  char *v15;
  char *v16;
  uint64_t v17[11];
  uint64_t v18;
  void *v19[3];
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  v17[0] = 0;
  v17[1] = (uint64_t)&v20;
  v17[2] = (uint64_t)v19;
  v17[3] = (uint64_t)&v18;
  fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, v17, 0);
  __p = 0;
  v15 = 0;
  v16 = 0;
  v2 = v21;
  if (v21)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if ((v20[v4 >> 6] & (1 << v4)) == 0 || (*((_QWORD *)v19[0] + (v4 >> 6)) & (1 << v4)) == 0)
      {
        if (v3 >= v16)
        {
          v6 = (char *)__p;
          v7 = (v3 - (_BYTE *)__p) >> 2;
          v8 = v7 + 1;
          if ((unint64_t)(v7 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v9 = v16 - (_BYTE *)__p;
          if ((v16 - (_BYTE *)__p) >> 1 > v8)
            v8 = v9 >> 1;
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
            v10 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v10 = v8;
          if (v10)
          {
            v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v16, v10);
            v6 = (char *)__p;
            v3 = v15;
          }
          else
          {
            v11 = 0;
          }
          v12 = &v11[4 * v7];
          *(_DWORD *)v12 = v4;
          v5 = v12 + 4;
          while (v3 != v6)
          {
            v13 = *((_DWORD *)v3 - 1);
            v3 -= 4;
            *((_DWORD *)v12 - 1) = v13;
            v12 -= 4;
          }
          __p = v12;
          v15 = v5;
          v16 = &v11[4 * v10];
          if (v6)
            operator delete(v6);
        }
        else
        {
          *(_DWORD *)v3 = v4;
          v5 = v3 + 4;
        }
        v15 = v5;
        v2 = v21;
        v3 = v5;
      }
      ++v4;
    }
    while (v2 > v4);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 216))(a1, &__p);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 0x50000000000, 0x50000000000);
  if (__p)
  {
    v15 = (char *)__p;
    operator delete(__p);
  }
  if (v19[0])
    operator delete(v19[0]);
  if (v20)
    operator delete(v20);
}

void sub_1ADBA0ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;
  void *v14;

  v13 = *(void **)(v11 - 112);
  if (v13)
    operator delete(v13);
  v14 = *(void **)(v11 - 88);
  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  __int128 v12;
  _BYTE v13[25];

  v6 = fst::LookAheadMatchType<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, a2);
  if (v6)
  {
    v7 = *(_QWORD *)(a3 + 8);
    v10[0] = *(_BYTE *)a3;
    v11 = v7;
    v12 = 0u;
    memset(v13, 0, sizeof(v13));
    if (v6 == 1)
      return fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>(a1, a2, (uint64_t)v10);
    else
      return fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
  }
  else
  {
    v9 = *(_QWORD *)(a3 + 8);
    v10[0] = *(_BYTE *)a3;
    v11 = v9;
    v12 = 0u;
    memset(v13, 0, sizeof(v13));
    return fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>(a1, a2, (uint64_t)v10);
  }
}

void fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ComposeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D26758;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFst(v4, a1, a2);
  return v4;
}

void sub_1ADBA0CA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D1FEA8;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1BF28;
  *a2 = v4;
  return result;
}

void sub_1ADBA0D4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitMatcher(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a1, a2);
}

uint64_t fst::LookAheadMatchType<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];

  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v6, a1, 1);
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v5, a2, 0);
  v3 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v6, v5);
  if (v5[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v5[0] + 8))(v5[0]);
  if (v6[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v6[0] + 8))(v6[0]);
  return v3;
}

void sub_1ADBA0E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v6;
  int32x2_t *v7;

  v3 = a3;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, a3);
  *(_QWORD *)a1 = v6;
  if (!v6)
  {
    v7 = (int32x2_t *)operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SortedMatcher(v7, a2, v3, 1);
    *(_QWORD *)a1 = v7;
  }
  *(_BYTE *)(a1 + 8) = 0;
  return a1;
}

void sub_1ADBA0ECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

int32x2_t *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SortedMatcher(int32x2_t *a1, uint64_t a2, __int32 a3, __int32 a4)
{
  __int32 v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  *a1 = (int32x2_t)&unk_1E5D1BBA8;
  a1[1] = (int32x2_t)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  a1[2].i32[0] = -1;
  a1[3] = 0;
  a1[4].i32[0] = a3;
  a1[4].i32[1] = a4;
  a1[5].i32[0] = -1;
  a1[6] = 0;
  *(_OWORD *)a1[7].i8 = xmmword_1AE142840;
  a1[9].i8[2] = 0;
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MemoryPool(&a1[10], 1);
  v7 = a1[4].i32[0];
  if (v7 && v7 != 3)
  {
    if (v7 == 1)
    {
      a1[7] = vrev64_s32(a1[7]);
    }
    else
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0)
        operator delete(__p[0]);
      a1[4].i32[0] = 3;
      a1[9].i8[2] = 1;
    }
  }
  return a1;
}

void sub_1ADBA103C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  quasar::Bitmap *v19;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v18 + 80) = &unk_1E5D195F8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)(v18 + 88));
  quasar::Bitmap::~Bitmap(v19);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D195F8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D195F8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~SortedMatcher(_QWORD *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~SortedMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SortedMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADBA1154(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3)
    return 3;
  if (v2)
    v6 = 0x40000000;
  else
    v6 = 0x10000000;
  v7 = *(_QWORD *)(a1 + 8);
  if (v2)
    v8 = 3221225472;
  else
    v8 = 805306368;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 32);
  v10 = 0x80000000;
  if (!v2)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 3;
  else
    return 4;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 74))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Flags()
{
  return 0;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Next_(uint64_t result)
{
  uint64_t *v1;

  if (*(_BYTE *)(result + 72))
  {
    *(_BYTE *)(result + 72) = 0;
  }
  else
  {
    v1 = *(uint64_t **)(result + 24);
    result = *v1;
    if (*v1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    else
      ++v1[4];
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Final_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a2);
}

_QWORD *fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D195F8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADBA1304(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Size()
{
  return 40;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A5B0;
  a1[1] = 48 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADBA13EC(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A5B0;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::Size()
{
  return 48;
}

_QWORD *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~SortedMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E5D1BBA8;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    }
    else
    {
      v3 = (_DWORD *)v2[3];
      if (v3)
        --*v3;
    }
    v2[5] = a1[17];
    a1[17] = v2;
  }
  v4 = a1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  a1[10] = &unk_1E5D195F8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &unk_1E5D1BBA8;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MemoryPool((_QWORD *)(a1 + 80), 1);
  return a1;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetState(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  char v11;

  if (*(_DWORD *)(result + 16) != (_DWORD)a2)
  {
    v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v4 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
      v5 = (_QWORD *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (v10 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(v3 + 74) = 1;
    }
    v6 = *(_QWORD **)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(v6, *(_QWORD *)(v3 + 8), a2);
      v7 = *(_QWORD **)(v3 + 24);
    }
    else
    {
      v7 = *(_QWORD **)(v3 + 136);
      if (v7)
      {
        *(_QWORD *)(v3 + 136) = v7[5];
      }
      else
      {
        v7 = (_QWORD *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Allocate((_QWORD *)(v3 + 88), 1);
        v7[5] = 0;
      }
      v8 = *(_QWORD *)(v3 + 8);
      v7[4] = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v8 + 136))(v8, a2, v7);
      *(_QWORD *)(v3 + 24) = v7;
    }
    if (*v7)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 80))(*v7, 16, 16);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 8) + 40))(*(_QWORD *)(v3 + 8), a2);
    *(_QWORD *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 68) = a2;
  }
  return result;
}

void sub_1ADBA1744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1ADBA17D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D220;
  v8 = *(__int128 **)(a4 + 40);
  if (!v8)
  {
    v8 = (__int128 *)operator new();
    fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SequenceComposeFilter((uint64_t)v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1ADBA19BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = (_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CacheBaseImpl(a1, a4);
  *v7 = &unk_1E5D205E8;
  fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitBase((uint64_t)v7, a2, a3);
  return a1;
}

void sub_1ADBA1A74(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1ADBA1BB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = (_QWORD *)a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = (_QWORD *)a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1ADBA1D2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v5 = (unsigned int *)(v4 + 12 * a2);
  v6 = *v5;
  v10 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 96))(**(_QWORD **)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    v7 = v5[1];
    v8 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(**(_QWORD **)(a1 + 152), v7);
    v10 = v8;
    if (v8 != INFINITY)
    {
      v9 = *(_QWORD *)(a1 + 136);
      LOBYTE(v10) = *(_BYTE *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[8];
  uint64_t v9;

  *(_QWORD *)a1 = &unk_1E5D22780;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B6B0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4;
  if (!v4)
  {
    v5 = operator new();
    v6 = *(_QWORD *)(a2 + 8);
    v8[0] = *(_BYTE *)a2;
    v9 = v6;
    fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GCCacheStore(v5, (uint64_t)v8);
    v4 = *(_QWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 120) = v5;
  *(_BYTE *)(a1 + 128) = v4 == 0;
  return a1;
}

{
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E5D22780;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B6B0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GCCacheStore(v4, a2);
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

void sub_1ADBA1FF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  const fst::SymbolTable *v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "compose");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
  v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  if (!fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
    v8 = fst::LogMessage::LogMessage((fst *)&v16, (uint64_t)&__str);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ComposeFst: output symbol table of 1st argument ", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"does not match input symbol table of 2nd argument", 49);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v16);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 40) = v13;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 120))(a3);
  result = *(_QWORD *)(a1 + 48);
  if (result != v14)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (v14)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    else
      result = 0;
    *(_QWORD *)(a1 + 48) = result;
  }
  return result;
}

void sub_1ADBA2204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B6B0;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitMatcher()
{
  return 0;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Matcher(v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Matcher(a5, a3, 0);
    v6 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1ADBA238C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

_QWORD *fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Matcher(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v6;
  int32x2_t *v7;

  v3 = a3;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, a3);
  *a1 = v6;
  if (!v6)
  {
    v7 = (int32x2_t *)operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SortedMatcher(v7, a2, v3, 1);
    *a1 = v7;
  }
  return a1;
}

void sub_1ADBA2438(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D220;
  v2 = a1[17];
  if (v2)
  {
    v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C40AD892F49);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  __int128 v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D220;
  v4 = (_QWORD **)operator new();
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SequenceComposeFilter(v4, *(_QWORD ***)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1ADBA25B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CacheBaseImpl((uint64_t)a1, a2, 1u);
  *(_QWORD *)v4 = &unk_1E5D205E8;
  std::string::operator=((std::string *)(v4 + 16), (const std::string *)(a2 + 16));
  a1[1] = a1[1] & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = a1[5];
  if (v6 != v5)
  {
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v5)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    else
      v7 = 0;
    a1[5] = v7;
  }
  v8 = *(_QWORD *)(a2 + 48);
  v9 = a1[6];
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    else
      v10 = 0;
    a1[6] = v10;
  }
  return a1;
}

void sub_1ADBA26FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  _BYTE v12[8];
  uint64_t v13;

  *(_QWORD *)a1 = &unk_1E5D22780;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B6B0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v12[0] = *(_BYTE *)(a1 + 104);
  v13 = v7;
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GCCacheStore(v6, (uint64_t)v12);
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v8 = 1;
  else
    v8 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v8;
  if (((a3 ^ 1) & 1) == 0)
  {
    v9 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::operator=(v6, v9);
    v10 = *(_OWORD *)(v9 + 88);
    *(_OWORD *)(v6 + 104) = *(_OWORD *)(v9 + 104);
    *(_OWORD *)(v6 + 88) = v10;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1ADBA284C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  char *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x38uLL);
        fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CacheState(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(const void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::LogWeightTpl<float>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::LogWeightTpl<float>,int> const*>>((_QWORD *)(a1 + 24), v4, v5, (v5 - (uint64_t)v4) >> 4);
  *(_QWORD *)(a1 + 48) = *(unsigned int *)(a2 + 48);
  return a1;
}

_QWORD *std::vector<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::LogWeightTpl<float>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::LogWeightTpl<float>,int> const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADBA2B44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD **fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SequenceComposeFilter(_QWORD **a1, _QWORD **a2, uint64_t a3)
{
  *a1 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*a2, a3);
  a1[1] = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(a2[1], a3);
  a1[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 32))(**a1);
  a1[3] = (_QWORD *)-1;
  *((_BYTE *)a1 + 32) = -1;
  return a1;
}

_QWORD *fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, a2);
  return v4;
}

void sub_1ADBA2C30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1ADBA2D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  unsigned int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADBA2F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F100;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADBA3050(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;

  *(_BYTE *)(a1 + 48) = (_DWORD)a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if ((_DWORD)a2)
    {
      v2 = (_QWORD **)(a1 + 40);
      v3 = (_QWORD **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = (_QWORD **)(a1 + 32);
    v3 = (_QWORD **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D1F100;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F100;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1ADBA3548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1ADBA35E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D2E0;
  v8 = *(_QWORD *)(a4 + 40);
  if (!v8)
  {
    v8 = operator new();
    fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(v8, a2, a3, *(_QWORD *)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *(_QWORD **)(v8 + 120);
  *(_QWORD *)(a1 + 144) = v8 + 120;
  *(_QWORD *)(a1 + 152) = v8 + 200;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a1 + 152) + 32))(***(_QWORD ***)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 144) + 40))(***(_QWORD ***)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 40))(***(_QWORD ***)(a1 + 152), v12);
  v15 = fst::ComposeProperties(v13, v14);
  v16 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40);
  v17 = v15 | 4;
  if (v16 != 3)
    v17 = v15;
  v18 = v16 == 1;
  v19 = 0x3FFCCC300004;
  if (v18)
    v19 = 0x3FFC330C0004;
  *(_QWORD *)(a1 + 8) = v17 & v19 | *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL;
  return a1;
}

void sub_1ADBA3804(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  char v4;

  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 40))(***(_QWORD ***)(a1 + 144), 0) & 4) != 0|| (v4 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 40))(***(_QWORD ***)(a1 + 152), 0), *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1ADBA39A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 20 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v8 = *((_QWORD *)v4 + 1);
  LODWORD(v4) = v4[4];
  v17 = v8;
  v18 = (int)v4;
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v7, v5, v6, &v17);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v10 = a1[20];
    v9 = a1[21];
    v11 = (_DWORD *)a1[19];
    v12 = (uint64_t)a1;
    v13 = a2;
    v14 = v6;
    v15 = v5;
    v16 = 1;
  }
  else
  {
    v9 = a1[20];
    v10 = a1[21];
    v11 = (_DWORD *)a1[18];
    v12 = (uint64_t)a1;
    v13 = a2;
    v14 = v5;
    v15 = v6;
    v16 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(v12, v13, v9, v14, v10, v15, v11, v16);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 24))(***(_QWORD ***)(a1 + 144), 0) == a3)(*(void (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 24))(***(_QWORD ***)(a1 + 152), 0);
  return 0;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  int v6;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    v4 = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    result = 0xFFFFFFFFLL;
    if (v4 != -1)
    {
      v5 = __PAIR64__(v4, v3);
      v6 = -1;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(a1[22], &v5, 1);
    }
  }
  return result;
}

float fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  float result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  float v15;
  float v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v5 = (int *)(v4 + 20 * a2);
  v6 = *v5;
  result = (*(float (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 96))(***(_QWORD ***)(a1 + 144), *v5);
  v16 = result;
  *(float *)&v13 = result;
  v17 = 2139095040;
  if (result != INFINITY)
  {
    v8 = v5[1];
    result = (*(float (**)(_QWORD, uint64_t, float, float))(****(_QWORD ****)(a1 + 152) + 96))(***(_QWORD ***)(a1 + 152), v8, result, result);
    v15 = result;
    *(float *)&v13 = result;
    v17 = 2139095040;
    if (result != INFINITY)
    {
      v9 = *(_QWORD *)(a1 + 136);
      v10 = v4 + 20 * a2;
      v11 = *(_QWORD *)(v10 + 8);
      LODWORD(v10) = *(_DWORD *)(v10 + 16);
      v13 = v11;
      v14 = v10;
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v9, v6, v8, &v13);
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterFinal(*(_QWORD *)(a1 + 136), &v16);
      result = NAN;
      if (v16 != -INFINITY)
      {
        result = NAN;
        if (v15 != -INFINITY)
        {
          result = INFINITY;
          if (v15 != INFINITY && v16 != INFINITY)
            return v16 + v15;
        }
      }
    }
  }
  return result;
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD **v6;
  int v7;
  int v8;

  v6 = (_QWORD **)fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(a1, a2, a3, a4, a5);
  *((_BYTE *)v6 + 84) = 127;
  *((_DWORD *)v6 + 20) = -2147483393;
  v6[11] = (_QWORD *)0x7F800000FFLL;
  *((_DWORD *)v6 + 24) = -1;
  *(_QWORD *)(a1 + 104) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v6 + 32))(**v6);
  *(_QWORD *)(a1 + 112) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
  if (*(_DWORD *)(a1 + 40) == 1)
    v7 = 1;
  else
    v7 = 2;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 120, *(_QWORD *)(a1 + 104), 1, v7, *(_QWORD *)a1, 0);
  if (*(_DWORD *)(a1 + 40) == 1)
    v8 = 2;
  else
    v8 = 1;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 200, *(_QWORD *)(a1 + 112), 0, v8, *(_QWORD *)(a1 + 8), 0);
  return a1;
}

void sub_1ADBA3DA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD **v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  char v21;

  v6 = (_QWORD **)fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AltSequenceComposeFilter(a1, a2, a3, a4, a5);
  v7 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*v6, *(_QWORD **)(a1 + 8));
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_BYTE **)(a1 + 8);
  *(_QWORD *)(a1 + 48) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_BYTE **)a1, 0);
  *(_QWORD *)(a1 + 56) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(v8, 0);
  *(_DWORD *)(a1 + 64) = v7;
  v9 = **(_QWORD **)(a1 + 8 * (*(_DWORD *)(a1 + 40) != 1));
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  if (*(_DWORD *)(a1 + 40) == 3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"LookAheadComposeFilter: 1st argument cannot ", 44);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"match/look-ahead on output labels and 2nd argument ", 51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"cannot match/look-ahead on input labels.", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  v14 = 56;
  if (*(_DWORD *)(a1 + 64) == 1)
    v15 = 48;
  else
    v15 = 56;
  v16 = *(_BYTE **)(a1 + v15);
  if (*(_DWORD *)(a1 + 64) != 1)
    v14 = 48;
  v17 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v14) + 32))(**(_QWORD **)(a1 + v14));
  if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(v16))
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v16 + 112))(*(_QWORD *)v16, v17, 0);
  return a1;
}

void sub_1ADBA3F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v10;

  v6 = a4;
  if (!a4)
  {
    v6 = operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadMatcher(v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    v10 = operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadMatcher(v10, a3, 0);
    a5 = (_QWORD *)v10;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 32))(*a5);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1ADBA4080(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_QWORD *)v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, a2);
  *(_BYTE *)(v4 + 8) = a1[8];
  return v4;
}

void sub_1ADBA4110(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(_BYTE *a1)
{
  int v2;
  fst *v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  char v8;

  if (!a1[8])
  {
    v2 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 48))() & 0x30;
    a1[8] = v2 != 0;
    if (!v2)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
      v4 = (_QWORD *)fst::cerr(v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"LookAheadMatcher: No look-ahead matcher defined", 47);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
      if (v7 < 0)
        operator delete(__p[0]);
    }
  }
  return a1[8];
}

void sub_1ADBA4200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MultiEpsMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char a6)
{
  uint64_t v11;
  char v13;
  int v14;
  int v15;

  v11 = a5;
  if (!a5)
  {
    v11 = operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadMatcher(v11, a2, a3);
  }
  *(_QWORD *)a1 = v11;
  *(_DWORD *)(a1 + 8) = a4;
  if (a5)
    v13 = a6;
  else
    v13 = 1;
  *(_BYTE *)(a1 + 12) = v13;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  if ((_DWORD)a3)
    v14 = 0;
  else
    v14 = -1;
  if ((_DWORD)a3)
    v15 = -1;
  else
    v15 = 0;
  *(_DWORD *)(a1 + 60) = v14;
  *(_DWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 68) = 0xFFFFFFFF00000000;
  return a1;
}

void sub_1ADBA42FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADBA4364(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D2E0;
  v2 = a1[17];
  if (v2)
  {
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 200);
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 120);
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C40F6F5CAE4);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D2E0;
  v4 = operator new();
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(v4, *(_QWORD *)(a2 + 136), 1);
  v5 = *(_QWORD **)(v4 + 120);
  *(_QWORD *)(a1 + 136) = v4;
  *(_QWORD *)(a1 + 144) = v4 + 120;
  *(_QWORD *)(a1 + 152) = v4 + 200;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a1 + 152) + 32))(***(_QWORD ***)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1ADBA44F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  int v5;
  int v6;

  v4 = (_QWORD **)fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(a1, a2, a3);
  *((_BYTE *)v4 + 84) = 127;
  *((_DWORD *)v4 + 20) = -2147483393;
  v4[11] = (_QWORD *)0x7F800000FFLL;
  *((_DWORD *)v4 + 24) = -1;
  *(_QWORD *)(a1 + 104) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v4 + 32))(**v4);
  *(_QWORD *)(a1 + 112) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
  if (*(_DWORD *)(a1 + 40) == 1)
    v5 = 1;
  else
    v5 = 2;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 120, *(_QWORD *)(a1 + 104), 1, v5, *(_QWORD *)a1, 0);
  if (*(_DWORD *)(a1 + 40) == 1)
    v6 = 2;
  else
    v6 = 1;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 200, *(_QWORD *)(a1 + 112), 0, v6, *(_QWORD *)(a1 + 8), 0);
  return a1;
}

void sub_1ADBA4618(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;

  v5 = fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AltSequenceComposeFilter(a1, (_BYTE **)a2, a3);
  v6 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v5 + 40) = v6;
  v7 = *(_BYTE **)(a1 + 8);
  *(_QWORD *)(a1 + 48) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_BYTE **)v5, 0);
  *(_QWORD *)(a1 + 56) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(v7, 0);
  *(_DWORD *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v8 = 56;
  if (v6 == 1)
    v9 = 48;
  else
    v9 = 56;
  v10 = *(_BYTE **)(a1 + v9);
  if (v6 != 1)
    v8 = 48;
  v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v8) + 32))(**(_QWORD **)(a1 + v8));
  if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(v10))
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v10 + 112))(*(_QWORD *)v10, v11, 1);
  return a1;
}

void sub_1ADBA470C(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, _BYTE **a2, uint64_t a3)
{
  _QWORD *v6;

  *(_QWORD *)a1 = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*a2, a3);
  v6 = (_QWORD *)fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(a2[1], a3);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::CompactHashBiTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *i;

  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = a1;
  v4 = a1 + 24;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, *(_QWORD *)(a2 + 48), (_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>*,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>*>((char *)(a1 + 80), *(__int128 **)(a2 + 80), *(__int128 **)(a2 + 88), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2));
  for (i = *(int **)(a2 + 40); i; i = *(int **)i)
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v4, i + 4, i + 4);
  return a1;
}

void sub_1ADBA4830(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>*,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
      *(_OWORD *)v7 = v8;
      v7 += 20;
      a2 = (__int128 *)((char *)a2 + 20);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADBA48BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t (*v6)(void);
  int v7;
  _QWORD *v8;

  v5 = *a4;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(a1 + 88) = v5;
  LODWORD(v5) = *(_DWORD *)a4;
  *(_BYTE *)(a1 + 84) = *((_BYTE *)a4 + 4);
  *(_DWORD *)(a1 + 80) = v5;
  fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(a1, a2, a3, a4);
  if ((*(_BYTE *)(a1 + 72) & 0x80) != 0)
  {
    if (*(_DWORD *)(a1 + 40) == 1)
      v6 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 104) + 40);
    else
      v6 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 112) + 40);
    *(_QWORD *)(a1 + 280) = v6();
    v7 = *(_DWORD *)(a1 + 96);
    std::__tree<int>::destroy(a1 + 136, *(_QWORD **)(a1 + 144));
    *(_QWORD *)(a1 + 136) = a1 + 144;
    *(_QWORD *)(a1 + 144) = 0;
    v8 = *(_QWORD **)(a1 + 224);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = -1;
    std::__tree<int>::destroy(a1 + 216, v8);
    *(_QWORD *)(a1 + 216) = a1 + 224;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = -1;
    if (v7 != -1)
    {
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 120, v7);
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 200, v7);
    }
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a1 + 144) + 104))(***(_QWORD ***)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 104))(***(_QWORD ***)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1ADBA4B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, int a8)
{
  int v12;
  int *v15;
  _QWORD v16[3];
  _DWORD *v17;
  unint64_t v18;
  int v19[4];

  v12 = a4;
  (*(void (**)(_QWORD, uint64_t))(***(_QWORD ***)a7 + 56))(**(_QWORD **)a7, a4);
  a7[18] = v12;
  v19[0] = a8 - 1;
  v19[1] = a8 << 31 >> 31;
  v19[2] = 0;
  v19[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(a1, a2, a7, v19, a8);
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v16);
  while (1)
  {
    if (!v16[0])
    {
      if (v18 >= v16[2])
        goto LABEL_13;
LABEL_7:
      v15 = (int *)(v16[1] + 16 * v18);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v16[0] + 24))(v16[0]))
      break;
    if (!v16[0])
      goto LABEL_7;
    v15 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v16[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(a1, a2, a7, v15, a8);
    if (v16[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v16[0] + 40))(v16[0]);
    else
      ++v18;
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(_QWORD *)v16[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v17)
    --*v17;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADBA4CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddMultiEpsLabel(uint64_t a1, int a2)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v5;
  char v6;

  if (a2)
  {
    fst::CompactSet<int,-1>::Insert(a1 + 16, a2);
  }
  else
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v2 = fst::LogMessage::LogMessage((fst *)&v6, (uint64_t)__p);
    v3 = (_QWORD *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"MultiEpsMatcher: Bad multi-eps label: 0", 39);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v6);
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

void sub_1ADBA4DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(uint64_t a1, int a2, _BYTE *a3, int *a4, int a5)
{
  int *v10;
  uint64_t result;
  __int128 *v12;
  __int128 v13;
  unint64_t v14;
  int v15;
  unsigned int *v17;
  __int128 *v18;
  unint64_t v19;
  int v20;
  unint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  int v26;
  float v27;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(a3, *v10);
  if ((_DWORD)result && !a3[76])
  {
    do
    {
      v12 = (__int128 *)(a3 + 60);
      if (!a3[56])
        v12 = (__int128 *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)a3 + 80))(**(_QWORD **)a3);
      v13 = *v12;
      v24 = *(_OWORD *)a4;
      v25 = v13;
      if (a5)
      {
        v14 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)&v24, (uint64_t)&v25);
        v22 = v14;
        v23 = v15;
        if ((_BYTE)v14 == 0xFF)
        {
          LODWORD(v27) = v14 >> 8;
          v26 = 2139095040;
          if (v27 == INFINITY && v15 == -1)
            goto LABEL_21;
        }
        v17 = (unsigned int *)&v24;
        v18 = &v25;
      }
      else
      {
        v19 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)&v25, (uint64_t)&v24);
        v22 = v19;
        v23 = v20;
        if ((_BYTE)v19 == 0xFF)
        {
          LODWORD(v27) = v19 >> 8;
          v26 = 2139095040;
          if (v27 == INFINITY && v20 == -1)
            goto LABEL_21;
        }
        v17 = (unsigned int *)&v25;
        v18 = &v24;
      }
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(a1, a2, v17, (uint64_t)v18, (uint64_t)&v22);
LABEL_21:
      result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next((uint64_t)a3);
    }
    while (!a3[76]);
  }
  return result;
}

unint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  char v13;
  int v14;
  float v15;

  v3 = a3;
  v4 = a2;
  if ((*(_BYTE *)(a1 + 72) & 0x80) == 0)
  {
    v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
    goto LABEL_3;
  }
  v8 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v8 != -1)
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      a2 = a3;
      a3 = v4;
    }
    v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushedLabelFilterArc(a1, a2, a3, v8);
    goto LABEL_17;
  }
  v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
  v12 = v6;
  v13 = BYTE4(v6);
  if ((_BYTE)v6 == 0xFF)
  {
    LODWORD(v15) = v6 >> 8;
    v14 = 2139095040;
    if (v15 == INFINITY)
    {
      v7 = 0;
      v6 = 0x7F800000FFLL;
      return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
    }
  }
  if (*(_BYTE *)(a1 + 76))
  {
    if (*(_DWORD *)(a1 + 40) == 1)
    {
      v9 = v4;
      v10 = v3;
    }
    else
    {
      v9 = v3;
      v10 = v4;
    }
    v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelFilterArc(a1, v9, v10, &v12);
LABEL_17:
    v7 = v6 & 0xFFFFFF0000000000;
    return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
  }
LABEL_3:
  v7 = 0;
  return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(uint64_t a1, int a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  float v11;
  float v12;
  unsigned int Id;
  char *MutableState;
  __int128 v16;
  __int128 v17;
  int v18;

  v7 = *(_DWORD *)(a4 + 12);
  LODWORD(v17) = a3[3];
  DWORD1(v17) = v7;
  *((_QWORD *)&v17 + 1) = *(_QWORD *)a5;
  v18 = *(_DWORD *)(a5 + 8);
  v8 = *a3;
  v9 = *(_DWORD *)(a4 + 4);
  v10 = *((float *)a3 + 2);
  v11 = NAN;
  if (v10 != -INFINITY)
  {
    v12 = *(float *)(a4 + 8);
    if (v12 != -INFINITY)
    {
      if (v12 == INFINITY || v10 == INFINITY)
        v11 = INFINITY;
      else
        v11 = v10 + v12;
    }
  }
  Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(*(_QWORD **)(a1 + 176), &v17, 1);
  *(_QWORD *)&v16 = __PAIR64__(v9, v8);
  *((_QWORD *)&v16 + 1) = __PAIR64__(Id, LODWORD(v11));
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v16);
}

unint64_t fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  _BYTE *v10;
  float v11;
  float v13;
  float v14;
  float v15;
  int v16;
  float v17;
  float v18;

  v5 = fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, (_DWORD *)a3);
  if (v5 == 0xFF)
  {
    v7 = 2139095040;
    goto LABEL_11;
  }
  v6 = v5;
  if ((*(_BYTE *)(a1 + 72) & 0x40) == 0)
  {
    v7 = 0;
    return v6 | (unint64_t)(v7 << 8);
  }
  v8 = 0.0;
  if (*(_BYTE *)(a1 + 76))
  {
    v9 = 56;
    if (*(_DWORD *)(a1 + 64) == 1)
      v9 = 48;
    v10 = *(_BYTE **)(a1 + v9);
    if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(v10))
      v8 = *(float *)(*(_QWORD *)v10 + 8);
  }
  v11 = *(float *)(a1 + 81);
  v7 = 2139095040;
  if (v8 == INFINITY)
  {
LABEL_11:
    v6 = -1;
    return v6 | (unint64_t)(v7 << 8);
  }
  v13 = *(float *)(a3 + 8);
  v14 = NAN;
  if (v13 != -INFINITY && v8 != -INFINITY)
  {
    if (v8 == INFINITY || v13 == INFINITY)
    {
      v14 = INFINITY;
      if ((LODWORD(v11) & 0x7FFFFFFFu) >= 0x7F800000)
        v14 = NAN;
    }
    else
    {
      v15 = v8 + v13;
      v14 = NAN;
      if (v15 != -INFINITY)
      {
        v16 = LODWORD(v11) & 0x7FFFFFFF;
        v14 = NAN;
        v17 = v15 - v11;
        if (v15 == INFINITY)
          v17 = INFINITY;
        if (v16 <= 2139095039)
          v14 = v17;
      }
    }
  }
  *(float *)(a3 + 8) = v14;
  v18 = floorf((float)(v8 * 1024.0) + 0.5) * 0.00097656;
  if ((LODWORD(v8) & 0x7FFFFFFFu) >= 0x7F800000)
    v18 = v8;
  v7 = LODWORD(v18);
  return v6 | (unint64_t)(v7 << 8);
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushedLabelFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;

  v4 = 0x7F800000FFLL;
  v5 = *(_DWORD *)(a1 + 40);
  v6 = v5 != 1;
  v7 = v5 == 1;
  if (*(_DWORD *)(a3 + 4 * v6) == -1)
  {
    v9 = 4 * v7;
    v10 = *(_DWORD *)(a2 + v9);
    if (v10 == (_DWORD)a4)
    {
      v4 = 0;
      *(_DWORD *)(a2 + v9) = 0;
    }
    else if (!v10)
    {
      if (*(_QWORD *)(a1 + 280) == 1)
        return *(_QWORD *)(a1 + 88);
      v13 = *(_DWORD *)(a1 + 64) == 1 ? 48 : 56;
      (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + v13) + 56))(**(_QWORD **)(a1 + v13), *(unsigned int *)(a2 + 12));
      v14 = *(_DWORD *)(a1 + 64) == 1 ? 48 : 56;
      v15 = *(_BYTE **)(a1 + v14);
      if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(v15)
        || (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)v15 + 120))(*(_QWORD *)v15, a4))
      {
        return *(_QWORD *)(a1 + 88);
      }
    }
  }
  return v4;
}

unint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  float v16;
  int v17;
  float v18;
  float v19;
  BOOL v20;
  float v21;

  if (*(_DWORD *)(a3 + 4 * (*(_DWORD *)(a1 + 40) == 1)))
    return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  v9 = 4 * (*(_DWORD *)(a1 + 40) == 1);
  if (*(_DWORD *)(a2 + v9))
  {
    if ((*(_BYTE *)(a1 + 73) & 4) != 0)
      return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  }
  v10 = 56;
  if (*(_DWORD *)(a1 + 64) == 1)
    v10 = 48;
  v11 = *(_BYTE **)(a1 + v10);
  if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(v11))
    return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  v12 = *(_QWORD *)v11;
  v13 = *(_DWORD *)(*(_QWORD *)v11 + 24);
  if (v13 == -1)
    return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  v14 = *(_DWORD *)(v12 + 12);
  v15 = *(_DWORD *)(v12 + 16);
  v16 = *(float *)(v12 + 20);
  if (*(_DWORD *)(a1 + 40) == 1)
    v17 = *(_DWORD *)(v12 + 12);
  else
    v17 = *(_DWORD *)(v12 + 16);
  *(_DWORD *)(a2 + v9) = v17;
  *(_DWORD *)a3 = v14;
  *(_DWORD *)(a3 + 4) = v15;
  v18 = *(float *)(a3 + 8);
  v19 = NAN;
  if (v18 != -INFINITY && v16 != -INFINITY)
  {
    v19 = INFINITY;
    v20 = v18 == INFINITY || v16 == INFINITY;
    v21 = v16 + v18;
    if (!v20)
      v19 = v21;
  }
  *(float *)(a3 + 8) = v19;
  *(_DWORD *)(a3 + 12) = v13;
  return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v3;
  int v4;
  unsigned __int8 v5;
  int v6;
  BOOL v7;
  unsigned __int8 v8;
  unsigned __int8 v10;

  v3 = (_DWORD *)a2;
  *(_BYTE *)(a1 + 76) = 0;
  if (*a3 == -1)
  {
    if (!*(_BYTE *)(a1 + 33))
    {
      v5 = *(_BYTE *)(a1 + 34) ^ 1;
      goto LABEL_7;
    }
    return 255;
  }
  v4 = *(_DWORD *)(a2 + 4);
  if (v4 == -1)
  {
    v6 = *(unsigned __int8 *)(a1 + 32);
    v7 = v6 == 1;
    if (v6 == 1)
      v8 = -1;
    else
      v8 = 0;
    v10 = v8;
    if (!v7)
      goto LABEL_14;
    return 255;
  }
  if (!v4)
    return 255;
  v5 = 0;
LABEL_7:
  v10 = v5;
LABEL_14:
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    a2 = (uint64_t)a3;
    a3 = v3;
  }
  return fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, (uint64_t)a3, &v10);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = *(_DWORD *)(a1 + 72);
  if (*(_DWORD *)(a2 + 4 * (*(_DWORD *)(a1 + 40) == 1)))
  {
    if ((v7 & 0x100) == 0)
      return *a4;
  }
  else if ((v7 & 0x200) == 0)
  {
    return *a4;
  }
  *(_BYTE *)(a1 + 76) = 1;
  if (*(_DWORD *)(a1 + 64) == 1)
    v8 = 48;
  else
    v8 = 56;
  (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + v8) + 56))(**(_QWORD **)(a1 + v8), *(unsigned int *)(a2 + 12));
  v9 = *(_DWORD *)(a1 + 64);
  v10 = v9 == 1;
  if (v9 == 1)
    v11 = 48;
  else
    v11 = 56;
  v12 = *(_BYTE **)(a1 + v11);
  if (v10)
    v13 = 56;
  else
    v13 = 48;
  v14 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v13) + 32))(**(_QWORD **)(a1 + v13));
  v15 = *(unsigned int *)(a3 + 12);
  if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(v12)
    || (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v12 + 128))(*(_QWORD *)v12, v14, v15))
  {
    return *a4;
  }
  return 255;
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(_QWORD *a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  unsigned int v25;

  a1[13] = a2;
  v6 = (uint64_t)(a1 + 3);
  v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::kCurrentKey);
  if (v7)
    return *((unsigned int *)v7 + 4);
  if (!a3)
    return 0xFFFFFFFFLL;
  v9 = a1[10];
  v10 = a1[11];
  v11 = (uint64_t)(v10 - v9) / 20;
  v25 = v11;
  v12 = a1[12];
  if (v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) > 0xCCCCCCCCCCCCCCCLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v9) >> 2);
    v16 = 2 * v15;
    if (2 * v15 <= v11 + 1)
      v16 = v11 + 1;
    if (v15 >= 0x666666666666666)
      v17 = 0xCCCCCCCCCCCCCCCLL;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)(a1 + 12), v17);
    else
      v18 = 0;
    v19 = &v18[20 * v11];
    v20 = &v18[20 * v17];
    v21 = *a2;
    *((_DWORD *)v19 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v19 = v21;
    v14 = v19 + 20;
    v23 = (char *)a1[10];
    v22 = (char *)a1[11];
    if (v22 != v23)
    {
      do
      {
        v24 = *(_OWORD *)(v22 - 20);
        *((_DWORD *)v19 - 1) = *((_DWORD *)v22 - 1);
        *(_OWORD *)(v19 - 20) = v24;
        v19 -= 20;
        v22 -= 20;
      }
      while (v22 != v23);
      v22 = (char *)a1[10];
    }
    a1[10] = v19;
    a1[11] = v14;
    a1[12] = v20;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v13 = *a2;
    *(_DWORD *)(v10 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v10 = v13;
    v14 = (char *)(v10 + 20);
  }
  a1[11] = v14;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v25, &v25);
  return v25;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1ADBA58C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D280;
  v8 = *(_QWORD *)(a4 + 40);
  if (!v8)
  {
    v8 = operator new();
    fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD *)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *(_QWORD **)(v8 + 120);
  *(_QWORD *)(a1 + 144) = v8 + 120;
  *(_QWORD *)(a1 + 152) = v8 + 200;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a1 + 152) + 32))(***(_QWORD ***)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 144) + 40))(***(_QWORD ***)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 40))(***(_QWORD ***)(a1 + 152), v12);
  v15 = fst::ComposeProperties(v13, v14);
  v16 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40);
  v17 = v15 | 4;
  if (v16 != 3)
    v17 = v15;
  v18 = v16 == 1;
  v19 = 0x3FFCCC300004;
  if (v18)
    v19 = 0x3FFC330C0004;
  *(_QWORD *)(a1 + 8) = v17 & v19 | *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL;
  return a1;
}

void sub_1ADBA5AE0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  char v4;

  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 40))(***(_QWORD ***)(a1 + 144), 0) & 4) != 0|| (v4 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 40))(***(_QWORD ***)(a1 + 152), 0), *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1ADBA5C84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 20 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v8 = *((_QWORD *)v4 + 1);
  LODWORD(v4) = v4[4];
  v17 = v8;
  v18 = (int)v4;
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v7, v5, v6, &v17);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v10 = a1[20];
    v9 = a1[21];
    v11 = (_DWORD *)a1[19];
    v12 = (uint64_t)a1;
    v13 = a2;
    v14 = v6;
    v15 = v5;
    v16 = 1;
  }
  else
  {
    v9 = a1[20];
    v10 = a1[21];
    v11 = (_DWORD *)a1[18];
    v12 = (uint64_t)a1;
    v13 = a2;
    v14 = v5;
    v15 = v6;
    v16 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(v12, v13, v9, v14, v10, v15, v11, v16);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 24))(***(_QWORD ***)(a1 + 144), 0) == a3)(*(void (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 24))(***(_QWORD ***)(a1 + 152), 0);
  return 0;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  int v6;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    v4 = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    result = 0xFFFFFFFFLL;
    if (v4 != -1)
    {
      v5 = __PAIR64__(v4, v3);
      v6 = -1;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(a1[22], &v5, 1);
    }
  }
  return result;
}

float fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  float result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  float v15;
  float v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v5 = (unsigned int *)(v4 + 20 * a2);
  v6 = *v5;
  result = (*(float (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 144) + 96))(***(_QWORD ***)(a1 + 144), v6);
  v16 = result;
  *(float *)&v13 = result;
  v17 = 2139095040;
  if (result != INFINITY)
  {
    v8 = v5[1];
    result = (*(float (**)(_QWORD, uint64_t, float, float))(****(_QWORD ****)(a1 + 152) + 96))(***(_QWORD ***)(a1 + 152), v8, result, result);
    v15 = result;
    *(float *)&v13 = result;
    v17 = 2139095040;
    if (result != INFINITY)
    {
      v9 = *(_QWORD *)(a1 + 136);
      v10 = v4 + 20 * a2;
      v11 = *(_QWORD *)(v10 + 8);
      LODWORD(v10) = *(_DWORD *)(v10 + 16);
      v13 = v11;
      v14 = v10;
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v9, v6, v8, &v13);
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterFinal(*(_QWORD *)(a1 + 136), &v16);
      result = NAN;
      if (v16 != -INFINITY)
      {
        result = NAN;
        if (v15 != -INFINITY)
        {
          result = INFINITY;
          if (v15 != INFINITY && v16 != INFINITY)
            return v16 + v15;
        }
      }
    }
  }
  return result;
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD **v6;
  int v7;
  int v8;

  v6 = (_QWORD **)fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(a1, a2, a3, a4, a5);
  *((_BYTE *)v6 + 84) = 127;
  *((_DWORD *)v6 + 20) = -2147483393;
  v6[11] = (_QWORD *)0x7F800000FFLL;
  *((_DWORD *)v6 + 24) = -1;
  *(_QWORD *)(a1 + 104) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v6 + 32))(**v6);
  *(_QWORD *)(a1 + 112) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
  if (*(_DWORD *)(a1 + 40) == 1)
    v7 = 1;
  else
    v7 = 2;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 120, *(_QWORD *)(a1 + 104), 1, v7, *(_QWORD *)a1, 0);
  if (*(_DWORD *)(a1 + 40) == 1)
    v8 = 2;
  else
    v8 = 1;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 200, *(_QWORD *)(a1 + 112), 0, v8, *(_QWORD *)(a1 + 8), 0);
  return a1;
}

void sub_1ADBA6080(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD **v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  char v21;

  v6 = (_QWORD **)fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SequenceComposeFilter(a1, a2, a3, a4, a5);
  v7 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*v6, *(_QWORD **)(a1 + 8));
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_BYTE **)(a1 + 8);
  *(_QWORD *)(a1 + 48) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_BYTE **)a1, 0);
  *(_QWORD *)(a1 + 56) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(v8, 0);
  *(_DWORD *)(a1 + 64) = v7;
  v9 = **(_QWORD **)(a1 + 8 * (*(_DWORD *)(a1 + 40) != 1));
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  if (*(_DWORD *)(a1 + 40) == 3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"LookAheadComposeFilter: 1st argument cannot ", 44);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"match/look-ahead on output labels and 2nd argument ", 51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"cannot match/look-ahead on input labels.", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  v14 = 56;
  if (*(_DWORD *)(a1 + 64) == 1)
    v15 = 48;
  else
    v15 = 56;
  v16 = *(_BYTE **)(a1 + v15);
  if (*(_DWORD *)(a1 + 64) != 1)
    v14 = 48;
  v17 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v14) + 32))(**(_QWORD **)(a1 + v14));
  if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(v16))
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v16 + 112))(*(_QWORD *)v16, v17, 0);
  return a1;
}

void sub_1ADBA623C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadMatcher(a5, a3, 0);
    v6 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1ADBA635C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D280;
  v2 = a1[17];
  if (v2)
  {
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 200);
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 120);
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C40F6F5CAE4);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D280;
  v4 = operator new();
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(v4, *(_QWORD *)(a2 + 136), 1);
  v5 = *(_QWORD **)(v4 + 120);
  *(_QWORD *)(a1 + 136) = v4;
  *(_QWORD *)(a1 + 144) = v4 + 120;
  *(_QWORD *)(a1 + 152) = v4 + 200;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a1 + 152) + 32))(***(_QWORD ***)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1ADBA650C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  int v5;
  int v6;

  v4 = (_QWORD **)fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(a1, a2, a3);
  *((_BYTE *)v4 + 84) = 127;
  *((_DWORD *)v4 + 20) = -2147483393;
  v4[11] = (_QWORD *)0x7F800000FFLL;
  *((_DWORD *)v4 + 24) = -1;
  *(_QWORD *)(a1 + 104) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v4 + 32))(**v4);
  *(_QWORD *)(a1 + 112) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
  if (*(_DWORD *)(a1 + 40) == 1)
    v5 = 1;
  else
    v5 = 2;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 120, *(_QWORD *)(a1 + 104), 1, v5, *(_QWORD *)a1, 0);
  if (*(_DWORD *)(a1 + 40) == 1)
    v6 = 2;
  else
    v6 = 1;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 200, *(_QWORD *)(a1 + 112), 0, v6, *(_QWORD *)(a1 + 8), 0);
  return a1;
}

void sub_1ADBA662C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;

  v5 = fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SequenceComposeFilter((uint64_t *)a1, (_BYTE **)a2, a3);
  v6 = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v5 + 10) = v6;
  v7 = *(_BYTE **)(a1 + 8);
  *(_QWORD *)(a1 + 48) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy((_BYTE *)*v5, 0);
  *(_QWORD *)(a1 + 56) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(v7, 0);
  *(_DWORD *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v8 = 56;
  if (v6 == 1)
    v9 = 48;
  else
    v9 = 56;
  v10 = *(_BYTE **)(a1 + v9);
  if (v6 != 1)
    v8 = 48;
  v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v8) + 32))(**(_QWORD **)(a1 + v8));
  if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(v10))
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v10 + 112))(*(_QWORD *)v10, v11, 1);
  return a1;
}

void sub_1ADBA6720(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t *a1, _BYTE **a2, uint64_t a3)
{
  *a1 = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*a2, a3);
  a1[1] = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(a2[1], a3);
  a1[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a1 + 32))(*(_QWORD *)*a1);
  a1[3] = -1;
  *((_BYTE *)a1 + 32) = -1;
  return a1;
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t (*v6)(void);
  int v7;
  _QWORD *v8;

  v5 = *a4;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(a1 + 88) = v5;
  LODWORD(v5) = *(_DWORD *)a4;
  *(_BYTE *)(a1 + 84) = *((_BYTE *)a4 + 4);
  *(_DWORD *)(a1 + 80) = v5;
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(a1, a2, a3, a4);
  if ((*(_BYTE *)(a1 + 72) & 0x80) != 0)
  {
    if (*(_DWORD *)(a1 + 40) == 1)
      v6 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 104) + 40);
    else
      v6 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 112) + 40);
    *(_QWORD *)(a1 + 280) = v6();
    v7 = *(_DWORD *)(a1 + 96);
    std::__tree<int>::destroy(a1 + 136, *(_QWORD **)(a1 + 144));
    *(_QWORD *)(a1 + 136) = a1 + 144;
    *(_QWORD *)(a1 + 144) = 0;
    v8 = *(_QWORD **)(a1 + 224);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = -1;
    std::__tree<int>::destroy(a1 + 216, v8);
    *(_QWORD *)(a1 + 216) = a1 + 224;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = -1;
    if (v7 != -1)
    {
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 120, v7);
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 200, v7);
    }
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a1 + 144) + 104))(***(_QWORD ***)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 104))(***(_QWORD ***)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1ADBA69EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, int a8)
{
  int v12;
  int *v15;
  _QWORD v16[3];
  _DWORD *v17;
  unint64_t v18;
  int v19[4];

  v12 = a4;
  (*(void (**)(_QWORD, uint64_t))(***(_QWORD ***)a7 + 56))(**(_QWORD **)a7, a4);
  a7[18] = v12;
  v19[0] = a8 - 1;
  v19[1] = a8 << 31 >> 31;
  v19[2] = 0;
  v19[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(a1, a2, a7, v19, a8);
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v16);
  while (1)
  {
    if (!v16[0])
    {
      if (v18 >= v16[2])
        goto LABEL_13;
LABEL_7:
      v15 = (int *)(v16[1] + 16 * v18);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v16[0] + 24))(v16[0]))
      break;
    if (!v16[0])
      goto LABEL_7;
    v15 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v16[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(a1, a2, a7, v15, a8);
    if (v16[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v16[0] + 40))(v16[0]);
    else
      ++v18;
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(_QWORD *)v16[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v17)
    --*v17;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADBA6B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>(uint64_t a1, int a2, _BYTE *a3, int *a4, int a5)
{
  int *v10;
  uint64_t result;
  __int128 *v12;
  __int128 v13;
  unint64_t v14;
  int v15;
  unsigned int *v17;
  __int128 *v18;
  unint64_t v19;
  int v20;
  unint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  int v26;
  float v27;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(a3, *v10);
  if ((_DWORD)result && !a3[76])
  {
    do
    {
      v12 = (__int128 *)(a3 + 60);
      if (!a3[56])
        v12 = (__int128 *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)a3 + 80))(**(_QWORD **)a3);
      v13 = *v12;
      v24 = *(_OWORD *)a4;
      v25 = v13;
      if (a5)
      {
        v14 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)&v24, (uint64_t)&v25);
        v22 = v14;
        v23 = v15;
        if ((_BYTE)v14 == 0xFF)
        {
          LODWORD(v27) = v14 >> 8;
          v26 = 2139095040;
          if (v27 == INFINITY && v15 == -1)
            goto LABEL_21;
        }
        v17 = (unsigned int *)&v24;
        v18 = &v25;
      }
      else
      {
        v19 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)&v25, (uint64_t)&v24);
        v22 = v19;
        v23 = v20;
        if ((_BYTE)v19 == 0xFF)
        {
          LODWORD(v27) = v19 >> 8;
          v26 = 2139095040;
          if (v27 == INFINITY && v20 == -1)
            goto LABEL_21;
        }
        v17 = (unsigned int *)&v25;
        v18 = &v24;
      }
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::LogWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(a1, a2, v17, (uint64_t)v18, (uint64_t)&v22);
LABEL_21:
      result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next((uint64_t)a3);
    }
    while (!a3[76]);
  }
  return result;
}

unint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  char v13;
  int v14;
  float v15;

  v3 = a3;
  v4 = a2;
  if ((*(_BYTE *)(a1 + 72) & 0x80) == 0)
  {
    v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
    goto LABEL_3;
  }
  v8 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v8 != -1)
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      a2 = a3;
      a3 = v4;
    }
    v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushedLabelFilterArc(a1, a2, a3, v8);
    goto LABEL_17;
  }
  v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
  v12 = v6;
  v13 = BYTE4(v6);
  if ((_BYTE)v6 == 0xFF)
  {
    LODWORD(v15) = v6 >> 8;
    v14 = 2139095040;
    if (v15 == INFINITY)
    {
      v7 = 0;
      v6 = 0x7F800000FFLL;
      return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
    }
  }
  if (*(_BYTE *)(a1 + 76))
  {
    if (*(_DWORD *)(a1 + 40) == 1)
    {
      v9 = v4;
      v10 = v3;
    }
    else
    {
      v9 = v3;
      v10 = v4;
    }
    v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelFilterArc(a1, v9, v10, &v12);
LABEL_17:
    v7 = v6 & 0xFFFFFF0000000000;
    return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
  }
LABEL_3:
  v7 = 0;
  return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
}

unint64_t fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  _BYTE *v10;
  float v11;
  float v13;
  float v14;
  float v15;
  int v16;
  float v17;
  float v18;

  v5 = fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, (_DWORD *)a3);
  if (v5 == 0xFF)
  {
    v7 = 2139095040;
    goto LABEL_11;
  }
  v6 = v5;
  if ((*(_BYTE *)(a1 + 72) & 0x40) == 0)
  {
    v7 = 0;
    return v6 | (unint64_t)(v7 << 8);
  }
  v8 = 0.0;
  if (*(_BYTE *)(a1 + 76))
  {
    v9 = 56;
    if (*(_DWORD *)(a1 + 64) == 1)
      v9 = 48;
    v10 = *(_BYTE **)(a1 + v9);
    if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::LookAheadCheck(v10))
      v8 = *(float *)(*(_QWORD *)v10 + 8);
  }
  v11 = *(float *)(a1 + 81);
  v7 = 2139095040;
  if (v8 == INFINITY)
  {
LABEL_11:
    v6 = -1;
    return v6 | (unint64_t)(v7 << 8);
  }
  v13 = *(float *)(a3 + 8);
  v14 = NAN;
  if (v13 != -INFINITY && v8 != -INFINITY)
  {
    if (v8 == INFINITY || v13 == INFINITY)
    {
      v14 = INFINITY;
      if ((LODWORD(v11) & 0x7FFFFFFFu) >= 0x7F800000)
        v14 = NAN;
    }
    else
    {
      v15 = v8 + v13;
      v14 = NAN;
      if (v15 != -INFINITY)
      {
        v16 = LODWORD(v11) & 0x7FFFFFFF;
        v14 = NAN;
        v17 = v15 - v11;
        if (v15 == INFINITY)
          v17 = INFINITY;
        if (v16 <= 2139095039)
          v14 = v17;
      }
    }
  }
  *(float *)(a3 + 8) = v14;
  v18 = floorf((float)(v8 * 1024.0) + 0.5) * 0.00097656;
  if ((LODWORD(v8) & 0x7FFFFFFFu) >= 0x7F800000)
    v18 = v8;
  v7 = LODWORD(v18);
  return v6 | (unint64_t)(v7 << 8);
}

uint64_t fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v3;
  int v4;
  unsigned __int8 v5;
  int v6;
  unsigned __int8 v7;
  unsigned __int8 v9;

  v3 = (_DWORD *)a2;
  *(_BYTE *)(a1 + 76) = 0;
  v4 = *(_DWORD *)(a2 + 4);
  if (v4 == -1)
  {
    if (*(_BYTE *)(a1 + 33))
      return 255;
    v9 = *(_BYTE *)(a1 + 34) ^ 1;
  }
  else if (*a3 == -1)
  {
    v6 = *(unsigned __int8 *)(a1 + 32);
    if (*(_BYTE *)(a1 + 32))
      v7 = -1;
    else
      v7 = 0;
    v9 = v7;
    if (v6)
      return 255;
  }
  else
  {
    if (v4)
      v5 = 0;
    else
      v5 = -1;
    v9 = v5;
    if (!v4)
      return 255;
  }
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    a2 = (uint64_t)a3;
    a3 = v3;
  }
  return fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, (uint64_t)a3, &v9);
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFst(_QWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  *a1 = &unk_1E5D19110;
  a1[1] = 0;
  v4 = *(_DWORD **)(a2 + 8);
  if (a3)
  {
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(a2 + 8));
    v5 = (_DWORD *)a1[1];
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    ++v4[14];
  }
  a1[1] = v4;
  return a1;
}

void sub_1ADBA716C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D26758;
  v3 = v1[1];
  if (v3)
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v3);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  char *v20;
  unint64_t v21;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::ArcIterator(&v20, *(_QWORD *)(a1 + 8), v6);
    v7 = v21;
    v8 = *((_QWORD *)v20 + 3);
    v9 = *((_QWORD *)v20 + 4) - v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      v11 = v9 >> 4;
      v12 = *(_DWORD *)(v10 + 68);
      v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        v15 = *v13;
        v13 += 4;
        v14 = v15;
        if (v12 <= v15)
        {
          v12 = v14 + 1;
          *(_DWORD *)(v10 + 68) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      v21 = v11;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v16 = *(_DWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_DWORD *)(v17 + 68);
    --*((_DWORD *)v20 + 13);
    v4 = v16 >= v18;
    if (v16 < v18)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v17);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADBA72F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 52);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADBA7384(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1ADBA73F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D100;
  v8 = *(_QWORD **)(a4 + 40);
  if (!v8)
  {
    v8 = (_QWORD *)operator new();
    fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::NullComposeFilter(v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1ADBA75D8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1ADBA7764(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v8 = a1[20];
    v7 = a1[21];
    v9 = (_QWORD *)a1[19];
    v10 = (uint64_t)a1;
    v11 = a2;
    v12 = v6;
    v13 = v5;
    v14 = 1;
  }
  else
  {
    v7 = a1[20];
    v8 = a1[21];
    v9 = (_QWORD *)a1[18];
    v10 = (uint64_t)a1;
    v11 = a2;
    v12 = v5;
    v13 = v6;
    v14 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v10, v11, v7, v12, v8, v13, v9, v14);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1ADBA78B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

float fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  unsigned int *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;

  v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 80) + 12 * a2);
  v4 = (*(float (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 96))(**(_QWORD **)(a1 + 144), *v3);
  v5 = v4;
  v6 = v4;
  if (v4 != INFINITY)
  {
    v7 = (*(float (**)(_QWORD, _QWORD, float, float))(***(_QWORD ***)(a1 + 152) + 96))(**(_QWORD **)(a1 + 152), v3[1], v4, v4);
    v6 = v7;
    if (v7 != INFINITY)
    {
      v6 = NAN;
      if (v5 != -INFINITY && v7 != -INFINITY)
      {
        v6 = INFINITY;
        v8 = v7 == INFINITY || v5 == INFINITY;
        v9 = v5 + v7;
        if (!v8)
          return v9;
      }
    }
  }
  return v6;
}

_QWORD *fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::NullComposeFilter(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Matcher(v6, a2, 1);
  }
  *a1 = v6;
  if (!a5)
  {
    a5 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Matcher(a5, a3, 0);
    v6 = (_QWORD *)*a1;
  }
  a1[1] = a5;
  a1[2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  a1[3] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1[1] + 32))(*(_QWORD *)a1[1]);
  return a1;
}

void sub_1ADBA7B24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D100;
  v2 = a1[17];
  if (v2)
  {
    v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1AF44D190](v3, 0x60C40FFD3A10ELL);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  __int128 v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D100;
  v4 = (_QWORD **)operator new();
  fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::NullComposeFilter(v4, *(_QWORD ***)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1ADBA7CB0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD **fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::NullComposeFilter(_QWORD **a1, _QWORD **a2, uint64_t a3)
{
  *a1 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*a2, a3);
  a1[1] = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(a2[1], a3);
  a1[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 32))(**a1);
  a1[3] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1[1] + 32))(*a1[1]);
  return a1;
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1ADBA7EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  unsigned int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADBA8044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1EF80;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADBA817C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;

  *(_BYTE *)(a1 + 48) = (_DWORD)a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if ((_DWORD)a2)
    {
      v2 = (_QWORD **)(a1 + 40);
      v3 = (_QWORD **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = (_QWORD **)(a1 + 32);
    v3 = (_QWORD **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D1EF80;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NullComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1EF80;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1ADBA8674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1ADBA8710(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D340;
  v8 = *(__int128 **)(a4 + 40);
  if (!v8)
  {
    v8 = (__int128 *)operator new();
    fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AltSequenceComposeFilter((uint64_t)v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1ADBA88F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1ADBA8A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = (_QWORD *)a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = (_QWORD *)a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1ADBA8BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v5 = (int *)(v4 + 12 * a2);
  v6 = *v5;
  v7 = (*(float (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 96))(**(_QWORD **)(a1 + 144), *v5);
  v11 = v7;
  if (v7 != INFINITY)
  {
    v8 = v5[1];
    v9 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(**(_QWORD **)(a1 + 152), v8);
    v11 = v9;
    if (v9 != INFINITY)
    {
      v10 = *(_QWORD *)(a1 + 136);
      LOBYTE(v11) = *(_BYTE *)(v4 + 12 * a2 + 8);
      fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v10, v6, v8, &v11);
    }
  }
}

uint64_t fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _QWORD *v10;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Matcher(v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    v10 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Matcher(v10, a3, 0);
    a5 = v10;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 32))(*a5);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1ADBA8E98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D340;
  v2 = a1[17];
  if (v2)
  {
    v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C40AD892F49);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D340;
  v4 = (__int128 *)operator new();
  fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AltSequenceComposeFilter((uint64_t)v4, *(_QWORD ***)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *v4;
  *(_OWORD *)(a1 + 144) = *v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1ADBA901C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  _QWORD *v6;

  *(_QWORD *)a1 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*a2, a3);
  v6 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(a2[1], a3);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1ADBA9200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  unsigned int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADBA939C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F180;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADBA94D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;

  *(_BYTE *)(a1 + 48) = (_DWORD)a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if ((_DWORD)a2)
    {
      v2 = (_QWORD **)(a1 + 40);
      v3 = (_QWORD **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = (_QWORD **)(a1 + 32);
    v3 = (_QWORD **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D1F180;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AltSequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F180;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1ADBA99CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1ADBA9A68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D160;
  v8 = *(__int128 **)(a4 + 40);
  if (!v8)
  {
    v8 = (__int128 *)operator new();
    fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MatchComposeFilter((uint64_t)v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1ADBA9C4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1ADBA9DD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = (_QWORD *)a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = (_QWORD *)a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1ADBA9F54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v5 = (unsigned int *)(v4 + 12 * a2);
  v6 = *v5;
  v10 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 96))(**(_QWORD **)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    v7 = v5[1];
    v8 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(**(_QWORD **)(a1 + 152), v7);
    v10 = v8;
    if (v8 != INFINITY)
    {
      v9 = *(_QWORD *)(a1 + 136);
      LOBYTE(v10) = *(_BYTE *)(v4 + 12 * a2 + 8);
      fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MatchComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Matcher(v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Matcher(a5, a3, 0);
    v6 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 32) = -1;
  *(_BYTE *)(a1 + 40) = -1;
  return a1;
}

void sub_1ADBAA208(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D160;
  v2 = a1[17];
  if (v2)
  {
    v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C4035244DBALL);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  __int128 v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D160;
  v4 = (_QWORD **)operator new();
  fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MatchComposeFilter(v4, *(_QWORD ***)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1ADBAA394(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD **fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MatchComposeFilter(_QWORD **a1, _QWORD **a2, uint64_t a3)
{
  *a1 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*a2, a3);
  a1[1] = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(a2[1], a3);
  a1[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 32))(**a1);
  a1[3] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1[1] + 32))(*a1[1]);
  a1[4] = (_QWORD *)-1;
  *((_BYTE *)a1 + 40) = -1;
  return a1;
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1ADBAA594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  unsigned int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADBAA730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F000;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADBAA868(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;

  *(_BYTE *)(a1 + 48) = (_DWORD)a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if ((_DWORD)a2)
    {
      v2 = (_QWORD **)(a1 + 40);
      v3 = (_QWORD **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = (_QWORD **)(a1 + 32);
    v3 = (_QWORD **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D1F000;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::MatchComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F000;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1ADBAAD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::Push<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t *a1, int a2, int a3, float a4)
{
  float v7;
  void *__p;
  void *v9;
  uint64_t v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  fst::ShortestDistance<fst::ArcTpl<fst::LogWeightTpl<float>,int>>((uint64_t)a1, (char **)&__p, a2 == 0, a4);
  v7 = 0.0;
  if (a3)
    v7 = fst::ComputeTotalWeight<fst::ArcTpl<fst::LogWeightTpl<float>,int>>((uint64_t)a1, (uint64_t *)&__p, a2 == 0);
  fst::Reweight<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, &__p, a2);
  if (a3)
    fst::RemoveWeight<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)a1, a2 == 1, v7);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_1ADBAAE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t a1, uint64_t *a2, char a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  float v12;
  _DWORD *v13;
  _QWORD *result;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  void ***v19;
  uint64_t v20;
  float v21;
  char v22;
  int v23;
  void ***v24;
  int v25;
  float v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void **v33[9];

  if ((a3 & 1) != 0)
  {
    fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::VectorFst(&v31);
    fst::Reverse<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a1, (uint64_t *)&v31, 1);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>((uint64_t)v33, (uint64_t)&v31);
    v24 = v33;
    v25 = -1;
    v27 = 0;
    v26 = a4;
    fst::ShortestDistance<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>((uint64_t)&v31, &v28, (uint64_t)&v24);
    v8 = *a2;
    v7 = a2[1];
    if (v7 != *a2)
    {
      do
      {
        v9 = v7 - 40;
        std::__list_imp<char *>::clear((_QWORD *)(v7 - 32));
        v7 = v9;
      }
      while (v9 != v8);
    }
    a2[1] = v8;
    v10 = v28;
    if (v29 - v28 == 40
      && (*(_DWORD *)v28 && (*(_DWORD *)v28 == -2 ? (v11 = *(_QWORD *)(v28 + 24) == 0) : (v11 = 0), v11)
       || (v12 = *(float *)(v28 + 32), v12 >= -INFINITY) && v12 <= -INFINITY))
    {
      v13 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::NoWeight();
      std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::resize(a2, 1uLL, v13);
    }
    else
    {
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - *a2) >> 3);
      if (v15 < 0xCCCCCCCCCCCCCCCDLL * ((v29 - v28) >> 3) - 1)
      {
        do
        {
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Reverse((_DWORD *)(v10 + 40 * v15 + 40), (uint64_t)&v19);
          v16 = a2[1];
          if (v16 >= a2[2])
          {
            v17 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>(a2, &v19);
          }
          else
          {
            *(_DWORD *)v16 = (_DWORD)v19;
            std::list<int>::list((_QWORD *)(v16 + 8), (uint64_t)&v20);
            *(_DWORD *)(v16 + 32) = v23;
            v17 = v16 + 40;
            a2[1] = v16 + 40;
          }
          a2[1] = v17;
          std::__list_imp<char *>::clear(&v20);
          v10 = v28;
          v15 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
        }
        while (v15 < -1 - 0x3333333333333333 * ((v29 - v28) >> 3));
      }
    }
    fst::AutoQueue<int>::~AutoQueue(v33);
    v33[0] = (void **)&v28;
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100](v33);
    v31 = &unk_1E5D251C0;
    result = (_QWORD *)v32;
    if (v32)
    {
      v18 = *(_DWORD *)(v32 + 56) - 1;
      *(_DWORD *)(v32 + 56) = v18;
      if (!v18)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  else
  {
    fst::AutoQueue<int>::AutoQueue<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>((uint64_t)v33, a1);
    v19 = v33;
    HIDWORD(v20) = -1;
    v22 = 0;
    v21 = a4;
    fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a1, a2, (uint64_t)&v19);
    return fst::AutoQueue<int>::~AutoQueue(v33);
  }
  return result;
}

void sub_1ADBAB0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  fst::AutoQueue<int>::~AutoQueue((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D23D50;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D24010;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::One();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One(void)::one = v2;
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One(void)::one;
}

void sub_1ADBAB2BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *fst::ComputeTotalWeight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _DWORD *v7;
  _DWORD *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD v22[3];
  float v23;
  _BYTE v24[8];
  _QWORD v25[3];
  float v26;
  int v27;
  _QWORD v28[3];
  int v29;
  int v30;
  _QWORD v31[4];

  if (a3)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) <= (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
      v7 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    else
      v7 = (_DWORD *)(*a2 + 40 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1));
    *(_DWORD *)a4 = *v7;
    result = std::list<int>::list((_QWORD *)(a4 + 8), (uint64_t)(v7 + 2));
    *(_DWORD *)(a4 + 32) = v7[8];
  }
  else
  {
    v8 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    *(_DWORD *)a4 = *v8;
    result = std::list<int>::list((_QWORD *)(a4 + 8), (uint64_t)(v8 + 2));
    *(_DWORD *)(a4 + 32) = v8[8];
    v10 = *a2;
    if (a2[1] != *a2)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(&v21, a1, v12);
        fst::Times<int,(fst::StringType)1>((int *)(v10 + v11), (uint64_t)&v21, (uint64_t)&v30);
        v13 = *(float *)(v10 + v11 + 32);
        v14 = NAN;
        if (v13 != -INFINITY)
        {
          v14 = NAN;
          if (v23 != -INFINITY)
          {
            v14 = INFINITY;
            v15 = v23 == INFINITY || v13 == INFINITY;
            v16 = v13 + v23;
            if (!v15)
              v14 = v16;
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)v24, &v30, v14);
        std::__list_imp<char *>::clear(v31);
        fst::Plus<int>(a4, (uint64_t)v24, (uint64_t)&v30);
        v17 = *(float *)(a4 + 32);
        v18 = v26;
        if (v17 != INFINITY)
        {
          if (v26 == INFINITY)
          {
            v18 = *(float *)(a4 + 32);
          }
          else if (v17 <= v26)
          {
            v20 = expf(-(float)(v26 - v17));
            v18 = v17 - logf(v20 + 1.0);
          }
          else
          {
            v19 = expf(-(float)(v17 - v26));
            v18 = v18 - logf(v19 + 1.0);
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v27, &v30, v18);
        std::__list_imp<char *>::clear(v31);
        *(_DWORD *)a4 = v27;
        if (&v27 != (int *)a4)
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a4 + 8), v28[1], (uint64_t)v28);
        *(_DWORD *)(a4 + 32) = v29;
        std::__list_imp<char *>::clear(v28);
        std::__list_imp<char *>::clear(v25);
        result = std::__list_imp<char *>::clear(v22);
        ++v12;
        v10 = *a2;
        v11 += 40;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > v12);
    }
  }
  return result;
}

void sub_1ADBAB5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10)
{
  _QWORD *v10;
  _QWORD *v11;

  std::__list_imp<char *>::clear(v11);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(a10);
  std::__list_imp<char *>::clear(a9);
  _Unwind_Resume(a1);
}

void sub_1ADBAB614()
{
  JUMPOUT(0x1ADBAB604);
}

uint64_t fst::StringWeight<int,(fst::StringType)1>::One()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_QWORD *)(v2 + 8) = v2 + 8;
    *(_QWORD *)(v2 + 16) = v2 + 8;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)v2 = 0;
    fst::StringWeight<int,(fst::StringType)1>::One(void)::one = v2;
  }
  return fst::StringWeight<int,(fst::StringType)1>::One(void)::one;
}

void sub_1ADBAB698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Reweight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t *a1, _QWORD *a2, int a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  BOOL v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  _BOOL4 v29;
  uint64_t v30;
  float v31;
  float v33;
  float v34;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  BOOL v41;
  float v42;
  uint64_t v43;
  fst *v44;
  _QWORD *v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t *v52;
  BOOL v53;
  _BOOL4 v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t *v68;
  BOOL v69;
  _BOOL4 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  float v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  float v82;
  float v83;
  float v84;
  uint64_t v86;
  float v87;
  float v88;
  int v89;
  uint64_t *v90;
  float v91;
  unint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  _QWORD v99[3];
  float v100;
  _BYTE v101[8];
  _QWORD v102[4];
  _BYTE v103[8];
  _QWORD v104[4];
  _BYTE v105[8];
  _QWORD v106[4];
  float v107;
  _QWORD v108[3];
  float v109;
  float v110;
  _QWORD v111[3];
  float v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float v117;
  void *v118;
  uint64_t v119;
  uint64_t v120[2];
  float v121;
  float v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  uint64_t v130;
  int v131;
  signed int v132;
  uint64_t v133;
  _QWORD v134[4];

  result = (*(uint64_t (**)(uint64_t *))(*a1 + 160))(a1);
  if (!(_DWORD)result)
    return result;
  if (!a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&v118, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&v118, "ERROR");
    v44 = fst::LogMessage::LogMessage((fst *)&v125, (uint64_t)&v118);
    v45 = (_QWORD *)fst::cerr(v44);
    v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Reweight: Reweighting to the initial state requires ", 52);
    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Weight to be left distributive: ", 32);
    v59 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Type();
    v60 = *(char *)(v59 + 23);
    if (v60 >= 0)
      v61 = v59;
    else
      v61 = *(_QWORD *)v59;
    if (v60 >= 0)
      v62 = *(unsigned __int8 *)(v59 + 23);
    else
      v62 = *(_QWORD *)(v59 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v61, v62);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v125);
    if (SHIBYTE(v120[0]) < 0)
      operator delete(v118);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 192))(a1, 4, 4);
  }
  v132 = 0;
  v95 = a1;
  (*(void (**)(uint64_t *, uint64_t *))(*a1 + 128))(a1, &v130);
  while (1)
  {
    if (v130)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 16))(v130) & 1) != 0)
        break;
      if (v130)
      {
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 24))(v130);
        goto LABEL_10;
      }
    }
    else if (v132 >= v131)
    {
      break;
    }
    v7 = v132;
LABEL_10:
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) == v7)
      break;
    v96 = v7;
    v8 = *a2 + 40 * v7;
    v125 = *(_DWORD *)v8;
    std::list<int>::list(&v126, v8 + 8);
    v129 = *(float *)(v8 + 32);
    v9 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    if (v125)
      v11 = v128 + 1;
    else
      v11 = 0;
    if (*(_DWORD *)v9)
      v12 = *(_QWORD *)(v9 + 24) + 1;
    else
      v12 = 0;
    if (v11 != v12)
      goto LABEL_31;
    v13 = 0;
    v14 = v127;
    v15 = (uint64_t *)(v9 + 16);
    v16 = v125 && v125 == *(_DWORD *)v9;
    v17 = !v16;
    while (1)
    {
      v18 = *v15;
      if ((v13 & 1) == 0 && v17)
        break;
      if ((uint64_t *)v14 == &v126)
        goto LABEL_30;
      if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v18 + 16))
        goto LABEL_31;
      v14 = *(_QWORD *)(v14 + 8);
      v15 = (uint64_t *)(v18 + 8);
      v13 = 1;
    }
    if (v125)
      goto LABEL_31;
LABEL_30:
    *(float *)&v118 = v129;
    LODWORD(v113) = 0;
    LODWORD(v113) = *(_DWORD *)(v9 + 32);
    v10.n128_f32[0] = v129;
    if (v129 != *(float *)&v113)
    {
LABEL_31:
      (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*v95 + 296))(v95, v96, &v124);
      while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v124 + 24))(v124))
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 32))(v124);
        v118 = *(void **)v19;
        LODWORD(v119) = *(_DWORD *)(v19 + 8);
        std::list<int>::list(v120, v19 + 16);
        v20 = *(int *)(v19 + 48);
        v122 = *(float *)(v19 + 40);
        v123 = v20;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) > v20)
        {
          v21 = *a2 + 40 * (int)v20;
          LODWORD(v113) = *(_DWORD *)v21;
          std::list<int>::list(&v114, v21 + 8);
          v117 = *(float *)(v21 + 32);
          v22 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          if ((_DWORD)v113)
            v23 = v116 + 1;
          else
            v23 = 0;
          if (*(_DWORD *)v22)
            v24 = *(_QWORD *)(v22 + 24) + 1;
          else
            v24 = 0;
          if (v23 != v24)
            goto LABEL_54;
          v25 = 0;
          v26 = v115;
          v27 = (uint64_t *)(v22 + 16);
          v28 = (_DWORD)v113 && (_DWORD)v113 == *(_DWORD *)v22;
          v29 = !v28;
          while (1)
          {
            v30 = *v27;
            if ((v25 & 1) == 0 && v29)
              break;
            if ((uint64_t *)v26 == &v114)
              goto LABEL_53;
            if (*(_DWORD *)(v26 + 16) != *(_DWORD *)(v30 + 16))
              goto LABEL_54;
            v26 = *(_QWORD *)(v26 + 8);
            v27 = (uint64_t *)(v30 + 8);
            v25 = 1;
          }
          if ((_DWORD)v113)
            goto LABEL_54;
LABEL_53:
          v110 = v117;
          v107 = 0.0;
          v107 = *(float *)(v22 + 32);
          if (v117 != v107)
          {
LABEL_54:
            if (a3 == 1)
            {
              fst::Times<int,(fst::StringType)1>(&v125, (uint64_t)&v119, (uint64_t)&v133);
              v31 = NAN;
              if (v129 != -INFINITY)
              {
                v31 = NAN;
                if (v122 != -INFINITY)
                {
                  v31 = INFINITY;
                  if (v122 != INFINITY && v129 != INFINITY)
                    v31 = v129 + v122;
                }
              }
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v107, (int *)&v133, v31);
              std::__list_imp<char *>::clear(v134);
              fst::DivideRight<int,(fst::StringType)1>((int *)&v107, (int *)&v113, (uint64_t)&v133);
              v33 = NAN;
              if (v109 != -INFINITY)
              {
                if ((LODWORD(v117) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                {
                  v33 = INFINITY;
                  if (v109 != INFINITY)
                    v33 = v109 - v117;
                }
                else
                {
                  v33 = NAN;
                }
              }
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v110, (int *)&v133, v33);
              std::__list_imp<char *>::clear(v134);
              *(float *)&v119 = v110;
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v120, v111[1], (uint64_t)v111);
              v122 = v112;
              std::__list_imp<char *>::clear(v111);
              std::__list_imp<char *>::clear(v108);
            }
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v124 + 88))(v124, &v118);
          }
          std::__list_imp<char *>::clear(&v114);
        }
        std::__list_imp<char *>::clear(v120);
        (*(void (**)(uint64_t))(*(_QWORD *)v124 + 40))(v124);
      }
      if (v124)
        (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
    }
    if (a3 == 1)
    {
      (*(void (**)(void **__return_ptr, uint64_t *, uint64_t, __n128))(*v95 + 32))(&v118, v95, v96, v10);
      fst::Times<int,(fst::StringType)1>(&v125, (uint64_t)&v118, (uint64_t)&v113);
      v34 = NAN;
      if (v129 != -INFINITY)
      {
        v34 = NAN;
        if (v121 != -INFINITY)
        {
          v34 = INFINITY;
          if (v121 != INFINITY && v129 != INFINITY)
            v34 = v129 + v121;
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)v105, (int *)&v113, v34);
      std::__list_imp<char *>::clear(&v114);
      (*(void (**)(uint64_t *, uint64_t, _BYTE *))(*v95 + 184))(v95, v96, v105);
      std::__list_imp<char *>::clear(v106);
      std::__list_imp<char *>::clear(&v119);
    }
    std::__list_imp<char *>::clear(&v126);
    if (v130)
      (*(void (**)(uint64_t))(*(_QWORD *)v130 + 32))(v130);
    else
      ++v132;
  }
  v36 = v95;
  while (v130)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 16))(v130) & 1) != 0)
      goto LABEL_104;
    if (v130)
    {
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 24))(v130);
      goto LABEL_92;
    }
LABEL_91:
    v37 = v132;
LABEL_92:
    if (a3 == 1)
    {
      v38 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      (*(void (**)(void **__return_ptr, uint64_t *, uint64_t))(*v95 + 32))(&v118, v95, v37);
      fst::Times<int,(fst::StringType)1>((int *)v38, (uint64_t)&v118, (uint64_t)&v125);
      v39 = *(float *)(v38 + 32);
      v40 = NAN;
      if (v39 != -INFINITY)
      {
        v40 = NAN;
        if (v121 != -INFINITY)
        {
          v40 = INFINITY;
          v41 = v121 == INFINITY || v39 == INFINITY;
          v42 = v39 + v121;
          if (!v41)
            v40 = v42;
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)v103, &v125, v40);
      std::__list_imp<char *>::clear(&v126);
      (*(void (**)(uint64_t *, uint64_t, _BYTE *))(*v95 + 184))(v95, v37, v103);
      std::__list_imp<char *>::clear(v104);
      std::__list_imp<char *>::clear(&v119);
    }
    if (v130)
      (*(void (**)(uint64_t))(*(_QWORD *)v130 + 32))(v130);
    else
      ++v132;
  }
  if (v132 < v131)
    goto LABEL_91;
LABEL_104:
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) <= (*(int (**)(uint64_t *))(*v95 + 24))(v95))
    v43 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  else
    v43 = *a2 + 40 * (*(int (**)(uint64_t *))(*v95 + 24))(v95);
  v125 = *(_DWORD *)v43;
  std::list<int>::list(&v126, v43 + 8);
  v129 = *(float *)(v43 + 32);
  v46 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
  if (v125)
    v48 = v128 + 1;
  else
    v48 = 0;
  if (*(_DWORD *)v46)
    v49 = *(_QWORD *)(v46 + 24) + 1;
  else
    v49 = 0;
  if (v48 != v49)
    goto LABEL_140;
  v50 = 0;
  v51 = v127;
  v52 = (uint64_t *)(v46 + 16);
  v53 = v125 && v125 == *(_DWORD *)v46;
  v54 = !v53;
  v55 = !v54;
  while (1)
  {
    v56 = *v52;
    if ((v50 & 1) == 0 && !v55)
      break;
    if ((uint64_t *)v51 == &v126)
      goto LABEL_139;
    if (*(_DWORD *)(v51 + 16) != *(_DWORD *)(v56 + 16))
      goto LABEL_140;
    v51 = *(_QWORD *)(v51 + 8);
    v52 = (uint64_t *)(v56 + 8);
    v50 = 1;
  }
  if (v125)
    goto LABEL_140;
LABEL_139:
  *(float *)&v118 = v129;
  LODWORD(v113) = 0;
  LODWORD(v113) = *(_DWORD *)(v46 + 32);
  v47.n128_f32[0] = v129;
  if (v129 != *(float *)&v113)
  {
LABEL_140:
    v63 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    if (v125)
      v64 = v128 + 1;
    else
      v64 = 0;
    if (*(_DWORD *)v63)
      v65 = *(_QWORD *)(v63 + 24) + 1;
    else
      v65 = 0;
    if (v64 != v65)
      goto LABEL_161;
    v66 = 0;
    v67 = v127;
    v68 = (uint64_t *)(v63 + 16);
    v69 = v125 && v125 == *(_DWORD *)v63;
    v70 = !v69;
    v71 = !v70;
    while (1)
    {
      v72 = *v68;
      if ((v66 & 1) == 0 && !v71)
        break;
      if ((uint64_t *)v67 == &v126)
        goto LABEL_160;
      if (*(_DWORD *)(v67 + 16) != *(_DWORD *)(v72 + 16))
        goto LABEL_161;
      v67 = *(_QWORD *)(v67 + 8);
      v68 = (uint64_t *)(v72 + 8);
      v66 = 1;
    }
    if (v125)
      goto LABEL_161;
LABEL_160:
    *(float *)&v118 = v129;
    LODWORD(v113) = 0;
    LODWORD(v113) = *(_DWORD *)(v63 + 32);
    v47.n128_f32[0] = v129;
    if (v129 != *(float *)&v113)
    {
LABEL_161:
      v73 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v95 + 64))(v95, 0x2000000000, 1);
      v74 = *v95;
      if ((v73 & 0x2000000000) != 0)
      {
        v97 = (*(uint64_t (**)(uint64_t *))(v74 + 24))(v95);
        (*(void (**)(uint64_t *))(*v95 + 296))(v95);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v133 + 24))(v133))
        {
          v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 32))(v133);
          v118 = *(void **)v79;
          LODWORD(v119) = *(_DWORD *)(v79 + 8);
          std::list<int>::list(v120, v79 + 16);
          v80 = *(_DWORD *)(v79 + 48);
          v122 = *(float *)(v79 + 40);
          v123 = v80;
          v81 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
          fst::DivideRight<int,(fst::StringType)1>((int *)v81, &v125, (uint64_t)&v107);
          v82 = *(float *)(v81 + 32);
          v83 = NAN;
          if (v82 != -INFINITY)
          {
            if ((LODWORD(v129) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              v83 = INFINITY;
              if (v82 != INFINITY)
                v83 = v82 - v129;
            }
            else
            {
              v83 = NAN;
            }
          }
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v110, (int *)&v107, v83);
          std::__list_imp<char *>::clear(v108);
          fst::Times<int,(fst::StringType)1>((int *)&v110, (uint64_t)&v119, (uint64_t)&v107);
          v84 = NAN;
          if (v112 != -INFINITY)
          {
            v84 = NAN;
            if (v122 != -INFINITY)
            {
              v84 = INFINITY;
              if (v122 != INFINITY && v112 != INFINITY)
                v84 = v112 + v122;
            }
          }
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v113, (int *)&v107, v84);
          std::__list_imp<char *>::clear(v108);
          LODWORD(v119) = v113;
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v120, v115, (uint64_t)&v114);
          v122 = v117;
          std::__list_imp<char *>::clear(&v114);
          std::__list_imp<char *>::clear(v111);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v133 + 88))(v133, &v118);
          std::__list_imp<char *>::clear(v120);
          (*(void (**)(uint64_t))(*(_QWORD *)v133 + 40))(v133);
        }
        if (v133)
          (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
        v36 = v95;
        v86 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
        fst::DivideRight<int,(fst::StringType)1>((int *)v86, &v125, (uint64_t)&v113);
        v87 = *(float *)(v86 + 32);
        v88 = NAN;
        if (v87 != -INFINITY)
        {
          if ((LODWORD(v129) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            v88 = INFINITY;
            if (v87 != INFINITY)
              v88 = v87 - v129;
          }
          else
          {
            v88 = NAN;
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v118, (int *)&v113, v88);
        std::__list_imp<char *>::clear(&v114);
        (*(void (**)(uint64_t *__return_ptr, uint64_t *, _QWORD))(*v95 + 32))(&v113, v95, v97);
        fst::Times<int,(fst::StringType)1>((int *)&v118, (uint64_t)&v113, (uint64_t)&v110);
        v91 = NAN;
        if (v121 != -INFINITY)
        {
          v91 = NAN;
          if (v117 != -INFINITY)
          {
            v91 = INFINITY;
            if (v117 != INFINITY && v121 != INFINITY)
              v91 = v121 + v117;
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)v101, (int *)&v110, v91);
        std::__list_imp<char *>::clear(v111);
        (*(void (**)(uint64_t *, _QWORD, _BYTE *))(*v95 + 184))(v95, v97, v101);
        std::__list_imp<char *>::clear(v102);
        std::__list_imp<char *>::clear(&v114);
        v90 = &v119;
      }
      else
      {
        v75 = (*(uint64_t (**)(uint64_t *))(v74 + 200))(v95);
        v76 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
        fst::DivideRight<int,(fst::StringType)1>((int *)v76, &v125, (uint64_t)&v118);
        v77 = *(float *)(v76 + 32);
        v78 = NAN;
        if (v77 != -INFINITY)
        {
          if ((LODWORD(v129) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            v78 = INFINITY;
            if (v77 != INFINITY)
              v78 = v77 - v129;
          }
          else
          {
            v78 = NAN;
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v113, (int *)&v118, v78);
        std::__list_imp<char *>::clear(&v119);
        v98 = v113;
        std::list<int>::list(v99, (uint64_t)&v114);
        v100 = v117;
        v89 = (*(uint64_t (**)(uint64_t *))(*v95 + 24))(v95);
        v118 = 0;
        LODWORD(v119) = v98;
        std::list<int>::list(v120, (uint64_t)v99);
        v122 = v100;
        v123 = v89;
        std::__list_imp<char *>::clear(v99);
        (*(void (**)(uint64_t *, uint64_t, void **))(*v95 + 208))(v95, v75, &v118);
        (*(void (**)(uint64_t *, uint64_t))(*v95 + 176))(v95, v75);
        std::__list_imp<char *>::clear(v120);
        v90 = &v114;
      }
      std::__list_imp<char *>::clear(v90);
    }
  }
  v93 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, __n128))(*v36 + 64))(v36, 0x3FFFFFFF0007, 0, v47);
  v94 = fst::ReweightProperties(v93);
  (*(void (**)(uint64_t *, unint64_t, uint64_t))(*v36 + 192))(v36, v94, 0x3FFFFFFF0007);
  std::__list_imp<char *>::clear(&v126);
  result = v130;
  if (v130)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  return result;
}

void sub_1ADBAC554(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v1 - 184));
  if (*(char *)(v1 - 225) < 0)
    operator delete(*(void **)(v1 - 248));
  _Unwind_Resume(a1);
}

_QWORD *fst::RemoveWeight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  float v36;
  float v37;
  uint64_t v38;
  _QWORD v39[4];
  float v40;
  _QWORD v41[3];
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[2];
  float v46;
  float v47;
  int v48;
  uint64_t v49;
  _BYTE v50[8];
  _QWORD v51[4];
  _QWORD *v52;
  uint64_t v53;
  unsigned int v54;

  result = (_QWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
  v7 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
    v8 = *(_QWORD *)(a2 + 24) + 1;
  else
    v8 = 0;
  if (*(_DWORD *)result)
    v9 = result[3] + 1;
  else
    v9 = 0;
  if (v8 == v9)
  {
    v10 = 0;
    v11 = (uint64_t *)(a2 + 16);
    v12 = result + 2;
    if (v7)
      v13 = v7 == *(_DWORD *)result;
    else
      v13 = 0;
    v14 = !v13;
    v15 = v14 ^ 1;
    while (1)
    {
      v16 = *v11;
      v17 = *v12;
      if ((v10 & 1) == 0 && !v15)
        break;
      if (v16 == a2 + 8)
        goto LABEL_21;
      if (*(_DWORD *)(v16 + 16) != *(_DWORD *)(v17 + 16))
        goto LABEL_22;
      v11 = (uint64_t *)(v16 + 8);
      v12 = (uint64_t *)(v17 + 8);
      v10 = 1;
    }
    if (v7)
      goto LABEL_22;
LABEL_21:
    LODWORD(v43) = 0;
    LODWORD(v43) = *(_DWORD *)(a2 + 32);
    v40 = 0.0;
    v40 = *((float *)result + 8);
    if (*(float *)&v43 == v40)
      return result;
  }
LABEL_22:
  result = (_QWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  v18 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
    v19 = *(_QWORD *)(a2 + 24) + 1;
  else
    v19 = 0;
  if (*(_DWORD *)result)
    v20 = result[3] + 1;
  else
    v20 = 0;
  if (v19 == v20)
  {
    v21 = 0;
    v22 = (uint64_t *)(a2 + 16);
    v23 = result + 2;
    if (v18)
      v24 = v18 == *(_DWORD *)result;
    else
      v24 = 0;
    v25 = !v24;
    v26 = v25 ^ 1;
    while (1)
    {
      v27 = *v22;
      v28 = *v23;
      if ((v21 & 1) == 0 && !v26)
        break;
      if (v27 == a2 + 8)
        goto LABEL_42;
      if (*(_DWORD *)(v27 + 16) != *(_DWORD *)(v28 + 16))
        goto LABEL_43;
      v22 = (uint64_t *)(v27 + 8);
      v23 = (uint64_t *)(v28 + 8);
      v21 = 1;
    }
    if (v18)
      goto LABEL_43;
LABEL_42:
    LODWORD(v43) = 0;
    LODWORD(v43) = *(_DWORD *)(a2 + 32);
    v40 = 0.0;
    v40 = *((float *)result + 8);
    if (*(float *)&v43 == v40)
      return result;
  }
LABEL_43:
  if (a3)
  {
    v54 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 128))(a1, &v52);
    while (1)
    {
      result = v52;
      if (!v52)
        break;
      v29 = (*(uint64_t (**)(_QWORD *))(*v52 + 16))(v52);
      result = v52;
      if (v29)
      {
        if (v52)
          return (_QWORD *)(*(uint64_t (**)(void))(*v52 + 8))();
        return result;
      }
      if (!v52)
        goto LABEL_51;
      v30 = (*(uint64_t (**)(void))(*v52 + 24))();
      if (v52)
        v31 = (*(uint64_t (**)(_QWORD *))(*v52 + 24))(v52);
      else
        v31 = v54;
LABEL_52:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v43, a1, v31);
      fst::DivideRight<int,(fst::StringType)1>((int *)&v43, (int *)a2, (uint64_t)&v40);
      v32 = NAN;
      if (v46 != -INFINITY)
      {
        if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v32 = INFINITY;
          if (v46 != INFINITY)
            v32 = v46 - *(float *)(a2 + 32);
        }
        else
        {
          v32 = NAN;
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)v50, (int *)&v40, v32);
      std::__list_imp<char *>::clear(v41);
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 184))(a1, v30, v50);
      std::__list_imp<char *>::clear(v51);
      std::__list_imp<char *>::clear(&v44);
      if (v52)
        (*(void (**)(_QWORD *))(*v52 + 32))(v52);
      else
        ++v54;
    }
    if ((int)v54 >= (int)v53)
      return result;
LABEL_51:
    v30 = v54;
    v31 = v54;
    goto LABEL_52;
  }
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v33, &v49);
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49))
  {
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
    v43 = *(_QWORD *)v34;
    LODWORD(v44) = *(_DWORD *)(v34 + 8);
    std::list<int>::list(v45, v34 + 16);
    v35 = *(_DWORD *)(v34 + 48);
    v47 = *(float *)(v34 + 40);
    v48 = v35;
    fst::Divide<int>((int *)&v44, (int *)a2, 0, (uint64_t)&v52);
    v36 = NAN;
    if (v47 != -INFINITY)
    {
      if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v36 = INFINITY;
        if (v47 != INFINITY)
          v36 = v47 - *(float *)(a2 + 32);
      }
      else
      {
        v36 = NAN;
      }
    }
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v40, (int *)&v52, v36);
    std::__list_imp<char *>::clear(&v53);
    *(float *)&v44 = v40;
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v45, v41[1], (uint64_t)v41);
    v47 = v42;
    std::__list_imp<char *>::clear(v41);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v49 + 88))(v49, &v43);
    std::__list_imp<char *>::clear(v45);
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
  }
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v43, a1, v33);
  fst::Divide<int>((int *)&v43, (int *)a2, 0, (uint64_t)&v40);
  v37 = NAN;
  if (v46 != -INFINITY)
  {
    if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v37 = INFINITY;
      if (v46 != INFINITY)
        v37 = v46 - *(float *)(a2 + 32);
    }
    else
    {
      v37 = NAN;
    }
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v38, (int *)&v40, v37);
  std::__list_imp<char *>::clear(v41);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v33, &v38);
  std::__list_imp<char *>::clear(v39);
  return std::__list_imp<char *>::clear(&v44);
}

void sub_1ADBACD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  std::__list_imp<char *>::clear((_QWORD *)(v12 + 8));
  std::__list_imp<char *>::clear(va);
  _Unwind_Resume(a1);
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~FactorWeightFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D26C38;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D25D00;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::ShortestDistance<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, char **a2, char a3, float a4)
{
  char *v7;
  _DWORD *v8;
  _QWORD *result;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  _QWORD *v25;
  int v26;
  float v27;
  char v28;
  void *v29;
  uint64_t v30;
  void *__p;
  _BYTE *v32;
  uint64_t v33;
  _QWORD v34[9];

  if ((a3 & 1) != 0)
  {
    fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::VectorFst(&v29);
    fst::Reverse<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, (uint64_t *)&v29, 1);
    __p = 0;
    v32 = 0;
    v33 = 0;
    fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>((uint64_t)v34, (uint64_t)&v29);
    v25 = v34;
    v26 = -1;
    v28 = 0;
    v27 = a4;
    fst::ShortestDistance<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>((uint64_t)&v29, &__p, (uint64_t)&v25);
    v7 = *a2;
    a2[1] = *a2;
    v8 = __p;
    if (v32 - (_BYTE *)__p == 4)
    {
      if (*(float *)__p >= -INFINITY && *(float *)__p <= -INFINITY)
      {
        v24 = 2143289344;
        std::vector<fst::TropicalWeightTpl<float>>::resize((uint64_t)a2, 1uLL, &v24);
      }
    }
    else
    {
      v10 = 0;
      v11 = a2 + 2;
      v12 = v7;
      do
      {
        v13 = v10 + 1;
        v14 = v8[v10 + 1];
        if ((unint64_t)v12 >= *v11)
        {
          if (v13 >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v15 = *v11 - (_QWORD)v7;
          v16 = v15 >> 1;
          if (v15 >> 1 <= v13)
            v16 = v10 + 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v17);
          else
            v18 = 0;
          v19 = &v18[4 * v10];
          *(_DWORD *)v19 = v14;
          v12 = v19 + 4;
          v21 = *a2;
          v20 = a2[1];
          if (v20 != *a2)
          {
            do
            {
              v22 = *((_DWORD *)v20 - 1);
              v20 -= 4;
              *((_DWORD *)v19 - 1) = v22;
              v19 -= 4;
            }
            while (v20 != v21);
            v20 = *a2;
          }
          *a2 = v19;
          a2[1] = v12;
          a2[2] = &v18[4 * v17];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_DWORD *)v12 = v14;
          v12 += 4;
        }
        a2[1] = v12;
        v7 = *a2;
        v10 = (v12 - *a2) >> 2;
        v8 = __p;
      }
      while (v10 < ((v32 - (_BYTE *)__p) >> 2) - 1);
    }
    fst::AutoQueue<int>::~AutoQueue(v34);
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
    }
    v29 = &unk_1E5D24900;
    result = (_QWORD *)v30;
    if (v30)
    {
      v23 = *(_DWORD *)(v30 + 56) - 1;
      *(_DWORD *)(v30 + 56) = v23;
      if (!v23)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  else
  {
    fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>((uint64_t)v34, a1);
    __p = v34;
    HIDWORD(v32) = -1;
    BYTE4(v33) = 0;
    *(float *)&v33 = a4;
    fst::ShortestDistance<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, a2, (uint64_t)&__p);
    return fst::AutoQueue<int>::~AutoQueue(v34);
  }
  return result;
}

void sub_1ADBAD104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v19;

  fst::AutoQueue<int>::~AutoQueue(&a18);
  if (__p)
    operator delete(__p);
  if (a14)
  {
    v19 = a14[14] - 1;
    a14[14] = v19;
    if (!v19)
      (*(void (**)(_DWORD *))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(a1);
}

float fst::ComputeTotalWeight<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, uint64_t *a2, char a3)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;

  if ((a3 & 1) == 0)
  {
    v6 = *a2;
    if (a2[1] == *a2)
      return INFINITY;
    v7 = 0;
    v8 = INFINITY;
    while (1)
    {
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(a1, v7);
      v10 = *(float *)(v6 + 4 * v7);
      if (v10 == -INFINITY || v9 == -INFINITY)
      {
        v5 = NAN;
        if (v8 != INFINITY)
          goto LABEL_18;
      }
      else
      {
        v11 = v9 == INFINITY || v10 == INFINITY;
        v12 = v10 + v9;
        if (v11)
          v5 = INFINITY;
        else
          v5 = v12;
        if (v8 == INFINITY)
          goto LABEL_21;
        if (v5 != INFINITY)
        {
LABEL_18:
          if (v8 <= v5)
          {
            v14 = expf(-(float)(v5 - v8));
            v5 = v8 - logf(v14 + 1.0);
          }
          else
          {
            v13 = expf(-(float)(v8 - v5));
            v5 = v5 - logf(v13 + 1.0);
          }
          goto LABEL_21;
        }
        v5 = v8;
      }
LABEL_21:
      ++v7;
      v6 = *a2;
      v8 = v5;
      if (v7 >= (a2[1] - *a2) >> 2)
        return v5;
    }
  }
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) >= (unint64_t)((a2[1] - *a2) >> 2))
    return INFINITY;
  return *(float *)(*a2 + 4 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1));
}

_QWORD *fst::ShortestDistance<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  _QWORD v6[3];
  int v7;
  char v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];

  v6[0] = a1;
  v6[1] = a2;
  v6[2] = *(_QWORD *)a3;
  v7 = *(_DWORD *)(a3 + 16);
  v8 = *(_BYTE *)(a3 + 20);
  v9 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  memset(v13, 0, 29);
  a2[1] = *a2;
  fst::ShortestDistanceState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ShortestDistance(v6, *(_DWORD *)(a3 + 12));
  if (BYTE12(v13[1]))
  {
    a2[1] = *a2;
    v5 = 2143289344;
    std::vector<fst::TropicalWeightTpl<float>>::resize((uint64_t)a2, 1uLL, &v5);
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(v6);
}

void sub_1ADBAD3A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void **v13;
  uint64_t v14;
  float v15;
  int v16;
  unsigned int v17;
  int *v18;
  unint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  __n128 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  char v33;
  int v34;
  float v35;
  BOOL v36;
  float v37;
  int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  unint64_t v51;
  void **p_p;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  void *__p;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;

  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
    (*(void (**)(uint64_t *, _QWORD))(*a2 + 248))(a2, (v8 + 1));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v10 = 0;
  v60 = 0;
  if ((a3 & 1) != 0)
    goto LABEL_57;
  LODWORD(v54) = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)a1 + 128))(a1, &p_p);
  v11 = 0xFFFFFFFFLL;
  while (1)
  {
    if (p_p)
    {
      v12 = (*((uint64_t (**)(void **))*p_p + 2))(p_p);
      v13 = p_p;
      if ((v12 & 1) != 0)
        goto LABEL_22;
      if (p_p)
      {
        v14 = (*((uint64_t (**)(void))*p_p + 3))();
        goto LABEL_11;
      }
    }
    else if ((int)v54 >= (int)v53)
    {
      goto LABEL_24;
    }
    v14 = v54;
LABEL_11:
    v15 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v14);
    *(float *)&v47 = v15;
    LODWORD(__p) = 2139095040;
    v16 = 2 * ((_DWORD)v11 != -1);
    v17 = (_DWORD)v11 == -1 ? v14 : -1;
    if (v15 == INFINITY)
    {
      v16 = 4;
      v11 = v11;
    }
    else
    {
      v11 = v17;
    }
    if ((v16 | 4) != 4)
      break;
    if (p_p)
      (*((void (**)(void **))*p_p + 4))(p_p);
    else
      LODWORD(v54) = v54 + 1;
  }
  v13 = p_p;
LABEL_22:
  if (v13)
    (*((void (**)(void **))*v13 + 1))(v13);
LABEL_24:
  if ((_DWORD)v11 != -1)
  {
    LODWORD(p_p) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v11);
    LODWORD(v47) = 0;
    if (*(float *)&p_p == 0.0)
    {
      v24 = 0;
      v46 = 0;
      goto LABEL_58;
    }
    __p = 0;
    v58 = 0;
    v59 = 0;
    p_p = &__p;
    v53 = 0;
    v54 = 0;
    v55 = &v60;
    fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, (uint64_t *)&p_p, 0);
    v18 = (int *)__p;
    if (__p != v58)
    {
      v19 = 0;
      do
      {
        v20 = *v18++;
        if (v20 == *((_DWORD *)__p + (int)v11))
          ++v19;
      }
      while (v18 != v58);
      if (v19 > 1)
        goto LABEL_52;
    }
    v51 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v11, &v47);
    while (2)
    {
      while (2)
      {
        if (v47)
        {
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
          v22 = v47;
          if ((v21 & 1) != 0)
            goto LABEL_46;
          if (v47)
          {
            v23 = (*(uint64_t (**)(void))(*(_QWORD *)v47 + 32))();
            v22 = v47;
            if (*(_DWORD *)(v23 + 12) == (_DWORD)v11)
            {
              v11 = 0xFFFFFFFFLL;
LABEL_46:
              if (v22)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
                goto LABEL_50;
              }
LABEL_48:
              if (v50)
                --*v50;
LABEL_50:
              if ((_DWORD)v11 != -1)
              {
                v10 = 0x2000000000;
                goto LABEL_53;
              }
LABEL_52:
              v10 = 0;
              v11 = 0xFFFFFFFFLL;
LABEL_53:
              if (__p)
              {
                v58 = __p;
                operator delete(__p);
              }
              if ((_DWORD)v11 != -1)
              {
                v46 = v10;
                v24 = 0;
                goto LABEL_58;
              }
              goto LABEL_57;
            }
            if (v47)
            {
              (*(void (**)(void))(*(_QWORD *)v47 + 40))();
              continue;
            }
            goto LABEL_41;
          }
        }
        else if (v51 >= v49)
        {
          goto LABEL_48;
        }
        break;
      }
      if (*(_DWORD *)(v48 + 16 * v51 + 12) == (_DWORD)v11)
      {
        v11 = 0xFFFFFFFFLL;
        goto LABEL_48;
      }
LABEL_41:
      ++v51;
      continue;
    }
  }
  v10 = 0;
LABEL_57:
  v46 = v10;
  v11 = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
  v24 = 1;
LABEL_58:
  LODWORD(v49) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v47);
  while (2)
  {
    if (!v47)
    {
      if ((int)v49 >= (int)v48)
        goto LABEL_108;
      goto LABEL_64;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47))
    {
      if (v47)
      {
        v25 = (*(uint64_t (**)(void))(*(_QWORD *)v47 + 24))();
LABEL_65:
        v26 = v25 + v24;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v26)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if ((_DWORD)v25 == (_DWORD)v9)
          (*(void (**)(uint64_t *, _QWORD, float))(*a2 + 184))(a2, (v25 + v24), 0.0);
        v27.n128_f32[0] = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v25);
        LODWORD(p_p) = v27.n128_u32[0];
        LODWORD(__p) = 2139095040;
        v28.n128_u32[0] = v27.n128_u32[0];
        v29 = v24 ^ 1;
        if (v27.n128_f32[0] == INFINITY)
          v29 = 1;
        if ((v29 & 1) == 0)
        {
          p_p = 0;
          LODWORD(v53) = v27.n128_u32[0];
          HIDWORD(v53) = v25 + v24;
          v27.n128_f64[0] = (*(double (**)(uint64_t *, _QWORD, void ***))(*a2 + 208))(a2, 0, &p_p);
        }
        v56 = 0;
        (*(void (**)(uint64_t, uint64_t, void ***, __n128, __n128))(*(_QWORD *)a1 + 136))(a1, v25, &p_p, v27, v28);
LABEL_75:
        if (p_p)
        {
          if ((*((unsigned int (**)(void **))*p_p + 3))(p_p))
          {
            if (p_p)
            {
              (*((void (**)(void))*p_p + 1))();
              goto LABEL_103;
            }
LABEL_101:
            if (v55)
              --*(_DWORD *)v55;
LABEL_103:
            if (v47)
              (*(void (**)(uint64_t))(*(_QWORD *)v47 + 32))(v47);
            else
              LODWORD(v49) = v49 + 1;
            continue;
          }
          if (p_p)
          {
            v30 = (*((uint64_t (**)(void))*p_p + 4))();
LABEL_81:
            v31 = (*(_DWORD *)(v30 + 12) + v24);
            v32 = *(float *)(v30 + 8);
            if ((_DWORD)v31 == (_DWORD)v11)
              v33 = v24;
            else
              v33 = 1;
            if ((v33 & 1) != 0)
            {
              v34 = *(_DWORD *)(v30 + 8);
            }
            else
            {
              v35 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v11);
              v34 = 2143289344;
              if (v35 != -INFINITY && v32 != -INFINITY)
              {
                v34 = 2139095040;
                v36 = v35 == INFINITY || v32 == INFINITY;
                v37 = v32 + v35;
                if (!v36)
                  *(float *)&v34 = v37;
              }
            }
            __p = *(void **)v30;
            v58 = (_DWORD *)__PAIR64__(v26, v34);
            while (1)
            {
              v38 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              v39 = *a2;
              if (v38 > (int)v31)
                break;
              (*(void (**)(uint64_t *))(v39 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void **))(v39 + 208))(a2, v31, &__p);
            if (p_p)
              (*((void (**)(void **))*p_p + 5))(p_p);
            else
              ++v56;
            goto LABEL_75;
          }
        }
        else if (v56 >= v54)
        {
          goto LABEL_101;
        }
        v30 = v53 + 16 * v56;
        goto LABEL_81;
      }
LABEL_64:
      v25 = v49;
      goto LABEL_65;
    }
    break;
  }
  if (v47)
    (*(void (**)(void))(*(_QWORD *)v47 + 8))();
LABEL_108:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, v11);
  if ((_DWORD)v11 == (_DWORD)v9)
    v40 = v24;
  else
    v40 = 1;
  if ((v40 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v9);
    (*(void (**)(uint64_t *, uint64_t))(*a2 + 184))(a2, v9);
  }
  v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  v42 = v60 | v41;
  v43 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0) | v46;
  v44 = fst::ReverseProperties(v42, v24);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v43 | v44, 0x3FFFFFFF0007);
}

void sub_1ADBADB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D24900;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  uint64_t v20;
  fst *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  fst *v28;
  _QWORD *v29;
  fst *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  fst *v39;
  _QWORD *v40;
  _QWORD *v41;
  fst *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t result;
  void *__p[2];
  char v48;
  char v49;
  __int16 v50;
  void *v51[3];
  uint64_t v52[2];
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v5 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v6 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v20 = operator new();
    *(_DWORD *)(v20 + 8) = 5;
    *(_BYTE *)(v20 + 12) = 0;
    *(_QWORD *)v20 = &unk_1E5D1EEB0;
    *(_QWORD *)(v20 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v20;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v52, "INFO");
    v21 = fst::LogMessage::LogMessage((fst *)v51, (uint64_t)v52);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"AutoQueue: using state-order discipline", 39);
    goto LABEL_17;
  }
  if ((v6 & 0x800000000) != 0)
  {
    v24 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(v24, a2);
    *(_QWORD *)(a1 + 16) = v24;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v52, "INFO");
    v25 = fst::LogMessage::LogMessage((fst *)v51, (uint64_t)v52);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"AutoQueue: using top-order discipline", 37);
LABEL_17:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v51);
    if (SHIBYTE(v53) < 0)
    {
      v23 = (void *)v52[0];
LABEL_46:
      operator delete(v23);
    }
    return a1;
  }
  v55 = 0;
  v52[0] = (uint64_t)v5;
  v52[1] = 0;
  v53 = 0;
  v54 = &v55;
  fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a2, v52, 0);
  v7 = *(int **)(a1 + 48);
  v8 = *(int **)(a1 + 56);
  if (v7 != v8)
  {
    v9 = v7 + 1;
    if (v7 + 1 != v8)
    {
      v10 = *v7;
      v11 = v7 + 1;
      do
      {
        v13 = *v11++;
        v12 = v13;
        v14 = v10 < v13;
        if (v10 <= v13)
          v10 = v12;
        if (v14)
          v7 = v9;
        v9 = v11;
      }
      while (v11 != v8);
    }
  }
  v15 = *v7;
  v16 = *v7 + 1;
  std::vector<fst::QueueType>::vector(v51, v16);
  v50 = 0;
  fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NaturalLess<fst::LogWeightTpl<float>>>(a2, v5, (uint64_t)v51, 0, &v50, (_BYTE *)&v50 + 1);
  if (HIBYTE(v50))
  {
    v17 = operator new();
    *(_DWORD *)(v17 + 8) = 2;
    *(_BYTE *)(v17 + 12) = 0;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_QWORD *)v17 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v17;
    if (FLAGS_v < 2)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v18 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v19 = (_QWORD *)fst::cerr(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_24:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
    if (v48 < 0)
      operator delete(__p[0]);
LABEL_44:
    v23 = v51[0];
    if (v51[0])
    {
      v51[1] = v51[0];
      goto LABEL_46;
    }
    return a1;
  }
  if ((_BYTE)v50)
  {
    v27 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue(v27, (uint64_t)v5);
    *(_QWORD *)(a1 + 16) = v27;
    if (FLAGS_v < 2)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v28 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"AutoQueue: using top-order discipline", 37);
    goto LABEL_24;
  }
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v30 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v31 = (_QWORD *)fst::cerr(v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
    if (v48 < 0)
      operator delete(__p[0]);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v16);
  if (v15 < 0)
  {
LABEL_43:
    v45 = operator new();
    *(_DWORD *)(v45 + 8) = 6;
    *(_BYTE *)(v45 + 12) = 0;
    *(_QWORD *)v45 = &unk_1E5D22CF0;
    *(_QWORD *)(v45 + 16) = v4;
    *(_QWORD *)(v45 + 24) = v5;
    *(_QWORD *)(v45 + 32) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v45 + 48) = 0;
    *(_QWORD *)(v45 + 56) = 0;
    *(_QWORD *)(v45 + 40) = 0;
    *(_QWORD *)(a1 + 16) = v45;
    goto LABEL_44;
  }
  v32 = 0;
  while (1)
  {
    v33 = *((_DWORD *)v51[0] + v32);
    if (v33)
      break;
    *(_QWORD *)(*v4 + 8 * v32) = 0;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v42 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v43 = (_QWORD *)fst::cerr(v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"AutoQueue: SCC #", 16);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": using trivial discipline", 26);
LABEL_40:
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
      if (v48 < 0)
        operator delete(__p[0]);
    }
LABEL_42:
    if (v16 == ++v32)
      goto LABEL_43;
  }
  if (v33 == 2)
  {
    v38 = operator new();
    *(_DWORD *)(v38 + 8) = 2;
    *(_BYTE *)(v38 + 12) = 0;
    *(_OWORD *)(v38 + 16) = 0u;
    *(_OWORD *)(v38 + 32) = 0u;
    *(_OWORD *)(v38 + 48) = 0u;
    *(_QWORD *)v38 = &unk_1E5D27B60;
    *(_QWORD *)(*v4 + 8 * v32) = v38;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v39 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v40 = (_QWORD *)fst::cerr(v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"AutoQueue: SCC #", 16);
      v41 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": using LIFO disciplle", 22);
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  if (v33 != 3)
  {
    v34 = operator new();
    *(_DWORD *)(v34 + 8) = 1;
    *(_BYTE *)(v34 + 12) = 0;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_QWORD *)v34 = &unk_1E5D23A28;
    *(_QWORD *)(*v4 + 8 * v32) = v34;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v35 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v36 = (_QWORD *)fst::cerr(v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: SCC #", 16);
      v37 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": using FIFO disciplle", 22);
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  result = operator new();
  __break(1u);
  return result;
}

void sub_1ADBAE2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  void **v28;
  void *v30;
  void *v31;

  if (a14 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  v30 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v26 + 56) = v30;
    operator delete(v30);
  }
  v31 = *v27;
  if (*v27)
  {
    *(_QWORD *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NaturalLess<fst::LogWeightTpl<float>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  _QWORD v22[3];
  _DWORD *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;

  *a5 = 1;
  *a6 = 1;
  v12 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v12)
  {
    v13 = v12 >> 2;
    if (v13 <= 1)
      v13 = 1;
    bzero(*(void **)a3, 4 * v13);
  }
  v27 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v25);
  while (1)
  {
    result = v25;
    if (!v25)
    {
      if ((int)v27 >= v26)
        return result;
LABEL_11:
      v16 = v27;
      goto LABEL_12;
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
    result = v25;
    if (v15)
      break;
    if (!v25)
      goto LABEL_11;
    v16 = (*(uint64_t (**)(void))(*(_QWORD *)v25 + 24))();
LABEL_12:
    v24 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v16, v22);
    while (1)
    {
      if (!v22[0])
      {
        if (v24 >= v22[2])
          goto LABEL_32;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v22[0] + 24))(v22[0]))
        break;
      if (v22[0])
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v22[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      v17 = v22[1] + 16 * v24;
LABEL_19:
      v18 = *(int *)(*a2 + 4 * (int)v16);
      if ((_DWORD)v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 12)))
      {
        v19 = *(_DWORD **)a3;
        if (!a4
          || (v21 = 0, fst::NaturalLess<fst::LogWeightTpl<float>>::operator()(a4, (float *)(v17 + 8), (float *)&v21)))
        {
          v20 = 1;
          goto LABEL_25;
        }
        if ((v19[v18] | 2) == 2)
        {
          v20 = 3;
LABEL_25:
          v19[v18] = v20;
        }
        *a5 = 0;
      }
      *a6 = 0;
      if (v22[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v22[0] + 40))(v22[0]);
      else
        ++v24;
    }
    if (v22[0])
    {
      (*(void (**)(void))(*(_QWORD *)v22[0] + 8))();
      goto LABEL_34;
    }
LABEL_32:
    if (v23)
      --*v23;
LABEL_34:
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
    else
      ++v27;
  }
  if (v25)
    return (*(uint64_t (**)(void))(*(_QWORD *)v25 + 8))();
  return result;
}

void sub_1ADBAE620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1ADBAE7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 16 * v12[5];
            v18 = *(int *)(v17 + 12);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 12);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 12);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D19878;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADBAEF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19878;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::LogWeightTpl<float>>::operator()(uint64_t a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;

  v3 = *a2;
  v4 = *a3;
  v5 = *a3;
  if (*a2 != INFINITY)
  {
    v5 = *a2;
    if (v4 != INFINITY)
    {
      if (v3 <= v4)
      {
        v7 = expf(-(float)(v4 - v3));
        v5 = v3 - logf(v7 + 1.0);
      }
      else
      {
        v6 = expf(-(float)(v3 - v4));
        v5 = v4 - logf(v6 + 1.0);
      }
    }
  }
  return v5 == v3 && v3 != v4;
}

void fst::ShortestDistanceState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ShortestDistance(_QWORD *a1, int a2)
{
  fst *v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  _DWORD *v8;
  void **v9;
  char *v10;
  unint64_t v11;
  char **v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  char *v35;
  char *v36;
  unint64_t v37;
  _QWORD *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  char **v46;
  _QWORD *v47;
  int v48;
  void **v49;
  void **v50;
  _DWORD *v51;
  char *v52;
  unint64_t i;
  unint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  int v63;
  unint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  int v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  char *v79;
  void **v80;
  void **v81;
  _DWORD *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  int v95;
  unint64_t v96;
  _DWORD *v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  int v107;
  char *v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  int v118;
  char *v119;
  char *v120;
  float v121;
  float v122;
  BOOL v123;
  float v124;
  uint64_t v125;
  float v126;
  float v127;
  BOOL v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  uint64_t v139;
  char v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  uint64_t v148;
  void *__p[2];
  unint64_t v150;
  _DWORD *v151;
  unint64_t v152;
  int v153;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
      return;
    goto LABEL_232;
  }
  if (*((_BYTE *)a1 + 32))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v153, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ShortestDistance: first_path option disallowed when ", 52);
    v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)"Weight does not have the path property: ", 40);
    v143 = fst::LogWeightTpl<float>::Type();
    v144 = *(char *)(v143 + 23);
    if (v144 >= 0)
      v145 = v143;
    else
      v145 = *(_QWORD *)v143;
    if (v144 >= 0)
      v146 = *(unsigned __int8 *)(v143 + 23);
    else
      v146 = *(_QWORD *)(v143 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, v145, v146);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v153);
    if (SHIBYTE(v150) < 0)
      operator delete(__p[0]);
LABEL_232:
    v147 = (char *)a1 + 116;
    goto LABEL_233;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 56))(*(_QWORD *)(a1[2] + 16));
  if (!*((_BYTE *)a1 + 33))
  {
    *(_QWORD *)(a1[1] + 8) = *(_QWORD *)a1[1];
    a1[6] = a1[5];
    a1[9] = 0;
  }
  if (a2 == -1)
    a2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v6 = a2;
  v7 = (void **)a1[1];
  v9 = v7 + 1;
  v8 = v7[1];
  v10 = (char *)*v7;
  v11 = ((char *)v8 - (_BYTE *)*v7) >> 2;
  if (v11 <= a2)
  {
    v12 = (char **)(a1 + 5);
    do
    {
      v13 = (unint64_t)v7[2];
      if ((unint64_t)v8 >= v13)
      {
        if ((v11 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v13 - (_QWORD)v10;
        v16 = v15 >> 1;
        if (v15 >> 1 <= v11 + 1)
          v16 = v11 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v7 + 2), v17);
        else
          v18 = 0;
        v19 = &v18[4 * v11];
        *(_DWORD *)v19 = 2139095040;
        v14 = v19 + 4;
        v20 = (char *)*v9;
        v21 = (char *)*v7;
        if (*v9 != *v7)
        {
          do
          {
            v22 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v19 - 1) = v22;
            v19 -= 4;
          }
          while (v20 != v21);
          v20 = (char *)*v7;
        }
        *v7 = v19;
        *v9 = v14;
        v7[2] = &v18[4 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v8 = 2139095040;
        v14 = v8 + 1;
      }
      *v9 = v14;
      v24 = (_DWORD *)a1[6];
      v23 = a1[7];
      if ((unint64_t)v24 >= v23)
      {
        v26 = ((char *)v24 - *v12) >> 2;
        if ((unint64_t)(v26 + 1) >> 62)
LABEL_239:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v27 = v23 - (_QWORD)*v12;
        v28 = v27 >> 1;
        if (v27 >> 1 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v29);
        else
          v30 = 0;
        v31 = &v30[4 * v26];
        *(_DWORD *)v31 = 2139095040;
        v25 = v31 + 4;
        v33 = (char *)a1[5];
        v32 = (char *)a1[6];
        if (v32 != v33)
        {
          do
          {
            v34 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *((_DWORD *)v31 - 1) = v34;
            v31 -= 4;
          }
          while (v32 != v33);
          v32 = *v12;
        }
        a1[5] = v31;
        a1[6] = v25;
        a1[7] = &v30[4 * v29];
        if (v32)
          operator delete(v32);
      }
      else
      {
        *v24 = 2139095040;
        v25 = v24 + 1;
      }
      a1[6] = v25;
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), __p);
      v7 = (void **)a1[1];
      v9 = v7 + 1;
      v8 = v7[1];
      v10 = (char *)*v7;
      v11 = ((char *)v8 - (_BYTE *)*v7) >> 2;
    }
    while (v11 <= v6);
  }
  if (*((_BYTE *)a1 + 33))
  {
    v35 = (char *)a1[11];
    v36 = (char *)a1[12];
    v37 = (v36 - v35) >> 2;
    if (v37 <= v6)
    {
      v38 = a1 + 13;
      do
      {
        if ((unint64_t)v36 >= *v38)
        {
          v40 = v37 + 1;
          if ((v37 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v41 = *v38 - (_QWORD)v35;
          if (v41 >> 1 > v40)
            v40 = v41 >> 1;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
            v42 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          if (v42)
          {
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v42);
            v35 = (char *)a1[11];
            v36 = (char *)a1[12];
          }
          else
          {
            v43 = 0;
          }
          v44 = &v43[4 * v37];
          *(_DWORD *)v44 = -1;
          v39 = v44 + 4;
          while (v36 != v35)
          {
            v45 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v44 - 1) = v45;
            v44 -= 4;
          }
          a1[11] = v44;
          a1[12] = v39;
          a1[13] = &v43[4 * v42];
          if (v35)
          {
            operator delete(v35);
            v35 = (char *)a1[11];
          }
          else
          {
            v35 = v44;
          }
        }
        else
        {
          *(_DWORD *)v36 = -1;
          v39 = v36 + 4;
        }
        a1[12] = v39;
        v37 = (v39 - v35) >> 2;
        v36 = v39;
      }
      while (v37 <= v6);
      v10 = *(char **)a1[1];
    }
    *(_DWORD *)&v35[4 * v6] = *((_DWORD *)a1 + 28);
  }
  *(_DWORD *)&v10[4 * v6] = 0;
  v46 = (char **)(a1 + 5);
  *(_DWORD *)(a1[5] + 4 * v6) = 0;
  *(_QWORD *)(a1[8] + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[2] + 16) + 24))(*(_QWORD *)(a1[2] + 16), v6);
  v47 = a1 + 13;
  v147 = (char *)a1 + 116;
  v148 = (uint64_t)(a1 + 7);
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 48))(*(_QWORD *)(a1[2] + 16)) & 1) != 0)
      goto LABEL_234;
    v48 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 16))(*(_QWORD *)(a1[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 32))(*(_QWORD *)(a1[2] + 16));
    v49 = (void **)a1[1];
    v50 = v49 + 1;
    v51 = v49[1];
    v52 = (char *)*v49;
    for (i = ((char *)v51 - (_BYTE *)*v49) >> 2; i <= v48; i = ((char *)v51 - (_BYTE *)*v49) >> 2)
    {
      v54 = (unint64_t)v49[2];
      if ((unint64_t)v51 >= v54)
      {
        if ((i + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v56 = v54 - (_QWORD)v52;
        v57 = v56 >> 1;
        if (v56 >> 1 <= i + 1)
          v57 = i + 1;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
          v58 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v58 = v57;
        if (v58)
          v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v49 + 2), v58);
        else
          v59 = 0;
        v60 = &v59[4 * i];
        *(_DWORD *)v60 = 2139095040;
        v55 = v60 + 4;
        v61 = (char *)*v50;
        v62 = (char *)*v49;
        if (*v50 != *v49)
        {
          do
          {
            v63 = *((_DWORD *)v61 - 1);
            v61 -= 4;
            *((_DWORD *)v60 - 1) = v63;
            v60 -= 4;
          }
          while (v61 != v62);
          v61 = (char *)*v49;
        }
        *v49 = v60;
        *v50 = v55;
        v49[2] = &v59[4 * v58];
        if (v61)
          operator delete(v61);
      }
      else
      {
        *v51 = 2139095040;
        v55 = v51 + 1;
      }
      *v50 = v55;
      v65 = (_DWORD *)a1[6];
      v64 = a1[7];
      if ((unint64_t)v65 >= v64)
      {
        v67 = ((char *)v65 - *v46) >> 2;
        if ((unint64_t)(v67 + 1) >> 62)
          goto LABEL_239;
        v68 = v64 - (_QWORD)*v46;
        v69 = v68 >> 1;
        if (v68 >> 1 <= (unint64_t)(v67 + 1))
          v69 = v67 + 1;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
          v70 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v70 = v69;
        if (v70)
          v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v148, v70);
        else
          v71 = 0;
        v72 = &v71[4 * v67];
        *(_DWORD *)v72 = 2139095040;
        v66 = v72 + 4;
        v74 = (char *)a1[5];
        v73 = (char *)a1[6];
        if (v73 != v74)
        {
          do
          {
            v75 = *((_DWORD *)v73 - 1);
            v73 -= 4;
            *((_DWORD *)v72 - 1) = v75;
            v72 -= 4;
          }
          while (v73 != v74);
          v73 = *v46;
        }
        a1[5] = v72;
        a1[6] = v66;
        a1[7] = &v71[4 * v70];
        if (v73)
          operator delete(v73);
      }
      else
      {
        *v65 = 2139095040;
        v66 = v65 + 1;
      }
      a1[6] = v66;
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), __p);
      v49 = (void **)a1[1];
      v50 = v49 + 1;
      v51 = v49[1];
      v52 = (char *)*v49;
    }
    if (*((_BYTE *)a1 + 32))
    {
      LODWORD(__p[0]) = (*(float (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v48);
      v153 = 2139095040;
      if (*(float *)__p != INFINITY)
      {
LABEL_234:
        ++*((_DWORD *)a1 + 28);
        if (!(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
          return;
LABEL_233:
        *v147 = 1;
        return;
      }
    }
    *(_QWORD *)(a1[8] + (((unint64_t)v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v48);
    v76 = a1[5];
    v77 = *(float *)(v76 + 4 * v48);
    *(_DWORD *)(v76 + 4 * v48) = 2139095040;
    v78 = *a1;
    v152 = 0;
    (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)v78 + 136))(v78, v48, __p);
    while (1)
    {
      if (__p[0])
      {
        if (((*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]) & 1) != 0)
          goto LABEL_215;
        if (__p[0])
        {
          v79 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 32))(__p[0]);
          goto LABEL_114;
        }
      }
      else if (v152 >= v150)
      {
LABEL_215:
        v140 = 1;
        goto LABEL_217;
      }
      v79 = (char *)__p[1] + 16 * v152;
LABEL_114:
      v80 = (void **)a1[1];
      v81 = v80 + 1;
      v82 = v80[1];
      v83 = (char *)*v80;
      v84 = ((char *)v82 - (_BYTE *)*v80) >> 2;
      if (v84 <= *((int *)v79 + 3))
      {
        do
        {
          v86 = (unint64_t)v80[2];
          if ((unint64_t)v82 >= v86)
          {
            if ((v84 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v88 = v86 - (_QWORD)v83;
            v89 = v88 >> 1;
            if (v88 >> 1 <= v84 + 1)
              v89 = v84 + 1;
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
              v90 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v90 = v89;
            if (v90)
              v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v80 + 2), v90);
            else
              v91 = 0;
            v92 = &v91[4 * v84];
            *(_DWORD *)v92 = 2139095040;
            v87 = v92 + 4;
            v93 = (char *)*v81;
            v94 = (char *)*v80;
            if (*v81 != *v80)
            {
              do
              {
                v95 = *((_DWORD *)v93 - 1);
                v93 -= 4;
                *((_DWORD *)v92 - 1) = v95;
                v92 -= 4;
              }
              while (v93 != v94);
              v93 = (char *)*v80;
            }
            *v80 = v92;
            *v81 = v87;
            v80[2] = &v91[4 * v90];
            if (v93)
              operator delete(v93);
          }
          else
          {
            *v82 = 2139095040;
            v87 = v82 + 1;
          }
          *v81 = v87;
          v97 = (_DWORD *)a1[6];
          v96 = a1[7];
          if ((unint64_t)v97 >= v96)
          {
            v99 = ((char *)v97 - *v46) >> 2;
            if ((unint64_t)(v99 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v100 = v96 - (_QWORD)*v46;
            v101 = v100 >> 1;
            if (v100 >> 1 <= (unint64_t)(v99 + 1))
              v101 = v99 + 1;
            if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
              v102 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v102 = v101;
            if (v102)
              v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v148, v102);
            else
              v103 = 0;
            v104 = &v103[4 * v99];
            *(_DWORD *)v104 = 2139095040;
            v98 = v104 + 4;
            v106 = (char *)a1[5];
            v105 = (char *)a1[6];
            if (v105 != v106)
            {
              do
              {
                v107 = *((_DWORD *)v105 - 1);
                v105 -= 4;
                *((_DWORD *)v104 - 1) = v107;
                v104 -= 4;
              }
              while (v105 != v106);
              v105 = *v46;
            }
            a1[5] = v104;
            a1[6] = v98;
            a1[7] = &v103[4 * v102];
            if (v105)
              operator delete(v105);
          }
          else
          {
            *v97 = 2139095040;
            v98 = v97 + 1;
          }
          a1[6] = v98;
          LOBYTE(v153) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v153);
          v80 = (void **)a1[1];
          v81 = v80 + 1;
          v82 = v80[1];
          v83 = (char *)*v80;
          v84 = ((char *)v82 - (_BYTE *)*v80) >> 2;
          v85 = *((int *)v79 + 3);
        }
        while (v84 <= v85);
      }
      else
      {
        LODWORD(v85) = *((_DWORD *)v79 + 3);
      }
      if (*((_BYTE *)a1 + 33))
      {
        v108 = (char *)a1[11];
        v109 = (char *)a1[12];
        v110 = (v109 - v108) >> 2;
        if (v110 <= (int)v85)
        {
          do
          {
            if ((unint64_t)v109 >= *v47)
            {
              v113 = v110 + 1;
              if ((v110 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v114 = *v47 - (_QWORD)v108;
              if (v114 >> 1 > v113)
                v113 = v114 >> 1;
              if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
                v115 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v115 = v113;
              if (v115)
              {
                v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v115);
                v108 = (char *)a1[11];
                v109 = (char *)a1[12];
              }
              else
              {
                v116 = 0;
              }
              v117 = &v116[4 * v110];
              *(_DWORD *)v117 = -1;
              v112 = v117 + 4;
              while (v109 != v108)
              {
                v118 = *((_DWORD *)v109 - 1);
                v109 -= 4;
                *((_DWORD *)v117 - 1) = v118;
                v117 -= 4;
              }
              a1[11] = v117;
              a1[12] = v112;
              a1[13] = &v116[4 * v115];
              if (v108)
              {
                operator delete(v108);
                v108 = (char *)a1[11];
              }
              else
              {
                v108 = v117;
              }
            }
            else
            {
              *(_DWORD *)v109 = -1;
              v112 = v109 + 4;
            }
            a1[12] = v112;
            v110 = (v112 - v108) >> 2;
            LODWORD(v85) = *((_DWORD *)v79 + 3);
            v109 = v112;
          }
          while (v110 <= (int)v85);
          v111 = (int)v85;
          v80 = (void **)a1[1];
        }
        else
        {
          v111 = (int)v85;
        }
        if (*(_DWORD *)&v108[4 * v111] != *((_DWORD *)a1 + 28))
        {
          *((_DWORD *)*v80 + v111) = 2139095040;
          *(_DWORD *)(a1[5] + 4 * *((int *)v79 + 3)) = 2139095040;
          v85 = *((int *)v79 + 3);
          *(_QWORD *)(a1[8] + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v85);
          *(_DWORD *)(a1[11] + 4 * v85) = *((_DWORD *)a1 + 28);
          v80 = (void **)a1[1];
          LODWORD(v85) = *((_DWORD *)v79 + 3);
        }
      }
      v119 = (char *)*v80;
      v120 = *v46;
      v121 = NAN;
      if (v77 != -INFINITY)
      {
        v122 = *((float *)v79 + 2);
        v121 = NAN;
        if (v122 != -INFINITY)
        {
          v123 = v122 == INFINITY || v77 == INFINITY;
          v124 = v77 + v122;
          if (v123)
            v121 = INFINITY;
          else
            v121 = v124;
        }
      }
      v125 = (int)v85;
      v126 = *(float *)&v119[4 * (int)v85];
      if (v126 != INFINITY)
        break;
      v127 = *((float *)a1 + 7);
      v128 = v121 > (float)(v127 + INFINITY) || (float)(v121 + v127) < INFINITY;
      v126 = v121;
      if (v128)
        goto LABEL_200;
LABEL_212:
      if (__p[0])
        (*(void (**)(void *))(*(_QWORD *)__p[0] + 40))(__p[0]);
      else
        ++v152;
    }
    v129 = *(float *)&v119[4 * (int)v85];
    if (v121 != INFINITY)
    {
      if (v126 <= v121)
      {
        v131 = expf(-(float)(v121 - v126));
        v129 = v126 - logf(v131 + 1.0);
      }
      else
      {
        v130 = expf(-(float)(v126 - v121));
        v129 = v121 - logf(v130 + 1.0);
      }
    }
    v132 = *((float *)a1 + 7);
    if (v129 <= (float)(v126 + v132) && v126 <= (float)(v129 + v132))
      goto LABEL_212;
    if (v121 != INFINITY)
    {
      if (v126 <= v121)
      {
        v135 = expf(-(float)(v121 - v126));
        v126 = v126 - logf(v135 + 1.0);
      }
      else
      {
        v134 = expf(-(float)(v126 - v121));
        v126 = v121 - logf(v134 + 1.0);
      }
    }
LABEL_200:
    *(float *)&v119[4 * v125] = v126;
    v136 = *(float *)&v120[4 * v125];
    if (v136 != INFINITY)
    {
      if (v121 == INFINITY)
      {
        v121 = *(float *)&v120[4 * v125];
      }
      else if (v136 <= v121)
      {
        v138 = expf(-(float)(v121 - v136));
        v121 = v136 - logf(v138 + 1.0);
      }
      else
      {
        v137 = expf(-(float)(v136 - v121));
        v121 = v121 - logf(v137 + 1.0);
      }
    }
    *(float *)&v120[4 * v125] = v121;
    if (*(float *)&v119[4 * v125] != -INFINITY && (v121 < -INFINITY || v121 > -INFINITY))
    {
      v139 = **(_QWORD **)(a1[2] + 16);
      if (((*(_QWORD *)(a1[8] + (((unint64_t)*((int *)v79 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *((_DWORD *)v79 + 3)) & 1) != 0)
      {
        (*(void (**)(void))(v139 + 40))();
      }
      else
      {
        (*(void (**)(void))(v139 + 24))();
        *(_QWORD *)(a1[8] + (((unint64_t)*((int *)v79 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *((_DWORD *)v79 + 3);
      }
      goto LABEL_212;
    }
    v140 = 0;
    *v147 = 1;
LABEL_217:
    if (__p[0])
    {
      (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
    }
    else if (v151)
    {
      --*v151;
    }
  }
  while ((v140 & 1) != 0);
}

void sub_1ADBAFDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,char a22)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a22);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D27BB0;
  a1[1] = v2;
  return a1;
}

void sub_1ADBAFEDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D24900;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

float fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Final(uint64_t a1, int a2)
{
  return **(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 32)
                 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D27BB0;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 24);
  v4 = *v5;
  v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1ADBB01DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetFinal(uint64_t a1, int a2, float a3)
{
  _QWORD *v6;
  float *v7;
  float v8;
  unint64_t v9;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(float **)(v6[8] + 8 * a2);
  v8 = *v7;
  *v7 = a3;
  v9 = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  result = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v9, v8, a3);
  v6[1] = v6[1] & 4 | result;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D20EE0;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1ADBB0794(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D22588;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CCB8;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1ADBB0878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD **v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FAB8;
  v2 = (_QWORD **)a1[9];
  if (v2 != (_QWORD **)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(v2[v3++]);
      v2 = (_QWORD **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D22588;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADBB0AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADBB0BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1ADBB0CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1ADBB0D64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __p;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  int v22;
  unsigned int v23;

  *(_QWORD *)a1 = &unk_1E5D22588;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CCB8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v21);
  while (1)
  {
    if (!v21)
    {
      if ((int)v23 >= v22)
        goto LABEL_45;
LABEL_25:
      v14 = v23;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
      break;
    if (!v21)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 24))();
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddState((_QWORD *)a1);
    **(float **)(*v6 + 8 * (int)v14) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v14);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve((void **)(*(_QWORD *)(*v6 + 8 * (int)v14) + 24), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_38;
LABEL_32:
        v16 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 16 * v20);
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_32;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_33:
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v19)
      --*v19;
LABEL_40:
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    else
      ++v23;
  }
  if (v21)
    (*(void (**)(void))(*(_QWORD *)v21 + 8))();
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1ADBB111C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~VectorFstBaseImpl(v17);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1ADBB12B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  float v24;
  int v25;
  std::vector<unsigned int>::pointer end;
  unsigned int *v27;
  std::vector<unsigned int>::pointer begin;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  unsigned int *v34;
  unsigned int v35;
  std::vector<unsigned int>::pointer v36;
  unsigned int *v37;
  std::vector<unsigned int>::pointer v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  std::vector<unsigned int>::pointer v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  std::vector<unsigned int>::pointer v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  float v58;
  int v59;
  uint64_t *v61;
  uint64_t v63;
  int v64;
  unsigned int v65;
  std::vector<unsigned int> v66;
  std::vector<unsigned int> v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  int v75;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v73 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = &v73;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a1, &v68, 0);
      v8 = v73;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      v61 = a3;
      v11 = a2 & 0xC0000;
      v12 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0)
        v12 = 0x10425A850000;
      v13 = v8 | v12;
      v14 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0)
        v13 |= 0x100000uLL;
      v73 = v13;
      memset(&v67, 0, sizeof(v67));
      memset(&v66, 0, sizeof(v66));
      v65 = 0;
      v15 = a1;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v63);
      v16 = 0;
LABEL_12:
      if (v63)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63))
        {
          if (v63)
          {
            v17 = (*(uint64_t (**)(void))(*(_QWORD *)v63 + 24))();
LABEL_18:
            v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17);
            v67.__end_ = v67.__begin_;
            v66.__end_ = v66.__begin_;
            if (v11)
              std::vector<int>::reserve(&v67, v18);
            if (v14)
              std::vector<int>::reserve(&v66, v18);
            v72 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v17, &v68);
            v19 = 1;
            while (1)
            {
              if (v68)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68))
                {
                  if (v68)
                  {
                    (*(void (**)(void))(*(_QWORD *)v68 + 8))();
                  }
                  else
                  {
LABEL_92:
                    if (v71)
                      --*(_DWORD *)v71;
                  }
                  v15 = a1;
                  if (v11
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v67.__end_ - (char *)v67.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    v46 = v67.__end_ - v67.__begin_;
                    if (v46 <= 2)
                      v46 = 2;
                    v47 = v67.__begin_ + 1;
                    v48 = *v67.__begin_;
                    v49 = v46 - 1;
                    while (1)
                    {
                      v51 = *v47++;
                      v50 = v51;
                      if (v51 == v48)
                        break;
                      v48 = v50;
                      if (!--v49)
                        goto LABEL_101;
                    }
                    v73 = v73 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v14)
                    {
LABEL_112:
                      if (v16 >= 1)
                        v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      v58 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v17);
                      *(float *)&v68 = v58;
                      v75 = 2139095040;
                      if (v58 == INFINITY)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)a1 + 40))(a1, v17, INFINITY, v58) != 1)v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      else
                      {
                        *(float *)&v68 = v58;
                        v75 = 0;
                        if (v58 != 0.0)
                          v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        ++v16;
                      }
                      if (v63)
                        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 32))(v63);
                      else
                        ++v65;
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_101:
                    if (!v14)
                      goto LABEL_112;
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v66.__end_ - (char *)v66.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    v52 = v66.__end_ - v66.__begin_;
                    if (v52 <= 2)
                      v52 = 2;
                    v53 = v66.__begin_ + 1;
                    v54 = *v66.__begin_;
                    v55 = v52 - 1;
                    while (1)
                    {
                      v57 = *v53++;
                      v56 = v57;
                      if (v57 == v54)
                        break;
                      v54 = v56;
                      if (!--v55)
                        goto LABEL_112;
                    }
                    v73 = v73 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_112;
                }
                if (v68)
                {
                  v20 = (*(uint64_t (**)(void))(*(_QWORD *)v68 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v72 >= v70)
              {
                goto LABEL_92;
              }
              v20 = v69 + 16 * v72;
LABEL_29:
              v21 = *(_DWORD *)v20;
              v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
              {
                v73 = v73 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                v22 = *(_DWORD *)(v20 + 4);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (!v22)
                    goto LABEL_39;
                  goto LABEL_35;
                }
                v23 = v73;
              }
              else
              {
                v23 = v73 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              v73 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (!v22)
              {
LABEL_39:
                v73 = v73 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
                if ((v19 & 1) != 0)
                  goto LABEL_44;
                goto LABEL_40;
              }
LABEL_35:
              if ((v19 & 1) != 0)
                goto LABEL_44;
LABEL_40:
              if (v21 < (int)v8)
                v73 = v73 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              if (v22 < (int)a2)
                v73 = v73 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_44:
              v75 = 0;
              v24 = *(float *)(v20 + 8);
              v75 = LODWORD(v24);
              v74 = 0;
              if (v24 != 0.0)
              {
                v75 = LODWORD(v24);
                v74 = 2139095040;
                if (v24 != INFINITY)
                  v73 = v73 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
              }
              v25 = *(_DWORD *)(v20 + 12);
              if (v25 <= (int)v17)
                v73 = v73 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              if (v25 != (_DWORD)v17 + 1)
                v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              LODWORD(v8) = *(_DWORD *)v20;
              LODWORD(a2) = *(_DWORD *)(v20 + 4);
              if (v11)
              {
                end = v67.__end_;
                if (v67.__end_ >= v67.__end_cap_.__value_)
                {
                  begin = v67.__begin_;
                  v29 = v67.__end_ - v67.__begin_;
                  v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62)
                    goto LABEL_135;
                  v31 = (char *)v67.__end_cap_.__value_ - (char *)v67.__begin_;
                  if (((char *)v67.__end_cap_.__value_ - (char *)v67.__begin_) >> 1 > v30)
                    v30 = v31 >> 1;
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                    v32 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v32 = v30;
                  if (v32)
                  {
                    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67.__end_cap_, v32);
                    begin = v67.__begin_;
                    end = v67.__end_;
                  }
                  else
                  {
                    v33 = 0;
                  }
                  v34 = (unsigned int *)&v33[4 * v29];
                  *v34 = *(_DWORD *)v20;
                  v27 = v34 + 1;
                  while (end != begin)
                  {
                    v35 = *--end;
                    *--v34 = v35;
                  }
                  v67.__begin_ = v34;
                  v67.__end_ = v27;
                  v67.__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *v67.__end_ = v8;
                  v27 = end + 1;
                }
                v67.__end_ = v27;
              }
              if (v14)
              {
                v36 = v66.__end_;
                if (v66.__end_ >= v66.__end_cap_.__value_)
                {
                  v38 = v66.__begin_;
                  v39 = v66.__end_ - v66.__begin_;
                  v40 = v39 + 1;
                  if ((unint64_t)(v39 + 1) >> 62)
LABEL_135:
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v41 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
                  if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v40)
                    v40 = v41 >> 1;
                  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                    v42 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v42 = v40;
                  if (v42)
                  {
                    v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v66.__end_cap_, v42);
                    v38 = v66.__begin_;
                    v36 = v66.__end_;
                  }
                  else
                  {
                    v43 = 0;
                  }
                  v44 = (unsigned int *)&v43[4 * v39];
                  *v44 = *(_DWORD *)(v20 + 4);
                  v37 = v44 + 1;
                  while (v36 != v38)
                  {
                    v45 = *--v36;
                    *--v44 = v45;
                  }
                  v66.__begin_ = v44;
                  v66.__end_ = v37;
                  v66.__end_cap_.__value_ = (unsigned int *)&v43[4 * v42];
                  if (v38)
                    operator delete(v38);
                }
                else
                {
                  *v66.__end_ = *(_DWORD *)(v20 + 4);
                  v37 = v36 + 1;
                }
                v66.__end_ = v37;
              }
              if (v68)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
                v19 = 0;
              }
              else
              {
                v19 = 0;
                ++v72;
              }
            }
          }
LABEL_17:
          v17 = v65;
          goto LABEL_18;
        }
        if (v63)
          (*(void (**)(void))(*(_QWORD *)v63 + 8))();
      }
      else if ((int)v65 < v64)
      {
        goto LABEL_17;
      }
      v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      a3 = v61;
      if (v59 != -1 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        v73 = v73 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      if (v66.__begin_)
      {
        v66.__end_ = v66.__begin_;
        operator delete(v66.__begin_);
      }
      if (v67.__begin_)
      {
        v67.__end_ = v67.__begin_;
        operator delete(v67.__begin_);
      }
      v8 = v73;
    }
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1ADBB1AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 12);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 12);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 12);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 12), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 16 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      a3 = v44;
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19710;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1ADBB2214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19710;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19710;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19710;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19710;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADBB2320(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A6C8;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADBB2408(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A6C8;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADBB2814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v24);
  if (v24 || (a4 & 1) != 0)
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
    v12 = a5;
    if (!a4)
      v12 = 0;
    v13 = v11 + v12;
    if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
    {
      if (*(_QWORD *)a1)
        free(*(void **)a1);
      v23 = 0x4000;
      if (v13 > 0x4000)
        v23 = v13;
      *(_QWORD *)(a1 + 8) = v23;
      v15 = malloc_type_malloc(16 * v23, 0x1000040451B5BE8uLL);
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 16) = v15;
      v14 = v15;
    }
    else
    {
      v14 = *(_OWORD **)(a1 + 16);
      v15 = *(_OWORD **)a1;
    }
    *(_QWORD *)(a1 + 24) = &v14[v13];
    v16 = v24;
    v17 = v25;
    v19 = v26;
    v18 = v27;
    if (v27)
      ++*v27;
    v20 = 0;
    if (!v16)
      goto LABEL_15;
    while (1)
    {
      v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
      v22 = *v16;
      if (v21)
        break;
      *v15 = *(_OWORD *)(*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
      (*(void (**)(uint64_t *))(*v16 + 40))(v16);
      while (1)
      {
        ++v15;
        if (v16)
          break;
LABEL_15:
        if (v20 >= v19)
        {
          if (v18)
            --*v18;
          return;
        }
        *v15 = *(_OWORD *)(v17 + 16 * v20++);
      }
    }
    (*(void (**)(uint64_t *))(v22 + 8))(v16);
  }
  else
  {
    v10 = v25 + 16 * v26;
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1ADBB2A14(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t updated;
  fst *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  _BYTE v32[8];
  void *v33[2];
  void *v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string __p[5];
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v35 = 0u;
  v36 = 0u;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)v34 = 0u;
  v6 = -1;
  v38 = 0;
  v39 = 0;
  v37 = -1;
  v37 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v38 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v38 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v41;
    if (v41 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v10 = v9 | 3;
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v10, (uint64_t)v32);
  v30 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v11 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v13 = 0;
    v14 = (v11 >> 3);
    do
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = (*(float (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v13);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 24);
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        v17 = v16 >> 4;
        if (v17 <= 1)
          v18 = 1;
        else
          v18 = v17;
        v19 = (_DWORD *)(v15 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v19;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v19[1];
          std::ostream::write();
          v19 += 4;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v20 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    v21 = (_QWORD *)fst::cerr(v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v23 = *(char *)(a3 + 23);
    if (v23 >= 0)
      v24 = a3;
    else
      v24 = *(_QWORD *)a3;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a3 + 23);
    else
      v25 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v38 == v12)
    {
      updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v28 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  v38 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v32, v30);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_30:
  if (SHIBYTE(v35) < 0)
    operator delete(v34[1]);
  if (SHIBYTE(v34[0]) < 0)
    operator delete(v33[0]);
  return updated;
}

void sub_1ADBB2E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1ADBB3314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::ArcTpl<fst::LogWeightTpl<float>,int>::Type();
    std::operator+<char>();
    fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Type(void)::type = v2;
  }
  return fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Type(void)::type;
}

void sub_1ADBB3404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1ADBB36A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int64x2_t v30;
  std::vector<int>::value_type __x;
  std::vector<int> v32;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v32, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v32.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v32.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(_QWORD **)(v11 + 8 * v12));
      }
      else
      {
        v32.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v18 = *(_QWORD *)(v16 + 24);
      v17 = *(_QWORD *)(v16 + 32);
      v19 = *(int64x2_t *)(v16 + 8);
      v20 = v17 - v18;
      if (v17 == v18)
      {
        v30 = *(int64x2_t *)(v16 + 8);
        v26 = 0;
        v27 = v20 >> 4;
      }
      else
      {
        v21 = 0;
        v26 = 0;
        v22 = *(_QWORD *)(v16 + 24);
        do
        {
          v23 = v32.__begin_[*(int *)(v22 + 12)];
          if (v23 == -1)
          {
            v24.i64[0] = *(_QWORD *)v22;
            v24.i64[1] = HIDWORD(*(_QWORD *)v22);
            v19 = vaddq_s64(v19, vceqzq_s64(v24));
          }
          else
          {
            *(_DWORD *)(v22 + 12) = v23;
            if (v21 != v26)
            {
              *(_OWORD *)(v18 + 16 * v26) = *(_OWORD *)v22;
              v14 = *v4;
            }
            ++v26;
          }
          v16 = *(_QWORD *)(v14 + 8 * v15);
          ++v21;
          v25 = *(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24);
          v22 += 16;
        }
        while (v21 < v25 >> 4);
        v30 = v19;
        v27 = v25 >> 4;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeleteArcs((_QWORD *)v16, v27 - v26);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 8) = v30;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v28 = *(int *)(a1 + 88);
  if ((_DWORD)v28 == -1)
  {
    v29 = v32.__begin_;
    if (!v32.__begin_)
      return;
  }
  else
  {
    v29 = v32.__begin_;
    *(_DWORD *)(a1 + 88) = v32.__begin_[v28];
  }
  v32.__end_ = v29;
  operator delete(v29);
}

void sub_1ADBB3924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)
                                                            - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 16 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  uint64_t v20;
  fst *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  fst *v28;
  _QWORD *v29;
  fst *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  fst *v39;
  _QWORD *v40;
  _QWORD *v41;
  fst *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t result;
  void *__p[2];
  char v48;
  char v49;
  __int16 v50;
  void *v51[3];
  uint64_t v52[2];
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v5 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v6 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v20 = operator new();
    *(_DWORD *)(v20 + 8) = 5;
    *(_BYTE *)(v20 + 12) = 0;
    *(_QWORD *)v20 = &unk_1E5D1EEB0;
    *(_QWORD *)(v20 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v20;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v52, "INFO");
    v21 = fst::LogMessage::LogMessage((fst *)v51, (uint64_t)v52);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"AutoQueue: using state-order discipline", 39);
    goto LABEL_17;
  }
  if ((v6 & 0x800000000) != 0)
  {
    v24 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(v24, a2);
    *(_QWORD *)(a1 + 16) = v24;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v52, "INFO");
    v25 = fst::LogMessage::LogMessage((fst *)v51, (uint64_t)v52);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"AutoQueue: using top-order discipline", 37);
LABEL_17:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v51);
    if (SHIBYTE(v53) < 0)
    {
      v23 = (void *)v52[0];
LABEL_46:
      operator delete(v23);
    }
    return a1;
  }
  v55 = 0;
  v52[0] = (uint64_t)v5;
  v52[1] = 0;
  v53 = 0;
  v54 = &v55;
  fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a2, v52, 0);
  v7 = *(int **)(a1 + 48);
  v8 = *(int **)(a1 + 56);
  if (v7 != v8)
  {
    v9 = v7 + 1;
    if (v7 + 1 != v8)
    {
      v10 = *v7;
      v11 = v7 + 1;
      do
      {
        v13 = *v11++;
        v12 = v13;
        v14 = v10 < v13;
        if (v10 <= v13)
          v10 = v12;
        if (v14)
          v7 = v9;
        v9 = v11;
      }
      while (v11 != v8);
    }
  }
  v15 = *v7;
  v16 = *v7 + 1;
  std::vector<fst::QueueType>::vector(v51, v16);
  v50 = 0;
  fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NaturalLess<fst::LogWeightTpl<float>>>(a2, v5, (uint64_t)v51, 0, &v50, (_BYTE *)&v50 + 1);
  if (HIBYTE(v50))
  {
    v17 = operator new();
    *(_DWORD *)(v17 + 8) = 2;
    *(_BYTE *)(v17 + 12) = 0;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_QWORD *)v17 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v17;
    if (FLAGS_v < 2)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v18 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v19 = (_QWORD *)fst::cerr(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_24:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
    if (v48 < 0)
      operator delete(__p[0]);
LABEL_44:
    v23 = v51[0];
    if (v51[0])
    {
      v51[1] = v51[0];
      goto LABEL_46;
    }
    return a1;
  }
  if ((_BYTE)v50)
  {
    v27 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue(v27, (uint64_t)v5);
    *(_QWORD *)(a1 + 16) = v27;
    if (FLAGS_v < 2)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v28 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"AutoQueue: using top-order discipline", 37);
    goto LABEL_24;
  }
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v30 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v31 = (_QWORD *)fst::cerr(v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
    if (v48 < 0)
      operator delete(__p[0]);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v16);
  if (v15 < 0)
  {
LABEL_43:
    v45 = operator new();
    *(_DWORD *)(v45 + 8) = 6;
    *(_BYTE *)(v45 + 12) = 0;
    *(_QWORD *)v45 = &unk_1E5D22CF0;
    *(_QWORD *)(v45 + 16) = v4;
    *(_QWORD *)(v45 + 24) = v5;
    *(_QWORD *)(v45 + 32) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v45 + 48) = 0;
    *(_QWORD *)(v45 + 56) = 0;
    *(_QWORD *)(v45 + 40) = 0;
    *(_QWORD *)(a1 + 16) = v45;
    goto LABEL_44;
  }
  v32 = 0;
  while (1)
  {
    v33 = *((_DWORD *)v51[0] + v32);
    if (v33)
      break;
    *(_QWORD *)(*v4 + 8 * v32) = 0;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v42 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v43 = (_QWORD *)fst::cerr(v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"AutoQueue: SCC #", 16);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": using trivial discipline", 26);
LABEL_40:
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
      if (v48 < 0)
        operator delete(__p[0]);
    }
LABEL_42:
    if (v16 == ++v32)
      goto LABEL_43;
  }
  if (v33 == 2)
  {
    v38 = operator new();
    *(_DWORD *)(v38 + 8) = 2;
    *(_BYTE *)(v38 + 12) = 0;
    *(_OWORD *)(v38 + 16) = 0u;
    *(_OWORD *)(v38 + 32) = 0u;
    *(_OWORD *)(v38 + 48) = 0u;
    *(_QWORD *)v38 = &unk_1E5D27B60;
    *(_QWORD *)(*v4 + 8 * v32) = v38;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v39 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v40 = (_QWORD *)fst::cerr(v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"AutoQueue: SCC #", 16);
      v41 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": using LIFO disciplle", 22);
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  if (v33 != 3)
  {
    v34 = operator new();
    *(_DWORD *)(v34 + 8) = 1;
    *(_BYTE *)(v34 + 12) = 0;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_QWORD *)v34 = &unk_1E5D23A28;
    *(_QWORD *)(*v4 + 8 * v32) = v34;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v35 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v36 = (_QWORD *)fst::cerr(v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: SCC #", 16);
      v37 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": using FIFO disciplle", 22);
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  result = operator new();
  __break(1u);
  return result;
}

void sub_1ADBB4014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  void **v28;
  void *v30;
  void *v31;

  if (a14 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  v30 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v26 + 56) = v30;
    operator delete(v30);
  }
  v31 = *v27;
  if (*v27)
  {
    *(_QWORD *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1ADBB4278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 16 * v12[5];
            v18 = *(int *)(v17 + 12);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 12);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 12);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D19710;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADBB49C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19710;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D28FB0;
  a1[1] = v2;
  return a1;
}

void sub_1ADBB4AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D25D00;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

_QWORD *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  _QWORD *result;

  v4 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *v4;
  result = std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v4 + 2));
  *(_DWORD *)(a3 + 32) = v4[8];
  return result;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D28FB0;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 56);
  v4 = *v5;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1ADBB4E08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

_QWORD *fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  _QWORD *v6;
  int v8;
  _QWORD v9[3];
  int v10;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v8 = *a3;
  std::list<int>::list(v9, (uint64_t)(a3 + 2));
  v10 = a3[8];
  fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetFinal(v6, a2, &v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1ADBB4F08(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::AddArc(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteArcs(*(_QWORD **)(a1 + 8), a2);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  return std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D215E0;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1ADBB539C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D22908;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1D038;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1ADBB5480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FE38;
  v2 = (_QWORD *)a1[9];
  if (v2 != (_QWORD *)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD *)a1[8];
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(v2[v3++]);
      v2 = (_QWORD *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D22908;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(uint64_t a1)
{
  void **v2;

  if (a1)
  {
    v2 = (void **)(a1 + 56);
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&v2);
    std::__list_imp<char *>::clear((_QWORD *)(a1 + 8));
    operator delete((void *)a1);
  }
}

void std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 56;
        std::__list_imp<char *>::clear((_QWORD *)v4 - 5);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADBB5798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADBB5878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1ADBB5978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1ADBB5A28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __str;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22[4];
  uint64_t v23;
  int v24;
  unsigned int v25;

  *(_QWORD *)a1 = &unk_1E5D22908;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1D038;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v25 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v23);
  while (1)
  {
    if (!v23)
    {
      if ((int)v25 >= v24)
        goto LABEL_45;
LABEL_25:
      v14 = v25;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23))
      break;
    if (!v23)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddState((_QWORD *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v21, a2, v14);
    fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetFinal(a1, v14, (int *)&v21);
    std::__list_imp<char *>::clear(v22);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 56), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __str.__r_.__value_.__r.__words[2])
          goto LABEL_38;
LABEL_32:
        v16 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v20);
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0]))
        break;
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_32;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_33:
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__str.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v19)
      --*v19;
LABEL_40:
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
    else
      ++v25;
  }
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1ADBB5DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  _QWORD *v16;

  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorFstBaseImpl(v16);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddState(_QWORD *a1)
{
  char *v2;
  _DWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v2 = (char *)operator new(0x50uLL);
  v3 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  *(_DWORD *)v2 = *v3;
  std::list<int>::list((_QWORD *)v2 + 1, (uint64_t)(v3 + 2));
  v4 = a1[10];
  *((_DWORD *)v2 + 8) = v3[8];
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *((_QWORD *)v2 + 9) = 0;
  v5 = (_QWORD *)a1[9];
  if ((unint64_t)v5 >= v4)
  {
    v7 = a1[8];
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = v2;
    v6 = v13 + 8;
    v16 = (char *)a1[8];
    v15 = (char *)a1[9];
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)a1[8];
    }
    a1[8] = v13;
    a1[9] = v6;
    a1[10] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[9] = v6;
  return (((unint64_t)v6 - a1[8]) >> 3) - 1;
}

_QWORD *fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v4;
  int v5;
  int v7;
  _QWORD v8[3];
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
  v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  v5 = a3[8];
  v9 = v5;
  *(_DWORD *)v4 = v7;
  if ((int *)v4 != &v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v4 + 8), v8[1], (uint64_t)v8);
    v5 = v9;
  }
  *(_DWORD *)(v4 + 32) = v5;
  return std::__list_imp<char *>::clear(v8);
}

void sub_1ADBB604C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Zero();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero(void)::zero = v2;
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero(void)::zero;
}

void sub_1ADBB60F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Zero();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Zero(void)::zero = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Zero(void)::zero;
}

void sub_1ADBB61C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)1>::Zero();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 2139095040;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Zero(void)::zero = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Zero(void)::zero;
}

void sub_1ADBB62C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)1>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::StringWeight<int,(fst::StringType)1>::StringWeight(v2, -1);
    fst::StringWeight<int,(fst::StringType)1>::Zero(void)::zero = v2;
  }
  return fst::StringWeight<int,(fst::StringType)1>::Zero(void)::zero;
}

void sub_1ADBB6384(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C40CA22B68ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)1>::StringWeight(uint64_t a1, int a2)
{
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)a1 = 0;
  fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a1, a2);
  return a1;
}

void sub_1ADBB63F0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_DWORD *fst::StringWeight<int,(fst::StringType)1>::PushBack(_DWORD *result, int a2)
{
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    result = operator new(0x18uLL);
    result[4] = a2;
    v5 = *((_QWORD *)v3 + 1);
    v4 = v3 + 2;
    *(_QWORD *)result = v5;
    *((_QWORD *)result + 1) = v4;
    *(_QWORD *)(v5 + 8) = result;
    *v4 = result;
    ++v4[2];
  }
  else
  {
    *result = a2;
  }
  return result;
}

uint64_t *std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;

  for (i = (uint64_t *)a1[1]; a2 != a3 && i != a1; i = (uint64_t *)i[1])
  {
    *((_DWORD *)i + 4) = *(_DWORD *)(a2 + 16);
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (i == a1)
    return std::list<int>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t)a1, a1, a2, a3);
  else
    return std::list<int>::erase((uint64_t)a1, i, a1);
}

uint64_t *std::list<int>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = operator new(0x18uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    *((_DWORD *)v8 + 4) = *(_DWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = v8;
      do
      {
        v8 = operator new(0x18uLL);
        *v8 = v12;
        v8[1] = 0;
        *((_DWORD *)v8 + 4) = *(_DWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1ADBB657C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1ADBB659C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::list<int>::erase(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (__p != a3)
  {
    v5 = *a3;
    v6 = *__p;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    do
    {
      v7 = (uint64_t *)__p[1];
      --*(_QWORD *)(a1 + 16);
      operator delete(__p);
      __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADBB66C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_QWORD *)(v12 - 56) = *(_QWORD *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((_QWORD *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADBB67EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    std::__list_imp<char *>::clear((_QWORD *)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  if (!*a2)
    ++a1[5];
  if (!a2[1])
    ++a1[6];
  v3 = a1 + 7;
  v4 = a1[8];
  if (v4 >= a1[9])
  {
    result = std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const&>((uint64_t)v3, (uint64_t)a2);
    result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

_QWORD *std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  result = std::list<int>::list((_QWORD *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1ADBB6928(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[56 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((_QWORD *)v11 + 2, a2 + 16);
  v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADBB6A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1ADBB6B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::vector<unsigned int>::pointer end;
  unsigned int *v47;
  std::vector<unsigned int>::pointer begin;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  unsigned int *v54;
  unsigned int v55;
  std::vector<unsigned int>::pointer v56;
  unsigned int *v57;
  std::vector<unsigned int>::pointer v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  unsigned int *v64;
  unsigned int v65;
  unint64_t v66;
  std::vector<unsigned int>::pointer v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  std::vector<unsigned int>::pointer v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t *v83;
  BOOL v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t *v92;
  BOOL v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _DWORD *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  std::vector<unsigned int> v106;
  std::vector<unsigned int> v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  float v116;
  float v117;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v115 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v111 = (uint64_t *)&v115;
      fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a1, &v108, 0);
      v8 = v115;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0)
      goto LABEL_211;
    v11 = a2 & 0xC0000;
    v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0)
      v12 = 0x10425A850000;
    v13 = v8 | v12;
    v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0)
      v13 |= 0x100000uLL;
    v115 = v13;
    memset(&v107, 0, sizeof(v107));
    memset(&v106, 0, sizeof(v106));
    v105 = 0;
    v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v103);
    v16 = 0;
LABEL_12:
    if (!v103)
    {
      if ((int)v105 >= v104)
        goto LABEL_203;
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103))
    {
      if (v103)
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v103 + 24))();
LABEL_18:
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17);
        v110 = (uint64_t)&v110;
        v111 = &v110;
        v112 = 0;
        LODWORD(v109) = 0;
        v107.__end_ = v107.__begin_;
        v106.__end_ = v106.__begin_;
        if (v11)
          std::vector<int>::reserve(&v107, v18);
        if (v14)
          std::vector<int>::reserve(&v106, v18);
        v102 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v17, &v98);
        v19 = 1;
        while (1)
        {
          if (v98)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98))
            {
              if (v98)
              {
                (*(void (**)(void))(*(_QWORD *)v98 + 8))();
              }
              else
              {
LABEL_132:
                if (v101)
                  --*v101;
              }
              v15 = a1;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14)
                  goto LABEL_152;
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v106.__end_ - (char *)v106.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  v72 = v106.__end_ - v106.__begin_;
                  if (v72 <= 2)
                    v72 = 2;
                  v73 = v106.__begin_ + 1;
                  v74 = *v106.__begin_;
                  v75 = v72 - 1;
                  while (1)
                  {
                    v77 = *v73++;
                    v76 = v77;
                    if (v77 == v74)
                      break;
                    v74 = v76;
                    if (!--v75)
                      goto LABEL_152;
                  }
                  v115 = v115 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              v66 = v107.__end_ - v107.__begin_;
              if (v66 <= 2)
                v66 = 2;
              v67 = v107.__begin_ + 1;
              v68 = *v107.__begin_;
              v69 = v66 - 1;
              while (1)
              {
                v71 = *v67++;
                v70 = v71;
                if (v71 == v68)
                  break;
                v68 = v70;
                if (!--v69)
                  goto LABEL_141;
              }
              v115 = v115 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14)
                goto LABEL_142;
LABEL_152:
              if (v16 >= 1)
                v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v98, a1, v17);
              v78 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
              if ((_DWORD)v98)
                v79 = (char *)v101 + 1;
              else
                v79 = 0;
              if (*(_DWORD *)v78)
                v80 = *(_QWORD *)(v78 + 24) + 1;
              else
                v80 = 0;
              if (v79 != (char *)v80)
                goto LABEL_174;
              v81 = 0;
              v82 = v100;
              v83 = (uint64_t *)(v78 + 16);
              v84 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v78;
              v85 = !v84;
              while (1)
              {
                v86 = *v83;
                if ((v81 & 1) == 0 && v85)
                  break;
                if ((uint64_t *)v82 == &v99)
                  goto LABEL_173;
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16))
                  goto LABEL_174;
                v82 = *(_QWORD *)(v82 + 8);
                v83 = (uint64_t *)(v86 + 8);
                v81 = 1;
              }
              if ((_DWORD)v98)
                goto LABEL_174;
LABEL_173:
              v117 = *(float *)&v102;
              v116 = 0.0;
              v116 = *(float *)(v78 + 32);
              if (*(float *)&v102 == v116)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 40))(a1, v17, *(float *)&v102) != 1)v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              else
              {
LABEL_174:
                v87 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
                if ((_DWORD)v98)
                  v88 = (char *)v101 + 1;
                else
                  v88 = 0;
                if (*(_DWORD *)v87)
                  v89 = *(_QWORD *)(v87 + 24) + 1;
                else
                  v89 = 0;
                if (v88 != (char *)v89)
                  goto LABEL_194;
                v90 = 0;
                v91 = v100;
                v92 = (uint64_t *)(v87 + 16);
                v93 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v87;
                v94 = !v93;
                while (1)
                {
                  v95 = *v92;
                  if ((v90 & 1) == 0 && v94)
                    break;
                  if ((uint64_t *)v91 == &v99)
                    goto LABEL_193;
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16))
                    goto LABEL_194;
                  v91 = *(_QWORD *)(v91 + 8);
                  v92 = (uint64_t *)(v95 + 8);
                  v90 = 1;
                }
                if ((_DWORD)v98)
                  goto LABEL_194;
LABEL_193:
                v117 = *(float *)&v102;
                v116 = 0.0;
                v116 = *(float *)(v87 + 32);
                if (*(float *)&v102 != v116)
LABEL_194:
                  v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                ++v16;
              }
              std::__list_imp<char *>::clear(&v99);
              std::__list_imp<char *>::clear(&v110);
              if (v103)
                (*(void (**)(uint64_t))(*(_QWORD *)v103 + 32))(v103);
              else
                ++v105;
              goto LABEL_12;
            }
            if (v98)
            {
              v20 = (*(uint64_t (**)(void))(*(_QWORD *)v98 + 32))();
              goto LABEL_29;
            }
          }
          else if (v102 >= v100)
          {
            goto LABEL_132;
          }
          v20 = v99 + 56 * v102;
LABEL_29:
          v21 = *(_DWORD *)v20;
          v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            v115 = v115 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22)
                goto LABEL_35;
              goto LABEL_39;
            }
            v23 = v115;
          }
          else
          {
            v23 = v115 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          v115 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0)
              goto LABEL_40;
            goto LABEL_44;
          }
LABEL_39:
          v115 = v115 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v108)
              v115 = v115 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            if (v22 < SHIDWORD(v108))
              v115 = v115 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
          }
LABEL_44:
          v24 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
          v25 = *(_DWORD *)(v20 + 8);
          if (v25)
            v26 = *(_QWORD *)(v20 + 32) + 1;
          else
            v26 = 0;
          if (*(_DWORD *)v24)
            v27 = *(_QWORD *)(v24 + 24) + 1;
          else
            v27 = 0;
          if (v26 != v27)
            goto LABEL_64;
          v28 = 0;
          v29 = (uint64_t *)(v20 + 24);
          v30 = (uint64_t *)(v24 + 16);
          v31 = v25 && v25 == *(_DWORD *)v24;
          v32 = !v31;
          while (1)
          {
            v33 = *v29;
            v34 = *v30;
            if ((v28 & 1) == 0 && v32)
              break;
            if (v33 == v20 + 16)
              goto LABEL_63;
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16))
              goto LABEL_64;
            v29 = (uint64_t *)(v33 + 8);
            v30 = (uint64_t *)(v34 + 8);
            v28 = 1;
          }
          if (v25)
            goto LABEL_64;
LABEL_63:
          v117 = 0.0;
          v117 = *(float *)(v20 + 40);
          v116 = 0.0;
          v116 = *(float *)(v24 + 32);
          if (v117 != v116)
          {
LABEL_64:
            v35 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
            v25 = *(_DWORD *)(v20 + 8);
            if (v25)
              v36 = *(_QWORD *)(v20 + 32) + 1;
            else
              v36 = 0;
            if (*(_DWORD *)v35)
              v37 = *(_QWORD *)(v35 + 24) + 1;
            else
              v37 = 0;
            if (v36 != v37)
              goto LABEL_84;
            v38 = 0;
            v39 = (uint64_t *)(v20 + 24);
            v40 = (uint64_t *)(v35 + 16);
            v41 = v25 && v25 == *(_DWORD *)v35;
            v42 = !v41;
            while (1)
            {
              v43 = *v39;
              v44 = *v40;
              if ((v38 & 1) == 0 && v42)
                break;
              if (v43 == v20 + 16)
                goto LABEL_83;
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16))
                goto LABEL_84;
              v39 = (uint64_t *)(v43 + 8);
              v40 = (uint64_t *)(v44 + 8);
              v38 = 1;
            }
            if (v25)
              goto LABEL_84;
LABEL_83:
            v117 = 0.0;
            v117 = *(float *)(v20 + 40);
            v116 = 0.0;
            v116 = *(float *)(v35 + 32);
            if (v117 != v116)
LABEL_84:
              v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17)
            v115 = v115 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          if (v45 != (_DWORD)v17 + 1)
            v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          v108 = *(_QWORD *)v20;
          LODWORD(v109) = v25;
          if (&v108 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v110, *(_QWORD *)(v20 + 24), v20 + 16);
            v45 = *(_DWORD *)(v20 + 48);
          }
          v113 = *(_DWORD *)(v20 + 40);
          v114 = v45;
          if (v11)
          {
            end = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              begin = v107.__begin_;
              v49 = v107.__end_ - v107.__begin_;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_213;
              v51 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v52);
                begin = v107.__begin_;
                end = v107.__end_;
              }
              else
              {
                v53 = 0;
              }
              v54 = (unsigned int *)&v53[4 * v49];
              *v54 = *(_DWORD *)v20;
              v47 = v54 + 1;
              while (end != begin)
              {
                v55 = *--end;
                *--v54 = v55;
              }
              v107.__begin_ = v54;
              v107.__end_ = v47;
              v107.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v107.__end_ = *(_DWORD *)v20;
              v47 = end + 1;
            }
            v107.__end_ = v47;
          }
          if (v14)
          {
            v56 = v106.__end_;
            if (v106.__end_ >= v106.__end_cap_.__value_)
            {
              v58 = v106.__begin_;
              v59 = v106.__end_ - v106.__begin_;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62)
LABEL_213:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v61 = (char *)v106.__end_cap_.__value_ - (char *)v106.__begin_;
              if (((char *)v106.__end_cap_.__value_ - (char *)v106.__begin_) >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v62 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v106.__end_cap_, v62);
                v58 = v106.__begin_;
                v56 = v106.__end_;
              }
              else
              {
                v63 = 0;
              }
              v64 = (unsigned int *)&v63[4 * v59];
              *v64 = *(_DWORD *)(v20 + 4);
              v57 = v64 + 1;
              while (v56 != v58)
              {
                v65 = *--v56;
                *--v64 = v65;
              }
              v106.__begin_ = v64;
              v106.__end_ = v57;
              v106.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *v106.__end_ = *(_DWORD *)(v20 + 4);
              v57 = v56 + 1;
            }
            v106.__end_ = v57;
          }
          if (v98)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v98 + 40))(v98);
            v19 = 0;
          }
          else
          {
            v19 = 0;
            ++v102;
          }
        }
      }
LABEL_17:
      v17 = v105;
      goto LABEL_18;
    }
    if (v103)
      (*(void (**)(void))(*(_QWORD *)v103 + 8))();
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
    {
      v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v106.__begin_)
    {
      v106.__end_ = v106.__begin_;
      operator delete(v106.__begin_);
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    v8 = v115;
LABEL_211:
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1ADBB760C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 48);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 48);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 48);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 48), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 56 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19990;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1ADBB7D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19990;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::FinishState(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t result;
  unint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int *i;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  float v32;
  float v33;
  uint64_t v34;
  _QWORD v35[3];
  float v36;
  float v37;
  float v38;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v34);
  v6 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  if ((_DWORD)v34)
    v7 = v35[2] + 1;
  else
    v7 = 0;
  if (*(_DWORD *)v6)
    v8 = *(_QWORD *)(v6 + 24) + 1;
  else
    v8 = 0;
  if (v7 == v8)
  {
    v9 = 0;
    v10 = v35[1];
    v11 = (uint64_t *)(v6 + 16);
    if ((_DWORD)v34)
      v12 = (_DWORD)v34 == *(_DWORD *)v6;
    else
      v12 = 0;
    v13 = !v12;
    v14 = v13 ^ 1;
    while (1)
    {
      v15 = *v11;
      if ((v9 & 1) == 0 && !v14)
        break;
      if ((_QWORD *)v10 == v35)
        goto LABEL_42;
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16))
        goto LABEL_21;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = (uint64_t *)(v15 + 8);
      v9 = 1;
    }
    if ((_DWORD)v34)
      goto LABEL_21;
LABEL_42:
    v38 = v36;
    v37 = 0.0;
    v37 = *(float *)(v6 + 32);
    v32 = v36;
    v33 = v37;
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  v17 = a2;
  *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  v18 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17))
    goto LABEL_36;
  v19 = 0;
  v20 = *(_QWORD **)(a1 + 80);
  v21 = v20[1];
  v22 = **(_QWORD **)(a1 + 16);
  v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    v24 = *v23--;
    v19 |= *(_QWORD *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while ((_DWORD)v24 != a2);
  v25 = *(_QWORD **)a1;
  v26 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v21 - 4); ; --i)
  {
    v28 = *i;
    if (v25)
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    result = v28 >> 6;
    v29 = 1 << v28;
    if ((v19 & 1) == 0)
      break;
    *(_QWORD *)(v22 + 8 * result) |= v29;
    *(_QWORD *)(v26 + 8 * result) &= ~v29;
    if ((_DWORD)v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(_QWORD *)(v26 + 8 * result) &= ~v29;
  if ((_DWORD)v28 != a2)
    goto LABEL_33;
  v20[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    v30 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
      *(_QWORD *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3))
      *(_DWORD *)(v18 + 4 * a3) = v31;
  }
  return result;
}

void sub_1ADBB80E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::BackArc(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(int *)(a3 + 48);
  v4 = *(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v3);
  v5 = **(_QWORD **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2))
    *(_DWORD *)(v5 + 4 * a2) = v4;
  v6 = **(_QWORD **)(a1 + 16);
  if (((*(_QWORD *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    *(_QWORD *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v7 = *(unint64_t **)(a1 + 24);
  v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  *v7 = v8;
  if (*(_DWORD *)(a3 + 48) == *(_DWORD *)(a1 + 40))
    *v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  return 1;
}

uint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ForwardOrCrossArc(_QWORD **a1, int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(int *)(a3 + 48);
  v4 = *a1[7];
  v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    v6 = v3 >> 6;
    v7 = 1 << v3;
  }
  else
  {
    v6 = v3 >> 6;
    v7 = 1 << v3;
    if ((*(_QWORD *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2))
        *(_DWORD *)(v8 + 4 * a2) = v5;
    }
  }
  v9 = *a1[2];
  if ((*(_QWORD *)(v9 + 8 * v6) & v7) != 0)
    *(_QWORD *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return 1;
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19990;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19990;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19990;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADBB8298(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A948;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADBB8380(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A948;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADBB878C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    v10 = v27 + 56 * v28;
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v25 = 0x4000;
    if (v13 > 0x4000)
      v25 = v13;
    *(_QWORD *)(a1 + 8) = v25;
    v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(uint64_t **)(a1 + 16);
    v15 = *(uint64_t **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[7 * v13];
  v16 = v26;
  v17 = v27;
  v19 = v28;
  v18 = v29;
  if (v29)
    ++*v29;
  v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    v24 = v15 - 7;
    *v24 = *(_QWORD *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(_QWORD *)(v23 + 24), v23 + 16);
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 56 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1ADBB89EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::WriteFst<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _BYTE v34[8];
  void *v35[2];
  void *v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string __p[5];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)v35 = 0u;
  *(_OWORD *)v36 = 0u;
  v6 = -1;
  v40 = 0;
  v41 = 0;
  v39 = -1;
  v39 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v40 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v40 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v43;
    if (v43 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v9, (uint64_t)v34);
  v31 = v9;
  v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v12 = 0;
    v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(__p);
      std::__list_imp<char *>::clear(&__p[0].__r_.__value_.__l.__size_);
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      v14 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v12);
      v16 = *(_QWORD *)(v14 + 56);
      v15 = *(_QWORD *)(v14 + 64);
      if (v15 == v16)
        v17 = 0;
      else
        v17 = *(_DWORD **)(v14 + 56);
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1)
          v18 = 1;
        else
          v18 = (v15 - v16) / 56;
        v19 = v17;
        do
        {
          v20 = *v19;
          v19 += 14;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(v17 + 2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_30:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v33);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_33;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      updated = 1;
      goto LABEL_33;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v29 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_30;
  }
  v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_33:
  if (SHIBYTE(v37) < 0)
    operator delete(v36[1]);
  if (SHIBYTE(v36[0]) < 0)
    operator delete(v35[0]);
  return updated;
}

void sub_1ADBB8E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a17);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(_DWORD *a1)
{
  char v2;
  uint64_t *v3;
  uint64_t v4;

  std::ostream::write();
  v2 = 0;
  v3 = (uint64_t *)(a1 + 4);
  while (1)
  {
    v4 = *v3;
    if ((v2 & 1) == 0)
    {
      if (!*a1)
        return std::ostream::write();
      std::ostream::write();
    }
    if ((_DWORD *)v4 == a1 + 2)
      break;
    std::ostream::write();
    v3 = (uint64_t *)(v4 + 8);
    v2 = 1;
  }
  return std::ostream::write();
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1ADBB9404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::ArcTpl<fst::LogWeightTpl<float>,int>::Type();
    std::operator+<char>();
    fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Type(void)::type = v2;
  }
  return fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Type(void)::type;
}

void sub_1ADBB94F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1ADBB9794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetFinal(_QWORD *a1, int a2, int *a3)
{
  int *v6;
  unint64_t v7;
  int v9;
  _QWORD v10[3];
  int v11;
  int v12;
  _QWORD v13[3];
  int v14;
  int v15;
  _QWORD v16[3];
  int v17;
  int v18;
  _QWORD v19[3];
  int v20;

  v6 = *(int **)(a1[8] + 8 * a2);
  v18 = *v6;
  std::list<int>::list(v19, (uint64_t)(v6 + 2));
  v20 = v6[8];
  v15 = *a3;
  std::list<int>::list(v16, (uint64_t)(a3 + 2));
  v17 = a3[8];
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetFinal((uint64_t)a1, a2, &v15);
  std::__list_imp<char *>::clear(v16);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v12 = v18;
  std::list<int>::list(v13, (uint64_t)v19);
  v14 = v20;
  v9 = *a3;
  std::list<int>::list(v10, (uint64_t)(a3 + 2));
  v11 = a3[8];
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>(v7, &v12, &v9);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(v13);
  return std::__list_imp<char *>::clear(v19);
}

void sub_1ADBB9954(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SetFinalProperties<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>(unint64_t a1, int *a2, int *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t *v36;
  BOOL v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t *v48;
  BOOL v49;
  _BOOL4 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v6 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  v7 = *a2;
  if (*a2)
    v8 = *((_QWORD *)a2 + 3) + 1;
  else
    v8 = 0;
  if (*(_DWORD *)v6)
    v9 = *(_QWORD *)(v6 + 24) + 1;
  else
    v9 = 0;
  if (v8 != v9)
    goto LABEL_22;
  v10 = 0;
  v11 = (uint64_t *)(a2 + 4);
  v12 = (uint64_t *)(v6 + 16);
  v13 = v7 && v7 == *(_DWORD *)v6;
  v14 = !v13;
  v15 = !v14;
  while (1)
  {
    v16 = *v11;
    v17 = *v12;
    if ((v10 & 1) == 0 && !v15)
      break;
    if ((int *)v16 == a2 + 2)
      goto LABEL_21;
    if (*(_DWORD *)(v16 + 16) != *(_DWORD *)(v17 + 16))
      goto LABEL_22;
    v11 = (uint64_t *)(v16 + 8);
    v12 = (uint64_t *)(v17 + 8);
    v10 = 1;
  }
  if (v7)
    goto LABEL_22;
LABEL_21:
  if (*((float *)a2 + 8) != *(float *)(v6 + 32))
  {
LABEL_22:
    v18 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
    v19 = *a2;
    if (*a2)
      v20 = *((_QWORD *)a2 + 3) + 1;
    else
      v20 = 0;
    if (*(_DWORD *)v18)
      v21 = *(_QWORD *)(v18 + 24) + 1;
    else
      v21 = 0;
    if (v20 != v21)
      goto LABEL_43;
    v22 = 0;
    v23 = (uint64_t *)(a2 + 4);
    v24 = (uint64_t *)(v18 + 16);
    v25 = v19 && v19 == *(_DWORD *)v18;
    v26 = !v25;
    v27 = !v26;
    while (1)
    {
      v28 = *v23;
      v29 = *v24;
      if ((v22 & 1) == 0 && !v27)
        break;
      if ((int *)v28 == a2 + 2)
        goto LABEL_42;
      if (*(_DWORD *)(v28 + 16) != *(_DWORD *)(v29 + 16))
        goto LABEL_43;
      v23 = (uint64_t *)(v28 + 8);
      v24 = (uint64_t *)(v29 + 8);
      v22 = 1;
    }
    if (v19)
      goto LABEL_43;
LABEL_42:
    if (*((float *)a2 + 8) != *(float *)(v18 + 32))
LABEL_43:
      a1 &= ~0x100000000uLL;
  }
  v30 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  v31 = *a3;
  if (*a3)
    v32 = *((_QWORD *)a3 + 3) + 1;
  else
    v32 = 0;
  if (*(_DWORD *)v30)
    v33 = *(_QWORD *)(v30 + 24) + 1;
  else
    v33 = 0;
  if (v32 != v33)
    goto LABEL_65;
  v34 = 0;
  v35 = (uint64_t *)(a3 + 4);
  v36 = (uint64_t *)(v30 + 16);
  v37 = v31 && v31 == *(_DWORD *)v30;
  v38 = !v37;
  v39 = !v38;
  while (1)
  {
    v40 = *v35;
    v41 = *v36;
    if ((v34 & 1) == 0 && !v39)
      break;
    if ((int *)v40 == a3 + 2)
      goto LABEL_64;
    if (*(_DWORD *)(v40 + 16) != *(_DWORD *)(v41 + 16))
      goto LABEL_65;
    v35 = (uint64_t *)(v40 + 8);
    v36 = (uint64_t *)(v41 + 8);
    v34 = 1;
  }
  if (v31)
    goto LABEL_65;
LABEL_64:
  if (*((float *)a3 + 8) != *(float *)(v30 + 32))
  {
LABEL_65:
    v42 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
    v43 = *a3;
    if (*a3)
      v44 = *((_QWORD *)a3 + 3) + 1;
    else
      v44 = 0;
    if (*(_DWORD *)v42)
      v45 = *(_QWORD *)(v42 + 24) + 1;
    else
      v45 = 0;
    if (v44 != v45)
      goto LABEL_86;
    v46 = 0;
    v47 = (uint64_t *)(a3 + 4);
    v48 = (uint64_t *)(v42 + 16);
    v49 = v43 && v43 == *(_DWORD *)v42;
    v50 = !v49;
    v51 = !v50;
    while (1)
    {
      v52 = *v47;
      v53 = *v48;
      if ((v46 & 1) == 0 && !v51)
        break;
      if ((int *)v52 == a3 + 2)
        goto LABEL_85;
      if (*(_DWORD *)(v52 + 16) != *(_DWORD *)(v53 + 16))
        goto LABEL_86;
      v47 = (uint64_t *)(v52 + 8);
      v48 = (uint64_t *)(v53 + 8);
      v46 = 1;
    }
    if (v43)
      goto LABEL_86;
LABEL_85:
    if (*((float *)a3 + 8) != *(float *)(v42 + 32))
LABEL_86:
      a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddArc(_QWORD *a1, int a2, int *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 56))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 56);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(v8, a2, a3, v7);
  return fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), a3);
}

uint64_t fst::AddArcProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(unint64_t a1, int a2, int *a3, _DWORD *a4)
{
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v6 = *a3;
  v7 = a3[1];
  v8 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*a3 == v7)
    v8 = a1;
  v9 = v8 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v7)
    v9 = v8 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  if (!v6)
    v8 = v9;
  if (v7)
    v10 = v8;
  else
    v10 = v8 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  if (a4)
  {
    if (*a4 <= v6)
      v11 = v10;
    else
      v11 = v10 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    if (a4[1] > v7)
      v10 = v11 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    else
      v10 = v11;
  }
  v12 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  v13 = a3[2];
  if (v13)
    v14 = *((_QWORD *)a3 + 4) + 1;
  else
    v14 = 0;
  if (*(_DWORD *)v12)
    v15 = *(_QWORD *)(v12 + 24) + 1;
  else
    v15 = 0;
  if (v14 != v15)
    goto LABEL_38;
  v16 = 0;
  v17 = (uint64_t *)(a3 + 6);
  v18 = (uint64_t *)(v12 + 16);
  v19 = v13 && v13 == *(_DWORD *)v12;
  v20 = !v19;
  v21 = !v20;
  while (1)
  {
    v22 = *v17;
    v23 = *v18;
    if ((v16 & 1) == 0 && !v21)
      break;
    if ((int *)v22 == a3 + 4)
      goto LABEL_37;
    if (*(_DWORD *)(v22 + 16) != *(_DWORD *)(v23 + 16))
      goto LABEL_38;
    v17 = (uint64_t *)(v22 + 8);
    v18 = (uint64_t *)(v23 + 8);
    v16 = 1;
  }
  if (v13)
    goto LABEL_38;
LABEL_37:
  if (*((float *)a3 + 10) != *(float *)(v12 + 32))
  {
LABEL_38:
    v24 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
    v25 = a3[2];
    if (v25)
      v26 = *((_QWORD *)a3 + 4) + 1;
    else
      v26 = 0;
    if (*(_DWORD *)v24)
      v27 = *(_QWORD *)(v24 + 24) + 1;
    else
      v27 = 0;
    if (v26 != v27)
      goto LABEL_59;
    v28 = 0;
    v29 = (uint64_t *)(a3 + 6);
    v30 = (uint64_t *)(v24 + 16);
    v31 = v25 && v25 == *(_DWORD *)v24;
    v32 = !v31;
    v33 = !v32;
    while (1)
    {
      v34 = *v29;
      v35 = *v30;
      if ((v28 & 1) == 0 && !v33)
        break;
      if ((int *)v34 == a3 + 4)
        goto LABEL_58;
      if (*(_DWORD *)(v34 + 16) != *(_DWORD *)(v35 + 16))
        goto LABEL_59;
      v29 = (uint64_t *)(v34 + 8);
      v30 = (uint64_t *)(v35 + 8);
      v28 = 1;
    }
    if (v25)
      goto LABEL_59;
LABEL_58:
    if (*((float *)a3 + 10) != *(float *)(v24 + 32))
LABEL_59:
      v10 = v10 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (a3[12] <= a2)
    v36 = v10 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  else
    v36 = v10;
  if ((v36 & 0x4000000000) != 0)
    return v36 & 0x5D7FFEB0007 | 0x2800000000;
  else
    return v36 & 0x5D7FFEB0007;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  int64x2_t v32;
  int64x2_t v33;
  std::vector<int>::value_type __x;
  std::vector<int> v35;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v35, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v35.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v35.__begin_[v12] == -1)
      {
        fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(_QWORD *)(v11 + 8 * v12));
      }
      else
      {
        v35.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v17 = *(int64x2_t *)(v16 + 40);
      v18 = *(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56);
      if (v18)
        v19 = *(_QWORD *)(v16 + 56);
      else
        v19 = 0;
      if (v18)
      {
        v20 = 0;
        v21 = 0;
        v22 = (int *)(v19 + 48);
        v23 = v19 + 16;
        do
        {
          v24 = v35.__begin_[*v22];
          if (v24 == -1)
          {
            v27 = *((_QWORD *)v22 - 6);
            v28.i64[0] = v27;
            v28.i64[1] = HIDWORD(v27);
            v17 = vaddq_s64(v17, vceqzq_s64(v28));
          }
          else
          {
            *v22 = v24;
            if (v20 != v21)
            {
              v32 = v17;
              v25 = v19 + 56 * v21;
              *(_QWORD *)v25 = *((_QWORD *)v22 - 6);
              *(_DWORD *)(v25 + 8) = *(v22 - 10);
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v25 + 16), *((_QWORD *)v22 - 3), v23);
              v26 = v19 + 56 * v21;
              *(_DWORD *)(v26 + 40) = *(v22 - 2);
              *(_DWORD *)(v26 + 48) = *v22;
              v14 = *v4;
              v17 = v32;
            }
            ++v21;
          }
          ++v20;
          v16 = *(_QWORD *)(v14 + 8 * v15);
          v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56)) >> 3);
          v22 += 14;
          v23 += 56;
        }
        while (v20 < v29);
        v33 = v17;
      }
      else
      {
        v33 = *(int64x2_t *)(v16 + 40);
        v21 = 0;
        v29 = 0;
      }
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs((_QWORD *)v16, v29 - v21);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 40) = v33;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v30 = *(int *)(a1 + 88);
  if ((_DWORD)v30 == -1)
  {
    v31 = v35.__begin_;
    if (!v35.__begin_)
      return;
  }
  else
  {
    v31 = v35.__begin_;
    *(_DWORD *)(a1 + 88) = v35.__begin_[v30];
  }
  v35.__end_ = v31;
  operator delete(v31);
}

void sub_1ADBBA1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = result[8] - 56;
    do
    {
      if (!*(_DWORD *)v4)
        --v3[5];
      if (!*(_DWORD *)(v4 + 4))
        --v3[6];
      result = std::__list_imp<char *>::clear((_QWORD *)(v4 + 16));
      v3[8] = v4;
      v4 -= 56;
      --v2;
    }
    while (v2);
  }
  return result;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2 != *(_QWORD *)(a1 + 64))
  {
    v3 = 0;
    v2 = *(_QWORD *)(a1 + 64);
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(_QWORD *)(v2 + 8 * v3++));
      v2 = *(_QWORD *)(a1 + 64);
    }
    while (v3 < (*(_QWORD *)(a1 + 72) - v2) >> 3);
  }
  *(_QWORD *)(a1 + 72) = v2;
  *(_DWORD *)(a1 + 88) = -1;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteArcs(_QWORD *a1, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(_QWORD **)(a1[8] + 8 * a2);
  v3[5] = 0;
  v3[6] = 0;
  v5 = v3[7];
  v4 = v3[8];
  if (v4 != v5)
  {
    do
    {
      v6 = v4 - 56;
      std::__list_imp<char *>::clear((_QWORD *)(v4 - 40));
      v4 = v6;
    }
    while (v6 != v5);
  }
  v3[8] = v5;
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)
                                                             - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 56 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::SetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  BOOL v34;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t result;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t *v51;
  BOOL v52;
  _BOOL4 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t *v62;
  BOOL v63;
  _BOOL4 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
  v6 = (int *)(v5 + 56 * v4);
  v7 = *v6;
  v8 = v6[1];
  if (*v6 != v8)
    **(_QWORD **)(a1 + 16) &= ~0x20000uLL;
  if (v7)
  {
    if (!v8)
    {
      v9 = *(unint64_t **)(a1 + 16);
      v10 = *v9;
LABEL_8:
      *v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    v9 = *(unint64_t **)(a1 + 16);
    v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      *v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  v12 = v5 + 56 * v4;
  v13 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  v16 = *(_DWORD *)(v12 + 8);
  v15 = (int *)(v12 + 8);
  v14 = v16;
  if (v16)
    v17 = *((_QWORD *)v15 + 3) + 1;
  else
    v17 = 0;
  if (*(_DWORD *)v13)
    v18 = *(_QWORD *)(v13 + 24) + 1;
  else
    v18 = 0;
  if (v17 != v18)
    goto LABEL_30;
  v19 = 0;
  v20 = (uint64_t *)(v15 + 4);
  v21 = (uint64_t *)(v13 + 16);
  v22 = v14 && v14 == *(_DWORD *)v13;
  v23 = !v22;
  v24 = !v23;
  while (1)
  {
    v25 = *v20;
    v26 = *v21;
    if ((v19 & 1) == 0 && !v24)
      break;
    if ((int *)v25 == v15 + 2)
      goto LABEL_29;
    if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v26 + 16))
      goto LABEL_30;
    v20 = (uint64_t *)(v25 + 8);
    v21 = (uint64_t *)(v26 + 8);
    v19 = 1;
  }
  if (v14)
    goto LABEL_30;
LABEL_29:
  if (*((float *)v15 + 8) != *(float *)(v13 + 32))
  {
LABEL_30:
    v27 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
    v28 = *v15;
    if (*v15)
      v29 = *((_QWORD *)v15 + 3) + 1;
    else
      v29 = 0;
    if (*(_DWORD *)v27)
      v30 = *(_QWORD *)(v27 + 24) + 1;
    else
      v30 = 0;
    if (v29 != v30)
      goto LABEL_51;
    v31 = 0;
    v32 = (uint64_t *)(v15 + 4);
    v33 = (uint64_t *)(v27 + 16);
    v34 = v28 && v28 == *(_DWORD *)v27;
    v35 = !v34;
    v36 = !v35;
    while (1)
    {
      v37 = *v32;
      v38 = *v33;
      if ((v31 & 1) == 0 && !v36)
        break;
      if ((int *)v37 == v15 + 2)
        goto LABEL_50;
      if (*(_DWORD *)(v37 + 16) != *(_DWORD *)(v38 + 16))
        goto LABEL_51;
      v32 = (uint64_t *)(v37 + 8);
      v33 = (uint64_t *)(v38 + 8);
      v31 = 1;
    }
    if (v28)
      goto LABEL_51;
LABEL_50:
    if (*((float *)v15 + 8) != *(float *)(v27 + 32))
LABEL_51:
      **(_QWORD **)(a1 + 16) &= ~0x100000000uLL;
  }
  v39 = 0x30FC30007;
  if (*(_DWORD *)a2 == *v6 && *(_DWORD *)(a2 + 4) == v6[1] && *(_DWORD *)(a2 + 48) == *(_DWORD *)(v5 + 56 * v4 + 48))
    v39 = 0x3FFFFFFF0007;
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArc(*(uint64_t **)(a1 + 8), a2, *(_QWORD *)(a1 + 24));
  v40 = *(_DWORD *)a2;
  v41 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v41)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v40)
  {
    if (!v41)
    {
      v42 = *(unint64_t **)(a1 + 16);
      v43 = *v42;
LABEL_63:
      *v42 = v43 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    v42 = *(unint64_t **)(a1 + 16);
    v44 = *v42 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v42 = v44;
    if (!v41)
    {
      v43 = v44 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v42 = v43;
      goto LABEL_63;
    }
  }
  result = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  v46 = *(_DWORD *)(a2 + 8);
  if (v46)
    v47 = *(_QWORD *)(a2 + 32) + 1;
  else
    v47 = 0;
  if (*(_DWORD *)result)
    v48 = *(_QWORD *)(result + 24) + 1;
  else
    v48 = 0;
  if (v47 != v48)
    goto LABEL_85;
  v49 = 0;
  v50 = (uint64_t *)(a2 + 24);
  v51 = (uint64_t *)(result + 16);
  v52 = v46 && v46 == *(_DWORD *)result;
  v53 = !v52;
  v54 = !v53;
  while (1)
  {
    v55 = *v50;
    v56 = *v51;
    if ((v49 & 1) == 0 && !v54)
      break;
    if (v55 == a2 + 16)
      goto LABEL_84;
    if (*(_DWORD *)(v55 + 16) != *(_DWORD *)(v56 + 16))
      goto LABEL_85;
    v50 = (uint64_t *)(v55 + 8);
    v51 = (uint64_t *)(v56 + 8);
    v49 = 1;
  }
  if (v46)
    goto LABEL_85;
LABEL_84:
  if (*(float *)(a2 + 40) != *(float *)(result + 32))
  {
LABEL_85:
    result = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
    v57 = *(_DWORD *)(a2 + 8);
    if (v57)
      v58 = *(_QWORD *)(a2 + 32) + 1;
    else
      v58 = 0;
    if (*(_DWORD *)result)
      v59 = *(_QWORD *)(result + 24) + 1;
    else
      v59 = 0;
    if (v58 != v59)
      goto LABEL_106;
    v60 = 0;
    v61 = (uint64_t *)(a2 + 24);
    v62 = (uint64_t *)(result + 16);
    v63 = v57 && v57 == *(_DWORD *)result;
    v64 = !v63;
    v65 = !v64;
    while (1)
    {
      v66 = *v61;
      v67 = *v62;
      if ((v60 & 1) == 0 && !v65)
        break;
      if (v66 == a2 + 16)
        goto LABEL_105;
      if (*(_DWORD *)(v66 + 16) != *(_DWORD *)(v67 + 16))
        goto LABEL_106;
      v61 = (uint64_t *)(v66 + 8);
      v62 = (uint64_t *)(v67 + 8);
      v60 = 1;
    }
    if (v57)
      goto LABEL_106;
LABEL_105:
    if (*(float *)(a2 + 40) != *(float *)(result + 32))
LABEL_106:
      **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(_QWORD **)(a1 + 16) &= v39;
  return result;
}

uint64_t *fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArc(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  v5 = result[7];
  v6 = (_DWORD *)(v5 + 56 * a3);
  if (!*v6)
    --result[5];
  if (!*(_DWORD *)(v5 + 56 * a3 + 4))
    --result[6];
  if (!*(_DWORD *)a2)
    ++result[5];
  if (!*(_DWORD *)(a2 + 4))
    ++result[6];
  *(_QWORD *)v6 = *(_QWORD *)a2;
  *(_DWORD *)(v5 + 56 * a3 + 8) = *(_DWORD *)(a2 + 8);
  if (v6 != (_DWORD *)a2)
    result = std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v5 + 56 * a3 + 16), *(_QWORD *)(a2 + 24), a2 + 16);
  v7 = v5 + 56 * a3;
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v7 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  unsigned int v11;
  int v12;
  fst *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  _QWORD v19[3];
  int v20;
  void *__p[2];
  char v22;
  char v23;
  _QWORD v24[2];
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  _QWORD v29[3];
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 288))(a2, 0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result == -1)
  {
    if ((v5 & 4) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1) != 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 248))(a2, v7);
  }
  LODWORD(v29[0]) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v27);
  while (!v27)
  {
    if (SLODWORD(v29[0]) >= v28)
      goto LABEL_14;
LABEL_9:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
    else
      ++LODWORD(v29[0]);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27))
    goto LABEL_9;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
LABEL_14:
  v38 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v36);
  while (2)
  {
    if (!v36)
    {
      if ((int)v38 >= v37)
        goto LABEL_53;
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36))
    {
      if (v36)
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
        goto LABEL_21;
      }
LABEL_20:
      v8 = v38;
LABEL_21:
      if ((_DWORD)v8 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v8);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 256))(a2, v8, v9);
      v35 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v8, &v31);
LABEL_24:
      if (v31)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31))
        {
          if (v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            goto LABEL_37;
          }
LABEL_35:
          if (v34)
            --*v34;
LABEL_37:
          *(float *)&v11 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v8);
          v31 = 0;
          v32 = v11 | 0xFFFFFFFF00000000;
          fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((float *)&v31, (uint64_t)&v27);
          if (v27)
          {
            v12 = FLAGS_fst_error_fatal;
            if (FLAGS_fst_error_fatal)
            {
              std::string::basic_string[abi:ne180100]<0>(v24, "FATAL");
              v13 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)v24);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
              v13 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)__p);
            }
            v14 = (_QWORD *)fst::cerr(v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
            if (v12)
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
              if (v25 < 0)
              {
                v15 = (void *)v24[0];
                goto LABEL_46;
              }
            }
            else
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
              if (v22 < 0)
              {
                v15 = __p[0];
LABEL_46:
                operator delete(v15);
              }
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
          }
          v18 = v28;
          std::list<int>::list(v19, (uint64_t)v29);
          v20 = v30;
          (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 184))(a2, v8, &v18);
          std::__list_imp<char *>::clear(v19);
          std::__list_imp<char *>::clear(v29);
          if (v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
          else
            ++v38;
          continue;
        }
        if (v31)
        {
          v10 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
          goto LABEL_30;
        }
      }
      else if (v35 >= v33)
      {
        goto LABEL_35;
      }
      v10 = (float *)(v32 + 16 * v35);
LABEL_30:
      fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()(v10, (uint64_t)&v27);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 208))(a2, v8, &v27);
      std::__list_imp<char *>::clear(v29);
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
      else
        ++v35;
      goto LABEL_24;
    }
    break;
  }
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
LABEL_53:
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v17 = fst::ProjectProperties(v5, 1);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v17 & 0x3FFCFFFF0007 | v16, 0x3FFFFFFF0007);
}

void sub_1ADBBAE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a24);
  if (a20 < 0)
    operator delete(__p);
  std::__list_imp<char *>::clear(v35);
  v38 = *(_QWORD *)(v36 - 112);
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  _Unwind_Resume(a1);
}

_QWORD *fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()@<X0>(float *a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  float v5;
  int v6;
  uint64_t *v7;
  int *v8;
  _DWORD *v9;
  int *v10;
  int v11;
  int *v12;
  int v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];
  int v18;
  int v19;
  _QWORD v20[3];
  int v21;
  _DWORD v22[8];
  int v23;
  _QWORD v24[3];
  int v25;
  int v26;
  _QWORD v27[3];
  int v28;
  _DWORD v29[9];
  float v30;

  if (*((_DWORD *)a1 + 3) == -1)
  {
    v30 = 0.0;
    v30 = a1[2];
    v29[8] = 2139095040;
    if (v30 == INFINITY)
    {
      v12 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      v23 = *v12;
      v7 = v24;
      std::list<int>::list(v24, (uint64_t)(v12 + 2));
      v25 = v12[8];
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = v23;
      std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v24);
      *(_DWORD *)(a2 + 40) = v25;
      *(_DWORD *)(a2 + 48) = -1;
      return std::__list_imp<char *>::clear(v7);
    }
    v8 = (int *)fst::StringWeight<int,(fst::StringType)1>::One();
    v26 = *v8;
    v7 = v27;
    std::list<int>::list(v27, (uint64_t)(v8 + 2));
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v28, &v26, a1[2]);
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = v28;
    v9 = v29;
    std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v29);
    *(_DWORD *)(a2 + 40) = v29[6];
    *(_DWORD *)(a2 + 48) = -1;
    goto LABEL_7;
  }
  v5 = *a1;
  v4 = *((_DWORD *)a1 + 1);
  if (!v4)
  {
    v10 = (int *)fst::StringWeight<int,(fst::StringType)1>::One();
    v19 = *v10;
    v7 = v20;
    std::list<int>::list(v20, (uint64_t)(v10 + 2));
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v21, &v19, a1[2]);
    v11 = *((_DWORD *)a1 + 3);
    *(float *)a2 = v5;
    *(float *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v21;
    v9 = v22;
    std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v22);
    *(_DWORD *)(a2 + 40) = v22[6];
    *(_DWORD *)(a2 + 48) = v11;
LABEL_7:
    std::__list_imp<char *>::clear(v9);
    return std::__list_imp<char *>::clear(v7);
  }
  fst::StringWeight<int,(fst::StringType)1>::StringWeight((uint64_t)&v14, v4);
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v16, &v14, a1[2]);
  v6 = *((_DWORD *)a1 + 3);
  *(float *)a2 = v5;
  *(float *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v16;
  std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v17);
  *(_DWORD *)(a2 + 40) = v18;
  *(_DWORD *)(a2 + 48) = v6;
  std::__list_imp<char *>::clear(v17);
  v7 = &v15;
  return std::__list_imp<char *>::clear(v7);
}

void sub_1ADBBB1A8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _QWORD v13[3];
  int v14;
  char v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];

  v13[0] = a1;
  v13[1] = a2;
  v13[2] = *(_QWORD *)a3;
  v14 = *(_DWORD *)(a3 + 16);
  v15 = *(_BYTE *)(a3 + 20);
  v16 = 0;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  memset(v20, 0, 29);
  v6 = *a2;
  v5 = a2[1];
  if (v5 != *a2)
  {
    do
    {
      v7 = v5 - 40;
      std::__list_imp<char *>::clear((_QWORD *)(v5 - 32));
      v5 = v7;
    }
    while (v7 != v6);
  }
  a2[1] = v6;
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::ShortestDistance(v13, *(_DWORD *)(a3 + 12));
  if (BYTE12(v20[1]))
  {
    v9 = *a2;
    v8 = a2[1];
    if (v8 != *a2)
    {
      do
      {
        v10 = v8 - 40;
        std::__list_imp<char *>::clear((_QWORD *)(v8 - 32));
        v8 = v10;
      }
      while (v10 != v9);
    }
    a2[1] = v9;
    v11 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::NoWeight();
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::resize(a2, 1uLL, v11);
  }
  return fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)v13);
}

void sub_1ADBBB2D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t i;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  int *v35;
  unint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  int v42;
  uint64_t v43;
  int v44;
  int *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t *v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  _BOOL4 v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char v59;
  float v60;
  void **v62;
  int v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v71;
  unsigned int v72;
  char v73[8];
  uint64_t v74[4];
  float v75;
  _QWORD v76[3];
  float v77;
  uint64_t v78;
  uint64_t v79[4];
  int v80;
  uint64_t v81[3];
  float v82;
  float v83;
  uint64_t v84[3];
  float v85;
  void *__p;
  _DWORD *v87;
  unint64_t v88;
  _DWORD *v89;
  unint64_t v90;
  int v91;
  _QWORD v92[3];
  float v93;
  int v94;
  _QWORD v95[3];
  int v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _DWORD *v103;
  unint64_t v104;
  void **p_p;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  float v109;
  float v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114[4];

  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
    (*(void (**)(uint64_t *, _QWORD))(*a2 + 248))(a2, (v8 + 1));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v10 = 0;
  v112 = 0;
  v72 = v9;
  if ((a3 & 1) != 0)
    goto LABEL_95;
  LODWORD(v102) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v100);
  for (i = 0xFFFFFFFFLL; ; i = v14)
  {
    if (v100)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 16))(v100);
      v13 = v100;
      if ((v12 & 1) != 0)
        goto LABEL_39;
      if (v100)
      {
        v14 = (*(uint64_t (**)(void))(*(_QWORD *)v100 + 24))();
        goto LABEL_11;
      }
    }
    else if ((int)v102 >= (int)v101)
    {
      goto LABEL_41;
    }
    v14 = v102;
LABEL_11:
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&p_p, a1, v14);
    v15 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    v16 = (_DWORD)p_p ? (uint64_t)v108 + 1 : 0;
    v17 = *(_DWORD *)v15 ? *(_QWORD *)(v15 + 24) + 1 : 0;
    if (v16 != v17)
      break;
    v18 = 0;
    v19 = v107;
    v20 = (uint64_t *)(v15 + 16);
    if ((_DWORD)p_p)
      v21 = (_DWORD)p_p == *(_DWORD *)v15;
    else
      v21 = 0;
    v22 = !v21;
    while (1)
    {
      v23 = *v20;
      if ((v18 & 1) == 0 && v22 == 1)
        break;
      if ((uint64_t *)v19 == &v106)
        goto LABEL_36;
      if (*(_DWORD *)(v19 + 16) != *(_DWORD *)(v23 + 16))
        goto LABEL_30;
      v19 = *(_QWORD *)(v19 + 8);
      v20 = (uint64_t *)(v23 + 8);
      v18 = 1;
    }
    if ((_DWORD)p_p)
      break;
LABEL_36:
    *(float *)&__p = v109;
    v83 = 0.0;
    v83 = *(float *)(v15 + 32);
    v24 = v109;
    std::__list_imp<char *>::clear(&v106);
    if (v24 != v83)
      goto LABEL_31;
    v14 = i;
LABEL_32:
    if (v100)
      (*(void (**)(uint64_t))(*(_QWORD *)v100 + 32))(v100);
    else
      LODWORD(v102) = v102 + 1;
  }
LABEL_30:
  std::__list_imp<char *>::clear(&v106);
LABEL_31:
  if ((_DWORD)i == -1)
    goto LABEL_32;
  i = 0xFFFFFFFFLL;
  v13 = v100;
LABEL_39:
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_41:
  if ((_DWORD)i != -1)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&p_p, a1, i);
    v25 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
    if ((_DWORD)p_p)
      v26 = (char *)v108 + 1;
    else
      v26 = 0;
    if (*(_DWORD *)v25)
      v27 = *(_QWORD *)(v25 + 24) + 1;
    else
      v27 = 0;
    if (v26 != (char *)v27)
      goto LABEL_63;
    v28 = 0;
    v29 = v107;
    v30 = (uint64_t *)(v25 + 16);
    v31 = (_DWORD)p_p && (_DWORD)p_p == *(_DWORD *)v25;
    v32 = !v31;
    v33 = !v32;
    while (1)
    {
      v34 = *v30;
      if ((v28 & 1) == 0 && !v33)
        break;
      if ((uint64_t *)v29 == &v106)
        goto LABEL_80;
      if (*(_DWORD *)(v29 + 16) != *(_DWORD *)(v34 + 16))
        goto LABEL_63;
      v29 = *(_QWORD *)(v29 + 8);
      v30 = (uint64_t *)(v34 + 8);
      v28 = 1;
    }
    if (!(_DWORD)p_p)
    {
LABEL_80:
      *(float *)&v100 = v109;
      LODWORD(__p) = 0;
      LODWORD(__p) = *(_DWORD *)(v25 + 32);
      v41 = v109;
      std::__list_imp<char *>::clear(&v106);
      if (v41 == *(float *)&__p)
      {
        v42 = 0;
        v71 = 0;
        goto LABEL_96;
      }
    }
    else
    {
LABEL_63:
      std::__list_imp<char *>::clear(&v106);
    }
    __p = 0;
    v87 = 0;
    v88 = 0;
    p_p = &__p;
    v106 = 0;
    v107 = 0;
    v108 = &v112;
    fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a1, (uint64_t *)&p_p, 0);
    v35 = (int *)__p;
    if (__p != v87)
    {
      v36 = 0;
      do
      {
        v37 = *v35++;
        if (v37 == *((_DWORD *)__p + (int)i))
          ++v36;
      }
      while (v35 != v87);
      if (v36 > 1)
        goto LABEL_90;
    }
    v104 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, i, &v100);
    while (2)
    {
      while (2)
      {
        if (v100)
        {
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 24))(v100);
          v39 = v100;
          if ((v38 & 1) != 0)
            goto LABEL_84;
          if (v100)
          {
            v40 = (*(uint64_t (**)(void))(*(_QWORD *)v100 + 32))();
            v39 = v100;
            if (*(_DWORD *)(v40 + 48) == (_DWORD)i)
            {
              i = 0xFFFFFFFFLL;
LABEL_84:
              if (v39)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
                goto LABEL_88;
              }
LABEL_86:
              if (v103)
                --*v103;
LABEL_88:
              if ((_DWORD)i != -1)
              {
                v10 = 0x2000000000;
                goto LABEL_91;
              }
LABEL_90:
              v10 = 0;
              i = 0xFFFFFFFFLL;
LABEL_91:
              if (__p)
              {
                v87 = __p;
                operator delete(__p);
              }
              if ((_DWORD)i != -1)
              {
                v71 = v10;
                v42 = 0;
                goto LABEL_96;
              }
              goto LABEL_95;
            }
            if (v100)
            {
              (*(void (**)(void))(*(_QWORD *)v100 + 40))();
              continue;
            }
            goto LABEL_79;
          }
        }
        else if (v104 >= v102)
        {
          goto LABEL_86;
        }
        break;
      }
      if (*(_DWORD *)(v101 + 56 * v104 + 48) == (_DWORD)i)
      {
        i = 0xFFFFFFFFLL;
        goto LABEL_86;
      }
LABEL_79:
      ++v104;
      continue;
    }
  }
  v10 = 0;
LABEL_95:
  v71 = v10;
  i = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
  v42 = 1;
LABEL_96:
  v99 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v97);
  while (2)
  {
    if (!v97)
    {
      if ((int)v99 >= v98)
        goto LABEL_165;
      goto LABEL_102;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 16))(v97))
    {
      if (v97)
      {
        v43 = (*(uint64_t (**)(void))(*(_QWORD *)v97 + 24))();
LABEL_103:
        v44 = v43 + v42;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v44)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if ((_DWORD)v43 == v72)
        {
          v45 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
          v94 = *v45;
          std::list<int>::list(v95, (uint64_t)(v45 + 2));
          v96 = v45[8];
          (*(void (**)(uint64_t *, _QWORD, int *))(*a2 + 184))(a2, (v43 + v42), &v94);
          std::__list_imp<char *>::clear(v95);
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v100, a1, v43);
        v46 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
        if ((_DWORD)v100)
          v47 = (char *)v103 + 1;
        else
          v47 = 0;
        if (*(_DWORD *)v46)
          v48 = *(_QWORD *)(v46 + 24) + 1;
        else
          v48 = 0;
        if (v47 == (char *)v48)
        {
          v49 = 0;
          v50 = v102;
          v51 = (uint64_t *)(v46 + 16);
          if ((_DWORD)v100)
            v52 = (_DWORD)v100 == *(_DWORD *)v46;
          else
            v52 = 0;
          v53 = !v52;
          while (1)
          {
            v54 = *v51;
            if ((v49 & 1) == 0 && v53 == 1)
              break;
            if ((uint64_t *)v50 == &v101)
              goto LABEL_128;
            if (*(_DWORD *)(v50 + 16) != *(_DWORD *)(v54 + 16))
              goto LABEL_127;
            v50 = *(_QWORD *)(v50 + 8);
            v51 = (uint64_t *)(v54 + 8);
            v49 = 1;
          }
          if ((_DWORD)v100)
            goto LABEL_127;
LABEL_128:
          LODWORD(p_p) = v104;
          LODWORD(__p) = 0;
          LODWORD(__p) = *(_DWORD *)(v46 + 32);
          v55 = *(float *)&v104 != *(float *)&__p;
        }
        else
        {
LABEL_127:
          v55 = 1;
        }
        if ((v42 & v55) == 1)
        {
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Reverse(&v100, (uint64_t)&v91);
          p_p = 0;
          LODWORD(v106) = v91;
          std::list<int>::list(&v107, (uint64_t)v92);
          v110 = v93;
          v111 = v43 + v42;
          std::__list_imp<char *>::clear(v92);
          (*(void (**)(uint64_t *, _QWORD, void ***))(*a2 + 208))(a2, 0, &p_p);
          std::__list_imp<char *>::clear(&v107);
        }
        v90 = 0;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v43, &__p);
LABEL_132:
        if (__p)
        {
          if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
          {
            if (__p)
            {
              (*(void (**)(void))(*(_QWORD *)__p + 8))();
              goto LABEL_160;
            }
LABEL_158:
            if (v89)
              --*v89;
LABEL_160:
            std::__list_imp<char *>::clear(&v101);
            if (v97)
              (*(void (**)(uint64_t))(*(_QWORD *)v97 + 32))(v97);
            else
              ++v99;
            continue;
          }
          if (__p)
          {
            v56 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
LABEL_138:
            v57 = *(_DWORD *)(v56 + 48);
            fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Reverse((_DWORD *)(v56 + 8), (uint64_t)&v83);
            v58 = (v57 + v42);
            if ((_DWORD)v58 == (_DWORD)i)
              v59 = v42;
            else
              v59 = 1;
            if ((v59 & 1) == 0)
            {
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v78, a1, i);
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Reverse(&v78, (uint64_t)&v80);
              fst::Times<int,(fst::StringType)0>(&v80, (uint64_t)&v83, (uint64_t)&v113);
              v60 = NAN;
              if (v82 != -INFINITY)
              {
                v60 = NAN;
                if (v85 != -INFINITY)
                {
                  v60 = INFINITY;
                  if (v85 != INFINITY && v82 != INFINITY)
                    v60 = v82 + v85;
                }
              }
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&p_p, &v113, v60);
              std::__list_imp<char *>::clear(v114);
              v83 = *(float *)&p_p;
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v84, v107, (uint64_t)&v106);
              v85 = v109;
              std::__list_imp<char *>::clear(&v106);
              std::__list_imp<char *>::clear(v81);
              std::__list_imp<char *>::clear(v79);
            }
            v62 = *(void ***)v56;
            v75 = v83;
            std::list<int>::list(v76, (uint64_t)v84);
            v77 = v85;
            p_p = v62;
            *(float *)&v106 = v75;
            std::list<int>::list(&v107, (uint64_t)v76);
            v110 = v77;
            v111 = v44;
            std::__list_imp<char *>::clear(v76);
            while (1)
            {
              v63 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              v64 = *a2;
              if (v63 > (int)v58)
                break;
              (*(void (**)(uint64_t *))(v64 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void ***))(v64 + 208))(a2, v58, &p_p);
            std::__list_imp<char *>::clear(&v107);
            std::__list_imp<char *>::clear(v84);
            if (__p)
              (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
            else
              ++v90;
            goto LABEL_132;
          }
        }
        else if (v90 >= v88)
        {
          goto LABEL_158;
        }
        v56 = (uint64_t)&v87[14 * v90];
        goto LABEL_138;
      }
LABEL_102:
      v43 = v99;
      goto LABEL_103;
    }
    break;
  }
  if (v97)
    (*(void (**)(void))(*(_QWORD *)v97 + 8))();
LABEL_165:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, i);
  if ((_DWORD)i == v72)
    v65 = v42;
  else
    v65 = 1;
  if ((v65 & 1) == 0)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(&p_p, a1, v72);
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Reverse(&p_p, (uint64_t)v73);
    (*(void (**)(uint64_t *, _QWORD, char *))(*a2 + 184))(a2, v72, v73);
    std::__list_imp<char *>::clear(v74);
    std::__list_imp<char *>::clear(&v106);
  }
  v66 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  v67 = v112 | v66;
  v68 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0) | v71;
  v69 = fst::ReverseProperties(v67, v42);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v68 | v69, 0x3FFFFFFF0007);
}

void sub_1ADBBBE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistance<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _QWORD v12[3];
  int v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];

  v12[0] = a1;
  v12[1] = a2;
  v12[2] = *(_QWORD *)a3;
  v13 = *(_DWORD *)(a3 + 16);
  v14 = *(_BYTE *)(a3 + 20);
  v15 = 0;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  memset(v19, 0, 29);
  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v6 = v4 - 40;
      std::__list_imp<char *>::clear((_QWORD *)(v4 - 32));
      v4 = v6;
    }
    while (v6 != v5);
  }
  a2[1] = v5;
  fst::ShortestDistanceState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::ShortestDistance(v12);
  if (BYTE12(v19[1]))
  {
    v8 = *a2;
    v7 = a2[1];
    if (v7 != *a2)
    {
      do
      {
        v9 = v7 - 40;
        std::__list_imp<char *>::clear((_QWORD *)(v7 - 32));
        v7 = v9;
      }
      while (v9 != v8);
    }
    a2[1] = v8;
    v10 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::NoWeight();
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::resize(a2, 1uLL, v10);
  }
  return fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)v12);
}

void sub_1ADBBC0AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *result) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
    return std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__append(result, v7, a3);
  if (!v6)
  {
    v8 = *result + 40 * a2;
    if (v4 != v8)
    {
      do
      {
        v9 = v4 - 40;
        result = std::__list_imp<char *>::clear((_QWORD *)(v4 - 32));
        v4 = v9;
      }
      while (v9 != v8);
    }
    v3[1] = v8;
  }
  return result;
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::NoWeight();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::NoWeight(void)::no_weight = v2;
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::NoWeight(void)::no_weight;
}

void sub_1ADBBC1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _QWORD v5[3];
  int v6;

  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1ADBBC274(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D251C0;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  uint64_t v20;
  fst *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  fst *v28;
  _QWORD *v29;
  fst *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  fst *v39;
  _QWORD *v40;
  _QWORD *v41;
  fst *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t result;
  void *__p[2];
  char v48;
  char v49;
  __int16 v50;
  void *v51[3];
  uint64_t v52[2];
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v5 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v6 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v20 = operator new();
    *(_DWORD *)(v20 + 8) = 5;
    *(_BYTE *)(v20 + 12) = 0;
    *(_QWORD *)v20 = &unk_1E5D1EEB0;
    *(_QWORD *)(v20 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v20;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v52, "INFO");
    v21 = fst::LogMessage::LogMessage((fst *)v51, (uint64_t)v52);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"AutoQueue: using state-order discipline", 39);
    goto LABEL_17;
  }
  if ((v6 & 0x800000000) != 0)
  {
    v24 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(v24, a2);
    *(_QWORD *)(a1 + 16) = v24;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v52, "INFO");
    v25 = fst::LogMessage::LogMessage((fst *)v51, (uint64_t)v52);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"AutoQueue: using top-order discipline", 37);
LABEL_17:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v51);
    if (SHIBYTE(v53) < 0)
    {
      v23 = (void *)v52[0];
LABEL_46:
      operator delete(v23);
    }
    return a1;
  }
  v55 = 0;
  v52[0] = (uint64_t)v5;
  v52[1] = 0;
  v53 = 0;
  v54 = &v55;
  fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a2, v52, 0);
  v7 = *(int **)(a1 + 48);
  v8 = *(int **)(a1 + 56);
  if (v7 != v8)
  {
    v9 = v7 + 1;
    if (v7 + 1 != v8)
    {
      v10 = *v7;
      v11 = v7 + 1;
      do
      {
        v13 = *v11++;
        v12 = v13;
        v14 = v10 < v13;
        if (v10 <= v13)
          v10 = v12;
        if (v14)
          v7 = v9;
        v9 = v11;
      }
      while (v11 != v8);
    }
  }
  v15 = *v7;
  v16 = *v7 + 1;
  std::vector<fst::QueueType>::vector(v51, v16);
  v50 = 0;
  fst::AutoQueue<int>::SccQueueType<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>(a2, v5, (uint64_t)v51, 0, &v50, (_BYTE *)&v50 + 1);
  if (HIBYTE(v50))
  {
    v17 = operator new();
    *(_DWORD *)(v17 + 8) = 2;
    *(_BYTE *)(v17 + 12) = 0;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_QWORD *)v17 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v17;
    if (FLAGS_v < 2)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v18 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v19 = (_QWORD *)fst::cerr(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_24:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
    if (v48 < 0)
      operator delete(__p[0]);
LABEL_44:
    v23 = v51[0];
    if (v51[0])
    {
      v51[1] = v51[0];
      goto LABEL_46;
    }
    return a1;
  }
  if ((_BYTE)v50)
  {
    v27 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue(v27, (uint64_t)v5);
    *(_QWORD *)(a1 + 16) = v27;
    if (FLAGS_v < 2)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v28 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"AutoQueue: using top-order discipline", 37);
    goto LABEL_24;
  }
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v30 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v31 = (_QWORD *)fst::cerr(v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
    if (v48 < 0)
      operator delete(__p[0]);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v16);
  if (v15 < 0)
  {
LABEL_43:
    v45 = operator new();
    *(_DWORD *)(v45 + 8) = 6;
    *(_BYTE *)(v45 + 12) = 0;
    *(_QWORD *)v45 = &unk_1E5D22CF0;
    *(_QWORD *)(v45 + 16) = v4;
    *(_QWORD *)(v45 + 24) = v5;
    *(_QWORD *)(v45 + 32) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v45 + 48) = 0;
    *(_QWORD *)(v45 + 56) = 0;
    *(_QWORD *)(v45 + 40) = 0;
    *(_QWORD *)(a1 + 16) = v45;
    goto LABEL_44;
  }
  v32 = 0;
  while (1)
  {
    v33 = *((_DWORD *)v51[0] + v32);
    if (v33)
      break;
    *(_QWORD *)(*v4 + 8 * v32) = 0;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v42 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v43 = (_QWORD *)fst::cerr(v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"AutoQueue: SCC #", 16);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": using trivial discipline", 26);
LABEL_40:
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
      if (v48 < 0)
        operator delete(__p[0]);
    }
LABEL_42:
    if (v16 == ++v32)
      goto LABEL_43;
  }
  if (v33 == 2)
  {
    v38 = operator new();
    *(_DWORD *)(v38 + 8) = 2;
    *(_BYTE *)(v38 + 12) = 0;
    *(_OWORD *)(v38 + 16) = 0u;
    *(_OWORD *)(v38 + 32) = 0u;
    *(_OWORD *)(v38 + 48) = 0u;
    *(_QWORD *)v38 = &unk_1E5D27B60;
    *(_QWORD *)(*v4 + 8 * v32) = v38;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v39 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v40 = (_QWORD *)fst::cerr(v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"AutoQueue: SCC #", 16);
      v41 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": using LIFO disciplle", 22);
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  if (v33 != 3)
  {
    v34 = operator new();
    *(_DWORD *)(v34 + 8) = 1;
    *(_BYTE *)(v34 + 12) = 0;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_QWORD *)v34 = &unk_1E5D23A28;
    *(_QWORD *)(*v4 + 8 * v32) = v34;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v35 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v36 = (_QWORD *)fst::cerr(v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: SCC #", 16);
      v37 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": using FIFO disciplle", 22);
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  result = operator new();
  __break(1u);
  return result;
}

void sub_1ADBBC924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  void **v28;
  void *v30;
  void *v31;

  if (a14 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  v30 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v26 + 56) = v30;
    operator delete(v30);
  }
  v31 = *v27;
  if (*v27)
  {
    *(_QWORD *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  _QWORD v23[3];
  _DWORD *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;

  *a5 = 1;
  *a6 = 1;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    v12 = v11 >> 2;
    if (v12 <= 1)
      v12 = 1;
    bzero(*(void **)a3, 4 * v12);
  }
  v28 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v26);
  while (1)
  {
    result = v26;
    if (!v26)
    {
      if ((int)v28 >= v27)
        return result;
LABEL_11:
      v15 = v28;
      goto LABEL_12;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
    result = v26;
    if (v14)
      break;
    if (!v26)
      goto LABEL_11;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v26 + 24))();
LABEL_12:
    v25 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v15, v23);
    v16 = (int)v15;
    while (1)
    {
      if (!v23[0])
      {
        if (v25 >= v23[2])
          goto LABEL_32;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v23[0] + 24))(v23[0]))
        break;
      if (v23[0])
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v23[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      v17 = v23[1] + 56 * v25;
LABEL_19:
      v18 = *(int *)(*a2 + 4 * v16);
      if ((_DWORD)v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 48)))
      {
        v19 = *(_DWORD **)a3;
        if (!a4
          || (v20 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One(),
              fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::operator()(a4, v17 + 8, v20)))
        {
          v21 = 1;
          goto LABEL_25;
        }
        if ((v19[v18] | 2) == 2)
        {
          v21 = 3;
LABEL_25:
          v19[v18] = v21;
        }
        *a5 = 0;
      }
      *a6 = 0;
      if (v23[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v23[0] + 40))(v23[0]);
      else
        ++v25;
    }
    if (v23[0])
    {
      (*(void (**)(void))(*(_QWORD *)v23[0] + 8))();
      goto LABEL_34;
    }
LABEL_32:
    if (v24)
      --*v24;
LABEL_34:
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
    else
      ++v28;
  }
  if (v26)
    return (*(uint64_t (**)(void))(*(_QWORD *)v26 + 8))();
  return result;
}

void sub_1ADBBCC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::TopOrderVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1ADBBCE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::TopOrderVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 56 * v12[5];
            v18 = *(int *)(v17 + 48);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 48);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 48);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D19990;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADBBD584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19990;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Type()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v2, "right_gallic");
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Type(void)::type = (uint64_t)v2;
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Type(void)::type;
}

void sub_1ADBBD6A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  _BOOL8 v25;
  int v27;
  _QWORD v28[3];
  float v29;
  float v30;
  _QWORD v31[3];
  float v32;

  fst::Plus<int>(a2, a3, (uint64_t)&v30);
  v5 = *(float *)(a2 + 32);
  v6 = *(float *)(a3 + 32);
  if (v5 != INFINITY)
  {
    if (v6 == INFINITY)
    {
      v6 = *(float *)(a2 + 32);
    }
    else if (v5 <= v6)
    {
      v8 = expf(-(float)(v6 - v5));
      v6 = v5 - logf(v8 + 1.0);
    }
    else
    {
      v7 = expf(-(float)(v5 - v6));
      v6 = v6 - logf(v7 + 1.0);
    }
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v27, (int *)&v30, v6);
  std::__list_imp<char *>::clear(v31);
  if (v27)
    v9 = v28[2] + 1;
  else
    v9 = 0;
  v10 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
    v11 = *(_QWORD *)(a2 + 24) + 1;
  else
    v11 = 0;
  if (v9 != v11)
    goto LABEL_42;
  v12 = v28[1];
  v13 = *(_QWORD *)(a2 + 16);
  if (v27)
    v14 = v27 == v10;
  else
    v14 = 0;
  v15 = !v14;
  v16 = *(_QWORD *)(a2 + 16);
  if (v15 != 1)
  {
    while ((_QWORD *)v12 != v28)
    {
      if (*(_DWORD *)(v12 + 16) != *(_DWORD *)(v16 + 16))
        goto LABEL_42;
      v12 = *(_QWORD *)(v12 + 8);
      v16 = *(_QWORD *)(v16 + 8);
    }
  }
  else if (v27)
  {
LABEL_42:
    v25 = 0;
    goto LABEL_43;
  }
  v30 = v29;
  v32 = 0.0;
  v17 = *(float *)(a2 + 32);
  v32 = v17;
  if (v29 != v17)
    goto LABEL_42;
  if (*(_DWORD *)a3)
    v18 = *(_QWORD *)(a3 + 24) + 1;
  else
    v18 = 0;
  if (v9 == v18)
  {
    v19 = 0;
    v20 = (uint64_t *)(a3 + 16);
    if (v10)
      v21 = v10 == *(_DWORD *)a3;
    else
      v21 = 0;
    v22 = !v21;
    v23 = v22 ^ 1;
    while (1)
    {
      v24 = *v20;
      if ((v19 & 1) == 0 && !v23)
        break;
      if (v13 == a2 + 8)
        goto LABEL_46;
      if (*(_DWORD *)(v13 + 16) != *(_DWORD *)(v24 + 16))
        goto LABEL_45;
      v13 = *(_QWORD *)(v13 + 8);
      v20 = (uint64_t *)(v24 + 8);
      v19 = 1;
    }
    if (v10)
      goto LABEL_45;
LABEL_46:
    v30 = v17;
    v32 = 0.0;
    v32 = *(float *)(a3 + 32);
    v25 = v17 != v32;
  }
  else
  {
LABEL_45:
    v25 = 1;
  }
LABEL_43:
  std::__list_imp<char *>::clear(v28);
  return v25;
}

void sub_1ADBBD90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *fst::Plus<int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *result;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  int *v37;
  int v38;
  int v39;

  v3 = a2;
  if (*(_DWORD *)a1 && (*(_DWORD *)a1 == -2 ? (v6 = *(_QWORD *)(a1 + 24) == 0) : (v6 = 0), v6)
    || *(_DWORD *)a2 && (*(_DWORD *)a2 == -2 ? (v7 = *(_QWORD *)(a2 + 24) == 0) : (v7 = 0), v7))
  {
    v3 = fst::StringWeight<int,(fst::StringType)1>::NoWeight();
LABEL_31:
    *(_DWORD *)a3 = *(_DWORD *)v3;
    return std::list<int>::list((_QWORD *)(a3 + 8), v3 + 8);
  }
  v8 = fst::StringWeight<int,(fst::StringType)1>::Zero();
  v9 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
    v10 = *(_QWORD *)(a1 + 24) + 1;
  else
    v10 = 0;
  if (*(_DWORD *)v8)
    v11 = *(_QWORD *)(v8 + 24) + 1;
  else
    v11 = 0;
  if (v10 == v11)
  {
    v12 = 0;
    v13 = (uint64_t *)(a1 + 16);
    v14 = (uint64_t *)(v8 + 16);
    v15 = v9 && v9 == *(_DWORD *)v8;
    v16 = !v15;
    v17 = !v16;
    while (1)
    {
      v18 = *v13;
      v19 = *v14;
      if ((v12 & 1) == 0 && !v17)
        break;
      if (v18 == a1 + 8)
        goto LABEL_31;
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16))
        goto LABEL_33;
      v13 = (uint64_t *)(v18 + 8);
      v14 = (uint64_t *)(v19 + 8);
      v12 = 1;
    }
    if (!v9)
      goto LABEL_31;
  }
LABEL_33:
  result = (_QWORD *)fst::StringWeight<int,(fst::StringType)1>::Zero();
  v21 = *(_DWORD *)v3;
  if (*(_DWORD *)v3)
    v22 = *(_QWORD *)(v3 + 24) + 1;
  else
    v22 = 0;
  if (*(_DWORD *)result)
    v23 = result[3] + 1;
  else
    v23 = 0;
  if (v22 == v23)
  {
    v24 = 0;
    v25 = (uint64_t *)(v3 + 16);
    v26 = result + 2;
    if (v21)
      v27 = v21 == *(_DWORD *)result;
    else
      v27 = 0;
    v28 = !v27;
    v29 = v28 ^ 1;
    while (1)
    {
      v30 = *v25;
      v31 = *v26;
      if ((v24 & 1) == 0 && !v29)
        break;
      if (v30 == v3 + 8)
        goto LABEL_71;
      if (*(_DWORD *)(v30 + 16) != *(_DWORD *)(v31 + 16))
        goto LABEL_53;
      v25 = (uint64_t *)(v30 + 8);
      v26 = (uint64_t *)(v31 + 8);
      v24 = 1;
    }
    if (v21)
      goto LABEL_53;
LABEL_71:
    v3 = a1;
    goto LABEL_31;
  }
LABEL_53:
  *(_QWORD *)(a3 + 8) = a3 + 8;
  *(_QWORD *)(a3 + 16) = a3 + 8;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)a3 = 0;
  if (*(_DWORD *)a1 && v21)
  {
    v32 = (_QWORD *)(v3 + 8);
    v33 = (_QWORD *)(a1 + 8);
    v34 = *(_QWORD **)(a1 + 16);
    do
    {
      v35 = (_DWORD *)a1;
      if (v33 != v34)
        v35 = (_DWORD *)(*v33 + 16);
      v36 = (_DWORD *)v3;
      if (v32 != *(_QWORD **)(v3 + 16))
        v36 = (_DWORD *)(*v32 + 16);
      if (*v35 != *v36)
        break;
      v37 = (int *)a1;
      if (v33 != v34)
        v37 = (int *)(*v33 + 16);
      result = fst::StringWeight<int,(fst::StringType)1>::PushFront((_DWORD *)a3, *v37);
      v34 = *(_QWORD **)(a1 + 16);
      if (v33 == v34)
      {
        v38 = 1;
      }
      else
      {
        v38 = 0;
        v33 = (_QWORD *)*v33;
      }
      if (v32 == *(_QWORD **)(v3 + 16))
      {
        v39 = 1;
      }
      else
      {
        v39 = 0;
        v32 = (_QWORD *)*v32;
      }
    }
    while (!(v38 | v39));
  }
  return result;
}

{
  uint64_t v3;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *result;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v38;
  char v39;
  BOOL v40;
  int *v41;
  int v42;
  _DWORD *v43;

  v3 = a2;
  if (*(_DWORD *)a1 && (*(_DWORD *)a1 == -2 ? (v6 = *(_QWORD *)(a1 + 24) == 0) : (v6 = 0), v6)
    || *(_DWORD *)a2 && (*(_DWORD *)a2 == -2 ? (v7 = *(_QWORD *)(a2 + 24) == 0) : (v7 = 0), v7))
  {
    v3 = fst::StringWeight<int,(fst::StringType)0>::NoWeight();
  }
  else
  {
    v8 = fst::StringWeight<int,(fst::StringType)0>::Zero();
    v9 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
      v10 = *(_QWORD *)(a1 + 24) + 1;
    else
      v10 = 0;
    if (*(_DWORD *)v8)
      v11 = *(_QWORD *)(v8 + 24) + 1;
    else
      v11 = 0;
    if (v10 != v11)
      goto LABEL_33;
    v12 = 0;
    v13 = (uint64_t *)(a1 + 16);
    v14 = (uint64_t *)(v8 + 16);
    v15 = v9 && v9 == *(_DWORD *)v8;
    v16 = !v15;
    v17 = !v16;
    while (1)
    {
      v18 = *v13;
      v19 = *v14;
      if ((v12 & 1) == 0 && !v17)
        break;
      if (v18 == a1 + 8)
        goto LABEL_31;
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16))
        goto LABEL_33;
      v13 = (uint64_t *)(v18 + 8);
      v14 = (uint64_t *)(v19 + 8);
      v12 = 1;
    }
    if (v9)
    {
LABEL_33:
      result = (_QWORD *)fst::StringWeight<int,(fst::StringType)0>::Zero();
      v21 = *(_DWORD *)v3;
      if (*(_DWORD *)v3)
        v22 = *(_QWORD *)(v3 + 24) + 1;
      else
        v22 = 0;
      if (*(_DWORD *)result)
        v23 = result[3] + 1;
      else
        v23 = 0;
      if (v22 == v23)
      {
        v24 = 0;
        v25 = *(_QWORD *)(v3 + 16);
        v26 = result + 2;
        if (v21)
          v27 = v21 == *(_DWORD *)result;
        else
          v27 = 0;
        v28 = !v27;
        v29 = v28 ^ 1;
        v30 = *(_QWORD *)(v3 + 16);
        while (1)
        {
          v31 = *v26;
          if ((v24 & 1) == 0 && !v29)
            break;
          if (v30 == v3 + 8)
            goto LABEL_78;
          if (*(_DWORD *)(v30 + 16) != *(_DWORD *)(v31 + 16))
            goto LABEL_53;
          v30 = *(_QWORD *)(v30 + 8);
          v26 = (uint64_t *)(v31 + 8);
          v24 = 1;
        }
        if (!v21)
        {
LABEL_78:
          v3 = a1;
          goto LABEL_31;
        }
      }
      else
      {
        v25 = *(_QWORD *)(v3 + 16);
      }
LABEL_53:
      v32 = 0;
      *(_QWORD *)(a3 + 8) = a3 + 8;
      *(_QWORD *)(a3 + 16) = a3 + 8;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)a3 = 0;
      v33 = a1 + 8;
      v34 = (uint64_t *)(a1 + 16);
      v35 = v3 + 8;
      while (1)
      {
        v36 = *v34;
        v38 = *v34 == v33 || v25 == v35;
        do
        {
          v39 = v32;
          if ((v32 & 1) != 0)
          {
            if (v38)
              return result;
          }
          else
          {
            if (*(_DWORD *)a1)
              v40 = *(_DWORD *)v3 == 0;
            else
              v40 = 1;
            if (v40)
              return result;
          }
          if ((v32 & 1) != 0)
            v41 = (int *)(v36 + 16);
          else
            v41 = (int *)a1;
          v42 = *v41;
          if ((v39 & 1) != 0)
            v43 = (_DWORD *)(v25 + 16);
          else
            v43 = (_DWORD *)v3;
          if (v42 != *v43)
            return result;
          result = fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a3, v42);
          v32 = 1;
        }
        while ((v39 & 1) == 0);
        v34 = (uint64_t *)(v36 + 8);
        v25 = *(_QWORD *)(v25 + 8);
        v35 = v3 + 8;
        v33 = a1 + 8;
      }
    }
  }
LABEL_31:
  *(_DWORD *)a3 = *(_DWORD *)v3;
  return std::list<int>::list((_QWORD *)(a3 + 8), v3 + 8);
}

void sub_1ADBBDB8C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)1>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::StringWeight<int,(fst::StringType)1>::StringWeight(v2, -2);
    fst::StringWeight<int,(fst::StringType)1>::NoWeight(void)::no_weight = v2;
  }
  return fst::StringWeight<int,(fst::StringType)1>::NoWeight(void)::no_weight;
}

void sub_1ADBBDC18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C40CA22B68ALL);
  _Unwind_Resume(a1);
}

_DWORD *fst::StringWeight<int,(fst::StringType)1>::PushFront(_DWORD *result, int a2)
{
  _DWORD *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = result;
  v4 = *result;
  if (*result)
  {
    result = operator new(0x18uLL);
    result[4] = v4;
    v5 = (_QWORD *)*((_QWORD *)v3 + 2);
    v6 = *((_QWORD *)v3 + 3);
    *(_QWORD *)result = v3 + 2;
    *((_QWORD *)result + 1) = v5;
    *v5 = result;
    *((_QWORD *)v3 + 2) = result;
    *((_QWORD *)v3 + 3) = v6 + 1;
  }
  *v3 = a2;
  return result;
}

void fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::ShortestDistance(_QWORD *a1, int a2)
{
  fst *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *i;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t j;
  _DWORD *v47;
  _DWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t *v60;
  BOOL v61;
  _BOOL4 v62;
  uint64_t v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  unint64_t v74;
  _DWORD *v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  _DWORD *v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  float v105;
  uint64_t v107;
  float v108;
  float v109;
  float v110;
  float v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  float v116;
  uint64_t *v117;
  uint64_t v118;
  BOOL v119;
  int v120;
  uint64_t v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v129;
  float v130;
  uint64_t v131;
  float v132;
  float v133;
  float v134;
  float v135;
  uint64_t v136;
  char v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t *v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  float v150;
  float v151;
  _QWORD v152[3];
  float v153;
  _QWORD v154[3];
  _DWORD *v155;
  unint64_t v156;
  void *__p;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  float v161;
  int v162;
  _QWORD v163[4];

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
      return;
    goto LABEL_212;
  }
  if (*((_BYTE *)a1 + 32))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)v154, (uint64_t)&__p);
    v5 = (_QWORD *)fst::cerr(v4);
    v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ShortestDistance: first_path option disallowed when ", 52);
    v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"Weight does not have the path property: ", 40);
    v140 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Type();
    v141 = *(char *)(v140 + 23);
    if (v141 >= 0)
      v142 = v140;
    else
      v142 = *(_QWORD *)v140;
    if (v141 >= 0)
      v143 = *(unsigned __int8 *)(v140 + 23);
    else
      v143 = *(_QWORD *)(v140 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, v142, v143);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v154);
    if (SHIBYTE(v159) < 0)
      operator delete(__p);
LABEL_212:
    v144 = (char *)a1 + 116;
    goto LABEL_213;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 56))(*(_QWORD *)(a1[2] + 16));
  if (!*((_BYTE *)a1 + 33))
  {
    v6 = (uint64_t *)a1[1];
    v8 = *v6;
    v7 = v6[1];
    if (v7 != *v6)
    {
      do
      {
        v9 = v7 - 40;
        std::__list_imp<char *>::clear((_QWORD *)(v7 - 32));
        v7 = v9;
      }
      while (v9 != v8);
    }
    v6[1] = v8;
    v11 = a1[5];
    v10 = a1[6];
    if (v10 != v11)
    {
      do
      {
        v12 = v10 - 40;
        std::__list_imp<char *>::clear((_QWORD *)(v10 - 32));
        v10 = v12;
      }
      while (v12 != v11);
    }
    a1[6] = v11;
    a1[9] = 0;
  }
  if (a2 == -1)
    a2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v13 = a2;
  v14 = (uint64_t *)a1[1];
  for (i = v14 + 1; 0xCCCCCCCCCCCCCCCDLL * ((v14[1] - *v14) >> 3) <= a2; i = v14 + 1)
  {
    v16 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    v17 = v16;
    v18 = v14[1];
    if (v18 >= v14[2])
    {
      v19 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v14, v16);
    }
    else
    {
      *(_DWORD *)v18 = *v16;
      std::list<int>::list((_QWORD *)(v18 + 8), (uint64_t)(v16 + 2));
      *(_DWORD *)(v18 + 32) = v17[8];
      v19 = v18 + 40;
      *i = v18 + 40;
    }
    *i = v19;
    v20 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    v21 = v20;
    v22 = a1[6];
    if (v22 >= a1[7])
    {
      v23 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(a1 + 5, v20);
    }
    else
    {
      *(_DWORD *)v22 = *v20;
      std::list<int>::list((_QWORD *)(v22 + 8), (uint64_t)(v20 + 2));
      *(_DWORD *)(v22 + 32) = v21[8];
      v23 = v22 + 40;
      a1[6] = v22 + 40;
    }
    a1[6] = v23;
    LOBYTE(__p) = 0;
    std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &__p);
    v14 = (uint64_t *)a1[1];
  }
  if (*((_BYTE *)a1 + 33))
  {
    v24 = (char *)a1[11];
    v25 = (char *)a1[12];
    v26 = (v25 - v24) >> 2;
    if (v26 <= a2)
    {
      v27 = a1 + 13;
      do
      {
        if ((unint64_t)v25 >= *v27)
        {
          v29 = v26 + 1;
          if ((v26 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v30 = *v27 - (_QWORD)v24;
          if (v30 >> 1 > v29)
            v29 = v30 >> 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v31 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v31);
            v24 = (char *)a1[11];
            v25 = (char *)a1[12];
          }
          else
          {
            v32 = 0;
          }
          v33 = &v32[4 * v26];
          *(_DWORD *)v33 = -1;
          v28 = v33 + 4;
          while (v25 != v24)
          {
            v34 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *((_DWORD *)v33 - 1) = v34;
            v33 -= 4;
          }
          a1[11] = v33;
          a1[12] = v28;
          a1[13] = &v32[4 * v31];
          if (v24)
          {
            operator delete(v24);
            v24 = (char *)a1[11];
          }
          else
          {
            v24 = v33;
          }
        }
        else
        {
          *(_DWORD *)v25 = -1;
          v28 = v25 + 4;
        }
        a1[12] = v28;
        v26 = (v28 - v24) >> 2;
        v25 = v28;
      }
      while (v26 <= a2);
    }
    *(_DWORD *)&v24[4 * a2] = *((_DWORD *)a1 + 28);
  }
  v35 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
  v36 = v35;
  v37 = *(_QWORD *)a1[1] + 40 * (int)v13;
  *(_DWORD *)v37 = *(_DWORD *)v35;
  if (v37 != v35)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v37 + 8), *(_QWORD *)(v35 + 16), v35 + 8);
  *(_DWORD *)(v37 + 32) = *(_DWORD *)(v36 + 32);
  v38 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
  v39 = v38;
  v145 = a1 + 5;
  v40 = a1[5] + 40 * (int)v13;
  *(_DWORD *)v40 = *(_DWORD *)v38;
  if (v40 != v38)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v40 + 8), *(_QWORD *)(v38 + 16), v38 + 8);
  *(_DWORD *)(v40 + 32) = *(_DWORD *)(v39 + 32);
  v41 = a1 + 8;
  *(_QWORD *)(a1[8] + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[2] + 16) + 24))(*(_QWORD *)(a1[2] + 16), v13);
  v42 = a1 + 13;
  v144 = (char *)a1 + 116;
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 48))(*(_QWORD *)(a1[2] + 16)) & 1) != 0)
      goto LABEL_201;
    v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 16))(*(_QWORD *)(a1[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 32))(*(_QWORD *)(a1[2] + 16));
    v44 = (uint64_t *)a1[1];
    v45 = v44 + 1;
    for (j = v43; 0xCCCCCCCCCCCCCCCDLL * ((v44[1] - *v44) >> 3) <= j; v45 = v44 + 1)
    {
      v47 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      v48 = v47;
      v49 = v44[1];
      if (v49 >= v44[2])
      {
        v50 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v44, v47);
      }
      else
      {
        *(_DWORD *)v49 = *v47;
        std::list<int>::list((_QWORD *)(v49 + 8), (uint64_t)(v47 + 2));
        *(_DWORD *)(v49 + 32) = v48[8];
        v50 = v49 + 40;
        *v45 = v49 + 40;
      }
      *v45 = v50;
      v51 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      v52 = v51;
      v53 = a1[6];
      if (v53 >= a1[7])
      {
        v54 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v145, v51);
      }
      else
      {
        *(_DWORD *)v53 = *v51;
        std::list<int>::list((_QWORD *)(v53 + 8), (uint64_t)(v51 + 2));
        *(_DWORD *)(v53 + 32) = v52[8];
        v54 = v53 + 40;
        a1[6] = v53 + 40;
      }
      a1[6] = v54;
      LOBYTE(__p) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &__p);
      v44 = (uint64_t *)a1[1];
    }
    if (*((_BYTE *)a1 + 32))
    {
      (*(void (**)(void **__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a1 + 32))(&__p, *a1, j);
      v55 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      if ((_DWORD)__p)
        v56 = v160 + 1;
      else
        v56 = 0;
      if (*(_DWORD *)v55)
        v57 = *(_QWORD *)(v55 + 24) + 1;
      else
        v57 = 0;
      if (v56 != v57)
        goto LABEL_200;
      v58 = 0;
      v59 = v159;
      v60 = (uint64_t *)(v55 + 16);
      v61 = (_DWORD)__p && (_DWORD)__p == *(_DWORD *)v55;
      v62 = !v61;
      while (1)
      {
        v63 = *v60;
        if ((v58 & 1) == 0 && v62)
          break;
        if ((uint64_t *)v59 == &v158)
          goto LABEL_79;
        if (*(_DWORD *)(v59 + 16) != *(_DWORD *)(v63 + 16))
          goto LABEL_200;
        v59 = *(_QWORD *)(v59 + 8);
        v60 = (uint64_t *)(v63 + 8);
        v58 = 1;
      }
      if ((_DWORD)__p)
      {
LABEL_200:
        std::__list_imp<char *>::clear(&v158);
LABEL_201:
        ++*((_DWORD *)a1 + 28);
        if (!(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
          return;
LABEL_213:
        *v144 = 1;
        return;
      }
LABEL_79:
      *(float *)v154 = v161;
      v151 = 0.0;
      v151 = *(float *)(v55 + 32);
      v64 = v161;
      v65 = v151;
      std::__list_imp<char *>::clear(&v158);
      if (v64 != v65)
        goto LABEL_201;
    }
    *(_QWORD *)(*v41 + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << j);
    v66 = *v145 + 40 * (int)j;
    LODWORD(__p) = *(_DWORD *)v66;
    std::list<int>::list(&v158, v66 + 8);
    v161 = *(float *)(v66 + 32);
    v67 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    v68 = v67;
    v69 = *v145 + 40 * (int)j;
    *(_DWORD *)v69 = *(_DWORD *)v67;
    if (v69 != v67)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v69 + 8), *(_QWORD *)(v67 + 16), v67 + 8);
    *(_DWORD *)(v69 + 32) = *(_DWORD *)(v68 + 32);
    v70 = *a1;
    v156 = 0;
    (*(void (**)(uint64_t, unint64_t, _QWORD *))(*(_QWORD *)v70 + 136))(v70, j, v154);
    while (v154[0])
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v154[0] + 24))(v154[0]) & 1) != 0)
        goto LABEL_193;
      if (v154[0])
      {
        v71 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v154[0] + 32))(v154[0]);
        goto LABEL_89;
      }
LABEL_88:
      v71 = v154[1] + 56 * v156;
LABEL_89:
      v72 = (uint64_t *)a1[1];
      v73 = v72 + 1;
      v74 = *(int *)(v71 + 48);
      if (0xCCCCCCCCCCCCCCCDLL * ((v72[1] - *v72) >> 3) <= v74)
      {
        do
        {
          v75 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          v76 = v75;
          v77 = *v73;
          if (*v73 >= (unint64_t)v72[2])
          {
            v78 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v72, v75);
          }
          else
          {
            *(_DWORD *)v77 = *v75;
            std::list<int>::list((_QWORD *)(v77 + 8), (uint64_t)(v75 + 2));
            *(_DWORD *)(v77 + 32) = v76[8];
            v78 = v77 + 40;
            *v73 = v77 + 40;
          }
          *v73 = v78;
          v79 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          v80 = v79;
          v81 = a1[6];
          if (v81 >= a1[7])
          {
            v82 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(v145, v79);
          }
          else
          {
            *(_DWORD *)v81 = *v79;
            std::list<int>::list((_QWORD *)(v81 + 8), (uint64_t)(v79 + 2));
            *(_DWORD *)(v81 + 32) = v80[8];
            v82 = v81 + 40;
            a1[6] = v81 + 40;
          }
          a1[6] = v82;
          LOBYTE(v151) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v151);
          v72 = (uint64_t *)a1[1];
          v73 = v72 + 1;
        }
        while (0xCCCCCCCCCCCCCCCDLL * ((v72[1] - *v72) >> 3) <= *(int *)(v71 + 48));
        LODWORD(v74) = *(_DWORD *)(v71 + 48);
      }
      if (*((_BYTE *)a1 + 33))
      {
        v83 = (char *)a1[11];
        v84 = (char *)a1[12];
        v85 = (v84 - v83) >> 2;
        if (v85 <= (int)v74)
        {
          do
          {
            if ((unint64_t)v84 >= *v42)
            {
              v88 = v85 + 1;
              if ((v85 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v89 = *v42 - (_QWORD)v83;
              if (v89 >> 1 > v88)
                v88 = v89 >> 1;
              if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
                v90 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v90 = v88;
              if (v90)
              {
                v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v90);
                v83 = (char *)a1[11];
                v84 = (char *)a1[12];
              }
              else
              {
                v91 = 0;
              }
              v92 = &v91[4 * v85];
              *(_DWORD *)v92 = -1;
              v87 = v92 + 4;
              while (v84 != v83)
              {
                v93 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *((_DWORD *)v92 - 1) = v93;
                v92 -= 4;
              }
              a1[11] = v92;
              a1[12] = v87;
              a1[13] = &v91[4 * v90];
              if (v83)
              {
                operator delete(v83);
                v83 = (char *)a1[11];
              }
              else
              {
                v83 = v92;
              }
            }
            else
            {
              *(_DWORD *)v84 = -1;
              v87 = v84 + 4;
            }
            a1[12] = v87;
            v85 = (v87 - v83) >> 2;
            v94 = *(_DWORD *)(v71 + 48);
            v84 = v87;
          }
          while (v85 <= v94);
          v86 = v94;
          LODWORD(v74) = *(_DWORD *)(v71 + 48);
        }
        else
        {
          v86 = (int)v74;
        }
        if (*(_DWORD *)&v83[4 * v86] != *((_DWORD *)a1 + 28))
        {
          v95 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          v96 = v95;
          v97 = *(_QWORD *)a1[1] + 40 * *(int *)(v71 + 48);
          *(_DWORD *)v97 = *(_DWORD *)v95;
          if (v97 != v95)
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v97 + 8), *(_QWORD *)(v95 + 16), v95 + 8);
          *(_DWORD *)(v97 + 32) = *(_DWORD *)(v96 + 32);
          v98 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          v99 = v98;
          v100 = *v145 + 40 * *(int *)(v71 + 48);
          *(_DWORD *)v100 = *(_DWORD *)v98;
          if (v100 != v98)
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v100 + 8), *(_QWORD *)(v98 + 16), v98 + 8);
          *(_DWORD *)(v100 + 32) = *(_DWORD *)(v99 + 32);
          v101 = *(int *)(v71 + 48);
          *(_QWORD *)(a1[8] + ((v101 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v101);
          *(_DWORD *)(a1[11] + 4 * v101) = *((_DWORD *)a1 + 28);
          LODWORD(v74) = *(_DWORD *)(v71 + 48);
        }
      }
      v102 = *(_QWORD *)a1[1];
      v103 = a1[5];
      fst::Times<int,(fst::StringType)1>((int *)&__p, v71 + 8, (uint64_t)&v146);
      v104 = NAN;
      if (v161 != -INFINITY)
      {
        v105 = *(float *)(v71 + 40);
        v104 = NAN;
        if (v105 != -INFINITY)
        {
          v104 = INFINITY;
          if (v105 != INFINITY && v161 != INFINITY)
            v104 = v161 + v105;
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v151, &v146, v104);
      v107 = v102 + 40 * (int)v74;
      std::__list_imp<char *>::clear(&v147);
      fst::Plus<int>(v107, (uint64_t)&v151, (uint64_t)&v162);
      v108 = *(float *)(v107 + 32);
      v109 = v153;
      if (v108 != INFINITY)
      {
        if (v153 == INFINITY)
        {
          v109 = *(float *)(v107 + 32);
        }
        else if (v108 <= v153)
        {
          v111 = expf(-(float)(v153 - v108));
          v109 = v108 - logf(v111 + 1.0);
        }
        else
        {
          v110 = expf(-(float)(v108 - v153));
          v109 = v109 - logf(v110 + 1.0);
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v146, &v162, v109);
      std::__list_imp<char *>::clear(v163);
      v112 = *(_DWORD *)v107;
      if (*(_DWORD *)v107)
        v113 = *(_QWORD *)(v107 + 24) + 1;
      else
        v113 = 0;
      if (v146)
        v114 = v149 + 1;
      else
        v114 = 0;
      if (v113 == v114)
      {
        v115 = 0;
        v116 = *((float *)a1 + 7);
        v117 = (uint64_t *)(v107 + 16);
        v118 = v148;
        if (v112)
          v119 = v112 == v146;
        else
          v119 = 0;
        v120 = !v119;
        while (1)
        {
          v121 = *v117;
          if ((v115 & 1) == 0 && v120 == 1)
            break;
          if (v121 == v107 + 8)
            goto LABEL_162;
          if (*(_DWORD *)(v121 + 16) != *(_DWORD *)(v118 + 16))
            goto LABEL_158;
          v117 = (uint64_t *)(v121 + 8);
          v118 = *(_QWORD *)(v118 + 8);
          v115 = 1;
        }
        if (v112)
          goto LABEL_158;
LABEL_162:
        v124 = *(float *)(v107 + 32);
        v125 = v150;
        v126 = v116 + v150;
        v127 = v116 + v124;
        std::__list_imp<char *>::clear(&v147);
        if (v125 <= v127 && v124 <= v126)
          goto LABEL_189;
      }
      else
      {
LABEL_158:
        std::__list_imp<char *>::clear(&v147);
      }
      fst::Plus<int>(v107, (uint64_t)&v151, (uint64_t)&v162);
      v122 = *(float *)(v107 + 32);
      v123 = v153;
      if (v122 != INFINITY)
      {
        if (v153 == INFINITY)
        {
          v123 = *(float *)(v107 + 32);
        }
        else if (v122 <= v153)
        {
          v130 = expf(-(float)(v153 - v122));
          v123 = v122 - logf(v130 + 1.0);
        }
        else
        {
          v129 = expf(-(float)(v122 - v153));
          v123 = v123 - logf(v129 + 1.0);
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v146, &v162, v123);
      std::__list_imp<char *>::clear(v163);
      *(_DWORD *)v107 = v146;
      if ((int *)v107 != &v146)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v107 + 8), v148, (uint64_t)&v147);
      v131 = v103 + 40 * (int)v74;
      *(float *)(v107 + 32) = v150;
      std::__list_imp<char *>::clear(&v147);
      fst::Plus<int>(v131, (uint64_t)&v151, (uint64_t)&v162);
      v132 = *(float *)(v131 + 32);
      v133 = v153;
      if (v132 != INFINITY)
      {
        if (v153 == INFINITY)
        {
          v133 = *(float *)(v131 + 32);
        }
        else if (v132 <= v153)
        {
          v135 = expf(-(float)(v153 - v132));
          v133 = v132 - logf(v135 + 1.0);
        }
        else
        {
          v134 = expf(-(float)(v132 - v153));
          v133 = v133 - logf(v134 + 1.0);
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v146, &v162, v133);
      std::__list_imp<char *>::clear(v163);
      *(_DWORD *)v131 = v146;
      if ((int *)v131 != &v146)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v131 + 8), v148, (uint64_t)&v147);
      *(float *)(v131 + 32) = v150;
      std::__list_imp<char *>::clear(&v147);
      if (*(_DWORD *)v107 == -2 && !*(_QWORD *)(v107 + 24)
        || *(float *)(v107 + 32) == -INFINITY
        || *(_DWORD *)v131 == -2 && !*(_QWORD *)(v131 + 24)
        || *(float *)(v131 + 32) == -INFINITY)
      {
        *v144 = 1;
        std::__list_imp<char *>::clear(v152);
        v137 = 0;
        goto LABEL_194;
      }
      v136 = **(_QWORD **)(a1[2] + 16);
      if (((*(_QWORD *)(a1[8] + (((unint64_t)*(int *)(v71 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v71 + 48)) & 1) != 0)
      {
        (*(void (**)(void))(v136 + 40))();
      }
      else
      {
        (*(void (**)(void))(v136 + 24))();
        *(_QWORD *)(*v41 + (((unint64_t)*(int *)(v71 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v71 + 48);
      }
LABEL_189:
      std::__list_imp<char *>::clear(v152);
      if (v154[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v154[0] + 40))(v154[0]);
      else
        ++v156;
    }
    if (v156 < v154[2])
      goto LABEL_88;
LABEL_193:
    v137 = 1;
LABEL_194:
    if (v154[0])
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v154[0] + 8))(v154[0]);
    }
    else if (v155)
    {
      --*v155;
    }
    std::__list_imp<char *>::clear(&v158);
  }
  while ((v137 & 1) != 0);
}

void sub_1ADBBEC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a26);
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1> const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[40 * v9];
  *(_DWORD *)v11 = *a2;
  std::list<int>::list((_QWORD *)v11 + 1, (uint64_t)(a2 + 2));
  *((_DWORD *)v11 + 8) = a2[8];
  v15 += 40;
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADBBEE84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_DWORD *)(a7 + v11 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((_QWORD *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADBBEF98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 8;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    std::__list_imp<char *>::clear((_QWORD *)(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *fst::Times<int,(fst::StringType)1>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t *v27;
  BOOL v28;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *result;
  char v34;
  uint64_t *i;
  uint64_t v36;
  char v37;
  int v38;

  if (*a1 && (*a1 == -2 ? (v6 = *((_QWORD *)a1 + 3) == 0) : (v6 = 0), v6)
    || *(_DWORD *)a2 && (*(_DWORD *)a2 == -2 ? (v7 = *(_QWORD *)(a2 + 24) == 0) : (v7 = 0), v7))
  {
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)1>::NoWeight();
  }
  else
  {
    v8 = fst::StringWeight<int,(fst::StringType)1>::Zero();
    v9 = *a1;
    if (*a1)
      v10 = *((_QWORD *)a1 + 3) + 1;
    else
      v10 = 0;
    if (*(_DWORD *)v8)
      v11 = *(_QWORD *)(v8 + 24) + 1;
    else
      v11 = 0;
    if (v10 != v11)
      goto LABEL_32;
    v12 = 0;
    v13 = (uint64_t *)(a1 + 4);
    v14 = (uint64_t *)(v8 + 16);
    v15 = v9 && v9 == *(_DWORD *)v8;
    v16 = !v15;
    v17 = !v16;
    while (1)
    {
      v18 = *v13;
      v19 = *v14;
      if ((v12 & 1) == 0 && !v17)
        break;
      if ((int *)v18 == a1 + 2)
        goto LABEL_61;
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16))
        goto LABEL_32;
      v13 = (uint64_t *)(v18 + 8);
      v14 = (uint64_t *)(v19 + 8);
      v12 = 1;
    }
    if (v9)
    {
LABEL_32:
      v21 = fst::StringWeight<int,(fst::StringType)1>::Zero();
      v22 = *(_DWORD *)a2;
      if (*(_DWORD *)a2)
        v23 = *(_QWORD *)(a2 + 24) + 1;
      else
        v23 = 0;
      if (*(_DWORD *)v21)
        v24 = *(_QWORD *)(v21 + 24) + 1;
      else
        v24 = 0;
      if (v23 != v24)
        goto LABEL_52;
      v25 = 0;
      v26 = (uint64_t *)(a2 + 16);
      v27 = (uint64_t *)(v21 + 16);
      v28 = v22 && v22 == *(_DWORD *)v21;
      v29 = !v28;
      v30 = !v29;
      while (1)
      {
        v31 = *v26;
        v32 = *v27;
        if ((v25 & 1) == 0 && !v30)
          break;
        if (v31 == a2 + 8)
          goto LABEL_61;
        if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16))
          goto LABEL_52;
        v26 = (uint64_t *)(v31 + 8);
        v27 = (uint64_t *)(v32 + 8);
        v25 = 1;
      }
      if (v22)
      {
LABEL_52:
        *(_DWORD *)a3 = *a1;
        result = std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(a1 + 2));
        v34 = 0;
        for (i = (uint64_t *)(a2 + 16); ; i = (uint64_t *)(v36 + 8))
        {
          v36 = *i;
          do
          {
            v37 = v34;
            if ((v34 & 1) != 0)
            {
              if (v36 == a2 + 8)
                return result;
              v38 = *(_DWORD *)(v36 + 16);
            }
            else
            {
              v38 = *(_DWORD *)a2;
              if (!*(_DWORD *)a2)
                return result;
            }
            result = fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a3, v38);
            v34 = 1;
          }
          while ((v37 & 1) == 0);
        }
      }
    }
LABEL_61:
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)1>::Zero();
  }
  *(_DWORD *)a3 = *v20;
  return std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v20 + 2));
}

void sub_1ADBBF210(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistanceState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~ShortestDistanceState(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 64);
  if (v3)
    operator delete(v3);
  v5 = (void **)(a1 + 40);
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D28470;
  a1[1] = v2;
  return a1;
}

void sub_1ADBBF2C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D251C0;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

_QWORD *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  _QWORD *result;

  v4 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *v4;
  result = std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v4 + 2));
  *(_DWORD *)(a3 + 32) = v4[8];
  return result;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D28470;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 56);
  v4 = *v5;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1ADBBF620(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

_QWORD *fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  _QWORD *v6;
  int v8;
  _QWORD v9[3];
  int v10;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v8 = *a3;
  std::list<int>::list(v9, (uint64_t)(a3 + 2));
  v10 = a3[8];
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::SetFinal(v6, a2, &v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1ADBBF720(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddArc(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteArcs(*(_QWORD **)(a1 + 8), a2);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  return std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D211F0;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1ADBBFBB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D22710;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CE40;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1ADBBFC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FC40;
  v2 = (_QWORD *)a1[9];
  if (v2 != (_QWORD *)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD *)a1[8];
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(v2[v3++]);
      v2 = (_QWORD *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D22710;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADBBFEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADBBFFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1ADBC00D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1ADBC0184(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __str;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22[4];
  uint64_t v23;
  int v24;
  unsigned int v25;

  *(_QWORD *)a1 = &unk_1E5D22710;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CE40;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v25 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v23);
  while (1)
  {
    if (!v23)
    {
      if ((int)v25 >= v24)
        goto LABEL_45;
LABEL_25:
      v14 = v25;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23))
      break;
    if (!v23)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::AddState((_QWORD *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v21, a2, v14);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::SetFinal(a1, v14, (int *)&v21);
    std::__list_imp<char *>::clear(v22);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 56), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __str.__r_.__value_.__r.__words[2])
          goto LABEL_38;
LABEL_32:
        v16 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v20);
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0]))
        break;
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_32;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_33:
      fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__str.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v19)
      --*v19;
LABEL_40:
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
    else
      ++v25;
  }
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1ADBC0558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  _QWORD *v16;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::~VectorFstBaseImpl(v16);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::AddState(_QWORD *a1)
{
  char *v2;
  _DWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v2 = (char *)operator new(0x50uLL);
  v3 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  *(_DWORD *)v2 = *v3;
  std::list<int>::list((_QWORD *)v2 + 1, (uint64_t)(v3 + 2));
  v4 = a1[10];
  *((_DWORD *)v2 + 8) = v3[8];
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *((_QWORD *)v2 + 9) = 0;
  v5 = (_QWORD *)a1[9];
  if ((unint64_t)v5 >= v4)
  {
    v7 = a1[8];
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = v2;
    v6 = v13 + 8;
    v16 = (char *)a1[8];
    v15 = (char *)a1[9];
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)a1[8];
    }
    a1[8] = v13;
    a1[9] = v6;
    a1[10] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[9] = v6;
  return (((unint64_t)v6 - a1[8]) >> 3) - 1;
}

_QWORD *fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v4;
  int v5;
  int v7;
  _QWORD v8[3];
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
  v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  v5 = a3[8];
  v9 = v5;
  *(_DWORD *)v4 = v7;
  if ((int *)v4 != &v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v4 + 8), v8[1], (uint64_t)v8);
    v5 = v9;
  }
  *(_DWORD *)(v4 + 32) = v5;
  return std::__list_imp<char *>::clear(v8);
}

void sub_1ADBC07A8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Zero();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero(void)::zero = v2;
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero(void)::zero;
}

void sub_1ADBC0854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Zero();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Zero(void)::zero = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Zero(void)::zero;
}

void sub_1ADBC0924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)0>::Zero();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 2139095040;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Zero(void)::zero = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Zero(void)::zero;
}

void sub_1ADBC0A20(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)0>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::StringWeight<int,(fst::StringType)0>::StringWeight(v2, -1);
    fst::StringWeight<int,(fst::StringType)0>::Zero(void)::zero = v2;
  }
  return fst::StringWeight<int,(fst::StringType)0>::Zero(void)::zero;
}

void sub_1ADBC0AE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C40CA22B68ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)0>::StringWeight(uint64_t a1, int a2)
{
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)a1 = 0;
  fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a1, a2);
  return a1;
}

void sub_1ADBC0B4C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::list<int>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v7[4] = *(_DWORD *)(v3 + 16);
      *(_QWORD *)v7 = v6;
      *((_QWORD *)v7 + 1) = a1;
      *((_QWORD *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1ADBC0BE4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADBC0CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_QWORD *)(v12 - 56) = *(_QWORD *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((_QWORD *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADBC0DC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  if (!*a2)
    ++a1[5];
  if (!a2[1])
    ++a1[6];
  v3 = a1 + 7;
  v4 = a1[8];
  if (v4 >= a1[9])
  {
    result = std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::__push_back_slow_path<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> const&>((uint64_t)v3, (uint64_t)a2);
    result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

_QWORD *std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  result = std::list<int>::list((_QWORD *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1ADBC0EB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::__push_back_slow_path<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[56 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((_QWORD *)v11 + 2, a2 + 16);
  v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADBC0FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1ADBC110C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::vector<unsigned int>::pointer end;
  unsigned int *v47;
  std::vector<unsigned int>::pointer begin;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  unsigned int *v54;
  unsigned int v55;
  std::vector<unsigned int>::pointer v56;
  unsigned int *v57;
  std::vector<unsigned int>::pointer v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  unsigned int *v64;
  unsigned int v65;
  unint64_t v66;
  std::vector<unsigned int>::pointer v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  std::vector<unsigned int>::pointer v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t *v83;
  BOOL v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t *v92;
  BOOL v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _DWORD *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  std::vector<unsigned int> v106;
  std::vector<unsigned int> v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  float v116;
  float v117;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v115 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v111 = (uint64_t *)&v115;
      fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(a1, &v108, 0);
      v8 = v115;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0)
      goto LABEL_211;
    v11 = a2 & 0xC0000;
    v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0)
      v12 = 0x10425A850000;
    v13 = v8 | v12;
    v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0)
      v13 |= 0x100000uLL;
    v115 = v13;
    memset(&v107, 0, sizeof(v107));
    memset(&v106, 0, sizeof(v106));
    v105 = 0;
    v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v103);
    v16 = 0;
LABEL_12:
    if (!v103)
    {
      if ((int)v105 >= v104)
        goto LABEL_203;
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103))
    {
      if (v103)
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v103 + 24))();
LABEL_18:
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17);
        v110 = (uint64_t)&v110;
        v111 = &v110;
        v112 = 0;
        LODWORD(v109) = 0;
        v107.__end_ = v107.__begin_;
        v106.__end_ = v106.__begin_;
        if (v11)
          std::vector<int>::reserve(&v107, v18);
        if (v14)
          std::vector<int>::reserve(&v106, v18);
        v102 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v17, &v98);
        v19 = 1;
        while (1)
        {
          if (v98)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98))
            {
              if (v98)
              {
                (*(void (**)(void))(*(_QWORD *)v98 + 8))();
              }
              else
              {
LABEL_132:
                if (v101)
                  --*v101;
              }
              v15 = a1;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14)
                  goto LABEL_152;
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v106.__end_ - (char *)v106.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  v72 = v106.__end_ - v106.__begin_;
                  if (v72 <= 2)
                    v72 = 2;
                  v73 = v106.__begin_ + 1;
                  v74 = *v106.__begin_;
                  v75 = v72 - 1;
                  while (1)
                  {
                    v77 = *v73++;
                    v76 = v77;
                    if (v77 == v74)
                      break;
                    v74 = v76;
                    if (!--v75)
                      goto LABEL_152;
                  }
                  v115 = v115 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              v66 = v107.__end_ - v107.__begin_;
              if (v66 <= 2)
                v66 = 2;
              v67 = v107.__begin_ + 1;
              v68 = *v107.__begin_;
              v69 = v66 - 1;
              while (1)
              {
                v71 = *v67++;
                v70 = v71;
                if (v71 == v68)
                  break;
                v68 = v70;
                if (!--v69)
                  goto LABEL_141;
              }
              v115 = v115 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14)
                goto LABEL_142;
LABEL_152:
              if (v16 >= 1)
                v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v98, a1, v17);
              v78 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
              if ((_DWORD)v98)
                v79 = (char *)v101 + 1;
              else
                v79 = 0;
              if (*(_DWORD *)v78)
                v80 = *(_QWORD *)(v78 + 24) + 1;
              else
                v80 = 0;
              if (v79 != (char *)v80)
                goto LABEL_174;
              v81 = 0;
              v82 = v100;
              v83 = (uint64_t *)(v78 + 16);
              v84 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v78;
              v85 = !v84;
              while (1)
              {
                v86 = *v83;
                if ((v81 & 1) == 0 && v85)
                  break;
                if ((uint64_t *)v82 == &v99)
                  goto LABEL_173;
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16))
                  goto LABEL_174;
                v82 = *(_QWORD *)(v82 + 8);
                v83 = (uint64_t *)(v86 + 8);
                v81 = 1;
              }
              if ((_DWORD)v98)
                goto LABEL_174;
LABEL_173:
              v117 = *(float *)&v102;
              v116 = 0.0;
              v116 = *(float *)(v78 + 32);
              if (*(float *)&v102 == v116)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 40))(a1, v17, *(float *)&v102) != 1)v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              else
              {
LABEL_174:
                v87 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
                if ((_DWORD)v98)
                  v88 = (char *)v101 + 1;
                else
                  v88 = 0;
                if (*(_DWORD *)v87)
                  v89 = *(_QWORD *)(v87 + 24) + 1;
                else
                  v89 = 0;
                if (v88 != (char *)v89)
                  goto LABEL_194;
                v90 = 0;
                v91 = v100;
                v92 = (uint64_t *)(v87 + 16);
                v93 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v87;
                v94 = !v93;
                while (1)
                {
                  v95 = *v92;
                  if ((v90 & 1) == 0 && v94)
                    break;
                  if ((uint64_t *)v91 == &v99)
                    goto LABEL_193;
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16))
                    goto LABEL_194;
                  v91 = *(_QWORD *)(v91 + 8);
                  v92 = (uint64_t *)(v95 + 8);
                  v90 = 1;
                }
                if ((_DWORD)v98)
                  goto LABEL_194;
LABEL_193:
                v117 = *(float *)&v102;
                v116 = 0.0;
                v116 = *(float *)(v87 + 32);
                if (*(float *)&v102 != v116)
LABEL_194:
                  v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                ++v16;
              }
              std::__list_imp<char *>::clear(&v99);
              std::__list_imp<char *>::clear(&v110);
              if (v103)
                (*(void (**)(uint64_t))(*(_QWORD *)v103 + 32))(v103);
              else
                ++v105;
              goto LABEL_12;
            }
            if (v98)
            {
              v20 = (*(uint64_t (**)(void))(*(_QWORD *)v98 + 32))();
              goto LABEL_29;
            }
          }
          else if (v102 >= v100)
          {
            goto LABEL_132;
          }
          v20 = v99 + 56 * v102;
LABEL_29:
          v21 = *(_DWORD *)v20;
          v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            v115 = v115 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22)
                goto LABEL_35;
              goto LABEL_39;
            }
            v23 = v115;
          }
          else
          {
            v23 = v115 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          v115 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0)
              goto LABEL_40;
            goto LABEL_44;
          }
LABEL_39:
          v115 = v115 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v108)
              v115 = v115 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            if (v22 < SHIDWORD(v108))
              v115 = v115 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
          }
LABEL_44:
          v24 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
          v25 = *(_DWORD *)(v20 + 8);
          if (v25)
            v26 = *(_QWORD *)(v20 + 32) + 1;
          else
            v26 = 0;
          if (*(_DWORD *)v24)
            v27 = *(_QWORD *)(v24 + 24) + 1;
          else
            v27 = 0;
          if (v26 != v27)
            goto LABEL_64;
          v28 = 0;
          v29 = (uint64_t *)(v20 + 24);
          v30 = (uint64_t *)(v24 + 16);
          v31 = v25 && v25 == *(_DWORD *)v24;
          v32 = !v31;
          while (1)
          {
            v33 = *v29;
            v34 = *v30;
            if ((v28 & 1) == 0 && v32)
              break;
            if (v33 == v20 + 16)
              goto LABEL_63;
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16))
              goto LABEL_64;
            v29 = (uint64_t *)(v33 + 8);
            v30 = (uint64_t *)(v34 + 8);
            v28 = 1;
          }
          if (v25)
            goto LABEL_64;
LABEL_63:
          v117 = 0.0;
          v117 = *(float *)(v20 + 40);
          v116 = 0.0;
          v116 = *(float *)(v24 + 32);
          if (v117 != v116)
          {
LABEL_64:
            v35 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
            v25 = *(_DWORD *)(v20 + 8);
            if (v25)
              v36 = *(_QWORD *)(v20 + 32) + 1;
            else
              v36 = 0;
            if (*(_DWORD *)v35)
              v37 = *(_QWORD *)(v35 + 24) + 1;
            else
              v37 = 0;
            if (v36 != v37)
              goto LABEL_84;
            v38 = 0;
            v39 = (uint64_t *)(v20 + 24);
            v40 = (uint64_t *)(v35 + 16);
            v41 = v25 && v25 == *(_DWORD *)v35;
            v42 = !v41;
            while (1)
            {
              v43 = *v39;
              v44 = *v40;
              if ((v38 & 1) == 0 && v42)
                break;
              if (v43 == v20 + 16)
                goto LABEL_83;
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16))
                goto LABEL_84;
              v39 = (uint64_t *)(v43 + 8);
              v40 = (uint64_t *)(v44 + 8);
              v38 = 1;
            }
            if (v25)
              goto LABEL_84;
LABEL_83:
            v117 = 0.0;
            v117 = *(float *)(v20 + 40);
            v116 = 0.0;
            v116 = *(float *)(v35 + 32);
            if (v117 != v116)
LABEL_84:
              v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17)
            v115 = v115 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          if (v45 != (_DWORD)v17 + 1)
            v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          v108 = *(_QWORD *)v20;
          LODWORD(v109) = v25;
          if (&v108 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v110, *(_QWORD *)(v20 + 24), v20 + 16);
            v45 = *(_DWORD *)(v20 + 48);
          }
          v113 = *(_DWORD *)(v20 + 40);
          v114 = v45;
          if (v11)
          {
            end = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              begin = v107.__begin_;
              v49 = v107.__end_ - v107.__begin_;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_213;
              v51 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v52);
                begin = v107.__begin_;
                end = v107.__end_;
              }
              else
              {
                v53 = 0;
              }
              v54 = (unsigned int *)&v53[4 * v49];
              *v54 = *(_DWORD *)v20;
              v47 = v54 + 1;
              while (end != begin)
              {
                v55 = *--end;
                *--v54 = v55;
              }
              v107.__begin_ = v54;
              v107.__end_ = v47;
              v107.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v107.__end_ = *(_DWORD *)v20;
              v47 = end + 1;
            }
            v107.__end_ = v47;
          }
          if (v14)
          {
            v56 = v106.__end_;
            if (v106.__end_ >= v106.__end_cap_.__value_)
            {
              v58 = v106.__begin_;
              v59 = v106.__end_ - v106.__begin_;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62)
LABEL_213:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v61 = (char *)v106.__end_cap_.__value_ - (char *)v106.__begin_;
              if (((char *)v106.__end_cap_.__value_ - (char *)v106.__begin_) >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v62 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v106.__end_cap_, v62);
                v58 = v106.__begin_;
                v56 = v106.__end_;
              }
              else
              {
                v63 = 0;
              }
              v64 = (unsigned int *)&v63[4 * v59];
              *v64 = *(_DWORD *)(v20 + 4);
              v57 = v64 + 1;
              while (v56 != v58)
              {
                v65 = *--v56;
                *--v64 = v65;
              }
              v106.__begin_ = v64;
              v106.__end_ = v57;
              v106.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *v106.__end_ = *(_DWORD *)(v20 + 4);
              v57 = v56 + 1;
            }
            v106.__end_ = v57;
          }
          if (v98)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v98 + 40))(v98);
            v19 = 0;
          }
          else
          {
            v19 = 0;
            ++v102;
          }
        }
      }
LABEL_17:
      v17 = v105;
      goto LABEL_18;
    }
    if (v103)
      (*(void (**)(void))(*(_QWORD *)v103 + 8))();
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
    {
      v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v106.__begin_)
    {
      v106.__end_ = v106.__begin_;
      operator delete(v106.__begin_);
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    v8 = v115;
LABEL_211:
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1ADBC1B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::One();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One(void)::one = v2;
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One(void)::one;
}

void sub_1ADBC1CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 48);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 48);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 48);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 48), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 56 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19828;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1ADBC23F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19828;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::FinishState(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t result;
  unint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int *i;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  float v32;
  float v33;
  uint64_t v34;
  _QWORD v35[3];
  float v36;
  float v37;
  float v38;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v34);
  v6 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  if ((_DWORD)v34)
    v7 = v35[2] + 1;
  else
    v7 = 0;
  if (*(_DWORD *)v6)
    v8 = *(_QWORD *)(v6 + 24) + 1;
  else
    v8 = 0;
  if (v7 == v8)
  {
    v9 = 0;
    v10 = v35[1];
    v11 = (uint64_t *)(v6 + 16);
    if ((_DWORD)v34)
      v12 = (_DWORD)v34 == *(_DWORD *)v6;
    else
      v12 = 0;
    v13 = !v12;
    v14 = v13 ^ 1;
    while (1)
    {
      v15 = *v11;
      if ((v9 & 1) == 0 && !v14)
        break;
      if ((_QWORD *)v10 == v35)
        goto LABEL_42;
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16))
        goto LABEL_21;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = (uint64_t *)(v15 + 8);
      v9 = 1;
    }
    if ((_DWORD)v34)
      goto LABEL_21;
LABEL_42:
    v38 = v36;
    v37 = 0.0;
    v37 = *(float *)(v6 + 32);
    v32 = v36;
    v33 = v37;
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  v17 = a2;
  *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  v18 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17))
    goto LABEL_36;
  v19 = 0;
  v20 = *(_QWORD **)(a1 + 80);
  v21 = v20[1];
  v22 = **(_QWORD **)(a1 + 16);
  v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    v24 = *v23--;
    v19 |= *(_QWORD *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while ((_DWORD)v24 != a2);
  v25 = *(_QWORD **)a1;
  v26 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v21 - 4); ; --i)
  {
    v28 = *i;
    if (v25)
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    result = v28 >> 6;
    v29 = 1 << v28;
    if ((v19 & 1) == 0)
      break;
    *(_QWORD *)(v22 + 8 * result) |= v29;
    *(_QWORD *)(v26 + 8 * result) &= ~v29;
    if ((_DWORD)v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(_QWORD *)(v26 + 8 * result) &= ~v29;
  if ((_DWORD)v28 != a2)
    goto LABEL_33;
  v20[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    v30 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
      *(_QWORD *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3))
      *(_DWORD *)(v18 + 4 * a3) = v31;
  }
  return result;
}

void sub_1ADBC2738(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19828;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19828;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19828;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADBC27B8(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A7E0;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADBC28A0(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A7E0;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADBC2CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::One();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::One(void)::one = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::One(void)::one;
}

void sub_1ADBC2D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)0>::One();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 0;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::One(void)::one = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::One(void)::one;
}

void sub_1ADBC2E88(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)0>::One()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_QWORD *)(v2 + 8) = v2 + 8;
    *(_QWORD *)(v2 + 16) = v2 + 8;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)v2 = 0;
    fst::StringWeight<int,(fst::StringType)0>::One(void)::one = v2;
  }
  return fst::StringWeight<int,(fst::StringType)0>::One(void)::one;
}

void sub_1ADBC2F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    v10 = v27 + 56 * v28;
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v25 = 0x4000;
    if (v13 > 0x4000)
      v25 = v13;
    *(_QWORD *)(a1 + 8) = v25;
    v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(uint64_t **)(a1 + 16);
    v15 = *(uint64_t **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[7 * v13];
  v16 = v26;
  v17 = v27;
  v19 = v28;
  v18 = v29;
  if (v29)
    ++*v29;
  v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    v24 = v15 - 7;
    *v24 = *(_QWORD *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(_QWORD *)(v23 + 24), v23 + 16);
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 56 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1ADBC3178(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _BYTE v34[8];
  void *v35[2];
  void *v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string __p[5];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)v35 = 0u;
  *(_OWORD *)v36 = 0u;
  v6 = -1;
  v40 = 0;
  v41 = 0;
  v39 = -1;
  v39 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v40 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v40 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v43;
    if (v43 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v9, (uint64_t)v34);
  v31 = v9;
  v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v12 = 0;
    v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(__p);
      std::__list_imp<char *>::clear(&__p[0].__r_.__value_.__l.__size_);
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      v14 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v12);
      v16 = *(_QWORD *)(v14 + 56);
      v15 = *(_QWORD *)(v14 + 64);
      if (v15 == v16)
        v17 = 0;
      else
        v17 = *(_DWORD **)(v14 + 56);
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1)
          v18 = 1;
        else
          v18 = (v15 - v16) / 56;
        v19 = v17;
        do
        {
          v20 = *v19;
          v19 += 14;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(v17 + 2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_30:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v33);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_33;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      updated = 1;
      goto LABEL_33;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v29 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_30;
  }
  v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_33:
  if (SHIBYTE(v37) < 0)
    operator delete(v36[1]);
  if (SHIBYTE(v36[0]) < 0)
    operator delete(v35[0]);
  return updated;
}

void sub_1ADBC35D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a17);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1ADBC3AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Type();
    std::operator+<char>();
    fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Type(void)::type = v2;
  }
  return fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Type(void)::type;
}

void sub_1ADBC3BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1ADBC3E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::SetFinal(_QWORD *a1, int a2, int *a3)
{
  int *v6;
  unint64_t v7;
  int v9;
  _QWORD v10[3];
  int v11;
  int v12;
  _QWORD v13[3];
  int v14;
  int v15;
  _QWORD v16[3];
  int v17;
  int v18;
  _QWORD v19[3];
  int v20;

  v6 = *(int **)(a1[8] + 8 * a2);
  v18 = *v6;
  std::list<int>::list(v19, (uint64_t)(v6 + 2));
  v20 = v6[8];
  v15 = *a3;
  std::list<int>::list(v16, (uint64_t)(a3 + 2));
  v17 = a3[8];
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::SetFinal((uint64_t)a1, a2, &v15);
  std::__list_imp<char *>::clear(v16);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v12 = v18;
  std::list<int>::list(v13, (uint64_t)v19);
  v14 = v20;
  v9 = *a3;
  std::list<int>::list(v10, (uint64_t)(a3 + 2));
  v11 = a3[8];
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>(v7, &v12, &v9);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(v13);
  return std::__list_imp<char *>::clear(v19);
}

void sub_1ADBC4018(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SetFinalProperties<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>(unint64_t a1, int *a2, int *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t *v36;
  BOOL v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t *v48;
  BOOL v49;
  _BOOL4 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v6 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  v7 = *a2;
  if (*a2)
    v8 = *((_QWORD *)a2 + 3) + 1;
  else
    v8 = 0;
  if (*(_DWORD *)v6)
    v9 = *(_QWORD *)(v6 + 24) + 1;
  else
    v9 = 0;
  if (v8 != v9)
    goto LABEL_22;
  v10 = 0;
  v11 = (uint64_t *)(a2 + 4);
  v12 = (uint64_t *)(v6 + 16);
  v13 = v7 && v7 == *(_DWORD *)v6;
  v14 = !v13;
  v15 = !v14;
  while (1)
  {
    v16 = *v11;
    v17 = *v12;
    if ((v10 & 1) == 0 && !v15)
      break;
    if ((int *)v16 == a2 + 2)
      goto LABEL_21;
    if (*(_DWORD *)(v16 + 16) != *(_DWORD *)(v17 + 16))
      goto LABEL_22;
    v11 = (uint64_t *)(v16 + 8);
    v12 = (uint64_t *)(v17 + 8);
    v10 = 1;
  }
  if (v7)
    goto LABEL_22;
LABEL_21:
  if (*((float *)a2 + 8) != *(float *)(v6 + 32))
  {
LABEL_22:
    v18 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
    v19 = *a2;
    if (*a2)
      v20 = *((_QWORD *)a2 + 3) + 1;
    else
      v20 = 0;
    if (*(_DWORD *)v18)
      v21 = *(_QWORD *)(v18 + 24) + 1;
    else
      v21 = 0;
    if (v20 != v21)
      goto LABEL_43;
    v22 = 0;
    v23 = (uint64_t *)(a2 + 4);
    v24 = (uint64_t *)(v18 + 16);
    v25 = v19 && v19 == *(_DWORD *)v18;
    v26 = !v25;
    v27 = !v26;
    while (1)
    {
      v28 = *v23;
      v29 = *v24;
      if ((v22 & 1) == 0 && !v27)
        break;
      if ((int *)v28 == a2 + 2)
        goto LABEL_42;
      if (*(_DWORD *)(v28 + 16) != *(_DWORD *)(v29 + 16))
        goto LABEL_43;
      v23 = (uint64_t *)(v28 + 8);
      v24 = (uint64_t *)(v29 + 8);
      v22 = 1;
    }
    if (v19)
      goto LABEL_43;
LABEL_42:
    if (*((float *)a2 + 8) != *(float *)(v18 + 32))
LABEL_43:
      a1 &= ~0x100000000uLL;
  }
  v30 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  v31 = *a3;
  if (*a3)
    v32 = *((_QWORD *)a3 + 3) + 1;
  else
    v32 = 0;
  if (*(_DWORD *)v30)
    v33 = *(_QWORD *)(v30 + 24) + 1;
  else
    v33 = 0;
  if (v32 != v33)
    goto LABEL_65;
  v34 = 0;
  v35 = (uint64_t *)(a3 + 4);
  v36 = (uint64_t *)(v30 + 16);
  v37 = v31 && v31 == *(_DWORD *)v30;
  v38 = !v37;
  v39 = !v38;
  while (1)
  {
    v40 = *v35;
    v41 = *v36;
    if ((v34 & 1) == 0 && !v39)
      break;
    if ((int *)v40 == a3 + 2)
      goto LABEL_64;
    if (*(_DWORD *)(v40 + 16) != *(_DWORD *)(v41 + 16))
      goto LABEL_65;
    v35 = (uint64_t *)(v40 + 8);
    v36 = (uint64_t *)(v41 + 8);
    v34 = 1;
  }
  if (v31)
    goto LABEL_65;
LABEL_64:
  if (*((float *)a3 + 8) != *(float *)(v30 + 32))
  {
LABEL_65:
    v42 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
    v43 = *a3;
    if (*a3)
      v44 = *((_QWORD *)a3 + 3) + 1;
    else
      v44 = 0;
    if (*(_DWORD *)v42)
      v45 = *(_QWORD *)(v42 + 24) + 1;
    else
      v45 = 0;
    if (v44 != v45)
      goto LABEL_86;
    v46 = 0;
    v47 = (uint64_t *)(a3 + 4);
    v48 = (uint64_t *)(v42 + 16);
    v49 = v43 && v43 == *(_DWORD *)v42;
    v50 = !v49;
    v51 = !v50;
    while (1)
    {
      v52 = *v47;
      v53 = *v48;
      if ((v46 & 1) == 0 && !v51)
        break;
      if ((int *)v52 == a3 + 2)
        goto LABEL_85;
      if (*(_DWORD *)(v52 + 16) != *(_DWORD *)(v53 + 16))
        goto LABEL_86;
      v47 = (uint64_t *)(v52 + 8);
      v48 = (uint64_t *)(v53 + 8);
      v46 = 1;
    }
    if (v43)
      goto LABEL_86;
LABEL_85:
    if (*((float *)a3 + 8) != *(float *)(v42 + 32))
LABEL_86:
      a1 = a1 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  return a1 & 0x3FFFFFF0007;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::AddArc(_QWORD *a1, int a2, int *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 56))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 56);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(v8, a2, a3, v7);
  return fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), a3);
}

uint64_t fst::AddArcProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(unint64_t a1, int a2, int *a3, _DWORD *a4)
{
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v6 = *a3;
  v7 = a3[1];
  v8 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*a3 == v7)
    v8 = a1;
  v9 = v8 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v7)
    v9 = v8 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  if (!v6)
    v8 = v9;
  if (v7)
    v10 = v8;
  else
    v10 = v8 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  if (a4)
  {
    if (*a4 <= v6)
      v11 = v10;
    else
      v11 = v10 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    if (a4[1] > v7)
      v10 = v11 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    else
      v10 = v11;
  }
  v12 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  v13 = a3[2];
  if (v13)
    v14 = *((_QWORD *)a3 + 4) + 1;
  else
    v14 = 0;
  if (*(_DWORD *)v12)
    v15 = *(_QWORD *)(v12 + 24) + 1;
  else
    v15 = 0;
  if (v14 != v15)
    goto LABEL_38;
  v16 = 0;
  v17 = (uint64_t *)(a3 + 6);
  v18 = (uint64_t *)(v12 + 16);
  v19 = v13 && v13 == *(_DWORD *)v12;
  v20 = !v19;
  v21 = !v20;
  while (1)
  {
    v22 = *v17;
    v23 = *v18;
    if ((v16 & 1) == 0 && !v21)
      break;
    if ((int *)v22 == a3 + 4)
      goto LABEL_37;
    if (*(_DWORD *)(v22 + 16) != *(_DWORD *)(v23 + 16))
      goto LABEL_38;
    v17 = (uint64_t *)(v22 + 8);
    v18 = (uint64_t *)(v23 + 8);
    v16 = 1;
  }
  if (v13)
    goto LABEL_38;
LABEL_37:
  if (*((float *)a3 + 10) != *(float *)(v12 + 32))
  {
LABEL_38:
    v24 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
    v25 = a3[2];
    if (v25)
      v26 = *((_QWORD *)a3 + 4) + 1;
    else
      v26 = 0;
    if (*(_DWORD *)v24)
      v27 = *(_QWORD *)(v24 + 24) + 1;
    else
      v27 = 0;
    if (v26 != v27)
      goto LABEL_59;
    v28 = 0;
    v29 = (uint64_t *)(a3 + 6);
    v30 = (uint64_t *)(v24 + 16);
    v31 = v25 && v25 == *(_DWORD *)v24;
    v32 = !v31;
    v33 = !v32;
    while (1)
    {
      v34 = *v29;
      v35 = *v30;
      if ((v28 & 1) == 0 && !v33)
        break;
      if ((int *)v34 == a3 + 4)
        goto LABEL_58;
      if (*(_DWORD *)(v34 + 16) != *(_DWORD *)(v35 + 16))
        goto LABEL_59;
      v29 = (uint64_t *)(v34 + 8);
      v30 = (uint64_t *)(v35 + 8);
      v28 = 1;
    }
    if (v25)
      goto LABEL_59;
LABEL_58:
    if (*((float *)a3 + 10) != *(float *)(v24 + 32))
LABEL_59:
      v10 = v10 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  if (a3[12] <= a2)
    v36 = v10 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  else
    v36 = v10;
  if ((v36 & 0x4000000000) != 0)
    return v36 & 0x5D7FFEB0007 | 0x2800000000;
  else
    return v36 & 0x5D7FFEB0007;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  int64x2_t v32;
  int64x2_t v33;
  std::vector<int>::value_type __x;
  std::vector<int> v35;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v35, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v35.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v35.__begin_[v12] == -1)
      {
        fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(_QWORD *)(v11 + 8 * v12));
      }
      else
      {
        v35.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v17 = *(int64x2_t *)(v16 + 40);
      v18 = *(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56);
      if (v18)
        v19 = *(_QWORD *)(v16 + 56);
      else
        v19 = 0;
      if (v18)
      {
        v20 = 0;
        v21 = 0;
        v22 = (int *)(v19 + 48);
        v23 = v19 + 16;
        do
        {
          v24 = v35.__begin_[*v22];
          if (v24 == -1)
          {
            v27 = *((_QWORD *)v22 - 6);
            v28.i64[0] = v27;
            v28.i64[1] = HIDWORD(v27);
            v17 = vaddq_s64(v17, vceqzq_s64(v28));
          }
          else
          {
            *v22 = v24;
            if (v20 != v21)
            {
              v32 = v17;
              v25 = v19 + 56 * v21;
              *(_QWORD *)v25 = *((_QWORD *)v22 - 6);
              *(_DWORD *)(v25 + 8) = *(v22 - 10);
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v25 + 16), *((_QWORD *)v22 - 3), v23);
              v26 = v19 + 56 * v21;
              *(_DWORD *)(v26 + 40) = *(v22 - 2);
              *(_DWORD *)(v26 + 48) = *v22;
              v14 = *v4;
              v17 = v32;
            }
            ++v21;
          }
          ++v20;
          v16 = *(_QWORD *)(v14 + 8 * v15);
          v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56)) >> 3);
          v22 += 14;
          v23 += 56;
        }
        while (v20 < v29);
        v33 = v17;
      }
      else
      {
        v33 = *(int64x2_t *)(v16 + 40);
        v21 = 0;
        v29 = 0;
      }
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs((_QWORD *)v16, v29 - v21);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 40) = v33;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v30 = *(int *)(a1 + 88);
  if ((_DWORD)v30 == -1)
  {
    v31 = v35.__begin_;
    if (!v35.__begin_)
      return;
  }
  else
  {
    v31 = v35.__begin_;
    *(_DWORD *)(a1 + 88) = v35.__begin_[v30];
  }
  v35.__end_ = v31;
  operator delete(v31);
}

void sub_1ADBC4888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)
                                                             - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 56 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::SetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  BOOL v34;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t result;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t *v51;
  BOOL v52;
  _BOOL4 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t *v62;
  BOOL v63;
  _BOOL4 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
  v6 = (int *)(v5 + 56 * v4);
  v7 = *v6;
  v8 = v6[1];
  if (*v6 != v8)
    **(_QWORD **)(a1 + 16) &= ~0x20000uLL;
  if (v7)
  {
    if (!v8)
    {
      v9 = *(unint64_t **)(a1 + 16);
      v10 = *v9;
LABEL_8:
      *v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    v9 = *(unint64_t **)(a1 + 16);
    v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      *v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  v12 = v5 + 56 * v4;
  v13 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  v16 = *(_DWORD *)(v12 + 8);
  v15 = (int *)(v12 + 8);
  v14 = v16;
  if (v16)
    v17 = *((_QWORD *)v15 + 3) + 1;
  else
    v17 = 0;
  if (*(_DWORD *)v13)
    v18 = *(_QWORD *)(v13 + 24) + 1;
  else
    v18 = 0;
  if (v17 != v18)
    goto LABEL_30;
  v19 = 0;
  v20 = (uint64_t *)(v15 + 4);
  v21 = (uint64_t *)(v13 + 16);
  v22 = v14 && v14 == *(_DWORD *)v13;
  v23 = !v22;
  v24 = !v23;
  while (1)
  {
    v25 = *v20;
    v26 = *v21;
    if ((v19 & 1) == 0 && !v24)
      break;
    if ((int *)v25 == v15 + 2)
      goto LABEL_29;
    if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v26 + 16))
      goto LABEL_30;
    v20 = (uint64_t *)(v25 + 8);
    v21 = (uint64_t *)(v26 + 8);
    v19 = 1;
  }
  if (v14)
    goto LABEL_30;
LABEL_29:
  if (*((float *)v15 + 8) != *(float *)(v13 + 32))
  {
LABEL_30:
    v27 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
    v28 = *v15;
    if (*v15)
      v29 = *((_QWORD *)v15 + 3) + 1;
    else
      v29 = 0;
    if (*(_DWORD *)v27)
      v30 = *(_QWORD *)(v27 + 24) + 1;
    else
      v30 = 0;
    if (v29 != v30)
      goto LABEL_51;
    v31 = 0;
    v32 = (uint64_t *)(v15 + 4);
    v33 = (uint64_t *)(v27 + 16);
    v34 = v28 && v28 == *(_DWORD *)v27;
    v35 = !v34;
    v36 = !v35;
    while (1)
    {
      v37 = *v32;
      v38 = *v33;
      if ((v31 & 1) == 0 && !v36)
        break;
      if ((int *)v37 == v15 + 2)
        goto LABEL_50;
      if (*(_DWORD *)(v37 + 16) != *(_DWORD *)(v38 + 16))
        goto LABEL_51;
      v32 = (uint64_t *)(v37 + 8);
      v33 = (uint64_t *)(v38 + 8);
      v31 = 1;
    }
    if (v28)
      goto LABEL_51;
LABEL_50:
    if (*((float *)v15 + 8) != *(float *)(v27 + 32))
LABEL_51:
      **(_QWORD **)(a1 + 16) &= ~0x100000000uLL;
  }
  v39 = 0x30FC30007;
  if (*(_DWORD *)a2 == *v6 && *(_DWORD *)(a2 + 4) == v6[1] && *(_DWORD *)(a2 + 48) == *(_DWORD *)(v5 + 56 * v4 + 48))
    v39 = 0x3FFFFFFF0007;
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArc(*(uint64_t **)(a1 + 8), a2, *(_QWORD *)(a1 + 24));
  v40 = *(_DWORD *)a2;
  v41 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 != v41)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v40)
  {
    if (!v41)
    {
      v42 = *(unint64_t **)(a1 + 16);
      v43 = *v42;
LABEL_63:
      *v42 = v43 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    v42 = *(unint64_t **)(a1 + 16);
    v44 = *v42 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v42 = v44;
    if (!v41)
    {
      v43 = v44 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v42 = v43;
      goto LABEL_63;
    }
  }
  result = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  v46 = *(_DWORD *)(a2 + 8);
  if (v46)
    v47 = *(_QWORD *)(a2 + 32) + 1;
  else
    v47 = 0;
  if (*(_DWORD *)result)
    v48 = *(_QWORD *)(result + 24) + 1;
  else
    v48 = 0;
  if (v47 != v48)
    goto LABEL_85;
  v49 = 0;
  v50 = (uint64_t *)(a2 + 24);
  v51 = (uint64_t *)(result + 16);
  v52 = v46 && v46 == *(_DWORD *)result;
  v53 = !v52;
  v54 = !v53;
  while (1)
  {
    v55 = *v50;
    v56 = *v51;
    if ((v49 & 1) == 0 && !v54)
      break;
    if (v55 == a2 + 16)
      goto LABEL_84;
    if (*(_DWORD *)(v55 + 16) != *(_DWORD *)(v56 + 16))
      goto LABEL_85;
    v50 = (uint64_t *)(v55 + 8);
    v51 = (uint64_t *)(v56 + 8);
    v49 = 1;
  }
  if (v46)
    goto LABEL_85;
LABEL_84:
  if (*(float *)(a2 + 40) != *(float *)(result + 32))
  {
LABEL_85:
    result = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
    v57 = *(_DWORD *)(a2 + 8);
    if (v57)
      v58 = *(_QWORD *)(a2 + 32) + 1;
    else
      v58 = 0;
    if (*(_DWORD *)result)
      v59 = *(_QWORD *)(result + 24) + 1;
    else
      v59 = 0;
    if (v58 != v59)
      goto LABEL_106;
    v60 = 0;
    v61 = (uint64_t *)(a2 + 24);
    v62 = (uint64_t *)(result + 16);
    v63 = v57 && v57 == *(_DWORD *)result;
    v64 = !v63;
    v65 = !v64;
    while (1)
    {
      v66 = *v61;
      v67 = *v62;
      if ((v60 & 1) == 0 && !v65)
        break;
      if (v66 == a2 + 16)
        goto LABEL_105;
      if (*(_DWORD *)(v66 + 16) != *(_DWORD *)(v67 + 16))
        goto LABEL_106;
      v61 = (uint64_t *)(v66 + 8);
      v62 = (uint64_t *)(v67 + 8);
      v60 = 1;
    }
    if (v57)
      goto LABEL_106;
LABEL_105:
    if (*(float *)(a2 + 40) != *(float *)(result + 32))
LABEL_106:
      **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  }
  **(_QWORD **)(a1 + 16) &= v39;
  return result;
}

_QWORD *fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _QWORD v5[3];
  int v6;

  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1ADBC4E1C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _QWORD v5[3];
  int v6;

  fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1ADBC4E88(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  char v6;
  _DWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  char v12;
  _DWORD *v13;
  int v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v16 = (uint64_t)&v16;
  v17 = &v16;
  v18 = 0;
  v7 = a1 + 2;
  v8 = (uint64_t *)(a1 + 4);
  v9 = &v16;
LABEL_2:
  v10 = *v8;
  v11 = v4;
  while (1)
  {
    v12 = v6;
    if ((v6 & 1) != 0)
    {
      if ((_DWORD *)v10 == v7)
        break;
      v4 = *(_DWORD *)(v10 + 16);
      goto LABEL_7;
    }
    v4 = *a1;
    if (!*a1)
      break;
LABEL_7:
    if (v11)
    {
      v13 = operator new(0x18uLL);
      v13[4] = v11;
      *(_QWORD *)v13 = &v16;
      *((_QWORD *)v13 + 1) = v9;
      *v9 = (uint64_t)v13;
      ++v5;
      v9 = (uint64_t *)v13;
      v17 = (uint64_t *)v13;
      v18 = v5;
    }
    v6 = 1;
    v11 = v4;
    if ((v12 & 1) != 0)
    {
      v8 = (uint64_t *)(v10 + 8);
      goto LABEL_2;
    }
  }
  v14 = a1[8];
  *(_DWORD *)a2 = v11;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)&v16);
  *(_DWORD *)(a2 + 32) = v14;
  return std::__list_imp<char *>::clear(&v16);
}

void sub_1ADBC4F9C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::Times<int,(fst::StringType)0>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t *v27;
  BOOL v28;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *result;
  char v34;
  uint64_t *i;
  uint64_t v36;
  char v37;
  int v38;

  if (*a1 && (*a1 == -2 ? (v6 = *((_QWORD *)a1 + 3) == 0) : (v6 = 0), v6)
    || *(_DWORD *)a2 && (*(_DWORD *)a2 == -2 ? (v7 = *(_QWORD *)(a2 + 24) == 0) : (v7 = 0), v7))
  {
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)0>::NoWeight();
  }
  else
  {
    v8 = fst::StringWeight<int,(fst::StringType)0>::Zero();
    v9 = *a1;
    if (*a1)
      v10 = *((_QWORD *)a1 + 3) + 1;
    else
      v10 = 0;
    if (*(_DWORD *)v8)
      v11 = *(_QWORD *)(v8 + 24) + 1;
    else
      v11 = 0;
    if (v10 != v11)
      goto LABEL_32;
    v12 = 0;
    v13 = (uint64_t *)(a1 + 4);
    v14 = (uint64_t *)(v8 + 16);
    v15 = v9 && v9 == *(_DWORD *)v8;
    v16 = !v15;
    v17 = !v16;
    while (1)
    {
      v18 = *v13;
      v19 = *v14;
      if ((v12 & 1) == 0 && !v17)
        break;
      if ((int *)v18 == a1 + 2)
        goto LABEL_61;
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16))
        goto LABEL_32;
      v13 = (uint64_t *)(v18 + 8);
      v14 = (uint64_t *)(v19 + 8);
      v12 = 1;
    }
    if (v9)
    {
LABEL_32:
      v21 = fst::StringWeight<int,(fst::StringType)0>::Zero();
      v22 = *(_DWORD *)a2;
      if (*(_DWORD *)a2)
        v23 = *(_QWORD *)(a2 + 24) + 1;
      else
        v23 = 0;
      if (*(_DWORD *)v21)
        v24 = *(_QWORD *)(v21 + 24) + 1;
      else
        v24 = 0;
      if (v23 != v24)
        goto LABEL_52;
      v25 = 0;
      v26 = (uint64_t *)(a2 + 16);
      v27 = (uint64_t *)(v21 + 16);
      v28 = v22 && v22 == *(_DWORD *)v21;
      v29 = !v28;
      v30 = !v29;
      while (1)
      {
        v31 = *v26;
        v32 = *v27;
        if ((v25 & 1) == 0 && !v30)
          break;
        if (v31 == a2 + 8)
          goto LABEL_61;
        if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16))
          goto LABEL_52;
        v26 = (uint64_t *)(v31 + 8);
        v27 = (uint64_t *)(v32 + 8);
        v25 = 1;
      }
      if (v22)
      {
LABEL_52:
        *(_DWORD *)a3 = *a1;
        result = std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(a1 + 2));
        v34 = 0;
        for (i = (uint64_t *)(a2 + 16); ; i = (uint64_t *)(v36 + 8))
        {
          v36 = *i;
          do
          {
            v37 = v34;
            if ((v34 & 1) != 0)
            {
              if (v36 == a2 + 8)
                return result;
              v38 = *(_DWORD *)(v36 + 16);
            }
            else
            {
              v38 = *(_DWORD *)a2;
              if (!*(_DWORD *)a2)
                return result;
            }
            result = fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a3, v38);
            v34 = 1;
          }
          while ((v37 & 1) == 0);
        }
      }
    }
LABEL_61:
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)0>::Zero();
  }
  *(_DWORD *)a3 = *v20;
  return std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v20 + 2));
}

void sub_1ADBC51B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)0>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::StringWeight<int,(fst::StringType)0>::StringWeight(v2, -2);
    fst::StringWeight<int,(fst::StringType)0>::NoWeight(void)::no_weight = v2;
  }
  return fst::StringWeight<int,(fst::StringType)0>::NoWeight(void)::no_weight;
}

void sub_1ADBC5244(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C40CA22B68ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight(uint64_t a1, int *a2, float a3)
{
  int v6;
  _QWORD v7[3];

  v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::ProductWeight(a1, &v6, a3);
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1ADBC52E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::ProductWeight(uint64_t a1, int *a2, float a3)
{
  int v6;
  _QWORD v7[3];

  v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  *(_DWORD *)a1 = v6;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)v7);
  *(float *)(a1 + 32) = a3;
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1ADBC5360(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  uint64_t v20;
  fst *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  fst *v28;
  _QWORD *v29;
  fst *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  fst *v39;
  _QWORD *v40;
  _QWORD *v41;
  fst *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t result;
  void *__p[2];
  char v48;
  char v49;
  __int16 v50;
  void *v51[3];
  uint64_t v52[2];
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v5 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v6 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v20 = operator new();
    *(_DWORD *)(v20 + 8) = 5;
    *(_BYTE *)(v20 + 12) = 0;
    *(_QWORD *)v20 = &unk_1E5D1EEB0;
    *(_QWORD *)(v20 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v20;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v52, "INFO");
    v21 = fst::LogMessage::LogMessage((fst *)v51, (uint64_t)v52);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"AutoQueue: using state-order discipline", 39);
    goto LABEL_17;
  }
  if ((v6 & 0x800000000) != 0)
  {
    v24 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(v24, a2);
    *(_QWORD *)(a1 + 16) = v24;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v52, "INFO");
    v25 = fst::LogMessage::LogMessage((fst *)v51, (uint64_t)v52);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"AutoQueue: using top-order discipline", 37);
LABEL_17:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v51);
    if (SHIBYTE(v53) < 0)
    {
      v23 = (void *)v52[0];
LABEL_46:
      operator delete(v23);
    }
    return a1;
  }
  v55 = 0;
  v52[0] = (uint64_t)v5;
  v52[1] = 0;
  v53 = 0;
  v54 = &v55;
  fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(a2, v52, 0);
  v7 = *(int **)(a1 + 48);
  v8 = *(int **)(a1 + 56);
  if (v7 != v8)
  {
    v9 = v7 + 1;
    if (v7 + 1 != v8)
    {
      v10 = *v7;
      v11 = v7 + 1;
      do
      {
        v13 = *v11++;
        v12 = v13;
        v14 = v10 < v13;
        if (v10 <= v13)
          v10 = v12;
        if (v14)
          v7 = v9;
        v9 = v11;
      }
      while (v11 != v8);
    }
  }
  v15 = *v7;
  v16 = *v7 + 1;
  std::vector<fst::QueueType>::vector(v51, v16);
  v50 = 0;
  fst::AutoQueue<int>::SccQueueType<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>(a2, v5, (uint64_t)v51, 0, &v50, (_BYTE *)&v50 + 1);
  if (HIBYTE(v50))
  {
    v17 = operator new();
    *(_DWORD *)(v17 + 8) = 2;
    *(_BYTE *)(v17 + 12) = 0;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_QWORD *)v17 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v17;
    if (FLAGS_v < 2)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v18 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v19 = (_QWORD *)fst::cerr(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_24:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
    if (v48 < 0)
      operator delete(__p[0]);
LABEL_44:
    v23 = v51[0];
    if (v51[0])
    {
      v51[1] = v51[0];
      goto LABEL_46;
    }
    return a1;
  }
  if ((_BYTE)v50)
  {
    v27 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue(v27, (uint64_t)v5);
    *(_QWORD *)(a1 + 16) = v27;
    if (FLAGS_v < 2)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v28 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"AutoQueue: using top-order discipline", 37);
    goto LABEL_24;
  }
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v30 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v31 = (_QWORD *)fst::cerr(v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
    if (v48 < 0)
      operator delete(__p[0]);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v16);
  if (v15 < 0)
  {
LABEL_43:
    v45 = operator new();
    *(_DWORD *)(v45 + 8) = 6;
    *(_BYTE *)(v45 + 12) = 0;
    *(_QWORD *)v45 = &unk_1E5D22CF0;
    *(_QWORD *)(v45 + 16) = v4;
    *(_QWORD *)(v45 + 24) = v5;
    *(_QWORD *)(v45 + 32) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v45 + 48) = 0;
    *(_QWORD *)(v45 + 56) = 0;
    *(_QWORD *)(v45 + 40) = 0;
    *(_QWORD *)(a1 + 16) = v45;
    goto LABEL_44;
  }
  v32 = 0;
  while (1)
  {
    v33 = *((_DWORD *)v51[0] + v32);
    if (v33)
      break;
    *(_QWORD *)(*v4 + 8 * v32) = 0;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v42 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v43 = (_QWORD *)fst::cerr(v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"AutoQueue: SCC #", 16);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": using trivial discipline", 26);
LABEL_40:
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
      if (v48 < 0)
        operator delete(__p[0]);
    }
LABEL_42:
    if (v16 == ++v32)
      goto LABEL_43;
  }
  if (v33 == 2)
  {
    v38 = operator new();
    *(_DWORD *)(v38 + 8) = 2;
    *(_BYTE *)(v38 + 12) = 0;
    *(_OWORD *)(v38 + 16) = 0u;
    *(_OWORD *)(v38 + 32) = 0u;
    *(_OWORD *)(v38 + 48) = 0u;
    *(_QWORD *)v38 = &unk_1E5D27B60;
    *(_QWORD *)(*v4 + 8 * v32) = v38;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v39 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v40 = (_QWORD *)fst::cerr(v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"AutoQueue: SCC #", 16);
      v41 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": using LIFO disciplle", 22);
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  if (v33 != 3)
  {
    v34 = operator new();
    *(_DWORD *)(v34 + 8) = 1;
    *(_BYTE *)(v34 + 12) = 0;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_QWORD *)v34 = &unk_1E5D23A28;
    *(_QWORD *)(*v4 + 8 * v32) = v34;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v35 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v36 = (_QWORD *)fst::cerr(v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: SCC #", 16);
      v37 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": using FIFO disciplle", 22);
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  result = operator new();
  __break(1u);
  return result;
}

void sub_1ADBC59BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  void **v28;
  void *v30;
  void *v31;

  if (a14 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  v30 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v26 + 56) = v30;
    operator delete(v30);
  }
  v31 = *v27;
  if (*v27)
  {
    *(_QWORD *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  _QWORD v23[3];
  _DWORD *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;

  *a5 = 1;
  *a6 = 1;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    v12 = v11 >> 2;
    if (v12 <= 1)
      v12 = 1;
    bzero(*(void **)a3, 4 * v12);
  }
  v28 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v26);
  while (1)
  {
    result = v26;
    if (!v26)
    {
      if ((int)v28 >= v27)
        return result;
LABEL_11:
      v15 = v28;
      goto LABEL_12;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
    result = v26;
    if (v14)
      break;
    if (!v26)
      goto LABEL_11;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v26 + 24))();
LABEL_12:
    v25 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v15, v23);
    v16 = (int)v15;
    while (1)
    {
      if (!v23[0])
      {
        if (v25 >= v23[2])
          goto LABEL_32;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v23[0] + 24))(v23[0]))
        break;
      if (v23[0])
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v23[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      v17 = v23[1] + 56 * v25;
LABEL_19:
      v18 = *(int *)(*a2 + 4 * v16);
      if ((_DWORD)v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 48)))
      {
        v19 = *(_DWORD **)a3;
        if (!a4
          || (v20 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One(),
              fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::operator()(a4, v17 + 8, v20)))
        {
          v21 = 1;
          goto LABEL_25;
        }
        if ((v19[v18] | 2) == 2)
        {
          v21 = 3;
LABEL_25:
          v19[v18] = v21;
        }
        *a5 = 0;
      }
      *a6 = 0;
      if (v23[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v23[0] + 40))(v23[0]);
      else
        ++v25;
    }
    if (v23[0])
    {
      (*(void (**)(void))(*(_QWORD *)v23[0] + 8))();
      goto LABEL_34;
    }
LABEL_32:
    if (v24)
      --*v24;
LABEL_34:
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
    else
      ++v28;
  }
  if (v26)
    return (*(uint64_t (**)(void))(*(_QWORD *)v26 + 8))();
  return result;
}

void sub_1ADBC5D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::TopOrderVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1ADBC5ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::TopOrderVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 56 * v12[5];
            v18 = *(int *)(v17 + 48);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 48);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 48);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D19828;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADBC661C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19828;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Type()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v2, "left_gallic");
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Type(void)::type = (uint64_t)v2;
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Type(void)::type;
}

void sub_1ADBC6738(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  _BOOL8 v25;
  int v27;
  _QWORD v28[3];
  float v29;
  float v30;
  _QWORD v31[3];
  float v32;

  fst::Plus<int>(a2, a3, (uint64_t)&v30);
  v5 = *(float *)(a2 + 32);
  v6 = *(float *)(a3 + 32);
  if (v5 != INFINITY)
  {
    if (v6 == INFINITY)
    {
      v6 = *(float *)(a2 + 32);
    }
    else if (v5 <= v6)
    {
      v8 = expf(-(float)(v6 - v5));
      v6 = v5 - logf(v8 + 1.0);
    }
    else
    {
      v7 = expf(-(float)(v5 - v6));
      v6 = v6 - logf(v7 + 1.0);
    }
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v27, (int *)&v30, v6);
  std::__list_imp<char *>::clear(v31);
  if (v27)
    v9 = v28[2] + 1;
  else
    v9 = 0;
  v10 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
    v11 = *(_QWORD *)(a2 + 24) + 1;
  else
    v11 = 0;
  if (v9 != v11)
    goto LABEL_42;
  v12 = v28[1];
  v13 = *(_QWORD *)(a2 + 16);
  if (v27)
    v14 = v27 == v10;
  else
    v14 = 0;
  v15 = !v14;
  v16 = *(_QWORD *)(a2 + 16);
  if (v15 != 1)
  {
    while ((_QWORD *)v12 != v28)
    {
      if (*(_DWORD *)(v12 + 16) != *(_DWORD *)(v16 + 16))
        goto LABEL_42;
      v12 = *(_QWORD *)(v12 + 8);
      v16 = *(_QWORD *)(v16 + 8);
    }
  }
  else if (v27)
  {
LABEL_42:
    v25 = 0;
    goto LABEL_43;
  }
  v30 = v29;
  v32 = 0.0;
  v17 = *(float *)(a2 + 32);
  v32 = v17;
  if (v29 != v17)
    goto LABEL_42;
  if (*(_DWORD *)a3)
    v18 = *(_QWORD *)(a3 + 24) + 1;
  else
    v18 = 0;
  if (v9 == v18)
  {
    v19 = 0;
    v20 = (uint64_t *)(a3 + 16);
    if (v10)
      v21 = v10 == *(_DWORD *)a3;
    else
      v21 = 0;
    v22 = !v21;
    v23 = v22 ^ 1;
    while (1)
    {
      v24 = *v20;
      if ((v19 & 1) == 0 && !v23)
        break;
      if (v13 == a2 + 8)
        goto LABEL_46;
      if (*(_DWORD *)(v13 + 16) != *(_DWORD *)(v24 + 16))
        goto LABEL_45;
      v13 = *(_QWORD *)(v13 + 8);
      v20 = (uint64_t *)(v24 + 8);
      v19 = 1;
    }
    if (v10)
      goto LABEL_45;
LABEL_46:
    v30 = v17;
    v32 = 0.0;
    v32 = *(float *)(a3 + 32);
    v25 = v17 != v32;
  }
  else
  {
LABEL_45:
    v25 = 1;
  }
LABEL_43:
  std::__list_imp<char *>::clear(v28);
  return v25;
}

void sub_1ADBC69A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1ADBC6C24(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::ShortestDistanceState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::ShortestDistance(_QWORD *a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  char v11;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1) != -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v2 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v3 = (_QWORD *)fst::cerr(v2);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ShortestDistance: Weight needs to be right distributive: ", 57);
    v5 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Type();
    v6 = *(char *)(v5 + 23);
    if (v6 >= 0)
      v7 = v5;
    else
      v7 = *(_QWORD *)v5;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(v5 + 23);
    else
      v8 = *(_QWORD *)(v5 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    goto LABEL_15;
  }
  if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
LABEL_15:
    *((_BYTE *)a1 + 116) = 1;
}

void sub_1ADBC6D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *result) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
    return std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__append(result, v7, a3);
  if (!v6)
  {
    v8 = *result + 40 * a2;
    if (v4 != v8)
    {
      do
      {
        v9 = v4 - 40;
        result = std::__list_imp<char *>::clear((_QWORD *)(v4 - 32));
        v4 = v9;
      }
      while (v9 != v8);
    }
    v3[1] = v8;
  }
  return result;
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::NoWeight();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::NoWeight(void)::no_weight = v2;
  }
  return fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::NoWeight(void)::no_weight;
}

void sub_1ADBC6EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_DWORD *)(a7 + v11 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((_QWORD *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADBC6FDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 8;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__append(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = *(result - 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = v9 + 40 * a2;
      v16 = 40 * a2;
      do
      {
        *(_DWORD *)v9 = *a3;
        result = std::list<int>::list((_QWORD *)(v9 + 8), (uint64_t)(a3 + 2));
        *(_DWORD *)(v9 + 32) = a3[8];
        v9 += 40;
        v16 -= 40;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[40 * v10];
    v19 = v18;
    v20 = &v14[40 * v13];
    std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__construct_at_end(&v17, a2, a3);
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, &v17);
    return (_QWORD *)std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_1ADBC7154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__construct_at_end(_QWORD *result, uint64_t a2, _DWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = result[2];
  if (a2)
  {
    v6 = v4 + 40 * a2;
    v7 = (uint64_t)(a3 + 2);
    v8 = 40 * a2;
    do
    {
      *(_DWORD *)v4 = *a3;
      result = std::list<int>::list((_QWORD *)(v4 + 8), v7);
      *(_DWORD *)(v4 + 32) = a3[8];
      v4 += 40;
      v8 -= 40;
    }
    while (v8);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1ADBC71F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::NoWeight();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::NoWeight(void)::no_weight = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1ADBC7290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)0>::NoWeight();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 2143289344;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::NoWeight(void)::no_weight = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1ADBC738C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__append(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = *(result - 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = v9 + 40 * a2;
      v16 = 40 * a2;
      do
      {
        *(_DWORD *)v9 = *a3;
        result = std::list<int>::list((_QWORD *)(v9 + 8), (uint64_t)(a3 + 2));
        *(_DWORD *)(v9 + 32) = a3[8];
        v9 += 40;
        v16 -= 40;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[40 * v10];
    v19 = v18;
    v20 = &v14[40 * v13];
    std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__construct_at_end(&v17, a2, a3);
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__swap_out_circular_buffer(a1, &v17);
    return (_QWORD *)std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_1ADBC7528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__construct_at_end(_QWORD *result, uint64_t a2, _DWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = result[2];
  if (a2)
  {
    v6 = v4 + 40 * a2;
    v7 = (uint64_t)(a3 + 2);
    v8 = 40 * a2;
    do
    {
      *(_DWORD *)v4 = *a3;
      result = std::list<int>::list((_QWORD *)(v4 + 8), v7);
      *(_DWORD *)(v4 + 32) = a3[8];
      v4 += 40;
      v8 -= 40;
    }
    while (v8);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1ADBC75C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::NoWeight();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::NoWeight(void)::no_weight = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1ADBC7664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)1>::NoWeight();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 2143289344;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::NoWeight(void)::no_weight = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1ADBC7760(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[40 * v9];
  *(_DWORD *)v11 = *a2;
  std::list<int>::list((_QWORD *)v11 + 1, (uint64_t)(a2 + 2));
  *((_DWORD *)v11 + 8) = a2[8];
  v15 += 40;
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADBC78A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _QWORD v5[3];
  int v6;

  fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Reverse(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v5);
  *(_DWORD *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v5);
}

void sub_1ADBC7914(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Reverse@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  char v6;
  _DWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  char v12;
  _DWORD *v13;
  int v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v16 = (uint64_t)&v16;
  v17 = &v16;
  v18 = 0;
  v7 = a1 + 2;
  v8 = (uint64_t *)(a1 + 4);
  v9 = &v16;
LABEL_2:
  v10 = *v8;
  v11 = v4;
  while (1)
  {
    v12 = v6;
    if ((v6 & 1) != 0)
    {
      if ((_DWORD *)v10 == v7)
        break;
      v4 = *(_DWORD *)(v10 + 16);
      goto LABEL_7;
    }
    v4 = *a1;
    if (!*a1)
      break;
LABEL_7:
    if (v11)
    {
      v13 = operator new(0x18uLL);
      v13[4] = v11;
      *(_QWORD *)v13 = &v16;
      *((_QWORD *)v13 + 1) = v9;
      *v9 = (uint64_t)v13;
      ++v5;
      v9 = (uint64_t *)v13;
      v17 = (uint64_t *)v13;
      v18 = v5;
    }
    v6 = 1;
    v11 = v4;
    if ((v12 & 1) != 0)
    {
      v8 = (uint64_t *)(v10 + 8);
      goto LABEL_2;
    }
  }
  v14 = a1[8];
  *(_DWORD *)a2 = v11;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)&v16);
  *(_DWORD *)(a2 + 32) = v14;
  return std::__list_imp<char *>::clear(&v16);
}

void sub_1ADBC7A28(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 40;
        std::__list_imp<char *>::clear((_QWORD *)v4 - 4);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ArcMapFst(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v8[8];
  uint64_t v9;

  v6 = operator new();
  v8[0] = 1;
  v9 = 0;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ArcMapFstImpl(v6, a2, a3, (uint64_t)v8);
  *a1 = &unk_1E5D230E8;
  a1[1] = v6;
  return a1;
}

void sub_1ADBC7B34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D24010;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D230E8;
  return v4;
}

void sub_1ADBC7CEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::StateIterator(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1ADBC7D78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CacheBaseImpl(a1, a4) = &unk_1E5D1B2C0;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(_QWORD *)(a1 + 144) = operator new();
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Init(a1);
  return a1;
}

void sub_1ADBC7E28(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Init(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 112))(*(_QWORD *)(a1 + 136));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v2)
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      v4 = 0;
    *(_QWORD *)(a1 + 40) = v4;
  }
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 120))(*(_QWORD *)(a1 + 136));
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 != v5)
  {
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v5)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    else
      v7 = 0;
    *(_QWORD *)(a1 + 48) = v7;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if ((_DWORD)result == -1)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 0x3FFFFFFF0004, 0);
    *(_QWORD *)(a1 + 8) = result & 0x3FFCFFFF0007 | *(_QWORD *)(a1 + 8) & 4 | 0x200000000;
    if (*(_DWORD *)(a1 + 156) == 2)
      *(_DWORD *)(a1 + 160) = 0;
  }
  return result;
}

void sub_1ADBC7FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

void sub_1ADBC8120(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~ArcMapFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D1B2C0;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3)
      MEMORY[0x1AF44D190](v3, 0xC400A2AC0F1);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl((_QWORD *)a1);
}

float fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  int v4;
  float v5;
  int v6;
  char *MutableState;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) != 0)goto LABEL_22;
  v4 = *(_DWORD *)(a1 + 156);
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      if (*(_DWORD *)(a1 + 160) == a2)
        v5 = 0.0;
      else
        v5 = INFINITY;
LABEL_20:
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      *(float *)MutableState = v5;
      goto LABEL_21;
    }
    v8 = *(_QWORD *)(a1 + 136);
    v6 = *(_DWORD *)(a1 + 160);
LABEL_11:
    v10 = v6 != -1 && v6 <= a2;
    if ((*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, (a2 - v10)) == INFINITY)
      v5 = INFINITY;
    else
      v5 = 0.0;
    goto LABEL_20;
  }
  v6 = *(_DWORD *)(a1 + 160);
  if (v6 != a2)
  {
    v8 = *(_QWORD *)(a1 + 136);
    goto LABEL_11;
  }
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  *(_DWORD *)MutableState = 0;
LABEL_21:
  *((_DWORD *)MutableState + 12) |= 9u;
LABEL_22:
  v11 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v11 + 76) == a2)
    v12 = v11 + 80;
  else
    v12 = *(_QWORD *)(v11 + 8) + 8 * (a2 + 1);
  return **(float **)v12;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Expand(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  int v12;
  BOOL v14;
  float v15;
  char *MutableState;
  int v17;
  int v18;
  _BOOL4 v20;
  int v21;
  _BOOL4 v23;
  float v24;
  unsigned int v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  int v32;
  float v33;

  v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  v5 = *(_QWORD *)(a1 + 136);
  v7 = v4 != -1 && v4 <= a2;
  v31 = 0;
  (*(void (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)v5 + 136))(v5, (a2 - v7), &v28);
  while (1)
  {
    if (!(_QWORD)v28)
    {
      if (v31 >= v29)
        goto LABEL_31;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v28 + 24))(v28))
      break;
    if ((_QWORD)v28)
    {
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v28 + 32))();
      goto LABEL_16;
    }
LABEL_15:
    v8 = *((_QWORD *)&v28 + 1) + 16 * v31;
LABEL_16:
    v9 = *(_QWORD *)v8;
    v10 = *(float *)(v8 + 8);
    LODWORD(v11) = *(_DWORD *)(v8 + 12);
    v12 = *(_DWORD *)(a1 + 160);
    if (v12 != -1 && v12 <= (int)v11)
      v11 = (v11 + 1);
    else
      v11 = v11;
    if ((int)v11 >= *(_DWORD *)(a1 + 164))
      *(_DWORD *)(a1 + 164) = v11 + 1;
    v33 = v10;
    v32 = 2139095040;
    v14 = v10 == INFINITY;
    v15 = INFINITY;
    if (!v14)
      v15 = 0.0;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = LODWORD(v15) | (unint64_t)(v11 << 32);
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v27);
    if ((_QWORD)v28)
      (*(void (**)(_QWORD))(*(_QWORD *)v28 + 40))(v28);
    else
      ++v31;
  }
  if ((_QWORD)v28)
  {
    (*(void (**)(void))(*(_QWORD *)v28 + 8))();
    goto LABEL_33;
  }
LABEL_31:
  if (v30)
    --*v30;
LABEL_33:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0|| (LODWORD(v28) = fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Final(a1, a2), LODWORD(v27) = 2139095040, *(float *)&v28 == INFINITY))
  {
    v17 = *(_DWORD *)(a1 + 156);
    if (v17 == 2)
    {
      v21 = *(_DWORD *)(a1 + 160);
      v23 = v21 != -1 && v21 <= a2;
      LODWORD(v28) = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v23));
      LODWORD(v27) = 2139095040;
      v24 = INFINITY;
      if (*(float *)&v28 != INFINITY)
        v24 = 0.0;
      *(float *)&v28 = v24;
      LODWORD(v27) = 2139095040;
      if (v24 != INFINITY)
      {
        v25 = *(_DWORD *)(a1 + 160);
        *(_QWORD *)&v28 = 0;
        *((_QWORD *)&v28 + 1) = __PAIR64__(v25, LODWORD(v24));
        v26 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v26, &v28);
      }
    }
    else if (v17 == 1)
    {
      v18 = *(_DWORD *)(a1 + 160);
      v20 = v18 != -1 && v18 <= a2;
      LODWORD(v28) = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v20));
      LODWORD(v27) = 2139095040;
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADBC8634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  }
  else if (a14)
  {
    --*a14;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 16);
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D24010;
  if (a3)
  {
    v5 = operator new();
    fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ArcMapFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADBC87B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D1B2C0;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  *(_QWORD *)(a1 + 144) = operator new();
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Init(a1);
  return a1;
}

void sub_1ADBC885C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1C928;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1ADBC88E0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1C928;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1C928;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Done_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) & 1) != 0)
      return *(_BYTE *)(a1 + 44) == 0;
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(_BYTE *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ArcMapFst(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v8[8];
  uint64_t v9;

  v6 = operator new();
  v8[0] = 1;
  v9 = 0;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ArcMapFstImpl(v6, a2, a3, (uint64_t)v8);
  *a1 = &unk_1E5D22E28;
  a1[1] = v6;
  return a1;
}

void sub_1ADBC8ACC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D23D50;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D22E28;
  return v4;
}

void sub_1ADBC8C84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::StateIterator(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1ADBC8D10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CacheBaseImpl(a1, a4) = &unk_1E5D1B1E0;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(_QWORD *)(a1 + 144) = operator new();
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Init(a1);
  return a1;
}

void sub_1ADBC8DC0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

unint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Init(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  unint64_t v7;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 112))(*(_QWORD *)(a1 + 136));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v2)
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      v4 = 0;
    *(_QWORD *)(a1 + 40) = v4;
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = 0;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if ((_DWORD)result == -1)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 0x3FFFFFFF0004, 0);
    result = fst::ProjectProperties(v7, 1);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | result & 0x3FFCFFFF0007;
    if (*(_DWORD *)(a1 + 156) == 2)
      *(_DWORD *)(a1 + 160) = 0;
  }
  return result;
}

void sub_1ADBC8F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0)|| (fst::ProjectProperties(0, 1) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D22908;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B7C8;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorCacheStore((_QWORD *)v4, (_BYTE *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 72) = v5 == 0;
  *(_DWORD *)(v4 + 76) = -1;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = *(_BYTE *)a2;
  if (v5 <= 0x1FA0)
    v5 = 8096;
  *(_QWORD *)(v4 + 96) = v5;
  *(_BYTE *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

void sub_1ADBC90CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorCacheStore(_QWORD *a1, _BYTE *a2)
{
  *(_BYTE *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1ADBC9188(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  std::__list_imp<char *>::clear(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  if (v2 != a1[1])
  {
    v3 = 0;
    v2 = a1[1];
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(_QWORD *)(v2 + 8 * v3++));
      v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return std::__list_imp<char *>::clear(a1 + 4);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B7C8;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~FstImpl((uint64_t)a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::~VectorCacheStore(_QWORD *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~ArcMapFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D1B1E0;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3)
      MEMORY[0x1AF44D190](v3, 0xC400A2AC0F1);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl((_QWORD *)a1);
}

_QWORD *fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  int *v7;
  int v8;
  int *v9;
  _QWORD *v10;
  int v11;
  _BOOL4 v13;
  float v14;
  fst *v15;
  _QWORD *v16;
  int *v17;
  _QWORD *v18;
  _BOOL4 v20;
  float v21;
  _QWORD *v22;
  int *v23;
  int v25;
  _QWORD v26[3];
  int v27;
  int v28;
  _QWORD v29[3];
  int v30;
  int v31;
  _QWORD v32[3];
  int v33;
  int v34;
  _QWORD v35[3];
  int v36;
  int v37;
  _QWORD v38[3];
  int v39;
  void *v40;
  float v41;
  int v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  _BYTE v47[24];
  int v48;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    v6 = *(_DWORD *)(a1 + 156);
    if (v6 == 1)
    {
      v8 = *(_DWORD *)(a1 + 160);
      if (v8 != a2)
      {
        v20 = v8 != -1 && v8 <= a2;
        v21 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v20));
        v40 = 0;
        v41 = v21;
        v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          v23 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
          v28 = *v23;
          v22 = v29;
          std::list<int>::list(v29, (uint64_t)(v23 + 2));
          v30 = v23[8];
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(a1, a2, &v28);
        }
        else
        {
          v31 = v46;
          v22 = v32;
          std::list<int>::list(v32, (uint64_t)v47);
          v33 = v48;
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(a1, a2, &v31);
        }
        std::__list_imp<char *>::clear(v22);
        v18 = v47;
        goto LABEL_35;
      }
      v9 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
      v34 = *v9;
      v10 = v35;
      std::list<int>::list(v35, (uint64_t)(v9 + 2));
      v36 = v9[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(a1, a2, &v34);
    }
    else
    {
      if (v6 != 2)
      {
        v11 = *(_DWORD *)(a1 + 160);
        v13 = v11 != -1 && v11 <= a2;
        v14 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v13));
        v40 = 0;
        v41 = v14;
        v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(&v40, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(&v40, "ERROR");
          v15 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&v40);
          v16 = (_QWORD *)fst::cerr(v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
          if (v43 < 0)
            operator delete(v40);
          *(_QWORD *)(a1 + 8) |= 4uLL;
        }
        v37 = v46;
        std::list<int>::list(v38, (uint64_t)v47);
        v39 = v48;
        fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(a1, a2, &v37);
        std::__list_imp<char *>::clear(v38);
        v18 = v47;
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 160) == a2)
        v7 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
      else
        v7 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      v17 = v7;
      v25 = *v7;
      v10 = v26;
      std::list<int>::list(v26, (uint64_t)(v7 + 2));
      v27 = v17[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(a1, a2, &v25);
    }
    v18 = v10;
LABEL_35:
    std::__list_imp<char *>::clear(v18);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1ADBC961C(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v1 - 105));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  std::__list_imp<char *>::clear((_QWORD *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    v4 = a2 + 1;
    v6 = v2 + 8;
    v5 = *(_QWORD *)(v2 + 8);
    if (v4 >= (*(_QWORD *)(v6 + 8) - v5) >> 3)
      return 0;
    v3 = (uint64_t *)(v5 + 8 * v4);
  }
  v7 = *v3;
  if (!v7)
    return 0;
  v8 = *(_DWORD *)(v7 + 80);
  if ((v8 & 1) == 0)
    return 0;
  *(_DWORD *)(v7 + 80) = v8 | 8;
  return 1;
}

_QWORD *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  char *MutableState;
  int v5;
  _QWORD *result;
  int v7;
  _QWORD v8[3];
  int v9;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  v5 = a3[8];
  v9 = v5;
  *(_DWORD *)MutableState = v7;
  if (MutableState != (char *)&v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)MutableState + 1, v8[1], (uint64_t)v8);
    v5 = v9;
  }
  *((_DWORD *)MutableState + 8) = v5;
  result = std::__list_imp<char *>::clear(v8);
  *((_DWORD *)MutableState + 20) |= 9u;
  return result;
}

void sub_1ADBC9794(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _DWORD **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
  {
    v5 = (_DWORD **)(v4 + 80);
  }
  else
  {
    v6 = a2 + 1;
    v8 = v4 + 8;
    v7 = *(_QWORD *)(v4 + 8);
    if (v6 >= (*(_QWORD *)(v8 + 8) - v7) >> 3)
    {
      v9 = 0;
      goto LABEL_7;
    }
    v5 = (_DWORD **)(v7 + 8 * v6);
  }
  v9 = *v5;
LABEL_7:
  *(_DWORD *)a3 = *v9;
  result = std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v9 + 2));
  *(_DWORD *)(a3 + 32) = v9[8];
  return result;
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  char *MutableState;
  char *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *((_DWORD *)MutableState + 20);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 20) = v5 | 4;
      v6 = *((_QWORD *)MutableState + 8) - *((_QWORD *)MutableState + 7) + *(_QWORD *)(a1 + 112) + 88;
      *(_QWORD *)(a1 + 112) = v6;
      *(_BYTE *)(a1 + 104) = 1;
      if (v6 > *(_QWORD *)(a1 + 96))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  char *result;
  uint64_t v5;
  char *MutableState;

  v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2)
    return *(char **)(a1 + 80);
  if (!*(_BYTE *)(a1 + 72))
    return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 76) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
    *((_DWORD *)MutableState + 20) |= 4u;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::reserve((uint64_t *)MutableState + 7, 0x80uLL);
    return *(char **)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(v5 + 84))
  {
    *(_DWORD *)(v5 + 80) &= ~4u;
    *(_BYTE *)(a1 + 72) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 76) = a2;
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Reset(v5);
  result = *(char **)(a1 + 80);
  *((_DWORD *)result + 20) |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *MutableState;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  fst *v27;
  _QWORD *v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37[2];
  char v38;
  char v39;
  char v40;
  void *__p[2];
  char v42;

  if (*(_BYTE *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0)
        operator delete(__p[0]);
    }
    v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      v18 = *(_DWORD *)(v17 + 16);
      if (v18)
        v19 = v18 - 1;
      else
        v19 = *(_DWORD *)(a1 + 76);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::GetMutableState(a1, v19);
      v21 = *(_QWORD *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 21))
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v22 = *((_DWORD *)MutableState + 20);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              v23 = *((_QWORD *)MutableState + 8) - *((_QWORD *)MutableState + 7) + 88;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Delete((_QWORD *)a1);
            v17 = *(_QWORD *)(a1 + 56);
            continue;
          }
        }
        else
        {
          v22 = *((_DWORD *)MutableState + 20);
          if ((v22 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      *((_DWORD *)MutableState + 20) &= ~8u;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 112) <= v16)
    {
      v24 = *(_QWORD *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          v25 = *(_QWORD *)(a1 + 96);
          do
          {
            v25 *= 2;
            v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(_QWORD *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        v28 = (_QWORD *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      v30 = (_QWORD *)fst::cerr(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0)
        operator delete(v37[0]);
    }
  }
}

void sub_1ADBC9D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    v14 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v14);
  }
  else
  {
    v8 = *(char **)(v6 + 8 * a2);
    if (v8)
      return v8;
  }
  v8 = (char *)operator new(0x58uLL);
  v9 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  *(_DWORD *)v8 = *v9;
  std::list<int>::list((_QWORD *)v8 + 1, (uint64_t)(v9 + 2));
  *((_DWORD *)v8 + 8) = v9[8];
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = v8;
  if (*(_BYTE *)a1)
  {
    v10 = operator new(0x18uLL);
    v10[4] = a2;
    v12 = *(_QWORD *)(a1 + 32);
    v11 = (_QWORD *)(a1 + 32);
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *v11 = v10;
    ++v11[2];
  }
  return v8;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Reset(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  v3 = result;
  *(_DWORD *)a1 = *(_DWORD *)result;
  if (result != a1)
    result = (uint64_t)std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 8), *(_QWORD *)(result + 16), result + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v3 + 32);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4 != v5)
  {
    do
    {
      v6 = v4 - 56;
      result = (uint64_t)std::__list_imp<char *>::clear((_QWORD *)(v4 - 40));
      v4 = v6;
    }
    while (v6 != v5);
  }
  *(_QWORD *)(a1 + 64) = v5;
  return result;
}

void fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Delete(_QWORD *a1)
{
  int v1;

  v1 = *(_DWORD *)(a1[7] + 16);
  if (!v1 || v1 - 1 == *((_DWORD *)a1 + 19))
  {
    *((_DWORD *)a1 + 19) = -1;
    a1[10] = 0;
  }
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Delete(a1);
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Delete(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(_QWORD *)(a1[1] + 8 * *(int *)(a1[7] + 16)));
  v2 = a1[6];
  *(_QWORD *)(a1[1] + 8 * *(int *)(a1[7] + 16)) = 0;
  v3 = (uint64_t *)a1[7];
  v5 = *v3;
  v4 = v3[1];
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)v3[1] = v5;
  a1[6] = v2 - 1;
  a1[7] = v4;
  operator delete(v3);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 64) - *(_QWORD *)(*(_QWORD *)v5 + 56)) >> 3);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    v4 = a2 + 1;
    v6 = v2 + 8;
    v5 = *(_QWORD *)(v2 + 8);
    if (v4 >= (*(_QWORD *)(v6 + 8) - v5) >> 3)
      return 0;
    v3 = (uint64_t *)(v5 + 8 * v4);
  }
  v7 = *v3;
  if (!v7)
    return 0;
  v8 = *(_DWORD *)(v7 + 80);
  if ((v8 & 2) == 0)
    return 0;
  *(_DWORD *)(v7 + 80) = v8 | 8;
  return 1;
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Expand(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v7;
  __int128 *v8;
  int v9;
  int v10;
  uint64_t *MutableState;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  float v24;
  float v25;
  int v26;
  int v27;
  _BOOL4 v29;
  unsigned int v30;
  int v31;
  int v32;
  _BOOL4 v34;
  unsigned int v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  BOOL v44;
  _BOOL4 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  int v51;
  _QWORD v52[3];
  float v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  unint64_t v58;
  float v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  int v67;
  __int128 v68;

  v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs(a1, a2);
    return;
  }
  v5 = *(_QWORD *)(a1 + 136);
  v7 = v4 != -1 && v4 <= a2;
  v58 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v5 + 136))(v5, (a2 - v7), &v54);
  while (1)
  {
    if (!v54)
    {
      if (v58 >= v56)
        goto LABEL_28;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54))
      break;
    if (v54)
    {
      v8 = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)v54 + 32))();
      goto LABEL_16;
    }
LABEL_15:
    v8 = (__int128 *)(v55 + 16 * v58);
LABEL_16:
    v68 = *v8;
    v9 = HIDWORD(v68);
    v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= SHIDWORD(v68))
      v9 = HIDWORD(v68) + 1;
    if (v9 >= *(_DWORD *)(a1 + 164))
      *(_DWORD *)(a1 + 164) = v9 + 1;
    HIDWORD(v68) = v9;
    fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((float *)&v68, (uint64_t)&v61);
    MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::PushArc(MutableState, (uint64_t)&v61);
    std::__list_imp<char *>::clear(&v63);
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54);
    else
      ++v58;
  }
  if (v54)
  {
    (*(void (**)(void))(*(_QWORD *)v54 + 8))();
    goto LABEL_30;
  }
LABEL_28:
  if (v57)
    --*v57;
LABEL_30:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
LABEL_52:
    v26 = *(_DWORD *)(a1 + 156);
    if (v26 == 1)
    {
      v32 = *(_DWORD *)(a1 + 160);
      v34 = v32 != -1 && v32 <= a2;
      *(float *)&v35 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v34));
      v54 = 0;
      v55 = v35 | 0xFFFFFFFF00000000;
      fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((float *)&v54, (uint64_t)&v61);
      if (v61)
      {
        v36 = *(_DWORD *)(a1 + 160);
        if (v36 == -1)
        {
          v36 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v36;
          *(_DWORD *)(a1 + 164) = v36 + 1;
        }
        v67 = v36;
        v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::PushArc(v37, (uint64_t)&v61);
      }
      v14 = &v63;
      goto LABEL_96;
    }
    if (v26 != 2)
      goto LABEL_97;
    v27 = *(_DWORD *)(a1 + 160);
    v29 = v27 != -1 && v27 <= a2;
    *(float *)&v30 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v29));
    v54 = 0;
    v55 = v30 | 0xFFFFFFFF00000000;
    fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((float *)&v54, (uint64_t)&v61);
    if (v61)
    {
      v31 = v62;
    }
    else
    {
      v38 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      v31 = v62;
      if ((_DWORD)v62)
        v39 = v65 + 1;
      else
        v39 = 0;
      if (*(_DWORD *)v38)
        v40 = *(_QWORD *)(v38 + 24) + 1;
      else
        v40 = 0;
      if (v39 == v40)
      {
        v41 = 0;
        v42 = v64;
        v43 = (uint64_t *)(v38 + 16);
        v44 = (_DWORD)v62 && (_DWORD)v62 == *(_DWORD *)v38;
        v45 = !v44;
        v46 = !v45;
        while (1)
        {
          v47 = *v43;
          if ((v41 & 1) == 0 && !v46)
            break;
          if ((uint64_t *)v42 == &v63)
            goto LABEL_93;
          if (*(_DWORD *)(v42 + 16) != *(_DWORD *)(v47 + 16))
            goto LABEL_94;
          v42 = *(_QWORD *)(v42 + 8);
          v43 = (uint64_t *)(v47 + 8);
          v41 = 1;
        }
        if ((_DWORD)v62)
          goto LABEL_94;
LABEL_93:
        *(float *)&v54 = v66;
        LODWORD(v68) = 0;
        LODWORD(v68) = *(_DWORD *)(v38 + 32);
        if (v66 == *(float *)&v68)
          goto LABEL_95;
      }
    }
LABEL_94:
    v48 = v61;
    v51 = v31;
    std::list<int>::list(v52, (uint64_t)&v63);
    v53 = v66;
    v49 = *(_DWORD *)(a1 + 160);
    v54 = v48;
    LODWORD(v55) = v51;
    std::list<int>::list(&v56, (uint64_t)v52);
    v59 = v53;
    v60 = v49;
    v50 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::PushArc(v50, (uint64_t)&v54);
    std::__list_imp<char *>::clear(&v56);
    std::__list_imp<char *>::clear(v52);
LABEL_95:
    v14 = &v63;
LABEL_96:
    std::__list_imp<char *>::clear(v14);
    goto LABEL_97;
  }
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Final(a1, a2, (uint64_t)&v61);
  v13 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  v14 = &v62;
  if ((_DWORD)v61)
    v15 = v64 + 1;
  else
    v15 = 0;
  if (*(_DWORD *)v13)
    v16 = *(_QWORD *)(v13 + 24) + 1;
  else
    v16 = 0;
  if (v15 != v16)
    goto LABEL_96;
  v17 = 0;
  v18 = v63;
  v19 = (uint64_t *)(v13 + 16);
  if ((_DWORD)v61)
    v20 = (_DWORD)v61 == *(_DWORD *)v13;
  else
    v20 = 0;
  v21 = !v20;
  v22 = v21 ^ 1;
  while (1)
  {
    v23 = *v19;
    if ((v17 & 1) == 0 && !v22)
      break;
    if ((uint64_t *)v18 == &v62)
      goto LABEL_51;
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v23 + 16))
      goto LABEL_96;
    v18 = *(_QWORD *)(v18 + 8);
    v19 = (uint64_t *)(v23 + 8);
    v17 = 1;
  }
  if ((_DWORD)v61)
    goto LABEL_96;
LABEL_51:
  LODWORD(v54) = v65;
  LODWORD(v68) = 0;
  LODWORD(v68) = *(_DWORD *)(v13 + 32);
  v24 = *(float *)&v65;
  v25 = *(float *)&v68;
  std::__list_imp<char *>::clear(&v62);
  if (v24 == v25)
    goto LABEL_52;
LABEL_97:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs(a1, a2);
}

void sub_1ADBCA52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs(uint64_t a1, int a2)
{
  char *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = *((_QWORD *)MutableState + 7);
  v6 = *((_QWORD *)MutableState + 8) - v5;
  if (v6)
  {
    v7 = v6 / 56;
    v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 48);
    do
    {
      v11 = *v9;
      v9 += 14;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 20) |= 0xAu;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 104) && (*(_BYTE *)(a2 + 80) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56) + *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v4;
    if (v4 > *(_QWORD *)(a1 + 96))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GC(a1, (char *)a2, 0, 0.666);
  }
}

_QWORD *fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _DWORD *v4;

  v1 = result[7];
  v2 = result[8] - v1;
  if (v2)
  {
    v3 = v2 / 56;
    if (v3 <= 1)
      v3 = 1;
    v4 = (_DWORD *)(v1 + 4);
    do
    {
      if (!*(v4 - 1))
        ++result[5];
      if (!*v4)
        ++result[6];
      v4 += 14;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 7;
  v4 = a1[8];
  if (v4 >= a1[9])
  {
    result = std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const&>(v3, a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const&>((uint64_t)v3, a2);
    result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 40);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 48);
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D23D50;
  if (a3)
  {
    v5 = operator new();
    fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ArcMapFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADBCA8D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D1B1E0;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  *(_QWORD *)(a1 + 144) = operator new();
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Init(a1);
  return a1;
}

void sub_1ADBCA980(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v13[8];
  unint64_t v14;

  *(_QWORD *)a1 = &unk_1E5D22908;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B7C8;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v13[0] = *(_BYTE *)(a1 + 104);
  v14 = v7;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::VectorCacheStore((_QWORD *)v6, v13);
  v8 = v14;
  *(_BYTE *)(v6 + 72) = v14 == 0;
  *(_DWORD *)(v6 + 76) = -1;
  *(_QWORD *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 88) = v13[0];
  if (v8 <= 0x1FA0)
    v8 = 8096;
  *(_QWORD *)(v6 + 96) = v8;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v9 = 1;
  else
    v9 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v9;
  if (((a3 ^ 1) & 1) == 0)
  {
    v10 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::operator=(v6, v10);
    v11 = *(_OWORD *)(v10 + 104);
    *(_OWORD *)(v6 + 88) = *(_OWORD *)(v10 + 88);
    *(_OWORD *)(v6 + 104) = v11;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1ADBCAB0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  char *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x58uLL);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CacheState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::list<int>::list((_QWORD *)(a1 + 8), a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*>>((_QWORD *)(a1 + 56), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
  *(_QWORD *)(a1 + 80) = *(unsigned int *)(a2 + 80);
  return a1;
}

void sub_1ADBCADD8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADBCAE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a2 + v7;
      v9 = a4 + v7;
      *(_QWORD *)v9 = *(_QWORD *)(a2 + v7);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + v7 + 8);
      std::list<int>::list((_QWORD *)(a4 + v7 + 16), a2 + v7 + 16);
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(a2 + v7 + 40);
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (v8 + 56 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADBCAEFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 40;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1C828;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1ADBCAF90(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  int v6;
  uint64_t v7;
  _QWORD v8[5];

  v1 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    v2 = result;
    if (!*(_BYTE *)(result + 44))
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        if ((result & 1) != 0)
          return result;
        v1 = *(_QWORD *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      v3 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 136) + 32))(*(_QWORD *)(v1 + 136), *(unsigned int *)(v2 + 40));
      v4 = 0;
      v5 = v3;
      v6 = -1;
      fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((float *)&v4, (uint64_t)&v7);
      if (v7)
        *(_BYTE *)(v2 + 44) = 1;
      return (uint64_t)std::__list_imp<char *>::clear(v8);
    }
  }
  return result;
}

_QWORD *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1C828;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1C828;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Done_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) & 1) != 0)
      return *(_BYTE *)(a1 + 44) == 0;
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(_BYTE *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Next(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  ++*(_DWORD *)(a1 + 40);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if ((result & 1) == 0)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
        return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CheckSuperfinal(a1);
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 0;
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Reset(uint64_t a1)
{
  uint64_t v2;

  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  else
    *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(result + 120);
  if (*(_DWORD *)(v3 + 76) == a2)
    v4 = (uint64_t *)(v3 + 80);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8 * (a2 + 1));
  v5 = *v4;
  v8 = *(_DWORD *)(v5 + 84);
  v6 = (_DWORD *)(v5 + 84);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 7);
  v10 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v6 - 5) - v9) >> 3);
  if (*(_QWORD *)(v6 - 5) == v9)
    v9 = 0;
  *a3 = 0;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v6;
  *v6 = v7 + 1;
  return result;
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::One();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::One(void)::one = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::One(void)::one;
}

void sub_1ADBCB3A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)1>::One();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 0;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::One(void)::one = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::One(void)::one;
}

void sub_1ADBCB4A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight(uint64_t a1, int *a2, float a3)
{
  int v6;
  _QWORD v7[3];

  v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::ProductWeight(a1, &v6, a3);
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1ADBCB54C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::ProductWeight(uint64_t a1, int *a2, float a3)
{
  int v6;
  _QWORD v7[3];

  v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  *(_DWORD *)a1 = v6;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)v7);
  *(float *)(a1 + 32) = a3;
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1ADBCB5CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::Divide<int>@<X0>(int *a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  fst *v6;
  _QWORD *v7;
  _QWORD *v8;
  _DWORD *v9;
  void *__p[2];
  char v11;
  char v12;

  if (a3 == 1)
    return fst::DivideRight<int,(fst::StringType)1>(a1, a2, a4);
  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v6 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
  v7 = (_QWORD *)fst::cerr(v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"StringWeight::Divide: only right division is defined ", 53);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"for the right string semiring", 29);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
  if (v11 < 0)
    operator delete(__p[0]);
  v9 = (_DWORD *)fst::StringWeight<int,(fst::StringType)1>::NoWeight();
  *(_DWORD *)a4 = *v9;
  return std::list<int>::list((_QWORD *)(a4 + 8), (uint64_t)(v9 + 2));
}

{
  fst *v5;
  _QWORD *v6;
  _QWORD *v8;
  _DWORD *v9;
  void *__p[2];
  char v11;
  char v12;

  if (!a3)
    return fst::DivideLeft<int,(fst::StringType)0>(a1, a2, a4);
  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v5 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
  v6 = (_QWORD *)fst::cerr(v5);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"StringWeight::Divide: only left division is defined ", 52);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"for the left string semiring", 28);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
  if (v11 < 0)
    operator delete(__p[0]);
  v9 = (_DWORD *)fst::StringWeight<int,(fst::StringType)0>::NoWeight();
  *(_DWORD *)a4 = *v9;
  return std::list<int>::list((_QWORD *)(a4 + 8), (uint64_t)(v9 + 2));
}

void sub_1ADBCB6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::DivideRight<int,(fst::StringType)1>@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _QWORD *result;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t *v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int *v35;

  if (*a1 && (*a1 == -2 ? (v6 = *((_QWORD *)a1 + 3) == 0) : (v6 = 0), v6)
    || *a2 && (*a2 == -2 ? (v7 = *((_QWORD *)a2 + 3) == 0) : (v7 = 0), v7))
  {
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)1>::NoWeight();
    goto LABEL_31;
  }
  v8 = fst::StringWeight<int,(fst::StringType)1>::Zero();
  v9 = *a2;
  if (*a2)
    v10 = *((_QWORD *)a2 + 3) + 1;
  else
    v10 = 0;
  if (*(_DWORD *)v8)
    v11 = *(_QWORD *)(v8 + 24) + 1;
  else
    v11 = 0;
  if (v10 != v11)
  {
LABEL_33:
    result = (_QWORD *)fst::StringWeight<int,(fst::StringType)1>::Zero();
    v22 = *a1;
    if (*a1)
      v23 = *((_QWORD *)a1 + 3) + 1;
    else
      v23 = 0;
    if (*(_DWORD *)result)
      v24 = result[3] + 1;
    else
      v24 = 0;
    if (v23 != v24)
    {
LABEL_52:
      *(_QWORD *)(a3 + 8) = a3 + 8;
      *(_QWORD *)(a3 + 16) = a3 + 8;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)a3 = 0;
      if (v22)
      {
LABEL_57:
        v33 = 0;
        v34 = a1 + 2;
        while (1)
        {
          if (!*a2 || *((_QWORD *)a2 + 3) + 1 <= v33)
          {
            v35 = a1;
            if (v34 != *((_QWORD **)a1 + 2))
              v35 = (int *)(*v34 + 16);
            result = fst::StringWeight<int,(fst::StringType)1>::PushFront((_DWORD *)a3, *v35);
          }
          if (v34 == *((_QWORD **)a1 + 2))
            break;
          v34 = (_QWORD *)*v34;
          ++v33;
        }
      }
      return result;
    }
    v25 = 0;
    v26 = (uint64_t *)(a1 + 4);
    v27 = result + 2;
    if (v22)
      v28 = v22 == *(_DWORD *)result;
    else
      v28 = 0;
    v29 = !v28;
    v30 = v29 ^ 1;
    while (1)
    {
      v31 = *v26;
      v32 = *v27;
      if ((v25 & 1) == 0 && !v30)
        break;
      if ((int *)v31 == a1 + 2)
        goto LABEL_65;
      if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16))
        goto LABEL_52;
      v26 = (uint64_t *)(v31 + 8);
      v27 = (uint64_t *)(v32 + 8);
      v25 = 1;
    }
    if (v22)
    {
      *(_QWORD *)(a3 + 8) = a3 + 8;
      *(_QWORD *)(a3 + 16) = a3 + 8;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)a3 = 0;
      goto LABEL_57;
    }
LABEL_65:
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)1>::Zero();
LABEL_31:
    *(_DWORD *)a3 = *v20;
    return std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v20 + 2));
  }
  v12 = 0;
  v13 = (uint64_t *)(a2 + 4);
  v14 = (uint64_t *)(v8 + 16);
  if (v9)
    v15 = v9 == *(_DWORD *)v8;
  else
    v15 = 0;
  v16 = !v15;
  v17 = v16 ^ 1;
  while (1)
  {
    v18 = *v13;
    v19 = *v14;
    if ((v12 & 1) == 0 && !v17)
      break;
    if ((int *)v18 == a2 + 2)
      return (_QWORD *)fst::StringWeight<int,(fst::StringType)1>::StringWeight(a3, -2);
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16))
      goto LABEL_33;
    v13 = (uint64_t *)(v18 + 8);
    v14 = (uint64_t *)(v19 + 8);
    v12 = 1;
  }
  if (v9)
    goto LABEL_33;
  return (_QWORD *)fst::StringWeight<int,(fst::StringType)1>::StringWeight(a3, -2);
}

void sub_1ADBCB93C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FactorWeightFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;

  v4 = operator new();
  v6[0] = FLAGS_fst_default_cache_gc;
  v7 = FLAGS_fst_default_cache_gc_limit;
  v8 = 0x33A800000;
  v9 = 0;
  v10 = 0;
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FactorWeightFstImpl(v4, a2, (uint64_t)v6);
  *a1 = &unk_1E5D1E718;
  a1[1] = v4;
  return a1;
}

void sub_1ADBCB9EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~FactorWeightFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D26C38;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Start(uint64_t a1)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D1E718;
  return v4;
}

void sub_1ADBCBBA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D203E8;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C5E8;
  *a2 = v4;
  return result;
}

void sub_1ADBCBC60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  fst *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v21;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CacheBaseImpl(a1, a3) = &unk_1E5D21888;
  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  v7 = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a3 + 20);
  v8 = *(_DWORD *)(a3 + 28);
  v9 = *(_WORD *)(a3 + 32);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 136) = v6;
  *(_DWORD *)(a1 + 144) = v7;
  *(_DWORD *)(a1 + 156) = v8;
  *(_WORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "factor_weight");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::FactorWeightProperties(v10) & 0x3FFFFFFF0004;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 40) = v13;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v15 = *(_QWORD *)(a1 + 48);
  if (v15 != v14)
  {
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v14)
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    else
      v16 = 0;
    *(_QWORD *)(a1 + 48) = v16;
  }
  if (!*(_DWORD *)(a1 + 148))
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "WARNING");
    v17 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)&__str);
    v18 = (_QWORD *)fst::cerr(v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"FactorWeightFst: factor mode is set to 0: ", 42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"factoring neither arc weights nor final weights.", 48);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1ADBCBEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  void **v19;
  void *v21;

  if (a18 < 0)
    operator delete(__p);
  v21 = *v19;
  if (*v19)
  {
    v18[30] = v21;
    operator delete(v21);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)(v19 - 5));
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~FactorWeightFstImpl(uint64_t a1)
{
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~FactorWeightFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__list_imp<char *>::clear(v2 + 4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 48;
        std::__list_imp<char *>::clear((_QWORD *)v4 - 4);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~FactorWeightFstImpl(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &unk_1E5D21888;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(_QWORD *)(a1 + 240) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(a1 + 192);
  v5 = (void **)(a1 + 168);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl((_QWORD *)a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Start(uint64_t a1)
{
  uint64_t result;
  int v3;
  int *v4;
  int State;
  int v6;
  _QWORD v7[3];
  int v8;
  int v9[4];
  _QWORD v10[3];
  int v11;

  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 4))
  {
    *(_BYTE *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result != -1)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
    v4 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
    v6 = *v4;
    std::list<int>::list(v7, (uint64_t)(v4 + 2));
    v8 = v4[8];
    v9[0] = v3;
    v9[2] = v6;
    std::list<int>::list(v10, (uint64_t)v7);
    v11 = v8;
    State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FindState(a1, v9);
    std::__list_imp<char *>::clear(v10);
    std::__list_imp<char *>::clear(v7);
    *(_DWORD *)(a1 + 64) = State;
    *(_BYTE *)(a1 + 60) = 1;
    if (*(_DWORD *)(a1 + 68) <= State)
      *(_DWORD *)(a1 + 68) = State + 1;
    return *(unsigned int *)(a1 + 64);
  }
  return result;
}

void sub_1ADBCC238(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FindState(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40[4];
  _QWORD v41[3];
  int v42;
  int v43;
  float v44;

  if ((*(_BYTE *)(a1 + 148) & 2) != 0)
    goto LABEL_27;
  v4 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
  v5 = a2[2];
  v6 = v5 ? *((_QWORD *)a2 + 4) + 1 : 0;
  v7 = *(_DWORD *)v4 ? *(_QWORD *)(v4 + 24) + 1 : 0;
  if (v6 != v7)
    goto LABEL_27;
  v8 = 0;
  v9 = (uint64_t *)(a2 + 6);
  v10 = (uint64_t *)(v4 + 16);
  v11 = v5 && v5 == *(_DWORD *)v4;
  v12 = !v11;
  v13 = !v12;
  while (1)
  {
    v14 = *v9;
    v15 = *v10;
    if ((v8 & 1) == 0 && !v13)
      break;
    if ((int *)v14 == a2 + 4)
      goto LABEL_22;
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16))
      goto LABEL_27;
    v9 = (uint64_t *)(v14 + 8);
    v10 = (uint64_t *)(v15 + 8);
    v8 = 1;
  }
  if (v5)
    goto LABEL_27;
LABEL_22:
  v40[0] = 0;
  v40[0] = a2[10];
  v44 = 0.0;
  v44 = *(float *)(v4 + 32);
  v16 = *a2;
  if (*(float *)v40 != v44 || v16 == -1)
  {
LABEL_27:
    v18 = std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>((_QWORD *)(a1 + 192), a2);
    if (v18)
    {
      return *((unsigned int *)v18 + 16);
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 176);
      v20 = (uint64_t *)(a1 + 168);
      v19 = -1431655765 * ((v21 - *(_QWORD *)(a1 + 168)) >> 4);
      if (v21 >= *(_QWORD *)(a1 + 184))
      {
        v22 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const&>(v20, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const&>((uint64_t)v20, a2);
        v22 = v21 + 48;
      }
      *(_QWORD *)(a1 + 176) = v22;
      v23 = a2[2];
      v40[0] = *a2;
      v40[2] = v23;
      std::list<int>::list(v41, (uint64_t)(a2 + 4));
      v42 = a2[10];
      v43 = v19;
      std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>(a1 + 192, v40, v40);
      std::__list_imp<char *>::clear(v41);
    }
  }
  else
  {
    v25 = v16;
    v26 = *(char **)(a1 + 232);
    v27 = *(char **)(a1 + 240);
    v28 = (v27 - v26) >> 2;
    if (v28 <= v16)
    {
      v29 = (_QWORD *)(a1 + 248);
      do
      {
        if ((unint64_t)v27 >= *v29)
        {
          v31 = v28 + 1;
          if ((v28 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v32 = *v29 - (_QWORD)v26;
          if (v32 >> 1 > v31)
            v31 = v32 >> 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
            v33 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 248, v33);
            v26 = *(char **)(a1 + 232);
            v27 = *(char **)(a1 + 240);
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[4 * v28];
          *(_DWORD *)v35 = -1;
          v30 = v35 + 4;
          while (v27 != v26)
          {
            v36 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          *(_QWORD *)(a1 + 232) = v35;
          *(_QWORD *)(a1 + 240) = v30;
          *(_QWORD *)(a1 + 248) = &v34[4 * v33];
          if (v26)
          {
            operator delete(v26);
            v26 = *(char **)(a1 + 232);
          }
          else
          {
            v26 = v35;
          }
        }
        else
        {
          *(_DWORD *)v27 = -1;
          v30 = v27 + 4;
        }
        *(_QWORD *)(a1 + 240) = v30;
        v28 = (v30 - v26) >> 2;
        v16 = *a2;
        v27 = v30;
      }
      while (v28 <= *a2);
      v25 = v16;
    }
    if (*(_DWORD *)&v26[4 * v25] == -1)
    {
      v37 = *(_QWORD *)(a1 + 176);
      *(_DWORD *)&v26[4 * v25] = -1431655765 * ((v37 - *(_QWORD *)(a1 + 168)) >> 4);
      v38 = (uint64_t *)(a1 + 168);
      if (v37 >= *(_QWORD *)(a1 + 184))
      {
        v39 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const&>(v38, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const&>((uint64_t)v38, a2);
        v39 = v37 + 48;
      }
      *(_QWORD *)(a1 + 176) = v39;
      v16 = *a2;
      v26 = *(char **)(a1 + 232);
    }
    return *(unsigned int *)&v26[4 * v16];
  }
  return v19;
}

void sub_1ADBCC55C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v4 = *a2;
  *(_DWORD *)(v4 + 8) = a2[2];
  result = std::list<int>::list((_QWORD *)(v4 + 16), (uint64_t)(a2 + 4));
  *(_DWORD *)(v4 + 40) = a2[10];
  *(_QWORD *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1ADBCC5C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = (char *)&v10[12 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = (char *)&v10[12 * v9];
  *(_DWORD *)v11 = *a2;
  *((_DWORD *)v11 + 2) = a2[2];
  std::list<int>::list((_QWORD *)v11 + 2, (uint64_t)(a2 + 4));
  v10[12 * v4 + 10] = a2[10];
  v15 += 48;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADBCC6E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      *(_DWORD *)(v12 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((_QWORD *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 48;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADBCC800(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::__list_imp<char *>::clear((_QWORD *)(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>(_QWORD *a1, int *a2)
{
  int v4;
  uint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;

  v4 = *a2;
  v5 = fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(a2 + 2);
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = v5 + 7853 * v4;
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v5 + 7853 * v4;
    if (v7 >= *(_QWORD *)&v6)
      v10 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v7;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    v13 = (uint64_t)(a1 + 4);
    do
    {
      v14 = v12[1];
      if (v14 == v7)
      {
        if (fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual::operator()(v13, (uint64_t)(v12 + 2), (uint64_t)a2))
        {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v6)
            v14 %= *(_QWORD *)&v6;
        }
        else
        {
          v14 &= *(_QWORD *)&v6 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = 0;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *a1;
  if ((_DWORD)v3)
  {
    while (1)
    {
      v1 ^= v3;
      if ((int *)v2 == a1 + 2)
        break;
      v3 = *(int *)(v2 + 16) ^ (unint64_t)(2 * v1);
      v2 = *(_QWORD *)(v2 + 8);
    }
  }
  return a1[8] ^ __ROR8__(v1, 59);
}

BOOL fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_DWORD *)a2 != *(_DWORD *)a3)
    return 0;
  v3 = *(_DWORD *)(a2 + 8);
  v4 = v3 ? *(_QWORD *)(a2 + 32) + 1 : 0;
  v5 = *(_DWORD *)(a3 + 8);
  v6 = v5 ? *(_QWORD *)(a3 + 32) + 1 : 0;
  if (v4 != v6)
    return 0;
  v7 = 0;
  v8 = (uint64_t *)(a2 + 24);
  v9 = (uint64_t *)(a3 + 24);
  if (v3)
    v10 = v3 == v5;
  else
    v10 = 0;
  v11 = !v10;
  v12 = v11 ^ 1;
  while (1)
  {
    v13 = *v8;
    v14 = *v9;
    if ((v7 & 1) == 0 && !v12)
      break;
    if (v13 == a2 + 16)
      return *(float *)(a2 + 40) == *(float *)(a3 + 40);
    if (*(_DWORD *)(v13 + 16) != *(_DWORD *)(v14 + 16))
      return 0;
    v8 = (uint64_t *)(v13 + 8);
    v9 = (uint64_t *)(v14 + 8);
    v7 = 1;
  }
  if (v3)
    return 0;
  return *(float *)(a2 + 40) == *(float *)(a3 + 40);
}

_QWORD *std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[3];

  v7 = *a2;
  v8 = fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(a2 + 2) + 7853 * v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual::operator()(a1 + 32, (uint64_t)(v13 + 2), (uint64_t)a2))
            {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__construct_node_hash<std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>(a1, v8, a3, (uint64_t)v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v13 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v13;
}

void sub_1ADBCCD04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__construct_node_hash<std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *a3;
  *((_DWORD *)v8 + 6) = a3[2];
  result = std::list<int>::list(v8 + 4, (uint64_t)(a3 + 4));
  *((_DWORD *)v8 + 14) = a3[10];
  *((_DWORD *)v8 + 16) = a3[12];
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADBCCDA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__list_imp<char *>::clear(v2 + 4);
    operator delete(v2);
  }
}

_QWORD *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int *v6;
  int *v7;
  int v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  BOOL v13;
  int v14;
  int *v15;
  _QWORD *v16;
  int v18;
  _QWORD v19[3];
  int v20;
  int v21;
  _QWORD v22[3];
  float v23;
  uint64_t v24;
  _QWORD v25[3];
  float v26;
  char v27;
  int v28;
  _QWORD v29[3];
  float v30;
  int v31;
  uint64_t v32[3];

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    v6 = (int *)(*(_QWORD *)(a1 + 168) + 48 * a2);
    v8 = *v6;
    v7 = v6 + 2;
    if (v8 == -1)
    {
      v28 = *v7;
      std::list<int>::list(v29, (uint64_t)(v7 + 2));
      v30 = *((float *)v7 + 8);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v24);
      fst::Times<int,(fst::StringType)1>(v7, (uint64_t)&v24, (uint64_t)&v31);
      v9 = *((float *)v7 + 8);
      v10 = NAN;
      if (v9 != -INFINITY)
      {
        v10 = NAN;
        if (v26 != -INFINITY)
        {
          v10 = INFINITY;
          v11 = v26 == INFINITY || v9 == INFINITY;
          v12 = v9 + v26;
          if (!v11)
            v10 = v12;
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v28, &v31, v10);
      std::__list_imp<char *>::clear(v32);
      std::__list_imp<char *>::clear(v25);
    }
    LODWORD(v24) = v28;
    std::list<int>::list(v25, (uint64_t)v29);
    v26 = v30;
    if (v28)
      v13 = (unint64_t)(v29[2] + 1) >= 2;
    else
      v13 = 0;
    v14 = !v13;
    v27 = v14;
    if ((*(_BYTE *)(a1 + 148) & 1) == 0 || v14)
    {
      v21 = v28;
      v16 = v22;
      std::list<int>::list(v22, (uint64_t)v29);
      v23 = v30;
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(a1, a2, &v21);
    }
    else
    {
      v15 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
      v18 = *v15;
      v16 = v19;
      std::list<int>::list(v19, (uint64_t)(v15 + 2));
      v20 = v15[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetFinal(a1, a2, &v18);
    }
    std::__list_imp<char *>::clear(v16);
    std::__list_imp<char *>::clear(v25);
    std::__list_imp<char *>::clear(v29);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1ADBCD010(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 64) - *(_QWORD *)(*(_QWORD *)v5 + 56)) >> 3);
}

_QWORD *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Expand(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  float v7;
  float v8;
  int v11;
  int v12;
  int State;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int *v18;
  uint64_t v19;
  uint64_t *MutableState;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  float v31;
  uint64_t v33;
  BOOL v34;
  char v35;
  int v36;
  uint64_t *v37;
  float v39;
  float v40;
  int v42;
  _QWORD v43[3];
  float v44;
  int v45;
  _QWORD v46[3];
  float v47;
  int v48;
  _QWORD v49[3];
  float v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  float v54;
  int v55;
  int v56;
  _QWORD v57[3];
  float v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  float v62;
  int v63;
  _QWORD v64[4];
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  _QWORD v69[3];
  int v70;
  float v71;
  _QWORD v72[3];
  int v73;
  char v74;
  int v75;
  _QWORD v76[3];
  int v77;
  uint64_t v78;
  _QWORD v79[2];
  _DWORD *v80;
  unint64_t v81;
  int v82;
  int v83;
  _QWORD v84[3];
  float v85;

  v3 = *(_QWORD *)(a1 + 168) + 48 * a2;
  v82 = *(_DWORD *)v3;
  v83 = *(_DWORD *)(v3 + 8);
  std::list<int>::list(v84, v3 + 16);
  v85 = *(float *)(v3 + 40);
  if (v82 == -1)
    goto LABEL_33;
  v4 = *(_QWORD *)(a1 + 136);
  v81 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
  v5 = &v66;
  while (1)
  {
    if (!v78)
    {
      if (v81 >= v79[1])
        goto LABEL_31;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v78 + 24))(v78))
      break;
    if (v78)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 32))(v78);
      goto LABEL_9;
    }
LABEL_8:
    v6 = v79[0] + 56 * v81;
LABEL_9:
    fst::Times<int,(fst::StringType)1>(&v83, v6 + 8, (uint64_t)&v59);
    v7 = NAN;
    if (v85 != -INFINITY)
    {
      v8 = *(float *)(v6 + 40);
      v7 = NAN;
      if (v8 != -INFINITY)
      {
        v7 = INFINITY;
        if (v8 != INFINITY && v85 != INFINITY)
          v7 = v85 + v8;
      }
    }
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v75, (int *)&v59, v7);
    std::__list_imp<char *>::clear(&v60);
    v71 = *(float *)&v75;
    std::list<int>::list(v72, (uint64_t)v76);
    v73 = v77;
    v11 = *(float *)&v75 == 0.0 || (unint64_t)(v76[2] + 1) < 2;
    v74 = v11;
    if ((*(_BYTE *)(a1 + 148) & 2) == 0 || v11)
    {
      v16 = v5;
      v17 = *(_DWORD *)(v6 + 48);
      v18 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
      v68 = *v18;
      std::list<int>::list(v69, (uint64_t)(v18 + 2));
      v70 = v18[8];
      LODWORD(v59) = v17;
      LODWORD(v60) = v68;
      std::list<int>::list(v61, (uint64_t)v69);
      v63 = v70;
      LODWORD(v18) = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FindState(a1, (int *)&v59);
      v5 = v16;
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v69);
      v19 = *(_QWORD *)v6;
      v65 = v75;
      std::list<int>::list(v16, (uint64_t)v76);
      v67 = v77;
      v59 = v19;
      LODWORD(v60) = v65;
      std::list<int>::list(v61, (uint64_t)v16);
      v63 = v67;
      LODWORD(v64[0]) = (_DWORD)v18;
      MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::PushArc(MutableState, (uint64_t)&v59);
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v16);
    }
    else
    {
      fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Value((int *)&v71, (uint64_t)&v59);
      v12 = *(_DWORD *)(v6 + 48);
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Quantize((float *)&v63, (uint64_t)&v56, *(float *)(a1 + 144));
      LODWORD(v51) = v12;
      LODWORD(v52) = v56;
      std::list<int>::list(v53, (uint64_t)v57);
      v54 = v58;
      State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v57);
      v14 = *(_QWORD *)v6;
      v48 = v59;
      std::list<int>::list(v49, (uint64_t)&v60);
      v50 = v62;
      v51 = v14;
      LODWORD(v52) = v48;
      std::list<int>::list(v53, (uint64_t)v49);
      v54 = v50;
      v55 = State;
      v15 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::PushArc(v15, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v49);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v76);
    if (v78)
      (*(void (**)(uint64_t))(*(_QWORD *)v78 + 40))(v78);
    else
      ++v81;
  }
  if (v78)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
    goto LABEL_33;
  }
LABEL_31:
  if (v80)
    --*v80;
LABEL_33:
  if ((*(_BYTE *)(a1 + 148) & 1) != 0)
  {
    if (v82 == -1)
      goto LABEL_65;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v59);
    v21 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
    v22 = (_DWORD)v59 ? v61[1] + 1 : 0;
    v23 = *(_DWORD *)v21 ? *(_QWORD *)(v21 + 24) + 1 : 0;
    if (v22 == v23)
    {
      v24 = 0;
      v25 = v61[0];
      v26 = (uint64_t *)(v21 + 16);
      if ((_DWORD)v59)
        v27 = (_DWORD)v59 == *(_DWORD *)v21;
      else
        v27 = 0;
      v28 = !v27;
      v29 = v28 ^ 1;
      while (1)
      {
        v30 = *v26;
        if ((v24 & 1) == 0 && !v29)
          break;
        if ((uint64_t *)v25 == &v60)
          goto LABEL_77;
        if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v30 + 16))
          goto LABEL_55;
        v25 = *(_QWORD *)(v25 + 8);
        v26 = (uint64_t *)(v30 + 8);
        v24 = 1;
      }
      if ((_DWORD)v59)
        goto LABEL_55;
LABEL_77:
      *(float *)&v51 = v62;
      v71 = 0.0;
      v71 = *(float *)(v21 + 32);
      v39 = v62;
      v40 = v71;
      std::__list_imp<char *>::clear(&v60);
      if (v39 == v40)
        goto LABEL_76;
    }
    else
    {
LABEL_55:
      std::__list_imp<char *>::clear(&v60);
    }
    if (v82 == -1)
    {
LABEL_65:
      LODWORD(v78) = v83;
      std::list<int>::list(v79, (uint64_t)v84);
      *(float *)&v81 = v85;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v59);
      fst::Times<int,(fst::StringType)1>(&v83, (uint64_t)&v59, (uint64_t)&v51);
      v31 = NAN;
      if (v85 != -INFINITY)
      {
        v31 = NAN;
        if (v62 != -INFINITY)
        {
          v31 = INFINITY;
          if (v62 != INFINITY && v85 != INFINITY)
            v31 = v85 + v62;
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v78, (int *)&v51, v31);
      std::__list_imp<char *>::clear(&v52);
      std::__list_imp<char *>::clear(&v60);
    }
    v33 = *(_QWORD *)(a1 + 152);
    v71 = *(float *)&v78;
    std::list<int>::list(v72, (uint64_t)v79);
    v73 = v81;
    if ((_DWORD)v78)
      v34 = (unint64_t)v80 + 1 >= 2;
    else
      v34 = 0;
    v35 = !v34;
    v74 = v35;
    if (v34)
    {
      fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Value((int *)&v71, (uint64_t)&v59);
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Quantize((float *)&v63, (uint64_t)&v45, *(float *)(a1 + 144));
      LODWORD(v51) = -1;
      LODWORD(v52) = v45;
      std::list<int>::list(v53, (uint64_t)v46);
      v54 = v47;
      v36 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v46);
      v42 = v59;
      std::list<int>::list(v43, (uint64_t)&v60);
      v44 = v62;
      v51 = v33;
      LODWORD(v52) = v42;
      std::list<int>::list(v53, (uint64_t)v43);
      v54 = v44;
      v55 = v36;
      v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::PushArc(v37, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v43);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v79);
  }
LABEL_76:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs(a1, a2);
  return std::__list_imp<char *>::clear(v84);
}

void sub_1ADBCD878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  _QWORD *v48;

  std::__list_imp<char *>::clear((_QWORD *)(v47 + 8));
  std::__list_imp<char *>::clear(&a47);
  std::__list_imp<char *>::clear(v48);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Value@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  _QWORD v18[2];
  uint64_t v19;
  int v20;
  _QWORD v21[4];
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD v31[2];
  uint64_t v32;
  int v33;
  _QWORD v34[4];
  int v35;
  _QWORD v36[3];
  char v37;

  v35 = *a1;
  std::list<int>::list(v36, (uint64_t)(a1 + 2));
  if (*a1)
    v4 = (unint64_t)(*((_QWORD *)a1 + 3) + 1) >= 2;
  else
    v4 = 0;
  v5 = !v4;
  v37 = v5;
  fst::StringFactor<int,(fst::StringType)1>::Value((uint64_t)&v35, (uint64_t)&v22);
  v30 = v22;
  v31[0] = v31;
  v31[1] = v31;
  v32 = 0;
  v6 = v25;
  if (v25)
  {
    v8 = v23;
    v7 = v24;
    v9 = *v24;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v23 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    v10 = v31[0];
    *(_QWORD *)(v31[0] + 8) = v7;
    *v7 = v10;
    v31[0] = v8;
    *(_QWORD *)(v8 + 8) = v31;
    v32 = v6;
    v25 = 0;
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v33, &v30, *((float *)a1 + 8));
  std::__list_imp<char *>::clear(v31);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  fst::StringFactor<int,(fst::StringType)1>::Value((uint64_t)&v35, (uint64_t)&v22);
  v17 = v26;
  v18[0] = v18;
  v18[1] = v18;
  v19 = 0;
  v11 = v29;
  if (v29)
  {
    v13 = v27;
    v12 = v28;
    v14 = *v28;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v27 + 8);
    **(_QWORD **)(v13 + 8) = v14;
    v15 = v18[0];
    *(_QWORD *)(v18[0] + 8) = v12;
    *v12 = v15;
    v18[0] = v13;
    *(_QWORD *)(v13 + 8) = v18;
    v19 = v11;
    v29 = 0;
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&v20, &v17, 0.0);
  std::__list_imp<char *>::clear(v18);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  std::pair<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>&,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>&,0>(a2, &v33, &v20);
  std::__list_imp<char *>::clear(v21);
  std::__list_imp<char *>::clear(v34);
  return std::__list_imp<char *>::clear(v36);
}

void sub_1ADBCDC20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  std::__list_imp<char *>::clear((_QWORD *)(v2 + 8));
  std::__list_imp<char *>::clear((_QWORD *)(v3 - 120));
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int v5;
  _QWORD v6[3];
  int v7;

  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1ADBCDCF0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::StringFactor<int,(fst::StringType)1>::Value@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _DWORD *v9;
  int v11;
  _QWORD v12[2];
  uint64_t v13;
  int v14;
  _QWORD v15[3];

  v3 = a1 + 8;
  v4 = *(_QWORD *)(a1 + 16);
  fst::StringWeight<int,(fst::StringType)1>::StringWeight((uint64_t)&v14, *(_DWORD *)a1);
  v12[0] = v12;
  v12[1] = v12;
  v13 = 0;
  v11 = 0;
  if (v4 != v3)
  {
    v5 = 0;
    v6 = 0;
    v7 = v12;
    do
    {
      v8 = *(_DWORD *)(v4 + 16);
      if (v5)
      {
        v9 = operator new(0x18uLL);
        v9[4] = v8;
        *(_QWORD *)v9 = v7;
        *((_QWORD *)v9 + 1) = v12;
        v7[1] = v9;
        ++v6;
        v7 = v9;
        v12[0] = v9;
        v13 = v6;
      }
      else
      {
        v11 = *(_DWORD *)(v4 + 16);
        v5 = v8;
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
  }
  std::pair<fst::StringWeight<int,(fst::StringType)1>,fst::StringWeight<int,(fst::StringType)1>>::pair[abi:ne180100]<fst::StringWeight<int,(fst::StringType)1>&,fst::StringWeight<int,(fst::StringType)1>&,0>(a2, &v14, &v11);
  std::__list_imp<char *>::clear(v12);
  return std::__list_imp<char *>::clear(v15);
}

void sub_1ADBCDDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  va_list va;

  va_start(va, a6);
  std::__list_imp<char *>::clear(v6);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::StringWeight<int,(fst::StringType)1>,fst::StringWeight<int,(fst::StringType)1>>::pair[abi:ne180100]<fst::StringWeight<int,(fst::StringType)1>&,fst::StringWeight<int,(fst::StringType)1>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = *a3;
  std::list<int>::list((_QWORD *)(a1 + 40), (uint64_t)(a3 + 2));
  return a1;
}

void sub_1ADBCDE5C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>&,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  *(_DWORD *)(a1 + 40) = *a3;
  std::list<int>::list((_QWORD *)(a1 + 48), (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 72) = a3[8];
  return a1;
}

void sub_1ADBCDED8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int v5;
  _QWORD v6[3];
  int v7;

  fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1ADBCDF44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  float v8;
  _QWORD v9[3];

  v8 = *a1;
  std::list<int>::list(v9, (uint64_t)(a1 + 2));
  v6 = a1[8];
  if ((LODWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    v6 = floorf((float)(v6 / a3) + 0.5) * a3;
  *(float *)a2 = v8;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v9);
  *(float *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v9);
}

void sub_1ADBCDFFC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 40);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 48);
}

_QWORD *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D26C38;
  if (a3)
  {
    v5 = operator new();
    fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FactorWeightFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADBCE150(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D21888;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  v5 = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a2 + 148);
  v6 = *(_DWORD *)(a2 + 156);
  v7 = *(_WORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 136) = v4;
  *(_DWORD *)(a1 + 144) = v5;
  *(_DWORD *)(a1 + 156) = v6;
  *(_WORD *)(a1 + 160) = v7;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "factor_weight");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    else
      v10 = 0;
    *(_QWORD *)(a1 + 40) = v10;
  }
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 48) = v13;
  }
  return a1;
}

void sub_1ADBCE2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  void *v16;
  void **v17;
  void *v19;

  if (a15 < 0)
    operator delete(__p);
  v19 = *v17;
  if (*v17)
  {
    v15[30] = v19;
    operator delete(v19);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)v16 + 24);
  __p = v16;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *((_QWORD *)v19 + 7);
    v9 = 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)v19 + 8) - v8) >> 3);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        v14 = *v12;
        v12 += 14;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while (v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADBCE4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 84);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Expand(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADBCE564(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
}

uint64_t fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v6);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 288))(a2, 0);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result == -1)
  {
    if ((v7 & 4) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v9 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1) != -1;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 248))(a2, v9);
  }
  LODWORD(v23) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v21);
  while (!v21)
  {
    if ((int)v23 >= (int)v22)
      goto LABEL_14;
LABEL_9:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    else
      LODWORD(v23) = v23 + 1;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
    goto LABEL_9;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_14:
  v32 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v30);
  LODWORD(v10) = -1;
  while (2)
  {
    if (!v30)
    {
      if ((int)v32 >= v31)
        goto LABEL_47;
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30))
    {
      if (v30)
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
        goto LABEL_21;
      }
LABEL_20:
      v11 = v32;
LABEL_21:
      if ((_DWORD)v11 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v11);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 256))(a2, v11, v12);
      v25 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v11, &v21);
LABEL_24:
      if (v21)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
        {
          if (v21)
          {
            (*(void (**)(void))(*(_QWORD *)v21 + 8))();
            goto LABEL_37;
          }
LABEL_35:
          if (v24)
            --*v24;
LABEL_37:
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v18, a1, v11);
          v21 = 0;
          LODWORD(v22) = v18;
          std::list<int>::list(&v23, (uint64_t)v19);
          v26 = v20;
          v27 = -1;
          v28 = fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((int *)a3, (int *)&v21);
          v29 = v15;
          std::__list_imp<char *>::clear(&v23);
          std::__list_imp<char *>::clear(v19);
          if (v28)
          {
            if ((_DWORD)v10 == -1)
            {
              v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
              (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v10, 0.0);
            }
            HIDWORD(v29) = v10;
            (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a2 + 208))(a2, v11, &v28);
            (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v11, INFINITY);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v11, *(float *)&v29);
          }
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
          else
            ++v32;
          continue;
        }
        if (v21)
        {
          v13 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v21 + 32))();
          goto LABEL_30;
        }
      }
      else if (v25 >= v23)
      {
        goto LABEL_35;
      }
      v13 = (int *)(v22 + 56 * v25);
LABEL_30:
      v28 = fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()((int *)a3, v13);
      v29 = v14;
      (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a2 + 208))(a2, v11, &v28);
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
      else
        ++v25;
      goto LABEL_24;
    }
    break;
  }
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
LABEL_47:
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v17 = v7 & 0x2EBC21080007;
  if (*(_BYTE *)(a3 + 4))
    v17 = v7 & 0x2EBC21080003 | 4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v17 | v16, 0x3FFFFFFF0007);
}

void sub_1ADBCEAE0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  v5 = *(_QWORD *)(v3 - 104);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

unint64_t fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::operator()(int *a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *__p[2];
  char v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  float v29[5];
  char v30;

  if (a2[12] != -1)
    goto LABEL_24;
  v4 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  v5 = a2[2];
  v6 = v5 ? *((_QWORD *)a2 + 4) + 1 : 0;
  v7 = *(_DWORD *)v4 ? *(_QWORD *)(v4 + 24) + 1 : 0;
  if (v6 != v7)
    goto LABEL_24;
  v8 = 0;
  v9 = (uint64_t *)(a2 + 6);
  v10 = (uint64_t *)(v4 + 16);
  v11 = v5 && v5 == *(_DWORD *)v4;
  v12 = !v11;
  v13 = !v12;
  while (1)
  {
    v14 = *v9;
    v15 = *v10;
    if ((v8 & 1) == 0 && !v13)
      break;
    if ((int *)v14 == a2 + 4)
      goto LABEL_22;
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16))
      goto LABEL_24;
    v9 = (uint64_t *)(v14 + 8);
    v10 = (uint64_t *)(v15 + 8);
    v8 = 1;
  }
  if (v5)
    goto LABEL_24;
LABEL_22:
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = a2[10];
  v29[0] = 0.0;
  v29[0] = *(float *)(v4 + 32);
  if (*(float *)__p == v29[0])
  {
    v16 = 0;
    v17 = *a2;
  }
  else
  {
LABEL_24:
    v28 = -1;
    if (!fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Extract<(fst::GallicType)1>((unsigned int *)a2 + 2, &v27, &v28)|| (v17 = *a2, *a2 != a2[1]))
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v18 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
      v19 = (_QWORD *)fst::cerr(v18);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"FromGallicMapper: unrepresentable weight: ", 42);
      fst::CompositeWeightWriter::CompositeWeightWriter((uint64_t)v29, v20);
      if (*FLAGS_fst_weight_parentheses)
      {
        v30 = *FLAGS_fst_weight_parentheses;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)v29, (uint64_t)&v30, 1);
      }
      fst::CompositeWeightWriter::WriteElement<fst::StringWeight<int,(fst::StringType)1>>((uint64_t)v29, a2 + 2);
      fst::CompositeWeightWriter::WriteElement<fst::LogWeightTpl<float>>((uint64_t)v29, (float *)a2 + 10);
      if (*FLAGS_fst_weight_parentheses)
      {
        v30 = *(_BYTE *)(FLAGS_fst_weight_parentheses + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)v29, (uint64_t)&v30, 1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for arc with ilabel = ", 23);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", olabel = ", 11);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", nextstate = ", 14);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
      if (v25 < 0)
        operator delete(__p[0]);
      *((_BYTE *)a1 + 4) = 1;
      v17 = *a2;
    }
    if (!v17 && v28 && a2[12] == -1)
      v17 = *a1;
    v16 = (unint64_t)v28 << 32;
  }
  return v16 | v17;
}

void sub_1ADBCEE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Extract<(fst::GallicType)1>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v11 = *a1;
  v6 = std::list<int>::list(&v12, (uint64_t)(a1 + 2));
  v7 = a1[8];
  v8 = v11;
  if (!v11)
    goto LABEL_7;
  if (v13 == -1)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v9 = 0;
  if (!v13)
  {
    if (v11 > 0xFFFFFFFD)
    {
      v9 = 0;
      goto LABEL_8;
    }
LABEL_7:
    *a3 = v8;
    *a2 = v7;
    v9 = 1;
  }
LABEL_8:
  std::__list_imp<char *>::clear(v6);
  return v9;
}

_QWORD *fst::CompositeWeightWriter::WriteElement<fst::StringWeight<int,(fst::StringType)1>>(uint64_t a1, int *a2)
{
  int v4;
  _QWORD *v5;
  char v7;

  v4 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 >= 1)
  {
    v5 = *(_QWORD **)a1;
    v7 = *FLAGS_fst_weight_separator;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v7, 1);
  }
  return fst::operator<<<int,(fst::StringType)1>(*(_QWORD **)a1, a2);
}

_QWORD *fst::CompositeWeightWriter::WriteElement<fst::LogWeightTpl<float>>(uint64_t a1, float *a2)
{
  int v4;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  char v9;

  v4 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 >= 1)
  {
    v5 = *(_QWORD **)a1;
    v9 = *FLAGS_fst_weight_separator;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v9, 1);
  }
  if (*a2 == INFINITY)
  {
    v6 = "Infinity";
    v7 = 8;
  }
  else
  {
    if (*a2 != -INFINITY)
      return (_QWORD *)std::ostream::operator<<();
    v6 = "-Infinity";
    v7 = 9;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)a1, (uint64_t)v6, v7);
}

uint64_t fst::CompositeWeightWriter::CompositeWeightWriter(uint64_t a1, _QWORD *a2)
{
  fst *v4;
  _QWORD *v5;
  fst *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (strlen(FLAGS_fst_weight_separator) == 1)
  {
    if ((strlen(FLAGS_fst_weight_parentheses) | 2) == 2)
      return a1;
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"CompositeWeightWriter: ", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"FLAGS_fst_weight_parentheses.size() is not equal to 2", 53);
  }
  else
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"CompositeWeightWriter: ", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"FLAGS_fst_weight_separator.size() is not equal to 1", 51);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), 1u);
  return a1;
}

void sub_1ADBCF1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::operator<<<int,(fst::StringType)1>(_QWORD *a1, int *a2)
{
  int v3;
  int *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v4 = a2 + 2;
  v3 = *a2;
  if (*a2 == -2)
  {
    v5 = "BadString";
    v6 = 9;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, v6);
  }
  if (v3 == -1)
  {
    v5 = "Infinity";
    v6 = 8;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, v6);
  }
  if (!v3)
  {
    v5 = "Epsilon";
    v6 = 7;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, v6);
  }
  v8 = 0;
  v9 = 0;
  v10 = *((_QWORD *)a2 + 2);
  if (*a2)
  {
    do
    {
      if (v8)
      {
        v11 = 95;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v11, 1);
      }
      std::ostream::operator<<();
      if ((v9 & 1) != 0)
        v10 = *(_QWORD *)(v10 + 8);
      --v8;
      v9 = 1;
    }
    while ((int *)v10 != v4);
  }
  return a1;
}

uint64_t fst::StateMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>(uint64_t a1, void **a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  _BYTE *v9;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = (unint64_t)a2[5]; ; a2[5] = (void *)i)
        {
          v9 = a2[2];
          if (i >= ((_BYTE *)a2[3] - v9) >> 4)
            break;
          (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 208))(a1, v7, &v9[16 * i]);
          i = (unint64_t)a2[5] + 1;
        }
        (*(void (**)(void *, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, v7);
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetState(void **a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  void *v6;
  _OWORD *v7;
  unint64_t v8;
  char *v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 *v20;
  __int128 *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _DWORD *v25;
  unint64_t v26;

  a1[5] = 0;
  v4 = a1 + 2;
  a1[3] = a1[2];
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v4, v5);
  v6 = *a1;
  v26 = 0;
  (*(void (**)(void *, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v24);
  while (1)
  {
    if (!v24[0])
    {
      if (v26 >= v24[2])
        goto LABEL_29;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v24[0] + 24))(v24[0]))
      break;
    if (v24[0])
    {
      v7 = (_OWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v24[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = (_OWORD *)(v24[1] + 16 * v26);
LABEL_8:
    v9 = (char *)a1[3];
    v8 = (unint64_t)a1[4];
    if ((unint64_t)v9 >= v8)
    {
      v11 = (v9 - (_BYTE *)*v4) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v13 = v8 - (_QWORD)*v4;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 4), v14);
      else
        v15 = 0;
      v16 = &v15[16 * v11];
      *(_OWORD *)v16 = *v7;
      v18 = (char *)a1[2];
      v17 = (char *)a1[3];
      v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        v17 = (char *)*v4;
      }
      v10 = v16 + 16;
      a1[2] = v19;
      a1[3] = v16 + 16;
      a1[4] = &v15[16 * v14];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_OWORD *)v9 = *v7;
      v10 = v9 + 16;
    }
    a1[3] = v10;
    if (v24[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v24[0] + 40))(v24[0]);
    else
      ++v26;
  }
  if (v24[0])
  {
    (*(void (**)(void))(*(_QWORD *)v24[0] + 8))();
    goto LABEL_31;
  }
LABEL_29:
  if (v25)
    --*v25;
LABEL_31:
  v20 = (__n128 *)a1[2];
  v21 = (__int128 *)a1[3];
  v22 = 126 - 2 * __clz(((char *)v21 - (char *)v20) >> 4);
  if (v21 == (__int128 *)v20)
    v23 = 0;
  else
    v23 = v22;
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*,false>(v20, v21, (uint64_t)v24, v23, 1);
}

void sub_1ADBCF6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*,false>(__n128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  __int128 *v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  signed __int32 v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  int v26;
  __int128 v27;
  __int128 v28;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  _DWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  _OWORD *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)&a2[-1];
      if ((signed __int32)a2[-1].n128_u32[0] < *(_DWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (int *)(a1 + 16), (int *)&a2[-1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (__n128 *)a2[-1].n128_u64);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (int *)(a1 + 16), (int *)(a1 + 32), (__n128 *)(a1 + 48), a2 - 1);
      return 1;
    default:
      v8 = (_DWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      v9 = (_OWORD *)(a1 + 48);
      if ((__n128 *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v9;
    if (v13 < *v8)
    {
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_DWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v13 >= v15)
        {
          v16 = (_OWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (_OWORD *)a1;
LABEL_12:
      *v16 = v12;
      if (++v11 == 8)
        return v9 + 1 == (_OWORD *)a2;
    }
    v8 = v9;
    v10 += 16;
    if (++v9 == (_OWORD *)a2)
      return 1;
  }
}

void fst::RmEpsilon<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>>(void *a1, char *a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void **v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<int>::pointer v18;
  uint64_t v19;
  int v20;
  std::vector<int>::pointer v21;
  unint64_t v22;
  int v23;
  std::vector<unsigned int>::pointer v24;
  unsigned int *v25;
  std::vector<unsigned int>::pointer v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  char *v31;
  unsigned int *v32;
  unsigned int v33;
  signed int i;
  std::vector<unsigned int>::pointer end;
  unsigned int *v36;
  std::vector<unsigned int>::pointer begin;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  unsigned int *v43;
  unsigned int v44;
  int begin_low;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  std::vector<unsigned int>::pointer v49;
  fst *v50;
  _QWORD *v51;
  std::vector<unsigned int>::pointer j;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t k;
  unint64_t v58;
  unint64_t v59;
  float v60;
  unsigned int v61;
  _QWORD *v63;
  _QWORD *v64;
  void *__p;
  char *v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  int v70;
  char v71;
  char v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _OWORD v76[2];
  _BYTE v77[32];
  int v78;
  _QWORD v79[6];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  float v84;
  int v85;
  std::vector<int> v86;
  uint64_t v87;
  std::vector<int> v88;
  std::vector<unsigned int> v89;
  char *v90;
  void **p_p;
  std::vector<int> *v92;
  uint64_t v93;
  int v94;

  if ((*(unsigned int (**)(void *))(*(_QWORD *)a1 + 24))(a1) == -1)
    return;
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 160))(a1);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v90, v6, (unsigned __int8 *)&__p);
  v7 = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 24))(a1);
  v8 = 0;
  *(_QWORD *)&v90[((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v7;
LABEL_3:
  if ((int)v8 < (*(int (**)(void *))(*(_QWORD *)a1 + 160))(a1))
  {
    v69 = 0;
    (*(void (**)(void *, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v8, &__p);
    while (__p)
    {
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
      {
        if (__p)
        {
          (*(void (**)(void))(*(_QWORD *)__p + 8))();
          goto LABEL_26;
        }
LABEL_24:
        if (v68)
          --*(_DWORD *)v68;
LABEL_26:
        v8 = (v8 + 1);
        goto LABEL_3;
      }
      if (!__p)
        goto LABEL_12;
      v9 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      v10 = __p;
      if (*v9)
        goto LABEL_15;
      if (__p)
      {
        v11 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
        v10 = __p;
        goto LABEL_14;
      }
LABEL_13:
      v10 = 0;
      v11 = (uint64_t)&v66[16 * v69];
LABEL_14:
      if (*(_DWORD *)(v11 + 4))
      {
LABEL_15:
        if (v10)
        {
          v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 32))(v10);
          v10 = __p;
        }
        else
        {
LABEL_17:
          v10 = 0;
          v12 = (uint64_t)&v66[16 * v69];
        }
        *(_QWORD *)&v90[((unint64_t)*(int *)(v12 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *(_DWORD *)(v12 + 12);
      }
      if (v10)
        (*(void (**)(void *))(*(_QWORD *)v10 + 40))(v10);
      else
        ++v69;
    }
    if (v69 >= v67)
      goto LABEL_24;
LABEL_12:
    if (*(_DWORD *)&v66[16 * v69])
      goto LABEL_17;
    goto LABEL_13;
  }
  memset(&v89, 0, sizeof(v89));
  v13 = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 160))(a1);
  std::vector<int>::reserve(&v89, v13);
  if (((*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x4000000000, 0) & 0x4000000000) != 0)
  {
    for (i = 0; i < (*(int (**)(void *))(*(_QWORD *)a1 + 160))(a1); ++i)
    {
      end = v89.__end_;
      if (v89.__end_ >= v89.__end_cap_.__value_)
      {
        begin = v89.__begin_;
        v38 = v89.__end_ - v89.__begin_;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v40 = (char *)v89.__end_cap_.__value_ - (char *)v89.__begin_;
        if (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89.__end_cap_, v41);
          begin = v89.__begin_;
          end = v89.__end_;
        }
        else
        {
          v42 = 0;
        }
        v43 = (unsigned int *)&v42[4 * v38];
        *v43 = i;
        v36 = v43 + 1;
        while (end != begin)
        {
          v44 = *--end;
          *--v43 = v44;
        }
        v89.__begin_ = v43;
        v89.__end_ = v36;
        v89.__end_cap_.__value_ = (unsigned int *)&v42[4 * v41];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *v89.__end_ = i;
        v36 = end + 1;
      }
      v89.__end_ = v36;
    }
LABEL_99:
    __p = a1;
    v66 = a2;
    v67 = (unint64_t)a1;
    v68 = a2;
    v69 = *(_QWORD *)a3;
    v70 = *(_DWORD *)(a3 + 16);
    v71 = *(_BYTE *)(a3 + 20);
    v72 = 1;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    memset(v76, 0, 29);
    *((_QWORD *)a2 + 1) = *(_QWORD *)a2;
    memset(v77, 0, sizeof(v77));
    v78 = 1065353216;
    v85 = 0;
    v82 = 0u;
    memset(v79, 0, sizeof(v79));
    v80 = 0u;
    v81 = 0u;
    v83 = 0;
    for (j = v89.__end_; v89.__begin_ != v89.__end_; j = v89.__end_)
    {
      v53 = (int)*(j - 1);
      v89.__end_ = j - 1;
      if (((*(_QWORD *)&v90[(v53 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v53) & 1) == 0)
      {
        if (*(_BYTE *)(a3 + 21))
          continue;
        LODWORD(p_p) = 0;
        LODWORD(p_p) = *(_DWORD *)(a3 + 22);
        LODWORD(v86.__begin_) = 2139095040;
        if (*(float *)&p_p != INFINITY || *(_DWORD *)(a3 + 28) != -1)
          continue;
      }
      fst::RmEpsilonState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>>::Expand(&__p, v53);
      (*(void (**)(void *, unint64_t, float))(*(_QWORD *)a1 + 184))(a1, v53, v84);
      (*(void (**)(void *, unint64_t))(*(_QWORD *)a1 + 240))(a1, v53);
      (*(void (**)(void *, unint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, v53, (uint64_t)(*((_QWORD *)&v82 + 1) - v82) >> 4);
      v54 = *((_QWORD *)&v82 + 1);
      v55 = v82;
      while (v55 != v54)
      {
        (*(void (**)(void *, unint64_t, uint64_t))(*(_QWORD *)a1 + 208))(a1, v53, v54 - 16);
        v55 = v82;
        v54 = *((_QWORD *)&v82 + 1) - 16;
        *((_QWORD *)&v82 + 1) -= 16;
      }
    }
    if (*(_BYTE *)(a3 + 21)
      || (LODWORD(p_p) = 0,
          LODWORD(p_p) = *(_DWORD *)(a3 + 22),
          LODWORD(v86.__begin_) = 2139095040,
          *(float *)&p_p != INFINITY)
      || *(_DWORD *)(a3 + 28) != -1)
    {
      for (k = 0; (uint64_t)k < (*(int (**)(void *))(*(_QWORD *)a1 + 160))(a1); ++k)
      {
        if (((*(_QWORD *)&v90[(k >> 3) & 0x1FFFFFFFFFFFFFF8] >> k) & 1) == 0)
          (*(void (**)(void *, unint64_t))(*(_QWORD *)a1 + 240))(a1, k);
      }
    }
    if (BYTE12(v76[1]))
      (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
    v58 = (*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v59 = fst::RmEpsilonProperties(v58, 0);
    (*(void (**)(void *, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v59, 0x3FFFFFFF0007);
    LODWORD(p_p) = 0;
    v60 = *(float *)(a3 + 22);
    *(float *)&p_p = v60;
    LODWORD(v86.__begin_) = 2139095040;
    v61 = *(_DWORD *)(a3 + 28);
    if (v60 != INFINITY || v61 != -1)
    {
      p_p = (void **)__PAIR64__(v61, LODWORD(v60));
      v93 = 0;
      v94 = 981467136;
      fst::Prune<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>((uint64_t)a1);
    }
    if (*(_BYTE *)(a3 + 21))
    {
      LODWORD(p_p) = 0;
      LODWORD(p_p) = *(_DWORD *)(a3 + 22);
      LODWORD(v86.__begin_) = 2139095040;
      if (*(float *)&p_p == INFINITY && *(_DWORD *)(a3 + 28) == -1)
        fst::Connect<fst::ArcTpl<fst::LogWeightTpl<float>,int>>((uint64_t)a1);
    }
    if ((_QWORD)v82)
    {
      *((_QWORD *)&v82 + 1) = v82;
      operator delete((void *)v82);
    }
    v63 = (_QWORD *)*((_QWORD *)&v81 + 1);
    if (*((_QWORD *)&v81 + 1))
    {
      do
      {
        v64 = (_QWORD *)*v63;
        operator delete(v63);
        v63 = v64;
      }
      while (v64);
    }
    *((_QWORD *)&v81 + 1) = 0;
    if ((_QWORD)v80)
      operator delete((void *)v80);
    std::deque<int>::~deque[abi:ne180100](v79);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v77);
    fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(&v67);
    goto LABEL_136;
  }
  if (((*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x800000000, 0) & 0x800000000) == 0)
  {
    v87 = 0;
    p_p = 0;
    v92 = 0;
    v93 = 0;
    __p = &p_p;
    v66 = 0;
    v67 = 0;
    v68 = (char *)&v87;
    fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t *)&__p, 0);
    std::vector<int>::vector(&v88, ((char *)v92 - (char *)p_p) >> 2, &fst::kNoStateId);
    std::vector<int>::vector(&v86, ((char *)v92 - (char *)p_p) >> 2, &fst::kNoStateId);
    v14 = p_p;
    v15 = v88.__begin_;
    if (v92 != (std::vector<int> *)p_p)
    {
      v16 = 0;
      v17 = ((char *)v92 - (char *)p_p) >> 2;
      v18 = v86.__begin_;
      if (v17 <= 1)
        v17 = 1;
      do
      {
        v19 = *((int *)v14 + v16);
        v20 = v15[v19];
        if (v20 != -1)
        {
          v18[v16] = v20;
          v19 = *((int *)v14 + v16);
        }
        v15[v19] = v16++;
      }
      while (v17 != v16);
    }
    v21 = v88.__end_;
    if (v88.__end_ != v15)
    {
      v22 = 0;
      do
      {
        v23 = v15[v22];
        if (v23 != -1)
        {
          v24 = v89.__end_;
          do
          {
            if (v24 >= v89.__end_cap_.__value_)
            {
              v26 = v89.__begin_;
              v27 = v24 - v89.__begin_;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v29 = (char *)v89.__end_cap_.__value_ - (char *)v89.__begin_;
              if (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 1 > v28)
                v28 = v29 >> 1;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
                v30 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89.__end_cap_, v30);
                v26 = v89.__begin_;
                v24 = v89.__end_;
              }
              else
              {
                v31 = 0;
              }
              v32 = (unsigned int *)&v31[4 * v27];
              *v32 = v23;
              v25 = v32 + 1;
              while (v24 != v26)
              {
                v33 = *--v24;
                *--v32 = v33;
              }
              v89.__begin_ = v32;
              v89.__end_ = v25;
              v89.__end_cap_.__value_ = (unsigned int *)&v31[4 * v30];
              if (v26)
                operator delete(v26);
            }
            else
            {
              *v24 = v23;
              v25 = v24 + 1;
            }
            v89.__end_ = v25;
            v23 = v86.__begin_[v23];
            v24 = v25;
          }
          while (v23 != -1);
          v15 = v88.__begin_;
          v21 = v88.__end_;
        }
        ++v22;
      }
      while (v22 < v21 - v15);
    }
    if (v86.__begin_)
    {
      v86.__end_ = v86.__begin_;
      operator delete(v86.__begin_);
      v15 = v88.__begin_;
    }
    if (v15)
    {
      v88.__end_ = v15;
      operator delete(v15);
    }
    if (p_p)
    {
      v92 = (std::vector<int> *)p_p;
      operator delete(p_p);
    }
    goto LABEL_99;
  }
  __p = 0;
  v66 = 0;
  v67 = 0;
  LOBYTE(v86.__begin_) = 0;
  p_p = &__p;
  v92 = &v86;
  fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t)&p_p, 0);
  begin_low = LOBYTE(v86.__begin_);
  if (!LOBYTE(v86.__begin_))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&v88, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&v88, "ERROR");
    v50 = fst::LogMessage::LogMessage((fst *)&v87, (uint64_t)&v88);
    v51 = (_QWORD *)fst::cerr(v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"RmEpsilon: inconsistent acyclic property bit", 44);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v87);
    if (SHIBYTE(v88.__end_cap_.__value_) < 0)
      operator delete(v88.__begin_);
    (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
    v46 = (char *)__p;
LABEL_96:
    if (v46)
      goto LABEL_97;
    goto LABEL_98;
  }
  std::vector<int>::resize(&v89, (v66 - (_BYTE *)__p) >> 2);
  v46 = (char *)__p;
  if (v66 == __p)
  {
    v46 = v66;
    goto LABEL_96;
  }
  v47 = 0;
  v48 = (v66 - (_BYTE *)__p) >> 2;
  v49 = v89.__begin_;
  if (v48 <= 1)
    v48 = 1;
  do
  {
    v49[*(int *)&v46[4 * v47]] = v47;
    ++v47;
  }
  while (v48 != v47);
LABEL_97:
  v66 = v46;
  operator delete(v46);
LABEL_98:
  if (begin_low)
    goto LABEL_99;
LABEL_136:
  if (v89.__begin_)
  {
    v89.__end_ = v89.__begin_;
    operator delete(v89.__begin_);
  }
  if (v90)
    operator delete(v90);
}

void sub_1ADBD05F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  void *v15;
  void *v16;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v13 - 200));
  if (*(char *)(v13 - 169) < 0)
    operator delete(*(void **)(v13 - 192));
  if (__p)
    operator delete(__p);
  v15 = *(void **)(v13 - 168);
  if (v15)
  {
    *(_QWORD *)(v13 - 160) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(v13 - 144);
  if (v16)
    operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  uint64_t v20;
  fst *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  fst *v28;
  _QWORD *v29;
  fst *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  fst *v39;
  _QWORD *v40;
  _QWORD *v41;
  fst *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t result;
  void *__p[2];
  char v48;
  char v49;
  __int16 v50;
  void *v51[3];
  uint64_t v52[2];
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v5 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v6 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v20 = operator new();
    *(_DWORD *)(v20 + 8) = 5;
    *(_BYTE *)(v20 + 12) = 0;
    *(_QWORD *)v20 = &unk_1E5D1EEB0;
    *(_QWORD *)(v20 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v20;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v52, "INFO");
    v21 = fst::LogMessage::LogMessage((fst *)v51, (uint64_t)v52);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"AutoQueue: using state-order discipline", 39);
    goto LABEL_17;
  }
  if ((v6 & 0x800000000) != 0)
  {
    v24 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(v24, a2);
    *(_QWORD *)(a1 + 16) = v24;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v52, "INFO");
    v25 = fst::LogMessage::LogMessage((fst *)v51, (uint64_t)v52);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"AutoQueue: using top-order discipline", 37);
LABEL_17:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v51);
    if (SHIBYTE(v53) < 0)
    {
      v23 = (void *)v52[0];
LABEL_46:
      operator delete(v23);
    }
    return a1;
  }
  v55 = 0;
  v52[0] = (uint64_t)v5;
  v52[1] = 0;
  v53 = 0;
  v54 = &v55;
  fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a2, v52, 0);
  v7 = *(int **)(a1 + 48);
  v8 = *(int **)(a1 + 56);
  if (v7 != v8)
  {
    v9 = v7 + 1;
    if (v7 + 1 != v8)
    {
      v10 = *v7;
      v11 = v7 + 1;
      do
      {
        v13 = *v11++;
        v12 = v13;
        v14 = v10 < v13;
        if (v10 <= v13)
          v10 = v12;
        if (v14)
          v7 = v9;
        v9 = v11;
      }
      while (v11 != v8);
    }
  }
  v15 = *v7;
  v16 = *v7 + 1;
  std::vector<fst::QueueType>::vector(v51, v16);
  v50 = 0;
  fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NaturalLess<fst::LogWeightTpl<float>>>(a2, v5, (uint64_t)v51, 0, &v50, (_BYTE *)&v50 + 1);
  if (HIBYTE(v50))
  {
    v17 = operator new();
    *(_DWORD *)(v17 + 8) = 2;
    *(_BYTE *)(v17 + 12) = 0;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_QWORD *)v17 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v17;
    if (FLAGS_v < 2)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v18 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v19 = (_QWORD *)fst::cerr(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_24:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
    if (v48 < 0)
      operator delete(__p[0]);
LABEL_44:
    v23 = v51[0];
    if (v51[0])
    {
      v51[1] = v51[0];
      goto LABEL_46;
    }
    return a1;
  }
  if ((_BYTE)v50)
  {
    v27 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue(v27, (uint64_t)v5);
    *(_QWORD *)(a1 + 16) = v27;
    if (FLAGS_v < 2)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v28 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"AutoQueue: using top-order discipline", 37);
    goto LABEL_24;
  }
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v30 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v31 = (_QWORD *)fst::cerr(v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
    if (v48 < 0)
      operator delete(__p[0]);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v16);
  if (v15 < 0)
  {
LABEL_43:
    v45 = operator new();
    *(_DWORD *)(v45 + 8) = 6;
    *(_BYTE *)(v45 + 12) = 0;
    *(_QWORD *)v45 = &unk_1E5D22CF0;
    *(_QWORD *)(v45 + 16) = v4;
    *(_QWORD *)(v45 + 24) = v5;
    *(_QWORD *)(v45 + 32) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v45 + 48) = 0;
    *(_QWORD *)(v45 + 56) = 0;
    *(_QWORD *)(v45 + 40) = 0;
    *(_QWORD *)(a1 + 16) = v45;
    goto LABEL_44;
  }
  v32 = 0;
  while (1)
  {
    v33 = *((_DWORD *)v51[0] + v32);
    if (v33)
      break;
    *(_QWORD *)(*v4 + 8 * v32) = 0;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v42 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v43 = (_QWORD *)fst::cerr(v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"AutoQueue: SCC #", 16);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": using trivial discipline", 26);
LABEL_40:
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
      if (v48 < 0)
        operator delete(__p[0]);
    }
LABEL_42:
    if (v16 == ++v32)
      goto LABEL_43;
  }
  if (v33 == 2)
  {
    v38 = operator new();
    *(_DWORD *)(v38 + 8) = 2;
    *(_BYTE *)(v38 + 12) = 0;
    *(_OWORD *)(v38 + 16) = 0u;
    *(_OWORD *)(v38 + 32) = 0u;
    *(_OWORD *)(v38 + 48) = 0u;
    *(_QWORD *)v38 = &unk_1E5D27B60;
    *(_QWORD *)(*v4 + 8 * v32) = v38;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v39 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v40 = (_QWORD *)fst::cerr(v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"AutoQueue: SCC #", 16);
      v41 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": using LIFO disciplle", 22);
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  if (v33 != 3)
  {
    v34 = operator new();
    *(_DWORD *)(v34 + 8) = 1;
    *(_BYTE *)(v34 + 12) = 0;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_QWORD *)v34 = &unk_1E5D23A28;
    *(_QWORD *)(*v4 + 8 * v32) = v34;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v35 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v36 = (_QWORD *)fst::cerr(v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: SCC #", 16);
      v37 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": using FIFO disciplle", 22);
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  result = operator new();
  __break(1u);
  return result;
}

void sub_1ADBD0D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  void **v28;
  void *v30;
  void *v31;

  if (a14 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  v30 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v26 + 56) = v30;
    operator delete(v30);
  }
  v31 = *v27;
  if (*v27)
  {
    *(_QWORD *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char inited;
  char v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v30;
  std::vector<char>::pointer end;
  char *v32;
  std::vector<char>::pointer begin;
  int64_t v34;
  int64_t v35;
  unint64_t v36;
  size_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v44;
  int v45;
  std::vector<char>::value_type v46[8];
  std::vector<char>::value_type __x[8];
  int v48;
  int v49;
  void *v50;
  _QWORD v51[6];
  _QWORD *v52;
  _OWORD v53[2];
  __int128 v54;
  std::vector<char> v55;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v45 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v55, 0, sizeof(v55));
  v54 = 0u;
  memset(v53, 0, sizeof(v53));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MemoryPool(&v50, 64);
  v44 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v44)
    v5 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v5 = (v45 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v5 <= (std::vector<char>::pointer)(v55.__end_ - v55.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v5 < (std::vector<char>::pointer)(v55.__end_ - v55.__begin_))
      v55.__end_ = &v55.__begin_[(int)v5];
  }
  else
  {
    std::vector<char>::__append(&v55, (int)v5 - (unint64_t)(v55.__end_ - v55.__begin_), __x);
  }
  v49 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v45 >= (int)v5)
    goto LABEL_100;
  v6 = v45;
  do
  {
    v55.__begin_[(int)v6] = 1;
    v7 = (uint64_t)v52;
    if (v52)
    {
      v52 = (_QWORD *)v52[6];
    }
    else
    {
      v7 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v51, 1);
      *(_QWORD *)(v7 + 48) = 0;
    }
    *(_DWORD *)v7 = v6;
    *(_QWORD *)(v7 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v6, v7 + 8);
    *(_QWORD *)v46 = v7;
    std::deque<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *>>::push_back(v53, v46);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v6, v6);
LABEL_16:
    v9 = inited;
    while (*((_QWORD *)&v54 + 1))
    {
      v10 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v53[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v54 + 1) + v54 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v54 + 1) + v54 - 1) & 0x1FF));
      v11 = *(int *)v10;
      v12 = v55.__end_ - v55.__begin_;
      if (v55.__end_ - v55.__begin_ <= v11)
      {
        v5 = v11 + 1;
        v46[0] = 0;
        if (v11 + 1 <= v12)
        {
          if (v11 + 1 < v12)
            v55.__end_ = &v55.__begin_[v5];
        }
        else
        {
          std::vector<char>::__append(&v55, v11 + 1 - v12, v46);
        }
      }
      if ((v9 & 1) == 0)
        goto LABEL_33;
      v13 = v10[1];
      if (v13)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
          goto LABEL_33;
        v14 = v10[1];
        if (!v14)
          goto LABEL_29;
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
LABEL_30:
        v16 = *(int *)(v15 + 12);
        v17 = v55.__end_ - v55.__begin_;
        if (v55.__end_ - v55.__begin_ <= v16)
        {
          v5 = v16 + 1;
          v46[0] = 0;
          if (v16 + 1 <= v17)
          {
            if (v16 + 1 < v17)
              v55.__end_ = &v55.__begin_[v5];
          }
          else
          {
            std::vector<char>::__append(&v55, v16 + 1 - v17, v46);
          }
        }
        if (*(_QWORD *)v15)
        {
          v23 = v10[1];
          if (v23)
            goto LABEL_53;
LABEL_54:
          ++v10[5];
        }
        else
        {
          v24 = *(int *)(v15 + 12);
          v25 = v55.__begin_[v24];
          if (v25 == 1)
          {
            v9 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::BackArc((uint64_t)a2, v11, v15);
            v23 = v10[1];
            if (v23)
              goto LABEL_53;
            goto LABEL_54;
          }
          if (v25 != 2)
          {
            v55.__begin_[v24] = 1;
            v26 = (uint64_t)v52;
            if (v52)
            {
              v52 = (_QWORD *)v52[6];
            }
            else
            {
              v26 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v51, 1);
              *(_QWORD *)(v26 + 48) = 0;
            }
            *(_DWORD *)v26 = *(_DWORD *)(v15 + 12);
            *(_QWORD *)(v26 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v46 = v26;
            std::deque<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *>>::push_back(v53, v46);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v15 + 12), v6);
            goto LABEL_16;
          }
          v9 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ForwardOrCrossArc((_QWORD **)a2, v11, v15);
          v23 = v10[1];
          if (!v23)
            goto LABEL_54;
LABEL_53:
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
        }
      }
      else
      {
        if (v10[5] < v10[3])
        {
LABEL_29:
          v15 = v10[2] + 16 * v10[5];
          goto LABEL_30;
        }
LABEL_33:
        v55.__begin_[v11] = 2;
        v18 = v10[1];
        if (v18)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        }
        else
        {
          v19 = (_DWORD *)v10[4];
          if (v19)
            --*v19;
        }
        v10[6] = v52;
        v52 = v10;
        --*((_QWORD *)&v54 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v53, 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v53[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v54 + 1) + v54 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v54 + 1) + v54 - 1) & 0x1FF));
          v21 = *(_DWORD *)v20;
          v22 = *(_QWORD *)(v20 + 8);
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState((uint64_t)a2, v11, v21);
          v23 = *(_QWORD *)(v20 + 8);
          if (v23)
            goto LABEL_53;
          ++*(_QWORD *)(v20 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState((uint64_t)a2, v11, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v6 == v45)
      v6 = 0;
    else
      v6 = (v6 + 1);
    if ((int)v6 < (int)v5)
    {
      v27 = &v55.__begin_[(int)v6];
      v28 = (int)v5 - (uint64_t)(int)v6;
      while (*v27++)
      {
        v6 = (v6 + 1);
        if (!--v28)
        {
          v6 = v5;
          break;
        }
      }
    }
    if (v44 || (_DWORD)v6 != (_DWORD)v5)
      continue;
LABEL_70:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_76;
      }
    }
    else if (v49 >= v48)
    {
      continue;
    }
    v30 = v49;
LABEL_76:
    if (v30 != (_DWORD)v5)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v49;
      goto LABEL_70;
    }
    end = v55.__end_;
    if (v55.__end_ >= v55.__end_cap_.__value_)
    {
      begin = v55.__begin_;
      v34 = v55.__end_ - v55.__begin_;
      v35 = v55.__end_ - v55.__begin_ + 1;
      if (v35 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v36 = v55.__end_cap_.__value_ - v55.__begin_;
      if (2 * (v55.__end_cap_.__value_ - v55.__begin_) > (unint64_t)v35)
        v35 = 2 * v36;
      if (v36 >= 0x3FFFFFFFFFFFFFFFLL)
        v37 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
        v38 = (char *)operator new(v37);
      else
        v38 = 0;
      v39 = &v38[v34];
      v40 = &v38[v34];
      *v40 = 0;
      v32 = v40 + 1;
      if (end != begin)
      {
        v41 = &end[~(unint64_t)begin];
        do
        {
          v42 = *--end;
          (v41--)[(_QWORD)v38] = v42;
        }
        while (end != begin);
        end = v55.__begin_;
        v39 = v38;
      }
      v55.__begin_ = v39;
      v55.__end_ = v32;
      v55.__end_cap_.__value_ = &v38[v37];
      if (end)
        operator delete(end);
    }
    else
    {
      *v55.__end_ = 0;
      v32 = end + 1;
    }
    v55.__end_ = v32;
    v5 = (v5 + 1);
  }
  while ((v9 & 1) != 0 && (int)v6 < (int)v5);
LABEL_100:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v50 = &unk_1E5D19878;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena(v51);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v50);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v53);
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
}

void sub_1ADBD1588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19878;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::NaturalLess<fst::LogWeightTpl<float>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  _QWORD v22[3];
  _DWORD *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;

  *a5 = 1;
  *a6 = 1;
  v12 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v12)
  {
    v13 = v12 >> 2;
    if (v13 <= 1)
      v13 = 1;
    bzero(*(void **)a3, 4 * v13);
  }
  v27 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v25);
  while (1)
  {
    result = v25;
    if (!v25)
    {
      if ((int)v27 >= v26)
        return result;
LABEL_11:
      v16 = v27;
      goto LABEL_12;
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
    result = v25;
    if (v15)
      break;
    if (!v25)
      goto LABEL_11;
    v16 = (*(uint64_t (**)(void))(*(_QWORD *)v25 + 24))();
LABEL_12:
    v24 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v16, v22);
    while (1)
    {
      if (!v22[0])
      {
        if (v24 >= v22[2])
          goto LABEL_34;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v22[0] + 24))(v22[0]))
        break;
      if (v22[0])
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v22[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      v17 = v22[1] + 16 * v24;
LABEL_19:
      if (!*(_QWORD *)v17)
      {
        v18 = *(int *)(*a2 + 4 * (int)v16);
        if ((_DWORD)v18 == *(_DWORD *)(*a2 + 4 * *(int *)(v17 + 12)))
        {
          v19 = *(_DWORD **)a3;
          if (!a4
            || (v21 = 0, fst::NaturalLess<fst::LogWeightTpl<float>>::operator()(a4, (float *)(v17 + 8), (float *)&v21)))
          {
            v20 = 1;
            goto LABEL_26;
          }
          if ((v19[v18] | 2) == 2)
          {
            v20 = 3;
LABEL_26:
            v19[v18] = v20;
          }
          *a5 = 0;
        }
        *a6 = 0;
      }
      if (v22[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v22[0] + 40))(v22[0]);
      else
        ++v24;
    }
    if (v22[0])
    {
      (*(void (**)(void))(*(_QWORD *)v22[0] + 8))();
      goto LABEL_36;
    }
LABEL_34:
    if (v23)
      --*v23;
LABEL_36:
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
    else
      ++v27;
  }
  if (v25)
    return (*(uint64_t (**)(void))(*(_QWORD *)v25 + 8))();
  return result;
}

void sub_1ADBD1874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1ADBD1A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer begin;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_106;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_66;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) == 0)
      {
LABEL_32:
        v58.__begin_[v13] = 2;
        v20 = v12[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v12[4];
          if (v21)
            --*v21;
        }
        v12[6] = v55;
        v55 = v12;
        --*((_QWORD *)&v57 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
        if (!*((_QWORD *)&v57 + 1))
        {
          fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
          goto LABEL_62;
        }
        v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v24 = *(_QWORD *)(v22 + 8);
        if (v24)
        {
LABEL_41:
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
          goto LABEL_62;
        }
        ++*(_QWORD *)(v22 + 40);
        goto LABEL_62;
      }
      v15 = v12[1];
      if (!v15)
      {
        if (v12[5] >= v12[3])
          goto LABEL_32;
LABEL_28:
        v17 = v12[2] + 16 * v12[5];
        goto LABEL_29;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
        goto LABEL_32;
      v16 = v12[1];
      if (!v16)
        goto LABEL_28;
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
LABEL_29:
      v18 = *(int *)(v17 + 12);
      v19 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v18)
      {
        v7 = v18 + 1;
        v49[0] = 0;
        if (v18 + 1 <= v19)
        {
          if (v18 + 1 < v19)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v18 + 1 - v19, v49);
        }
      }
      if (*(_QWORD *)v17)
      {
        v24 = v12[1];
        if (v24)
          goto LABEL_41;
LABEL_58:
        ++v12[5];
        goto LABEL_62;
      }
      v25 = *(int *)(v17 + 12);
      v26 = v58.__begin_[v25];
      if (v26 == 1)
      {
        **(_BYTE **)(a2 + 8) = 0;
        v28 = v12[1];
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
          v11 = 0;
          goto LABEL_62;
        }
        v11 = 0;
        goto LABEL_58;
      }
      if (v26 == 2)
      {
        v27 = v12[1];
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
        else
          ++v12[5];
      }
      else
      {
        v58.__begin_[v25] = 1;
        v29 = (uint64_t)v55;
        if (v55)
        {
          v55 = (_QWORD *)v55[6];
        }
        else
        {
          v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
          *(_QWORD *)(v29 + 48) = 0;
        }
        *(_DWORD *)v29 = *(_DWORD *)(v17 + 12);
        *(_QWORD *)(v29 + 40) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
        *(_QWORD *)v49 = v29;
        std::deque<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>> *>>::push_back(v56, v49);
      }
      v11 = 1;
LABEL_62:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_66:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_76:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_82;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_82:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_76;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      begin = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != begin)
      {
        v44 = &end[~(unint64_t)begin];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != begin);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      a3 = v46;
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_106:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D19878;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADBD2174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19878;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::RmEpsilonState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>>::Expand(_QWORD *a1, int a2)
{
  uint64_t v3;
  char **v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  __int128 *v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _OWORD *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  float v44;
  float v45;
  uint64_t v46;
  float v47;
  float v48;
  BOOL v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  int *i;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  _QWORD v64[3];
  _DWORD *v65;
  unint64_t v66;
  int v67[3];

  v67[0] = a2;
  *((_DWORD *)a1 + 72) = 2139095040;
  a1[34] = a1[33];
  fst::ShortestDistanceState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ShortestDistance(a1 + 2, a2);
  if (*((_BYTE *)a1 + 132))
    return;
  std::deque<int>::push_back(a1 + 23, v67);
  v3 = a1[28];
  if (!v3)
    goto LABEL_90;
  v4 = (char **)(a1 + 33);
  v5 = a1 + 29;
  v56 = (uint64_t)(a1 + 35);
  do
  {
    v6 = v3 - 1;
    v7 = *(unsigned int *)(*(_QWORD *)(a1[24] + (((unint64_t)(a1[27] + v6) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((a1[27] + v6) & 0x3FF));
    a1[28] = v6;
    std::deque<int>::__maybe_remove_back_spare[abi:ne180100](a1 + 23, 1);
    while (a1[30] <= (unint64_t)(int)v7)
    {
      LOBYTE(v64[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 29), v64);
    }
    v8 = *(_QWORD *)(*v5 + 8 * ((unint64_t)(int)v7 >> 6));
    if ((v8 & (1 << v7)) != 0)
      goto LABEL_86;
    *(_QWORD *)(*v5 + 8 * ((unint64_t)(int)v7 >> 6)) = v8 | (1 << v7);
    v9 = a1[32];
    v10 = operator new(0x10uLL);
    *(_QWORD *)v10 = v9;
    v10[2] = v7;
    a1[32] = v10;
    v11 = *a1;
    v66 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v11 + 136))(v11, v7, v64);
    while (1)
    {
      if (!v64[0])
      {
        if (v66 >= v64[2])
          goto LABEL_70;
        goto LABEL_13;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v64[0] + 24))(v64[0]))
        break;
      if (v64[0])
      {
        v12 = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)v64[0] + 32))();
        goto LABEL_14;
      }
LABEL_13:
      v12 = (__int128 *)(v64[1] + 16 * v66);
LABEL_14:
      v63 = *v12;
      v13 = *(float *)(*(_QWORD *)a1[1] + 4 * (int)v7);
      v14 = NAN;
      if (v13 != -INFINITY)
      {
        v14 = NAN;
        if (*((float *)&v63 + 2) != -INFINITY)
        {
          v14 = INFINITY;
          v15 = *((float *)&v63 + 2) == INFINITY || v13 == INFINITY;
          v16 = v13 + *((float *)&v63 + 2);
          if (!v15)
            v14 = v16;
        }
      }
      *((float *)&v63 + 2) = v14;
      if ((_QWORD)v63)
      {
        v61 = v63;
        v62 = HIDWORD(v63);
        v17 = std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::find<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element>(a1 + 17, (int *)&v61);
        if (!v17)
        {
          v24 = (uint64_t)(a1[34] - a1[33]) >> 4;
          v25 = *((_DWORD *)a1 + 73);
          v57 = v61;
          v58 = v62;
          v59 = v25;
          v60 = v24;
          std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::__emplace_unique_key_args<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>((uint64_t)(a1 + 17), (int *)&v57, (uint64_t)&v57);
          v27 = (_OWORD *)a1[34];
          v26 = a1[35];
          if ((unint64_t)v27 < v26)
            goto LABEL_41;
          v28 = ((char *)v27 - *v4) >> 4;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60)
            goto LABEL_94;
          v30 = v26 - (_QWORD)*v4;
          if (v30 >> 3 > v29)
            v29 = v30 >> 3;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
            v31 = 0xFFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v56, v31);
          else
            v32 = 0;
          v39 = &v32[16 * v28];
          *(_OWORD *)v39 = v63;
          v41 = (char *)a1[33];
          v40 = (char *)a1[34];
          v42 = v39;
          if (v40 != v41)
          {
            do
            {
              *((_OWORD *)v42 - 1) = *((_OWORD *)v40 - 1);
              v42 -= 16;
              v40 -= 16;
            }
            while (v40 != v41);
LABEL_57:
            v40 = *v4;
          }
LABEL_58:
          v36 = v39 + 16;
          a1[33] = v42;
          a1[34] = v39 + 16;
          a1[35] = &v32[16 * v31];
          if (v40)
            operator delete(v40);
          goto LABEL_60;
        }
        v18 = *((_DWORD *)a1 + 73);
        if (*((_DWORD *)v17 + 8) != v18)
        {
          *((_DWORD *)v17 + 8) = v18;
          v33 = a1[33];
          v27 = (_OWORD *)a1[34];
          v34 = ((uint64_t)v27 - v33) >> 4;
          v17[5] = v34;
          v35 = a1[35];
          if ((unint64_t)v27 < v35)
          {
LABEL_41:
            *v27 = v63;
            v36 = v27 + 1;
LABEL_60:
            a1[34] = v36;
            goto LABEL_65;
          }
          v37 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 60)
LABEL_94:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v38 = v35 - v33;
          if (v38 >> 3 > v37)
            v37 = v38 >> 3;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
            v31 = 0xFFFFFFFFFFFFFFFLL;
          else
            v31 = v37;
          if (v31)
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v56, v31);
          else
            v32 = 0;
          v39 = &v32[16 * v34];
          *(_OWORD *)v39 = v63;
          v43 = (char *)a1[33];
          v40 = (char *)a1[34];
          v42 = v39;
          if (v40 != v43)
          {
            do
            {
              *((_OWORD *)v42 - 1) = *((_OWORD *)v40 - 1);
              v42 -= 16;
              v40 -= 16;
            }
            while (v40 != v43);
            goto LABEL_57;
          }
          goto LABEL_58;
        }
        v19 = (uint64_t)&(*v4)[16 * v17[5]];
        v21 = *(float *)(v19 + 8);
        v20 = (float *)(v19 + 8);
        v22 = v21;
        v23 = *((float *)&v63 + 2);
        if (v21 != INFINITY)
        {
          if (*((float *)&v63 + 2) == INFINITY)
          {
            v23 = v22;
          }
          else if (v22 <= *((float *)&v63 + 2))
          {
            v45 = expf(-(float)(*((float *)&v63 + 2) - v22));
            v23 = v22 - logf(v45 + 1.0);
          }
          else
          {
            v44 = expf(-(float)(v22 - *((float *)&v63 + 2)));
            v23 = v23 - logf(v44 + 1.0);
          }
        }
        *v20 = v23;
      }
      else
      {
        while (a1[30] <= (unint64_t)SHIDWORD(v63))
        {
          LOBYTE(v57) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 29), &v57);
        }
        if (((*(_QWORD *)(*v5 + (((unint64_t)SHIDWORD(v63) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SBYTE12(v63)) & 1) == 0)
          std::deque<int>::push_back(a1 + 23, (_DWORD *)&v63 + 3);
      }
LABEL_65:
      if (v64[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v64[0] + 40))(v64[0]);
      else
        ++v66;
    }
    if (v64[0])
    {
      (*(void (**)(void))(*(_QWORD *)v64[0] + 8))();
    }
    else
    {
LABEL_70:
      if (v65)
        --*v65;
    }
    v46 = *(_QWORD *)a1[1];
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, v7);
    v48 = *(float *)(v46 + 4 * (int)v7);
    if (v48 == -INFINITY || v47 == -INFINITY)
    {
      v52 = *((float *)a1 + 72);
      v51 = NAN;
      if (v52 == INFINITY)
        goto LABEL_85;
      goto LABEL_84;
    }
    v49 = v47 == INFINITY || v48 == INFINITY;
    v50 = v48 + v47;
    if (v49)
      v51 = INFINITY;
    else
      v51 = v50;
    v52 = *((float *)a1 + 72);
    if (v52 != INFINITY)
    {
      if (v51 == INFINITY)
      {
        v51 = *((float *)a1 + 72);
        goto LABEL_85;
      }
      if (v52 > v51)
      {
        v54 = expf(-(float)(v52 - v51));
        v51 = v51 - logf(v54 + 1.0);
        goto LABEL_85;
      }
LABEL_84:
      v53 = expf(-(float)(v51 - v52));
      v51 = v52 - logf(v53 + 1.0);
    }
LABEL_85:
    *((float *)a1 + 72) = v51;
LABEL_86:
    v3 = a1[28];
  }
  while (v3);
LABEL_90:
  for (i = (int *)a1[32]; i; i = (int *)a1[32])
  {
    *(_QWORD *)(a1[29] + (((unint64_t)i[2] >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << i[2]);
    a1[32] = *(_QWORD *)i;
    operator delete(i);
  }
  ++*((_DWORD *)a1 + 73);
}

void sub_1ADBD2848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_DWORD *a23)
{
  if (a20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  }
  else if (a23)
  {
    --*a23;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::RmEpsilonState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>>::~RmEpsilonState(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[32];
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  a1[32] = 0;
  v5 = (void *)a1[29];
  if (v5)
    operator delete(v5);
  std::deque<int>::~deque[abi:ne180100](a1 + 23);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 17));
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(a1 + 2);
  return a1;
}

void fst::ShortestDistanceState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ShortestDistance(_QWORD *a1, int a2)
{
  fst *v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  _DWORD *v8;
  void **v9;
  char *v10;
  unint64_t v11;
  char **v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  char *v35;
  char *v36;
  unint64_t v37;
  _QWORD *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  char **v46;
  _QWORD *v47;
  int v48;
  void **v49;
  void **v50;
  _DWORD *v51;
  char *v52;
  unint64_t i;
  unint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  int v63;
  unint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  int v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  char *v79;
  void **v80;
  void **v81;
  _DWORD *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  int v95;
  unint64_t v96;
  _DWORD *v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  int v107;
  char *v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  int v118;
  char *v119;
  char *v120;
  float v121;
  float v122;
  BOOL v123;
  float v124;
  uint64_t v125;
  float v126;
  float v127;
  BOOL v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  uint64_t v139;
  char v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  uint64_t v148;
  void *__p[2];
  unint64_t v150;
  _DWORD *v151;
  unint64_t v152;
  int v153;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
      return;
    goto LABEL_234;
  }
  if (*((_BYTE *)a1 + 32))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v153, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ShortestDistance: first_path option disallowed when ", 52);
    v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)"Weight does not have the path property: ", 40);
    v143 = fst::LogWeightTpl<float>::Type();
    v144 = *(char *)(v143 + 23);
    if (v144 >= 0)
      v145 = v143;
    else
      v145 = *(_QWORD *)v143;
    if (v144 >= 0)
      v146 = *(unsigned __int8 *)(v143 + 23);
    else
      v146 = *(_QWORD *)(v143 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, v145, v146);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v153);
    if (SHIBYTE(v150) < 0)
      operator delete(__p[0]);
LABEL_234:
    v147 = (char *)a1 + 116;
    goto LABEL_235;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 56))(*(_QWORD *)(a1[2] + 16));
  if (!*((_BYTE *)a1 + 33))
  {
    *(_QWORD *)(a1[1] + 8) = *(_QWORD *)a1[1];
    a1[6] = a1[5];
    a1[9] = 0;
  }
  if (a2 == -1)
    a2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v6 = a2;
  v7 = (void **)a1[1];
  v9 = v7 + 1;
  v8 = v7[1];
  v10 = (char *)*v7;
  v11 = ((char *)v8 - (_BYTE *)*v7) >> 2;
  if (v11 <= a2)
  {
    v12 = (char **)(a1 + 5);
    do
    {
      v13 = (unint64_t)v7[2];
      if ((unint64_t)v8 >= v13)
      {
        if ((v11 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v13 - (_QWORD)v10;
        v16 = v15 >> 1;
        if (v15 >> 1 <= v11 + 1)
          v16 = v11 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v7 + 2), v17);
        else
          v18 = 0;
        v19 = &v18[4 * v11];
        *(_DWORD *)v19 = 2139095040;
        v14 = v19 + 4;
        v20 = (char *)*v9;
        v21 = (char *)*v7;
        if (*v9 != *v7)
        {
          do
          {
            v22 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v19 - 1) = v22;
            v19 -= 4;
          }
          while (v20 != v21);
          v20 = (char *)*v7;
        }
        *v7 = v19;
        *v9 = v14;
        v7[2] = &v18[4 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v8 = 2139095040;
        v14 = v8 + 1;
      }
      *v9 = v14;
      v24 = (_DWORD *)a1[6];
      v23 = a1[7];
      if ((unint64_t)v24 >= v23)
      {
        v26 = ((char *)v24 - *v12) >> 2;
        if ((unint64_t)(v26 + 1) >> 62)
LABEL_241:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v27 = v23 - (_QWORD)*v12;
        v28 = v27 >> 1;
        if (v27 >> 1 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v29);
        else
          v30 = 0;
        v31 = &v30[4 * v26];
        *(_DWORD *)v31 = 2139095040;
        v25 = v31 + 4;
        v33 = (char *)a1[5];
        v32 = (char *)a1[6];
        if (v32 != v33)
        {
          do
          {
            v34 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *((_DWORD *)v31 - 1) = v34;
            v31 -= 4;
          }
          while (v32 != v33);
          v32 = *v12;
        }
        a1[5] = v31;
        a1[6] = v25;
        a1[7] = &v30[4 * v29];
        if (v32)
          operator delete(v32);
      }
      else
      {
        *v24 = 2139095040;
        v25 = v24 + 1;
      }
      a1[6] = v25;
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), __p);
      v7 = (void **)a1[1];
      v9 = v7 + 1;
      v8 = v7[1];
      v10 = (char *)*v7;
      v11 = ((char *)v8 - (_BYTE *)*v7) >> 2;
    }
    while (v11 <= v6);
  }
  if (*((_BYTE *)a1 + 33))
  {
    v35 = (char *)a1[11];
    v36 = (char *)a1[12];
    v37 = (v36 - v35) >> 2;
    if (v37 <= v6)
    {
      v38 = a1 + 13;
      do
      {
        if ((unint64_t)v36 >= *v38)
        {
          v40 = v37 + 1;
          if ((v37 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v41 = *v38 - (_QWORD)v35;
          if (v41 >> 1 > v40)
            v40 = v41 >> 1;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
            v42 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          if (v42)
          {
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v42);
            v35 = (char *)a1[11];
            v36 = (char *)a1[12];
          }
          else
          {
            v43 = 0;
          }
          v44 = &v43[4 * v37];
          *(_DWORD *)v44 = -1;
          v39 = v44 + 4;
          while (v36 != v35)
          {
            v45 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v44 - 1) = v45;
            v44 -= 4;
          }
          a1[11] = v44;
          a1[12] = v39;
          a1[13] = &v43[4 * v42];
          if (v35)
          {
            operator delete(v35);
            v35 = (char *)a1[11];
          }
          else
          {
            v35 = v44;
          }
        }
        else
        {
          *(_DWORD *)v36 = -1;
          v39 = v36 + 4;
        }
        a1[12] = v39;
        v37 = (v39 - v35) >> 2;
        v36 = v39;
      }
      while (v37 <= v6);
      v10 = *(char **)a1[1];
    }
    *(_DWORD *)&v35[4 * v6] = *((_DWORD *)a1 + 28);
  }
  *(_DWORD *)&v10[4 * v6] = 0;
  v46 = (char **)(a1 + 5);
  *(_DWORD *)(a1[5] + 4 * v6) = 0;
  *(_QWORD *)(a1[8] + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v6;
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[2] + 16) + 24))(*(_QWORD *)(a1[2] + 16), v6);
  v148 = (uint64_t)(a1 + 7);
  v47 = a1 + 13;
  v147 = (char *)a1 + 116;
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 48))(*(_QWORD *)(a1[2] + 16)) & 1) != 0)
      goto LABEL_236;
    v48 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 16))(*(_QWORD *)(a1[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 32))(*(_QWORD *)(a1[2] + 16));
    v49 = (void **)a1[1];
    v50 = v49 + 1;
    v51 = v49[1];
    v52 = (char *)*v49;
    for (i = ((char *)v51 - (_BYTE *)*v49) >> 2; i <= v48; i = ((char *)v51 - (_BYTE *)*v49) >> 2)
    {
      v54 = (unint64_t)v49[2];
      if ((unint64_t)v51 >= v54)
      {
        if ((i + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v56 = v54 - (_QWORD)v52;
        v57 = v56 >> 1;
        if (v56 >> 1 <= i + 1)
          v57 = i + 1;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
          v58 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v58 = v57;
        if (v58)
          v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v49 + 2), v58);
        else
          v59 = 0;
        v60 = &v59[4 * i];
        *(_DWORD *)v60 = 2139095040;
        v55 = v60 + 4;
        v61 = (char *)*v50;
        v62 = (char *)*v49;
        if (*v50 != *v49)
        {
          do
          {
            v63 = *((_DWORD *)v61 - 1);
            v61 -= 4;
            *((_DWORD *)v60 - 1) = v63;
            v60 -= 4;
          }
          while (v61 != v62);
          v61 = (char *)*v49;
        }
        *v49 = v60;
        *v50 = v55;
        v49[2] = &v59[4 * v58];
        if (v61)
          operator delete(v61);
      }
      else
      {
        *v51 = 2139095040;
        v55 = v51 + 1;
      }
      *v50 = v55;
      v65 = (_DWORD *)a1[6];
      v64 = a1[7];
      if ((unint64_t)v65 >= v64)
      {
        v67 = ((char *)v65 - *v46) >> 2;
        if ((unint64_t)(v67 + 1) >> 62)
          goto LABEL_241;
        v68 = v64 - (_QWORD)*v46;
        v69 = v68 >> 1;
        if (v68 >> 1 <= (unint64_t)(v67 + 1))
          v69 = v67 + 1;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
          v70 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v70 = v69;
        if (v70)
          v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v148, v70);
        else
          v71 = 0;
        v72 = &v71[4 * v67];
        *(_DWORD *)v72 = 2139095040;
        v66 = v72 + 4;
        v74 = (char *)a1[5];
        v73 = (char *)a1[6];
        if (v73 != v74)
        {
          do
          {
            v75 = *((_DWORD *)v73 - 1);
            v73 -= 4;
            *((_DWORD *)v72 - 1) = v75;
            v72 -= 4;
          }
          while (v73 != v74);
          v73 = *v46;
        }
        a1[5] = v72;
        a1[6] = v66;
        a1[7] = &v71[4 * v70];
        if (v73)
          operator delete(v73);
      }
      else
      {
        *v65 = 2139095040;
        v66 = v65 + 1;
      }
      a1[6] = v66;
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), __p);
      v49 = (void **)a1[1];
      v50 = v49 + 1;
      v51 = v49[1];
      v52 = (char *)*v49;
    }
    if (*((_BYTE *)a1 + 32))
    {
      LODWORD(__p[0]) = (*(float (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v48);
      v153 = 2139095040;
      if (*(float *)__p != INFINITY)
      {
LABEL_236:
        ++*((_DWORD *)a1 + 28);
        if (!(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
          return;
LABEL_235:
        *v147 = 1;
        return;
      }
    }
    *(_QWORD *)(a1[8] + (((unint64_t)v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v48);
    v76 = a1[5];
    v77 = *(float *)(v76 + 4 * v48);
    *(_DWORD *)(v76 + 4 * v48) = 2139095040;
    v78 = *a1;
    v152 = 0;
    (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)v78 + 136))(v78, v48, __p);
    while (1)
    {
      if (__p[0])
      {
        if (((*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]) & 1) != 0)
          goto LABEL_217;
        if (__p[0])
        {
          v79 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 32))(__p[0]);
          goto LABEL_114;
        }
      }
      else if (v152 >= v150)
      {
LABEL_217:
        v140 = 1;
        goto LABEL_218;
      }
      v79 = (char *)__p[1] + 16 * v152;
LABEL_114:
      if (*(_QWORD *)v79)
        goto LABEL_214;
      v80 = (void **)a1[1];
      v81 = v80 + 1;
      v82 = v80[1];
      v83 = (char *)*v80;
      v84 = ((char *)v82 - (_BYTE *)*v80) >> 2;
      if (v84 <= *((int *)v79 + 3))
      {
        do
        {
          v86 = (unint64_t)v80[2];
          if ((unint64_t)v82 >= v86)
          {
            if ((v84 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v88 = v86 - (_QWORD)v83;
            v89 = v88 >> 1;
            if (v88 >> 1 <= v84 + 1)
              v89 = v84 + 1;
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
              v90 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v90 = v89;
            if (v90)
              v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v80 + 2), v90);
            else
              v91 = 0;
            v92 = &v91[4 * v84];
            *(_DWORD *)v92 = 2139095040;
            v87 = v92 + 4;
            v93 = (char *)*v81;
            v94 = (char *)*v80;
            if (*v81 != *v80)
            {
              do
              {
                v95 = *((_DWORD *)v93 - 1);
                v93 -= 4;
                *((_DWORD *)v92 - 1) = v95;
                v92 -= 4;
              }
              while (v93 != v94);
              v93 = (char *)*v80;
            }
            *v80 = v92;
            *v81 = v87;
            v80[2] = &v91[4 * v90];
            if (v93)
              operator delete(v93);
          }
          else
          {
            *v82 = 2139095040;
            v87 = v82 + 1;
          }
          *v81 = v87;
          v97 = (_DWORD *)a1[6];
          v96 = a1[7];
          if ((unint64_t)v97 >= v96)
          {
            v99 = ((char *)v97 - *v46) >> 2;
            if ((unint64_t)(v99 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v100 = v96 - (_QWORD)*v46;
            v101 = v100 >> 1;
            if (v100 >> 1 <= (unint64_t)(v99 + 1))
              v101 = v99 + 1;
            if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
              v102 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v102 = v101;
            if (v102)
              v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v148, v102);
            else
              v103 = 0;
            v104 = &v103[4 * v99];
            *(_DWORD *)v104 = 2139095040;
            v98 = v104 + 4;
            v106 = (char *)a1[5];
            v105 = (char *)a1[6];
            if (v105 != v106)
            {
              do
              {
                v107 = *((_DWORD *)v105 - 1);
                v105 -= 4;
                *((_DWORD *)v104 - 1) = v107;
                v104 -= 4;
              }
              while (v105 != v106);
              v105 = *v46;
            }
            a1[5] = v104;
            a1[6] = v98;
            a1[7] = &v103[4 * v102];
            if (v105)
              operator delete(v105);
          }
          else
          {
            *v97 = 2139095040;
            v98 = v97 + 1;
          }
          a1[6] = v98;
          LOBYTE(v153) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v153);
          v80 = (void **)a1[1];
          v81 = v80 + 1;
          v82 = v80[1];
          v83 = (char *)*v80;
          v84 = ((char *)v82 - (_BYTE *)*v80) >> 2;
          v85 = *((int *)v79 + 3);
        }
        while (v84 <= v85);
      }
      else
      {
        LODWORD(v85) = *((_DWORD *)v79 + 3);
      }
      if (*((_BYTE *)a1 + 33))
      {
        v108 = (char *)a1[11];
        v109 = (char *)a1[12];
        v110 = (v109 - v108) >> 2;
        if (v110 <= (int)v85)
        {
          do
          {
            if ((unint64_t)v109 >= *v47)
            {
              v113 = v110 + 1;
              if ((v110 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v114 = *v47 - (_QWORD)v108;
              if (v114 >> 1 > v113)
                v113 = v114 >> 1;
              if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
                v115 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v115 = v113;
              if (v115)
              {
                v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v115);
                v108 = (char *)a1[11];
                v109 = (char *)a1[12];
              }
              else
              {
                v116 = 0;
              }
              v117 = &v116[4 * v110];
              *(_DWORD *)v117 = -1;
              v112 = v117 + 4;
              while (v109 != v108)
              {
                v118 = *((_DWORD *)v109 - 1);
                v109 -= 4;
                *((_DWORD *)v117 - 1) = v118;
                v117 -= 4;
              }
              a1[11] = v117;
              a1[12] = v112;
              a1[13] = &v116[4 * v115];
              if (v108)
              {
                operator delete(v108);
                v108 = (char *)a1[11];
              }
              else
              {
                v108 = v117;
              }
            }
            else
            {
              *(_DWORD *)v109 = -1;
              v112 = v109 + 4;
            }
            a1[12] = v112;
            v110 = (v112 - v108) >> 2;
            LODWORD(v85) = *((_DWORD *)v79 + 3);
            v109 = v112;
          }
          while (v110 <= (int)v85);
          v111 = (int)v85;
          v80 = (void **)a1[1];
        }
        else
        {
          v111 = (int)v85;
        }
        if (*(_DWORD *)&v108[4 * v111] != *((_DWORD *)a1 + 28))
        {
          *((_DWORD *)*v80 + v111) = 2139095040;
          *(_DWORD *)(a1[5] + 4 * *((int *)v79 + 3)) = 2139095040;
          v85 = *((int *)v79 + 3);
          *(_QWORD *)(a1[8] + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v85);
          *(_DWORD *)(a1[11] + 4 * v85) = *((_DWORD *)a1 + 28);
          v80 = (void **)a1[1];
          LODWORD(v85) = *((_DWORD *)v79 + 3);
        }
      }
      v119 = (char *)*v80;
      v120 = *v46;
      v121 = NAN;
      if (v77 != -INFINITY)
      {
        v122 = *((float *)v79 + 2);
        v121 = NAN;
        if (v122 != -INFINITY)
        {
          v123 = v122 == INFINITY || v77 == INFINITY;
          v124 = v77 + v122;
          if (v123)
            v121 = INFINITY;
          else
            v121 = v124;
        }
      }
      v125 = (int)v85;
      v126 = *(float *)&v119[4 * (int)v85];
      if (v126 != INFINITY)
        break;
      v127 = *((float *)a1 + 7);
      v128 = v121 > (float)(v127 + INFINITY) || (float)(v121 + v127) < INFINITY;
      v126 = v121;
      if (v128)
        goto LABEL_202;
LABEL_214:
      if (__p[0])
        (*(void (**)(void *))(*(_QWORD *)__p[0] + 40))(__p[0]);
      else
        ++v152;
    }
    v129 = *(float *)&v119[4 * (int)v85];
    if (v121 != INFINITY)
    {
      if (v126 <= v121)
      {
        v131 = expf(-(float)(v121 - v126));
        v129 = v126 - logf(v131 + 1.0);
      }
      else
      {
        v130 = expf(-(float)(v126 - v121));
        v129 = v121 - logf(v130 + 1.0);
      }
    }
    v132 = *((float *)a1 + 7);
    if (v129 <= (float)(v126 + v132) && v126 <= (float)(v129 + v132))
      goto LABEL_214;
    if (v121 != INFINITY)
    {
      if (v126 <= v121)
      {
        v135 = expf(-(float)(v121 - v126));
        v126 = v126 - logf(v135 + 1.0);
      }
      else
      {
        v134 = expf(-(float)(v126 - v121));
        v126 = v121 - logf(v134 + 1.0);
      }
    }
LABEL_202:
    *(float *)&v119[4 * v125] = v126;
    v136 = *(float *)&v120[4 * v125];
    if (v136 != INFINITY)
    {
      if (v121 == INFINITY)
      {
        v121 = *(float *)&v120[4 * v125];
      }
      else if (v136 <= v121)
      {
        v138 = expf(-(float)(v121 - v136));
        v121 = v136 - logf(v138 + 1.0);
      }
      else
      {
        v137 = expf(-(float)(v136 - v121));
        v121 = v121 - logf(v137 + 1.0);
      }
    }
    *(float *)&v120[4 * v125] = v121;
    if (*(float *)&v119[4 * v125] != -INFINITY && (v121 < -INFINITY || v121 > -INFINITY))
    {
      v139 = **(_QWORD **)(a1[2] + 16);
      if (((*(_QWORD *)(a1[8] + (((unint64_t)*((int *)v79 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *((_DWORD *)v79 + 3)) & 1) != 0)
      {
        (*(void (**)(void))(v139 + 40))();
      }
      else
      {
        (*(void (**)(void))(v139 + 24))();
        *(_QWORD *)(a1[8] + (((unint64_t)*((int *)v79 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *((_DWORD *)v79 + 3);
      }
      goto LABEL_214;
    }
    v140 = 0;
    *v147 = 1;
LABEL_218:
    if (__p[0])
    {
      (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
    }
    else if (v151)
    {
      --*v151;
    }
  }
  while ((v140 & 1) != 0);
}

void sub_1ADBD3694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,char a22)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a22);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::Prune<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  char v13;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Prune: Weight needs to have the path property and", 49);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" be commutative: ", 17);
  v6 = fst::LogWeightTpl<float>::Type();
  v7 = *(char *)(v6 + 23);
  if (v7 >= 0)
    v8 = v6;
  else
    v8 = *(_QWORD *)v6;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(v6 + 23);
  else
    v9 = *(_QWORD *)(v6 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v8, v9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
}

void sub_1ADBD381C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SigmaMatcher(uint64_t a1, uint64_t a2, __int32 a3, int a4, int a5, int32x2_t *a6)
{
  int32x2_t *v6;
  fst *v12;
  _QWORD *v13;
  fst *v14;
  _QWORD *v15;
  BOOL v16;
  void *v18[2];
  char v19;
  char v20;
  void *__p[2];
  char v22;
  char v23;

  v6 = a6;
  *(_QWORD *)a1 = &unk_1E5D1B028;
  if (!a6)
  {
    v6 = (int32x2_t *)operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SortedMatcher(v6, a2, a3, 1);
  }
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_BYTE *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  if (a3 == 2)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v12 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)__p);
    v13 = (_QWORD *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SigmaMatcher: bad match type", 28);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
    if (v22 < 0)
      operator delete(__p[0]);
    *(_DWORD *)(a1 + 16) = 3;
    *(_BYTE *)(a1 + 52) = 1;
  }
  if (!a4)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(v18, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(v18, "ERROR");
    v14 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)v18);
    v15 = (_QWORD *)fst::cerr(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"SigmaMatcher: 0 cannot be used as sigma_label", 45);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
    if (v19 < 0)
      operator delete(v18[0]);
    *(_DWORD *)(a1 + 20) = -1;
    *(_BYTE *)(a1 + 52) = 1;
  }
  if (a5 == 1)
  {
    v16 = 1;
  }
  else
  {
    if (a5)
    {
      *(_BYTE *)(a1 + 24) = 0;
      return a1;
    }
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1) != 0;
  }
  *(_BYTE *)(a1 + 24) = v16;
  return a1;
}

void sub_1ADBD3A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~SigmaMatcher(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1B028;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::~SigmaMatcher(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1B028;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SigmaMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADBD3BD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40865AB4C8);
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Properties(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  fst *v5;
  _QWORD *v6;
  void *__p[2];
  char v8;
  char v9;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (*(_BYTE *)(a1 + 52))
    result |= 4uLL;
  v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 3)
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = -4030464001;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (v3 == 1)
    {
      v4 = -3225223169;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (!v3)
    {
      v4 = -809304065;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v5 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v6 = (_QWORD *)fst::cerr(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"SigmaMatcher:: bad match type: ", 31);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return result;
}

void sub_1ADBD3D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Flags(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) == -1 || *(_DWORD *)(a1 + 16) == 3)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  else
    return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8)) | 1;
}

BOOL fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Done_(uint64_t a1)
{
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(a1 + 8));
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SigmaMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E5D1B028;
  v6 = operator new();
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SortedMatcher(v6, *(_QWORD *)(a2 + 8), a3);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = -1;
  return a1;
}

void sub_1ADBD3E6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if (*(_DWORD *)(result + 56) != (_DWORD)a2)
  {
    v2 = result;
    *(_DWORD *)(result + 56) = a2;
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::SetState(*(_QWORD *)(result + 8), a2);
    v3 = *(_DWORD *)(v2 + 20);
    result = v3 != -1
          && fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(_QWORD *)(v2 + 8), v3);
    *(_BYTE *)(v2 + 25) = result;
  }
  return result;
}

BOOL fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Find(uint64_t a1, int a2)
{
  int v3;
  _BOOL8 result;
  fst *v7;
  _QWORD *v8;
  void *__p[2];
  char v10;
  char v11;

  *(_DWORD *)(a1 + 48) = a2;
  v3 = *(_DWORD *)(a1 + 20);
  if (v3 != a2 || v3 == -1)
  {
    result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(_QWORD *)(a1 + 8), a2);
    if (result)
    {
      *(_DWORD *)(a1 + 28) = -1;
    }
    else
    {
      if ((a2 - 1) > 0xFFFFFFFD)
        return result;
      if (!*(_BYTE *)(a1 + 25))
        return result;
      result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
      if (!result)
        return result;
      *(_DWORD *)(a1 + 28) = a2;
    }
    return 1;
  }
  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v7 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
  v8 = (_QWORD *)fst::cerr(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"SigmaMatcher::Find: bad label (sigma)", 37);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
  if (v10 < 0)
    operator delete(__p[0]);
  result = 0;
  *(_BYTE *)(a1 + 52) = 1;
  return result;
}

void sub_1ADBD3FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Value(uint64_t a1)
{
  int v2;
  _DWORD *result;
  _OWORD *v4;
  int v5;
  int v6;

  v2 = *(_DWORD *)(a1 + 28);
  result = (_DWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(*(_QWORD *)(a1 + 8));
  v4 = result;
  if (v2 != -1)
  {
    result = (_DWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = *v4;
    if (*(_BYTE *)(a1 + 24))
    {
      v5 = *(_DWORD *)(a1 + 20);
      if (*(_DWORD *)(a1 + 32) == v5)
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 36) == v5)
      {
        v6 = *(_DWORD *)(a1 + 28);
LABEL_9:
        *(_DWORD *)(a1 + 36) = v6;
      }
    }
    else
    {
      v6 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 16))
        goto LABEL_9;
      *result = v6;
    }
  }
  return result;
}

BOOL fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 72))
  {
    *(_BYTE *)(v2 + 72) = 0;
  }
  else
  {
    v3 = *(_QWORD **)(v2 + 24);
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 40))(*v3);
      v2 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      ++v3[4];
    }
  }
  result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(v2);
  if (result && *(_BYTE *)(a1 + 25) && *(_DWORD *)(a1 + 28) == -1 && *(int *)(a1 + 48) >= 1)
  {
    result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Priority(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) == -1)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2);
  fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(a1, a2);
  if (!*(_BYTE *)(a1 + 25))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2);
  else
    return -1;
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::RhoMatcher(uint64_t a1, uint64_t a2, __int32 a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6;
  fst *v12;
  _QWORD *v13;
  fst *v14;
  _QWORD *v15;
  BOOL v16;
  void *v18[2];
  char v19;
  char v20;
  void *__p[2];
  char v22;
  char v23;

  v6 = a6;
  *(_QWORD *)a1 = &unk_1E5D19F10;
  if (!a6)
  {
    v6 = operator new();
    fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SigmaMatcher(v6, a2, a3, -1, 0, 0);
  }
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = -1;
  if (a3 == 2)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v12 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)__p);
    v13 = (_QWORD *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"RhoMatcher: bad match type", 26);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
    if (v22 < 0)
      operator delete(__p[0]);
    *(_DWORD *)(a1 + 16) = 3;
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (!a4)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(v18, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(v18, "ERROR");
    v14 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)v18);
    v15 = (_QWORD *)fst::cerr(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"RhoMatcher: 0 cannot be used as rho_label", 41);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
    if (v19 < 0)
      operator delete(v18[0]);
    *(_DWORD *)(a1 + 20) = -1;
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (a5 == 1)
  {
    v16 = 1;
  }
  else
  {
    if (a5)
    {
      *(_BYTE *)(a1 + 24) = 0;
      return a1;
    }
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1) != 0;
  }
  *(_BYTE *)(a1 + 24) = v16;
  return a1;
}

void sub_1ADBD43C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~RhoMatcher(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D19F10;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::~RhoMatcher(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D19F10;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::RhoMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADBD4548(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C4050E02165);
  _Unwind_Resume(a1);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Properties(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v11;
  char v12;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (*(_BYTE *)(a1 + 48))
    result |= 4uLL;
  v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 3)
  {
    if (v3 == 1)
    {
      v4 = *(unsigned __int8 *)(a1 + 24);
      v5 = result & 0xFFFFEFFF3FFAFFFFLL;
      v6 = 0xFFFFEFFF0FF3FFFFLL;
LABEL_8:
      v7 = result & v6;
      if (v4)
        return v7;
      else
        return v5;
    }
    if (!v3)
    {
      v4 = *(unsigned __int8 *)(a1 + 24);
      v5 = result & 0xFFFFEFFFCFEEFFFFLL;
      v6 = 0xFFFFEFFF0FCFFFFFLL;
      goto LABEL_8;
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v8 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"RhoMatcher:: bad match type: ", 29);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return result;
}

void sub_1ADBD46B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Flags(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) == -1 || *(_DWORD *)(a1 + 16) == 3)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  else
    return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8)) | 1;
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::SetState_(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (*(_DWORD *)(result + 52) != (_DWORD)a2)
  {
    v2 = result;
    *(_DWORD *)(result + 52) = a2;
    result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(result + 8), a2);
    *(_BYTE *)(v2 + 25) = *(_DWORD *)(v2 + 20) != -1;
  }
  return result;
}

BOOL fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Done_(uint64_t a1)
{
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

BOOL fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Next_(uint64_t a1)
{
  return fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(*(_QWORD *)(a1 + 8));
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Final_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::RhoMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E5D19F10;
  v6 = operator new();
  fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SigmaMatcher(v6, *(_QWORD *)(a2 + 8), a3);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = -1;
  return a1;
}

void sub_1ADBD4848(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40865AB4C8);
  _Unwind_Resume(a1);
}

BOOL fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Find(uint64_t a1, int a2)
{
  int v3;
  _BOOL8 result;
  fst *v7;
  _QWORD *v8;
  void *__p[2];
  char v10;
  char v11;

  v3 = *(_DWORD *)(a1 + 20);
  if (v3 != a2 || v3 == -1)
  {
    result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Find(*(_QWORD *)(a1 + 8), a2);
    if (result)
    {
      *(_DWORD *)(a1 + 28) = -1;
    }
    else
    {
      if ((a2 - 1) > 0xFFFFFFFD)
        return result;
      if (!*(_BYTE *)(a1 + 25))
        return result;
      result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Find(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
      *(_BYTE *)(a1 + 25) = result;
      if (!result)
        return result;
      *(_DWORD *)(a1 + 28) = a2;
    }
    return 1;
  }
  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v7 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
  v8 = (_QWORD *)fst::cerr(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"RhoMatcher::Find: bad label (rho)", 33);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
  if (v10 < 0)
    operator delete(__p[0]);
  result = 0;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

void sub_1ADBD4978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Value(uint64_t a1)
{
  int v2;
  _DWORD *result;
  _OWORD *v4;
  int v5;
  int v6;

  v2 = *(_DWORD *)(a1 + 28);
  result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Value(*(_QWORD *)(a1 + 8));
  v4 = result;
  if (v2 != -1)
  {
    result = (_DWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = *v4;
    if (*(_BYTE *)(a1 + 24))
    {
      v5 = *(_DWORD *)(a1 + 20);
      if (*(_DWORD *)(a1 + 32) == v5)
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 36) == v5)
      {
        v6 = *(_DWORD *)(a1 + 28);
LABEL_9:
        *(_DWORD *)(a1 + 36) = v6;
      }
    }
    else
    {
      v6 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 16))
        goto LABEL_9;
      *result = v6;
    }
  }
  return result;
}

uint64_t fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Priority(uint64_t a1, uint64_t a2)
{
  BOOL v4;

  *(_DWORD *)(a1 + 52) = a2;
  fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(a1 + 8), a2);
  v4 = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Find(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
  *(_BYTE *)(a1 + 25) = v4;
  if (v4)
    return -1;
  else
    return fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Priority(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::CreateBase2<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1ADBD4AF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __n128 *v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, (uint64_t)a4) = &unk_1E5D1D1C0;
  v8 = (__n128 *)a4[5];
  if (!v8)
  {
    v8 = (__n128 *)operator new();
    fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::SequenceComposeFilter((uint64_t)v8, a2, a3, a4[3], a4[4]);
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152));
  v10 = (_QWORD *)a4[6];
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1ADBD4CCC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1ADBD4E50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1ADBD4FC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(_QWORD *a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;

  v4 = *(_QWORD *)(a1[22] + 80);
  v5 = (unsigned int *)(v4 + 12 * a2);
  v6 = *v5;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[18] + 8) + 8) + 8);
  v12 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, v6);
  if (v12 != INFINITY)
  {
    v8 = v5[1];
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[19] + 8) + 8) + 8);
    v10 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, v8);
    v12 = v10;
    if (v10 != INFINITY)
    {
      v11 = a1[17];
      LOBYTE(v12) = *(_BYTE *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v11, v6, v8, &v12);
    }
  }
}

uint64_t fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = a4;
  if (!a4)
  {
    v6 = operator new();
    fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::RhoMatcher(v6, a2, 1, -1, 0, 0);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = operator new();
    fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::RhoMatcher(a5, a3, 0, -1, 0, 0);
    v6 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1ADBD5288(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C4050E02165);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D1C0;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    v3 = v2[1];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    MEMORY[0x1AF44D190](v2, 0x1060C40AD892F49);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  __n128 v6;
  uint64_t v7;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D1C0;
  v4 = (_QWORD *)operator new();
  v5 = *(_QWORD **)(a2 + 136);
  *v4 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, 1);
  v4[1] = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v5[1] + 16))(v5[1], 1);
  v4[2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 32))(*v4);
  v4[3] = -1;
  *((_BYTE *)v4 + 32) = -1;
  *(_QWORD *)(a1 + 136) = v4;
  v6 = *(__n128 *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 32))(v6.n128_u64[0], v6);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152));
  v7 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v7, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v7;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1ADBD5478(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v11;
  fst *v12;
  _QWORD *v13;
  void *__p[2];
  char v15;
  char v16;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Priority(*(_QWORD *)(a1 + 144), a2);
  v8 = fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Priority(*(_QWORD *)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v12 = fst::LogMessage::LogMessage((fst *)&v16, (uint64_t)__p);
    v13 = (_QWORD *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v16);
    if (v15 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  v11 = v8 == -1 || v7 <= v8;
  return v7 != -1 && v11;
}

void sub_1ADBD55D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  int v18[4];

  if (*(_DWORD *)(a7 + 52) != (_DWORD)a4)
  {
    *(_DWORD *)(a7 + 52) = a4;
    fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(a7 + 8), a4);
    *(_BYTE *)(a7 + 25) = *(_DWORD *)(a7 + 20) != -1;
  }
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_15;
LABEL_9:
      v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_9;
    v14 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16)
    --*v16;
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADBD578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  int *v10;
  _BOOL8 result;
  __int128 v12;
  unsigned __int8 *v13;
  char v14;
  unsigned __int8 *v15;
  char v16;
  int v17;
  char v18;
  unsigned int *v19;
  __int128 *v20;
  int v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Find(a3, *v10);
  if (result)
  {
    for (result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8));
          !result;
          result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8)))
    {
      v12 = *(_OWORD *)fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Value(a3);
      v24 = *(_OWORD *)a4;
      v25 = v12;
      if (a5)
      {
        v13 = *(unsigned __int8 **)(a1 + 136);
        if (DWORD1(v24) != -1)
        {
          if ((_DWORD)v25 == -1)
          {
            v17 = v13[32];
            if (v17)
              v18 = -1;
            else
              v18 = 0;
            v23 = v18;
            if (v17)
              goto LABEL_35;
          }
          else
          {
            if (DWORD1(v24))
              v14 = 0;
            else
              v14 = -1;
            v23 = v14;
            if (!DWORD1(v24))
              goto LABEL_35;
          }
LABEL_28:
          v19 = (unsigned int *)&v24;
          v20 = &v25;
LABEL_34:
          fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, (uint64_t)v20, &v23);
          goto LABEL_35;
        }
        if (!v13[33])
        {
          v23 = v13[34] ^ 1;
          goto LABEL_28;
        }
      }
      else
      {
        v15 = *(unsigned __int8 **)(a1 + 136);
        if (DWORD1(v25) != -1)
        {
          if ((_DWORD)v24 == -1)
          {
            v21 = v15[32];
            if (v21)
              v22 = -1;
            else
              v22 = 0;
            v23 = v22;
            if (v21)
              goto LABEL_35;
          }
          else
          {
            if (DWORD1(v25))
              v16 = 0;
            else
              v16 = -1;
            v23 = v16;
            if (!DWORD1(v25))
              goto LABEL_35;
          }
LABEL_33:
          v19 = (unsigned int *)&v25;
          v20 = &v24;
          goto LABEL_34;
        }
        if (!v15[33])
        {
          v23 = v15[34] ^ 1;
          goto LABEL_33;
        }
      }
LABEL_35:
      fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(*(_QWORD *)(a3 + 8));
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F080;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 144) + 16))(*(_QWORD *)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 152) + 16))(*(_QWORD *)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1F080;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1F080;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADBD5AE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != 4
        || (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) == 4
          && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = *v3;
    v5 = v3[1];
    v6 = *(_QWORD *)(result + 32);
    if (*(_DWORD *)(v6 + 52) != (_DWORD)v4)
    {
      *(_DWORD *)(v6 + 52) = v4;
      result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(v6 + 8), v4);
      *(_BYTE *)(v6 + 25) = *(_DWORD *)(v6 + 20) != -1;
    }
    v7 = *(_QWORD *)(v2 + 40);
    if (*(_DWORD *)(v7 + 52) != (_DWORD)v5)
    {
      *(_DWORD *)(v7 + 52) = v5;
      result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(v7 + 8), v5);
      *(_BYTE *)(v7 + 25) = *(_DWORD *)(v7 + 20) != -1;
    }
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;

  *(_BYTE *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      v2 = (uint64_t *)(a1 + 40);
      v3 = (uint64_t *)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    v2 = (uint64_t *)(a1 + 32);
    v3 = (uint64_t *)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 48)
      && fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 8))
      && fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 8));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD *)(result + 32);
      v1 = *(_QWORD *)(result + 40);
    }
    else
    {
      v1 = *(_QWORD *)(result + 32);
      v2 = *(_QWORD *)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F080;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 32) + 16))(*(_QWORD *)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 40) + 16))(*(_QWORD *)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1ADBD5F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int *v9;
  int *v10;

  result = fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Find(a3, a2);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 28);
    v9 = fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Value(a3);
    v10 = v9 + 1;
    if (v8)
      v10 = v9;
    fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Find(a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>,fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int *v7;
  int *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8))
       || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8)))
  {
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8)))
    {
      fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(*(_QWORD *)(a2 + 8));
      while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8)))
      {
        v6 = *(_DWORD *)(a1 + 28);
        v7 = fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Value(a2);
        v8 = v7 + 1;
        if (v6)
          v8 = v7;
        if (fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Find(a3, *v8))
        {
          break;
        }
        fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(*(_QWORD *)(a2 + 8));
      }
    }
    while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8)))
    {
      v9 = (uint64_t *)fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Value(a2);
      v10 = (uint64_t *)fst::RhoMatcher<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>>::Value(a3);
      fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(*(_QWORD *)(a3 + 8));
      v11 = *(_DWORD *)(a1 + 28);
      v12 = v11 == 0;
      if (v11)
        v13 = v10;
      else
        v13 = v9;
      v14 = *v13;
      v15 = v13[1];
      if (v12)
        v16 = v10;
      else
        v16 = v9;
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1;
    }
  }
  return 0;
}

unint64_t sh_hashtable_settings<int,std::hash<int>,unsigned long,4>::min_buckets(uint64_t a1, unint64_t a2, unint64_t a3)
{
  float v3;
  unint64_t result;
  std::logic_error *exception;

  v3 = *(float *)(a1 + 16);
  for (result = 4; result < a3 || (unint64_t)(float)(v3 * (float)result) <= a2; result *= 2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::length_error::length_error[abi:ne180100](exception, "resize overflow");
      __cxa_throw(exception, (struct type_info *)off_1E5CFD1B0, (void (*)(void *))MEMORY[0x1E0DE42D0]);
    }
  }
  return result;
}

void sub_1ADBD61AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void fst::StateSort<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  void **v8;
  void **p_p;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  _OWORD *v15;
  char *v16;
  char *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  float v30;
  void **v31;
  uint64_t v32;
  unint64_t v33;
  _OWORD *v34;
  char *v35;
  char *v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  fst *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56[2];
  unint64_t v57;
  _DWORD *v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  void *__p;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69[4];

  v4 = a2[1] - *a2;
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) == v4 >> 2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) == -1)
      return;
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0xF3FFFFF0007, 0);
    v6 = (uint64_t)(a2[1] - *a2) >> 2;
    LOBYTE(v56[0]) = 0;
    std::vector<BOOL>::vector(v69, v6, (unsigned __int8 *)v56);
    v66 = 0;
    v67 = 0;
    v68 = 0;
    __p = 0;
    v64 = 0;
    v65 = 0;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 176))(a1, *(unsigned int *)(*a2 + 4 * v7));
    v52 = v5;
    v62 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v60);
    v8 = &v66;
    p_p = &__p;
LABEL_4:
    if (!v60)
    {
      if (v62 >= v61)
        goto LABEL_85;
      goto LABEL_9;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60))
    {
      if (v60)
      {
        v10 = (*(uint64_t (**)(void))(*(_QWORD *)v60 + 24))();
LABEL_10:
        v11 = v10;
        v12 = (unint64_t)v10 >> 6;
        v13 = 1 << v10;
        if (((1 << v10) & *((_QWORD *)v69[0] + v12)) != 0)
          goto LABEL_78;
        v14 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, v10);
        v54 = v13;
        v8[1] = *v8;
        v59 = 0;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v11, v56);
        while (1)
        {
          if (v56[0])
          {
            if ((*(unsigned int (**)(void *))(*(_QWORD *)v56[0] + 24))(v56[0]))
            {
              if (v56[0])
              {
                (*(void (**)(void))(*(_QWORD *)v56[0] + 8))();
                goto LABEL_41;
              }
LABEL_39:
              if (v58)
                --*v58;
LABEL_41:
              v28 = v69[0];
              v29 = v54;
              if ((*((_QWORD *)v69[0] + v12) & v54) != 0)
                goto LABEL_78;
              v53 = v12;
              v30 = INFINITY;
              v31 = v8;
              while (2)
              {
                v55 = v29;
                v8 = p_p;
                p_p = v31;
                v32 = *(unsigned int *)(*a2 + 4 * v11);
                v33 = (unint64_t)(int)v32 >> 6;
                if (((1 << v32) & v28[v33]) != 0)
                  goto LABEL_74;
                v30 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v32);
                v8[1] = *v8;
                v59 = 0;
                (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v32, v56);
                while (2)
                {
                  if (!v56[0])
                  {
                    if (v59 >= v57)
                      goto LABEL_72;
                    goto LABEL_50;
                  }
                  if (!(*(unsigned int (**)(void *))(*(_QWORD *)v56[0] + 24))(v56[0]))
                  {
                    if (v56[0])
                    {
                      v34 = (_OWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v56[0] + 32))();
LABEL_51:
                      v36 = (char *)v8[1];
                      v35 = (char *)v8[2];
                      if (v36 >= v35)
                      {
                        v38 = (v36 - (_BYTE *)*v8) >> 4;
                        v39 = v38 + 1;
                        if ((unint64_t)(v38 + 1) >> 60)
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        v40 = v35 - (_BYTE *)*v8;
                        if (v40 >> 3 > v39)
                          v39 = v40 >> 3;
                        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
                          v41 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v41 = v39;
                        if (v41)
                          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v8 + 2), v41);
                        else
                          v42 = 0;
                        v43 = &v42[16 * v38];
                        *(_OWORD *)v43 = *v34;
                        v45 = (char *)*v8;
                        v44 = (char *)v8[1];
                        v46 = v43;
                        if (v44 != *v8)
                        {
                          do
                          {
                            *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
                            v46 -= 16;
                            v44 -= 16;
                          }
                          while (v44 != v45);
                          v44 = (char *)*v8;
                        }
                        v37 = v43 + 16;
                        *v8 = v46;
                        v8[1] = v43 + 16;
                        v8[2] = &v42[16 * v41];
                        if (v44)
                          operator delete(v44);
                      }
                      else
                      {
                        *(_OWORD *)v36 = *v34;
                        v37 = v36 + 16;
                      }
                      v8[1] = v37;
                      if (v56[0])
                        (*(void (**)(void *))(*(_QWORD *)v56[0] + 40))(v56[0]);
                      else
                        ++v59;
                      continue;
                    }
LABEL_50:
                    v34 = (char *)v56[1] + 16 * v59;
                    goto LABEL_51;
                  }
                  break;
                }
                if (v56[0])
                {
                  (*(void (**)(void))(*(_QWORD *)v56[0] + 8))();
                  goto LABEL_74;
                }
LABEL_72:
                if (v58)
                  --*v58;
LABEL_74:
                (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 184))(a1, v32, v14);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v32);
                v47 = (char *)*p_p;
                if (p_p[1] != *p_p)
                {
                  v48 = 0;
                  v49 = 0;
                  do
                  {
                    *(_OWORD *)v56 = *(_OWORD *)&v47[v48];
                    HIDWORD(v56[1]) = *(_DWORD *)(*a2 + 4 * SHIDWORD(v56[1]));
                    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v32, v56);
                    ++v49;
                    v47 = (char *)*p_p;
                    v48 += 16;
                  }
                  while (v49 < ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 4);
                }
                v28 = v69[0];
                *((_QWORD *)v69[0] + v53) |= v55;
                v29 = 1 << v32;
                v53 = (unint64_t)(int)v32 >> 6;
                v14 = v30;
                v31 = v8;
                v11 = (int)v32;
                if ((v28[v33] & (1 << v32)) == 0)
                  continue;
                break;
              }
LABEL_78:
              if (v60)
                (*(void (**)(uint64_t))(*(_QWORD *)v60 + 32))(v60);
              else
                ++v62;
              goto LABEL_4;
            }
            if (v56[0])
            {
              v15 = (_OWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v56[0] + 32))();
              goto LABEL_18;
            }
          }
          else if (v59 >= v57)
          {
            goto LABEL_39;
          }
          v15 = (char *)v56[1] + 16 * v59;
LABEL_18:
          v17 = (char *)v8[1];
          v16 = (char *)v8[2];
          if (v17 >= v16)
          {
            v19 = (v17 - (_BYTE *)*v8) >> 4;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 60)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v21 = v16 - (_BYTE *)*v8;
            if (v21 >> 3 > v20)
              v20 = v21 >> 3;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
              v22 = 0xFFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
              v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v8 + 2), v22);
            else
              v23 = 0;
            v24 = &v23[16 * v19];
            *(_OWORD *)v24 = *v15;
            v26 = (char *)*v8;
            v25 = (char *)v8[1];
            v27 = v24;
            if (v25 != *v8)
            {
              do
              {
                *((_OWORD *)v27 - 1) = *((_OWORD *)v25 - 1);
                v27 -= 16;
                v25 -= 16;
              }
              while (v25 != v26);
              v25 = (char *)*v8;
            }
            v18 = v24 + 16;
            *v8 = v27;
            v8[1] = v24 + 16;
            v8[2] = &v23[16 * v22];
            if (v25)
              operator delete(v25);
          }
          else
          {
            *(_OWORD *)v17 = *v15;
            v18 = v17 + 16;
          }
          v8[1] = v18;
          if (v56[0])
            (*(void (**)(void *))(*(_QWORD *)v56[0] + 40))(v56[0]);
          else
            ++v59;
        }
      }
LABEL_9:
      v10 = v62;
      goto LABEL_10;
    }
    if (v60)
      (*(void (**)(void))(*(_QWORD *)v60 + 8))();
LABEL_85:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v52, 0x3FFFFFFF0007);
    if (__p)
    {
      v64 = __p;
      operator delete(__p);
    }
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
    if (v69[0])
      operator delete(v69[0]);
  }
  else
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(v56, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(v56, "ERROR");
    v50 = fst::LogMessage::LogMessage((fst *)v69, (uint64_t)v56);
    v51 = (_QWORD *)fst::cerr(v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"StateSort: bad order vector size: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)v69);
    if (SHIBYTE(v57) < 0)
      operator delete(v56[0]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
  }
}

void sub_1ADBD68F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v28 - 128));
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::LogWeightTpl<float>>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1ADBD6A3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::resize_delta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  std::logic_error *exception;
  _BYTE v15[72];
  void *v16;

  if (*(_BYTE *)(a1 + 24))
    v4 = google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::maybe_shrink(a1);
  else
    v4 = 0;
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 >= ~a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:ne180100](exception, "resize overflow");
    __cxa_throw(exception, (struct type_info *)off_1E5CFD1B0, (void (*)(void *))MEMORY[0x1E0DE42D0]);
  }
  v6 = v5 + a2;
  if (*(_QWORD *)(a1 + 56) < 4uLL || v6 > *(_QWORD *)a1)
  {
    v7 = sh_hashtable_settings<int,std::hash<int>,unsigned long,4>::min_buckets(a1, v6, 0);
    v8 = *(_QWORD *)(a1 + 56);
    if (v7 > v8)
    {
      v9 = v7;
      v10 = sh_hashtable_settings<int,std::hash<int>,unsigned long,4>::min_buckets(a1, *(_QWORD *)(a1 + 48) + a2 - *(_QWORD *)(a1 + 40), v8);
      v11 = v10;
      v12 = v10 >= v9 || v10 > 0x7FFFFFFFFFFFFFFELL;
      if (!v12
        && *(_QWORD *)(a1 + 48) + a2 - *(_QWORD *)(a1 + 40) >= (unint64_t)(float)(*(float *)(a1 + 20)
                                                                                       * (float)(2 * v10)))
      {
        v11 = 2 * v10;
      }
      google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::dense_hashtable((uint64_t)v15, a1, v11);
      google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::swap(a1, (uint64_t)v15);
      if (v16)
        free(v16);
      return 1;
    }
  }
  return v4;
}

void sub_1ADBD6B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18)
    free(a18);
  _Unwind_Resume(exception_object);
}

uint64_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::insert_noresize@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  result = google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::find_position(a1, a2);
  if (result == -1)
  {
    result = google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::insert_at(a1, a2, v7, &v12);
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 72);
    v10 = v9 + 8 * result;
    v11 = v9 + 8 * *(_QWORD *)(a1 + 56);
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  *(_BYTE *)(a3 + 24) = v8;
  return result;
}

uint64_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::maybe_shrink(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  float v6;
  unint64_t v7;
  uint64_t result;
  _BYTE v9[72];
  void *v10;

  v2 = *(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    v4 = v2 >= v3;
  else
    v4 = 1;
  if (v4 || (v5 = *(_QWORD *)(a1 + 56), v5 < 0x21))
  {
    result = 0;
  }
  else
  {
    v6 = (float)v2;
    do
    {
      v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::dense_hashtable((uint64_t)v9, a1, v5);
    google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::swap(a1, (uint64_t)v9);
    if (v10)
      free(v10);
    result = 1;
  }
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

void sub_1ADBD6CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18)
    free(a18);
  _Unwind_Resume(exception_object);
}

uint64x2_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::swap(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64x2_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64x2_t result;

  v3 = *(uint64x2_t *)a1;
  v2 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(uint64x2_t *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v2;
  v5 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v6;
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v7;
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v8;
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v9;
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v10;
  v11 = *(_QWORD *)(a1 + 56);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v11)));
  *(_BYTE *)(a1 + 24) = 0;
  result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 16), (float)v11)));
  *(uint64x2_t *)a2 = result;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::dense_hashtable(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __int128 v4;
  unint64_t v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  if (*(_BYTE *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(_BYTE *)(a1 + 24) = 0;
    google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::copy_from(a1, a2, a3);
  }
  else
  {
    v5 = sh_hashtable_settings<int,std::hash<int>,unsigned long,4>::min_buckets(a1, *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40), a3);
    *(_QWORD *)(a1 + 56) = v5;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v5)));
    *(_BYTE *)(a1 + 24) = 0;
  }
  return a1;
}

void google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::copy_from(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  int v22;
  BOOL v23;
  _BOOL4 v24;

  v5 = sh_hashtable_settings<int,std::hash<int>,unsigned long,4>::min_buckets(a1, *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40), a3);
  google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::clear_to_size(a1, v5);
  v6 = *(_QWORD *)(a2 + 56);
  if (v6)
  {
    v7 = 8 * v6;
    v8 = *(int **)(a2 + 72);
    while (1)
    {
      v9 = *v8;
      v10 = *(_QWORD *)(a2 + 40) && *(_DWORD *)(a2 + 32) == v9;
      v11 = v10;
      if (*(_DWORD *)(a2 + 64) != v9 && !v11)
        break;
      v8 += 2;
      v7 -= 8;
      if (!v7)
        goto LABEL_35;
    }
  }
  else
  {
    v8 = *(int **)(a2 + 72);
  }
  v13 = *(_QWORD *)(a2 + 72) + 8 * v6;
  if (v8 != (int *)v13)
  {
    do
    {
      v14 = *(_QWORD *)(a1 + 56) - 1;
      v15 = *(_QWORD *)(a1 + 72);
      v16 = *(_DWORD *)(a1 + 64);
      v17 = v14 & *v8;
      if (v16 != *(_DWORD *)(v15 + 8 * v17))
      {
        v18 = 1;
        do
          v17 = (v17 + v18++) & v14;
        while (v16 != *(_DWORD *)(v15 + 8 * v17));
      }
      v20 = *(_QWORD *)v8;
      v19 = v8 + 2;
      *(_QWORD *)(v15 + 8 * v17) = v20;
      ++*(_QWORD *)(a1 + 48);
      v21 = (int *)v13;
      if (v19 != (int *)v13)
      {
        v21 = v19;
        while (1)
        {
          v22 = *v21;
          v23 = *(_QWORD *)(a2 + 40) && *(_DWORD *)(a2 + 32) == v22;
          v24 = v23;
          if (*(_DWORD *)(a2 + 64) != v22 && !v24)
            break;
          v21 += 2;
          if (v21 == (int *)v13)
          {
            v21 = (int *)v13;
            break;
          }
        }
      }
      v8 = v21;
    }
    while (v21 != (int *)(*(_QWORD *)(a2 + 72) + 8 * *(_QWORD *)(a2 + 56)));
  }
LABEL_35:
  ++*(_DWORD *)(a1 + 28);
}

uint64x2_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::clear_to_size(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64x2_t result;

  v4 = *(_QWORD **)(a1 + 72);
  v5 = 8 * a2;
  if (v4)
  {
    if (*(_QWORD *)(a1 + 56) == a2)
      goto LABEL_6;
    v6 = google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::alloc_impl<google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::realloc_or_die((int)a1 + 64, v4, a2);
  }
  else
  {
    v6 = malloc_type_malloc(8 * a2, 0x100004000313F17uLL);
  }
  v4 = v6;
  *(_QWORD *)(a1 + 72) = v6;
LABEL_6:
  if (a2)
  {
    do
    {
      *v4++ = *(_QWORD *)(a1 + 64);
      v5 -= 8;
    }
    while (v5);
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)a2)));
  *(uint64x2_t *)a1 = result;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

void *google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::alloc_impl<google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::realloc_or_die(int a1, void *ptr, uint64_t a3)
{
  void *result;

  result = malloc_type_realloc(ptr, 8 * a3, 0x100004000313F17uLL);
  if (!result)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a3, ptr);
    exit(1);
  }
  return result;
}

uint64_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::find_position(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 56) - 1;
  v4 = *a2;
  result = v3 & v4;
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_DWORD *)(a1 + 64);
  v8 = *(_DWORD *)(v6 + 8 * (v3 & v4));
  if (v7 != v8)
  {
    v9 = -1;
    v10 = 1;
    do
    {
      if (*(_QWORD *)(a1 + 40) && *(_DWORD *)(a1 + 32) == v8)
      {
        if (v9 == -1)
          v9 = result;
      }
      else if ((_DWORD)v4 == v8)
      {
        return result;
      }
      result = (result + v10) & v3;
      v8 = *(_DWORD *)(v6 + 8 * result);
      ++v10;
    }
    while (v7 != v8);
  }
  return -1;
}

uint64_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::insert_at@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::logic_error *exception;

  v5 = *(_QWORD *)(result + 40);
  v4 = *(_QWORD *)(result + 48);
  if ((unint64_t)(v4 - v5) >= 0x1FFFFFFFFFFFFFFFLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::length_error::length_error[abi:ne180100](exception, "insert overflow");
    __cxa_throw(exception, (struct type_info *)off_1E5CFD1B0, (void (*)(void *))MEMORY[0x1E0DE42D0]);
  }
  v6 = *(_QWORD *)(result + 72);
  if (v5 && *(_DWORD *)(result + 32) == *(_DWORD *)(v6 + 8 * a3))
    *(_QWORD *)(result + 40) = v5 - 1;
  else
    *(_QWORD *)(result + 48) = v4 + 1;
  *(_QWORD *)(v6 + 8 * a3) = *a2;
  v7 = *(_QWORD *)(result + 72);
  v8 = v7 + 8 * a3;
  v9 = v7 + 8 * *(_QWORD *)(result + 56);
  *a4 = result;
  a4[1] = v8;
  a4[2] = v9;
  return result;
}

void sub_1ADBD720C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::find_or_insert<google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::DefaultValue>(uint64_t a1, int *a2)
{
  uint64_t position;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  position = google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::find_position(a1, a2);
  if (position != -1)
    return *(_QWORD *)(a1 + 72) + 8 * position;
  v7 = v5;
  if (google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::resize_delta(a1, 1))
  {
    v8 = *a2;
    google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::insert_noresize(a1, (int *)&v8, (uint64_t)v9);
  }
  else
  {
    v8 = *a2;
    google::dense_hashtable<std::pair<int const,fst::LogWeightTpl<float>>,int,std::hash<int>,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SelectKey,google::dense_hash_map<int,fst::LogWeightTpl<float>,std::hash<int>,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::SetKey,std::equal_to<int>,google::libc_allocator_with_realloc<std::pair<int const,fst::LogWeightTpl<float>>>>::insert_at(a1, &v8, v7, v9);
  }
  return v9[1];
}

_OWORD *std::__tree<std::vector<int>>::__emplace_unique_key_args<std::vector<int>,std::vector<int>>(uint64_t **a1, int **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::vector<int>>::__find_equal<std::vector<int>>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *std::__tree<std::vector<int>>::__find_equal<std::vector<int>>(uint64_t a1, _QWORD *a2, int **a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  int *v6;
  _QWORD *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = a3[1];
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (int *)v4[4];
        v9 = (int *)v7[5];
        if (v8 != v9)
          break;
LABEL_12:
        if (*a3 != v6)
        {
          v15 = (uint64_t)(*a3 + 1);
          while (v8 != v9)
          {
            v16 = *v8;
            v17 = *(_DWORD *)(v15 - 4);
            if (*v8 < v17)
              break;
            ++v8;
            v18 = v17 < v16 || v15 == (_QWORD)v6;
            v15 += 4;
            if (v18)
              goto LABEL_27;
          }
          result = v7 + 1;
          v4 = (_QWORD *)v7[1];
          if (v4)
            continue;
        }
        goto LABEL_27;
      }
      v10 = v8 + 1;
      v11 = *a3;
      while (v11 != v6)
      {
        v12 = *v11;
        v13 = *(v10 - 1);
        if (*v11 < v13)
          break;
        ++v11;
        if (v13 < v12 || v10++ == v9)
          goto LABEL_12;
      }
      v4 = (_QWORD *)*v7;
      result = v7;
    }
    while (*v7);
  }
  else
  {
    v7 = result;
  }
LABEL_27:
  *a2 = v7;
  return result;
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SigmaMatcher(uint64_t a1, uint64_t a2, __int32 a3, int a4, int a5, int32x2_t *a6)
{
  int32x2_t *v6;
  fst *v12;
  _QWORD *v13;
  fst *v14;
  _QWORD *v15;
  BOOL v16;
  void *v18[2];
  char v19;
  char v20;
  void *__p[2];
  char v22;
  char v23;

  v6 = a6;
  *(_QWORD *)a1 = &unk_1E5D1B0A8;
  if (!a6)
  {
    v6 = (int32x2_t *)operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(v6, a2, a3, 1);
  }
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_BYTE *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  if (a3 == 2)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v12 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)__p);
    v13 = (_QWORD *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SigmaMatcher: bad match type", 28);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
    if (v22 < 0)
      operator delete(__p[0]);
    *(_DWORD *)(a1 + 16) = 3;
    *(_BYTE *)(a1 + 52) = 1;
  }
  if (!a4)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(v18, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(v18, "ERROR");
    v14 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)v18);
    v15 = (_QWORD *)fst::cerr(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"SigmaMatcher: 0 cannot be used as sigma_label", 45);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
    if (v19 < 0)
      operator delete(v18[0]);
    *(_DWORD *)(a1 + 20) = -1;
    *(_BYTE *)(a1 + 52) = 1;
  }
  if (a5 == 1)
  {
    v16 = 1;
  }
  else
  {
    if (a5)
    {
      *(_BYTE *)(a1 + 24) = 0;
      return a1;
    }
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1) != 0;
  }
  *(_BYTE *)(a1 + 24) = v16;
  return a1;
}

void sub_1ADBD760C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SigmaMatcher(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1B0A8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SigmaMatcher(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1B0A8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SigmaMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADBD778C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40865AB4C8);
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  fst *v5;
  _QWORD *v6;
  void *__p[2];
  char v8;
  char v9;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (*(_BYTE *)(a1 + 52))
    result |= 4uLL;
  v3 = *(_DWORD *)(a1 + 16);
  if (v3 != 3)
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = -4030464001;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (v3 == 1)
    {
      v4 = -3225223169;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (!v3)
    {
      v4 = -809304065;
      return result & (v4 & 0xFFFF0000FFFFFFFFLL | 0xEFFF00000000);
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v5 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v6 = (_QWORD *)fst::cerr(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"SigmaMatcher:: bad match type: ", 31);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return result;
}

void sub_1ADBD78DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Flags(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) == -1 || *(_DWORD *)(a1 + 16) == 3)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  else
    return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8)) | 1;
}

BOOL fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done_(uint64_t a1)
{
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(a1 + 8));
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SigmaMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E5D1B0A8;
  v6 = operator new();
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(v6, *(_QWORD *)(a2 + 8), a3);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = -1;
  return a1;
}

void sub_1ADBD7A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if (*(_DWORD *)(result + 56) != (_DWORD)a2)
  {
    v2 = result;
    *(_DWORD *)(result + 56) = a2;
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(*(_QWORD *)(result + 8), a2);
    v3 = *(_DWORD *)(v2 + 20);
    result = v3 != -1
          && fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(_QWORD *)(v2 + 8), v3);
    *(_BYTE *)(v2 + 25) = result;
  }
  return result;
}

BOOL fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(uint64_t a1, int a2)
{
  int v3;
  _BOOL8 result;
  fst *v7;
  _QWORD *v8;
  void *__p[2];
  char v10;
  char v11;

  *(_DWORD *)(a1 + 48) = a2;
  v3 = *(_DWORD *)(a1 + 20);
  if (v3 != a2 || v3 == -1)
  {
    result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(_QWORD *)(a1 + 8), a2);
    if (result)
    {
      *(_DWORD *)(a1 + 28) = -1;
    }
    else
    {
      if ((a2 - 1) > 0xFFFFFFFD)
        return result;
      if (!*(_BYTE *)(a1 + 25))
        return result;
      result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 20));
      if (!result)
        return result;
      *(_DWORD *)(a1 + 28) = a2;
    }
    return 1;
  }
  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v7 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
  v8 = (_QWORD *)fst::cerr(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"SigmaMatcher::Find: bad label (sigma)", 37);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
  if (v10 < 0)
    operator delete(__p[0]);
  result = 0;
  *(_BYTE *)(a1 + 52) = 1;
  return result;
}

void sub_1ADBD7BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Priority(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) == -1)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2);
  fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(a1, a2);
  if (!*(_BYTE *)(a1 + 25))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2);
  else
    return -1;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1ADBD7C9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __n128 *v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, (uint64_t)a4) = &unk_1E5D1D6A0;
  v8 = (__n128 *)a4[5];
  if (!v8)
  {
    v8 = (__n128 *)operator new();
    fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::SequenceComposeFilter((uint64_t)v8, a2, a3, a4[3], a4[4]);
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152));
  v10 = (_QWORD *)a4[6];
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1ADBD7E70(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1ADBD7FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1ADBD8168(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(_QWORD *a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;

  v4 = *(_QWORD *)(a1[22] + 80);
  v5 = (unsigned int *)(v4 + 12 * a2);
  v6 = *v5;
  v7 = *(_QWORD *)(*(_QWORD *)(a1[18] + 8) + 8);
  v12 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, v6);
  if (v12 != INFINITY)
  {
    v8 = v5[1];
    v9 = *(_QWORD *)(*(_QWORD *)(a1[19] + 8) + 8);
    v10 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, v8);
    v12 = v10;
    if (v10 != INFINITY)
    {
      v11 = a1[17];
      LOBYTE(v12) = *(_BYTE *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v11, v6, v8, &v12);
    }
  }
}

uint64_t fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = a4;
  if (!a4)
  {
    v6 = operator new();
    fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SigmaMatcher(v6, a2, 1, -1, 0, 0);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = operator new();
    fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SigmaMatcher(a5, a3, 0, -1, 0, 0);
    v6 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1ADBD8424(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40865AB4C8);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D6A0;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    v3 = v2[1];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    MEMORY[0x1AF44D190](v2, 0x1060C40AD892F49);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  __n128 v6;
  uint64_t v7;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D6A0;
  v4 = (_QWORD *)operator new();
  v5 = *(_QWORD **)(a2 + 136);
  *v4 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, 1);
  v4[1] = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v5[1] + 16))(v5[1], 1);
  v4[2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 32))(*v4);
  v4[3] = -1;
  *((_BYTE *)v4 + 32) = -1;
  *(_QWORD *)(a1 + 136) = v4;
  v6 = *(__n128 *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 32))(v6.n128_u64[0], v6);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152));
  v7 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v7, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v7;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1ADBD8614(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v11;
  fst *v12;
  _QWORD *v13;
  void *__p[2];
  char v15;
  char v16;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Priority(*(_QWORD *)(a1 + 144), a2);
  v8 = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Priority(*(_QWORD *)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v12 = fst::LogMessage::LogMessage((fst *)&v16, (uint64_t)__p);
    v13 = (_QWORD *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v16);
    if (v15 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  v11 = v8 == -1 || v7 <= v8;
  return v7 != -1 && v11;
}

void sub_1ADBD8774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  int v18[4];

  fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADBD8908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  int *v10;
  _BOOL8 result;
  __int128 v12;
  unsigned __int8 *v13;
  char v14;
  unsigned __int8 *v15;
  char v16;
  int v17;
  char v18;
  unsigned int *v19;
  __int128 *v20;
  int v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(a3, *v10);
  if (result)
  {
    for (result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(a3 + 8));
          !result;
          result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(a3 + 8)))
    {
      v12 = *(_OWORD *)fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Value(a3);
      v24 = *(_OWORD *)a4;
      v25 = v12;
      if (a5)
      {
        v13 = *(unsigned __int8 **)(a1 + 136);
        if (DWORD1(v24) != -1)
        {
          if ((_DWORD)v25 == -1)
          {
            v17 = v13[32];
            if (v17)
              v18 = -1;
            else
              v18 = 0;
            v23 = v18;
            if (v17)
              goto LABEL_35;
          }
          else
          {
            if (DWORD1(v24))
              v14 = 0;
            else
              v14 = -1;
            v23 = v14;
            if (!DWORD1(v24))
              goto LABEL_35;
          }
LABEL_28:
          v19 = (unsigned int *)&v24;
          v20 = &v25;
LABEL_34:
          fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, (uint64_t)v20, &v23);
          goto LABEL_35;
        }
        if (!v13[33])
        {
          v23 = v13[34] ^ 1;
          goto LABEL_28;
        }
      }
      else
      {
        v15 = *(unsigned __int8 **)(a1 + 136);
        if (DWORD1(v25) != -1)
        {
          if ((_DWORD)v24 == -1)
          {
            v21 = v15[32];
            if (v21)
              v22 = -1;
            else
              v22 = 0;
            v23 = v22;
            if (v21)
              goto LABEL_35;
          }
          else
          {
            if (DWORD1(v25))
              v16 = 0;
            else
              v16 = -1;
            v23 = v16;
            if (!DWORD1(v25))
              goto LABEL_35;
          }
LABEL_33:
          v19 = (unsigned int *)&v25;
          v20 = &v24;
          goto LABEL_34;
        }
        if (!v15[33])
        {
          v23 = v15[34] ^ 1;
          goto LABEL_33;
        }
      }
LABEL_35:
      fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(a3);
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F600;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 144) + 16))(*(_QWORD *)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 152) + 16))(*(_QWORD *)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1F600;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1F600;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADBD8C5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != 4
        || (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) == 4
          && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(result + 32), *v3);
    result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(_QWORD *)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;

  *(_BYTE *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      v2 = (uint64_t *)(a1 + 40);
      v3 = (uint64_t *)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    v2 = (uint64_t *)(a1 + 32);
    v3 = (uint64_t *)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 48)
      && fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
      && fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD *)(result + 32);
      v1 = *(_QWORD *)(result + 40);
    }
    else
    {
      v1 = *(_QWORD *)(result + 32);
      v2 = *(_QWORD *)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F600;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 32) + 16))(*(_QWORD *)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 40) + 16))(*(_QWORD *)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1ADBD907C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int *v9;
  int *v10;

  result = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(a3, a2);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 28);
    v9 = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Value(a3);
    v10 = v9 + 1;
    if (v8)
      v10 = v9;
    fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int *v7;
  int *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(a2 + 8))
       || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(a3 + 8)))
  {
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(a3 + 8)))
    {
      fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(a2);
      while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(a2 + 8)))
      {
        v6 = *(_DWORD *)(a1 + 28);
        v7 = fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Value(a2);
        v8 = v7 + 1;
        if (v6)
          v8 = v7;
        if (fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(a3, *v8))
        {
          break;
        }
        fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(a2);
      }
    }
    while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(_QWORD *)(a3 + 8)))
    {
      v9 = (uint64_t *)fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Value(a2);
      v10 = (uint64_t *)fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Value(a3);
      fst::SigmaMatcher<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::LogWeightTpl<float>,int>>>>::Next(a3);
      v11 = *(_DWORD *)(a1 + 28);
      v12 = v11 == 0;
      if (v11)
        v13 = v10;
      else
        v13 = v9;
      v14 = *v13;
      v15 = v13[1];
      if (v12)
        v16 = v10;
      else
        v16 = v9;
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1;
    }
  }
  return 0;
}

void fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>>(void *a1, char *a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void **v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<int>::pointer v18;
  uint64_t v19;
  int v20;
  std::vector<int>::pointer v21;
  unint64_t v22;
  int v23;
  std::vector<unsigned int>::pointer v24;
  unsigned int *v25;
  std::vector<unsigned int>::pointer v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  char *v31;
  unsigned int *v32;
  unsigned int v33;
  signed int i;
  std::vector<unsigned int>::pointer end;
  unsigned int *v36;
  std::vector<unsigned int>::pointer begin;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  unsigned int *v43;
  unsigned int v44;
  int begin_low;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  std::vector<unsigned int>::pointer v49;
  fst *v50;
  _QWORD *v51;
  std::vector<unsigned int>::pointer j;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t k;
  unint64_t v58;
  unint64_t v59;
  float v60;
  unsigned int v61;
  _QWORD *v63;
  _QWORD *v64;
  void *__p;
  char *v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  int v70;
  char v71;
  char v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _OWORD v76[2];
  _BYTE v77[32];
  int v78;
  _QWORD v79[6];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  float v84;
  int v85;
  std::vector<int> v86;
  uint64_t v87;
  std::vector<int> v88;
  std::vector<unsigned int> v89;
  char *v90;
  void **p_p;
  std::vector<int> *v92;
  uint64_t v93;
  int v94;

  if ((*(unsigned int (**)(void *))(*(_QWORD *)a1 + 24))(a1) == -1)
    return;
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 160))(a1);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v90, v6, (unsigned __int8 *)&__p);
  v7 = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 24))(a1);
  v8 = 0;
  *(_QWORD *)&v90[((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v7;
LABEL_3:
  if ((int)v8 < (*(int (**)(void *))(*(_QWORD *)a1 + 160))(a1))
  {
    v69 = 0;
    (*(void (**)(void *, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v8, &__p);
    while (__p)
    {
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
      {
        if (__p)
        {
          (*(void (**)(void))(*(_QWORD *)__p + 8))();
          goto LABEL_26;
        }
LABEL_24:
        if (v68)
          --*(_DWORD *)v68;
LABEL_26:
        v8 = (v8 + 1);
        goto LABEL_3;
      }
      if (!__p)
        goto LABEL_12;
      v9 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      v10 = __p;
      if (*v9)
        goto LABEL_15;
      if (__p)
      {
        v11 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
        v10 = __p;
        goto LABEL_14;
      }
LABEL_13:
      v10 = 0;
      v11 = (uint64_t)&v66[16 * v69];
LABEL_14:
      if (*(_DWORD *)(v11 + 4))
      {
LABEL_15:
        if (v10)
        {
          v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 32))(v10);
          v10 = __p;
        }
        else
        {
LABEL_17:
          v10 = 0;
          v12 = (uint64_t)&v66[16 * v69];
        }
        *(_QWORD *)&v90[((unint64_t)*(int *)(v12 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *(_DWORD *)(v12 + 12);
      }
      if (v10)
        (*(void (**)(void *))(*(_QWORD *)v10 + 40))(v10);
      else
        ++v69;
    }
    if (v69 >= v67)
      goto LABEL_24;
LABEL_12:
    if (*(_DWORD *)&v66[16 * v69])
      goto LABEL_17;
    goto LABEL_13;
  }
  memset(&v89, 0, sizeof(v89));
  v13 = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 160))(a1);
  std::vector<int>::reserve(&v89, v13);
  if (((*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x4000000000, 0) & 0x4000000000) != 0)
  {
    for (i = 0; i < (*(int (**)(void *))(*(_QWORD *)a1 + 160))(a1); ++i)
    {
      end = v89.__end_;
      if (v89.__end_ >= v89.__end_cap_.__value_)
      {
        begin = v89.__begin_;
        v38 = v89.__end_ - v89.__begin_;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v40 = (char *)v89.__end_cap_.__value_ - (char *)v89.__begin_;
        if (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89.__end_cap_, v41);
          begin = v89.__begin_;
          end = v89.__end_;
        }
        else
        {
          v42 = 0;
        }
        v43 = (unsigned int *)&v42[4 * v38];
        *v43 = i;
        v36 = v43 + 1;
        while (end != begin)
        {
          v44 = *--end;
          *--v43 = v44;
        }
        v89.__begin_ = v43;
        v89.__end_ = v36;
        v89.__end_cap_.__value_ = (unsigned int *)&v42[4 * v41];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *v89.__end_ = i;
        v36 = end + 1;
      }
      v89.__end_ = v36;
    }
LABEL_99:
    __p = a1;
    v66 = a2;
    v67 = (unint64_t)a1;
    v68 = a2;
    v69 = *(_QWORD *)a3;
    v70 = *(_DWORD *)(a3 + 16);
    v71 = *(_BYTE *)(a3 + 20);
    v72 = 1;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    memset(v76, 0, 29);
    *((_QWORD *)a2 + 1) = *(_QWORD *)a2;
    memset(v77, 0, sizeof(v77));
    v78 = 1065353216;
    v85 = 0;
    v82 = 0u;
    memset(v79, 0, sizeof(v79));
    v80 = 0u;
    v81 = 0u;
    v83 = 0;
    for (j = v89.__end_; v89.__begin_ != v89.__end_; j = v89.__end_)
    {
      v53 = (int)*(j - 1);
      v89.__end_ = j - 1;
      if (((*(_QWORD *)&v90[(v53 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v53) & 1) == 0)
      {
        if (*(_BYTE *)(a3 + 21))
          continue;
        LODWORD(p_p) = 0;
        LODWORD(p_p) = *(_DWORD *)(a3 + 22);
        LODWORD(v86.__begin_) = 2139095040;
        if (*(float *)&p_p != INFINITY || *(_DWORD *)(a3 + 28) != -1)
          continue;
      }
      fst::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>>::Expand(&__p, v53);
      (*(void (**)(void *, unint64_t, float))(*(_QWORD *)a1 + 184))(a1, v53, v84);
      (*(void (**)(void *, unint64_t))(*(_QWORD *)a1 + 240))(a1, v53);
      (*(void (**)(void *, unint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, v53, (uint64_t)(*((_QWORD *)&v82 + 1) - v82) >> 4);
      v54 = *((_QWORD *)&v82 + 1);
      v55 = v82;
      while (v55 != v54)
      {
        (*(void (**)(void *, unint64_t, uint64_t))(*(_QWORD *)a1 + 208))(a1, v53, v54 - 16);
        v55 = v82;
        v54 = *((_QWORD *)&v82 + 1) - 16;
        *((_QWORD *)&v82 + 1) -= 16;
      }
    }
    if (*(_BYTE *)(a3 + 21)
      || (LODWORD(p_p) = 0,
          LODWORD(p_p) = *(_DWORD *)(a3 + 22),
          LODWORD(v86.__begin_) = 2139095040,
          *(float *)&p_p != INFINITY)
      || *(_DWORD *)(a3 + 28) != -1)
    {
      for (k = 0; (uint64_t)k < (*(int (**)(void *))(*(_QWORD *)a1 + 160))(a1); ++k)
      {
        if (((*(_QWORD *)&v90[(k >> 3) & 0x1FFFFFFFFFFFFFF8] >> k) & 1) == 0)
          (*(void (**)(void *, unint64_t))(*(_QWORD *)a1 + 240))(a1, k);
      }
    }
    if (BYTE12(v76[1]))
      (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
    v58 = (*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v59 = fst::RmEpsilonProperties(v58, 0);
    (*(void (**)(void *, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v59, 0x3FFFFFFF0007);
    LODWORD(p_p) = 0;
    v60 = *(float *)(a3 + 22);
    *(float *)&p_p = v60;
    LODWORD(v86.__begin_) = 2139095040;
    v61 = *(_DWORD *)(a3 + 28);
    if (v60 != INFINITY || v61 != -1)
    {
      p_p = (void **)__PAIR64__(v61, LODWORD(v60));
      v93 = 0;
      v94 = 981467136;
      fst::Prune<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t)&p_p);
    }
    if (*(_BYTE *)(a3 + 21))
    {
      LODWORD(p_p) = 0;
      LODWORD(p_p) = *(_DWORD *)(a3 + 22);
      LODWORD(v86.__begin_) = 2139095040;
      if (*(float *)&p_p == INFINITY && *(_DWORD *)(a3 + 28) == -1)
        fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)a1);
    }
    if ((_QWORD)v82)
    {
      *((_QWORD *)&v82 + 1) = v82;
      operator delete((void *)v82);
    }
    v63 = (_QWORD *)*((_QWORD *)&v81 + 1);
    if (*((_QWORD *)&v81 + 1))
    {
      do
      {
        v64 = (_QWORD *)*v63;
        operator delete(v63);
        v63 = v64;
      }
      while (v64);
    }
    *((_QWORD *)&v81 + 1) = 0;
    if ((_QWORD)v80)
      operator delete((void *)v80);
    std::deque<int>::~deque[abi:ne180100](v79);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v77);
    fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(&v67);
    goto LABEL_136;
  }
  if (((*(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x800000000, 0) & 0x800000000) == 0)
  {
    v87 = 0;
    p_p = 0;
    v92 = 0;
    v93 = 0;
    __p = &p_p;
    v66 = 0;
    v67 = 0;
    v68 = (char *)&v87;
    fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t *)&__p, 0);
    std::vector<int>::vector(&v88, ((char *)v92 - (char *)p_p) >> 2, &fst::kNoStateId);
    std::vector<int>::vector(&v86, ((char *)v92 - (char *)p_p) >> 2, &fst::kNoStateId);
    v14 = p_p;
    v15 = v88.__begin_;
    if (v92 != (std::vector<int> *)p_p)
    {
      v16 = 0;
      v17 = ((char *)v92 - (char *)p_p) >> 2;
      v18 = v86.__begin_;
      if (v17 <= 1)
        v17 = 1;
      do
      {
        v19 = *((int *)v14 + v16);
        v20 = v15[v19];
        if (v20 != -1)
        {
          v18[v16] = v20;
          v19 = *((int *)v14 + v16);
        }
        v15[v19] = v16++;
      }
      while (v17 != v16);
    }
    v21 = v88.__end_;
    if (v88.__end_ != v15)
    {
      v22 = 0;
      do
      {
        v23 = v15[v22];
        if (v23 != -1)
        {
          v24 = v89.__end_;
          do
          {
            if (v24 >= v89.__end_cap_.__value_)
            {
              v26 = v89.__begin_;
              v27 = v24 - v89.__begin_;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v29 = (char *)v89.__end_cap_.__value_ - (char *)v89.__begin_;
              if (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 1 > v28)
                v28 = v29 >> 1;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
                v30 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89.__end_cap_, v30);
                v26 = v89.__begin_;
                v24 = v89.__end_;
              }
              else
              {
                v31 = 0;
              }
              v32 = (unsigned int *)&v31[4 * v27];
              *v32 = v23;
              v25 = v32 + 1;
              while (v24 != v26)
              {
                v33 = *--v24;
                *--v32 = v33;
              }
              v89.__begin_ = v32;
              v89.__end_ = v25;
              v89.__end_cap_.__value_ = (unsigned int *)&v31[4 * v30];
              if (v26)
                operator delete(v26);
            }
            else
            {
              *v24 = v23;
              v25 = v24 + 1;
            }
            v89.__end_ = v25;
            v23 = v86.__begin_[v23];
            v24 = v25;
          }
          while (v23 != -1);
          v15 = v88.__begin_;
          v21 = v88.__end_;
        }
        ++v22;
      }
      while (v22 < v21 - v15);
    }
    if (v86.__begin_)
    {
      v86.__end_ = v86.__begin_;
      operator delete(v86.__begin_);
      v15 = v88.__begin_;
    }
    if (v15)
    {
      v88.__end_ = v15;
      operator delete(v15);
    }
    if (p_p)
    {
      v92 = (std::vector<int> *)p_p;
      operator delete(p_p);
    }
    goto LABEL_99;
  }
  __p = 0;
  v66 = 0;
  v67 = 0;
  LOBYTE(v86.__begin_) = 0;
  p_p = &__p;
  v92 = &v86;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t)&p_p, 0);
  begin_low = LOBYTE(v86.__begin_);
  if (!LOBYTE(v86.__begin_))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&v88, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&v88, "ERROR");
    v50 = fst::LogMessage::LogMessage((fst *)&v87, (uint64_t)&v88);
    v51 = (_QWORD *)fst::cerr(v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"RmEpsilon: inconsistent acyclic property bit", 44);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v87);
    if (SHIBYTE(v88.__end_cap_.__value_) < 0)
      operator delete(v88.__begin_);
    (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
    v46 = (char *)__p;
LABEL_96:
    if (v46)
      goto LABEL_97;
    goto LABEL_98;
  }
  std::vector<int>::resize(&v89, (v66 - (_BYTE *)__p) >> 2);
  v46 = (char *)__p;
  if (v66 == __p)
  {
    v46 = v66;
    goto LABEL_96;
  }
  v47 = 0;
  v48 = (v66 - (_BYTE *)__p) >> 2;
  v49 = v89.__begin_;
  if (v48 <= 1)
    v48 = 1;
  do
  {
    v49[*(int *)&v46[4 * v47]] = v47;
    ++v47;
  }
  while (v48 != v47);
LABEL_97:
  v66 = v46;
  operator delete(v46);
LABEL_98:
  if (begin_low)
    goto LABEL_99;
LABEL_136:
  if (v89.__begin_)
  {
    v89.__end_ = v89.__begin_;
    operator delete(v89.__begin_);
  }
  if (v90)
    operator delete(v90);
}

void sub_1ADBD9C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  void *v15;
  void *v16;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v13 - 200));
  if (*(char *)(v13 - 169) < 0)
    operator delete(*(void **)(v13 - 192));
  if (__p)
    operator delete(__p);
  v15 = *(void **)(v13 - 168);
  if (v15)
  {
    *(_QWORD *)(v13 - 160) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(v13 - 144);
  if (v16)
    operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  fst *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  fst *v26;
  _QWORD *v27;
  uint64_t v28;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  fst *v32;
  _QWORD *v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  fst *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  fst *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  fst *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  fst *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  fst *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  void *__p[2];
  char v59;
  char v60;
  __int16 v61;
  void *v62[3];
  uint64_t v63[2];
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v6 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v7 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v8 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v21 = operator new();
    *(_DWORD *)(v21 + 8) = 5;
    *(_BYTE *)(v21 + 12) = 0;
    *(_QWORD *)v21 = &unk_1E5D1EEB0;
    *(_QWORD *)(v21 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v21;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v22 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v23 = (_QWORD *)fst::cerr(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"AutoQueue: using state-order discipline", 39);
  }
  else if ((v8 & 0x800000000) != 0)
  {
    v25 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v25, a2);
    *(_QWORD *)(a1 + 16) = v25;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v26 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v27 = (_QWORD *)fst::cerr(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"AutoQueue: using top-order discipline", 37);
  }
  else
  {
    if ((v8 & 0x200000000) == 0)
    {
      v66 = 0;
      v63[0] = (uint64_t)v7;
      v63[1] = 0;
      v64 = 0;
      v65 = &v66;
      fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, v63, 0);
      v9 = *(int **)(a1 + 48);
      v10 = *(int **)(a1 + 56);
      if (v9 != v10)
      {
        v11 = v9 + 1;
        if (v9 + 1 != v10)
        {
          v12 = *v9;
          v13 = v9 + 1;
          do
          {
            v15 = *v13++;
            v14 = v15;
            v16 = v12 < v15;
            if (v12 <= v15)
              v12 = v14;
            if (v16)
              v9 = v11;
            v11 = v13;
          }
          while (v13 != v10);
        }
      }
      v17 = *v9;
      v18 = *v9 + 1;
      std::vector<fst::QueueType>::vector(v62, v18);
      if (a3)
      {
        v19 = operator new();
        v20 = (_QWORD *)operator new();
        *v20 = a3;
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v61 = 0;
      fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NaturalLess<fst::TropicalWeightTpl<float>>>(a2, v7, (uint64_t)v62, v19, &v61, (_BYTE *)&v61 + 1);
      if (HIBYTE(v61))
      {
        v31 = operator new();
        *(_DWORD *)(v31 + 8) = 2;
        *(_BYTE *)(v31 + 12) = 0;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_OWORD *)(v31 + 48) = 0u;
        *(_QWORD *)v31 = &unk_1E5D27B60;
        *(_QWORD *)(a1 + 16) = v31;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v32 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v33 = (_QWORD *)fst::cerr(v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_30:
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
LABEL_52:
        if (v20)
          MEMORY[0x1AF44D190](v20, 0x60C40B37CB4BBLL);
        if (v19)
          MEMORY[0x1AF44D190](v19, 0xC400A2AC0F1);
        v24 = v62[0];
        if (v62[0])
        {
          v62[1] = v62[0];
          goto LABEL_58;
        }
        return a1;
      }
      if ((_BYTE)v61)
      {
        v34 = operator new();
        fst::TopOrderQueue<int>::TopOrderQueue(v34, (uint64_t)v7);
        *(_QWORD *)(a1 + 16) = v34;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v35 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v36 = (_QWORD *)fst::cerr(v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: using top-order discipline", 37);
        goto LABEL_30;
      }
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v37 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v38 = (_QWORD *)fst::cerr(v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
      }
      std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v6, v18);
      if (v17 < 0)
      {
LABEL_51:
        v56 = operator new();
        *(_DWORD *)(v56 + 8) = 6;
        *(_BYTE *)(v56 + 12) = 0;
        *(_QWORD *)v56 = &unk_1E5D22CF0;
        *(_QWORD *)(v56 + 16) = v6;
        *(_QWORD *)(v56 + 24) = v7;
        *(_QWORD *)(v56 + 32) = 0xFFFFFFFF00000000;
        *(_QWORD *)(v56 + 48) = 0;
        *(_QWORD *)(v56 + 56) = 0;
        *(_QWORD *)(v56 + 40) = 0;
        *(_QWORD *)(a1 + 16) = v56;
        goto LABEL_52;
      }
      v39 = 0;
      while (1)
      {
        v40 = *((_DWORD *)v62[0] + v39);
        if (v40 == 3)
        {
          v44 = operator new();
          *(_DWORD *)(v44 + 8) = 3;
          *(_BYTE *)(v44 + 12) = 0;
          *(_QWORD *)v44 = &unk_1E5D21710;
          *(_OWORD *)(v44 + 16) = *(_OWORD *)v20;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_OWORD *)(v44 + 48) = 0u;
          *(_OWORD *)(v44 + 64) = 0u;
          *(_OWORD *)(v44 + 80) = 0u;
          *(_OWORD *)(v44 + 92) = 0u;
          *(_QWORD *)(v44 + 120) = 0;
          *(_QWORD *)(v44 + 128) = 0;
          *(_QWORD *)(v44 + 112) = 0;
          *(_QWORD *)(*v6 + 8 * v39) = v44;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v45 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v46 = (_QWORD *)fst::cerr(v45);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"AutoQueue: SCC #", 16);
            v47 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": using shortest-first discipline", 33);
            goto LABEL_48;
          }
        }
        else if (v40 == 2)
        {
          v48 = operator new();
          *(_DWORD *)(v48 + 8) = 2;
          *(_BYTE *)(v48 + 12) = 0;
          *(_OWORD *)(v48 + 16) = 0u;
          *(_OWORD *)(v48 + 32) = 0u;
          *(_OWORD *)(v48 + 48) = 0u;
          *(_QWORD *)v48 = &unk_1E5D27B60;
          *(_QWORD *)(*v6 + 8 * v39) = v48;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v49 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v50 = (_QWORD *)fst::cerr(v49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"AutoQueue: SCC #", 16);
            v51 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": using LIFO disciplle", 22);
            goto LABEL_48;
          }
        }
        else if (v40)
        {
          v52 = operator new();
          *(_DWORD *)(v52 + 8) = 1;
          *(_BYTE *)(v52 + 12) = 0;
          *(_OWORD *)(v52 + 16) = 0u;
          *(_OWORD *)(v52 + 32) = 0u;
          *(_OWORD *)(v52 + 48) = 0u;
          *(_QWORD *)v52 = &unk_1E5D23A28;
          *(_QWORD *)(*v6 + 8 * v39) = v52;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v53 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v54 = (_QWORD *)fst::cerr(v53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"AutoQueue: SCC #", 16);
            v55 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": using FIFO disciplle", 22);
LABEL_48:
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
            if (v59 < 0)
              operator delete(__p[0]);
          }
        }
        else
        {
          *(_QWORD *)(*v6 + 8 * v39) = 0;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v41 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v42 = (_QWORD *)fst::cerr(v41);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"AutoQueue: SCC #", 16);
            v43 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": using trivial discipline", 26);
            goto LABEL_48;
          }
        }
        if (v18 == ++v39)
          goto LABEL_51;
      }
    }
    v28 = operator new();
    *(_DWORD *)(v28 + 8) = 2;
    *(_BYTE *)(v28 + 12) = 0;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_QWORD *)v28 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v28;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v29 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"AutoQueue: using LIFO discipline", 32);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)v62);
  if (SHIBYTE(v64) < 0)
  {
    v24 = (void *)v63[0];
LABEL_58:
    operator delete(v24);
  }
  return a1;
}

void sub_1ADBDA550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;

  if (a16 < 0)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  v32 = *v30;
  if (*v30)
  {
    *(_QWORD *)(v28 + 56) = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    *(_QWORD *)(v28 + 32) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char inited;
  char v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v30;
  std::vector<char>::pointer end;
  char *v32;
  std::vector<char>::pointer begin;
  int64_t v34;
  int64_t v35;
  unint64_t v36;
  size_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v44;
  int v45;
  std::vector<char>::value_type v46[8];
  std::vector<char>::value_type __x[8];
  int v48;
  int v49;
  void *v50;
  _QWORD v51[6];
  _QWORD *v52;
  _OWORD v53[2];
  __int128 v54;
  std::vector<char> v55;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v45 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v55, 0, sizeof(v55));
  v54 = 0u;
  memset(v53, 0, sizeof(v53));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MemoryPool(&v50, 64);
  v44 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v44)
    v5 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v5 = (v45 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v5 <= (std::vector<char>::pointer)(v55.__end_ - v55.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v5 < (std::vector<char>::pointer)(v55.__end_ - v55.__begin_))
      v55.__end_ = &v55.__begin_[(int)v5];
  }
  else
  {
    std::vector<char>::__append(&v55, (int)v5 - (unint64_t)(v55.__end_ - v55.__begin_), __x);
  }
  v49 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v45 >= (int)v5)
    goto LABEL_100;
  v6 = v45;
  do
  {
    v55.__begin_[(int)v6] = 1;
    v7 = (uint64_t)v52;
    if (v52)
    {
      v52 = (_QWORD *)v52[6];
    }
    else
    {
      v7 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v51, 1);
      *(_QWORD *)(v7 + 48) = 0;
    }
    *(_DWORD *)v7 = v6;
    *(_QWORD *)(v7 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v6, v7 + 8);
    *(_QWORD *)v46 = v7;
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(v53, v46);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v6, v6);
LABEL_16:
    v9 = inited;
    while (*((_QWORD *)&v54 + 1))
    {
      v10 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v53[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v54 + 1) + v54 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v54 + 1) + v54 - 1) & 0x1FF));
      v11 = *(int *)v10;
      v12 = v55.__end_ - v55.__begin_;
      if (v55.__end_ - v55.__begin_ <= v11)
      {
        v5 = v11 + 1;
        v46[0] = 0;
        if (v11 + 1 <= v12)
        {
          if (v11 + 1 < v12)
            v55.__end_ = &v55.__begin_[v5];
        }
        else
        {
          std::vector<char>::__append(&v55, v11 + 1 - v12, v46);
        }
      }
      if ((v9 & 1) == 0)
        goto LABEL_33;
      v13 = v10[1];
      if (v13)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
          goto LABEL_33;
        v14 = v10[1];
        if (!v14)
          goto LABEL_29;
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
LABEL_30:
        v16 = *(int *)(v15 + 12);
        v17 = v55.__end_ - v55.__begin_;
        if (v55.__end_ - v55.__begin_ <= v16)
        {
          v5 = v16 + 1;
          v46[0] = 0;
          if (v16 + 1 <= v17)
          {
            if (v16 + 1 < v17)
              v55.__end_ = &v55.__begin_[v5];
          }
          else
          {
            std::vector<char>::__append(&v55, v16 + 1 - v17, v46);
          }
        }
        if (*(_QWORD *)v15)
        {
          v23 = v10[1];
          if (v23)
            goto LABEL_53;
LABEL_54:
          ++v10[5];
        }
        else
        {
          v24 = *(int *)(v15 + 12);
          v25 = v55.__begin_[v24];
          if (v25 == 1)
          {
            v9 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::BackArc((uint64_t)a2, v11, v15);
            v23 = v10[1];
            if (v23)
              goto LABEL_53;
            goto LABEL_54;
          }
          if (v25 != 2)
          {
            v55.__begin_[v24] = 1;
            v26 = (uint64_t)v52;
            if (v52)
            {
              v52 = (_QWORD *)v52[6];
            }
            else
            {
              v26 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v51, 1);
              *(_QWORD *)(v26 + 48) = 0;
            }
            *(_DWORD *)v26 = *(_DWORD *)(v15 + 12);
            *(_QWORD *)(v26 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v46 = v26;
            std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(v53, v46);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v15 + 12), v6);
            goto LABEL_16;
          }
          v9 = fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ForwardOrCrossArc((_QWORD **)a2, v11, v15);
          v23 = v10[1];
          if (!v23)
            goto LABEL_54;
LABEL_53:
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
        }
      }
      else
      {
        if (v10[5] < v10[3])
        {
LABEL_29:
          v15 = v10[2] + 16 * v10[5];
          goto LABEL_30;
        }
LABEL_33:
        v55.__begin_[v11] = 2;
        v18 = v10[1];
        if (v18)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        }
        else
        {
          v19 = (_DWORD *)v10[4];
          if (v19)
            --*v19;
        }
        v10[6] = v52;
        v52 = v10;
        --*((_QWORD *)&v54 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v53, 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v53[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v54 + 1) + v54 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v54 + 1) + v54 - 1) & 0x1FF));
          v21 = *(_DWORD *)v20;
          v22 = *(_QWORD *)(v20 + 8);
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState((uint64_t)a2, v11, v21);
          v23 = *(_QWORD *)(v20 + 8);
          if (v23)
            goto LABEL_53;
          ++*(_QWORD *)(v20 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState((uint64_t)a2, v11, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v6 == v45)
      v6 = 0;
    else
      v6 = (v6 + 1);
    if ((int)v6 < (int)v5)
    {
      v27 = &v55.__begin_[(int)v6];
      v28 = (int)v5 - (uint64_t)(int)v6;
      while (*v27++)
      {
        v6 = (v6 + 1);
        if (!--v28)
        {
          v6 = v5;
          break;
        }
      }
    }
    if (v44 || (_DWORD)v6 != (_DWORD)v5)
      continue;
LABEL_70:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_76;
      }
    }
    else if (v49 >= v48)
    {
      continue;
    }
    v30 = v49;
LABEL_76:
    if (v30 != (_DWORD)v5)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v49;
      goto LABEL_70;
    }
    end = v55.__end_;
    if (v55.__end_ >= v55.__end_cap_.__value_)
    {
      begin = v55.__begin_;
      v34 = v55.__end_ - v55.__begin_;
      v35 = v55.__end_ - v55.__begin_ + 1;
      if (v35 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v36 = v55.__end_cap_.__value_ - v55.__begin_;
      if (2 * (v55.__end_cap_.__value_ - v55.__begin_) > (unint64_t)v35)
        v35 = 2 * v36;
      if (v36 >= 0x3FFFFFFFFFFFFFFFLL)
        v37 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
        v38 = (char *)operator new(v37);
      else
        v38 = 0;
      v39 = &v38[v34];
      v40 = &v38[v34];
      *v40 = 0;
      v32 = v40 + 1;
      if (end != begin)
      {
        v41 = &end[~(unint64_t)begin];
        do
        {
          v42 = *--end;
          (v41--)[(_QWORD)v38] = v42;
        }
        while (end != begin);
        end = v55.__begin_;
        v39 = v38;
      }
      v55.__begin_ = v39;
      v55.__end_ = v32;
      v55.__end_cap_.__value_ = &v38[v37];
      if (end)
        operator delete(end);
    }
    else
    {
      *v55.__end_ = 0;
      v32 = end + 1;
    }
    v55.__end_ = v32;
    v5 = (v5 + 1);
  }
  while ((v9 & 1) != 0 && (int)v6 < (int)v5);
LABEL_100:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v50 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena(v51);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v50);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v53);
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
}

void sub_1ADBDAD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NaturalLess<fst::TropicalWeightTpl<float>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  float *v19;
  int v20;
  float v21;
  float v22;
  _QWORD v25[3];
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  float v32;

  *a5 = 1;
  *a6 = 1;
  v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v10)
  {
    v11 = v10 >> 2;
    if (v11 <= 1)
      v11 = 1;
    bzero(*(void **)a3, 4 * v11);
  }
  v30 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v28);
  while (1)
  {
    result = v28;
    if (!v28)
    {
      if ((int)v30 >= v29)
        return result;
LABEL_11:
      v14 = v30;
      goto LABEL_12;
    }
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    result = v28;
    if (v13)
      break;
    if (!v28)
      goto LABEL_11;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v28 + 24))();
LABEL_12:
    v27 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v14, v25);
    v15 = (int)v14;
    while (1)
    {
      if (!v25[0])
      {
        if (v27 >= v25[2])
          goto LABEL_39;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v25[0] + 24))(v25[0]))
        break;
      if (v25[0])
      {
        v16 = (*(uint64_t (**)(void))(*(_QWORD *)v25[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      v16 = v25[1] + 16 * v27;
LABEL_19:
      if (*(_QWORD *)v16)
        goto LABEL_29;
      v17 = *(int *)(*a2 + 4 * v15);
      if ((_DWORD)v17 == *(_DWORD *)(*a2 + 4 * *(int *)(v16 + 12)))
      {
        v18 = *(_DWORD **)a3;
        if (!a4
          || (v19 = (float *)(v16 + 8),
              v32 = 0.0,
              fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(a4, (float *)(v16 + 8), &v32)))
        {
          v20 = 1;
          goto LABEL_24;
        }
        if ((v18[v17] | 2) == 2)
        {
          v32 = 0.0;
          v22 = *v19;
          v32 = *v19;
          v31 = 2139095040;
          if (v32 == INFINITY || (v32 = v22, v31 = 0, v22 == 0.0))
            v20 = 2;
          else
            v20 = 3;
LABEL_24:
          v18[v17] = v20;
        }
        *a5 = 0;
      }
      v32 = 0.0;
      v21 = *(float *)(v16 + 8);
      v32 = v21;
      v31 = 2139095040;
      if (v21 != INFINITY)
      {
        v32 = v21;
        v31 = 0;
        if (v21 != 0.0)
          *a6 = 0;
      }
LABEL_29:
      if (v25[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v25[0] + 40))(v25[0]);
      else
        ++v27;
    }
    if (v25[0])
    {
      (*(void (**)(void))(*(_QWORD *)v25[0] + 8))();
      goto LABEL_41;
    }
LABEL_39:
    if (v26)
      --*v26;
LABEL_41:
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
    else
      ++v30;
  }
  if (v28)
    return (*(uint64_t (**)(void))(*(_QWORD *)v28 + 8))();
  return result;
}

void sub_1ADBDB108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1ADBDB2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer begin;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_106;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_66;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) == 0)
      {
LABEL_32:
        v58.__begin_[v13] = 2;
        v20 = v12[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v12[4];
          if (v21)
            --*v21;
        }
        v12[6] = v55;
        v55 = v12;
        --*((_QWORD *)&v57 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
        if (!*((_QWORD *)&v57 + 1))
        {
          fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
          goto LABEL_62;
        }
        v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v24 = *(_QWORD *)(v22 + 8);
        if (v24)
        {
LABEL_41:
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
          goto LABEL_62;
        }
        ++*(_QWORD *)(v22 + 40);
        goto LABEL_62;
      }
      v15 = v12[1];
      if (!v15)
      {
        if (v12[5] >= v12[3])
          goto LABEL_32;
LABEL_28:
        v17 = v12[2] + 16 * v12[5];
        goto LABEL_29;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
        goto LABEL_32;
      v16 = v12[1];
      if (!v16)
        goto LABEL_28;
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
LABEL_29:
      v18 = *(int *)(v17 + 12);
      v19 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v18)
      {
        v7 = v18 + 1;
        v49[0] = 0;
        if (v18 + 1 <= v19)
        {
          if (v18 + 1 < v19)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v18 + 1 - v19, v49);
        }
      }
      if (*(_QWORD *)v17)
      {
        v24 = v12[1];
        if (v24)
          goto LABEL_41;
LABEL_58:
        ++v12[5];
        goto LABEL_62;
      }
      v25 = *(int *)(v17 + 12);
      v26 = v58.__begin_[v25];
      if (v26 == 1)
      {
        **(_BYTE **)(a2 + 8) = 0;
        v28 = v12[1];
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
          v11 = 0;
          goto LABEL_62;
        }
        v11 = 0;
        goto LABEL_58;
      }
      if (v26 == 2)
      {
        v27 = v12[1];
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
        else
          ++v12[5];
      }
      else
      {
        v58.__begin_[v25] = 1;
        v29 = (uint64_t)v55;
        if (v55)
        {
          v55 = (_QWORD *)v55[6];
        }
        else
        {
          v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
          *(_QWORD *)(v29 + 48) = 0;
        }
        *(_DWORD *)v29 = *(_DWORD *)(v17 + 12);
        *(_QWORD *)(v29 + 40) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
        *(_QWORD *)v49 = v29;
        std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(v56, v49);
      }
      v11 = 1;
LABEL_62:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_66:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_76:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_82;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_82:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_76;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      begin = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != begin)
      {
        v44 = &end[~(unint64_t)begin];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != begin);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      a3 = v46;
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_106:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADBDBA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

int *fst::RmEpsilonState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>>::Expand(_QWORD *a1, int a2)
{
  int *result;
  uint64_t v4;
  __n128 **v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  __n128 *v13;
  __n128 v14;
  float v15;
  BOOL v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  float *v20;
  float v21;
  float v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  __n128 *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __n128 *v35;
  unint64_t v36;
  uint64_t v37;
  __n128 *v38;
  __n128 *v39;
  __n128 *v40;
  __n128 *v41;
  __n128 *v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  BOOL v47;
  float v48;
  float v49;
  float v50;
  BOOL v52;
  float v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int32 v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int32 v60;
  __n128 v61;
  _QWORD v62[3];
  _DWORD *v63;
  unint64_t v64;
  int v65;

  v65 = a2;
  *((_DWORD *)a1 + 72) = 2139095040;
  a1[34] = a1[33];
  result = (int *)fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ShortestDistance(a1 + 2, a2);
  if (*((_BYTE *)a1 + 132))
    return result;
  std::deque<int>::push_back(a1 + 23, &v65);
  v4 = a1[28];
  if (!v4)
    goto LABEL_91;
  v5 = (__n128 **)(a1 + 33);
  v6 = a1 + 29;
  v54 = (uint64_t)(a1 + 35);
  do
  {
    v7 = v4 - 1;
    v8 = *(unsigned int *)(*(_QWORD *)(a1[24] + (((unint64_t)(a1[27] + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((a1[27] + v7) & 0x3FF));
    a1[28] = v7;
    std::deque<int>::__maybe_remove_back_spare[abi:ne180100](a1 + 23, 1);
    while (a1[30] <= (unint64_t)(int)v8)
    {
      LOBYTE(v62[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 29), v62);
    }
    v9 = *(_QWORD *)(*v6 + 8 * ((unint64_t)(int)v8 >> 6));
    if ((v9 & (1 << v8)) != 0)
      goto LABEL_90;
    *(_QWORD *)(*v6 + 8 * ((unint64_t)(int)v8 >> 6)) = v9 | (1 << v8);
    v10 = a1[32];
    v11 = operator new(0x10uLL);
    *(_QWORD *)v11 = v10;
    v11[2] = v8;
    a1[32] = v11;
    v12 = *a1;
    v64 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v12 + 136))(v12, v8, v62);
    while (1)
    {
      if (!v62[0])
      {
        if (v64 >= v62[2])
          goto LABEL_69;
        goto LABEL_13;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v62[0] + 24))(v62[0]))
        break;
      if (v62[0])
      {
        v13 = (__n128 *)(*(uint64_t (**)(void))(*(_QWORD *)v62[0] + 32))();
        goto LABEL_14;
      }
LABEL_13:
      v13 = (__n128 *)(v62[1] + 16 * v64);
LABEL_14:
      v14 = *v13;
      v61 = *v13;
      v14.n128_u32[0] = *(_DWORD *)(*(_QWORD *)a1[1] + 4 * (int)v8);
      v15 = NAN;
      if (v14.n128_f32[0] != -INFINITY)
      {
        v15 = NAN;
        if (v61.n128_f32[2] != -INFINITY)
        {
          v15 = INFINITY;
          v16 = v61.n128_f32[2] == INFINITY || v14.n128_f32[0] == INFINITY;
          v14.n128_f32[0] = v14.n128_f32[0] + v61.n128_f32[2];
          if (!v16)
            v15 = v14.n128_f32[0];
        }
      }
      v61.n128_f32[2] = v15;
      if (v61.n128_u64[0])
      {
        v59 = v61.n128_u64[0];
        v60 = v61.n128_u32[3];
        v17 = std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::find<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element>(a1 + 17, (int *)&v59);
        if (!v17)
        {
          v23 = (uint64_t)(a1[34] - a1[33]) >> 4;
          v24 = *((_DWORD *)a1 + 73);
          v55 = v59;
          v56 = v60;
          v57 = v24;
          v58 = v23;
          std::__hash_table<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,std::__unordered_map_hasher<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,true>,std::__unordered_map_equal<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementEqual,fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>>::__emplace_unique_key_args<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<fst::RmEpsilonState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>>::Element,std::pair<int,unsigned long>>>((uint64_t)(a1 + 17), (int *)&v55, (uint64_t)&v55);
          v26 = (__n128 *)a1[34];
          v25 = a1[35];
          if ((unint64_t)v26 < v25)
            goto LABEL_44;
          v27 = v26 - *v5;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 60)
            goto LABEL_95;
          v29 = v25 - (_QWORD)*v5;
          if (v29 >> 3 > v28)
            v28 = v29 >> 3;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
            v30 = 0xFFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v54, v30);
          else
            v31 = 0;
          v38 = (__n128 *)&v31[16 * v27];
          v14 = v61;
          *v38 = v61;
          v40 = (__n128 *)a1[33];
          v39 = (__n128 *)a1[34];
          v41 = v38;
          if (v39 != v40)
          {
            do
            {
              v14 = v39[-1];
              v41[-1] = v14;
              --v41;
              --v39;
            }
            while (v39 != v40);
LABEL_60:
            v39 = *v5;
          }
LABEL_61:
          v35 = v38 + 1;
          a1[33] = v41;
          a1[34] = v38 + 1;
          a1[35] = &v31[16 * v30];
          if (v39)
            operator delete(v39);
          goto LABEL_63;
        }
        v18 = *((_DWORD *)a1 + 73);
        if (*((_DWORD *)v17 + 8) != v18)
        {
          *((_DWORD *)v17 + 8) = v18;
          v32 = a1[33];
          v26 = (__n128 *)a1[34];
          v33 = ((uint64_t)v26 - v32) >> 4;
          v17[5] = v33;
          v34 = a1[35];
          if ((unint64_t)v26 < v34)
          {
LABEL_44:
            v14 = v61;
            *v26 = v61;
            v35 = v26 + 1;
LABEL_63:
            a1[34] = v35;
            goto LABEL_64;
          }
          v36 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 60)
LABEL_95:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v37 = v34 - v32;
          if (v37 >> 3 > v36)
            v36 = v37 >> 3;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
            v30 = 0xFFFFFFFFFFFFFFFLL;
          else
            v30 = v36;
          if (v30)
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v54, v30);
          else
            v31 = 0;
          v38 = (__n128 *)&v31[16 * v33];
          v14 = v61;
          *v38 = v61;
          v42 = (__n128 *)a1[33];
          v39 = (__n128 *)a1[34];
          v41 = v38;
          if (v39 != v42)
          {
            do
            {
              v14 = v39[-1];
              v41[-1] = v14;
              --v41;
              --v39;
            }
            while (v39 != v42);
            goto LABEL_60;
          }
          goto LABEL_61;
        }
        v19 = (uint64_t)&(*v5)[v17[5]];
        v21 = *(float *)(v19 + 8);
        v20 = (float *)(v19 + 8);
        v14.n128_f32[0] = v21;
        v22 = NAN;
        if (v21 != -INFINITY)
        {
          v22 = NAN;
          if (v61.n128_f32[2] != -INFINITY)
          {
            if (v14.n128_f32[0] >= v61.n128_f32[2])
              v22 = v61.n128_f32[2];
            else
              v22 = v14.n128_f32[0];
          }
        }
        *v20 = v22;
      }
      else
      {
        while (a1[30] <= (unint64_t)v61.n128_i32[3])
        {
          LOBYTE(v55) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 29), &v55);
        }
        if (((*(_QWORD *)(*v6 + (((unint64_t)v61.n128_i32[3] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v61.n128_i8[12]) & 1) == 0)
          std::deque<int>::push_back(a1 + 23, &v61.n128_u32[3]);
      }
LABEL_64:
      if (v62[0])
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v62[0] + 40))(v62[0], v14);
      else
        ++v64;
    }
    if (v62[0])
    {
      (*(void (**)(void))(*(_QWORD *)v62[0] + 8))();
    }
    else
    {
LABEL_69:
      if (v63)
        --*v63;
    }
    v43 = *(_QWORD *)a1[1];
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, v8);
    v45 = *(float *)(v43 + 4 * (int)v8);
    v46 = NAN;
    if (v45 != -INFINITY && v44 != -INFINITY)
    {
      v46 = INFINITY;
      v47 = v44 == INFINITY || v45 == INFINITY;
      v48 = v45 + v44;
      if (!v47)
        v46 = v48;
    }
    v49 = *((float *)a1 + 72);
    if (v49 >= v46)
      v50 = v46;
    else
      v50 = *((float *)a1 + 72);
    v52 = v46 == -INFINITY || v49 == -INFINITY;
    v53 = NAN;
    if (!v52)
      v53 = v50;
    *((float *)a1 + 72) = v53;
LABEL_90:
    v4 = a1[28];
  }
  while (v4);
LABEL_91:
  for (result = (int *)a1[32]; result; result = (int *)a1[32])
  {
    *(_QWORD *)(a1[29] + (((unint64_t)result[2] >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << result[2]);
    a1[32] = *(_QWORD *)result;
    operator delete(result);
  }
  ++*((_DWORD *)a1 + 73);
  return result;
}

void sub_1ADBDC054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_DWORD *a22)
{
  if (a19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  }
  else if (a22)
  {
    --*a22;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::EpsilonArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ShortestDistance(_QWORD *a1, int a2)
{
  unint64_t v4;
  void **v5;
  _DWORD *v6;
  void **v7;
  char *v8;
  unint64_t v9;
  char **v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  unint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  char *v33;
  char *v34;
  unint64_t v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  char **v44;
  _QWORD *v45;
  int v46;
  void **v47;
  _DWORD *v48;
  void **v49;
  char *v50;
  unint64_t i;
  unint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  int v61;
  unint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  int v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  _DWORD *v79;
  void **v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  int v93;
  unint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  int v105;
  char *v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  int v116;
  char *v117;
  char *v118;
  float v119;
  float v120;
  BOOL v121;
  float v122;
  float v123;
  float v124;
  float v127;
  float v129;
  float v130;
  BOOL v132;
  float v133;
  uint64_t v134;
  char v135;
  uint64_t result;
  _BYTE *v137;
  uint64_t v138;
  _QWORD v139[3];
  _DWORD *v140;
  unint64_t v141;
  int v142;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1) == -1)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0);
    if (!result)
      return result;
    v137 = (char *)a1 + 116;
    goto LABEL_224;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 56))(*(_QWORD *)(a1[2] + 16));
  if (!*((_BYTE *)a1 + 33))
  {
    *(_QWORD *)(a1[1] + 8) = *(_QWORD *)a1[1];
    a1[6] = a1[5];
    a1[9] = 0;
  }
  if (a2 == -1)
    a2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v4 = a2;
  v5 = (void **)a1[1];
  v7 = v5 + 1;
  v6 = v5[1];
  v8 = (char *)*v5;
  v9 = ((char *)v6 - (_BYTE *)*v5) >> 2;
  if (v9 <= a2)
  {
    v10 = (char **)(a1 + 5);
    do
    {
      v11 = (unint64_t)v5[2];
      if ((unint64_t)v6 >= v11)
      {
        if ((v9 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = v11 - (_QWORD)v8;
        v14 = v13 >> 1;
        if (v13 >> 1 <= v9 + 1)
          v14 = v9 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v5 + 2), v15);
        else
          v16 = 0;
        v17 = &v16[4 * v9];
        *(_DWORD *)v17 = 2139095040;
        v12 = v17 + 4;
        v18 = (char *)*v7;
        v19 = (char *)*v5;
        if (*v7 != *v5)
        {
          do
          {
            v20 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v17 - 1) = v20;
            v17 -= 4;
          }
          while (v18 != v19);
          v18 = (char *)*v5;
        }
        *v5 = v17;
        *v7 = v12;
        v5[2] = &v16[4 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v6 = 2139095040;
        v12 = v6 + 1;
      }
      *v7 = v12;
      v22 = (_DWORD *)a1[6];
      v21 = a1[7];
      if ((unint64_t)v22 >= v21)
      {
        v24 = ((char *)v22 - *v10) >> 2;
        if ((unint64_t)(v24 + 1) >> 62)
LABEL_229:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v25 = v21 - (_QWORD)*v10;
        v26 = v25 >> 1;
        if (v25 >> 1 <= (unint64_t)(v24 + 1))
          v26 = v24 + 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v27);
        else
          v28 = 0;
        v29 = &v28[4 * v24];
        *(_DWORD *)v29 = 2139095040;
        v23 = v29 + 4;
        v31 = (char *)a1[5];
        v30 = (char *)a1[6];
        if (v30 != v31)
        {
          do
          {
            v32 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *((_DWORD *)v29 - 1) = v32;
            v29 -= 4;
          }
          while (v30 != v31);
          v30 = *v10;
        }
        a1[5] = v29;
        a1[6] = v23;
        a1[7] = &v28[4 * v27];
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v22 = 2139095040;
        v23 = v22 + 1;
      }
      a1[6] = v23;
      LOBYTE(v139[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), v139);
      v5 = (void **)a1[1];
      v7 = v5 + 1;
      v6 = v5[1];
      v8 = (char *)*v5;
      v9 = ((char *)v6 - (_BYTE *)*v5) >> 2;
    }
    while (v9 <= v4);
  }
  if (*((_BYTE *)a1 + 33))
  {
    v33 = (char *)a1[11];
    v34 = (char *)a1[12];
    v35 = (v34 - v33) >> 2;
    if (v35 <= v4)
    {
      v36 = a1 + 13;
      do
      {
        if ((unint64_t)v34 >= *v36)
        {
          v38 = v35 + 1;
          if ((v35 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v39 = *v36 - (_QWORD)v33;
          if (v39 >> 1 > v38)
            v38 = v39 >> 1;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
            v40 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
          {
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v40);
            v33 = (char *)a1[11];
            v34 = (char *)a1[12];
          }
          else
          {
            v41 = 0;
          }
          v42 = &v41[4 * v35];
          *(_DWORD *)v42 = -1;
          v37 = v42 + 4;
          while (v34 != v33)
          {
            v43 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *((_DWORD *)v42 - 1) = v43;
            v42 -= 4;
          }
          a1[11] = v42;
          a1[12] = v37;
          a1[13] = &v41[4 * v40];
          if (v33)
          {
            operator delete(v33);
            v33 = (char *)a1[11];
          }
          else
          {
            v33 = v42;
          }
        }
        else
        {
          *(_DWORD *)v34 = -1;
          v37 = v34 + 4;
        }
        a1[12] = v37;
        v35 = (v37 - v33) >> 2;
        v34 = v37;
      }
      while (v35 <= v4);
      v8 = *(char **)a1[1];
    }
    *(_DWORD *)&v33[4 * v4] = *((_DWORD *)a1 + 28);
  }
  *(_DWORD *)&v8[4 * v4] = 0;
  v44 = (char **)(a1 + 5);
  *(_DWORD *)(a1[5] + 4 * v4) = 0;
  *(_QWORD *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[2] + 16) + 24))(*(_QWORD *)(a1[2] + 16), v4);
  v45 = a1 + 13;
  v137 = (char *)a1 + 116;
  v138 = (uint64_t)(a1 + 7);
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 48))(*(_QWORD *)(a1[2] + 16)) & 1) != 0)
      goto LABEL_220;
    v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 16))(*(_QWORD *)(a1[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 32))(*(_QWORD *)(a1[2] + 16));
    v47 = (void **)a1[1];
    v49 = v47 + 1;
    v48 = v47[1];
    v50 = (char *)*v47;
    for (i = ((char *)v48 - (_BYTE *)*v47) >> 2; i <= v46; i = ((char *)v48 - (_BYTE *)*v47) >> 2)
    {
      v52 = (unint64_t)v47[2];
      if ((unint64_t)v48 >= v52)
      {
        if ((i + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v54 = v52 - (_QWORD)v50;
        v55 = v54 >> 1;
        if (v54 >> 1 <= i + 1)
          v55 = i + 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
          v56 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v56 = v55;
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v47 + 2), v56);
        else
          v57 = 0;
        v58 = &v57[4 * i];
        *(_DWORD *)v58 = 2139095040;
        v53 = v58 + 4;
        v59 = (char *)*v49;
        v60 = (char *)*v47;
        if (*v49 != *v47)
        {
          do
          {
            v61 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *((_DWORD *)v58 - 1) = v61;
            v58 -= 4;
          }
          while (v59 != v60);
          v59 = (char *)*v47;
        }
        *v47 = v58;
        *v49 = v53;
        v47[2] = &v57[4 * v56];
        if (v59)
          operator delete(v59);
      }
      else
      {
        *v48 = 2139095040;
        v53 = v48 + 1;
      }
      *v49 = v53;
      v63 = (_DWORD *)a1[6];
      v62 = a1[7];
      if ((unint64_t)v63 >= v62)
      {
        v65 = ((char *)v63 - *v44) >> 2;
        if ((unint64_t)(v65 + 1) >> 62)
          goto LABEL_229;
        v66 = v62 - (_QWORD)*v44;
        v67 = v66 >> 1;
        if (v66 >> 1 <= (unint64_t)(v65 + 1))
          v67 = v65 + 1;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
          v68 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
          v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v138, v68);
        else
          v69 = 0;
        v70 = &v69[4 * v65];
        *(_DWORD *)v70 = 2139095040;
        v64 = v70 + 4;
        v72 = (char *)a1[5];
        v71 = (char *)a1[6];
        if (v71 != v72)
        {
          do
          {
            v73 = *((_DWORD *)v71 - 1);
            v71 -= 4;
            *((_DWORD *)v70 - 1) = v73;
            v70 -= 4;
          }
          while (v71 != v72);
          v71 = *v44;
        }
        a1[5] = v70;
        a1[6] = v64;
        a1[7] = &v69[4 * v68];
        if (v71)
          operator delete(v71);
      }
      else
      {
        *v63 = 2139095040;
        v64 = v63 + 1;
      }
      a1[6] = v64;
      LOBYTE(v139[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), v139);
      v47 = (void **)a1[1];
      v49 = v47 + 1;
      v48 = v47[1];
      v50 = (char *)*v47;
    }
    if (*((_BYTE *)a1 + 32))
    {
      LODWORD(v139[0]) = (*(float (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v46);
      v142 = 2139095040;
      if (*(float *)v139 != INFINITY)
      {
LABEL_220:
        ++*((_DWORD *)a1 + 28);
        result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0);
        if (!result)
          return result;
LABEL_224:
        *v137 = 1;
        return result;
      }
    }
    *(_QWORD *)(a1[8] + (((unint64_t)v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v46);
    v74 = a1[5];
    v75 = *(float *)(v74 + 4 * v46);
    *(_DWORD *)(v74 + 4 * v46) = 2139095040;
    v76 = *a1;
    v141 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v76 + 136))(v76, v46, v139);
    while (1)
    {
      if (!v139[0])
      {
        if (v141 >= v139[2])
        {
LABEL_212:
          v135 = 1;
          goto LABEL_213;
        }
LABEL_108:
        v77 = v139[1] + 16 * v141;
        goto LABEL_109;
      }
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v139[0] + 24))(v139[0]) & 1) != 0)
        goto LABEL_212;
      if (!v139[0])
        goto LABEL_108;
      v77 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v139[0] + 32))(v139[0]);
LABEL_109:
      if (!*(_QWORD *)v77)
      {
        v78 = (void **)a1[1];
        v80 = v78 + 1;
        v79 = v78[1];
        v81 = (char *)*v78;
        v82 = ((char *)v79 - (_BYTE *)*v78) >> 2;
        if (v82 <= *(int *)(v77 + 12))
        {
          do
          {
            v84 = (unint64_t)v78[2];
            if ((unint64_t)v79 >= v84)
            {
              if ((v82 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v86 = v84 - (_QWORD)v81;
              v87 = v86 >> 1;
              if (v86 >> 1 <= v82 + 1)
                v87 = v82 + 1;
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
                v88 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v88 = v87;
              if (v88)
                v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v78 + 2), v88);
              else
                v89 = 0;
              v90 = &v89[4 * v82];
              *(_DWORD *)v90 = 2139095040;
              v85 = v90 + 4;
              v91 = (char *)*v80;
              v92 = (char *)*v78;
              if (*v80 != *v78)
              {
                do
                {
                  v93 = *((_DWORD *)v91 - 1);
                  v91 -= 4;
                  *((_DWORD *)v90 - 1) = v93;
                  v90 -= 4;
                }
                while (v91 != v92);
                v91 = (char *)*v78;
              }
              *v78 = v90;
              *v80 = v85;
              v78[2] = &v89[4 * v88];
              if (v91)
                operator delete(v91);
            }
            else
            {
              *v79 = 2139095040;
              v85 = v79 + 1;
            }
            *v80 = v85;
            v95 = (_DWORD *)a1[6];
            v94 = a1[7];
            if ((unint64_t)v95 >= v94)
            {
              v97 = ((char *)v95 - *v44) >> 2;
              if ((unint64_t)(v97 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v98 = v94 - (_QWORD)*v44;
              v99 = v98 >> 1;
              if (v98 >> 1 <= (unint64_t)(v97 + 1))
                v99 = v97 + 1;
              if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
                v100 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v100 = v99;
              if (v100)
                v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v138, v100);
              else
                v101 = 0;
              v102 = &v101[4 * v97];
              *(_DWORD *)v102 = 2139095040;
              v96 = v102 + 4;
              v104 = (char *)a1[5];
              v103 = (char *)a1[6];
              if (v103 != v104)
              {
                do
                {
                  v105 = *((_DWORD *)v103 - 1);
                  v103 -= 4;
                  *((_DWORD *)v102 - 1) = v105;
                  v102 -= 4;
                }
                while (v103 != v104);
                v103 = *v44;
              }
              a1[5] = v102;
              a1[6] = v96;
              a1[7] = &v101[4 * v100];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *v95 = 2139095040;
              v96 = v95 + 1;
            }
            a1[6] = v96;
            LOBYTE(v142) = 0;
            std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v142);
            v78 = (void **)a1[1];
            v80 = v78 + 1;
            v79 = v78[1];
            v81 = (char *)*v78;
            v82 = ((char *)v79 - (_BYTE *)*v78) >> 2;
            v83 = *(int *)(v77 + 12);
          }
          while (v82 <= v83);
        }
        else
        {
          LODWORD(v83) = *(_DWORD *)(v77 + 12);
        }
        if (*((_BYTE *)a1 + 33))
        {
          v106 = (char *)a1[11];
          v107 = (char *)a1[12];
          v108 = (v107 - v106) >> 2;
          if (v108 <= (int)v83)
          {
            do
            {
              if ((unint64_t)v107 >= *v45)
              {
                v111 = v108 + 1;
                if ((v108 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v112 = *v45 - (_QWORD)v106;
                if (v112 >> 1 > v111)
                  v111 = v112 >> 1;
                if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
                  v113 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v113 = v111;
                if (v113)
                {
                  v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v113);
                  v106 = (char *)a1[11];
                  v107 = (char *)a1[12];
                }
                else
                {
                  v114 = 0;
                }
                v115 = &v114[4 * v108];
                *(_DWORD *)v115 = -1;
                v110 = v115 + 4;
                while (v107 != v106)
                {
                  v116 = *((_DWORD *)v107 - 1);
                  v107 -= 4;
                  *((_DWORD *)v115 - 1) = v116;
                  v115 -= 4;
                }
                a1[11] = v115;
                a1[12] = v110;
                a1[13] = &v114[4 * v113];
                if (v106)
                {
                  operator delete(v106);
                  v106 = (char *)a1[11];
                }
                else
                {
                  v106 = v115;
                }
              }
              else
              {
                *(_DWORD *)v107 = -1;
                v110 = v107 + 4;
              }
              a1[12] = v110;
              v108 = (v110 - v106) >> 2;
              LODWORD(v83) = *(_DWORD *)(v77 + 12);
              v107 = v110;
            }
            while (v108 <= (int)v83);
            v109 = (int)v83;
            v78 = (void **)a1[1];
          }
          else
          {
            v109 = (int)v83;
          }
          if (*(_DWORD *)&v106[4 * v109] != *((_DWORD *)a1 + 28))
          {
            *((_DWORD *)*v78 + v109) = 2139095040;
            *(_DWORD *)(a1[5] + 4 * *(int *)(v77 + 12)) = 2139095040;
            v83 = *(int *)(v77 + 12);
            *(_QWORD *)(a1[8] + ((v83 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v83);
            *(_DWORD *)(a1[11] + 4 * v83) = *((_DWORD *)a1 + 28);
            v78 = (void **)a1[1];
            LODWORD(v83) = *(_DWORD *)(v77 + 12);
          }
        }
        v117 = (char *)*v78;
        v118 = *v44;
        v119 = NAN;
        if (v75 != -INFINITY)
        {
          v120 = *(float *)(v77 + 8);
          v119 = NAN;
          if (v120 != -INFINITY)
          {
            v119 = INFINITY;
            v121 = v120 == INFINITY || v75 == INFINITY;
            v122 = v75 + v120;
            if (!v121)
              v119 = v122;
          }
        }
        v123 = *(float *)&v117[4 * (int)v83];
        if (v123 >= v119)
          v124 = v119;
        else
          v124 = *(float *)&v117[4 * (int)v83];
        if (v119 == -INFINITY || v123 == -INFINITY)
          v124 = NAN;
        v127 = *((float *)a1 + 7);
        if (v124 > (float)(v123 + v127) || v123 > (float)(v127 + v124))
          break;
      }
LABEL_209:
      if (v139[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v139[0] + 40))(v139[0]);
      else
        ++v141;
    }
    *(float *)&v117[4 * (int)v83] = v124;
    v129 = *(float *)&v118[4 * (int)v83];
    if (v129 >= v119)
      v130 = v119;
    else
      v130 = *(float *)&v118[4 * (int)v83];
    v132 = v119 == -INFINITY || v129 == -INFINITY;
    v133 = NAN;
    if (!v132)
      v133 = v130;
    *(float *)&v118[4 * (int)v83] = v133;
    if (*(float *)&v117[4 * (int)v83] != -INFINITY && (v133 < -INFINITY || v133 > -INFINITY))
    {
      v134 = **(_QWORD **)(a1[2] + 16);
      if (((*(_QWORD *)(a1[8] + (((unint64_t)*(int *)(v77 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v77 + 12)) & 1) != 0)
      {
        (*(void (**)(void))(v134 + 40))();
      }
      else
      {
        (*(void (**)(void))(v134 + 24))();
        *(_QWORD *)(a1[8] + (((unint64_t)*(int *)(v77 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v77 + 12);
      }
      goto LABEL_209;
    }
    v135 = 0;
    *v137 = 1;
LABEL_213:
    result = v139[0];
    if (v139[0])
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v139[0] + 8))(v139[0]);
    }
    else if (v140)
    {
      --*v140;
    }
  }
  while ((v135 & 1) != 0);
  return result;
}

void sub_1ADBDCC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  }
  else if (a16)
  {
    --*a16;
  }
  _Unwind_Resume(exception_object);
}

void fst::Prune<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  void **v6;
  void **v7;
  void **v8;
  _BYTE *v9;
  _BYTE *v10;
  int v11;
  _DWORD *v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  float v26;
  float v27;
  float v28;
  BOOL v29;
  float v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  BOOL v39;
  float v40;
  float v41;
  float v42;
  BOOL v43;
  float v44;
  float v45;
  float v46;
  BOOL v47;
  float v48;
  float v49;
  float v50;
  BOOL v51;
  float v52;
  float v53;
  float v54;
  BOOL v55;
  float v56;
  int v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  int v71;
  float v72;
  float v73;
  __int128 v74;
  uint64_t v75;
  unsigned int v76;
  float v77;
  char v78;
  void *__p;
  char *v80;
  char *v81;
  void *v82[3];
  void *v83;
  unint64_t v84;
  _QWORD v85[3];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _QWORD v89[4];
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93[5];

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  if (v4)
  {
    v5 = v4;
    LODWORD(v85[0]) = 2139095040;
    std::vector<fst::TropicalWeightTpl<float>>::vector(v93, v4, v85);
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v6 = *(void ***)(a2 + 16);
    if (!v6)
    {
      std::vector<fst::TropicalWeightTpl<float>>::reserve(&v90, v5);
      fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, (char **)&v90, 1, *(float *)(a2 + 24));
      v6 = *(void ***)(a2 + 16);
    }
    if (v6)
      v7 = v6;
    else
      v7 = &v90;
    if (!*(_DWORD *)(a2 + 4))
      goto LABEL_13;
    v8 = v6 ? v6 : &v90;
    v9 = v8[1];
    v10 = *v7;
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) < (unint64_t)((v9 - v10) >> 2)
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1),
          v12 = *v7,
          LODWORD(v85[0]) = 0,
          LODWORD(v85[0]) = v12[v11],
          LODWORD(v83) = 2139095040,
          *(float *)v85 != INFINITY))
    {
      v85[0] = v93;
      v85[1] = v7;
      v86 = 0u;
      v87 = 0u;
      v88 = 0u;
      memset(v89, 0, 28);
      LOBYTE(v82[0]) = 0;
      std::vector<BOOL>::vector(&v83, v5, (unsigned __int8 *)v82);
      __p = (void *)-1;
      std::vector<unsigned long>::vector(v82, v5, &__p);
      __p = 0;
      v80 = 0;
      v81 = 0;
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
      v14 = v13;
      v15 = v80;
      if (v80 >= v81)
      {
        v17 = (char *)__p;
        v18 = (v80 - (_BYTE *)__p) >> 2;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v20 = v81 - (_BYTE *)__p;
        if ((v81 - (_BYTE *)__p) >> 1 > v19)
          v19 = v20 >> 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v81, v21);
          v17 = (char *)__p;
          v15 = v80;
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[4 * v18];
        v24 = &v22[4 * v21];
        *(_DWORD *)v23 = v14;
        v16 = v23 + 4;
        while (v15 != v17)
        {
          v25 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v25;
          v23 -= 4;
        }
        __p = v23;
        v80 = v16;
        v81 = v24;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_DWORD *)v80 = v13;
        v16 = v15 + 4;
      }
      v80 = v16;
      v26 = *((float *)*v7 + (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1));
      v27 = NAN;
      if (v26 != -INFINITY)
      {
        v28 = *(float *)a2;
        v27 = NAN;
        if (*(float *)a2 != -INFINITY)
        {
          v27 = INFINITY;
          v29 = v28 == INFINITY || v26 == INFINITY;
          v30 = v26 + v28;
          if (!v29)
            v27 = v30;
        }
      }
      v77 = v27;
      v76 = 0;
      v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v78, &v77, (float *)*v7 + (int)v76))
      {
        v31 = 0;
      }
      else
      {
        *((_DWORD *)v93[0] + (int)v76) = 0;
        v32 = fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert((uint64_t)v85, (int *)&v76);
        *((_QWORD *)v82[0] + (int)v76) = v32;
        v31 = 1;
      }
      while (LODWORD(v89[3]))
      {
        v76 = *(_DWORD *)v89[0];
        fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Pop((uint64_t)v85);
        v33 = v76;
        v34 = (int)v76;
        *((_QWORD *)v82[0] + (int)v76) = -1;
        *(_QWORD *)((char *)v83 + (((unint64_t)v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
        v35 = (float *)v93[0];
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
        v37 = v35[v34];
        v38 = NAN;
        if (v37 != -INFINITY && v36 != -INFINITY)
        {
          v38 = INFINITY;
          v39 = v37 == INFINITY || v36 == INFINITY;
          v40 = v36 + v37;
          if (!v39)
            v38 = v40;
        }
        *(float *)&v74 = v38;
        if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v78, &v77, (float *)&v74))
          (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)a1 + 184))(a1, v76, INFINITY);
        (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v76, &v75);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75))
        {
          v74 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 32))(v75);
          v41 = *((float *)v93[0] + (int)v76);
          v42 = NAN;
          if (v41 != -INFINITY)
          {
            v42 = NAN;
            if (*((float *)&v74 + 2) != -INFINITY)
            {
              v42 = INFINITY;
              v43 = *((float *)&v74 + 2) == INFINITY || v41 == INFINITY;
              v44 = v41 + *((float *)&v74 + 2);
              if (!v43)
                v42 = v44;
            }
          }
          if (SHIDWORD(v74) >= (unint64_t)(((_BYTE *)v8[1] - (_BYTE *)*v7) >> 2))
            v45 = INFINITY;
          else
            v45 = *((float *)*v7 + SHIDWORD(v74));
          v46 = NAN;
          if (v42 != -INFINITY && v45 != -INFINITY)
          {
            v46 = INFINITY;
            v47 = v45 == INFINITY || v42 == INFINITY;
            v48 = v42 + v45;
            if (!v47)
              v46 = v48;
          }
          v73 = v46;
          if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v78, &v77, &v73))
          {
            HIDWORD(v74) = *(_DWORD *)__p;
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v75 + 88))(v75, &v74);
          }
          else
          {
            v49 = *((float *)v93[0] + (int)v76);
            v50 = NAN;
            if (v49 != -INFINITY)
            {
              v50 = NAN;
              if (*((float *)&v74 + 2) != -INFINITY)
              {
                v50 = INFINITY;
                v51 = *((float *)&v74 + 2) == INFINITY || v49 == INFINITY;
                v52 = v49 + *((float *)&v74 + 2);
                if (!v51)
                  v50 = v52;
              }
            }
            v72 = v50;
            if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v78, &v72, (float *)v93[0] + SHIDWORD(v74)))
            {
              v53 = *((float *)v93[0] + (int)v76);
              v54 = NAN;
              if (v53 != -INFINITY)
              {
                v54 = NAN;
                if (*((float *)&v74 + 2) != -INFINITY)
                {
                  v54 = INFINITY;
                  v55 = *((float *)&v74 + 2) == INFINITY || v53 == INFINITY;
                  v56 = v53 + *((float *)&v74 + 2);
                  if (!v55)
                    v54 = v56;
                }
              }
              *((float *)v93[0] + SHIDWORD(v74)) = v54;
            }
            if (((*(_QWORD *)((char *)v83 + (((unint64_t)SHIDWORD(v74) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SBYTE12(v74)) & 1) == 0)
            {
              v57 = *(_DWORD *)(a2 + 4);
              if (v57 == -1 || v31 < v57)
              {
                v58 = *((_QWORD *)v82[0] + SHIDWORD(v74));
                if (v58 == -1)
                {
                  v59 = fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert((uint64_t)v85, (int *)&v74 + 3);
                  *((_QWORD *)v82[0] + SHIDWORD(v74)) = v59;
                  ++v31;
                }
                else
                {
                  fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Update((uint64_t)v85, v58, (int *)&v74 + 3);
                }
              }
            }
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v75 + 40))(v75);
        }
        if (v75)
          (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
      }
      v60 = v84;
      if (v84)
      {
        v61 = 0;
        do
        {
          if (((*(_QWORD *)((char *)v83 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v61) & 1) == 0)
          {
            v62 = v80;
            if (v80 >= v81)
            {
              v64 = (char *)__p;
              v65 = (v80 - (_BYTE *)__p) >> 2;
              v66 = v65 + 1;
              if ((unint64_t)(v65 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v67 = v81 - (_BYTE *)__p;
              if ((v81 - (_BYTE *)__p) >> 1 > v66)
                v66 = v67 >> 1;
              if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
                v68 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v68 = v66;
              if (v68)
              {
                v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v81, v68);
                v64 = (char *)__p;
                v62 = v80;
              }
              else
              {
                v69 = 0;
              }
              v70 = &v69[4 * v65];
              *(_DWORD *)v70 = v61;
              v63 = v70 + 4;
              while (v62 != v64)
              {
                v71 = *((_DWORD *)v62 - 1);
                v62 -= 4;
                *((_DWORD *)v70 - 1) = v71;
                v70 -= 4;
              }
              __p = v70;
              v80 = v63;
              v81 = &v69[4 * v68];
              if (v64)
                operator delete(v64);
            }
            else
            {
              *(_DWORD *)v80 = v61;
              v63 = v62 + 4;
            }
            v80 = v63;
            v60 = v84;
          }
          ++v61;
        }
        while (v61 < v60);
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 216))(a1, &__p);
      if (__p)
      {
        v80 = (char *)__p;
        operator delete(__p);
      }
      if (v82[0])
      {
        v82[1] = v82[0];
        operator delete(v82[0]);
      }
      if (v83)
        operator delete(v83);
      fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(v85);
    }
    else
    {
LABEL_13:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
    }
    if (v90)
    {
      v91 = v90;
      operator delete(v90);
    }
    if (v93[0])
    {
      v93[1] = v93[0];
      operator delete(v93[0]);
    }
  }
}

void sub_1ADBDD4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;
  void *v29;

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(&a26);
  v28 = *(void **)(v26 - 144);
  if (v28)
  {
    *(_QWORD *)(v26 - 136) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(v26 - 120);
  if (v29)
  {
    *(_QWORD *)(v26 - 112) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void std::vector<fst::TropicalWeightTpl<float>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int *v15;
  char *v16;
  int v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  int v42;

  v5 = a1 + 72;
  v4 = *(int **)(a1 + 72);
  v6 = *(int *)(v5 + 24);
  v7 = *(int **)(v5 + 8);
  v8 = v7 - v4;
  if (v8 <= v6)
  {
    v9 = *(_QWORD *)(a1 + 88);
    if ((unint64_t)v7 >= v9)
    {
      if ((v8 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = v9 - (_QWORD)v4;
      v12 = (uint64_t)(v9 - (_QWORD)v4) >> 1;
      if (v12 <= v8 + 1)
        v12 = v8 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 88, v13);
        v4 = *(int **)(a1 + 72);
        v7 = *(int **)(a1 + 80);
      }
      else
      {
        v14 = 0;
      }
      v15 = (int *)&v14[4 * v8];
      v16 = &v14[4 * v13];
      *v15 = *a2;
      v10 = v15 + 1;
      while (v7 != v4)
      {
        v17 = *--v7;
        *--v15 = v17;
      }
      *(_QWORD *)(a1 + 72) = v15;
      *(_QWORD *)(a1 + 80) = v10;
      *(_QWORD *)(a1 + 88) = v16;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v7 = *a2;
      v10 = v7 + 1;
    }
    v18 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 80) = v10;
    v19 = *(char **)(a1 + 32);
    if ((unint64_t)v19 >= v18)
    {
      v21 = *(char **)(a1 + 24);
      v22 = (v19 - v21) >> 2;
      if ((unint64_t)(v22 + 1) >> 62)
        goto LABEL_53;
      v23 = v18 - (_QWORD)v21;
      v24 = (uint64_t)(v18 - (_QWORD)v21) >> 1;
      if (v24 <= v22 + 1)
        v24 = v22 + 1;
      if (v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 40, v25);
        v21 = *(char **)(a1 + 24);
        v19 = *(char **)(a1 + 32);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      v28 = &v26[4 * v25];
      *(_DWORD *)v27 = *(_DWORD *)(a1 + 96);
      v20 = v27 + 4;
      while (v19 != v21)
      {
        v29 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v27 - 1) = v29;
        v27 -= 4;
      }
      *(_QWORD *)(a1 + 24) = v27;
      *(_QWORD *)(a1 + 32) = v20;
      *(_QWORD *)(a1 + 40) = v28;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_DWORD *)v19 = *(_DWORD *)(a1 + 96);
      v20 = v19 + 4;
    }
    v30 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 32) = v20;
    v31 = *(char **)(a1 + 56);
    if ((unint64_t)v31 < v30)
    {
      *(_DWORD *)v31 = *(_DWORD *)(a1 + 96);
      v32 = v31 + 4;
LABEL_51:
      *(_QWORD *)(a1 + 56) = v32;
      goto LABEL_52;
    }
    v33 = *(char **)(a1 + 48);
    v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      v35 = v30 - (_QWORD)v33;
      v36 = (uint64_t)(v30 - (_QWORD)v33) >> 1;
      if (v36 <= v34 + 1)
        v36 = v34 + 1;
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 64, v37);
        v33 = *(char **)(a1 + 48);
        v31 = *(char **)(a1 + 56);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v40 = &v38[4 * v37];
      *(_DWORD *)v39 = *(_DWORD *)(a1 + 96);
      v32 = v39 + 4;
      while (v31 != v33)
      {
        v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(_QWORD *)(a1 + 48) = v39;
      *(_QWORD *)(a1 + 56) = v32;
      *(_QWORD *)(a1 + 64) = v40;
      if (v33)
        operator delete(v33);
      goto LABEL_51;
    }
LABEL_53:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v4[v6] = *a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * *(int *)(*(_QWORD *)(a1 + 48) + 4 * *(int *)(a1 + 96))) = *(_DWORD *)(a1 + 96);
LABEL_52:
  v42 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v42 + 1;
  return fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert(a1, a2, v42);
}

uint64_t fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Pop(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD **)(a1 + 72);
  v2 = *v1;
  v3 = *(int *)(a1 + 96) - 1;
  v4 = *(int **)(a1 + 48);
  v5 = *v4;
  v6 = v4[v3];
  *v4 = v6;
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  *v1 = v1[v3];
  v1[v3] = (_DWORD)v4;
  --*(_DWORD *)(a1 + 96);
  fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Heapify(a1, 0);
  return v2;
}

uint64_t fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Update(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  int v6;

  v5 = *(int *)(*(_QWORD *)(a1 + 24) + 4 * a2);
  v6 = v5 - 1;
  if ((int)v5 < 1)
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * a2);
  if (fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)a1, *a3, *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v6 >> 1))))
  {
    return fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert(a1, a3, v5);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v5) = *a3;
  return fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Heapify(a1, v5);
}

_QWORD *std::vector<fst::TropicalWeightTpl<float>>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1ADBDDA2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3;
  if (a3 >= 1)
  {
    v6 = *(_QWORD *)(a1 + 72);
    while (1)
    {
      v7 = v3 - 1;
      v8 = (v3 - 1) >> 1;
      if (fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)a1, *(_DWORD *)(v6 + 4 * v8), *a2))
      {
        break;
      }
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(int *)(v9 + 4 * v3);
      v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      v12 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      v6 = *(_QWORD *)(a1 + 72);
      LODWORD(v10) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v10;
      v3 = v7 >> 1;
      if (v7 <= 1)
        return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (int)v8);
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (int)v8);
}

BOOL fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  float v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  BOOL v10;
  float v11;
  float v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  float v18;
  float v19;

  v3 = **a1;
  v4 = ((*a1)[1] - v3) >> 2;
  if (v4 <= a2)
    v5 = INFINITY;
  else
    v5 = *(float *)(v3 + 4 * a2);
  v6 = *a1[1];
  v7 = (a1[1][1] - v6) >> 2;
  if (v7 <= a2)
    v8 = INFINITY;
  else
    v8 = *(float *)(v6 + 4 * a2);
  v9 = NAN;
  if (v5 != -INFINITY && v8 != -INFINITY)
  {
    v9 = INFINITY;
    v10 = v8 == INFINITY || v5 == INFINITY;
    v11 = v5 + v8;
    if (!v10)
      v9 = v11;
  }
  v19 = v9;
  if (v4 <= a3)
    v12 = INFINITY;
  else
    v12 = *(float *)(v3 + 4 * a3);
  if (v7 <= a3)
    v13 = INFINITY;
  else
    v13 = *(float *)(v6 + 4 * a3);
  v14 = NAN;
  if (v12 != -INFINITY && v13 != -INFINITY)
  {
    v14 = INFINITY;
    v15 = v13 == INFINITY || v12 == INFINITY;
    v16 = v12 + v13;
    if (!v15)
      v14 = v16;
  }
  v18 = v14;
  return fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)(a1 + 2), &v19, &v18);
}

BOOL fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Heapify(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  while (1)
  {
    v4 = (2 * (_DWORD)a2) | 1u;
    if ((int)v4 >= *(_DWORD *)(v3 + 96)
      || !(result = fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)v3, *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * (int)v4), *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * (int)a2))))
    {
      v4 = a2;
    }
    v5 = 2 * a2 + 2;
    if ((signed int)v5 < *(_DWORD *)(v3 + 96))
    {
      result = fst::PruneCompare<int,fst::TropicalWeightTpl<float>>::operator()((uint64_t **)v3, *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * (int)v5), *(_DWORD *)(*(_QWORD *)(v3 + 72) + 4 * (int)v4));
      if (result)
        v4 = v5;
      else
        v4 = v4;
    }
    if ((_DWORD)v4 == (_DWORD)a2)
      break;
    v6 = *(_QWORD *)(v3 + 48);
    v7 = *(int *)(v6 + 4 * (int)a2);
    v8 = *(int *)(v6 + 4 * (int)v4);
    *(_DWORD *)(v6 + 4 * (int)a2) = v8;
    v9 = *(_QWORD *)(v3 + 24);
    *(_DWORD *)(v9 + 4 * v8) = a2;
    *(_DWORD *)(v6 + 4 * (int)v4) = v7;
    *(_DWORD *)(v9 + 4 * v7) = v4;
    v10 = *(_QWORD *)(v3 + 72);
    LODWORD(v7) = *(_DWORD *)(v10 + 4 * (int)a2);
    *(_DWORD *)(v10 + 4 * (int)a2) = *(_DWORD *)(v10 + 4 * (int)v4);
    *(_DWORD *)(v10 + 4 * (int)v4) = v7;
    a2 = v4;
  }
  return result;
}

_QWORD *fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst(_QWORD *a1, uint64_t a2)
{
  char v4[8];
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = &unk_1E5D1DED8;
  a1[1] = 0;
  v4[0] = FLAGS_fst_default_cache_gc;
  v5 = FLAGS_fst_default_cache_gc_limit;
  v6 = 981467136;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Init<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>((uint64_t)a1, a2, (uint64_t)v4);
  return a1;
}

void sub_1ADBDDDC4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D275D8;
  v3 = v1[1];
  if (v3)
    fst::Compose<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(v3);
  _Unwind_Resume(exception_object);
}

_DWORD *fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Init<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _DWORD *result;
  int v8;
  int v9;

  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    v6 = (_QWORD *)operator new();
    fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v6, a2, 0, 0, a3);
  }
  else
  {
    v9 = *(_DWORD *)(a3 + 24);
    if (v9)
    {
      if (v9 == 2)
      {
        v6 = (_QWORD *)operator new();
        fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl((uint64_t)v6, a2, a3);
      }
      else
      {
        v6 = (_QWORD *)operator new();
        fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl((uint64_t)v6, a2, a3);
      }
    }
    else
    {
      v6 = (_QWORD *)operator new();
      fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl((uint64_t)v6, a2, a3);
    }
  }
  result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    v8 = result[14] - 1;
    result[14] = v8;
    if (!v8)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  }
  *(_QWORD *)(a1 + 8) = v6;
  return result;
}

void sub_1ADBDDF0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40BF12C28CLL);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D275D8;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst(v4, a1, a2);
  return v4;
}

void sub_1ADBDE004(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D201E8;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C3E8;
  *a2 = v4;
  return result;
}

void sub_1ADBDE0A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

_QWORD *fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *__p[2];
  char v18;
  char v19;

  v10 = fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>((uint64_t)a1, a2, a5);
  *(_QWORD *)v10 = &unk_1E5D20978;
  *(_DWORD *)(v10 + 144) = *(_DWORD *)(a5 + 16);
  *(_QWORD *)(v10 + 152) = a3;
  *(_QWORD *)(v10 + 160) = a4;
  v11 = *(_QWORD **)(a5 + 32);
  if (!v11)
  {
    v11 = (_QWORD *)operator new();
    *v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  }
  a1[22] = v11;
  v12 = *(_QWORD **)(a5 + 40);
  if (!v12)
  {
    v12 = (_QWORD *)operator new();
    *v12 = 0;
    v12[2] = v12 + 1;
    v12[3] = v12 + 1;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v12 + 4), 0, v12 + 2, v12 + 3);
    v12[11] = 0;
    v12[12] = 0;
    v12[13] = 0;
  }
  a1[23] = v12;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v14 = (_QWORD *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"DeterminizeFst: argument not an acceptor", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  v15 = (_QWORD *)a1[20];
  if (v15)
    v15[1] = *v15;
  return a1;
}

void sub_1ADBDE284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D21F70;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a3) = &unk_1E5D21F70;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v8 = *(_DWORD *)(a3 + 24) != 1 || *(_BYTE *)(a3 + 28) != 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::DeterminizeProperties(v6, *(_DWORD *)(a3 + 20) != 0, v8) & 0x3FFFFFFF0004;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 40) = v11;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v13 = *(_QWORD *)(a1 + 48);
  if (v13 != v12)
  {
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v12)
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    else
      v14 = 0;
    *(_QWORD *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_1ADBDE4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

_QWORD *fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v2, a1);
  return v2;
}

void sub_1ADBDE5C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Expand(_QWORD *a1, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t *v8;
  _QWORD *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = (uint64_t *)v9;
  fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  v4 = v8;
  if (v8 != (uint64_t *)v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, v4 + 5);
      v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (uint64_t *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != (uint64_t *)v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<int>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1ADBDE6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<int>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  _DWORD *v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result != -1)
  {
    v3 = result;
    v4 = operator new();
    *(_QWORD *)v4 = 0;
    *(_BYTE *)(v4 + 8) = -1;
    v5 = operator new(0x10uLL);
    *(_QWORD *)v5 = 0;
    v5[2] = v3;
    v5[3] = 0;
    *(_QWORD *)v4 = v5;
    *(_BYTE *)(v4 + 8) = 0;
    return fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::FindState(a1, (float **)v4);
  }
  return result;
}

float fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeFinal(uint64_t a1, int a2)
{
  float *v2;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  float v9;
  float v10;

  v2 = **(float ***)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 88) + 8 * a2);
  if (!v2)
    return INFINITY;
  v4 = INFINITY;
  do
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), *((unsigned int *)v2 + 2));
    v6 = v2[3];
    v7 = NAN;
    if (v6 != -INFINITY && v5 != -INFINITY)
    {
      v7 = INFINITY;
      v8 = v5 == INFINITY || v6 == INFINITY;
      v9 = v6 + v5;
      if (!v8)
        v7 = v9;
    }
    if (v4 >= v7)
      v10 = v7;
    else
      v10 = v4;
    if (v7 == -INFINITY || v4 == -INFINITY)
      v4 = NAN;
    else
      v4 = v10;
    if (v4 >= -INFINITY && v4 <= -INFINITY)
      *(_QWORD *)(a1 + 8) |= 4uLL;
    v2 = *(float **)v2;
  }
  while (v2);
  return v4;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  if (a2)
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  return a1;
}

void sub_1ADBDE8B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADBDE91C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D20978;
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = a1[23];
  if (v3)
  {
    v4 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1AF44D190](v4, 0x10E0C400200E20DLL);
  }
  *a1 = &unk_1E5D21F70;
  v5 = a1[17];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

_QWORD *fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  size_t *v8;
  size_t v9;
  fst *v10;
  _QWORD *v11;
  void *__p[2];
  char v14;
  char v15;

  v4 = fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFstImplBase((uint64_t)a1, a2);
  *(_QWORD *)v4 = &unk_1E5D20978;
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  v5 = (_QWORD *)operator new();
  if (a1[17])
    v6 = a1[17];
  else
    v6 = **(_QWORD **)(a2 + 176);
  *v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 88))(v6, 0);
  a1[22] = v5;
  v7 = (_QWORD *)operator new();
  v8 = *(size_t **)(a2 + 184);
  v9 = *v8;
  *v7 = *v8;
  fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable((uint64_t)(v7 + 1), v9);
  a1[23] = v7;
  if (*(_QWORD *)(a2 + 160))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFsaImpl: cannot copy with out_dist vector", 52);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  return a1;
}

void sub_1ADBDEB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D21F70;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D21F70;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v4)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 40) = v6;
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *(_QWORD *)(a1 + 48) = v9;
  }
  return a1;
}

void sub_1ADBDED1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::GetLabelMap(_QWORD *a1, int a2, uint64_t **a3)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  BOOL v12;
  float v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD v20[3];
  _DWORD *v21;
  unint64_t v22;

  v5 = **(float ***)(*(_QWORD *)(a1[23] + 88) + 8 * a2);
  if (!v5)
    goto LABEL_24;
  do
  {
    v6 = *((unsigned int *)v5 + 2);
    v7 = a1[17];
    v22 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, v6, v20);
    while (1)
    {
      if (!v20[0])
      {
        if (v22 >= v20[2])
          goto LABEL_21;
LABEL_8:
        v8 = v20[1] + 16 * v22;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v20[0] + 24))(v20[0]))
        break;
      if (!v20[0])
        goto LABEL_8;
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v20[0] + 32))();
LABEL_9:
      v9 = v5[3];
      v10 = NAN;
      if (v9 != -INFINITY)
      {
        v11 = *(float *)(v8 + 8);
        v10 = NAN;
        if (v11 != -INFINITY)
        {
          v10 = INFINITY;
          v12 = v11 == INFINITY || v9 == INFINITY;
          v13 = v9 + v11;
          if (!v12)
            v10 = v13;
        }
      }
      LODWORD(v19) = *(_DWORD *)(v8 + 12);
      *((float *)&v19 + 1) = v10;
      fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::FilterArc(a1[22], (_DWORD *)v8, (uint64_t)(v5 + 2), &v19, a3);
      if (v20[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v20[0] + 40))(v20[0]);
      else
        ++v22;
    }
    if (v20[0])
    {
      (*(void (**)(void))(*(_QWORD *)v20[0] + 8))();
      goto LABEL_23;
    }
LABEL_21:
    if (v21)
      --*v21;
LABEL_23:
    v5 = *(float **)v5;
  }
  while (v5);
LABEL_24:
  v16 = *a3;
  v14 = a3 + 1;
  v15 = v16;
  if (v16 != (uint64_t *)v14)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v15 + 5));
      v17 = (uint64_t *)v15[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (uint64_t *)v15[2];
          v12 = *v18 == (_QWORD)v15;
          v15 = v18;
        }
        while (!v12);
      }
      v15 = v18;
    }
    while (v18 != (uint64_t *)v14);
  }
}

void sub_1ADBDEF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  char *MutableState;
  __int128 v7;

  v5 = *a3;
  LODWORD(v7) = *a3;
  *(_QWORD *)((char *)&v7 + 4) = v5;
  HIDWORD(v7) = fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::FindState(a1, (float **)a3[1]);
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v7);
}

uint64_t fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, float **a2)
{
  uint64_t State;
  uint64_t v5;
  void **v6;
  float v7;
  float v8;
  unint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  float *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;

  State = fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::FindState(*(_QWORD **)(a1 + 184), (_QWORD **)a2);
  v5 = State;
  if (*(_QWORD *)(a1 + 152))
  {
    v6 = *(void ***)(a1 + 160);
    if ((int)State >= (unint64_t)(((_BYTE *)v6[1] - (_BYTE *)*v6) >> 2))
    {
      v7 = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2);
      v8 = v7;
      v9 = (unint64_t)v6[2];
      v10 = (float *)v6[1];
      if ((unint64_t)v10 >= v9)
      {
        v12 = ((char *)v10 - (_BYTE *)*v6) >> 2;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = v9 - (_QWORD)*v6;
        v14 = v13 >> 1;
        if (v13 >> 1 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v6 + 2), v15);
        else
          v16 = 0;
        v17 = (float *)&v16[4 * v12];
        v18 = &v16[4 * v15];
        *v17 = v8;
        v11 = v17 + 1;
        v20 = (char *)*v6;
        v19 = (char *)v6[1];
        if (v19 != *v6)
        {
          do
          {
            v21 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v17-- - 1) = v21;
          }
          while (v19 != v20);
          v19 = (char *)*v6;
        }
        *v6 = v17;
        v6[1] = v11;
        v6[2] = v18;
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v10 = v7;
        v11 = v10 + 1;
      }
      v6[1] = v11;
    }
  }
  return v5;
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::FindState(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t Id;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD **v8;

  v8 = a2;
  v2 = (a1[12] - a1[11]) >> 3;
  Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, &v8, 1);
  if ((_DWORD)Id != (_DWORD)v2)
  {
    v4 = v8;
    if (v8)
    {
      v5 = *v8;
      if (*v8)
      {
        do
        {
          v6 = (_QWORD *)*v5;
          operator delete(v5);
          v5 = v6;
        }
        while (v6);
      }
      *v4 = 0;
      MEMORY[0x1AF44D190](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;

  a1[13] = a2;
  v6 = (uint64_t)(a1 + 3);
  v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7)
    return *((unsigned int *)v7 + 4);
  if (!a3)
    return 0xFFFFFFFFLL;
  v9 = a1[10];
  v10 = (_QWORD *)a1[11];
  v11 = ((uint64_t)v10 - v9) >> 3;
  v23 = v11;
  v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v12 - v9;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1))
      v15 = v11 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    else
      v17 = 0;
    v18 = &v17[8 * v11];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = *a2;
    v13 = v18 + 8;
    v21 = (char *)a1[10];
    v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = *a2;
    v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  fst *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *__p[2];
  char v11;
  char v12;

  v5 = fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(a1, a2, a3);
  *(_QWORD *)v5 = &unk_1E5D20D40;
  *(_DWORD *)(v5 + 144) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(v5 + 148) = *(_DWORD *)(a3 + 20);
  *(_BYTE *)(v5 + 152) = *(_BYTE *)(a3 + 28);
  if (*(_QWORD *)(a3 + 40))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"DeterminizeFst: ", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"a state table can not be passed with transducer input", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  else
  {
    fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Init(a1, *(_QWORD *)(a1 + 136), *(_QWORD **)(a3 + 32));
  }
  return a1;
}

void sub_1ADBDF3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v15 - 17));
  if (a14 < 0)
    operator delete(__p);
  *v14 = &unk_1E5D21F70;
  v17 = v14[17];
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v14);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Init(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char v21[8];
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char v27;
  char v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[8];
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;

  fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFst(&v38, a2, (uint64_t)v31);
  if (a3)
  {
    v5 = (_QWORD *)operator new();
    fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DefaultDeterminizeFilter<fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v5, (uint64_t)&v38, a3);
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_DWORD *)(a1 + 144);
  v31[0] = *(_BYTE *)(a1 + 104);
  v32 = v6;
  v33 = v7;
  v34 = 0;
  v35 = 0;
  v36 = v5;
  v37 = 0;
  fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DeterminizeFst<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>(&v29, (uint64_t)&v38, 0, 0, (uint64_t)v31);
  v8 = *(_DWORD *)(a1 + 144);
  v9 = *(_DWORD *)(a1 + 148);
  v10 = *(_BYTE *)(a1 + 152);
  v21[0] = 1;
  v22 = 0;
  v23 = v8;
  v24 = 1;
  v25 = v9;
  v26 = v9;
  v27 = v10;
  v28 = v10;
  fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FactorWeightFst(&v19, (uint64_t)&v29, (uint64_t)v21);
  v11 = (_QWORD *)operator new();
  LODWORD(v18) = *(_DWORD *)(a1 + 148);
  BYTE4(v18) = 0;
  fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFst(v11, (uint64_t)&v19, &v18);
  *(_QWORD *)(a1 + 160) = v11;
  v19 = &unk_1E5D27058;
  v12 = v20;
  if (v20)
  {
    v13 = *(_DWORD *)(v20 + 56) - 1;
    *(_DWORD *)(v20 + 56) = v13;
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v29 = &unk_1E5D27948;
  v14 = v30;
  if (v30)
  {
    v15 = *(_DWORD *)(v30 + 56) - 1;
    *(_DWORD *)(v30 + 56) = v15;
    if (!v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v38 = &unk_1E5D24220;
  result = v39;
  if (v39)
  {
    v17 = *(_DWORD *)(v39 + 56) - 1;
    *(_DWORD *)(v39 + 56) = v17;
    if (!v17)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADBDF5EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v4;
  int v5;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  *(_QWORD *)(v2 - 48) = &unk_1E5D24220;
  v4 = *(_DWORD **)(v2 - 40);
  if (v4)
  {
    v5 = v4[14] - 1;
    v4[14] = v5;
    if (!v5)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(_QWORD *a1)
{
  fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(v2, a1);
  return v2;
}

void sub_1ADBDF7D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40BF12C28CLL);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Expand(uint64_t a1, int a2)
{
  char *v4;
  unint64_t i;
  uint64_t v6;
  char *MutableState;
  char *v8;
  unint64_t v9;

  fst::ArcIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::ArcIterator(&v8, *(_QWORD *)(a1 + 160), a2);
  v4 = v8;
  for (i = v9; ; i = ++v9)
  {
    v6 = *((_QWORD *)v4 + 3);
    if (i >= (*((_QWORD *)v4 + 4) - v6) >> 4)
      break;
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, (_OWORD *)(v6 + 16 * i));
    v4 = v8;
  }
  --*((_DWORD *)v4 + 13);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADBDF88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 24))(*(_QWORD *)(a1 + 160));
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeFinal(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 32))(*(_QWORD *)(a1 + 160));
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::~FactorWeightFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D27058;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D27948;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D24220;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFst(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v8[8];
  uint64_t v9;

  v6 = operator new();
  v8[0] = 1;
  v9 = 0;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFstImpl(v6, a2, a3, (uint64_t)v8);
  *a1 = &unk_1E5D232F8;
  a1[1] = v6;
  return a1;
}

void sub_1ADBDFA3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D24220;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D232F8;
  return v4;
}

void sub_1ADBDFC0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADBDFCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADBDFDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::StateIterator(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1ADBDFE58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CacheBaseImpl(a1, a4) = &unk_1E5D1B368;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(_QWORD *)(a1 + 144) = operator new();
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Init(a1);
  return a1;
}

void sub_1ADBDFF10(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

unint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Init(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  unint64_t v7;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 112))(*(_QWORD *)(a1 + 136));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v2)
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      v4 = 0;
    *(_QWORD *)(a1 + 40) = v4;
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = 0;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if ((_DWORD)result == -1)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 0x3FFFFFFF0004, 0);
    result = fst::ProjectProperties(v7, 1);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | result & 0x3FFCFFFF0007;
    if (*(_DWORD *)(a1 + 156) == 2)
      *(_DWORD *)(a1 + 160) = 0;
  }
  return result;
}

void sub_1ADBE0068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0)|| (fst::ProjectProperties(0, 1) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D22A58;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B918;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::VectorCacheStore((_QWORD *)v4, (_BYTE *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 72) = v5 == 0;
  *(_DWORD *)(v4 + 76) = -1;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = *(_BYTE *)a2;
  if (v5 <= 0x1FA0)
    v5 = 8096;
  *(_QWORD *)(v4 + 96) = v5;
  *(_BYTE *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

void sub_1ADBE0224(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D22A58;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::VectorCacheStore(_QWORD *a1, _BYTE *a2)
{
  *(_BYTE *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1ADBE0384(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  std::__list_imp<char *>::clear(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B918;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~FstImpl((uint64_t)a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::~VectorCacheStore(_QWORD *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D1B368;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3)
      MEMORY[0x1AF44D190](v3, 0xC400A2AC0F1);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl((_QWORD *)a1);
}

_QWORD *fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  int *v7;
  int v8;
  int *v9;
  _QWORD *v10;
  int v11;
  _BOOL4 v13;
  float v14;
  fst *v15;
  _QWORD *v16;
  int *v17;
  _QWORD *v18;
  _BOOL4 v20;
  float v21;
  _QWORD *v22;
  int *v23;
  int v25;
  _QWORD v26[3];
  int v27;
  int v28;
  _QWORD v29[3];
  int v30;
  int v31;
  _QWORD v32[3];
  int v33;
  int v34;
  _QWORD v35[3];
  int v36;
  int v37;
  _QWORD v38[3];
  int v39;
  void *v40;
  float v41;
  int v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  _BYTE v47[24];
  int v48;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    v6 = *(_DWORD *)(a1 + 156);
    if (v6 == 1)
    {
      v8 = *(_DWORD *)(a1 + 160);
      if (v8 != a2)
      {
        v20 = v8 != -1 && v8 <= a2;
        v21 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v20));
        v40 = 0;
        v41 = v21;
        v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          v23 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
          v28 = *v23;
          v22 = v29;
          std::list<int>::list(v29, (uint64_t)(v23 + 2));
          v30 = v23[8];
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v28);
        }
        else
        {
          v31 = v46;
          v22 = v32;
          std::list<int>::list(v32, (uint64_t)v47);
          v33 = v48;
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v31);
        }
        std::__list_imp<char *>::clear(v22);
        v18 = v47;
        goto LABEL_35;
      }
      v9 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
      v34 = *v9;
      v10 = v35;
      std::list<int>::list(v35, (uint64_t)(v9 + 2));
      v36 = v9[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v34);
    }
    else
    {
      if (v6 != 2)
      {
        v11 = *(_DWORD *)(a1 + 160);
        v13 = v11 != -1 && v11 <= a2;
        v14 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v13));
        v40 = 0;
        v41 = v14;
        v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(&v40, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(&v40, "ERROR");
          v15 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&v40);
          v16 = (_QWORD *)fst::cerr(v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
          if (v43 < 0)
            operator delete(v40);
          *(_QWORD *)(a1 + 8) |= 4uLL;
        }
        v37 = v46;
        std::list<int>::list(v38, (uint64_t)v47);
        v39 = v48;
        fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v37);
        std::__list_imp<char *>::clear(v38);
        v18 = v47;
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 160) == a2)
        v7 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
      else
        v7 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
      v17 = v7;
      v25 = *v7;
      v10 = v26;
      std::list<int>::list(v26, (uint64_t)(v7 + 2));
      v27 = v17[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v25);
    }
    v18 = v10;
LABEL_35:
    std::__list_imp<char *>::clear(v18);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1ADBE07B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v1 - 105));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  std::__list_imp<char *>::clear((_QWORD *)(v1 - 88));
  _Unwind_Resume(a1);
}

_QWORD *fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()@<X0>(float *a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  float v5;
  int v6;
  uint64_t *v7;
  int *v8;
  _DWORD *v9;
  int *v10;
  int v11;
  int *v12;
  int v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];
  int v18;
  int v19;
  _QWORD v20[3];
  int v21;
  _DWORD v22[8];
  int v23;
  _QWORD v24[3];
  int v25;
  int v26;
  _QWORD v27[3];
  int v28;
  _DWORD v29[9];
  float v30;

  if (*((_DWORD *)a1 + 3) == -1)
  {
    v30 = 0.0;
    v30 = a1[2];
    v29[8] = 2139095040;
    if (v30 == INFINITY)
    {
      v12 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
      v23 = *v12;
      v7 = v24;
      std::list<int>::list(v24, (uint64_t)(v12 + 2));
      v25 = v12[8];
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = v23;
      std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v24);
      *(_DWORD *)(a2 + 40) = v25;
      *(_DWORD *)(a2 + 48) = -1;
      return std::__list_imp<char *>::clear(v7);
    }
    v8 = (int *)fst::StringWeight<int,(fst::StringType)2>::One();
    v26 = *v8;
    v7 = v27;
    std::list<int>::list(v27, (uint64_t)(v8 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v28, &v26, a1[2]);
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = v28;
    v9 = v29;
    std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v29);
    *(_DWORD *)(a2 + 40) = v29[6];
    *(_DWORD *)(a2 + 48) = -1;
    goto LABEL_7;
  }
  v5 = *a1;
  v4 = *((_DWORD *)a1 + 1);
  if (!v4)
  {
    v10 = (int *)fst::StringWeight<int,(fst::StringType)2>::One();
    v19 = *v10;
    v7 = v20;
    std::list<int>::list(v20, (uint64_t)(v10 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v21, &v19, a1[2]);
    v11 = *((_DWORD *)a1 + 3);
    *(float *)a2 = v5;
    *(float *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v21;
    v9 = v22;
    std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v22);
    *(_DWORD *)(a2 + 40) = v22[6];
    *(_DWORD *)(a2 + 48) = v11;
LABEL_7:
    std::__list_imp<char *>::clear(v9);
    return std::__list_imp<char *>::clear(v7);
  }
  fst::StringWeight<int,(fst::StringType)2>::StringWeight((uint64_t)&v14, v4);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v16, &v14, a1[2]);
  v6 = *((_DWORD *)a1 + 3);
  *(float *)a2 = v5;
  *(float *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v16;
  std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v17);
  *(_DWORD *)(a2 + 40) = v18;
  *(_DWORD *)(a2 + 48) = v6;
  std::__list_imp<char *>::clear(v17);
  v7 = &v15;
  return std::__list_imp<char *>::clear(v7);
}

void sub_1ADBE0A38(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  char *MutableState;
  int v5;
  _QWORD *result;
  int v7;
  _QWORD v8[3];
  int v9;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  v5 = a3[8];
  v9 = v5;
  *(_DWORD *)MutableState = v7;
  if (MutableState != (char *)&v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)MutableState + 1, v8[1], (uint64_t)v8);
    v5 = v9;
  }
  *((_DWORD *)MutableState + 8) = v5;
  result = std::__list_imp<char *>::clear(v8);
  *((_DWORD *)MutableState + 20) |= 9u;
  return result;
}

void sub_1ADBE0B24(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::One();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One(void)::one = v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One(void)::one;
}

void sub_1ADBE0BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Zero();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero(void)::zero = v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero(void)::zero;
}

void sub_1ADBE0CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)2>::One()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_QWORD *)(v2 + 8) = v2 + 8;
    *(_QWORD *)(v2 + 16) = v2 + 8;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)v2 = 0;
    fst::StringWeight<int,(fst::StringType)2>::One(void)::one = v2;
  }
  return fst::StringWeight<int,(fst::StringType)2>::One(void)::one;
}

void sub_1ADBE0D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight(uint64_t a1, int *a2, float a3)
{
  int v6;
  _QWORD v7[3];

  v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::ProductWeight(a1, &v6, a3);
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1ADBE0DD0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::ProductWeight(uint64_t a1, int *a2, float a3)
{
  int v6;
  _QWORD v7[3];

  v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  *(_DWORD *)a1 = v6;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)v7);
  *(float *)(a1 + 32) = a3;
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1ADBE0E50(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)2>::StringWeight(uint64_t a1, int a2)
{
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)a1 = 0;
  fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a1, a2);
  return a1;
}

void sub_1ADBE0E98(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  char *MutableState;
  char *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *((_DWORD *)MutableState + 20);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 20) = v5 | 4;
      v6 = *((_QWORD *)MutableState + 8) - *((_QWORD *)MutableState + 7) + *(_QWORD *)(a1 + 112) + 88;
      *(_QWORD *)(a1 + 112) = v6;
      *(_BYTE *)(a1 + 104) = 1;
      if (v6 > *(_QWORD *)(a1 + 96))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  char *result;
  uint64_t v5;
  char *MutableState;

  v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2)
    return *(char **)(a1 + 80);
  if (!*(_BYTE *)(a1 + 72))
    return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 76) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
    *((_DWORD *)MutableState + 20) |= 4u;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::reserve((uint64_t *)MutableState + 7, 0x80uLL);
    return *(char **)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(v5 + 84))
  {
    *(_DWORD *)(v5 + 80) &= ~4u;
    *(_BYTE *)(a1 + 72) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 76) = a2;
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Reset(v5);
  result = *(char **)(a1 + 80);
  *((_DWORD *)result + 20) |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *MutableState;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  fst *v27;
  _QWORD *v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37[2];
  char v38;
  char v39;
  char v40;
  void *__p[2];
  char v42;

  if (*(_BYTE *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0)
        operator delete(__p[0]);
    }
    v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      v18 = *(_DWORD *)(v17 + 16);
      if (v18)
        v19 = v18 - 1;
      else
        v19 = *(_DWORD *)(a1 + 76);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>::GetMutableState(a1, v19);
      v21 = *(_QWORD *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 21))
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v22 = *((_DWORD *)MutableState + 20);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              v23 = *((_QWORD *)MutableState + 8) - *((_QWORD *)MutableState + 7) + 88;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Delete((_QWORD *)a1);
            v17 = *(_QWORD *)(a1 + 56);
            continue;
          }
        }
        else
        {
          v22 = *((_DWORD *)MutableState + 20);
          if ((v22 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      *((_DWORD *)MutableState + 20) &= ~8u;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 112) <= v16)
    {
      v24 = *(_QWORD *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          v25 = *(_QWORD *)(a1 + 96);
          do
          {
            v25 *= 2;
            v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(_QWORD *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        v28 = (_QWORD *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      v30 = (_QWORD *)fst::cerr(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0)
        operator delete(v37[0]);
    }
  }
}

void sub_1ADBE13CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    v14 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v14);
  }
  else
  {
    v8 = *(char **)(v6 + 8 * a2);
    if (v8)
      return v8;
  }
  v8 = (char *)operator new(0x58uLL);
  v9 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  *(_DWORD *)v8 = *v9;
  std::list<int>::list((_QWORD *)v8 + 1, (uint64_t)(v9 + 2));
  *((_DWORD *)v8 + 8) = v9[8];
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = v8;
  if (*(_BYTE *)a1)
  {
    v10 = operator new(0x18uLL);
    v10[4] = a2;
    v12 = *(_QWORD *)(a1 + 32);
    v11 = (_QWORD *)(a1 + 32);
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *v11 = v10;
    ++v11[2];
  }
  return v8;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Reset(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  v3 = result;
  *(_DWORD *)a1 = *(_DWORD *)result;
  if (result != a1)
    result = (uint64_t)std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 8), *(_QWORD *)(result + 16), result + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v3 + 32);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4 != v5)
  {
    do
    {
      v6 = v4 - 56;
      result = (uint64_t)std::__list_imp<char *>::clear((_QWORD *)(v4 - 40));
      v4 = v6;
    }
    while (v6 != v5);
  }
  *(_QWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADBE164C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_QWORD *)(v12 - 56) = *(_QWORD *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((_QWORD *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADBE1770(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::One();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::One(void)::one = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::One(void)::one;
}

void sub_1ADBE182C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)2>::One();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 0;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::One(void)::one = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::One(void)::one;
}

void sub_1ADBE1924(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Zero();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Zero(void)::zero = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Zero(void)::zero;
}

void sub_1ADBE1A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)2>::Zero();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 2139095040;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Zero(void)::zero = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Zero(void)::zero;
}

void sub_1ADBE1B00(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)2>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::StringWeight<int,(fst::StringType)2>::StringWeight(v2, -1);
    fst::StringWeight<int,(fst::StringType)2>::Zero(void)::zero = v2;
  }
  return fst::StringWeight<int,(fst::StringType)2>::Zero(void)::zero;
}

void sub_1ADBE1BC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C40CA22B68ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 64) - *(_QWORD *)(*(_QWORD *)v5 + 56)) >> 3);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v7;
  __int128 *v8;
  int v9;
  int v10;
  uint64_t *MutableState;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  float v24;
  float v25;
  int v26;
  int v27;
  _BOOL4 v29;
  unsigned int v30;
  int v31;
  int v32;
  _BOOL4 v34;
  unsigned int v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  BOOL v44;
  _BOOL4 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  int v51;
  _QWORD v52[3];
  float v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  unint64_t v58;
  float v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  int v67;
  __int128 v68;

  v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetArcs(a1, a2);
    return;
  }
  v5 = *(_QWORD *)(a1 + 136);
  v7 = v4 != -1 && v4 <= a2;
  v58 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v5 + 136))(v5, (a2 - v7), &v54);
  while (1)
  {
    if (!v54)
    {
      if (v58 >= v56)
        goto LABEL_28;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54))
      break;
    if (v54)
    {
      v8 = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)v54 + 32))();
      goto LABEL_16;
    }
LABEL_15:
    v8 = (__int128 *)(v55 + 16 * v58);
LABEL_16:
    v68 = *v8;
    v9 = HIDWORD(v68);
    v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= SHIDWORD(v68))
      v9 = HIDWORD(v68) + 1;
    if (v9 >= *(_DWORD *)(a1 + 164))
      *(_DWORD *)(a1 + 164) = v9 + 1;
    HIDWORD(v68) = v9;
    fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()((float *)&v68, (uint64_t)&v61);
    MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(MutableState, (uint64_t)&v61);
    std::__list_imp<char *>::clear(&v63);
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54);
    else
      ++v58;
  }
  if (v54)
  {
    (*(void (**)(void))(*(_QWORD *)v54 + 8))();
    goto LABEL_30;
  }
LABEL_28:
  if (v57)
    --*v57;
LABEL_30:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
LABEL_52:
    v26 = *(_DWORD *)(a1 + 156);
    if (v26 == 1)
    {
      v32 = *(_DWORD *)(a1 + 160);
      v34 = v32 != -1 && v32 <= a2;
      *(float *)&v35 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v34));
      v54 = 0;
      v55 = v35 | 0xFFFFFFFF00000000;
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()((float *)&v54, (uint64_t)&v61);
      if (v61)
      {
        v36 = *(_DWORD *)(a1 + 160);
        if (v36 == -1)
        {
          v36 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v36;
          *(_DWORD *)(a1 + 164) = v36 + 1;
        }
        v67 = v36;
        v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(v37, (uint64_t)&v61);
      }
      v14 = &v63;
      goto LABEL_96;
    }
    if (v26 != 2)
      goto LABEL_97;
    v27 = *(_DWORD *)(a1 + 160);
    v29 = v27 != -1 && v27 <= a2;
    *(float *)&v30 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v29));
    v54 = 0;
    v55 = v30 | 0xFFFFFFFF00000000;
    fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()((float *)&v54, (uint64_t)&v61);
    if (v61)
    {
      v31 = v62;
    }
    else
    {
      v38 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
      v31 = v62;
      if ((_DWORD)v62)
        v39 = v65 + 1;
      else
        v39 = 0;
      if (*(_DWORD *)v38)
        v40 = *(_QWORD *)(v38 + 24) + 1;
      else
        v40 = 0;
      if (v39 == v40)
      {
        v41 = 0;
        v42 = v64;
        v43 = (uint64_t *)(v38 + 16);
        v44 = (_DWORD)v62 && (_DWORD)v62 == *(_DWORD *)v38;
        v45 = !v44;
        v46 = !v45;
        while (1)
        {
          v47 = *v43;
          if ((v41 & 1) == 0 && !v46)
            break;
          if ((uint64_t *)v42 == &v63)
            goto LABEL_93;
          if (*(_DWORD *)(v42 + 16) != *(_DWORD *)(v47 + 16))
            goto LABEL_94;
          v42 = *(_QWORD *)(v42 + 8);
          v43 = (uint64_t *)(v47 + 8);
          v41 = 1;
        }
        if ((_DWORD)v62)
          goto LABEL_94;
LABEL_93:
        *(float *)&v54 = v66;
        LODWORD(v68) = 0;
        LODWORD(v68) = *(_DWORD *)(v38 + 32);
        if (v66 == *(float *)&v68)
          goto LABEL_95;
      }
    }
LABEL_94:
    v48 = v61;
    v51 = v31;
    std::list<int>::list(v52, (uint64_t)&v63);
    v53 = v66;
    v49 = *(_DWORD *)(a1 + 160);
    v54 = v48;
    LODWORD(v55) = v51;
    std::list<int>::list(&v56, (uint64_t)v52);
    v59 = v53;
    v60 = v49;
    v50 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(v50, (uint64_t)&v54);
    std::__list_imp<char *>::clear(&v56);
    std::__list_imp<char *>::clear(v52);
LABEL_95:
    v14 = &v63;
LABEL_96:
    std::__list_imp<char *>::clear(v14);
    goto LABEL_97;
  }
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final(a1, a2, (uint64_t)&v61);
  v13 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  v14 = &v62;
  if ((_DWORD)v61)
    v15 = v64 + 1;
  else
    v15 = 0;
  if (*(_DWORD *)v13)
    v16 = *(_QWORD *)(v13 + 24) + 1;
  else
    v16 = 0;
  if (v15 != v16)
    goto LABEL_96;
  v17 = 0;
  v18 = v63;
  v19 = (uint64_t *)(v13 + 16);
  if ((_DWORD)v61)
    v20 = (_DWORD)v61 == *(_DWORD *)v13;
  else
    v20 = 0;
  v21 = !v20;
  v22 = v21 ^ 1;
  while (1)
  {
    v23 = *v19;
    if ((v17 & 1) == 0 && !v22)
      break;
    if ((uint64_t *)v18 == &v62)
      goto LABEL_51;
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v23 + 16))
      goto LABEL_96;
    v18 = *(_QWORD *)(v18 + 8);
    v19 = (uint64_t *)(v23 + 8);
    v17 = 1;
  }
  if ((_DWORD)v61)
    goto LABEL_96;
LABEL_51:
  LODWORD(v54) = v65;
  LODWORD(v68) = 0;
  LODWORD(v68) = *(_DWORD *)(v13 + 32);
  v24 = *(float *)&v65;
  v25 = *(float *)&v68;
  std::__list_imp<char *>::clear(&v62);
  if (v24 == v25)
    goto LABEL_52;
LABEL_97:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetArcs(a1, a2);
}

void sub_1ADBE2124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetArcs(uint64_t a1, int a2)
{
  char *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = *((_QWORD *)MutableState + 7);
  v6 = *((_QWORD *)MutableState + 8) - v5;
  if (v6)
  {
    v7 = v6 / 56;
    v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 48);
    do
    {
      v11 = *v9;
      v9 += 14;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 20) |= 0xAu;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 104) && (*(_BYTE *)(a2 + 80) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56) + *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v4;
    if (v4 > *(_QWORD *)(a1 + 96))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GC(a1, (char *)a2, 0, 0.666);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 7;
  v4 = a1[8];
  if (v4 >= a1[9])
  {
    result = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const&>(v3, a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const&>((uint64_t)v3, a2);
    result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

_QWORD *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  result = std::list<int>::list((_QWORD *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1ADBE2384(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[56 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((_QWORD *)v11 + 2, a2 + 16);
  v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADBE24C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 40);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 48);
}

unint64_t fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1ADBE26A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::vector<unsigned int>::pointer end;
  unsigned int *v47;
  std::vector<unsigned int>::pointer begin;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  unsigned int *v54;
  unsigned int v55;
  std::vector<unsigned int>::pointer v56;
  unsigned int *v57;
  std::vector<unsigned int>::pointer v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  unsigned int *v64;
  unsigned int v65;
  unint64_t v66;
  std::vector<unsigned int>::pointer v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  std::vector<unsigned int>::pointer v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t *v83;
  BOOL v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t *v92;
  BOOL v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _DWORD *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  std::vector<unsigned int> v106;
  std::vector<unsigned int> v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  float v116;
  float v117;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v115 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v111 = (uint64_t *)&v115;
      fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>(a1, &v108, 0);
      v8 = v115;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0)
      goto LABEL_211;
    v11 = a2 & 0xC0000;
    v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0)
      v12 = 0x10425A850000;
    v13 = v8 | v12;
    v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0)
      v13 |= 0x100000uLL;
    v115 = v13;
    memset(&v107, 0, sizeof(v107));
    memset(&v106, 0, sizeof(v106));
    v105 = 0;
    v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v103);
    v16 = 0;
LABEL_12:
    if (!v103)
    {
      if ((int)v105 >= v104)
        goto LABEL_203;
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103))
    {
      if (v103)
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v103 + 24))();
LABEL_18:
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17);
        v110 = (uint64_t)&v110;
        v111 = &v110;
        v112 = 0;
        LODWORD(v109) = 0;
        v107.__end_ = v107.__begin_;
        v106.__end_ = v106.__begin_;
        if (v11)
          std::vector<int>::reserve(&v107, v18);
        if (v14)
          std::vector<int>::reserve(&v106, v18);
        v102 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v17, &v98);
        v19 = 1;
        while (1)
        {
          if (v98)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98))
            {
              if (v98)
              {
                (*(void (**)(void))(*(_QWORD *)v98 + 8))();
              }
              else
              {
LABEL_132:
                if (v101)
                  --*v101;
              }
              v15 = a1;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14)
                  goto LABEL_152;
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v106.__end_ - (char *)v106.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  v72 = v106.__end_ - v106.__begin_;
                  if (v72 <= 2)
                    v72 = 2;
                  v73 = v106.__begin_ + 1;
                  v74 = *v106.__begin_;
                  v75 = v72 - 1;
                  while (1)
                  {
                    v77 = *v73++;
                    v76 = v77;
                    if (v77 == v74)
                      break;
                    v74 = v76;
                    if (!--v75)
                      goto LABEL_152;
                  }
                  v115 = v115 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              v66 = v107.__end_ - v107.__begin_;
              if (v66 <= 2)
                v66 = 2;
              v67 = v107.__begin_ + 1;
              v68 = *v107.__begin_;
              v69 = v66 - 1;
              while (1)
              {
                v71 = *v67++;
                v70 = v71;
                if (v71 == v68)
                  break;
                v68 = v70;
                if (!--v69)
                  goto LABEL_141;
              }
              v115 = v115 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14)
                goto LABEL_142;
LABEL_152:
              if (v16 >= 1)
                v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v98, a1, v17);
              v78 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
              if ((_DWORD)v98)
                v79 = (char *)v101 + 1;
              else
                v79 = 0;
              if (*(_DWORD *)v78)
                v80 = *(_QWORD *)(v78 + 24) + 1;
              else
                v80 = 0;
              if (v79 != (char *)v80)
                goto LABEL_174;
              v81 = 0;
              v82 = v100;
              v83 = (uint64_t *)(v78 + 16);
              v84 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v78;
              v85 = !v84;
              while (1)
              {
                v86 = *v83;
                if ((v81 & 1) == 0 && v85)
                  break;
                if ((uint64_t *)v82 == &v99)
                  goto LABEL_173;
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16))
                  goto LABEL_174;
                v82 = *(_QWORD *)(v82 + 8);
                v83 = (uint64_t *)(v86 + 8);
                v81 = 1;
              }
              if ((_DWORD)v98)
                goto LABEL_174;
LABEL_173:
              v117 = *(float *)&v102;
              v116 = 0.0;
              v116 = *(float *)(v78 + 32);
              if (*(float *)&v102 == v116)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 40))(a1, v17, *(float *)&v102) != 1)v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              else
              {
LABEL_174:
                v87 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
                if ((_DWORD)v98)
                  v88 = (char *)v101 + 1;
                else
                  v88 = 0;
                if (*(_DWORD *)v87)
                  v89 = *(_QWORD *)(v87 + 24) + 1;
                else
                  v89 = 0;
                if (v88 != (char *)v89)
                  goto LABEL_194;
                v90 = 0;
                v91 = v100;
                v92 = (uint64_t *)(v87 + 16);
                v93 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v87;
                v94 = !v93;
                while (1)
                {
                  v95 = *v92;
                  if ((v90 & 1) == 0 && v94)
                    break;
                  if ((uint64_t *)v91 == &v99)
                    goto LABEL_193;
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16))
                    goto LABEL_194;
                  v91 = *(_QWORD *)(v91 + 8);
                  v92 = (uint64_t *)(v95 + 8);
                  v90 = 1;
                }
                if ((_DWORD)v98)
                  goto LABEL_194;
LABEL_193:
                v117 = *(float *)&v102;
                v116 = 0.0;
                v116 = *(float *)(v87 + 32);
                if (*(float *)&v102 != v116)
LABEL_194:
                  v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                ++v16;
              }
              std::__list_imp<char *>::clear(&v99);
              std::__list_imp<char *>::clear(&v110);
              if (v103)
                (*(void (**)(uint64_t))(*(_QWORD *)v103 + 32))(v103);
              else
                ++v105;
              goto LABEL_12;
            }
            if (v98)
            {
              v20 = (*(uint64_t (**)(void))(*(_QWORD *)v98 + 32))();
              goto LABEL_29;
            }
          }
          else if (v102 >= v100)
          {
            goto LABEL_132;
          }
          v20 = v99 + 56 * v102;
LABEL_29:
          v21 = *(_DWORD *)v20;
          v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            v115 = v115 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22)
                goto LABEL_35;
              goto LABEL_39;
            }
            v23 = v115;
          }
          else
          {
            v23 = v115 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          v115 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0)
              goto LABEL_40;
            goto LABEL_44;
          }
LABEL_39:
          v115 = v115 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v108)
              v115 = v115 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            if (v22 < SHIDWORD(v108))
              v115 = v115 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
          }
LABEL_44:
          v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
          v25 = *(_DWORD *)(v20 + 8);
          if (v25)
            v26 = *(_QWORD *)(v20 + 32) + 1;
          else
            v26 = 0;
          if (*(_DWORD *)v24)
            v27 = *(_QWORD *)(v24 + 24) + 1;
          else
            v27 = 0;
          if (v26 != v27)
            goto LABEL_64;
          v28 = 0;
          v29 = (uint64_t *)(v20 + 24);
          v30 = (uint64_t *)(v24 + 16);
          v31 = v25 && v25 == *(_DWORD *)v24;
          v32 = !v31;
          while (1)
          {
            v33 = *v29;
            v34 = *v30;
            if ((v28 & 1) == 0 && v32)
              break;
            if (v33 == v20 + 16)
              goto LABEL_63;
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16))
              goto LABEL_64;
            v29 = (uint64_t *)(v33 + 8);
            v30 = (uint64_t *)(v34 + 8);
            v28 = 1;
          }
          if (v25)
            goto LABEL_64;
LABEL_63:
          v117 = 0.0;
          v117 = *(float *)(v20 + 40);
          v116 = 0.0;
          v116 = *(float *)(v24 + 32);
          if (v117 != v116)
          {
LABEL_64:
            v35 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
            v25 = *(_DWORD *)(v20 + 8);
            if (v25)
              v36 = *(_QWORD *)(v20 + 32) + 1;
            else
              v36 = 0;
            if (*(_DWORD *)v35)
              v37 = *(_QWORD *)(v35 + 24) + 1;
            else
              v37 = 0;
            if (v36 != v37)
              goto LABEL_84;
            v38 = 0;
            v39 = (uint64_t *)(v20 + 24);
            v40 = (uint64_t *)(v35 + 16);
            v41 = v25 && v25 == *(_DWORD *)v35;
            v42 = !v41;
            while (1)
            {
              v43 = *v39;
              v44 = *v40;
              if ((v38 & 1) == 0 && v42)
                break;
              if (v43 == v20 + 16)
                goto LABEL_83;
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16))
                goto LABEL_84;
              v39 = (uint64_t *)(v43 + 8);
              v40 = (uint64_t *)(v44 + 8);
              v38 = 1;
            }
            if (v25)
              goto LABEL_84;
LABEL_83:
            v117 = 0.0;
            v117 = *(float *)(v20 + 40);
            v116 = 0.0;
            v116 = *(float *)(v35 + 32);
            if (v117 != v116)
LABEL_84:
              v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17)
            v115 = v115 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          if (v45 != (_DWORD)v17 + 1)
            v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          v108 = *(_QWORD *)v20;
          LODWORD(v109) = v25;
          if (&v108 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v110, *(_QWORD *)(v20 + 24), v20 + 16);
            v45 = *(_DWORD *)(v20 + 48);
          }
          v113 = *(_DWORD *)(v20 + 40);
          v114 = v45;
          if (v11)
          {
            end = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              begin = v107.__begin_;
              v49 = v107.__end_ - v107.__begin_;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_213;
              v51 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v52);
                begin = v107.__begin_;
                end = v107.__end_;
              }
              else
              {
                v53 = 0;
              }
              v54 = (unsigned int *)&v53[4 * v49];
              *v54 = *(_DWORD *)v20;
              v47 = v54 + 1;
              while (end != begin)
              {
                v55 = *--end;
                *--v54 = v55;
              }
              v107.__begin_ = v54;
              v107.__end_ = v47;
              v107.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v107.__end_ = *(_DWORD *)v20;
              v47 = end + 1;
            }
            v107.__end_ = v47;
          }
          if (v14)
          {
            v56 = v106.__end_;
            if (v106.__end_ >= v106.__end_cap_.__value_)
            {
              v58 = v106.__begin_;
              v59 = v106.__end_ - v106.__begin_;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62)
LABEL_213:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v61 = (char *)v106.__end_cap_.__value_ - (char *)v106.__begin_;
              if (((char *)v106.__end_cap_.__value_ - (char *)v106.__begin_) >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v62 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v106.__end_cap_, v62);
                v58 = v106.__begin_;
                v56 = v106.__end_;
              }
              else
              {
                v63 = 0;
              }
              v64 = (unsigned int *)&v63[4 * v59];
              *v64 = *(_DWORD *)(v20 + 4);
              v57 = v64 + 1;
              while (v56 != v58)
              {
                v65 = *--v56;
                *--v64 = v65;
              }
              v106.__begin_ = v64;
              v106.__end_ = v57;
              v106.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *v106.__end_ = *(_DWORD *)(v20 + 4);
              v57 = v56 + 1;
            }
            v106.__end_ = v57;
          }
          if (v98)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v98 + 40))(v98);
            v19 = 0;
          }
          else
          {
            v19 = 0;
            ++v102;
          }
        }
      }
LABEL_17:
      v17 = v105;
      goto LABEL_18;
    }
    if (v103)
      (*(void (**)(void))(*(_QWORD *)v103 + 8))();
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
    {
      v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v106.__begin_)
    {
      v106.__end_ = v106.__begin_;
      operator delete(v106.__begin_);
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    v8 = v115;
LABEL_211:
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1ADBE3128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 48);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 48);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 48);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 48), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 56 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19A80;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1ADBE38B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19A80;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::FinishState(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t result;
  unint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int *i;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  float v32;
  float v33;
  uint64_t v34;
  _QWORD v35[3];
  float v36;
  float v37;
  float v38;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v34);
  v6 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  if ((_DWORD)v34)
    v7 = v35[2] + 1;
  else
    v7 = 0;
  if (*(_DWORD *)v6)
    v8 = *(_QWORD *)(v6 + 24) + 1;
  else
    v8 = 0;
  if (v7 == v8)
  {
    v9 = 0;
    v10 = v35[1];
    v11 = (uint64_t *)(v6 + 16);
    if ((_DWORD)v34)
      v12 = (_DWORD)v34 == *(_DWORD *)v6;
    else
      v12 = 0;
    v13 = !v12;
    v14 = v13 ^ 1;
    while (1)
    {
      v15 = *v11;
      if ((v9 & 1) == 0 && !v14)
        break;
      if ((_QWORD *)v10 == v35)
        goto LABEL_42;
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16))
        goto LABEL_21;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = (uint64_t *)(v15 + 8);
      v9 = 1;
    }
    if ((_DWORD)v34)
      goto LABEL_21;
LABEL_42:
    v38 = v36;
    v37 = 0.0;
    v37 = *(float *)(v6 + 32);
    v32 = v36;
    v33 = v37;
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  v17 = a2;
  *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  v18 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17))
    goto LABEL_36;
  v19 = 0;
  v20 = *(_QWORD **)(a1 + 80);
  v21 = v20[1];
  v22 = **(_QWORD **)(a1 + 16);
  v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    v24 = *v23--;
    v19 |= *(_QWORD *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while ((_DWORD)v24 != a2);
  v25 = *(_QWORD **)a1;
  v26 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v21 - 4); ; --i)
  {
    v28 = *i;
    if (v25)
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    result = v28 >> 6;
    v29 = 1 << v28;
    if ((v19 & 1) == 0)
      break;
    *(_QWORD *)(v22 + 8 * result) |= v29;
    *(_QWORD *)(v26 + 8 * result) &= ~v29;
    if ((_DWORD)v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(_QWORD *)(v26 + 8 * result) &= ~v29;
  if ((_DWORD)v28 != a2)
    goto LABEL_33;
  v20[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    v30 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
      *(_QWORD *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3))
      *(_DWORD *)(v18 + 4 * a3) = v31;
  }
  return result;
}

void sub_1ADBE3BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19A80;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19A80;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19A80;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADBE3C7C(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1AA38;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADBE3D64(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1AA38;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADBE4170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    v10 = v27 + 56 * v28;
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v25 = 0x4000;
    if (v13 > 0x4000)
      v25 = v13;
    *(_QWORD *)(a1 + 8) = v25;
    v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(uint64_t **)(a1 + 16);
    v15 = *(uint64_t **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[7 * v13];
  v16 = v26;
  v17 = v27;
  v19 = v28;
  v18 = v29;
  if (v29)
    ++*v29;
  v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    v24 = v15 - 7;
    *v24 = *(_QWORD *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(_QWORD *)(v23 + 24), v23 + 16);
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 56 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1ADBE43D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D24220;
  if (a3)
  {
    v5 = operator new();
    fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADBE4488(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D1B368;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  *(_QWORD *)(a1 + 144) = operator new();
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Init(a1);
  return a1;
}

void sub_1ADBE4530(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v13[8];
  unint64_t v14;

  *(_QWORD *)a1 = &unk_1E5D22A58;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B918;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v13[0] = *(_BYTE *)(a1 + 104);
  v14 = v7;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::VectorCacheStore((_QWORD *)v6, v13);
  v8 = v14;
  *(_BYTE *)(v6 + 72) = v14 == 0;
  *(_DWORD *)(v6 + 76) = -1;
  *(_QWORD *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 88) = v13[0];
  if (v8 <= 0x1FA0)
    v8 = 8096;
  *(_QWORD *)(v6 + 96) = v8;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v9 = 1;
  else
    v9 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v9;
  if (((a3 ^ 1) & 1) == 0)
  {
    v10 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>::operator=(v6, v10);
    v11 = *(_OWORD *)(v10 + 104);
    *(_OWORD *)(v6 + 88) = *(_OWORD *)(v10 + 88);
    *(_OWORD *)(v6 + 104) = v11;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1ADBE46BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  char *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x58uLL);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CacheState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::list<int>::list((_QWORD *)(a1 + 8), a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*>>((_QWORD *)(a1 + 56), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
  *(_QWORD *)(a1 + 80) = *(unsigned int *)(a2 + 80);
  return a1;
}

void sub_1ADBE4988(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADBE4A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a2 + v7;
      v9 = a4 + v7;
      *(_QWORD *)v9 = *(_QWORD *)(a2 + v7);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + v7 + 8);
      std::list<int>::list((_QWORD *)(a4 + v7 + 16), a2 + v7 + 16);
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(a2 + v7 + 40);
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (v8 + 56 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADBE4AAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 40;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1C9E8;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1ADBE4B40(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  int v6;
  uint64_t v7;
  _QWORD v8[5];

  v1 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    v2 = result;
    if (!*(_BYTE *)(result + 44))
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        if ((result & 1) != 0)
          return result;
        v1 = *(_QWORD *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      v3 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 136) + 32))(*(_QWORD *)(v1 + 136), *(unsigned int *)(v2 + 40));
      v4 = 0;
      v5 = v3;
      v6 = -1;
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()((float *)&v4, (uint64_t)&v7);
      if (v7)
        *(_BYTE *)(v2 + 44) = 1;
      return (uint64_t)std::__list_imp<char *>::clear(v8);
    }
  }
  return result;
}

_QWORD *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1C9E8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1C9E8;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Done_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) & 1) != 0)
      return *(_BYTE *)(a1 + 44) == 0;
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(_BYTE *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Next(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  ++*(_DWORD *)(a1 + 40);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if ((result & 1) == 0)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
        return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(a1);
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 0;
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Reset(uint64_t a1)
{
  uint64_t v2;

  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  else
    *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
}

_QWORD *fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DefaultDeterminizeFilter<fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  *a1 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  if (a3)
  {
    if (*a3)
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 8))(*a3);
    MEMORY[0x1AF44D190](a3, 0x20C4093837F09);
  }
  return a1;
}

_QWORD *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DeterminizeFst<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  void *__p[2];
  char v18;
  char v19;

  *a1 = &unk_1E5D1E248;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1[1] + 8) |= 4uLL;
  }
  v13 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v13, a2, a3, a4, a5);
  v14 = (_DWORD *)a1[1];
  if (v14)
  {
    v15 = v14[14] - 1;
    v14[14] = v15;
    if (!v15)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  }
  a1[1] = v13;
  return a1;
}

void sub_1ADBE502C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  _DWORD *v20;
  int v21;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D27948;
  v20 = (_DWORD *)v18[1];
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D27948;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DeterminizeFst(v4, a1, a2);
  return v4;
}

void sub_1ADBE524C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D20328;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C528;
  *a2 = v4;
  return result;
}

void sub_1ADBE5308(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  fst *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v21;
  char v22;

  v10 = fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DeterminizeFstImplBase<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>((uint64_t)a1, a2, a5);
  *(_QWORD *)v10 = &unk_1E5D20B30;
  *(_DWORD *)(v10 + 144) = *(_DWORD *)(a5 + 16);
  *(_QWORD *)(v10 + 152) = a3;
  *(_QWORD *)(v10 + 160) = a4;
  v11 = *(_QWORD **)(a5 + 32);
  if (!v11)
  {
    v11 = (_QWORD *)operator new();
    *v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  }
  a1[22] = v11;
  v12 = *(_QWORD **)(a5 + 40);
  if (!v12)
  {
    v12 = (_QWORD *)operator new();
    *v12 = 0;
    v12[2] = v12 + 1;
    v12[3] = v12 + 1;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v12 + 4), 0, v12 + 2, v12 + 3);
    v12[11] = 0;
    v12[12] = 0;
    v12[13] = 0;
  }
  a1[23] = v12;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)&v22, (uint64_t)__p);
    v14 = (_QWORD *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"DeterminizeFst: argument not an acceptor", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v22);
    if (v21 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  v15 = (uint64_t *)a1[20];
  if (v15)
  {
    v17 = *v15;
    v16 = v15[1];
    if (v16 != *v15)
    {
      do
      {
        v18 = v16 - 40;
        std::__list_imp<char *>::clear((_QWORD *)(v16 - 32));
        v16 = v18;
      }
      while (v18 != v17);
    }
    v15[1] = v17;
  }
  return a1;
}

void sub_1ADBE5504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D22128;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DeterminizeFstImplBase<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CacheBaseImpl(a1, a3) = &unk_1E5D22128;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v8 = *(_DWORD *)(a3 + 24) != 1 || *(_BYTE *)(a3 + 28) != 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::DeterminizeProperties(v6, *(_DWORD *)(a3 + 20) != 0, v8) & 0x3FFFFFFF0004;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 40) = v11;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v13 = *(_QWORD *)(a1 + 48);
  if (v13 != v12)
  {
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v12)
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    else
      v14 = 0;
    *(_QWORD *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_1ADBE573C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v2, a1);
  return v2;
}

void sub_1ADBE5848(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::Expand(_QWORD *a1, int a2)
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD **v6;
  BOOL v7;
  _QWORD **v8;
  _QWORD *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  v4 = v8;
  if (v8 != v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, (uint64_t)(v4 + 5));
      v5 = v4[1];
      if (v5)
      {
        do
        {
          v6 = (_QWORD **)v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD **)v4[2];
          v7 = *v6 == v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1ADBE5920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  int v2;
  int v3;
  int *v4;
  uint64_t v5;
  uint64_t State;
  int v8;
  _QWORD v9[3];
  int v10;
  _DWORD v11[4];
  _QWORD v12[3];
  int v13;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if (v2 == -1)
    return 0xFFFFFFFFLL;
  v3 = v2;
  v4 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
  v8 = *v4;
  std::list<int>::list(v9, (uint64_t)(v4 + 2));
  v10 = v4[8];
  v11[0] = v3;
  v11[2] = v8;
  std::list<int>::list(v12, (uint64_t)v9);
  v13 = v10;
  std::__list_imp<char *>::clear(v9);
  v5 = operator new();
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = -1;
  *(_QWORD *)v5 = std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> const&>(v5, 0, v11);
  *(_BYTE *)(v5 + 8) = 0;
  State = fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::FindState(a1, (uint64_t **)v5);
  std::__list_imp<char *>::clear(v12);
  return State;
}

void sub_1ADBE5A40(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X8>)
{
  uint64_t **v5;
  int *v6;
  _QWORD *result;
  float *v8;
  uint64_t *i;
  float v10;
  float v11;
  BOOL v12;
  float v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int *v16;
  _QWORD *v17;
  float *v18;
  float v19;
  float v20;
  BOOL v21;
  float v22;
  int v23;
  _QWORD v24[3];
  float v25;
  uint64_t v26;
  uint64_t v27[3];
  float v28;
  char v29[8];
  _QWORD v30[3];
  float v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  int v36;
  uint64_t v37[4];

  v5 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 88) + 8 * a2);
  v6 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  *a3 = *v6;
  result = std::list<int>::list((_QWORD *)a3 + 1, (uint64_t)(v6 + 2));
  a3[8] = v6[8];
  v8 = (float *)(a3 + 8);
  for (i = *v5; i; i = (uint64_t *)*i)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v26, *(_QWORD *)(a1 + 136), *((unsigned int *)i + 2));
    fst::Times<int,(fst::StringType)2>((int *)i + 4, (uint64_t)&v26, (uint64_t)&v36);
    v10 = *((float *)i + 12);
    v11 = NAN;
    if (v10 != -INFINITY)
    {
      v11 = NAN;
      if (v28 != -INFINITY)
      {
        v11 = INFINITY;
        v12 = v28 == INFINITY || v10 == INFINITY;
        v13 = v10 + v28;
        if (!v12)
          v11 = v13;
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)v29, &v36, v11);
    std::__list_imp<char *>::clear(v37);
    v14 = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v36, (float *)a3 + 8, &v31);
    v15 = v14;
    if (v14)
      v16 = a3;
    else
      v16 = (int *)v29;
    v32 = *v16;
    if (v14)
      v17 = a3 + 2;
    else
      v17 = v30;
    std::list<int>::list(&v33, (uint64_t)v17);
    if (v15)
      v18 = (float *)a3;
    else
      v18 = (float *)v29;
    v19 = v18[8];
    v35 = v19;
    *a3 = v32;
    if (&v32 != a3)
    {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)a3 + 1, v34, (uint64_t)&v33);
      v19 = v35;
    }
    *((float *)a3 + 8) = v19;
    std::__list_imp<char *>::clear(&v33);
    std::__list_imp<char *>::clear(v30);
    std::__list_imp<char *>::clear(v27);
    v23 = *a3;
    std::list<int>::list(v24, (uint64_t)(a3 + 2));
    v25 = *v8;
    v32 = v23;
    std::list<int>::list(&v33, (uint64_t)v24);
    v20 = v25;
    v35 = v25;
    *a3 = v32;
    if (&v32 != a3)
    {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)a3 + 1, v34, (uint64_t)&v33);
      v20 = v35;
    }
    *((float *)a3 + 8) = v20;
    std::__list_imp<char *>::clear(&v33);
    result = std::__list_imp<char *>::clear(v24);
    if (*a3)
    {
      if (*((_QWORD *)a3 + 3))
        v21 = 0;
      else
        v21 = *a3 == -2;
      if (!v21)
      {
        v22 = *((float *)a3 + 8);
        if (v22 < -INFINITY || v22 > -INFINITY)
          continue;
      }
    }
    else if (*v8 < -INFINITY || *v8 > -INFINITY)
    {
      continue;
    }
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return result;
}

void sub_1ADBE5D08(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  if (a2)
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  return a1;
}

void sub_1ADBE5DD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADBE5E40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D20B30;
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = a1[23];
  if (v3)
  {
    v4 = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1AF44D190](v4, 0x10E0C400200E20DLL);
  }
  *a1 = &unk_1E5D22128;
  v5 = a1[17];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + 88;
  v2 = *(_QWORD **)(a1 + 88);
  v3 = *(_QWORD *)(v4 + 8);
  if ((int)((unint64_t)(v3 - (_QWORD)v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::clear((_QWORD **)v2[v5]);
        MEMORY[0x1AF44D190](v6, 0x1020C405F07FB98);
        v2 = *(_QWORD **)(a1 + 88);
        v3 = *(_QWORD *)(a1 + 96);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 32);
  return a1;
}

void std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::clear(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  if (*a1)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__list_imp<char *>::clear(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  *a1 = 0;
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  size_t *v8;
  size_t v9;
  fst *v10;
  _QWORD *v11;
  void *__p[2];
  char v14;
  char v15;

  v4 = fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DeterminizeFstImplBase((uint64_t)a1, a2);
  *(_QWORD *)v4 = &unk_1E5D20B30;
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  v5 = (_QWORD *)operator new();
  if (a1[17])
    v6 = a1[17];
  else
    v6 = **(_QWORD **)(a2 + 176);
  *v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 88))(v6, 0);
  a1[22] = v5;
  v7 = (_QWORD *)operator new();
  v8 = *(size_t **)(a2 + 184);
  v9 = *v8;
  *v7 = *v8;
  fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable((uint64_t)(v7 + 1), v9);
  a1[23] = v7;
  if (*(_QWORD *)(a2 + 160))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFsaImpl: cannot copy with out_dist vector", 52);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  return a1;
}

void sub_1ADBE6138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D22128;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D22128;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v4)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 40) = v6;
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *(_QWORD *)(a1 + 48) = v9;
  }
  return a1;
}

void sub_1ADBE6320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::GetLabelMap(_QWORD *a1, int a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  _QWORD v21[3];
  int v22;
  _DWORD v23[4];
  _QWORD v24[3];
  int v25;
  _QWORD v26[3];
  _DWORD *v27;
  unint64_t v28;
  int v29;
  uint64_t v30[4];

  v5 = **(uint64_t ***)(*(_QWORD *)(a1[23] + 88) + 8 * a2);
  if (!v5)
    goto LABEL_24;
  do
  {
    v6 = *((unsigned int *)v5 + 2);
    v7 = a1[17];
    v28 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, v6, v26);
    while (1)
    {
      if (!v26[0])
      {
        if (v28 >= v26[2])
          goto LABEL_21;
LABEL_8:
        v8 = v26[1] + 56 * v28;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v26[0] + 24))(v26[0]))
        break;
      if (!v26[0])
        goto LABEL_8;
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v26[0] + 32))();
LABEL_9:
      v9 = *(_DWORD *)(v8 + 48);
      fst::Times<int,(fst::StringType)2>((int *)v5 + 4, v8 + 8, (uint64_t)&v29);
      v10 = *((float *)v5 + 12);
      v11 = NAN;
      if (v10 != -INFINITY)
      {
        v12 = *(float *)(v8 + 40);
        v11 = NAN;
        if (v12 != -INFINITY)
        {
          v11 = INFINITY;
          v13 = v12 == INFINITY || v10 == INFINITY;
          v14 = v10 + v12;
          if (!v13)
            v11 = v14;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v20, &v29, v11);
      std::__list_imp<char *>::clear(v30);
      v23[0] = v9;
      v23[2] = v20;
      std::list<int>::list(v24, (uint64_t)v21);
      v25 = v22;
      std::__list_imp<char *>::clear(v21);
      fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::FilterArc(a1[22], (_DWORD *)v8, (uint64_t)(v5 + 1), v23, (uint64_t)a3);
      std::__list_imp<char *>::clear(v24);
      if (v26[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v26[0] + 40))(v26[0]);
      else
        ++v28;
    }
    if (v26[0])
    {
      (*(void (**)(void))(*(_QWORD *)v26[0] + 8))();
      goto LABEL_23;
    }
LABEL_21:
    if (v27)
      --*v27;
LABEL_23:
    v5 = (uint64_t *)*v5;
  }
  while (v5);
LABEL_24:
  v17 = (_QWORD *)*a3;
  v16 = a3 + 1;
  v15 = v17;
  if (v17 != v16)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v15 + 5));
      v18 = (_QWORD *)v15[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v15[2];
          v13 = *v19 == (_QWORD)v15;
          v15 = v19;
        }
        while (!v13);
      }
      v15 = v19;
    }
    while (v19 != v16);
  }
}

void sub_1ADBE65B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_DWORD *a24)
{
  if (a21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  }
  else if (a24)
  {
    --*a24;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *MutableState;
  _DWORD v8[4];
  uint64_t v9[3];
  int v10;
  int State;

  v9[0] = (uint64_t)v9;
  v9[1] = (uint64_t)v9;
  v9[2] = 0;
  v8[0] = *(_DWORD *)a3;
  v8[1] = v8[0];
  v8[2] = *(_DWORD *)(a3 + 8);
  if (v8 != (_DWORD *)a3)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v9, *(_QWORD *)(a3 + 24), a3 + 16);
  v10 = *(_DWORD *)(a3 + 40);
  State = fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::FindState(a1, *(uint64_t ***)(a3 + 48));
  MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(MutableState, (uint64_t)v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1ADBE66BC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::FilterArc(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  _DWORD *v11;
  int v12;
  _QWORD v13[3];
  int v14;
  uint64_t v15;

  v11 = a2;
  v7 = std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v11);
  if (*((_DWORD *)v7 + 10) == -1)
  {
    fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::DeterminizeArc((uint64_t)&v11, a2);
    v8 = v12;
    *((_DWORD *)v7 + 10) = (_DWORD)v11;
    *((_DWORD *)v7 + 12) = v8;
    if (v7 + 5 != (uint64_t *)&v11)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v7 + 7, v13[1], (uint64_t)v13);
    *((_DWORD *)v7 + 20) = v14;
    v7[11] = v15;
    std::__list_imp<char *>::clear(v13);
    *(_BYTE *)(v7[11] + 8) = 0;
  }
  v9 = (uint64_t *)v7[11];
  *v9 = (uint64_t)std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> const&>((uint64_t)v9, *v9, a4);
  return 1;
}

void sub_1ADBE67B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v4;
  uint64_t *v5;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  int *v11;
  float *v12;
  _BOOL4 v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *i;
  int *v19;
  float v20;
  float v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30[3];

  v2 = a2;
  v4 = *(uint64_t ***)(a2 + 48);
  std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v4);
  v5 = *v4;
  if (*v4)
  {
    v22 = v4;
    v23 = a1;
    v6 = (int *)(v2 + 8);
    v7 = (uint64_t *)(v2 + 16);
    v8 = *v4;
    v24 = v2;
    do
    {
      v9 = v8 + 2;
      fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()((uint64_t)v6, (uint64_t)(v8 + 2), (uint64_t)&v25);
      *v6 = v25;
      if (v6 != &v25)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v7, v27, (uint64_t)&v26);
      *(_DWORD *)(v2 + 40) = v28;
      std::__list_imp<char *>::clear(&v26);
      if (v5 == v8 || *((_DWORD *)v8 + 2) != *((_DWORD *)v5 + 2))
      {
        v15 = (uint64_t *)*v8;
        v5 = v8;
      }
      else
      {
        v10 = v7;
        v11 = (int *)(v5 + 2);
        v12 = (float *)(v5 + 6);
        v13 = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v29, (float *)v5 + 12, (float *)v8 + 12);
        if (v13)
          v14 = v5;
        else
          v14 = v8;
        if (v13)
          v9 = v5 + 2;
        v25 = *((_DWORD *)v14 + 4);
        std::list<int>::list(&v26, (uint64_t)(v9 + 1));
        v28 = *((_DWORD *)v9 + 8);
        *((_DWORD *)v5 + 4) = v25;
        if (v11 != &v25)
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v5 + 3, v27, (uint64_t)&v26);
        *(_DWORD *)v12 = v28;
        std::__list_imp<char *>::clear(&v26);
        if (*v11 == -2 && !v5[5] || *v12 >= -INFINITY && *v12 <= -INFINITY)
          *(_QWORD *)(v23 + 8) |= 4uLL;
        v15 = (uint64_t *)*v8;
        v16 = (_QWORD *)*v5;
        v17 = (_QWORD *)(*v5 + 24);
        *v5 = *(_QWORD *)*v5;
        std::__list_imp<char *>::clear(v17);
        operator delete(v16);
        v7 = v10;
        v2 = v24;
      }
      v8 = v15;
    }
    while (v15);
    for (i = *v22; i; i = (uint64_t *)*i)
    {
      v19 = (int *)(i + 2);
      fst::DivideLeft<int,(fst::StringType)2>((int *)i + 4, v6, (uint64_t)&v29);
      v20 = *((float *)i + 12);
      v21 = NAN;
      if (v20 != -INFINITY)
      {
        if ((*(_DWORD *)(v2 + 40) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v21 = INFINITY;
          if (v20 != INFINITY)
            v21 = v20 - *(float *)(v2 + 40);
        }
        else
        {
          v21 = NAN;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v25, &v29, v21);
      std::__list_imp<char *>::clear(v30);
      *v19 = v25;
      if (v19 != &v25)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(i + 3, v27, (uint64_t)&v26);
      *((_DWORD *)i + 12) = v28;
      std::__list_imp<char *>::clear(&v26);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Quantize((float *)i + 4, (uint64_t)&v25, *(float *)(v23 + 144));
      *((_DWORD *)i + 4) = v25;
      if (v19 != &v25)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(i + 3, v27, (uint64_t)&v26);
      *((_DWORD *)i + 12) = v28;
      std::__list_imp<char *>::clear(&v26);
    }
  }
}

void sub_1ADBE6AB4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::Times<int,(fst::StringType)2>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t *v27;
  BOOL v28;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *result;
  char v34;
  uint64_t *i;
  uint64_t v36;
  char v37;
  int v38;

  if (*a1 && (*a1 == -2 ? (v6 = *((_QWORD *)a1 + 3) == 0) : (v6 = 0), v6)
    || *(_DWORD *)a2 && (*(_DWORD *)a2 == -2 ? (v7 = *(_QWORD *)(a2 + 24) == 0) : (v7 = 0), v7))
  {
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::NoWeight();
  }
  else
  {
    v8 = fst::StringWeight<int,(fst::StringType)2>::Zero();
    v9 = *a1;
    if (*a1)
      v10 = *((_QWORD *)a1 + 3) + 1;
    else
      v10 = 0;
    if (*(_DWORD *)v8)
      v11 = *(_QWORD *)(v8 + 24) + 1;
    else
      v11 = 0;
    if (v10 != v11)
      goto LABEL_32;
    v12 = 0;
    v13 = (uint64_t *)(a1 + 4);
    v14 = (uint64_t *)(v8 + 16);
    v15 = v9 && v9 == *(_DWORD *)v8;
    v16 = !v15;
    v17 = !v16;
    while (1)
    {
      v18 = *v13;
      v19 = *v14;
      if ((v12 & 1) == 0 && !v17)
        break;
      if ((int *)v18 == a1 + 2)
        goto LABEL_61;
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16))
        goto LABEL_32;
      v13 = (uint64_t *)(v18 + 8);
      v14 = (uint64_t *)(v19 + 8);
      v12 = 1;
    }
    if (v9)
    {
LABEL_32:
      v21 = fst::StringWeight<int,(fst::StringType)2>::Zero();
      v22 = *(_DWORD *)a2;
      if (*(_DWORD *)a2)
        v23 = *(_QWORD *)(a2 + 24) + 1;
      else
        v23 = 0;
      if (*(_DWORD *)v21)
        v24 = *(_QWORD *)(v21 + 24) + 1;
      else
        v24 = 0;
      if (v23 != v24)
        goto LABEL_52;
      v25 = 0;
      v26 = (uint64_t *)(a2 + 16);
      v27 = (uint64_t *)(v21 + 16);
      v28 = v22 && v22 == *(_DWORD *)v21;
      v29 = !v28;
      v30 = !v29;
      while (1)
      {
        v31 = *v26;
        v32 = *v27;
        if ((v25 & 1) == 0 && !v30)
          break;
        if (v31 == a2 + 8)
          goto LABEL_61;
        if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16))
          goto LABEL_52;
        v26 = (uint64_t *)(v31 + 8);
        v27 = (uint64_t *)(v32 + 8);
        v25 = 1;
      }
      if (v22)
      {
LABEL_52:
        *(_DWORD *)a3 = *a1;
        result = std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(a1 + 2));
        v34 = 0;
        for (i = (uint64_t *)(a2 + 16); ; i = (uint64_t *)(v36 + 8))
        {
          v36 = *i;
          do
          {
            v37 = v34;
            if ((v34 & 1) != 0)
            {
              if (v36 == a2 + 8)
                return result;
              v38 = *(_DWORD *)(v36 + 16);
            }
            else
            {
              v38 = *(_DWORD *)a2;
              if (!*(_DWORD *)a2)
                return result;
            }
            result = fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a3, v38);
            v34 = 1;
          }
          while ((v37 & 1) == 0);
        }
      }
    }
LABEL_61:
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::Zero();
  }
  *(_DWORD *)a3 = *v20;
  return std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v20 + 2));
}

void sub_1ADBE6CE4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)2>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::StringWeight<int,(fst::StringType)2>::StringWeight(v2, -2);
    fst::StringWeight<int,(fst::StringType)2>::NoWeight(void)::no_weight = v2;
  }
  return fst::StringWeight<int,(fst::StringType)2>::NoWeight(void)::no_weight;
}

void sub_1ADBE6D70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C40CA22B68ALL);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v5;
  uint64_t **v6;
  int v7;
  uint64_t *v8;
  int v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t *)v5;
        v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = **a2;
  v6[10] = -1;
  v7 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  v6[12] = *v7;
  result = std::list<int>::list((_QWORD *)v6 + 7, (uint64_t)(v7 + 2));
  v6[20] = v7[8];
  *((_QWORD *)v6 + 11) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADBE6EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__list_imp<char *>::clear(v2 + 7);
    operator delete(v2);
  }
}

uint64_t fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_DWORD *)a1 = *a2;
  v3 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  *(_DWORD *)(a1 + 8) = *v3;
  std::list<int>::list((_QWORD *)(a1 + 16), (uint64_t)(v3 + 2));
  *(_DWORD *)(a1 + 40) = v3[8];
  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = -1;
  *(_QWORD *)(a1 + 48) = v4;
  return a1;
}

void sub_1ADBE6FD0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_DWORD *std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>> const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v5;

  v5 = operator new(0x38uLL);
  *(_QWORD *)v5 = a2;
  v5[2] = *a3;
  v5[4] = a3[2];
  std::list<int>::list((_QWORD *)v5 + 3, (uint64_t)(a3 + 4));
  v5[12] = a3[10];
  return v5;
}

void sub_1ADBE7044(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  int v10;
  _QWORD v11[3];

  fst::LabelCommonDivisor<int,(fst::StringType)2>::operator()((int *)a1, a2, (uint64_t)&v10);
  v6 = *(float *)(a1 + 32);
  v7 = NAN;
  if (v6 != -INFINITY)
  {
    v8 = *(float *)(a2 + 32);
    v7 = NAN;
    if (v8 != -INFINITY)
    {
      if (v6 >= v8)
        v7 = *(float *)(a2 + 32);
      else
        v7 = *(float *)(a1 + 32);
    }
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight(a3, &v10, v7);
  return std::__list_imp<char *>::clear(v11);
}

void sub_1ADBE70F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int v5;
  _QWORD v6[3];
  int v7;

  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1ADBE7160(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::LabelCommonDivisor<int,(fst::StringType)2>::operator()@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  BOOL v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;

  v4 = (uint64_t *)(a1 + 4);
  if (!*a1)
    goto LABEL_51;
  v7 = *((_QWORD *)a1 + 3) == -1 || *(_DWORD *)a2 == 0;
  if (v7 || *(_QWORD *)(a2 + 24) == -1)
    goto LABEL_51;
  v9 = fst::StringWeight<int,(fst::StringType)2>::Zero();
  v10 = *a1;
  if (*a1)
    v11 = *((_QWORD *)a1 + 3) + 1;
  else
    v11 = 0;
  if (*(_DWORD *)v9)
    v12 = *(_QWORD *)(v9 + 24) + 1;
  else
    v12 = 0;
  if (v11 == v12)
  {
    v13 = 0;
    v14 = (uint64_t *)(v9 + 16);
    if (v10)
      v15 = v10 == *(_DWORD *)v9;
    else
      v15 = 0;
    v16 = !v15;
    v17 = v16 ^ 1;
    while (1)
    {
      v18 = *v4;
      v19 = *v14;
      if ((v13 & 1) == 0 && !v17)
        break;
      if ((int *)v18 == a1 + 2)
        goto LABEL_48;
      if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16))
        goto LABEL_29;
      v4 = (uint64_t *)(v18 + 8);
      v14 = (uint64_t *)(v19 + 8);
      v13 = 1;
    }
    if (v10)
      goto LABEL_29;
LABEL_48:
    v21 = *(_DWORD *)a2;
    return (_QWORD *)fst::StringWeight<int,(fst::StringType)2>::StringWeight(a3, v21);
  }
LABEL_29:
  v20 = fst::StringWeight<int,(fst::StringType)2>::Zero();
  v21 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
    v22 = *(_QWORD *)(a2 + 24) + 1;
  else
    v22 = 0;
  if (*(_DWORD *)v20)
    v23 = *(_QWORD *)(v20 + 24) + 1;
  else
    v23 = 0;
  if (v22 == v23)
  {
    v24 = 0;
    v25 = (uint64_t *)(a2 + 16);
    v26 = (uint64_t *)(v20 + 16);
    if (v21)
      v27 = v21 == *(_DWORD *)v20;
    else
      v27 = 0;
    v28 = !v27;
    v29 = v28 ^ 1;
    while (1)
    {
      v30 = *v25;
      v31 = *v26;
      if ((v24 & 1) == 0 && !v29)
        break;
      if (v30 == a2 + 8)
        goto LABEL_52;
      if (*(_DWORD *)(v30 + 16) != *(_DWORD *)(v31 + 16))
        goto LABEL_50;
      v25 = (uint64_t *)(v30 + 8);
      v26 = (uint64_t *)(v31 + 8);
      v24 = 1;
    }
    if (v21)
      goto LABEL_50;
LABEL_52:
    v21 = *a1;
    return (_QWORD *)fst::StringWeight<int,(fst::StringType)2>::StringWeight(a3, v21);
  }
LABEL_50:
  if (*a1 != v21)
  {
LABEL_51:
    v32 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::One();
    *(_DWORD *)a3 = *v32;
    return std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v32 + 2));
  }
  return (_QWORD *)fst::StringWeight<int,(fst::StringType)2>::StringWeight(a3, v21);
}

_QWORD *fst::Divide<int,(fst::StringType)2>@<X0>(int *a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  fst *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  void *__p[2];
  char v18;
  char v19;

  if (a3 == 1)
    return fst::DivideRight<int,(fst::StringType)2>(a1, a2, a4);
  if (!a3)
    return fst::DivideLeft<int,(fst::StringType)2>(a1, a2, a4);
  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v6 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
  v7 = (_QWORD *)fst::cerr(v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"StringWeight::Divide: ", 22);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"only explicit left or right division is defined ", 48);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"for the ", 8);
  v11 = fst::StringWeight<int,(fst::StringType)2>::Type();
  v12 = *(char *)(v11 + 23);
  if (v12 >= 0)
    v13 = v11;
  else
    v13 = *(_QWORD *)v11;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v11 + 23);
  else
    v14 = *(_QWORD *)(v11 + 8);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" semiring", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
  if (v18 < 0)
    operator delete(__p[0]);
  v16 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::NoWeight();
  *(_DWORD *)a4 = *v16;
  return std::list<int>::list((_QWORD *)(a4 + 8), (uint64_t)(v16 + 2));
}

void sub_1ADBE7468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::DivideLeft<int,(fst::StringType)2>@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _QWORD *result;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  int *v35;

  if (*a1 && (*a1 == -2 ? (v6 = *((_QWORD *)a1 + 3) == 0) : (v6 = 0), v6)
    || *a2 && (*a2 == -2 ? (v7 = *((_QWORD *)a2 + 3) == 0) : (v7 = 0), v7))
  {
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::NoWeight();
    goto LABEL_31;
  }
  v8 = fst::StringWeight<int,(fst::StringType)2>::Zero();
  v9 = *a2;
  if (*a2)
    v10 = *((_QWORD *)a2 + 3) + 1;
  else
    v10 = 0;
  if (*(_DWORD *)v8)
    v11 = *(_QWORD *)(v8 + 24) + 1;
  else
    v11 = 0;
  if (v10 != v11)
  {
LABEL_33:
    result = (_QWORD *)fst::StringWeight<int,(fst::StringType)2>::Zero();
    v22 = *a1;
    if (*a1)
      v23 = *((_QWORD *)a1 + 3) + 1;
    else
      v23 = 0;
    if (*(_DWORD *)result)
      v24 = result[3] + 1;
    else
      v24 = 0;
    if (v23 != v24)
    {
      v26 = *((_QWORD *)a1 + 2);
LABEL_53:
      v33 = 0;
      v34 = 0;
      *(_QWORD *)(a3 + 8) = a3 + 8;
      *(_QWORD *)(a3 + 16) = a3 + 8;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)a3 = 0;
      if (*a1)
      {
        do
        {
          if (!*a2 || *((_QWORD *)a2 + 3) + 1 <= v33)
          {
            v35 = (int *)(v26 + 16);
            if ((v34 & 1) == 0)
              v35 = a1;
            result = fst::StringWeight<int,(fst::StringType)1>::PushBack((_DWORD *)a3, *v35);
          }
          if ((v34 & 1) != 0)
            v26 = *(_QWORD *)(v26 + 8);
          ++v33;
          v34 = 1;
        }
        while ((int *)v26 != a1 + 2);
      }
      return result;
    }
    v25 = 0;
    v26 = *((_QWORD *)a1 + 2);
    v27 = result + 2;
    if (v22)
      v28 = v22 == *(_DWORD *)result;
    else
      v28 = 0;
    v29 = !v28;
    v30 = v29 ^ 1;
    v31 = *((_QWORD *)a1 + 2);
    while (1)
    {
      v32 = *v27;
      if ((v25 & 1) == 0 && !v30)
        break;
      if ((int *)v31 == a1 + 2)
        goto LABEL_68;
      if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16))
        goto LABEL_53;
      v31 = *(_QWORD *)(v31 + 8);
      v27 = (uint64_t *)(v32 + 8);
      v25 = 1;
    }
    if (v22)
      goto LABEL_53;
LABEL_68:
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::Zero();
LABEL_31:
    *(_DWORD *)a3 = *v20;
    return std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v20 + 2));
  }
  v12 = 0;
  v13 = (uint64_t *)(a2 + 4);
  v14 = (uint64_t *)(v8 + 16);
  if (v9)
    v15 = v9 == *(_DWORD *)v8;
  else
    v15 = 0;
  v16 = !v15;
  v17 = v16 ^ 1;
  while (1)
  {
    v18 = *v13;
    v19 = *v14;
    if ((v12 & 1) == 0 && !v17)
      break;
    if ((int *)v18 == a2 + 2)
      return (_QWORD *)fst::StringWeight<int,(fst::StringType)2>::StringWeight(a3, -2);
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16))
      goto LABEL_33;
    v13 = (uint64_t *)(v18 + 8);
    v14 = (uint64_t *)(v19 + 8);
    v12 = 1;
  }
  if (v9)
    goto LABEL_33;
  return (_QWORD *)fst::StringWeight<int,(fst::StringType)2>::StringWeight(a3, -2);
}

void sub_1ADBE76F0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::DivideRight<int,(fst::StringType)2>@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _QWORD *result;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t *v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int *v35;

  if (*a1 && (*a1 == -2 ? (v6 = *((_QWORD *)a1 + 3) == 0) : (v6 = 0), v6)
    || *a2 && (*a2 == -2 ? (v7 = *((_QWORD *)a2 + 3) == 0) : (v7 = 0), v7))
  {
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::NoWeight();
    goto LABEL_31;
  }
  v8 = fst::StringWeight<int,(fst::StringType)2>::Zero();
  v9 = *a2;
  if (*a2)
    v10 = *((_QWORD *)a2 + 3) + 1;
  else
    v10 = 0;
  if (*(_DWORD *)v8)
    v11 = *(_QWORD *)(v8 + 24) + 1;
  else
    v11 = 0;
  if (v10 != v11)
  {
LABEL_33:
    result = (_QWORD *)fst::StringWeight<int,(fst::StringType)2>::Zero();
    v22 = *a1;
    if (*a1)
      v23 = *((_QWORD *)a1 + 3) + 1;
    else
      v23 = 0;
    if (*(_DWORD *)result)
      v24 = result[3] + 1;
    else
      v24 = 0;
    if (v23 != v24)
    {
LABEL_52:
      *(_QWORD *)(a3 + 8) = a3 + 8;
      *(_QWORD *)(a3 + 16) = a3 + 8;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)a3 = 0;
      if (v22)
      {
LABEL_57:
        v33 = 0;
        v34 = a1 + 2;
        while (1)
        {
          if (!*a2 || *((_QWORD *)a2 + 3) + 1 <= v33)
          {
            v35 = a1;
            if (v34 != *((_QWORD **)a1 + 2))
              v35 = (int *)(*v34 + 16);
            result = fst::StringWeight<int,(fst::StringType)1>::PushFront((_DWORD *)a3, *v35);
          }
          if (v34 == *((_QWORD **)a1 + 2))
            break;
          v34 = (_QWORD *)*v34;
          ++v33;
        }
      }
      return result;
    }
    v25 = 0;
    v26 = (uint64_t *)(a1 + 4);
    v27 = result + 2;
    if (v22)
      v28 = v22 == *(_DWORD *)result;
    else
      v28 = 0;
    v29 = !v28;
    v30 = v29 ^ 1;
    while (1)
    {
      v31 = *v26;
      v32 = *v27;
      if ((v25 & 1) == 0 && !v30)
        break;
      if ((int *)v31 == a1 + 2)
        goto LABEL_65;
      if (*(_DWORD *)(v31 + 16) != *(_DWORD *)(v32 + 16))
        goto LABEL_52;
      v26 = (uint64_t *)(v31 + 8);
      v27 = (uint64_t *)(v32 + 8);
      v25 = 1;
    }
    if (v22)
    {
      *(_QWORD *)(a3 + 8) = a3 + 8;
      *(_QWORD *)(a3 + 16) = a3 + 8;
      *(_QWORD *)(a3 + 24) = 0;
      *(_DWORD *)a3 = 0;
      goto LABEL_57;
    }
LABEL_65:
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::Zero();
LABEL_31:
    *(_DWORD *)a3 = *v20;
    return std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v20 + 2));
  }
  v12 = 0;
  v13 = (uint64_t *)(a2 + 4);
  v14 = (uint64_t *)(v8 + 16);
  if (v9)
    v15 = v9 == *(_DWORD *)v8;
  else
    v15 = 0;
  v16 = !v15;
  v17 = v16 ^ 1;
  while (1)
  {
    v18 = *v13;
    v19 = *v14;
    if ((v12 & 1) == 0 && !v17)
      break;
    if ((int *)v18 == a2 + 2)
      return (_QWORD *)fst::StringWeight<int,(fst::StringType)2>::StringWeight(a3, -2);
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16))
      goto LABEL_33;
    v13 = (uint64_t *)(v18 + 8);
    v14 = (uint64_t *)(v19 + 8);
    v12 = 1;
  }
  if (v9)
    goto LABEL_33;
  return (_QWORD *)fst::StringWeight<int,(fst::StringType)2>::StringWeight(a3, -2);
}

void sub_1ADBE7944(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StringWeight<int,(fst::StringType)2>::Type()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v2, "restricted_string");
    fst::StringWeight<int,(fst::StringType)2>::Type(void)::type = (uint64_t)v2;
  }
  return fst::StringWeight<int,(fst::StringType)2>::Type(void)::type;
}

void sub_1ADBE79D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

_QWORD *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int v5;
  _QWORD v6[3];
  int v7;

  fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1ADBE7A64(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  float v8;
  _QWORD v9[3];

  v8 = *a1;
  std::list<int>::list(v9, (uint64_t)(a1 + 2));
  v6 = a1[8];
  if ((LODWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    v6 = floorf((float)(v6 / a3) + 0.5) * a3;
  *(float *)a2 = v8;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v9);
  *(float *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v9);
}

void sub_1ADBE7B1C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, uint64_t **a2)
{
  uint64_t State;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  int v10;
  _QWORD v11[3];
  int v12;

  State = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::FindState(*(_QWORD **)(a1 + 184), a2);
  v5 = State;
  if (*(_QWORD *)(a1 + 152))
  {
    v6 = *(uint64_t **)(a1 + 160);
    if (0xCCCCCCCCCCCCCCCDLL * ((v6[1] - *v6) >> 3) <= (int)State)
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, (uint64_t)&v10);
      v7 = v6[1];
      if (v7 >= v6[2])
      {
        v8 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>(v6, &v10);
      }
      else
      {
        *(_DWORD *)v7 = v10;
        std::list<int>::list((_QWORD *)(v7 + 8), (uint64_t)v11);
        *(_DWORD *)(v7 + 32) = v12;
        v8 = v7 + 40;
        v6[1] = v7 + 40;
      }
      v6[1] = v8;
      std::__list_imp<char *>::clear(v11);
    }
  }
  return v5;
}

void sub_1ADBE7C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::FindState(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t Id;
  _QWORD **v4;
  _QWORD **v6;

  v6 = a2;
  v2 = (a1[12] - a1[11]) >> 3;
  Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, &v6, 1);
  if ((_DWORD)Id != (_DWORD)v2)
  {
    v4 = v6;
    if (v6)
    {
      std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::clear(v6);
      MEMORY[0x1AF44D190](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>::ComputeDistance@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v5;
  _QWORD *result;
  uint64_t *i;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  _BOOL4 v15;
  _BOOL4 v16;
  int *v17;
  _QWORD *v18;
  _BYTE *v19;
  int v20;
  _BYTE v22[8];
  _QWORD v23[3];
  float v24;
  int v25;
  _QWORD v26[3];
  int v27;
  int v28;
  _QWORD v29[3];
  float v30;
  int v31;
  _QWORD v32[4];

  v5 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  *(_DWORD *)a3 = *v5;
  result = std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v5 + 2));
  *(_DWORD *)(a3 + 32) = v5[8];
  for (i = *a2; i; i = (uint64_t *)*i)
  {
    v8 = *((int *)i + 2);
    v9 = **(_QWORD **)(a1 + 152);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) - v9) >> 3) <= v8)
      v10 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
    else
      v10 = v9 + 40 * (int)v8;
    v28 = *(_DWORD *)v10;
    std::list<int>::list(v29, v10 + 8);
    v30 = *(float *)(v10 + 32);
    fst::Times<int,(fst::StringType)2>((int *)i + 4, (uint64_t)&v28, (uint64_t)&v31);
    v11 = *((float *)i + 12);
    v12 = NAN;
    if (v11 != -INFINITY)
    {
      v12 = NAN;
      if (v30 != -INFINITY)
      {
        v12 = INFINITY;
        v13 = v30 == INFINITY || v11 == INFINITY;
        v14 = v11 + v30;
        if (!v13)
          v12 = v14;
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)v22, &v31, v12);
    std::__list_imp<char *>::clear(v32);
    v15 = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v31, (float *)(a3 + 32), &v24);
    v16 = v15;
    if (v15)
      v17 = (int *)a3;
    else
      v17 = (int *)v22;
    v25 = *v17;
    if (v15)
      v18 = (_QWORD *)(a3 + 8);
    else
      v18 = v23;
    std::list<int>::list(v26, (uint64_t)v18);
    if (v16)
      v19 = (_BYTE *)a3;
    else
      v19 = v22;
    v20 = *((_DWORD *)v19 + 8);
    v27 = v20;
    *(_DWORD *)a3 = v25;
    if (&v25 != (int *)a3)
    {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a3 + 8), v26[1], (uint64_t)v26);
      v20 = v27;
    }
    *(_DWORD *)(a3 + 32) = v20;
    std::__list_imp<char *>::clear(v26);
    std::__list_imp<char *>::clear(v23);
    result = std::__list_imp<char *>::clear(v29);
  }
  return result;
}

void sub_1ADBE7EB4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  std::__list_imp<char *>::clear(v4);
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;

  a1[13] = a2;
  v6 = (uint64_t)(a1 + 3);
  v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, (int *)&fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7)
    return *((unsigned int *)v7 + 4);
  if (!a3)
    return 0xFFFFFFFFLL;
  v9 = a1[10];
  v10 = (_QWORD *)a1[11];
  v11 = ((uint64_t)v10 - v9) >> 3;
  v23 = v11;
  v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v12 - v9;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1))
      v15 = v11 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    else
      v17 = 0;
    v18 = &v17[8 * v11];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = *a2;
    v13 = v18 + 8;
    v21 = (char *)a1[10];
    v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = *a2;
    v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ***v6;
  unint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;

  v4 = *a2;
  if ((int)v4 < -1)
  {
    v7 = 0;
  }
  else
  {
    v5 = a1[4];
    if ((_DWORD)v4 == -1)
      v6 = *(uint64_t ****)(v5 + 104);
    else
      v6 = (uint64_t ***)(*(_QWORD *)(v5 + 80) + 8 * v4);
    v7 = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v5, *v6);
  }
  v8 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v8)
    return 0;
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v7;
    if (v7 >= *(_QWORD *)&v8)
      v11 = v7 % *(_QWORD *)&v8;
  }
  else
  {
    v11 = (*(_QWORD *)&v8 - 1) & v7;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = a1 + 6;
    do
    {
      v15 = v13[1];
      if (v15 == v7)
      {
        if ((fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v14, *((_DWORD *)v13 + 4), *a2) & 1) != 0)return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(_QWORD *)&v8)
            v15 %= *(_QWORD *)&v8;
        }
        else
        {
          v15 &= *(_QWORD *)&v8 - 1;
        }
        if (v15 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v6;

  if (a2 < -1 || a3 < -1)
    return a2 == a3;
  v3 = *a1;
  if (a2 == -1)
    v4 = *(uint64_t **)(v3 + 104);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 80) + 8 * a2);
  if (a3 == -1)
    v6 = *(uint64_t **)(v3 + 104);
  else
    v6 = (uint64_t *)(*(_QWORD *)(v3 + 80) + 8 * a3);
  return fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::operator==(*v4, *v6);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  int *v3;
  unint64_t v4;

  v2 = *((char *)a2 + 8);
  v3 = (int *)*a2;
  if (*a2)
  {
    do
    {
      v4 = v3[2];
      v2 ^= fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Hash(v3 + 4) ^ (2 * v2) ^ (32 * v4) ^ (v4 >> 59);
      v3 = *(int **)v3;
    }
    while (v3);
  }
  return v2;
}

uint64_t fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::operator==(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (*(unsigned __int8 *)(a2 + 8) != *(unsigned __int8 *)(a1 + 8))
    return 0;
  v2 = (_QWORD *)a2;
  v3 = (_QWORD *)a1;
  while (1)
  {
    v2 = (_QWORD *)*v2;
    v3 = (_QWORD *)*v3;
    if (!v2 || v3 == 0)
      break;
    if (!fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::operator==((uint64_t)(v2 + 1), (uint64_t)(v3 + 1)))return 0;
  }
  return (v2 != 0) ^ (v3 == 0);
}

BOOL fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v2 = *(_DWORD *)(a1 + 8);
  v3 = v2 ? *(_QWORD *)(a1 + 32) + 1 : 0;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = v4 ? *(_QWORD *)(a2 + 32) + 1 : 0;
  if (v3 != v5)
    return 0;
  v6 = 0;
  v7 = (uint64_t *)(a1 + 24);
  v8 = (uint64_t *)(a2 + 24);
  if (v2)
    v9 = v2 == v4;
  else
    v9 = 0;
  v10 = !v9;
  v11 = v10 ^ 1;
  while (1)
  {
    v12 = *v7;
    v13 = *v8;
    if ((v6 & 1) == 0 && !v11)
      break;
    if (v12 == a1 + 16)
      return *(float *)(a1 + 40) == *(float *)(a2 + 40);
    if (*(_DWORD *)(v12 + 16) != *(_DWORD *)(v13 + 16))
      return 0;
    v7 = (uint64_t *)(v12 + 8);
    v8 = (uint64_t *)(v13 + 8);
    v6 = 1;
  }
  if (v2)
    return 0;
  return *(float *)(a1 + 40) == *(float *)(a2 + 40);
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t ***v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  if ((int)v7 < -1)
  {
    v10 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((_DWORD)v7 == -1)
      v9 = *(uint64_t ****)(v8 + 104);
    else
      v9 = (uint64_t ***)(*(_QWORD *)(v8 + 80) + 8 * v7);
    v10 = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v8, *v9);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_44:
    *v24 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADBE85BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[40 * v9];
  *(_DWORD *)v11 = *a2;
  std::list<int>::list((_QWORD *)v11 + 1, (uint64_t)(a2 + 2));
  *((_DWORD *)v11 + 8) = a2[8];
  v15 += 40;
  std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADBE86D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_DWORD *)(a7 + v11 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((_QWORD *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADBE87E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 8;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, a2[1]);
    std::__list_imp<char *>::clear(a2 + 7);
    operator delete(a2);
  }
}

_QWORD *fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v7;
  _QWORD v8[3];
  int v9;
  uint64_t v10;
  _QWORD v11[3];
  int v12;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(&v10, a1, a2);
    v7 = v10;
    std::list<int>::list(v8, (uint64_t)v11);
    v9 = v12;
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v7);
    std::__list_imp<char *>::clear(v8);
    std::__list_imp<char *>::clear(v11);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1ADBE8908(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == (_DWORD)a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 64) - *(_QWORD *)(*(_QWORD *)v5 + 56)) >> 3);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == (_DWORD)a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 40);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == (_DWORD)a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 48);
}

_QWORD *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DeterminizeFst(_QWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  *a1 = &unk_1E5D1E248;
  a1[1] = 0;
  v4 = *(_DWORD **)(a2 + 8);
  if (a3)
  {
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(a2 + 8));
    v5 = (_DWORD *)a1[1];
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    ++v4[14];
  }
  a1[1] = v4;
  return a1;
}

void sub_1ADBE8B04(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D27948;
  v3 = v1[1];
  if (v3)
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v3);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *((_QWORD *)v19 + 7);
    v9 = 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)v19 + 8) - v8) >> 3);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        v14 = *v12;
        v12 += 14;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADBE8CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 84);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADBE8D3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FactorWeightFst(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FactorWeightFstImpl(v6, a2, a3);
  *a1 = &unk_1E5D1EB38;
  a1[1] = v6;
  return a1;
}

void sub_1ADBE8E0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::~FactorWeightFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D27058;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Start(uint64_t a1)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D1EB38;
  return v4;
}

void sub_1ADBE8FC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D20568;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C768;
  *a2 = v4;
  return result;
}

void sub_1ADBE9080(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  fst *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v21;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CacheBaseImpl(a1, a3) = &unk_1E5D219D8;
  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  v7 = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a3 + 20);
  v8 = *(_DWORD *)(a3 + 28);
  v9 = *(_WORD *)(a3 + 32);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 136) = v6;
  *(_DWORD *)(a1 + 144) = v7;
  *(_DWORD *)(a1 + 156) = v8;
  *(_WORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "factor_weight");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::FactorWeightProperties(v10) & 0x3FFFFFFF0004;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 40) = v13;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v15 = *(_QWORD *)(a1 + 48);
  if (v15 != v14)
  {
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v14)
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    else
      v16 = 0;
    *(_QWORD *)(a1 + 48) = v16;
  }
  if (!*(_DWORD *)(a1 + 148))
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "WARNING");
    v17 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)&__str);
    v18 = (_QWORD *)fst::cerr(v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"FactorWeightFst: factor mode is set to 0: ", 42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"factoring neither arc weights nor final weights.", 48);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1ADBE92C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  void **v19;
  void *v21;

  if (a18 < 0)
    operator delete(__p);
  v21 = *v19;
  if (*v19)
  {
    v18[30] = v21;
    operator delete(v21);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)(v19 - 5));
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::~FactorWeightFstImpl(uint64_t a1)
{
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::~FactorWeightFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::~FactorWeightFstImpl(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &unk_1E5D219D8;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(_QWORD *)(a1 + 240) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(a1 + 192);
  v5 = (void **)(a1 + 168);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl((_QWORD *)a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Start(uint64_t a1)
{
  uint64_t result;
  int v3;
  int *v4;
  int State;
  int v6;
  _QWORD v7[3];
  int v8;
  int v9[4];
  _QWORD v10[3];
  int v11;

  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 4))
  {
    *(_BYTE *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result != -1)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
    v4 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
    v6 = *v4;
    std::list<int>::list(v7, (uint64_t)(v4 + 2));
    v8 = v4[8];
    v9[0] = v3;
    v9[2] = v6;
    std::list<int>::list(v10, (uint64_t)v7);
    v11 = v8;
    State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FindState(a1, v9);
    std::__list_imp<char *>::clear(v10);
    std::__list_imp<char *>::clear(v7);
    *(_DWORD *)(a1 + 64) = State;
    *(_BYTE *)(a1 + 60) = 1;
    if (*(_DWORD *)(a1 + 68) <= State)
      *(_DWORD *)(a1 + 68) = State + 1;
    return *(unsigned int *)(a1 + 64);
  }
  return result;
}

void sub_1ADBE9570(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FindState(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40[4];
  _QWORD v41[3];
  int v42;
  int v43;
  float v44;

  if ((*(_BYTE *)(a1 + 148) & 2) != 0)
    goto LABEL_27;
  v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
  v5 = a2[2];
  v6 = v5 ? *((_QWORD *)a2 + 4) + 1 : 0;
  v7 = *(_DWORD *)v4 ? *(_QWORD *)(v4 + 24) + 1 : 0;
  if (v6 != v7)
    goto LABEL_27;
  v8 = 0;
  v9 = (uint64_t *)(a2 + 6);
  v10 = (uint64_t *)(v4 + 16);
  v11 = v5 && v5 == *(_DWORD *)v4;
  v12 = !v11;
  v13 = !v12;
  while (1)
  {
    v14 = *v9;
    v15 = *v10;
    if ((v8 & 1) == 0 && !v13)
      break;
    if ((int *)v14 == a2 + 4)
      goto LABEL_22;
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16))
      goto LABEL_27;
    v9 = (uint64_t *)(v14 + 8);
    v10 = (uint64_t *)(v15 + 8);
    v8 = 1;
  }
  if (v5)
    goto LABEL_27;
LABEL_22:
  v40[0] = 0;
  v40[0] = a2[10];
  v44 = 0.0;
  v44 = *(float *)(v4 + 32);
  v16 = *a2;
  if (*(float *)v40 != v44 || v16 == -1)
  {
LABEL_27:
    v18 = std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>((_QWORD *)(a1 + 192), a2);
    if (v18)
    {
      return *((unsigned int *)v18 + 16);
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 176);
      v20 = (uint64_t *)(a1 + 168);
      v19 = -1431655765 * ((v21 - *(_QWORD *)(a1 + 168)) >> 4);
      if (v21 >= *(_QWORD *)(a1 + 184))
      {
        v22 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element const&>(v20, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element const&>((uint64_t)v20, a2);
        v22 = v21 + 48;
      }
      *(_QWORD *)(a1 + 176) = v22;
      v23 = a2[2];
      v40[0] = *a2;
      v40[2] = v23;
      std::list<int>::list(v41, (uint64_t)(a2 + 4));
      v42 = a2[10];
      v43 = v19;
      std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>(a1 + 192, v40, v40);
      std::__list_imp<char *>::clear(v41);
    }
  }
  else
  {
    v25 = v16;
    v26 = *(char **)(a1 + 232);
    v27 = *(char **)(a1 + 240);
    v28 = (v27 - v26) >> 2;
    if (v28 <= v16)
    {
      v29 = (_QWORD *)(a1 + 248);
      do
      {
        if ((unint64_t)v27 >= *v29)
        {
          v31 = v28 + 1;
          if ((v28 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v32 = *v29 - (_QWORD)v26;
          if (v32 >> 1 > v31)
            v31 = v32 >> 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
            v33 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 248, v33);
            v26 = *(char **)(a1 + 232);
            v27 = *(char **)(a1 + 240);
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[4 * v28];
          *(_DWORD *)v35 = -1;
          v30 = v35 + 4;
          while (v27 != v26)
          {
            v36 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          *(_QWORD *)(a1 + 232) = v35;
          *(_QWORD *)(a1 + 240) = v30;
          *(_QWORD *)(a1 + 248) = &v34[4 * v33];
          if (v26)
          {
            operator delete(v26);
            v26 = *(char **)(a1 + 232);
          }
          else
          {
            v26 = v35;
          }
        }
        else
        {
          *(_DWORD *)v27 = -1;
          v30 = v27 + 4;
        }
        *(_QWORD *)(a1 + 240) = v30;
        v28 = (v30 - v26) >> 2;
        v16 = *a2;
        v27 = v30;
      }
      while (v28 <= *a2);
      v25 = v16;
    }
    if (*(_DWORD *)&v26[4 * v25] == -1)
    {
      v37 = *(_QWORD *)(a1 + 176);
      *(_DWORD *)&v26[4 * v25] = -1431655765 * ((v37 - *(_QWORD *)(a1 + 168)) >> 4);
      v38 = (uint64_t *)(a1 + 168);
      if (v37 >= *(_QWORD *)(a1 + 184))
      {
        v39 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element const&>(v38, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element const&>((uint64_t)v38, a2);
        v39 = v37 + 48;
      }
      *(_QWORD *)(a1 + 176) = v39;
      v16 = *a2;
      v26 = *(char **)(a1 + 232);
    }
    return *(unsigned int *)&v26[4 * v16];
  }
  return v19;
}

void sub_1ADBE9894(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element const&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v4 = *a2;
  *(_DWORD *)(v4 + 8) = a2[2];
  result = std::list<int>::list((_QWORD *)(v4 + 16), (uint64_t)(a2 + 4));
  *(_DWORD *)(v4 + 40) = a2[10];
  *(_QWORD *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1ADBE9900(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = (char *)&v10[12 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = (char *)&v10[12 * v9];
  *(_DWORD *)v11 = *a2;
  *((_DWORD *)v11 + 2) = a2[2];
  std::list<int>::list((_QWORD *)v11 + 2, (uint64_t)(a2 + 4));
  v10[12 * v4 + 10] = a2[10];
  v15 += 48;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADBE9A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Element*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      *(_DWORD *)(v12 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((_QWORD *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 48;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADBE9B38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int *v6;
  int *v7;
  int v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  BOOL v13;
  int v14;
  int *v15;
  _QWORD *v16;
  int v18;
  _QWORD v19[3];
  int v20;
  int v21;
  _QWORD v22[3];
  float v23;
  uint64_t v24;
  _QWORD v25[3];
  float v26;
  char v27;
  int v28;
  _QWORD v29[3];
  float v30;
  int v31;
  uint64_t v32[3];

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    v6 = (int *)(*(_QWORD *)(a1 + 168) + 48 * a2);
    v8 = *v6;
    v7 = v6 + 2;
    if (v8 == -1)
    {
      v28 = *v7;
      std::list<int>::list(v29, (uint64_t)(v7 + 2));
      v30 = *((float *)v7 + 8);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v24);
      fst::Times<int,(fst::StringType)2>(v7, (uint64_t)&v24, (uint64_t)&v31);
      v9 = *((float *)v7 + 8);
      v10 = NAN;
      if (v9 != -INFINITY)
      {
        v10 = NAN;
        if (v26 != -INFINITY)
        {
          v10 = INFINITY;
          v11 = v26 == INFINITY || v9 == INFINITY;
          v12 = v9 + v26;
          if (!v11)
            v10 = v12;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v28, &v31, v10);
      std::__list_imp<char *>::clear(v32);
      std::__list_imp<char *>::clear(v25);
    }
    LODWORD(v24) = v28;
    std::list<int>::list(v25, (uint64_t)v29);
    v26 = v30;
    if (v28)
      v13 = (unint64_t)(v29[2] + 1) >= 2;
    else
      v13 = 0;
    v14 = !v13;
    v27 = v14;
    if ((*(_BYTE *)(a1 + 148) & 1) == 0 || v14)
    {
      v21 = v28;
      v16 = v22;
      std::list<int>::list(v22, (uint64_t)v29);
      v23 = v30;
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v21);
    }
    else
    {
      v15 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
      v18 = *v15;
      v16 = v19;
      std::list<int>::list(v19, (uint64_t)(v15 + 2));
      v20 = v15[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetFinal(a1, a2, &v18);
    }
    std::__list_imp<char *>::clear(v16);
    std::__list_imp<char *>::clear(v25);
    std::__list_imp<char *>::clear(v29);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1ADBE9D70(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 64) - *(_QWORD *)(*(_QWORD *)v5 + 56)) >> 3);
}

_QWORD *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Expand(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  float v7;
  float v8;
  int v11;
  int v12;
  int State;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int *v18;
  uint64_t v19;
  uint64_t *MutableState;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  float v31;
  uint64_t v33;
  BOOL v34;
  char v35;
  int v36;
  uint64_t *v37;
  float v39;
  float v40;
  int v42;
  _QWORD v43[3];
  float v44;
  int v45;
  _QWORD v46[3];
  float v47;
  int v48;
  _QWORD v49[3];
  float v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  float v54;
  int v55;
  int v56;
  _QWORD v57[3];
  float v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  float v62;
  int v63;
  _QWORD v64[4];
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  _QWORD v69[3];
  int v70;
  float v71;
  _QWORD v72[3];
  int v73;
  char v74;
  int v75;
  _QWORD v76[3];
  int v77;
  uint64_t v78;
  _QWORD v79[2];
  _DWORD *v80;
  unint64_t v81;
  int v82;
  int v83;
  _QWORD v84[3];
  float v85;

  v3 = *(_QWORD *)(a1 + 168) + 48 * a2;
  v82 = *(_DWORD *)v3;
  v83 = *(_DWORD *)(v3 + 8);
  std::list<int>::list(v84, v3 + 16);
  v85 = *(float *)(v3 + 40);
  if (v82 == -1)
    goto LABEL_33;
  v4 = *(_QWORD *)(a1 + 136);
  v81 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
  v5 = &v66;
  while (1)
  {
    if (!v78)
    {
      if (v81 >= v79[1])
        goto LABEL_31;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v78 + 24))(v78))
      break;
    if (v78)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 32))(v78);
      goto LABEL_9;
    }
LABEL_8:
    v6 = v79[0] + 56 * v81;
LABEL_9:
    fst::Times<int,(fst::StringType)2>(&v83, v6 + 8, (uint64_t)&v59);
    v7 = NAN;
    if (v85 != -INFINITY)
    {
      v8 = *(float *)(v6 + 40);
      v7 = NAN;
      if (v8 != -INFINITY)
      {
        v7 = INFINITY;
        if (v8 != INFINITY && v85 != INFINITY)
          v7 = v85 + v8;
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v75, (int *)&v59, v7);
    std::__list_imp<char *>::clear(&v60);
    v71 = *(float *)&v75;
    std::list<int>::list(v72, (uint64_t)v76);
    v73 = v77;
    v11 = *(float *)&v75 == 0.0 || (unint64_t)(v76[2] + 1) < 2;
    v74 = v11;
    if ((*(_BYTE *)(a1 + 148) & 2) == 0 || v11)
    {
      v16 = v5;
      v17 = *(_DWORD *)(v6 + 48);
      v18 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::One();
      v68 = *v18;
      std::list<int>::list(v69, (uint64_t)(v18 + 2));
      v70 = v18[8];
      LODWORD(v59) = v17;
      LODWORD(v60) = v68;
      std::list<int>::list(v61, (uint64_t)v69);
      v63 = v70;
      LODWORD(v18) = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FindState(a1, (int *)&v59);
      v5 = v16;
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v69);
      v19 = *(_QWORD *)v6;
      v65 = v75;
      std::list<int>::list(v16, (uint64_t)v76);
      v67 = v77;
      v59 = v19;
      LODWORD(v60) = v65;
      std::list<int>::list(v61, (uint64_t)v16);
      v63 = v67;
      LODWORD(v64[0]) = (_DWORD)v18;
      MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(MutableState, (uint64_t)&v59);
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v16);
    }
    else
    {
      fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Value((int *)&v71, (uint64_t)&v59);
      v12 = *(_DWORD *)(v6 + 48);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Quantize((float *)&v63, (uint64_t)&v56, *(float *)(a1 + 144));
      LODWORD(v51) = v12;
      LODWORD(v52) = v56;
      std::list<int>::list(v53, (uint64_t)v57);
      v54 = v58;
      State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v57);
      v14 = *(_QWORD *)v6;
      v48 = v59;
      std::list<int>::list(v49, (uint64_t)&v60);
      v50 = v62;
      v51 = v14;
      LODWORD(v52) = v48;
      std::list<int>::list(v53, (uint64_t)v49);
      v54 = v50;
      v55 = State;
      v15 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(v15, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v49);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v76);
    if (v78)
      (*(void (**)(uint64_t))(*(_QWORD *)v78 + 40))(v78);
    else
      ++v81;
  }
  if (v78)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
    goto LABEL_33;
  }
LABEL_31:
  if (v80)
    --*v80;
LABEL_33:
  if ((*(_BYTE *)(a1 + 148) & 1) != 0)
  {
    if (v82 == -1)
      goto LABEL_65;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v59);
    v21 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
    v22 = (_DWORD)v59 ? v61[1] + 1 : 0;
    v23 = *(_DWORD *)v21 ? *(_QWORD *)(v21 + 24) + 1 : 0;
    if (v22 == v23)
    {
      v24 = 0;
      v25 = v61[0];
      v26 = (uint64_t *)(v21 + 16);
      if ((_DWORD)v59)
        v27 = (_DWORD)v59 == *(_DWORD *)v21;
      else
        v27 = 0;
      v28 = !v27;
      v29 = v28 ^ 1;
      while (1)
      {
        v30 = *v26;
        if ((v24 & 1) == 0 && !v29)
          break;
        if ((uint64_t *)v25 == &v60)
          goto LABEL_77;
        if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v30 + 16))
          goto LABEL_55;
        v25 = *(_QWORD *)(v25 + 8);
        v26 = (uint64_t *)(v30 + 8);
        v24 = 1;
      }
      if ((_DWORD)v59)
        goto LABEL_55;
LABEL_77:
      *(float *)&v51 = v62;
      v71 = 0.0;
      v71 = *(float *)(v21 + 32);
      v39 = v62;
      v40 = v71;
      std::__list_imp<char *>::clear(&v60);
      if (v39 == v40)
        goto LABEL_76;
    }
    else
    {
LABEL_55:
      std::__list_imp<char *>::clear(&v60);
    }
    if (v82 == -1)
    {
LABEL_65:
      LODWORD(v78) = v83;
      std::list<int>::list(v79, (uint64_t)v84);
      *(float *)&v81 = v85;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v59);
      fst::Times<int,(fst::StringType)2>(&v83, (uint64_t)&v59, (uint64_t)&v51);
      v31 = NAN;
      if (v85 != -INFINITY)
      {
        v31 = NAN;
        if (v62 != -INFINITY)
        {
          v31 = INFINITY;
          if (v62 != INFINITY && v85 != INFINITY)
            v31 = v85 + v62;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v78, (int *)&v51, v31);
      std::__list_imp<char *>::clear(&v52);
      std::__list_imp<char *>::clear(&v60);
    }
    v33 = *(_QWORD *)(a1 + 152);
    v71 = *(float *)&v78;
    std::list<int>::list(v72, (uint64_t)v79);
    v73 = v81;
    if ((_DWORD)v78)
      v34 = (unint64_t)v80 + 1 >= 2;
    else
      v34 = 0;
    v35 = !v34;
    v74 = v35;
    if (v34)
    {
      fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Value((int *)&v71, (uint64_t)&v59);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Quantize((float *)&v63, (uint64_t)&v45, *(float *)(a1 + 144));
      LODWORD(v51) = -1;
      LODWORD(v52) = v45;
      std::list<int>::list(v53, (uint64_t)v46);
      v54 = v47;
      v36 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v46);
      v42 = v59;
      std::list<int>::list(v43, (uint64_t)&v60);
      v44 = v62;
      v51 = v33;
      LODWORD(v52) = v42;
      std::list<int>::list(v53, (uint64_t)v43);
      v54 = v44;
      v55 = v36;
      v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::PushArc(v37, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v43);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v79);
  }
LABEL_76:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::SetArcs(a1, a2);
  return std::__list_imp<char *>::clear(v84);
}

void sub_1ADBEA5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  _QWORD *v48;

  std::__list_imp<char *>::clear((_QWORD *)(v47 + 8));
  std::__list_imp<char *>::clear(&a47);
  std::__list_imp<char *>::clear(v48);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Value@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  _QWORD v18[2];
  uint64_t v19;
  int v20;
  _QWORD v21[4];
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD v31[2];
  uint64_t v32;
  int v33;
  _QWORD v34[4];
  int v35;
  _QWORD v36[3];
  char v37;

  v35 = *a1;
  std::list<int>::list(v36, (uint64_t)(a1 + 2));
  if (*a1)
    v4 = (unint64_t)(*((_QWORD *)a1 + 3) + 1) >= 2;
  else
    v4 = 0;
  v5 = !v4;
  v37 = v5;
  fst::StringFactor<int,(fst::StringType)2>::Value((uint64_t)&v35, (uint64_t)&v22);
  v30 = v22;
  v31[0] = v31;
  v31[1] = v31;
  v32 = 0;
  v6 = v25;
  if (v25)
  {
    v8 = v23;
    v7 = v24;
    v9 = *v24;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v23 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    v10 = v31[0];
    *(_QWORD *)(v31[0] + 8) = v7;
    *v7 = v10;
    v31[0] = v8;
    *(_QWORD *)(v8 + 8) = v31;
    v32 = v6;
    v25 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v33, &v30, *((float *)a1 + 8));
  std::__list_imp<char *>::clear(v31);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  fst::StringFactor<int,(fst::StringType)2>::Value((uint64_t)&v35, (uint64_t)&v22);
  v17 = v26;
  v18[0] = v18;
  v18[1] = v18;
  v19 = 0;
  v11 = v29;
  if (v29)
  {
    v13 = v27;
    v12 = v28;
    v14 = *v28;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v27 + 8);
    **(_QWORD **)(v13 + 8) = v14;
    v15 = v18[0];
    *(_QWORD *)(v18[0] + 8) = v12;
    *v12 = v15;
    v18[0] = v13;
    *(_QWORD *)(v13 + 8) = v18;
    v19 = v11;
    v29 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::GallicWeight((uint64_t)&v20, &v17, 0.0);
  std::__list_imp<char *>::clear(v18);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>&,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>&,0>(a2, &v33, &v20);
  std::__list_imp<char *>::clear(v21);
  std::__list_imp<char *>::clear(v34);
  return std::__list_imp<char *>::clear(v36);
}

void sub_1ADBEA980(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  std::__list_imp<char *>::clear((_QWORD *)(v2 + 8));
  std::__list_imp<char *>::clear((_QWORD *)(v3 - 120));
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::StringFactor<int,(fst::StringType)2>::Value@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _DWORD *v9;
  int v11;
  _QWORD v12[2];
  uint64_t v13;
  int v14;
  _QWORD v15[3];

  v3 = a1 + 8;
  v4 = *(_QWORD *)(a1 + 16);
  fst::StringWeight<int,(fst::StringType)2>::StringWeight((uint64_t)&v14, *(_DWORD *)a1);
  v12[0] = v12;
  v12[1] = v12;
  v13 = 0;
  v11 = 0;
  if (v4 != v3)
  {
    v5 = 0;
    v6 = 0;
    v7 = v12;
    do
    {
      v8 = *(_DWORD *)(v4 + 16);
      if (v5)
      {
        v9 = operator new(0x18uLL);
        v9[4] = v8;
        *(_QWORD *)v9 = v7;
        *((_QWORD *)v9 + 1) = v12;
        v7[1] = v9;
        ++v6;
        v7 = v9;
        v12[0] = v9;
        v13 = v6;
      }
      else
      {
        v11 = *(_DWORD *)(v4 + 16);
        v5 = v8;
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
  }
  std::pair<fst::StringWeight<int,(fst::StringType)2>,fst::StringWeight<int,(fst::StringType)2>>::pair[abi:ne180100]<fst::StringWeight<int,(fst::StringType)2>&,fst::StringWeight<int,(fst::StringType)2>&,0>(a2, &v14, &v11);
  std::__list_imp<char *>::clear(v12);
  return std::__list_imp<char *>::clear(v15);
}

void sub_1ADBEAAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  va_list va;

  va_start(va, a6);
  std::__list_imp<char *>::clear(v6);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::StringWeight<int,(fst::StringType)2>,fst::StringWeight<int,(fst::StringType)2>>::pair[abi:ne180100]<fst::StringWeight<int,(fst::StringType)2>&,fst::StringWeight<int,(fst::StringType)2>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = *a3;
  std::list<int>::list((_QWORD *)(a1 + 40), (uint64_t)(a3 + 2));
  return a1;
}

void sub_1ADBEAB50(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>&,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  *(_DWORD *)(a1 + 40) = *a3;
  std::list<int>::list((_QWORD *)(a1 + 48), (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 72) = a3[8];
  return a1;
}

void sub_1ADBEABCC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 40);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 48);
}

_QWORD *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D27058;
  if (a3)
  {
    v5 = operator new();
    fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FactorWeightFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADBEAD20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D219D8;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  v5 = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a2 + 148);
  v6 = *(_DWORD *)(a2 + 156);
  v7 = *(_WORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 136) = v4;
  *(_DWORD *)(a1 + 144) = v5;
  *(_DWORD *)(a1 + 156) = v6;
  *(_WORD *)(a1 + 160) = v7;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "factor_weight");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    else
      v10 = 0;
    *(_QWORD *)(a1 + 40) = v10;
  }
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 48) = v13;
  }
  return a1;
}

void sub_1ADBEAECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  void *v16;
  void **v17;
  void *v19;

  if (a15 < 0)
    operator delete(__p);
  v19 = *v17;
  if (*v17)
  {
    v15[30] = v19;
    operator delete(v19);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)v16 + 24);
  __p = v16;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *((_QWORD *)v19 + 7);
    v9 = 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)v19 + 8) - v8) >> 3);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        v14 = *v12;
        v12 += 14;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while (v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADBEB0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 84);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Expand(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADBEB134(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
}

_QWORD *fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFst(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char v8[8];
  uint64_t v9;

  v6 = operator new();
  v8[0] = 1;
  v9 = 0;
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFstImpl(v6, a2, a3, (uint64_t)v8);
  *a1 = &unk_1E5D23878;
  a1[1] = v6;
  return a1;
}

void sub_1ADBEB214(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D247A0;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D247A0;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D23878;
  return v4;
}

void sub_1ADBEB420(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::StateIterator(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1ADBEB4AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v7;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a4) = &unk_1E5D1B528;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  v7 = (_QWORD *)operator new();
  *v7 = *a3;
  *(_QWORD *)(a1 + 144) = v7;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Init(a1);
  return a1;
}

void sub_1ADBEB574(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Init(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 112))(*(_QWORD *)(a1 + 136));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v2)
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      v4 = 0;
    *(_QWORD *)(a1 + 40) = v4;
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = 0;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result == -1)
  {
    *(_DWORD *)(a1 + 156) = 0;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    *(_DWORD *)(a1 + 156) = 1;
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 0x3FFFFFFF0004, 0);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 144) + 4))
      v7 = result & 0x2EBC21080003 | 4;
    else
      v7 = result & 0x2EBC21080007;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | v7;
    if (*(_DWORD *)(a1 + 156) == 2)
      *(_DWORD *)(a1 + 160) = 0;
  }
  return result;
}

void sub_1ADBEB6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0)|| *(_BYTE *)(*(_QWORD *)(a1 + 144) + 4)))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::~ArcMapFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D1B528;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3)
      MEMORY[0x1AF44D190](v3, 0x1000C4090D0E795);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((_QWORD *)a1);
}

float fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final(uint64_t a1, int a2)
{
  int v4;
  float v5;
  char *MutableState;
  int v7;
  int *v8;
  int v9;
  _BOOL4 v11;
  unint64_t v12;
  int v13;
  int v14;
  fst *v15;
  _QWORD *v16;
  int *v17;
  _BOOL4 v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD v27[3];
  int v28;
  char v29;
  uint64_t v30;
  _QWORD v31[3];
  int v32;
  void *__p;
  int v34;
  _QWORD v35[3];
  int v36;
  int v37;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0)
  {
    v4 = *(_DWORD *)(a1 + 156);
    if (v4 == 1)
    {
      v7 = *(_DWORD *)(a1 + 160);
      if (v7 == a2)
      {
        MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        *(_DWORD *)MutableState = 0;
      }
      else
      {
        v17 = *(int **)(a1 + 144);
        v19 = v7 != -1 && v7 <= a2;
        (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v26, *(_QWORD *)(a1 + 136), (a2 - v19));
        __p = 0;
        v34 = v26;
        std::list<int>::list(v35, (uint64_t)v27);
        v36 = v28;
        v37 = -1;
        v20 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()(v17, (int *)&__p);
        v22 = v21;
        std::__list_imp<char *>::clear(v35);
        std::__list_imp<char *>::clear(v27);
        MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        if (v20)
          *(_DWORD *)MutableState = 2139095040;
        else
          *(_DWORD *)MutableState = v22;
      }
    }
    else if (v4 == 2)
    {
      if (*(_DWORD *)(a1 + 160) == a2)
        v5 = 0.0;
      else
        v5 = INFINITY;
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      *(float *)MutableState = v5;
    }
    else
    {
      v8 = *(int **)(a1 + 144);
      v9 = *(_DWORD *)(a1 + 160);
      v11 = v9 != -1 && v9 <= a2;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v30, *(_QWORD *)(a1 + 136), (a2 - v11));
      __p = 0;
      v34 = v30;
      std::list<int>::list(v35, (uint64_t)v31);
      v36 = v32;
      v37 = -1;
      v12 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()(v8, (int *)&__p);
      v14 = v13;
      std::__list_imp<char *>::clear(v35);
      std::__list_imp<char *>::clear(v31);
      if (v12)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v15 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)&__p);
        v16 = (_QWORD *)fst::cerr(v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
        if (SHIBYTE(v35[0]) < 0)
          operator delete(__p);
        *(_QWORD *)(a1 + 8) |= 4uLL;
      }
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      *(_DWORD *)MutableState = v14;
    }
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  v23 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v23 + 76) == a2)
    v24 = v23 + 80;
  else
    v24 = *(_QWORD *)(v23 + 8) + 8 * (a2 + 1);
  return **(float **)v24;
}

void sub_1ADBEBAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a17);
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()(int *a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *__p[2];
  char v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  float v29[5];
  char v30;

  if (a2[12] != -1)
    goto LABEL_24;
  v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)3>::Zero();
  v5 = a2[2];
  v6 = v5 ? *((_QWORD *)a2 + 4) + 1 : 0;
  v7 = *(_DWORD *)v4 ? *(_QWORD *)(v4 + 24) + 1 : 0;
  if (v6 != v7)
    goto LABEL_24;
  v8 = 0;
  v9 = (uint64_t *)(a2 + 6);
  v10 = (uint64_t *)(v4 + 16);
  v11 = v5 && v5 == *(_DWORD *)v4;
  v12 = !v11;
  v13 = !v12;
  while (1)
  {
    v14 = *v9;
    v15 = *v10;
    if ((v8 & 1) == 0 && !v13)
      break;
    if ((int *)v14 == a2 + 4)
      goto LABEL_22;
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16))
      goto LABEL_24;
    v9 = (uint64_t *)(v14 + 8);
    v10 = (uint64_t *)(v15 + 8);
    v8 = 1;
  }
  if (v5)
    goto LABEL_24;
LABEL_22:
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = a2[10];
  v29[0] = 0.0;
  v29[0] = *(float *)(v4 + 32);
  if (*(float *)__p == v29[0])
  {
    v16 = 0;
    v17 = *a2;
  }
  else
  {
LABEL_24:
    v28 = -1;
    if (!fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Extract<(fst::GallicType)1>((unsigned int *)a2 + 2, &v27, &v28)|| (v17 = *a2, *a2 != a2[1]))
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v18 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
      v19 = (_QWORD *)fst::cerr(v18);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"FromGallicMapper: unrepresentable weight: ", 42);
      fst::CompositeWeightWriter::CompositeWeightWriter((uint64_t)v29, v20);
      if (*FLAGS_fst_weight_parentheses)
      {
        v30 = *FLAGS_fst_weight_parentheses;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)v29, (uint64_t)&v30, 1);
      }
      fst::CompositeWeightWriter::WriteElement<fst::StringWeight<int,(fst::StringType)1>>((uint64_t)v29, a2 + 2);
      fst::CompositeWeightWriter::WriteElement<fst::LogWeightTpl<float>>((uint64_t)v29, (float *)a2 + 10);
      if (*FLAGS_fst_weight_parentheses)
      {
        v30 = *(_BYTE *)(FLAGS_fst_weight_parentheses + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)v29, (uint64_t)&v30, 1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for arc with ilabel = ", 23);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", olabel = ", 11);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", nextstate = ", 14);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
      if (v25 < 0)
        operator delete(__p[0]);
      *((_BYTE *)a1 + 4) = 1;
      v17 = *a2;
    }
    if (!v17 && v28 && a2[12] == -1)
      v17 = *a1;
    v16 = (unint64_t)v28 << 32;
  }
  return v16 | v17;
}

void sub_1ADBEBDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v12;
  char *MutableState;
  int v14;
  int *v15;
  int v16;
  BOOL v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  unint64_t *v23;
  int *v24;
  int v25;
  _BOOL4 v27;
  unint64_t v28;
  float v29;
  float v30;
  int v31;
  uint64_t v32;
  _QWORD v33[3];
  int v34;
  uint64_t v35;
  _QWORD v36[3];
  int v37;
  __int128 v38;
  unint64_t v39;
  float v40;
  int v41;
  _QWORD v42[3];
  int v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  unint64_t v49;

  v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  v5 = *(_QWORD *)(a1 + 136);
  v7 = v4 != -1 && v4 <= a2;
  v49 = 0;
  (*(void (**)(uint64_t, _QWORD, unint64_t *))(*(_QWORD *)v5 + 136))(v5, (a2 - v7), &v45);
  while (1)
  {
    if (!v45)
    {
      if (v49 >= v47)
        goto LABEL_28;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v45 + 24))(v45))
      break;
    if (v45)
    {
      v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v45 + 32))(v45);
      goto LABEL_16;
    }
LABEL_15:
    v8 = v46 + 56 * v49;
LABEL_16:
    v39 = *(_QWORD *)v8;
    v40 = *(float *)(v8 + 8);
    std::list<int>::list(v42, v8 + 16);
    v43 = *(_DWORD *)(v8 + 40);
    v9 = *(_DWORD *)(v8 + 48);
    v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= v9)
      ++v9;
    if (v9 >= *(_DWORD *)(a1 + 164))
      *(_DWORD *)(a1 + 164) = v9 + 1;
    v44 = v9;
    *(_QWORD *)&v38 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()(*(int **)(a1 + 144), (int *)&v39);
    *((_QWORD *)&v38 + 1) = v12;
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v38);
    std::__list_imp<char *>::clear(v42);
    if (v45)
      (*(void (**)(unint64_t))(*(_QWORD *)v45 + 40))(v45);
    else
      ++v49;
  }
  if (v45)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v45 + 8))(v45);
    goto LABEL_30;
  }
LABEL_28:
  if (v48)
    --*v48;
LABEL_30:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0|| (LODWORD(v39) = fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Final(a1, a2), LODWORD(v45) = 2139095040, *(float *)&v39 == INFINITY))
  {
    v14 = *(_DWORD *)(a1 + 156);
    if (v14 == 2)
    {
      v24 = *(int **)(a1 + 144);
      v25 = *(_DWORD *)(a1 + 160);
      v27 = v25 != -1 && v25 <= a2;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v32, *(_QWORD *)(a1 + 136), (a2 - v27));
      v39 = 0;
      v40 = *(float *)&v32;
      std::list<int>::list(v42, (uint64_t)v33);
      v43 = v34;
      v44 = -1;
      v28 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()(v24, (int *)&v39);
      v30 = v29;
      std::__list_imp<char *>::clear(v42);
      std::__list_imp<char *>::clear(v33);
      if (v28 || (*(float *)&v39 = v30, LODWORD(v45) = 2139095040, v30 != INFINITY))
      {
        v31 = *(_DWORD *)(a1 + 160);
        v39 = v28;
        v40 = v30;
        v41 = v31;
        v22 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        v23 = &v39;
        goto LABEL_53;
      }
    }
    else if (v14 == 1)
    {
      v15 = *(int **)(a1 + 144);
      v16 = *(_DWORD *)(a1 + 160);
      v17 = v16 != -1 && v16 <= a2;
      v18 = v17;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v35, *(_QWORD *)(a1 + 136), (a2 - v18));
      v39 = 0;
      v40 = *(float *)&v35;
      std::list<int>::list(v42, (uint64_t)v36);
      v43 = v37;
      v44 = -1;
      v19 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()(v15, (int *)&v39);
      v45 = v19;
      v46 = v20;
      std::__list_imp<char *>::clear(v42);
      std::__list_imp<char *>::clear(v36);
      if (v19)
      {
        v21 = *(_DWORD *)(a1 + 160);
        if (v21 == -1)
        {
          v21 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v21;
          *(_DWORD *)(a1 + 164) = v21 + 1;
        }
        HIDWORD(v46) = v21;
        v22 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        v23 = &v45;
LABEL_53:
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v22, v23);
      }
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADBEC224(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 16);
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D247A0;
  if (a3)
  {
    v5 = operator new();
    fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADBEC3DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D1B528;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  v4 = (_QWORD *)operator new();
  *v4 = **(_QWORD **)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v4;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Init(a1);
  return a1;
}

void sub_1ADBEC494(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1CBE8;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1ADBEC518(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  int v7;
  uint64_t v8;
  int v9;
  _QWORD v10[3];
  int v11;
  int v12;

  v1 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    v2 = result;
    if (!*(_BYTE *)(result + 44))
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        if ((result & 1) != 0)
          return result;
        v1 = *(_QWORD *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      v3 = *(int **)(v1 + 144);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v1 + 136) + 32))(&v5, *(_QWORD *)(v1 + 136), *(unsigned int *)(v2 + 40));
      v8 = 0;
      v9 = v5;
      std::list<int>::list(v10, (uint64_t)v6);
      v11 = v7;
      v12 = -1;
      v4 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>::operator()(v3, (int *)&v8);
      std::__list_imp<char *>::clear(v10);
      result = (uint64_t)std::__list_imp<char *>::clear(v6);
      if (v4)
        *(_BYTE *)(v2 + 44) = 1;
    }
  }
  return result;
}

void sub_1ADBEC62C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1CBE8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1CBE8;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Done_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) & 1) != 0)
      return *(_BYTE *)(a1 + 44) == 0;
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(_BYTE *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Next(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  ++*(_DWORD *)(a1 + 40);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if ((result & 1) == 0)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
        return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(a1);
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 0;
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::Reset(uint64_t a1)
{
  uint64_t v2;

  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  else
    *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D20D40;
  v2 = a1[20];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_1E5D21F70;
  v3 = a1[17];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFstImplBase(a1, a2);
  *(_QWORD *)v4 = &unk_1E5D20D40;
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(v4 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(v4 + 152) = *(_BYTE *)(a2 + 152);
  fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Init(v4, *(_QWORD *)(v4 + 136), 0);
  return a1;
}

void sub_1ADBEC944(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D21F70;
  v3 = v1[17];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::Expand(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADBEC9EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  fst *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *__p[2];
  char v11;
  char v12;

  v5 = fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(a1, a2, a3);
  *(_QWORD *)v5 = &unk_1E5D20CE8;
  *(_DWORD *)(v5 + 144) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(v5 + 148) = *(_DWORD *)(a3 + 20);
  *(_BYTE *)(v5 + 152) = *(_BYTE *)(a3 + 28);
  if (*(_QWORD *)(a3 + 40))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"DeterminizeFst: ", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"a state table can not be passed with transducer input", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  else
  {
    fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Init(a1, *(_QWORD *)(a1 + 136), *(_QWORD **)(a3 + 32));
  }
  return a1;
}

void sub_1ADBECB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v15 - 17));
  if (a14 < 0)
    operator delete(__p);
  *v14 = &unk_1E5D21F70;
  v17 = v14[17];
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v14);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Init(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char v21[8];
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char v27;
  char v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[8];
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;

  fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFst(&v38, a2, (uint64_t)v31);
  if (a3)
  {
    v5 = (_QWORD *)operator new();
    fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DefaultDeterminizeFilter<fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v5, (uint64_t)&v38, a3);
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_DWORD *)(a1 + 144);
  v31[0] = *(_BYTE *)(a1 + 104);
  v32 = v6;
  v33 = v7;
  v34 = 0;
  v35 = 0;
  v36 = v5;
  v37 = 0;
  fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::DeterminizeFst<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>(&v29, (uint64_t)&v38, 0, 0, (uint64_t)v31);
  v8 = *(_DWORD *)(a1 + 144);
  v9 = *(_DWORD *)(a1 + 148);
  v10 = *(_BYTE *)(a1 + 152);
  v21[0] = 1;
  v22 = 0;
  v23 = v8;
  v24 = 1;
  v25 = v9;
  v26 = v9;
  v27 = v10;
  v28 = v10;
  fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FactorWeightFst(&v19, (uint64_t)&v29, (uint64_t)v21);
  v11 = (_QWORD *)operator new();
  LODWORD(v18) = *(_DWORD *)(a1 + 148);
  BYTE4(v18) = 0;
  fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFst(v11, (uint64_t)&v19, &v18);
  *(_QWORD *)(a1 + 160) = v11;
  v19 = &unk_1E5D26FA8;
  v12 = v20;
  if (v20)
  {
    v13 = *(_DWORD *)(v20 + 56) - 1;
    *(_DWORD *)(v20 + 56) = v13;
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v29 = &unk_1E5D27898;
  v14 = v30;
  if (v30)
  {
    v15 = *(_DWORD *)(v30 + 56) - 1;
    *(_DWORD *)(v30 + 56) = v15;
    if (!v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v38 = &unk_1E5D24170;
  result = v39;
  if (v39)
  {
    v17 = *(_DWORD *)(v39 + 56) - 1;
    *(_DWORD *)(v39 + 56) = v17;
    if (!v17)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADBECD40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v4;
  int v5;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  *(_QWORD *)(v2 - 48) = &unk_1E5D24170;
  v4 = *(_DWORD **)(v2 - 40);
  if (v4)
  {
    v5 = v4[14] - 1;
    v4[14] = v5;
    if (!v5)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(_QWORD *a1)
{
  fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(v2, a1);
  return v2;
}

void sub_1ADBECF2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40BF12C28CLL);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Expand(uint64_t a1, int a2)
{
  char *v4;
  unint64_t i;
  uint64_t v6;
  char *MutableState;
  char *v8;
  unint64_t v9;

  fst::ArcIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::ArcIterator(&v8, *(_QWORD *)(a1 + 160), a2);
  v4 = v8;
  for (i = v9; ; i = ++v9)
  {
    v6 = *((_QWORD *)v4 + 3);
    if (i >= (*((_QWORD *)v4 + 4) - v6) >> 4)
      break;
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, (_OWORD *)(v6 + 16 * i));
    v4 = v8;
  }
  --*((_DWORD *)v4 + 13);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADBECFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 24))(*(_QWORD *)(a1 + 160));
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeFinal(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 32))(*(_QWORD *)(a1 + 160));
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::~FactorWeightFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D26FA8;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D27898;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D24170;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFst(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v8[8];
  uint64_t v9;

  v6 = operator new();
  v8[0] = 1;
  v9 = 0;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFstImpl(v6, a2, a3, (uint64_t)v8);
  *a1 = &unk_1E5D23248;
  a1[1] = v6;
  return a1;
}

void sub_1ADBED190(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D24170;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D23248;
  return v4;
}

void sub_1ADBED360(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADBED438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADBED518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::StateIterator(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1ADBED5AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CacheBaseImpl(a1, a4) = &unk_1E5D1B330;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(_QWORD *)(a1 + 144) = operator new();
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Init(a1);
  return a1;
}

void sub_1ADBED664(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

unint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Init(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  unint64_t v7;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 112))(*(_QWORD *)(a1 + 136));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v2)
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      v4 = 0;
    *(_QWORD *)(a1 + 40) = v4;
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = 0;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if ((_DWORD)result == -1)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 0x3FFFFFFF0004, 0);
    result = fst::ProjectProperties(v7, 1);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | result & 0x3FFCFFFF0007;
    if (*(_DWORD *)(a1 + 156) == 2)
      *(_DWORD *)(a1 + 160) = 0;
  }
  return result;
}

void sub_1ADBED7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0)|| (fst::ProjectProperties(0, 1) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D22A20;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B8E0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::VectorCacheStore((_QWORD *)v4, (_BYTE *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 72) = v5 == 0;
  *(_DWORD *)(v4 + 76) = -1;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = *(_BYTE *)a2;
  if (v5 <= 0x1FA0)
    v5 = 8096;
  *(_QWORD *)(v4 + 96) = v5;
  *(_BYTE *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

void sub_1ADBED978(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D22A20;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::VectorCacheStore(_QWORD *a1, _BYTE *a2)
{
  *(_BYTE *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1ADBEDAD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  std::__list_imp<char *>::clear(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B8E0;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~FstImpl((uint64_t)a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::~VectorCacheStore(_QWORD *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D1B330;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3)
      MEMORY[0x1AF44D190](v3, 0xC400A2AC0F1);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl((_QWORD *)a1);
}

_QWORD *fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  int *v7;
  int v8;
  int *v9;
  _QWORD *v10;
  int v11;
  _BOOL4 v13;
  float v14;
  fst *v15;
  _QWORD *v16;
  int *v17;
  _QWORD *v18;
  _BOOL4 v20;
  float v21;
  _QWORD *v22;
  int *v23;
  int v25;
  _QWORD v26[3];
  int v27;
  int v28;
  _QWORD v29[3];
  int v30;
  int v31;
  _QWORD v32[3];
  int v33;
  int v34;
  _QWORD v35[3];
  int v36;
  int v37;
  _QWORD v38[3];
  int v39;
  void *v40;
  float v41;
  int v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  _BYTE v47[24];
  int v48;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    v6 = *(_DWORD *)(a1 + 156);
    if (v6 == 1)
    {
      v8 = *(_DWORD *)(a1 + 160);
      if (v8 != a2)
      {
        v20 = v8 != -1 && v8 <= a2;
        v21 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v20));
        v40 = 0;
        v41 = v21;
        v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          v23 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
          v28 = *v23;
          v22 = v29;
          std::list<int>::list(v29, (uint64_t)(v23 + 2));
          v30 = v23[8];
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v28);
        }
        else
        {
          v31 = v46;
          v22 = v32;
          std::list<int>::list(v32, (uint64_t)v47);
          v33 = v48;
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v31);
        }
        std::__list_imp<char *>::clear(v22);
        v18 = v47;
        goto LABEL_35;
      }
      v9 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
      v34 = *v9;
      v10 = v35;
      std::list<int>::list(v35, (uint64_t)(v9 + 2));
      v36 = v9[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v34);
    }
    else
    {
      if (v6 != 2)
      {
        v11 = *(_DWORD *)(a1 + 160);
        v13 = v11 != -1 && v11 <= a2;
        v14 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v13));
        v40 = 0;
        v41 = v14;
        v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(&v40, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(&v40, "ERROR");
          v15 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&v40);
          v16 = (_QWORD *)fst::cerr(v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
          if (v43 < 0)
            operator delete(v40);
          *(_QWORD *)(a1 + 8) |= 4uLL;
        }
        v37 = v46;
        std::list<int>::list(v38, (uint64_t)v47);
        v39 = v48;
        fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v37);
        std::__list_imp<char *>::clear(v38);
        v18 = v47;
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 160) == a2)
        v7 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
      else
        v7 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
      v17 = v7;
      v25 = *v7;
      v10 = v26;
      std::list<int>::list(v26, (uint64_t)(v7 + 2));
      v27 = v17[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v25);
    }
    v18 = v10;
LABEL_35:
    std::__list_imp<char *>::clear(v18);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1ADBEDF08(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v1 - 105));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  std::__list_imp<char *>::clear((_QWORD *)(v1 - 88));
  _Unwind_Resume(a1);
}

_QWORD *fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()@<X0>(float *a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  float v5;
  int v6;
  uint64_t *v7;
  int *v8;
  _DWORD *v9;
  int *v10;
  int v11;
  int *v12;
  int v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];
  int v18;
  int v19;
  _QWORD v20[3];
  int v21;
  _DWORD v22[8];
  int v23;
  _QWORD v24[3];
  int v25;
  int v26;
  _QWORD v27[3];
  int v28;
  _DWORD v29[9];
  float v30;

  if (*((_DWORD *)a1 + 3) == -1)
  {
    v30 = 0.0;
    v30 = a1[2];
    v29[8] = 2139095040;
    if (v30 == INFINITY)
    {
      v12 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
      v23 = *v12;
      v7 = v24;
      std::list<int>::list(v24, (uint64_t)(v12 + 2));
      v25 = v12[8];
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = v23;
      std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v24);
      *(_DWORD *)(a2 + 40) = v25;
      *(_DWORD *)(a2 + 48) = -1;
      return std::__list_imp<char *>::clear(v7);
    }
    v8 = (int *)fst::StringWeight<int,(fst::StringType)2>::One();
    v26 = *v8;
    v7 = v27;
    std::list<int>::list(v27, (uint64_t)(v8 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v28, &v26, a1[2]);
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = v28;
    v9 = v29;
    std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v29);
    *(_DWORD *)(a2 + 40) = v29[6];
    *(_DWORD *)(a2 + 48) = -1;
    goto LABEL_7;
  }
  v5 = *a1;
  v4 = *((_DWORD *)a1 + 1);
  if (!v4)
  {
    v10 = (int *)fst::StringWeight<int,(fst::StringType)2>::One();
    v19 = *v10;
    v7 = v20;
    std::list<int>::list(v20, (uint64_t)(v10 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v21, &v19, a1[2]);
    v11 = *((_DWORD *)a1 + 3);
    *(float *)a2 = v5;
    *(float *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v21;
    v9 = v22;
    std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v22);
    *(_DWORD *)(a2 + 40) = v22[6];
    *(_DWORD *)(a2 + 48) = v11;
LABEL_7:
    std::__list_imp<char *>::clear(v9);
    return std::__list_imp<char *>::clear(v7);
  }
  fst::StringWeight<int,(fst::StringType)2>::StringWeight((uint64_t)&v14, v4);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v16, &v14, a1[2]);
  v6 = *((_DWORD *)a1 + 3);
  *(float *)a2 = v5;
  *(float *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v16;
  std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v17);
  *(_DWORD *)(a2 + 40) = v18;
  *(_DWORD *)(a2 + 48) = v6;
  std::__list_imp<char *>::clear(v17);
  v7 = &v15;
  return std::__list_imp<char *>::clear(v7);
}

void sub_1ADBEE18C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  char *MutableState;
  int v5;
  _QWORD *result;
  int v7;
  _QWORD v8[3];
  int v9;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  v5 = a3[8];
  v9 = v5;
  *(_DWORD *)MutableState = v7;
  if (MutableState != (char *)&v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)MutableState + 1, v8[1], (uint64_t)v8);
    v5 = v9;
  }
  *((_DWORD *)MutableState + 8) = v5;
  result = std::__list_imp<char *>::clear(v8);
  *((_DWORD *)MutableState + 20) |= 9u;
  return result;
}

void sub_1ADBEE278(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::One();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One(void)::one = v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One(void)::one;
}

void sub_1ADBEE324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Zero();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero(void)::zero = v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero(void)::zero;
}

void sub_1ADBEE3F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight(uint64_t a1, int *a2, float a3)
{
  int v6;
  _QWORD v7[3];

  v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::ProductWeight(a1, &v6, a3);
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1ADBEE490(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  char *MutableState;
  char *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *((_DWORD *)MutableState + 20);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 20) = v5 | 4;
      v6 = *((_QWORD *)MutableState + 8) - *((_QWORD *)MutableState + 7) + *(_QWORD *)(a1 + 112) + 88;
      *(_QWORD *)(a1 + 112) = v6;
      *(_BYTE *)(a1 + 104) = 1;
      if (v6 > *(_QWORD *)(a1 + 96))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  char *result;
  uint64_t v5;
  char *MutableState;

  v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2)
    return *(char **)(a1 + 80);
  if (!*(_BYTE *)(a1 + 72))
    return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 76) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
    *((_DWORD *)MutableState + 20) |= 4u;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::reserve((uint64_t *)MutableState + 7, 0x80uLL);
    return *(char **)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(v5 + 84))
  {
    *(_DWORD *)(v5 + 80) &= ~4u;
    *(_BYTE *)(a1 + 72) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 76) = a2;
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Reset(v5);
  result = *(char **)(a1 + 80);
  *((_DWORD *)result + 20) |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *MutableState;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  fst *v27;
  _QWORD *v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37[2];
  char v38;
  char v39;
  char v40;
  void *__p[2];
  char v42;

  if (*(_BYTE *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0)
        operator delete(__p[0]);
    }
    v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      v18 = *(_DWORD *)(v17 + 16);
      if (v18)
        v19 = v18 - 1;
      else
        v19 = *(_DWORD *)(a1 + 76);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>::GetMutableState(a1, v19);
      v21 = *(_QWORD *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 21))
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v22 = *((_DWORD *)MutableState + 20);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              v23 = *((_QWORD *)MutableState + 8) - *((_QWORD *)MutableState + 7) + 88;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Delete((_QWORD *)a1);
            v17 = *(_QWORD *)(a1 + 56);
            continue;
          }
        }
        else
        {
          v22 = *((_DWORD *)MutableState + 20);
          if ((v22 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      *((_DWORD *)MutableState + 20) &= ~8u;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 112) <= v16)
    {
      v24 = *(_QWORD *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          v25 = *(_QWORD *)(a1 + 96);
          do
          {
            v25 *= 2;
            v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(_QWORD *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        v28 = (_QWORD *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      v30 = (_QWORD *)fst::cerr(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0)
        operator delete(v37[0]);
    }
  }
}

void sub_1ADBEE9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    v14 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v14);
  }
  else
  {
    v8 = *(char **)(v6 + 8 * a2);
    if (v8)
      return v8;
  }
  v8 = (char *)operator new(0x58uLL);
  v9 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  *(_DWORD *)v8 = *v9;
  std::list<int>::list((_QWORD *)v8 + 1, (uint64_t)(v9 + 2));
  *((_DWORD *)v8 + 8) = v9[8];
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = v8;
  if (*(_BYTE *)a1)
  {
    v10 = operator new(0x18uLL);
    v10[4] = a2;
    v12 = *(_QWORD *)(a1 + 32);
    v11 = (_QWORD *)(a1 + 32);
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *v11 = v10;
    ++v11[2];
  }
  return v8;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Reset(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  v3 = result;
  *(_DWORD *)a1 = *(_DWORD *)result;
  if (result != a1)
    result = (uint64_t)std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 8), *(_QWORD *)(result + 16), result + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v3 + 32);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4 != v5)
  {
    do
    {
      v6 = v4 - 56;
      result = (uint64_t)std::__list_imp<char *>::clear((_QWORD *)(v4 - 40));
      v4 = v6;
    }
    while (v6 != v5);
  }
  *(_QWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADBEEC44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_QWORD *)(v12 - 56) = *(_QWORD *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((_QWORD *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADBEED68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 64) - *(_QWORD *)(*(_QWORD *)v5 + 56)) >> 3);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v7;
  __int128 *v8;
  int v9;
  int v10;
  uint64_t *MutableState;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  float v24;
  float v25;
  int v26;
  int v27;
  _BOOL4 v29;
  unsigned int v30;
  int v31;
  int v32;
  _BOOL4 v34;
  unsigned int v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  BOOL v44;
  _BOOL4 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  int v51;
  _QWORD v52[3];
  float v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  unint64_t v58;
  float v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  int v67;
  __int128 v68;

  v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetArcs(a1, a2);
    return;
  }
  v5 = *(_QWORD *)(a1 + 136);
  v7 = v4 != -1 && v4 <= a2;
  v58 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v5 + 136))(v5, (a2 - v7), &v54);
  while (1)
  {
    if (!v54)
    {
      if (v58 >= v56)
        goto LABEL_28;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54))
      break;
    if (v54)
    {
      v8 = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)v54 + 32))();
      goto LABEL_16;
    }
LABEL_15:
    v8 = (__int128 *)(v55 + 16 * v58);
LABEL_16:
    v68 = *v8;
    v9 = HIDWORD(v68);
    v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= SHIDWORD(v68))
      v9 = HIDWORD(v68) + 1;
    if (v9 >= *(_DWORD *)(a1 + 164))
      *(_DWORD *)(a1 + 164) = v9 + 1;
    HIDWORD(v68) = v9;
    fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()((float *)&v68, (uint64_t)&v61);
    MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(MutableState, (uint64_t)&v61);
    std::__list_imp<char *>::clear(&v63);
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54);
    else
      ++v58;
  }
  if (v54)
  {
    (*(void (**)(void))(*(_QWORD *)v54 + 8))();
    goto LABEL_30;
  }
LABEL_28:
  if (v57)
    --*v57;
LABEL_30:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
LABEL_52:
    v26 = *(_DWORD *)(a1 + 156);
    if (v26 == 1)
    {
      v32 = *(_DWORD *)(a1 + 160);
      v34 = v32 != -1 && v32 <= a2;
      *(float *)&v35 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v34));
      v54 = 0;
      v55 = v35 | 0xFFFFFFFF00000000;
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()((float *)&v54, (uint64_t)&v61);
      if (v61)
      {
        v36 = *(_DWORD *)(a1 + 160);
        if (v36 == -1)
        {
          v36 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v36;
          *(_DWORD *)(a1 + 164) = v36 + 1;
        }
        v67 = v36;
        v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(v37, (uint64_t)&v61);
      }
      v14 = &v63;
      goto LABEL_96;
    }
    if (v26 != 2)
      goto LABEL_97;
    v27 = *(_DWORD *)(a1 + 160);
    v29 = v27 != -1 && v27 <= a2;
    *(float *)&v30 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v29));
    v54 = 0;
    v55 = v30 | 0xFFFFFFFF00000000;
    fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()((float *)&v54, (uint64_t)&v61);
    if (v61)
    {
      v31 = v62;
    }
    else
    {
      v38 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
      v31 = v62;
      if ((_DWORD)v62)
        v39 = v65 + 1;
      else
        v39 = 0;
      if (*(_DWORD *)v38)
        v40 = *(_QWORD *)(v38 + 24) + 1;
      else
        v40 = 0;
      if (v39 == v40)
      {
        v41 = 0;
        v42 = v64;
        v43 = (uint64_t *)(v38 + 16);
        v44 = (_DWORD)v62 && (_DWORD)v62 == *(_DWORD *)v38;
        v45 = !v44;
        v46 = !v45;
        while (1)
        {
          v47 = *v43;
          if ((v41 & 1) == 0 && !v46)
            break;
          if ((uint64_t *)v42 == &v63)
            goto LABEL_93;
          if (*(_DWORD *)(v42 + 16) != *(_DWORD *)(v47 + 16))
            goto LABEL_94;
          v42 = *(_QWORD *)(v42 + 8);
          v43 = (uint64_t *)(v47 + 8);
          v41 = 1;
        }
        if ((_DWORD)v62)
          goto LABEL_94;
LABEL_93:
        *(float *)&v54 = v66;
        LODWORD(v68) = 0;
        LODWORD(v68) = *(_DWORD *)(v38 + 32);
        if (v66 == *(float *)&v68)
          goto LABEL_95;
      }
    }
LABEL_94:
    v48 = v61;
    v51 = v31;
    std::list<int>::list(v52, (uint64_t)&v63);
    v53 = v66;
    v49 = *(_DWORD *)(a1 + 160);
    v54 = v48;
    LODWORD(v55) = v51;
    std::list<int>::list(&v56, (uint64_t)v52);
    v59 = v53;
    v60 = v49;
    v50 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(v50, (uint64_t)&v54);
    std::__list_imp<char *>::clear(&v56);
    std::__list_imp<char *>::clear(v52);
LABEL_95:
    v14 = &v63;
LABEL_96:
    std::__list_imp<char *>::clear(v14);
    goto LABEL_97;
  }
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final(a1, a2, (uint64_t)&v61);
  v13 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  v14 = &v62;
  if ((_DWORD)v61)
    v15 = v64 + 1;
  else
    v15 = 0;
  if (*(_DWORD *)v13)
    v16 = *(_QWORD *)(v13 + 24) + 1;
  else
    v16 = 0;
  if (v15 != v16)
    goto LABEL_96;
  v17 = 0;
  v18 = v63;
  v19 = (uint64_t *)(v13 + 16);
  if ((_DWORD)v61)
    v20 = (_DWORD)v61 == *(_DWORD *)v13;
  else
    v20 = 0;
  v21 = !v20;
  v22 = v21 ^ 1;
  while (1)
  {
    v23 = *v19;
    if ((v17 & 1) == 0 && !v22)
      break;
    if ((uint64_t *)v18 == &v62)
      goto LABEL_51;
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v23 + 16))
      goto LABEL_96;
    v18 = *(_QWORD *)(v18 + 8);
    v19 = (uint64_t *)(v23 + 8);
    v17 = 1;
  }
  if ((_DWORD)v61)
    goto LABEL_96;
LABEL_51:
  LODWORD(v54) = v65;
  LODWORD(v68) = 0;
  LODWORD(v68) = *(_DWORD *)(v13 + 32);
  v24 = *(float *)&v65;
  v25 = *(float *)&v68;
  std::__list_imp<char *>::clear(&v62);
  if (v24 == v25)
    goto LABEL_52;
LABEL_97:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetArcs(a1, a2);
}

void sub_1ADBEF2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetArcs(uint64_t a1, int a2)
{
  char *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = *((_QWORD *)MutableState + 7);
  v6 = *((_QWORD *)MutableState + 8) - v5;
  if (v6)
  {
    v7 = v6 / 56;
    v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 48);
    do
    {
      v11 = *v9;
      v9 += 14;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 20) |= 0xAu;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 104) && (*(_BYTE *)(a2 + 80) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56) + *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v4;
    if (v4 > *(_QWORD *)(a1 + 96))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GC(a1, (char *)a2, 0, 0.666);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 7;
  v4 = a1[8];
  if (v4 >= a1[9])
  {
    result = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const&>(v3, a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const&>((uint64_t)v3, a2);
    result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

_QWORD *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  result = std::list<int>::list((_QWORD *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1ADBEF518(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[56 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((_QWORD *)v11 + 2, a2 + 16);
  v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADBEF654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 40);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 48);
}

unint64_t fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1ADBEF834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::vector<unsigned int>::pointer end;
  unsigned int *v47;
  std::vector<unsigned int>::pointer begin;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  unsigned int *v54;
  unsigned int v55;
  std::vector<unsigned int>::pointer v56;
  unsigned int *v57;
  std::vector<unsigned int>::pointer v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  unsigned int *v64;
  unsigned int v65;
  unint64_t v66;
  std::vector<unsigned int>::pointer v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  std::vector<unsigned int>::pointer v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t *v83;
  BOOL v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t *v92;
  BOOL v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _DWORD *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  std::vector<unsigned int> v106;
  std::vector<unsigned int> v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  float v116;
  float v117;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v115 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v111 = (uint64_t *)&v115;
      fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>(a1, &v108, 0);
      v8 = v115;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0)
      goto LABEL_211;
    v11 = a2 & 0xC0000;
    v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0)
      v12 = 0x10425A850000;
    v13 = v8 | v12;
    v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0)
      v13 |= 0x100000uLL;
    v115 = v13;
    memset(&v107, 0, sizeof(v107));
    memset(&v106, 0, sizeof(v106));
    v105 = 0;
    v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v103);
    v16 = 0;
LABEL_12:
    if (!v103)
    {
      if ((int)v105 >= v104)
        goto LABEL_203;
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103))
    {
      if (v103)
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v103 + 24))();
LABEL_18:
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17);
        v110 = (uint64_t)&v110;
        v111 = &v110;
        v112 = 0;
        LODWORD(v109) = 0;
        v107.__end_ = v107.__begin_;
        v106.__end_ = v106.__begin_;
        if (v11)
          std::vector<int>::reserve(&v107, v18);
        if (v14)
          std::vector<int>::reserve(&v106, v18);
        v102 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v17, &v98);
        v19 = 1;
        while (1)
        {
          if (v98)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98))
            {
              if (v98)
              {
                (*(void (**)(void))(*(_QWORD *)v98 + 8))();
              }
              else
              {
LABEL_132:
                if (v101)
                  --*v101;
              }
              v15 = a1;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14)
                  goto LABEL_152;
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v106.__end_ - (char *)v106.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  v72 = v106.__end_ - v106.__begin_;
                  if (v72 <= 2)
                    v72 = 2;
                  v73 = v106.__begin_ + 1;
                  v74 = *v106.__begin_;
                  v75 = v72 - 1;
                  while (1)
                  {
                    v77 = *v73++;
                    v76 = v77;
                    if (v77 == v74)
                      break;
                    v74 = v76;
                    if (!--v75)
                      goto LABEL_152;
                  }
                  v115 = v115 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              v66 = v107.__end_ - v107.__begin_;
              if (v66 <= 2)
                v66 = 2;
              v67 = v107.__begin_ + 1;
              v68 = *v107.__begin_;
              v69 = v66 - 1;
              while (1)
              {
                v71 = *v67++;
                v70 = v71;
                if (v71 == v68)
                  break;
                v68 = v70;
                if (!--v69)
                  goto LABEL_141;
              }
              v115 = v115 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14)
                goto LABEL_142;
LABEL_152:
              if (v16 >= 1)
                v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v98, a1, v17);
              v78 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
              if ((_DWORD)v98)
                v79 = (char *)v101 + 1;
              else
                v79 = 0;
              if (*(_DWORD *)v78)
                v80 = *(_QWORD *)(v78 + 24) + 1;
              else
                v80 = 0;
              if (v79 != (char *)v80)
                goto LABEL_174;
              v81 = 0;
              v82 = v100;
              v83 = (uint64_t *)(v78 + 16);
              v84 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v78;
              v85 = !v84;
              while (1)
              {
                v86 = *v83;
                if ((v81 & 1) == 0 && v85)
                  break;
                if ((uint64_t *)v82 == &v99)
                  goto LABEL_173;
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16))
                  goto LABEL_174;
                v82 = *(_QWORD *)(v82 + 8);
                v83 = (uint64_t *)(v86 + 8);
                v81 = 1;
              }
              if ((_DWORD)v98)
                goto LABEL_174;
LABEL_173:
              v117 = *(float *)&v102;
              v116 = 0.0;
              v116 = *(float *)(v78 + 32);
              if (*(float *)&v102 == v116)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 40))(a1, v17, *(float *)&v102) != 1)v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              else
              {
LABEL_174:
                v87 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
                if ((_DWORD)v98)
                  v88 = (char *)v101 + 1;
                else
                  v88 = 0;
                if (*(_DWORD *)v87)
                  v89 = *(_QWORD *)(v87 + 24) + 1;
                else
                  v89 = 0;
                if (v88 != (char *)v89)
                  goto LABEL_194;
                v90 = 0;
                v91 = v100;
                v92 = (uint64_t *)(v87 + 16);
                v93 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v87;
                v94 = !v93;
                while (1)
                {
                  v95 = *v92;
                  if ((v90 & 1) == 0 && v94)
                    break;
                  if ((uint64_t *)v91 == &v99)
                    goto LABEL_193;
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16))
                    goto LABEL_194;
                  v91 = *(_QWORD *)(v91 + 8);
                  v92 = (uint64_t *)(v95 + 8);
                  v90 = 1;
                }
                if ((_DWORD)v98)
                  goto LABEL_194;
LABEL_193:
                v117 = *(float *)&v102;
                v116 = 0.0;
                v116 = *(float *)(v87 + 32);
                if (*(float *)&v102 != v116)
LABEL_194:
                  v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                ++v16;
              }
              std::__list_imp<char *>::clear(&v99);
              std::__list_imp<char *>::clear(&v110);
              if (v103)
                (*(void (**)(uint64_t))(*(_QWORD *)v103 + 32))(v103);
              else
                ++v105;
              goto LABEL_12;
            }
            if (v98)
            {
              v20 = (*(uint64_t (**)(void))(*(_QWORD *)v98 + 32))();
              goto LABEL_29;
            }
          }
          else if (v102 >= v100)
          {
            goto LABEL_132;
          }
          v20 = v99 + 56 * v102;
LABEL_29:
          v21 = *(_DWORD *)v20;
          v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            v115 = v115 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22)
                goto LABEL_35;
              goto LABEL_39;
            }
            v23 = v115;
          }
          else
          {
            v23 = v115 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          v115 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0)
              goto LABEL_40;
            goto LABEL_44;
          }
LABEL_39:
          v115 = v115 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v108)
              v115 = v115 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            if (v22 < SHIDWORD(v108))
              v115 = v115 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
          }
LABEL_44:
          v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
          v25 = *(_DWORD *)(v20 + 8);
          if (v25)
            v26 = *(_QWORD *)(v20 + 32) + 1;
          else
            v26 = 0;
          if (*(_DWORD *)v24)
            v27 = *(_QWORD *)(v24 + 24) + 1;
          else
            v27 = 0;
          if (v26 != v27)
            goto LABEL_64;
          v28 = 0;
          v29 = (uint64_t *)(v20 + 24);
          v30 = (uint64_t *)(v24 + 16);
          v31 = v25 && v25 == *(_DWORD *)v24;
          v32 = !v31;
          while (1)
          {
            v33 = *v29;
            v34 = *v30;
            if ((v28 & 1) == 0 && v32)
              break;
            if (v33 == v20 + 16)
              goto LABEL_63;
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16))
              goto LABEL_64;
            v29 = (uint64_t *)(v33 + 8);
            v30 = (uint64_t *)(v34 + 8);
            v28 = 1;
          }
          if (v25)
            goto LABEL_64;
LABEL_63:
          v117 = 0.0;
          v117 = *(float *)(v20 + 40);
          v116 = 0.0;
          v116 = *(float *)(v24 + 32);
          if (v117 != v116)
          {
LABEL_64:
            v35 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
            v25 = *(_DWORD *)(v20 + 8);
            if (v25)
              v36 = *(_QWORD *)(v20 + 32) + 1;
            else
              v36 = 0;
            if (*(_DWORD *)v35)
              v37 = *(_QWORD *)(v35 + 24) + 1;
            else
              v37 = 0;
            if (v36 != v37)
              goto LABEL_84;
            v38 = 0;
            v39 = (uint64_t *)(v20 + 24);
            v40 = (uint64_t *)(v35 + 16);
            v41 = v25 && v25 == *(_DWORD *)v35;
            v42 = !v41;
            while (1)
            {
              v43 = *v39;
              v44 = *v40;
              if ((v38 & 1) == 0 && v42)
                break;
              if (v43 == v20 + 16)
                goto LABEL_83;
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16))
                goto LABEL_84;
              v39 = (uint64_t *)(v43 + 8);
              v40 = (uint64_t *)(v44 + 8);
              v38 = 1;
            }
            if (v25)
              goto LABEL_84;
LABEL_83:
            v117 = 0.0;
            v117 = *(float *)(v20 + 40);
            v116 = 0.0;
            v116 = *(float *)(v35 + 32);
            if (v117 != v116)
LABEL_84:
              v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17)
            v115 = v115 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          if (v45 != (_DWORD)v17 + 1)
            v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          v108 = *(_QWORD *)v20;
          LODWORD(v109) = v25;
          if (&v108 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v110, *(_QWORD *)(v20 + 24), v20 + 16);
            v45 = *(_DWORD *)(v20 + 48);
          }
          v113 = *(_DWORD *)(v20 + 40);
          v114 = v45;
          if (v11)
          {
            end = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              begin = v107.__begin_;
              v49 = v107.__end_ - v107.__begin_;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_213;
              v51 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v52);
                begin = v107.__begin_;
                end = v107.__end_;
              }
              else
              {
                v53 = 0;
              }
              v54 = (unsigned int *)&v53[4 * v49];
              *v54 = *(_DWORD *)v20;
              v47 = v54 + 1;
              while (end != begin)
              {
                v55 = *--end;
                *--v54 = v55;
              }
              v107.__begin_ = v54;
              v107.__end_ = v47;
              v107.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v107.__end_ = *(_DWORD *)v20;
              v47 = end + 1;
            }
            v107.__end_ = v47;
          }
          if (v14)
          {
            v56 = v106.__end_;
            if (v106.__end_ >= v106.__end_cap_.__value_)
            {
              v58 = v106.__begin_;
              v59 = v106.__end_ - v106.__begin_;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62)
LABEL_213:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v61 = (char *)v106.__end_cap_.__value_ - (char *)v106.__begin_;
              if (((char *)v106.__end_cap_.__value_ - (char *)v106.__begin_) >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v62 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v106.__end_cap_, v62);
                v58 = v106.__begin_;
                v56 = v106.__end_;
              }
              else
              {
                v63 = 0;
              }
              v64 = (unsigned int *)&v63[4 * v59];
              *v64 = *(_DWORD *)(v20 + 4);
              v57 = v64 + 1;
              while (v56 != v58)
              {
                v65 = *--v56;
                *--v64 = v65;
              }
              v106.__begin_ = v64;
              v106.__end_ = v57;
              v106.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *v106.__end_ = *(_DWORD *)(v20 + 4);
              v57 = v56 + 1;
            }
            v106.__end_ = v57;
          }
          if (v98)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v98 + 40))(v98);
            v19 = 0;
          }
          else
          {
            v19 = 0;
            ++v102;
          }
        }
      }
LABEL_17:
      v17 = v105;
      goto LABEL_18;
    }
    if (v103)
      (*(void (**)(void))(*(_QWORD *)v103 + 8))();
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
    {
      v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v106.__begin_)
    {
      v106.__end_ = v106.__begin_;
      operator delete(v106.__begin_);
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    v8 = v115;
LABEL_211:
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1ADBF02BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 48);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 48);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 48);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 48), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 56 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19A58;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1ADBF0A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19A58;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::FinishState(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t result;
  unint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int *i;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  float v32;
  float v33;
  uint64_t v34;
  _QWORD v35[3];
  float v36;
  float v37;
  float v38;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v34);
  v6 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  if ((_DWORD)v34)
    v7 = v35[2] + 1;
  else
    v7 = 0;
  if (*(_DWORD *)v6)
    v8 = *(_QWORD *)(v6 + 24) + 1;
  else
    v8 = 0;
  if (v7 == v8)
  {
    v9 = 0;
    v10 = v35[1];
    v11 = (uint64_t *)(v6 + 16);
    if ((_DWORD)v34)
      v12 = (_DWORD)v34 == *(_DWORD *)v6;
    else
      v12 = 0;
    v13 = !v12;
    v14 = v13 ^ 1;
    while (1)
    {
      v15 = *v11;
      if ((v9 & 1) == 0 && !v14)
        break;
      if ((_QWORD *)v10 == v35)
        goto LABEL_42;
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16))
        goto LABEL_21;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = (uint64_t *)(v15 + 8);
      v9 = 1;
    }
    if ((_DWORD)v34)
      goto LABEL_21;
LABEL_42:
    v38 = v36;
    v37 = 0.0;
    v37 = *(float *)(v6 + 32);
    v32 = v36;
    v33 = v37;
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  v17 = a2;
  *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  v18 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17))
    goto LABEL_36;
  v19 = 0;
  v20 = *(_QWORD **)(a1 + 80);
  v21 = v20[1];
  v22 = **(_QWORD **)(a1 + 16);
  v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    v24 = *v23--;
    v19 |= *(_QWORD *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while ((_DWORD)v24 != a2);
  v25 = *(_QWORD **)a1;
  v26 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v21 - 4); ; --i)
  {
    v28 = *i;
    if (v25)
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    result = v28 >> 6;
    v29 = 1 << v28;
    if ((v19 & 1) == 0)
      break;
    *(_QWORD *)(v22 + 8 * result) |= v29;
    *(_QWORD *)(v26 + 8 * result) &= ~v29;
    if ((_DWORD)v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(_QWORD *)(v26 + 8 * result) &= ~v29;
  if ((_DWORD)v28 != a2)
    goto LABEL_33;
  v20[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    v30 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
      *(_QWORD *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3))
      *(_DWORD *)(v18 + 4 * a3) = v31;
  }
  return result;
}

void sub_1ADBF0D90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19A58;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19A58;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19A58;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADBF0E10(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1AA10;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADBF0EF8(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1AA10;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADBF1304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    v10 = v27 + 56 * v28;
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v25 = 0x4000;
    if (v13 > 0x4000)
      v25 = v13;
    *(_QWORD *)(a1 + 8) = v25;
    v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(uint64_t **)(a1 + 16);
    v15 = *(uint64_t **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[7 * v13];
  v16 = v26;
  v17 = v27;
  v19 = v28;
  v18 = v29;
  if (v29)
    ++*v29;
  v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    v24 = v15 - 7;
    *v24 = *(_QWORD *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(_QWORD *)(v23 + 24), v23 + 16);
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 56 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1ADBF1564(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D24170;
  if (a3)
  {
    v5 = operator new();
    fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADBF161C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D1B330;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  *(_QWORD *)(a1 + 144) = operator new();
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Init(a1);
  return a1;
}

void sub_1ADBF16C4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v13[8];
  unint64_t v14;

  *(_QWORD *)a1 = &unk_1E5D22A20;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B8E0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v13[0] = *(_BYTE *)(a1 + 104);
  v14 = v7;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::VectorCacheStore((_QWORD *)v6, v13);
  v8 = v14;
  *(_BYTE *)(v6 + 72) = v14 == 0;
  *(_DWORD *)(v6 + 76) = -1;
  *(_QWORD *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 88) = v13[0];
  if (v8 <= 0x1FA0)
    v8 = 8096;
  *(_QWORD *)(v6 + 96) = v8;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v9 = 1;
  else
    v9 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v9;
  if (((a3 ^ 1) & 1) == 0)
  {
    v10 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>::operator=(v6, v10);
    v11 = *(_OWORD *)(v10 + 104);
    *(_OWORD *)(v6 + 88) = *(_OWORD *)(v10 + 88);
    *(_OWORD *)(v6 + 104) = v11;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1ADBF1850(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  char *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x58uLL);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CacheState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::list<int>::list((_QWORD *)(a1 + 8), a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*>>((_QWORD *)(a1 + 56), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
  *(_QWORD *)(a1 + 80) = *(unsigned int *)(a2 + 80);
  return a1;
}

void sub_1ADBF1B1C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADBF1B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a2 + v7;
      v9 = a4 + v7;
      *(_QWORD *)v9 = *(_QWORD *)(a2 + v7);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + v7 + 8);
      std::list<int>::list((_QWORD *)(a4 + v7 + 16), a2 + v7 + 16);
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(a2 + v7 + 40);
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (v8 + 56 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADBF1C40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 40;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1C9A8;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1ADBF1CD4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  int v6;
  uint64_t v7;
  _QWORD v8[5];

  v1 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    v2 = result;
    if (!*(_BYTE *)(result + 44))
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        if ((result & 1) != 0)
          return result;
        v1 = *(_QWORD *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      v3 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 136) + 32))(*(_QWORD *)(v1 + 136), *(unsigned int *)(v2 + 40));
      v4 = 0;
      v5 = v3;
      v6 = -1;
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()((float *)&v4, (uint64_t)&v7);
      if (v7)
        *(_BYTE *)(v2 + 44) = 1;
      return (uint64_t)std::__list_imp<char *>::clear(v8);
    }
  }
  return result;
}

_QWORD *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1C9A8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1C9A8;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Done_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) & 1) != 0)
      return *(_BYTE *)(a1 + 44) == 0;
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(_BYTE *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Next(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  ++*(_DWORD *)(a1 + 40);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if ((result & 1) == 0)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
        return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(a1);
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 0;
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Reset(uint64_t a1)
{
  uint64_t v2;

  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  else
    *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
}

_QWORD *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::DeterminizeFst<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  void *__p[2];
  char v18;
  char v19;

  *a1 = &unk_1E5D1E198;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1[1] + 8) |= 4uLL;
  }
  v13 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v13, a2, a3, a4, a5);
  v14 = (_DWORD *)a1[1];
  if (v14)
  {
    v15 = v14[14] - 1;
    v14[14] = v15;
    if (!v15)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  }
  a1[1] = v13;
  return a1;
}

void sub_1ADBF2154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  _DWORD *v20;
  int v21;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D27898;
  v20 = (_DWORD *)v18[1];
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D27898;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::DeterminizeFst(v4, a1, a2);
  return v4;
}

void sub_1ADBF2374(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D202E8;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C4E8;
  *a2 = v4;
  return result;
}

void sub_1ADBF2430(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  fst *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v21;
  char v22;

  v10 = fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::DeterminizeFstImplBase<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>((uint64_t)a1, a2, a5);
  *(_QWORD *)v10 = &unk_1E5D20AD8;
  *(_DWORD *)(v10 + 144) = *(_DWORD *)(a5 + 16);
  *(_QWORD *)(v10 + 152) = a3;
  *(_QWORD *)(v10 + 160) = a4;
  v11 = *(_QWORD **)(a5 + 32);
  if (!v11)
  {
    v11 = (_QWORD *)operator new();
    *v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  }
  a1[22] = v11;
  v12 = *(_QWORD **)(a5 + 40);
  if (!v12)
  {
    v12 = (_QWORD *)operator new();
    *v12 = 0;
    v12[2] = v12 + 1;
    v12[3] = v12 + 1;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v12 + 4), 0, v12 + 2, v12 + 3);
    v12[11] = 0;
    v12[12] = 0;
    v12[13] = 0;
  }
  a1[23] = v12;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)&v22, (uint64_t)__p);
    v14 = (_QWORD *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"DeterminizeFst: argument not an acceptor", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v22);
    if (v21 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  v15 = (uint64_t *)a1[20];
  if (v15)
  {
    v17 = *v15;
    v16 = v15[1];
    if (v16 != *v15)
    {
      do
      {
        v18 = v16 - 40;
        std::__list_imp<char *>::clear((_QWORD *)(v16 - 32));
        v16 = v18;
      }
      while (v18 != v17);
    }
    v15[1] = v17;
  }
  return a1;
}

void sub_1ADBF262C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D220D0;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::DeterminizeFstImplBase<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CacheBaseImpl(a1, a3) = &unk_1E5D220D0;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v8 = *(_DWORD *)(a3 + 24) != 1 || *(_BYTE *)(a3 + 28) != 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::DeterminizeProperties(v6, *(_DWORD *)(a3 + 20) != 0, v8) & 0x3FFFFFFF0004;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 40) = v11;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v13 = *(_QWORD *)(a1 + 48);
  if (v13 != v12)
  {
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v12)
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    else
      v14 = 0;
    *(_QWORD *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_1ADBF2864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v2, a1);
  return v2;
}

void sub_1ADBF2970(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::Expand(_QWORD *a1, int a2)
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD **v6;
  BOOL v7;
  _QWORD **v8;
  _QWORD *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  v4 = v8;
  if (v8 != v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, (uint64_t)(v4 + 5));
      v5 = v4[1];
      if (v5)
      {
        do
        {
          v6 = (_QWORD **)v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD **)v4[2];
          v7 = *v6 == v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1ADBF2A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  int v2;
  int v3;
  int *v4;
  uint64_t v5;
  uint64_t State;
  int v8;
  _QWORD v9[3];
  int v10;
  _DWORD v11[4];
  _QWORD v12[3];
  int v13;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if (v2 == -1)
    return 0xFFFFFFFFLL;
  v3 = v2;
  v4 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
  v8 = *v4;
  std::list<int>::list(v9, (uint64_t)(v4 + 2));
  v10 = v4[8];
  v11[0] = v3;
  v11[2] = v8;
  std::list<int>::list(v12, (uint64_t)v9);
  v13 = v10;
  std::__list_imp<char *>::clear(v9);
  v5 = operator new();
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = -1;
  *(_QWORD *)v5 = std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> const&>(v5, 0, v11);
  *(_BYTE *)(v5 + 8) = 0;
  State = fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::FindState(a1, (uint64_t **)v5);
  std::__list_imp<char *>::clear(v12);
  return State;
}

void sub_1ADBF2B68(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t **v5;
  _DWORD *v6;
  _QWORD *result;
  uint64_t *i;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  int v15;
  BOOL v16;
  float v17;
  float v18;
  int v19;
  _QWORD v20[3];
  int v21;
  uint64_t v22;
  _QWORD v23[3];
  float v24;
  int v25;
  _QWORD v26[3];
  float v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  _QWORD v33[4];

  v5 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 88) + 8 * a2);
  v6 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  *(_DWORD *)a3 = *v6;
  result = std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v6 + 2));
  *(_DWORD *)(a3 + 32) = v6[8];
  for (i = *v5; i; i = (uint64_t *)*i)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v22, *(_QWORD *)(a1 + 136), *((unsigned int *)i + 2));
    fst::Times<int,(fst::StringType)2>((int *)i + 4, (uint64_t)&v22, (uint64_t)&v32);
    v9 = *((float *)i + 12);
    v10 = NAN;
    if (v9 != -INFINITY)
    {
      v10 = NAN;
      if (v24 != -INFINITY)
      {
        v10 = INFINITY;
        v11 = v24 == INFINITY || v9 == INFINITY;
        v12 = v9 + v24;
        if (!v11)
          v10 = v12;
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v25, &v32, v10);
    std::__list_imp<char *>::clear(v33);
    fst::Plus<int,(fst::StringType)2>((int *)a3, &v25, (uint64_t)&v32);
    v13 = *(float *)(a3 + 32);
    v14 = NAN;
    if (v13 != -INFINITY)
    {
      v14 = NAN;
      if (v27 != -INFINITY)
      {
        if (v13 >= v27)
          v14 = v27;
        else
          v14 = *(float *)(a3 + 32);
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v28, &v32, v14);
    std::__list_imp<char *>::clear(v33);
    *(_DWORD *)a3 = v28;
    if (&v28 != (int *)a3)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a3 + 8), v30, (uint64_t)&v29);
    *(_DWORD *)(a3 + 32) = v31;
    std::__list_imp<char *>::clear(&v29);
    std::__list_imp<char *>::clear(v26);
    std::__list_imp<char *>::clear(v23);
    v19 = *(_DWORD *)a3;
    std::list<int>::list(v20, a3 + 8);
    v21 = *(_DWORD *)(a3 + 32);
    v28 = v19;
    std::list<int>::list(&v29, (uint64_t)v20);
    v15 = v21;
    v31 = v21;
    *(_DWORD *)a3 = v28;
    if (&v28 != (int *)a3)
    {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a3 + 8), v30, (uint64_t)&v29);
      v15 = v31;
    }
    *(_DWORD *)(a3 + 32) = v15;
    std::__list_imp<char *>::clear(&v29);
    result = std::__list_imp<char *>::clear(v20);
    if (*(_DWORD *)a3)
    {
      if (*(_QWORD *)(a3 + 24))
        v16 = 0;
      else
        v16 = *(_DWORD *)a3 == -2;
      if (!v16)
      {
        v17 = *(float *)(a3 + 32);
        if (v17 < -INFINITY || v17 > -INFINITY)
          continue;
      }
    }
    else
    {
      v18 = *(float *)(a3 + 32);
      if (v18 < -INFINITY || v18 > -INFINITY)
        continue;
    }
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return result;
}

void sub_1ADBF2E30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  if (a2)
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  return a1;
}

void sub_1ADBF2F0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADBF2F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D20AD8;
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = a1[23];
  if (v3)
  {
    v4 = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1AF44D190](v4, 0x10E0C400200E20DLL);
  }
  *a1 = &unk_1E5D220D0;
  v5 = a1[17];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(a1);
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  size_t *v8;
  size_t v9;
  fst *v10;
  _QWORD *v11;
  void *__p[2];
  char v14;
  char v15;

  v4 = fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::DeterminizeFstImplBase((uint64_t)a1, a2);
  *(_QWORD *)v4 = &unk_1E5D20AD8;
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  v5 = (_QWORD *)operator new();
  if (a1[17])
    v6 = a1[17];
  else
    v6 = **(_QWORD **)(a2 + 176);
  *v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 88))(v6, 0);
  a1[22] = v5;
  v7 = (_QWORD *)operator new();
  v8 = *(size_t **)(a2 + 184);
  v9 = *v8;
  *v7 = *v8;
  fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable((uint64_t)(v7 + 1), v9);
  a1[23] = v7;
  if (*(_QWORD *)(a2 + 160))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFsaImpl: cannot copy with out_dist vector", 52);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  return a1;
}

void sub_1ADBF318C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D220D0;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D220D0;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v4)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 40) = v6;
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *(_QWORD *)(a1 + 48) = v9;
  }
  return a1;
}

void sub_1ADBF3374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::GetLabelMap(_QWORD *a1, int a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  _QWORD v21[3];
  int v22;
  _DWORD v23[4];
  _QWORD v24[3];
  int v25;
  _QWORD v26[3];
  _DWORD *v27;
  unint64_t v28;
  int v29;
  uint64_t v30[4];

  v5 = **(uint64_t ***)(*(_QWORD *)(a1[23] + 88) + 8 * a2);
  if (!v5)
    goto LABEL_24;
  do
  {
    v6 = *((unsigned int *)v5 + 2);
    v7 = a1[17];
    v28 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, v6, v26);
    while (1)
    {
      if (!v26[0])
      {
        if (v28 >= v26[2])
          goto LABEL_21;
LABEL_8:
        v8 = v26[1] + 56 * v28;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v26[0] + 24))(v26[0]))
        break;
      if (!v26[0])
        goto LABEL_8;
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v26[0] + 32))();
LABEL_9:
      v9 = *(_DWORD *)(v8 + 48);
      fst::Times<int,(fst::StringType)2>((int *)v5 + 4, v8 + 8, (uint64_t)&v29);
      v10 = *((float *)v5 + 12);
      v11 = NAN;
      if (v10 != -INFINITY)
      {
        v12 = *(float *)(v8 + 40);
        v11 = NAN;
        if (v12 != -INFINITY)
        {
          v11 = INFINITY;
          v13 = v12 == INFINITY || v10 == INFINITY;
          v14 = v10 + v12;
          if (!v13)
            v11 = v14;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v20, &v29, v11);
      std::__list_imp<char *>::clear(v30);
      v23[0] = v9;
      v23[2] = v20;
      std::list<int>::list(v24, (uint64_t)v21);
      v25 = v22;
      std::__list_imp<char *>::clear(v21);
      fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::FilterArc(a1[22], (_DWORD *)v8, (uint64_t)(v5 + 1), v23, (uint64_t)a3);
      std::__list_imp<char *>::clear(v24);
      if (v26[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v26[0] + 40))(v26[0]);
      else
        ++v28;
    }
    if (v26[0])
    {
      (*(void (**)(void))(*(_QWORD *)v26[0] + 8))();
      goto LABEL_23;
    }
LABEL_21:
    if (v27)
      --*v27;
LABEL_23:
    v5 = (uint64_t *)*v5;
  }
  while (v5);
LABEL_24:
  v17 = (_QWORD *)*a3;
  v16 = a3 + 1;
  v15 = v17;
  if (v17 != v16)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v15 + 5));
      v18 = (_QWORD *)v15[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v15[2];
          v13 = *v19 == (_QWORD)v15;
          v15 = v19;
        }
        while (!v13);
      }
      v15 = v19;
    }
    while (v19 != v16);
  }
}

void sub_1ADBF3608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_DWORD *a24)
{
  if (a21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  }
  else if (a24)
  {
    --*a24;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *MutableState;
  _DWORD v8[4];
  uint64_t v9[3];
  int v10;
  int State;

  v9[0] = (uint64_t)v9;
  v9[1] = (uint64_t)v9;
  v9[2] = 0;
  v8[0] = *(_DWORD *)a3;
  v8[1] = v8[0];
  v8[2] = *(_DWORD *)(a3 + 8);
  if (v8 != (_DWORD *)a3)
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v9, *(_QWORD *)(a3 + 24), a3 + 16);
  v10 = *(_DWORD *)(a3 + 40);
  State = fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::FindState(a1, *(uint64_t ***)(a3 + 48));
  MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(MutableState, (uint64_t)v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1ADBF3710(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::FilterArc(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  _DWORD *v11;
  int v12;
  _QWORD v13[3];
  int v14;
  uint64_t v15;

  v11 = a2;
  v7 = std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v11);
  if (*((_DWORD *)v7 + 10) == -1)
  {
    fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::DeterminizeArc((uint64_t)&v11, a2);
    v8 = v12;
    *((_DWORD *)v7 + 10) = (_DWORD)v11;
    *((_DWORD *)v7 + 12) = v8;
    if (v7 + 5 != (uint64_t *)&v11)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v7 + 7, v13[1], (uint64_t)v13);
    *((_DWORD *)v7 + 20) = v14;
    v7[11] = v15;
    std::__list_imp<char *>::clear(v13);
    *(_BYTE *)(v7[11] + 8) = 0;
  }
  v9 = (uint64_t *)v7[11];
  *v9 = (uint64_t)std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> const&>((uint64_t)v9, *v9, a4);
  return 1;
}

void sub_1ADBF380C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  int *v6;
  uint64_t *v7;
  int *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *i;
  int *v17;
  float v18;
  float v19;
  uint64_t **v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  _QWORD v27[3];

  v4 = *(uint64_t ***)(a2 + 48);
  std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v4);
  v5 = *v4;
  if (*v4)
  {
    v21 = a1;
    v6 = (int *)(a2 + 8);
    v20 = v4;
    v7 = *v4;
    do
    {
      fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()(a2 + 8, (uint64_t)(v7 + 2), (uint64_t)&v22);
      *v6 = v22;
      if (v6 != &v22)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a2 + 16), v24, (uint64_t)&v23);
      *(_DWORD *)(a2 + 40) = v25;
      std::__list_imp<char *>::clear(&v23);
      if (v5 == v7 || *((_DWORD *)v7 + 2) != *((_DWORD *)v5 + 2))
      {
        v13 = (uint64_t *)*v7;
        v5 = v7;
      }
      else
      {
        v8 = (int *)(v5 + 2);
        fst::Plus<int,(fst::StringType)2>((int *)v5 + 4, (int *)v7 + 4, (uint64_t)&v26);
        v9 = *((float *)v5 + 12);
        v10 = NAN;
        if (v9 != -INFINITY)
        {
          v11 = *((float *)v7 + 12);
          v10 = NAN;
          if (v11 != -INFINITY)
          {
            if (v9 >= v11)
              v10 = *((float *)v7 + 12);
            else
              v10 = *((float *)v5 + 12);
          }
        }
        fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v22, &v26, v10);
        std::__list_imp<char *>::clear(v27);
        *v8 = v22;
        if (v8 != &v22)
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v5 + 3, v24, (uint64_t)&v23);
        *((_DWORD *)v5 + 12) = v25;
        std::__list_imp<char *>::clear(&v23);
        if (*((_DWORD *)v5 + 4) == -2 && !v5[5] || (v12 = *((float *)v5 + 12), v12 >= -INFINITY) && v12 <= -INFINITY)
          *(_QWORD *)(v21 + 8) |= 4uLL;
        v13 = (uint64_t *)*v7;
        v14 = (_QWORD *)*v5;
        v15 = (_QWORD *)(*v5 + 24);
        *v5 = *(_QWORD *)*v5;
        std::__list_imp<char *>::clear(v15);
        operator delete(v14);
      }
      v7 = v13;
    }
    while (v13);
    for (i = *v20; i; i = (uint64_t *)*i)
    {
      v17 = (int *)(i + 2);
      fst::DivideLeft<int,(fst::StringType)2>((int *)i + 4, (int *)(a2 + 8), (uint64_t)&v26);
      v18 = *((float *)i + 12);
      v19 = NAN;
      if (v18 != -INFINITY)
      {
        if ((*(_DWORD *)(a2 + 40) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v19 = INFINITY;
          if (v18 != INFINITY)
            v19 = v18 - *(float *)(a2 + 40);
        }
        else
        {
          v19 = NAN;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v22, &v26, v19);
      std::__list_imp<char *>::clear(v27);
      *v17 = v22;
      if (v17 != &v22)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(i + 3, v24, (uint64_t)&v23);
      *((_DWORD *)i + 12) = v25;
      std::__list_imp<char *>::clear(&v23);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Quantize((float *)i + 4, (uint64_t)&v22, *(float *)(v21 + 144));
      *((_DWORD *)i + 4) = v22;
      if (v17 != &v22)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(i + 3, v24, (uint64_t)&v23);
      *((_DWORD *)i + 12) = v25;
      std::__list_imp<char *>::clear(&v23);
    }
  }
}

void sub_1ADBF3B30(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v5;
  uint64_t **v6;
  int v7;
  uint64_t *v8;
  int v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t *)v5;
        v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = **a2;
  v6[10] = -1;
  v7 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  v6[12] = *v7;
  result = std::list<int>::list((_QWORD *)v6 + 7, (uint64_t)(v7 + 2));
  v6[20] = v7[8];
  *((_QWORD *)v6 + 11) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADBF3CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_DWORD *)a1 = *a2;
  v3 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  *(_DWORD *)(a1 + 8) = *v3;
  std::list<int>::list((_QWORD *)(a1 + 16), (uint64_t)(v3 + 2));
  *(_DWORD *)(a1 + 40) = v3[8];
  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = -1;
  *(_QWORD *)(a1 + 48) = v4;
  return a1;
}

void sub_1ADBF3D4C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_DWORD *std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>> const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v5;

  v5 = operator new(0x38uLL);
  *(_QWORD *)v5 = a2;
  v5[2] = *a3;
  v5[4] = a3[2];
  std::list<int>::list((_QWORD *)v5 + 3, (uint64_t)(a3 + 4));
  v5[12] = a3[10];
  return v5;
}

void sub_1ADBF3DC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>::operator()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  int v10;
  _QWORD v11[3];

  fst::LabelCommonDivisor<int,(fst::StringType)2>::operator()((int *)a1, a2, (uint64_t)&v10);
  v6 = *(float *)(a1 + 32);
  v7 = NAN;
  if (v6 != -INFINITY)
  {
    v8 = *(float *)(a2 + 32);
    v7 = NAN;
    if (v8 != -INFINITY)
    {
      if (v6 >= v8)
        v7 = *(float *)(a2 + 32);
      else
        v7 = *(float *)(a1 + 32);
    }
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight(a3, &v10, v7);
  return std::__list_imp<char *>::clear(v11);
}

void sub_1ADBF3E70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int v5;
  _QWORD v6[3];
  int v7;

  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1ADBF3EDC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::Plus<int,(fst::StringType)2>@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  fst *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _DWORD *v53;
  void *__p[2];
  char v55;
  char v56;

  if (*a1 && (*a1 == -2 ? (v6 = *((_QWORD *)a1 + 3) == 0) : (v6 = 0), v6)
    || *a2 && (*a2 == -2 ? (v7 = *((_QWORD *)a2 + 3) == 0) : (v7 = 0), v7))
  {
    v20 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::NoWeight();
    v21 = (uint64_t)(v20 + 2);
    *(_DWORD *)a3 = *v20;
    v22 = (_QWORD *)(a3 + 8);
    return std::list<int>::list(v22, v21);
  }
  v8 = fst::StringWeight<int,(fst::StringType)2>::Zero();
  v9 = *a1;
  if (*a1)
    v10 = *((_QWORD *)a1 + 3) + 1;
  else
    v10 = 0;
  if (*(_DWORD *)v8)
    v11 = *(_QWORD *)(v8 + 24) + 1;
  else
    v11 = 0;
  if (v10 != v11)
  {
LABEL_33:
    v24 = fst::StringWeight<int,(fst::StringType)2>::Zero();
    v25 = *a2;
    if (*a2)
      v26 = *((_QWORD *)a2 + 3) + 1;
    else
      v26 = 0;
    if (*(_DWORD *)v24)
      v27 = *(_QWORD *)(v24 + 24) + 1;
    else
      v27 = 0;
    if (v26 == v27)
    {
      v28 = 0;
      v29 = (uint64_t *)(a2 + 4);
      v30 = (uint64_t *)(v24 + 16);
      if (v25)
        v31 = v25 == *(_DWORD *)v24;
      else
        v31 = 0;
      v32 = !v31;
      v33 = v32 ^ 1;
      while (1)
      {
        v34 = *v29;
        v35 = *v30;
        if ((v28 & 1) == 0 && !v33)
          break;
        if ((int *)v34 == a2 + 2)
          goto LABEL_70;
        if (*(_DWORD *)(v34 + 16) != *(_DWORD *)(v35 + 16))
          goto LABEL_54;
        v29 = (uint64_t *)(v34 + 8);
        v30 = (uint64_t *)(v35 + 8);
        v28 = 1;
      }
      if (v25)
        goto LABEL_54;
LABEL_70:
      *(_DWORD *)a3 = *a1;
      return std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(a1 + 2));
    }
LABEL_54:
    v36 = *a1;
    if (*a1)
      v37 = *((_QWORD *)a1 + 3) + 1;
    else
      v37 = 0;
    if (v37 != v26)
    {
LABEL_72:
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v46 = fst::LogMessage::LogMessage((fst *)&v56, (uint64_t)__p);
      v47 = (_QWORD *)fst::cerr(v46);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"StringWeight::Plus: unequal arguments ", 38);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"(non-functional FST?)", 21);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" w1 = ", 6);
      v51 = fst::operator<<<int,(fst::StringType)1>(v50, a1);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" w2 = ", 6);
      fst::operator<<<int,(fst::StringType)1>(v52, a2);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v56);
      if (v55 < 0)
        operator delete(__p[0]);
      v53 = (_DWORD *)fst::StringWeight<int,(fst::StringType)2>::NoWeight();
      *(_DWORD *)a3 = *v53;
      return std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v53 + 2));
    }
    v38 = 0;
    v21 = (uint64_t)(a1 + 2);
    v39 = (uint64_t *)(a1 + 4);
    v40 = (uint64_t *)(a2 + 4);
    if (v36)
      v41 = v36 == v25;
    else
      v41 = 0;
    v42 = !v41;
    v43 = v42 ^ 1;
    while (1)
    {
      v44 = *v39;
      v45 = *v40;
      if ((v38 & 1) == 0 && !v43)
        break;
      if (v44 == v21)
        goto LABEL_78;
      if (*(_DWORD *)(v44 + 16) != *(_DWORD *)(v45 + 16))
        goto LABEL_72;
      v39 = (uint64_t *)(v44 + 8);
      v40 = (uint64_t *)(v45 + 8);
      v38 = 1;
    }
    if (v36)
      goto LABEL_72;
LABEL_78:
    *(_DWORD *)a3 = v36;
    v22 = (_QWORD *)(a3 + 8);
    return std::list<int>::list(v22, v21);
  }
  v12 = 0;
  v13 = (uint64_t *)(a1 + 4);
  v14 = (uint64_t *)(v8 + 16);
  if (v9)
    v15 = v9 == *(_DWORD *)v8;
  else
    v15 = 0;
  v16 = !v15;
  v17 = v16 ^ 1;
  while (1)
  {
    v18 = *v13;
    v19 = *v14;
    if ((v12 & 1) == 0 && !v17)
      break;
    if ((int *)v18 == a1 + 2)
      goto LABEL_52;
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v19 + 16))
      goto LABEL_33;
    v13 = (uint64_t *)(v18 + 8);
    v14 = (uint64_t *)(v19 + 8);
    v12 = 1;
  }
  if (v9)
    goto LABEL_33;
LABEL_52:
  *(_DWORD *)a3 = *a2;
  return std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(a2 + 2));
}

void sub_1ADBF4204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, uint64_t **a2)
{
  uint64_t State;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  int v10;
  _QWORD v11[3];
  int v12;

  State = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::FindState(*(_QWORD **)(a1 + 184), a2);
  v5 = State;
  if (*(_QWORD *)(a1 + 152))
  {
    v6 = *(uint64_t **)(a1 + 160);
    if (0xCCCCCCCCCCCCCCCDLL * ((v6[1] - *v6) >> 3) <= (int)State)
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, (uint64_t)&v10);
      v7 = v6[1];
      if (v7 >= v6[2])
      {
        v8 = std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>(v6, &v10);
      }
      else
      {
        *(_DWORD *)v7 = v10;
        std::list<int>::list((_QWORD *)(v7 + 8), (uint64_t)v11);
        *(_DWORD *)(v7 + 32) = v12;
        v8 = v7 + 40;
        v6[1] = v7 + 40;
      }
      v6[1] = v8;
      std::__list_imp<char *>::clear(v11);
    }
  }
  return v5;
}

void sub_1ADBF4314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::FindState(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t Id;
  _QWORD **v4;
  _QWORD **v6;

  v6 = a2;
  v2 = (a1[12] - a1[11]) >> 3;
  Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, &v6, 1);
  if ((_DWORD)Id != (_DWORD)v2)
  {
    v4 = v6;
    if (v6)
    {
      std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>>::clear(v6);
      MEMORY[0x1AF44D190](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>>::ComputeDistance@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v6;
  _QWORD *result;
  uint64_t *i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  int v18;
  _QWORD v19[3];
  float v20;
  int v21;
  _QWORD v22[3];
  int v23;
  int v24;
  _QWORD v25[3];
  float v26;
  int v27;
  _QWORD v28[4];

  v6 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  *(_DWORD *)a3 = *v6;
  result = std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v6 + 2));
  *(_DWORD *)(a3 + 32) = v6[8];
  for (i = *a2; i; i = (uint64_t *)*i)
  {
    v9 = *((int *)i + 2);
    v10 = **(_QWORD **)(a1 + 152);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) - v10) >> 3) <= v9)
      v11 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
    else
      v11 = v10 + 40 * (int)v9;
    v24 = *(_DWORD *)v11;
    std::list<int>::list(v25, v11 + 8);
    v26 = *(float *)(v11 + 32);
    fst::Times<int,(fst::StringType)2>((int *)i + 4, (uint64_t)&v24, (uint64_t)&v27);
    v12 = *((float *)i + 12);
    v13 = NAN;
    if (v12 != -INFINITY)
    {
      v13 = NAN;
      if (v26 != -INFINITY)
      {
        v13 = INFINITY;
        v14 = v26 == INFINITY || v12 == INFINITY;
        v15 = v12 + v26;
        if (!v14)
          v13 = v15;
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v18, &v27, v13);
    std::__list_imp<char *>::clear(v28);
    fst::Plus<int,(fst::StringType)2>((int *)a3, &v18, (uint64_t)&v27);
    v16 = *(float *)(a3 + 32);
    v17 = NAN;
    if (v16 != -INFINITY)
    {
      v17 = NAN;
      if (v20 != -INFINITY)
      {
        if (v16 >= v20)
          v17 = v20;
        else
          v17 = *(float *)(a3 + 32);
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v21, &v27, v17);
    std::__list_imp<char *>::clear(v28);
    *(_DWORD *)a3 = v21;
    if (&v21 != (int *)a3)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a3 + 8), v22[1], (uint64_t)v22);
    *(_DWORD *)(a3 + 32) = v23;
    std::__list_imp<char *>::clear(v22);
    std::__list_imp<char *>::clear(v19);
    result = std::__list_imp<char *>::clear(v25);
  }
  return result;
}

void sub_1ADBF45C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  std::__list_imp<char *>::clear(v4);
  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;

  a1[13] = a2;
  v6 = (uint64_t)(a1 + 3);
  v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7)
    return *((unsigned int *)v7 + 4);
  if (!a3)
    return 0xFFFFFFFFLL;
  v9 = a1[10];
  v10 = (_QWORD *)a1[11];
  v11 = ((uint64_t)v10 - v9) >> 3;
  v23 = v11;
  v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v12 - v9;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1))
      v15 = v11 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    else
      v17 = 0;
    v18 = &v17[8 * v11];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = *a2;
    v13 = v18 + 8;
    v21 = (char *)a1[10];
    v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = *a2;
    v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__push_back_slow_path<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[40 * v9];
  *(_DWORD *)v11 = *a2;
  std::list<int>::list((_QWORD *)v11 + 1, (uint64_t)(a2 + 2));
  *((_DWORD *)v11 + 8) = a2[8];
  v15 += 40;
  std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADBF4860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>*>,std::reverse_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_DWORD *)(a7 + v11 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((_QWORD *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADBF4974(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 8;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v7;
  _QWORD v8[3];
  int v9;
  uint64_t v10;
  _QWORD v11[3];
  int v12;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(&v10, a1, a2);
    v7 = v10;
    std::list<int>::list(v8, (uint64_t)v11);
    v9 = v12;
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v7);
    std::__list_imp<char *>::clear(v8);
    std::__list_imp<char *>::clear(v11);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1ADBF4A50(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::DeterminizeFst(_QWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  *a1 = &unk_1E5D1E198;
  a1[1] = 0;
  v4 = *(_DWORD **)(a2 + 8);
  if (a3)
  {
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(a2 + 8));
    v5 = (_DWORD *)a1[1];
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    ++v4[14];
  }
  a1[1] = v4;
  return a1;
}

void sub_1ADBF4AF8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D27898;
  v3 = v1[1];
  if (v3)
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v3);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *((_QWORD *)v19 + 7);
    v9 = 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)v19 + 8) - v8) >> 3);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        v14 = *v12;
        v12 += 14;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADBF4CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 84);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADBF4D30(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 84);
  _Unwind_Resume(a1);
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FactorWeightFst(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FactorWeightFstImpl(v6, a2, a3);
  *a1 = &unk_1E5D1EA88;
  a1[1] = v6;
  return a1;
}

void sub_1ADBF4DAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::~FactorWeightFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D26FA8;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Start(uint64_t a1)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D1EA88;
  return v4;
}

void sub_1ADBF4F64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D20528;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C728;
  *a2 = v4;
  return result;
}

void sub_1ADBF5020(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  fst *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v21;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CacheBaseImpl(a1, a3) = &unk_1E5D219A0;
  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  v7 = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a3 + 20);
  v8 = *(_DWORD *)(a3 + 28);
  v9 = *(_WORD *)(a3 + 32);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 136) = v6;
  *(_DWORD *)(a1 + 144) = v7;
  *(_DWORD *)(a1 + 156) = v8;
  *(_WORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "factor_weight");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::FactorWeightProperties(v10) & 0x3FFFFFFF0004;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 40) = v13;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v15 = *(_QWORD *)(a1 + 48);
  if (v15 != v14)
  {
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v14)
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    else
      v16 = 0;
    *(_QWORD *)(a1 + 48) = v16;
  }
  if (!*(_DWORD *)(a1 + 148))
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "WARNING");
    v17 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)&__str);
    v18 = (_QWORD *)fst::cerr(v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"FactorWeightFst: factor mode is set to 0: ", 42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"factoring neither arc weights nor final weights.", 48);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1ADBF5268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  void **v19;
  void *v21;

  if (a18 < 0)
    operator delete(__p);
  v21 = *v19;
  if (*v19)
  {
    v18[30] = v21;
    operator delete(v21);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)(v19 - 5));
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::~FactorWeightFstImpl(uint64_t a1)
{
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::~FactorWeightFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::~FactorWeightFstImpl(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &unk_1E5D219A0;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(_QWORD *)(a1 + 240) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(a1 + 192);
  v5 = (void **)(a1 + 168);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl((_QWORD *)a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Start(uint64_t a1)
{
  uint64_t result;
  int v3;
  int *v4;
  int State;
  int v6;
  _QWORD v7[3];
  int v8;
  int v9[4];
  _QWORD v10[3];
  int v11;

  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 4))
  {
    *(_BYTE *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result != -1)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
    v4 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
    v6 = *v4;
    std::list<int>::list(v7, (uint64_t)(v4 + 2));
    v8 = v4[8];
    v9[0] = v3;
    v9[2] = v6;
    std::list<int>::list(v10, (uint64_t)v7);
    v11 = v8;
    State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FindState(a1, v9);
    std::__list_imp<char *>::clear(v10);
    std::__list_imp<char *>::clear(v7);
    *(_DWORD *)(a1 + 64) = State;
    *(_BYTE *)(a1 + 60) = 1;
    if (*(_DWORD *)(a1 + 68) <= State)
      *(_DWORD *)(a1 + 68) = State + 1;
    return *(unsigned int *)(a1 + 64);
  }
  return result;
}

void sub_1ADBF5510(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FindState(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40[4];
  _QWORD v41[3];
  int v42;
  int v43;
  float v44;

  if ((*(_BYTE *)(a1 + 148) & 2) != 0)
    goto LABEL_27;
  v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
  v5 = a2[2];
  v6 = v5 ? *((_QWORD *)a2 + 4) + 1 : 0;
  v7 = *(_DWORD *)v4 ? *(_QWORD *)(v4 + 24) + 1 : 0;
  if (v6 != v7)
    goto LABEL_27;
  v8 = 0;
  v9 = (uint64_t *)(a2 + 6);
  v10 = (uint64_t *)(v4 + 16);
  v11 = v5 && v5 == *(_DWORD *)v4;
  v12 = !v11;
  v13 = !v12;
  while (1)
  {
    v14 = *v9;
    v15 = *v10;
    if ((v8 & 1) == 0 && !v13)
      break;
    if ((int *)v14 == a2 + 4)
      goto LABEL_22;
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16))
      goto LABEL_27;
    v9 = (uint64_t *)(v14 + 8);
    v10 = (uint64_t *)(v15 + 8);
    v8 = 1;
  }
  if (v5)
    goto LABEL_27;
LABEL_22:
  v40[0] = 0;
  v40[0] = a2[10];
  v44 = 0.0;
  v44 = *(float *)(v4 + 32);
  v16 = *a2;
  if (*(float *)v40 != v44 || v16 == -1)
  {
LABEL_27:
    v18 = std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>((_QWORD *)(a1 + 192), a2);
    if (v18)
    {
      return *((unsigned int *)v18 + 16);
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 176);
      v20 = (uint64_t *)(a1 + 168);
      v19 = -1431655765 * ((v21 - *(_QWORD *)(a1 + 168)) >> 4);
      if (v21 >= *(_QWORD *)(a1 + 184))
      {
        v22 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element const&>(v20, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element const&>((uint64_t)v20, a2);
        v22 = v21 + 48;
      }
      *(_QWORD *)(a1 + 176) = v22;
      v23 = a2[2];
      v40[0] = *a2;
      v40[2] = v23;
      std::list<int>::list(v41, (uint64_t)(a2 + 4));
      v42 = a2[10];
      v43 = v19;
      std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>(a1 + 192, v40, v40);
      std::__list_imp<char *>::clear(v41);
    }
  }
  else
  {
    v25 = v16;
    v26 = *(char **)(a1 + 232);
    v27 = *(char **)(a1 + 240);
    v28 = (v27 - v26) >> 2;
    if (v28 <= v16)
    {
      v29 = (_QWORD *)(a1 + 248);
      do
      {
        if ((unint64_t)v27 >= *v29)
        {
          v31 = v28 + 1;
          if ((v28 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v32 = *v29 - (_QWORD)v26;
          if (v32 >> 1 > v31)
            v31 = v32 >> 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
            v33 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 248, v33);
            v26 = *(char **)(a1 + 232);
            v27 = *(char **)(a1 + 240);
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[4 * v28];
          *(_DWORD *)v35 = -1;
          v30 = v35 + 4;
          while (v27 != v26)
          {
            v36 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          *(_QWORD *)(a1 + 232) = v35;
          *(_QWORD *)(a1 + 240) = v30;
          *(_QWORD *)(a1 + 248) = &v34[4 * v33];
          if (v26)
          {
            operator delete(v26);
            v26 = *(char **)(a1 + 232);
          }
          else
          {
            v26 = v35;
          }
        }
        else
        {
          *(_DWORD *)v27 = -1;
          v30 = v27 + 4;
        }
        *(_QWORD *)(a1 + 240) = v30;
        v28 = (v30 - v26) >> 2;
        v16 = *a2;
        v27 = v30;
      }
      while (v28 <= *a2);
      v25 = v16;
    }
    if (*(_DWORD *)&v26[4 * v25] == -1)
    {
      v37 = *(_QWORD *)(a1 + 176);
      *(_DWORD *)&v26[4 * v25] = -1431655765 * ((v37 - *(_QWORD *)(a1 + 168)) >> 4);
      v38 = (uint64_t *)(a1 + 168);
      if (v37 >= *(_QWORD *)(a1 + 184))
      {
        v39 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element const&>(v38, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element const&>((uint64_t)v38, a2);
        v39 = v37 + 48;
      }
      *(_QWORD *)(a1 + 176) = v39;
      v16 = *a2;
      v26 = *(char **)(a1 + 232);
    }
    return *(unsigned int *)&v26[4 * v16];
  }
  return v19;
}

void sub_1ADBF5834(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element const&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v4 = *a2;
  *(_DWORD *)(v4 + 8) = a2[2];
  result = std::list<int>::list((_QWORD *)(v4 + 16), (uint64_t)(a2 + 4));
  *(_DWORD *)(v4 + 40) = a2[10];
  *(_QWORD *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1ADBF58A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = (char *)&v10[12 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = (char *)&v10[12 * v9];
  *(_DWORD *)v11 = *a2;
  *((_DWORD *)v11 + 2) = a2[2];
  std::list<int>::list((_QWORD *)v11 + 2, (uint64_t)(a2 + 4));
  v10[12 * v4 + 10] = a2[10];
  v15 += 48;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADBF59BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Element*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      *(_DWORD *)(v12 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((_QWORD *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 48;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADBF5AD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int *v6;
  int *v7;
  int v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  BOOL v13;
  int v14;
  int *v15;
  _QWORD *v16;
  int v18;
  _QWORD v19[3];
  int v20;
  int v21;
  _QWORD v22[3];
  float v23;
  uint64_t v24;
  _QWORD v25[3];
  float v26;
  char v27;
  int v28;
  _QWORD v29[3];
  float v30;
  int v31;
  uint64_t v32[3];

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    v6 = (int *)(*(_QWORD *)(a1 + 168) + 48 * a2);
    v8 = *v6;
    v7 = v6 + 2;
    if (v8 == -1)
    {
      v28 = *v7;
      std::list<int>::list(v29, (uint64_t)(v7 + 2));
      v30 = *((float *)v7 + 8);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v24);
      fst::Times<int,(fst::StringType)2>(v7, (uint64_t)&v24, (uint64_t)&v31);
      v9 = *((float *)v7 + 8);
      v10 = NAN;
      if (v9 != -INFINITY)
      {
        v10 = NAN;
        if (v26 != -INFINITY)
        {
          v10 = INFINITY;
          v11 = v26 == INFINITY || v9 == INFINITY;
          v12 = v9 + v26;
          if (!v11)
            v10 = v12;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v28, &v31, v10);
      std::__list_imp<char *>::clear(v32);
      std::__list_imp<char *>::clear(v25);
    }
    LODWORD(v24) = v28;
    std::list<int>::list(v25, (uint64_t)v29);
    v26 = v30;
    if (v28)
      v13 = (unint64_t)(v29[2] + 1) >= 2;
    else
      v13 = 0;
    v14 = !v13;
    v27 = v14;
    if ((*(_BYTE *)(a1 + 148) & 1) == 0 || v14)
    {
      v21 = v28;
      v16 = v22;
      std::list<int>::list(v22, (uint64_t)v29);
      v23 = v30;
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v21);
    }
    else
    {
      v15 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
      v18 = *v15;
      v16 = v19;
      std::list<int>::list(v19, (uint64_t)(v15 + 2));
      v20 = v15[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetFinal(a1, a2, &v18);
    }
    std::__list_imp<char *>::clear(v16);
    std::__list_imp<char *>::clear(v25);
    std::__list_imp<char *>::clear(v29);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1ADBF5D10(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 64) - *(_QWORD *)(*(_QWORD *)v5 + 56)) >> 3);
}

_QWORD *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Expand(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  float v7;
  float v8;
  int v11;
  int v12;
  int State;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int *v18;
  uint64_t v19;
  uint64_t *MutableState;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  float v31;
  uint64_t v33;
  BOOL v34;
  char v35;
  int v36;
  uint64_t *v37;
  float v39;
  float v40;
  int v42;
  _QWORD v43[3];
  float v44;
  int v45;
  _QWORD v46[3];
  float v47;
  int v48;
  _QWORD v49[3];
  float v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  float v54;
  int v55;
  int v56;
  _QWORD v57[3];
  float v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  float v62;
  int v63;
  _QWORD v64[4];
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  _QWORD v69[3];
  int v70;
  float v71;
  _QWORD v72[3];
  int v73;
  char v74;
  int v75;
  _QWORD v76[3];
  int v77;
  uint64_t v78;
  _QWORD v79[2];
  _DWORD *v80;
  unint64_t v81;
  int v82;
  int v83;
  _QWORD v84[3];
  float v85;

  v3 = *(_QWORD *)(a1 + 168) + 48 * a2;
  v82 = *(_DWORD *)v3;
  v83 = *(_DWORD *)(v3 + 8);
  std::list<int>::list(v84, v3 + 16);
  v85 = *(float *)(v3 + 40);
  if (v82 == -1)
    goto LABEL_33;
  v4 = *(_QWORD *)(a1 + 136);
  v81 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
  v5 = &v66;
  while (1)
  {
    if (!v78)
    {
      if (v81 >= v79[1])
        goto LABEL_31;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v78 + 24))(v78))
      break;
    if (v78)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 32))(v78);
      goto LABEL_9;
    }
LABEL_8:
    v6 = v79[0] + 56 * v81;
LABEL_9:
    fst::Times<int,(fst::StringType)2>(&v83, v6 + 8, (uint64_t)&v59);
    v7 = NAN;
    if (v85 != -INFINITY)
    {
      v8 = *(float *)(v6 + 40);
      v7 = NAN;
      if (v8 != -INFINITY)
      {
        v7 = INFINITY;
        if (v8 != INFINITY && v85 != INFINITY)
          v7 = v85 + v8;
      }
    }
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v75, (int *)&v59, v7);
    std::__list_imp<char *>::clear(&v60);
    v71 = *(float *)&v75;
    std::list<int>::list(v72, (uint64_t)v76);
    v73 = v77;
    v11 = *(float *)&v75 == 0.0 || (unint64_t)(v76[2] + 1) < 2;
    v74 = v11;
    if ((*(_BYTE *)(a1 + 148) & 2) == 0 || v11)
    {
      v16 = v5;
      v17 = *(_DWORD *)(v6 + 48);
      v18 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
      v68 = *v18;
      std::list<int>::list(v69, (uint64_t)(v18 + 2));
      v70 = v18[8];
      LODWORD(v59) = v17;
      LODWORD(v60) = v68;
      std::list<int>::list(v61, (uint64_t)v69);
      v63 = v70;
      LODWORD(v18) = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FindState(a1, (int *)&v59);
      v5 = v16;
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v69);
      v19 = *(_QWORD *)v6;
      v65 = v75;
      std::list<int>::list(v16, (uint64_t)v76);
      v67 = v77;
      v59 = v19;
      LODWORD(v60) = v65;
      std::list<int>::list(v61, (uint64_t)v16);
      v63 = v67;
      LODWORD(v64[0]) = (_DWORD)v18;
      MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(MutableState, (uint64_t)&v59);
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v16);
    }
    else
    {
      fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Value((int *)&v71, (uint64_t)&v59);
      v12 = *(_DWORD *)(v6 + 48);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Quantize((float *)&v63, (uint64_t)&v56, *(float *)(a1 + 144));
      LODWORD(v51) = v12;
      LODWORD(v52) = v56;
      std::list<int>::list(v53, (uint64_t)v57);
      v54 = v58;
      State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v57);
      v14 = *(_QWORD *)v6;
      v48 = v59;
      std::list<int>::list(v49, (uint64_t)&v60);
      v50 = v62;
      v51 = v14;
      LODWORD(v52) = v48;
      std::list<int>::list(v53, (uint64_t)v49);
      v54 = v50;
      v55 = State;
      v15 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(v15, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v49);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v76);
    if (v78)
      (*(void (**)(uint64_t))(*(_QWORD *)v78 + 40))(v78);
    else
      ++v81;
  }
  if (v78)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
    goto LABEL_33;
  }
LABEL_31:
  if (v80)
    --*v80;
LABEL_33:
  if ((*(_BYTE *)(a1 + 148) & 1) != 0)
  {
    if (v82 == -1)
      goto LABEL_65;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v59);
    v21 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
    v22 = (_DWORD)v59 ? v61[1] + 1 : 0;
    v23 = *(_DWORD *)v21 ? *(_QWORD *)(v21 + 24) + 1 : 0;
    if (v22 == v23)
    {
      v24 = 0;
      v25 = v61[0];
      v26 = (uint64_t *)(v21 + 16);
      if ((_DWORD)v59)
        v27 = (_DWORD)v59 == *(_DWORD *)v21;
      else
        v27 = 0;
      v28 = !v27;
      v29 = v28 ^ 1;
      while (1)
      {
        v30 = *v26;
        if ((v24 & 1) == 0 && !v29)
          break;
        if ((uint64_t *)v25 == &v60)
          goto LABEL_77;
        if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v30 + 16))
          goto LABEL_55;
        v25 = *(_QWORD *)(v25 + 8);
        v26 = (uint64_t *)(v30 + 8);
        v24 = 1;
      }
      if ((_DWORD)v59)
        goto LABEL_55;
LABEL_77:
      *(float *)&v51 = v62;
      v71 = 0.0;
      v71 = *(float *)(v21 + 32);
      v39 = v62;
      v40 = v71;
      std::__list_imp<char *>::clear(&v60);
      if (v39 == v40)
        goto LABEL_76;
    }
    else
    {
LABEL_55:
      std::__list_imp<char *>::clear(&v60);
    }
    if (v82 == -1)
    {
LABEL_65:
      LODWORD(v78) = v83;
      std::list<int>::list(v79, (uint64_t)v84);
      *(float *)&v81 = v85;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v59);
      fst::Times<int,(fst::StringType)2>(&v83, (uint64_t)&v59, (uint64_t)&v51);
      v31 = NAN;
      if (v85 != -INFINITY)
      {
        v31 = NAN;
        if (v62 != -INFINITY)
        {
          v31 = INFINITY;
          if (v62 != INFINITY && v85 != INFINITY)
            v31 = v85 + v62;
        }
      }
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v78, (int *)&v51, v31);
      std::__list_imp<char *>::clear(&v52);
      std::__list_imp<char *>::clear(&v60);
    }
    v33 = *(_QWORD *)(a1 + 152);
    v71 = *(float *)&v78;
    std::list<int>::list(v72, (uint64_t)v79);
    v73 = v81;
    if ((_DWORD)v78)
      v34 = (unint64_t)v80 + 1 >= 2;
    else
      v34 = 0;
    v35 = !v34;
    v74 = v35;
    if (v34)
    {
      fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Value((int *)&v71, (uint64_t)&v59);
      fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Quantize((float *)&v63, (uint64_t)&v45, *(float *)(a1 + 144));
      LODWORD(v51) = -1;
      LODWORD(v52) = v45;
      std::list<int>::list(v53, (uint64_t)v46);
      v54 = v47;
      v36 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v46);
      v42 = v59;
      std::list<int>::list(v43, (uint64_t)&v60);
      v44 = v62;
      v51 = v33;
      LODWORD(v52) = v42;
      std::list<int>::list(v53, (uint64_t)v43);
      v54 = v44;
      v55 = v36;
      v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::PushArc(v37, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v43);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v79);
  }
LABEL_76:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::SetArcs(a1, a2);
  return std::__list_imp<char *>::clear(v84);
}

void sub_1ADBF6578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  _QWORD *v48;

  std::__list_imp<char *>::clear((_QWORD *)(v47 + 8));
  std::__list_imp<char *>::clear(&a47);
  std::__list_imp<char *>::clear(v48);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Value@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  _QWORD v18[2];
  uint64_t v19;
  int v20;
  _QWORD v21[4];
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD v31[2];
  uint64_t v32;
  int v33;
  _QWORD v34[4];
  int v35;
  _QWORD v36[3];
  char v37;

  v35 = *a1;
  std::list<int>::list(v36, (uint64_t)(a1 + 2));
  if (*a1)
    v4 = (unint64_t)(*((_QWORD *)a1 + 3) + 1) >= 2;
  else
    v4 = 0;
  v5 = !v4;
  v37 = v5;
  fst::StringFactor<int,(fst::StringType)2>::Value((uint64_t)&v35, (uint64_t)&v22);
  v30 = v22;
  v31[0] = v31;
  v31[1] = v31;
  v32 = 0;
  v6 = v25;
  if (v25)
  {
    v8 = v23;
    v7 = v24;
    v9 = *v24;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v23 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    v10 = v31[0];
    *(_QWORD *)(v31[0] + 8) = v7;
    *v7 = v10;
    v31[0] = v8;
    *(_QWORD *)(v8 + 8) = v31;
    v32 = v6;
    v25 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v33, &v30, *((float *)a1 + 8));
  std::__list_imp<char *>::clear(v31);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  fst::StringFactor<int,(fst::StringType)2>::Value((uint64_t)&v35, (uint64_t)&v22);
  v17 = v26;
  v18[0] = v18;
  v18[1] = v18;
  v19 = 0;
  v11 = v29;
  if (v29)
  {
    v13 = v27;
    v12 = v28;
    v14 = *v28;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v27 + 8);
    **(_QWORD **)(v13 + 8) = v14;
    v15 = v18[0];
    *(_QWORD *)(v18[0] + 8) = v12;
    *v12 = v15;
    v18[0] = v13;
    *(_QWORD *)(v13 + 8) = v18;
    v19 = v11;
    v29 = 0;
  }
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v20, &v17, 0.0);
  std::__list_imp<char *>::clear(v18);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>&,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>&,0>(a2, &v33, &v20);
  std::__list_imp<char *>::clear(v21);
  std::__list_imp<char *>::clear(v34);
  return std::__list_imp<char *>::clear(v36);
}

void sub_1ADBF6920(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  std::__list_imp<char *>::clear((_QWORD *)(v2 + 8));
  std::__list_imp<char *>::clear((_QWORD *)(v3 - 120));
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>&,fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  *(_DWORD *)(a1 + 40) = *a3;
  std::list<int>::list((_QWORD *)(a1 + 48), (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 72) = a3[8];
  return a1;
}

void sub_1ADBF6A00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 40);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 48);
}

_QWORD *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D26FA8;
  if (a3)
  {
    v5 = operator new();
    fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FactorWeightFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADBF6B54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D219A0;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  v5 = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a2 + 148);
  v6 = *(_DWORD *)(a2 + 156);
  v7 = *(_WORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 136) = v4;
  *(_DWORD *)(a1 + 144) = v5;
  *(_DWORD *)(a1 + 156) = v6;
  *(_WORD *)(a1 + 160) = v7;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "factor_weight");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    else
      v10 = 0;
    *(_QWORD *)(a1 + 40) = v10;
  }
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 48) = v13;
  }
  return a1;
}

void sub_1ADBF6D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  void *v16;
  void **v17;
  void *v19;

  if (a15 < 0)
    operator delete(__p);
  v19 = *v17;
  if (*v17)
  {
    v15[30] = v19;
    operator delete(v19);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)v16 + 24);
  __p = v16;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *((_QWORD *)v19 + 7);
    v9 = 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)v19 + 8) - v8) >> 3);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        v14 = *v12;
        v12 += 14;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while (v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADBF6EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 84);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Expand(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADBF6F68(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
}

_QWORD *fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFst(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char v8[8];
  uint64_t v9;

  v6 = operator new();
  v8[0] = 1;
  v9 = 0;
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFstImpl(v6, a2, a3, (uint64_t)v8);
  *a1 = &unk_1E5D237C8;
  a1[1] = v6;
  return a1;
}

void sub_1ADBF7048(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D246F0;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D246F0;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D237C8;
  return v4;
}

void sub_1ADBF7254(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::StateIterator(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1ADBF72E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v7;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a4) = &unk_1E5D1B4F0;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  v7 = (_QWORD *)operator new();
  *v7 = *a3;
  *(_QWORD *)(a1 + 144) = v7;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Init(a1);
  return a1;
}

void sub_1ADBF73A8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Init(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 112))(*(_QWORD *)(a1 + 136));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v2)
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      v4 = 0;
    *(_QWORD *)(a1 + 40) = v4;
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = 0;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result == -1)
  {
    *(_DWORD *)(a1 + 156) = 0;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    *(_DWORD *)(a1 + 156) = 1;
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 0x3FFFFFFF0004, 0);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 144) + 4))
      v7 = result & 0x2EBC21080003 | 4;
    else
      v7 = result & 0x2EBC21080007;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | v7;
    if (*(_DWORD *)(a1 + 156) == 2)
      *(_DWORD *)(a1 + 160) = 0;
  }
  return result;
}

void sub_1ADBF7514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0)|| *(_BYTE *)(*(_QWORD *)(a1 + 144) + 4)))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::~ArcMapFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D1B4F0;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3)
      MEMORY[0x1AF44D190](v3, 0x1000C4090D0E795);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((_QWORD *)a1);
}

float fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final(uint64_t a1, int a2)
{
  int v4;
  float v5;
  char *MutableState;
  int v7;
  int *v8;
  int v9;
  _BOOL4 v11;
  unint64_t v12;
  int v13;
  int v14;
  fst *v15;
  _QWORD *v16;
  int *v17;
  _BOOL4 v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD v27[3];
  int v28;
  char v29;
  uint64_t v30;
  _QWORD v31[3];
  int v32;
  void *__p;
  int v34;
  _QWORD v35[3];
  int v36;
  int v37;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0)
  {
    v4 = *(_DWORD *)(a1 + 156);
    if (v4 == 1)
    {
      v7 = *(_DWORD *)(a1 + 160);
      if (v7 == a2)
      {
        MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        *(_DWORD *)MutableState = 0;
      }
      else
      {
        v17 = *(int **)(a1 + 144);
        v19 = v7 != -1 && v7 <= a2;
        (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v26, *(_QWORD *)(a1 + 136), (a2 - v19));
        __p = 0;
        v34 = v26;
        std::list<int>::list(v35, (uint64_t)v27);
        v36 = v28;
        v37 = -1;
        v20 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()(v17, (int *)&__p);
        v22 = v21;
        std::__list_imp<char *>::clear(v35);
        std::__list_imp<char *>::clear(v27);
        MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        if (v20)
          *(_DWORD *)MutableState = 2139095040;
        else
          *(_DWORD *)MutableState = v22;
      }
    }
    else if (v4 == 2)
    {
      if (*(_DWORD *)(a1 + 160) == a2)
        v5 = 0.0;
      else
        v5 = INFINITY;
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      *(float *)MutableState = v5;
    }
    else
    {
      v8 = *(int **)(a1 + 144);
      v9 = *(_DWORD *)(a1 + 160);
      v11 = v9 != -1 && v9 <= a2;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v30, *(_QWORD *)(a1 + 136), (a2 - v11));
      __p = 0;
      v34 = v30;
      std::list<int>::list(v35, (uint64_t)v31);
      v36 = v32;
      v37 = -1;
      v12 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()(v8, (int *)&__p);
      v14 = v13;
      std::__list_imp<char *>::clear(v35);
      std::__list_imp<char *>::clear(v31);
      if (v12)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v15 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)&__p);
        v16 = (_QWORD *)fst::cerr(v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
        if (SHIBYTE(v35[0]) < 0)
          operator delete(__p);
        *(_QWORD *)(a1 + 8) |= 4uLL;
      }
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      *(_DWORD *)MutableState = v14;
    }
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  v23 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v23 + 76) == a2)
    v24 = v23 + 80;
  else
    v24 = *(_QWORD *)(v23 + 8) + 8 * (a2 + 1);
  return **(float **)v24;
}

void sub_1ADBF78E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a17);
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()(int *a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *__p[2];
  char v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  float v29[5];
  char v30;

  if (a2[12] != -1)
    goto LABEL_24;
  v4 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::Zero();
  v5 = a2[2];
  v6 = v5 ? *((_QWORD *)a2 + 4) + 1 : 0;
  v7 = *(_DWORD *)v4 ? *(_QWORD *)(v4 + 24) + 1 : 0;
  if (v6 != v7)
    goto LABEL_24;
  v8 = 0;
  v9 = (uint64_t *)(a2 + 6);
  v10 = (uint64_t *)(v4 + 16);
  v11 = v5 && v5 == *(_DWORD *)v4;
  v12 = !v11;
  v13 = !v12;
  while (1)
  {
    v14 = *v9;
    v15 = *v10;
    if ((v8 & 1) == 0 && !v13)
      break;
    if ((int *)v14 == a2 + 4)
      goto LABEL_22;
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16))
      goto LABEL_24;
    v9 = (uint64_t *)(v14 + 8);
    v10 = (uint64_t *)(v15 + 8);
    v8 = 1;
  }
  if (v5)
    goto LABEL_24;
LABEL_22:
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = a2[10];
  v29[0] = 0.0;
  v29[0] = *(float *)(v4 + 32);
  if (*(float *)__p == v29[0])
  {
    v16 = 0;
    v17 = *a2;
  }
  else
  {
LABEL_24:
    v28 = -1;
    if (!fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Extract<(fst::GallicType)1>((unsigned int *)a2 + 2, &v27, &v28)|| (v17 = *a2, *a2 != a2[1]))
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v18 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
      v19 = (_QWORD *)fst::cerr(v18);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"FromGallicMapper: unrepresentable weight: ", 42);
      fst::CompositeWeightWriter::CompositeWeightWriter((uint64_t)v29, v20);
      if (*FLAGS_fst_weight_parentheses)
      {
        v30 = *FLAGS_fst_weight_parentheses;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)v29, (uint64_t)&v30, 1);
      }
      fst::CompositeWeightWriter::WriteElement<fst::StringWeight<int,(fst::StringType)1>>((uint64_t)v29, a2 + 2);
      fst::CompositeWeightWriter::WriteElement<fst::LogWeightTpl<float>>((uint64_t)v29, (float *)a2 + 10);
      if (*FLAGS_fst_weight_parentheses)
      {
        v30 = *(_BYTE *)(FLAGS_fst_weight_parentheses + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)v29, (uint64_t)&v30, 1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for arc with ilabel = ", 23);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", olabel = ", 11);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", nextstate = ", 14);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
      if (v25 < 0)
        operator delete(__p[0]);
      *((_BYTE *)a1 + 4) = 1;
      v17 = *a2;
    }
    if (!v17 && v28 && a2[12] == -1)
      v17 = *a1;
    v16 = (unint64_t)v28 << 32;
  }
  return v16 | v17;
}

void sub_1ADBF7C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
}

void fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v12;
  char *MutableState;
  int v14;
  int *v15;
  int v16;
  BOOL v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  unint64_t *v23;
  int *v24;
  int v25;
  _BOOL4 v27;
  unint64_t v28;
  float v29;
  float v30;
  int v31;
  uint64_t v32;
  _QWORD v33[3];
  int v34;
  uint64_t v35;
  _QWORD v36[3];
  int v37;
  __int128 v38;
  unint64_t v39;
  float v40;
  int v41;
  _QWORD v42[3];
  int v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  unint64_t v49;

  v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  v5 = *(_QWORD *)(a1 + 136);
  v7 = v4 != -1 && v4 <= a2;
  v49 = 0;
  (*(void (**)(uint64_t, _QWORD, unint64_t *))(*(_QWORD *)v5 + 136))(v5, (a2 - v7), &v45);
  while (1)
  {
    if (!v45)
    {
      if (v49 >= v47)
        goto LABEL_28;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v45 + 24))(v45))
      break;
    if (v45)
    {
      v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v45 + 32))(v45);
      goto LABEL_16;
    }
LABEL_15:
    v8 = v46 + 56 * v49;
LABEL_16:
    v39 = *(_QWORD *)v8;
    v40 = *(float *)(v8 + 8);
    std::list<int>::list(v42, v8 + 16);
    v43 = *(_DWORD *)(v8 + 40);
    v9 = *(_DWORD *)(v8 + 48);
    v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= v9)
      ++v9;
    if (v9 >= *(_DWORD *)(a1 + 164))
      *(_DWORD *)(a1 + 164) = v9 + 1;
    v44 = v9;
    *(_QWORD *)&v38 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()(*(int **)(a1 + 144), (int *)&v39);
    *((_QWORD *)&v38 + 1) = v12;
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v38);
    std::__list_imp<char *>::clear(v42);
    if (v45)
      (*(void (**)(unint64_t))(*(_QWORD *)v45 + 40))(v45);
    else
      ++v49;
  }
  if (v45)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v45 + 8))(v45);
    goto LABEL_30;
  }
LABEL_28:
  if (v48)
    --*v48;
LABEL_30:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0|| (LODWORD(v39) = fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Final(a1, a2), LODWORD(v45) = 2139095040, *(float *)&v39 == INFINITY))
  {
    v14 = *(_DWORD *)(a1 + 156);
    if (v14 == 2)
    {
      v24 = *(int **)(a1 + 144);
      v25 = *(_DWORD *)(a1 + 160);
      v27 = v25 != -1 && v25 <= a2;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v32, *(_QWORD *)(a1 + 136), (a2 - v27));
      v39 = 0;
      v40 = *(float *)&v32;
      std::list<int>::list(v42, (uint64_t)v33);
      v43 = v34;
      v44 = -1;
      v28 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()(v24, (int *)&v39);
      v30 = v29;
      std::__list_imp<char *>::clear(v42);
      std::__list_imp<char *>::clear(v33);
      if (v28 || (*(float *)&v39 = v30, LODWORD(v45) = 2139095040, v30 != INFINITY))
      {
        v31 = *(_DWORD *)(a1 + 160);
        v39 = v28;
        v40 = v30;
        v41 = v31;
        v22 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        v23 = &v39;
        goto LABEL_53;
      }
    }
    else if (v14 == 1)
    {
      v15 = *(int **)(a1 + 144);
      v16 = *(_DWORD *)(a1 + 160);
      v17 = v16 != -1 && v16 <= a2;
      v18 = v17;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v35, *(_QWORD *)(a1 + 136), (a2 - v18));
      v39 = 0;
      v40 = *(float *)&v35;
      std::list<int>::list(v42, (uint64_t)v36);
      v43 = v37;
      v44 = -1;
      v19 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()(v15, (int *)&v39);
      v45 = v19;
      v46 = v20;
      std::__list_imp<char *>::clear(v42);
      std::__list_imp<char *>::clear(v36);
      if (v19)
      {
        v21 = *(_DWORD *)(a1 + 160);
        if (v21 == -1)
        {
          v21 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v21;
          *(_DWORD *)(a1 + 164) = v21 + 1;
        }
        HIDWORD(v46) = v21;
        v22 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        v23 = &v45;
LABEL_53:
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v22, v23);
      }
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADBF8058(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 16);
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D246F0;
  if (a3)
  {
    v5 = operator new();
    fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADBF8210(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D1B4F0;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  v4 = (_QWORD *)operator new();
  *v4 = **(_QWORD **)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v4;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Init(a1);
  return a1;
}

void sub_1ADBF82C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1CBA8;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1ADBF834C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  int v7;
  uint64_t v8;
  int v9;
  _QWORD v10[3];
  int v11;
  int v12;

  v1 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    v2 = result;
    if (!*(_BYTE *)(result + 44))
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        if ((result & 1) != 0)
          return result;
        v1 = *(_QWORD *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      v3 = *(int **)(v1 + 144);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v1 + 136) + 32))(&v5, *(_QWORD *)(v1 + 136), *(unsigned int *)(v2 + 40));
      v8 = 0;
      v9 = v5;
      std::list<int>::list(v10, (uint64_t)v6);
      v11 = v7;
      v12 = -1;
      v4 = fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>::operator()(v3, (int *)&v8);
      std::__list_imp<char *>::clear(v10);
      result = (uint64_t)std::__list_imp<char *>::clear(v6);
      if (v4)
        *(_BYTE *)(v2 + 44) = 1;
    }
  }
  return result;
}

void sub_1ADBF8460(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1CBA8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1CBA8;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Done_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) & 1) != 0)
      return *(_BYTE *)(a1 + 44) == 0;
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(_BYTE *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Next(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  ++*(_DWORD *)(a1 + 40);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if ((result & 1) == 0)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
        return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(a1);
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 0;
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::Reset(uint64_t a1)
{
  uint64_t v2;

  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  else
    *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D20CE8;
  v2 = a1[20];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_1E5D21F70;
  v3 = a1[17];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFstImplBase(a1, a2);
  *(_QWORD *)v4 = &unk_1E5D20CE8;
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(v4 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(v4 + 152) = *(_BYTE *)(a2 + 152);
  fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Init(v4, *(_QWORD *)(v4 + 136), 0);
  return a1;
}

void sub_1ADBF8778(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D21F70;
  v3 = v1[17];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)fst::ArcMapFstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)2>>::Expand(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADBF8820(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  fst *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *__p[2];
  char v11;
  char v12;

  v5 = fst::DeterminizeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(a1, a2, a3);
  *(_QWORD *)v5 = &unk_1E5D20D98;
  *(_DWORD *)(v5 + 144) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(v5 + 148) = *(_DWORD *)(a3 + 20);
  *(_BYTE *)(v5 + 152) = *(_BYTE *)(a3 + 28);
  if (*(_QWORD *)(a3 + 40))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"DeterminizeFst: ", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"a state table can not be passed with transducer input", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  else
  {
    fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Init(a1, *(_QWORD *)(a1 + 136), *(_QWORD **)(a3 + 32));
  }
  return a1;
}

void sub_1ADBF8940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v15 - 17));
  if (a14 < 0)
    operator delete(__p);
  *v14 = &unk_1E5D21F70;
  v17 = v14[17];
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v14);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Init(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char v21[8];
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char v27;
  char v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[8];
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;

  fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFst(&v38, a2, (uint64_t)v31);
  if (a3)
  {
    v5 = (_QWORD *)operator new();
    fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::DefaultDeterminizeFilter<fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v5, (uint64_t)&v38, a3);
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_DWORD *)(a1 + 144);
  v31[0] = *(_BYTE *)(a1 + 104);
  v32 = v6;
  v33 = v7;
  v34 = 0;
  v35 = 0;
  v36 = v5;
  v37 = 0;
  fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeFst<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>(&v29, (uint64_t)&v38, 0, 0, (uint64_t)v31);
  v8 = *(_DWORD *)(a1 + 144);
  v9 = *(_DWORD *)(a1 + 148);
  v10 = *(_BYTE *)(a1 + 152);
  v21[0] = 1;
  v22 = 0;
  v23 = v8;
  v24 = 1;
  v25 = v9;
  v26 = v9;
  v27 = v10;
  v28 = v10;
  fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::FactorWeightFst(&v19, (uint64_t)&v29, (uint64_t)v21);
  v11 = (_QWORD *)operator new();
  LODWORD(v18) = *(_DWORD *)(a1 + 148);
  BYTE4(v18) = 0;
  fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFst(v11, (uint64_t)&v19, &v18);
  *(_QWORD *)(a1 + 160) = v11;
  v19 = &unk_1E5D27108;
  v12 = v20;
  if (v20)
  {
    v13 = *(_DWORD *)(v20 + 56) - 1;
    *(_DWORD *)(v20 + 56) = v13;
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v29 = &unk_1E5D279F8;
  v14 = v30;
  if (v30)
  {
    v15 = *(_DWORD *)(v30 + 56) - 1;
    *(_DWORD *)(v30 + 56) = v15;
    if (!v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v38 = &unk_1E5D242D0;
  result = v39;
  if (v39)
  {
    v17 = *(_DWORD *)(v39 + 56) - 1;
    *(_DWORD *)(v39 + 56) = v17;
    if (!v17)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADBF8B74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v4;
  int v5;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  *(_QWORD *)(v2 - 48) = &unk_1E5D242D0;
  v4 = *(_DWORD **)(v2 - 40);
  if (v4)
  {
    v5 = v4[14] - 1;
    v4[14] = v5;
    if (!v5)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(_QWORD *a1)
{
  fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::~DeterminizeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFstImpl(v2, a1);
  return v2;
}

void sub_1ADBF8D60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40BF12C28CLL);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::Expand(uint64_t a1, int a2)
{
  char *v4;
  unint64_t i;
  uint64_t v6;
  char *MutableState;
  char *v8;
  unint64_t v9;

  fst::ArcIterator<fst::ArcMapFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::ArcIterator(&v8, *(_QWORD *)(a1 + 160), a2);
  v4 = v8;
  for (i = v9; ; i = ++v9)
  {
    v6 = *((_QWORD *)v4 + 3);
    if (i >= (*((_QWORD *)v4 + 4) - v6) >> 4)
      break;
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, (_OWORD *)(v6 + 16 * i));
    v4 = v8;
  }
  --*((_DWORD *)v4 + 13);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADBF8E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 24))(*(_QWORD *)(a1 + 160));
}

uint64_t fst::DeterminizeFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::ComputeFinal(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 32))(*(_QWORD *)(a1 + 160));
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicFactor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::~FactorWeightFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D27108;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D279F8;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D242D0;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFst(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v8[8];
  uint64_t v9;

  v6 = operator new();
  v8[0] = 1;
  v9 = 0;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFstImpl(v6, a2, a3, (uint64_t)v8);
  *a1 = &unk_1E5D233A8;
  a1[1] = v6;
  return a1;
}

void sub_1ADBF8FC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D242D0;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(*(_QWORD *)(a1 + 8));
}

uint64_t *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D233A8;
  return v4;
}

void sub_1ADBF9194(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADBF926C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADBF934C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::StateIterator(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1ADBF93E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheBaseImpl(a1, a4) = &unk_1E5D1B3A0;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(_QWORD *)(a1 + 144) = operator new();
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Init(a1);
  return a1;
}

void sub_1ADBF9498(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

unint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Init(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  unint64_t v7;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 112))(*(_QWORD *)(a1 + 136));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v2)
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      v4 = 0;
    *(_QWORD *)(a1 + 40) = v4;
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = 0;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if ((_DWORD)result == -1)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 0x3FFFFFFF0004, 0);
    result = fst::ProjectProperties(v7, 1);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | result & 0x3FFCFFFF0007;
    if (*(_DWORD *)(a1 + 156) == 2)
      *(_DWORD *)(a1 + 160) = 0;
  }
  return result;
}

void sub_1ADBF95F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0)|| (fst::ProjectProperties(0, 1) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D22A90;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B950;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::VectorCacheStore((_QWORD *)v4, (_BYTE *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 72) = v5 == 0;
  *(_DWORD *)(v4 + 76) = -1;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = *(_BYTE *)a2;
  if (v5 <= 0x1FA0)
    v5 = 8096;
  *(_QWORD *)(v4 + 96) = v5;
  *(_BYTE *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

void sub_1ADBF97AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D22A90;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::VectorCacheStore(_QWORD *a1, _BYTE *a2)
{
  *(_BYTE *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1ADBF990C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  std::__list_imp<char *>::clear(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::Clear(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  if (v2 != a1[1])
  {
    v3 = 0;
    v2 = a1[1];
    do
    {
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Destroy(*(_QWORD *)(v2 + 8 * v3++));
      v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return std::__list_imp<char *>::clear(a1 + 4);
}

void fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Destroy(uint64_t a1)
{
  void **v2;

  if (a1)
  {
    v2 = (void **)(a1 + 80);
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__destroy_vector::operator()[abi:ne180100](&v2);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(a1 + 40));
    std::__list_imp<char *>::clear((_QWORD *)(a1 + 8));
    operator delete((void *)a1);
  }
}

void std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__base_destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;

  v3 = result;
  for (i = result[1]; i != a2; i -= 80)
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(i - 32));
    result = std::__list_imp<char *>::clear((_QWORD *)(i - 64));
  }
  v3[1] = a2;
  return result;
}

void std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__list_imp<char *>::clear(v3 + 3);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B950;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~FstImpl((uint64_t)a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::~VectorCacheStore(_QWORD *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~ArcMapFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D1B3A0;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3)
      MEMORY[0x1AF44D190](v3, 0xC400A2AC0F1);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl((_QWORD *)a1);
}

uint64_t *fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  int *v7;
  int v8;
  int *v9;
  _QWORD *v10;
  uint64_t *v11;
  int v12;
  _BOOL4 v14;
  float v15;
  fst *v16;
  _QWORD *v17;
  int *v18;
  _QWORD *v19;
  _BOOL4 v21;
  float v22;
  _QWORD *v23;
  uint64_t *v24;
  int *v25;
  int v27;
  _QWORD v28[3];
  int v29;
  uint64_t v30[3];
  int v31;
  _QWORD v32[3];
  int v33;
  uint64_t v34[3];
  int v35;
  _QWORD v36[3];
  int v37;
  uint64_t v38[3];
  int v39;
  _QWORD v40[3];
  int v41;
  uint64_t v42[3];
  int v43;
  _QWORD v44[3];
  int v45;
  uint64_t v46[3];
  void *v47;
  float v48;
  int v49;
  char v50;
  char v51;
  uint64_t v52;
  int v53;
  _BYTE v54[24];
  int v55;
  uint64_t v56[4];

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasFinal(a1, a2) & 1) == 0)
  {
    v6 = *(_DWORD *)(a1 + 156);
    if (v6 == 1)
    {
      v8 = *(_DWORD *)(a1 + 160);
      if (v8 != a2)
      {
        v21 = v8 != -1 && v8 <= a2;
        v22 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v21));
        v47 = 0;
        v48 = v22;
        v49 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()((uint64_t)&v47, (uint64_t)&v52);
        if (v52)
        {
          v25 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
          v31 = *v25;
          v23 = v32;
          std::list<int>::list(v32, (uint64_t)(v25 + 2));
          v33 = v25[8];
          v24 = v34;
          std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v34, (uint64_t)(v25 + 10));
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v31);
        }
        else
        {
          v35 = v53;
          v23 = v36;
          std::list<int>::list(v36, (uint64_t)v54);
          v37 = v55;
          v24 = v38;
          std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v38, (uint64_t)v56);
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v35);
        }
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v24);
        std::__list_imp<char *>::clear(v23);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v56);
        v19 = v54;
        goto LABEL_35;
      }
      v9 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One();
      v39 = *v9;
      v10 = v40;
      std::list<int>::list(v40, (uint64_t)(v9 + 2));
      v41 = v9[8];
      v11 = v42;
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v42, (uint64_t)(v9 + 10));
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v39);
    }
    else
    {
      if (v6 != 2)
      {
        v12 = *(_DWORD *)(a1 + 160);
        v14 = v12 != -1 && v12 <= a2;
        v15 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v14));
        v47 = 0;
        v48 = v15;
        v49 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()((uint64_t)&v47, (uint64_t)&v52);
        if (v52)
        {
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(&v47, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(&v47, "ERROR");
          v16 = fst::LogMessage::LogMessage((fst *)&v51, (uint64_t)&v47);
          v17 = (_QWORD *)fst::cerr(v16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v51);
          if (v50 < 0)
            operator delete(v47);
          *(_QWORD *)(a1 + 8) |= 4uLL;
        }
        v43 = v53;
        std::list<int>::list(v44, (uint64_t)v54);
        v45 = v55;
        std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v46, (uint64_t)v56);
        fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v43);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v46);
        std::__list_imp<char *>::clear(v44);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v56);
        v19 = v54;
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 160) == a2)
        v7 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One();
      else
        v7 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
      v18 = v7;
      v27 = *v7;
      v10 = v28;
      std::list<int>::list(v28, (uint64_t)(v7 + 2));
      v29 = v18[8];
      v11 = v30;
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v30, (uint64_t)(v18 + 10));
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(a1, a2, &v27);
    }
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v11);
    v19 = v10;
LABEL_35:
    std::__list_imp<char *>::clear(v19);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final(a1, a2, a3);
}

void sub_1ADBF9F84(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v1 - 145));
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v1 - 96));
  std::__list_imp<char *>::clear((_QWORD *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasFinal(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    v4 = a2 + 1;
    v6 = v2 + 8;
    v5 = *(_QWORD *)(v2 + 8);
    if (v4 >= (*(_QWORD *)(v6 + 8) - v5) >> 3)
      return 0;
    v3 = (uint64_t *)(v5 + 8 * v4);
  }
  v7 = *v3;
  if (!v7)
    return 0;
  v8 = *(_DWORD *)(v7 + 104);
  if ((v8 & 1) == 0)
    return 0;
  *(_DWORD *)(v7 + 104) = v8 | 8;
  return 1;
}

_QWORD *fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  uint64_t *v6;
  int *v7;
  uint64_t *v8;
  int *v9;
  int v10;
  int *v11;
  int v13;
  uint64_t v14;
  int v15;
  _QWORD v16[4];
  uint64_t v17[3];
  int v18;
  _QWORD v19[3];
  _DWORD v20[16];
  int v21;
  _QWORD v22[3];
  int v23;
  uint64_t v24[3];
  int v25;
  _QWORD v26[3];
  _DWORD v27[17];
  float v28;

  if (*(_DWORD *)(a1 + 12) == -1)
  {
    v28 = 0.0;
    v28 = *(float *)(a1 + 8);
    v27[16] = 2139095040;
    if (v28 == INFINITY)
    {
      v11 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
      v21 = *v11;
      v6 = v22;
      std::list<int>::list(v22, (uint64_t)(v11 + 2));
      v23 = v11[8];
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v24, (uint64_t)(v11 + 10));
      fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc(a2, 0, 0, &v21, -1);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v24);
      return std::__list_imp<char *>::clear(v6);
    }
    v7 = (int *)fst::StringWeight<int,(fst::StringType)2>::One();
    v25 = *v7;
    v6 = v26;
    std::list<int>::list(v26, (uint64_t)(v7 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight((uint64_t)v27, &v25, *(float *)(a1 + 8));
    v8 = (uint64_t *)v27;
    fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc(a2, 0, 0, v27, -1);
    goto LABEL_7;
  }
  v5 = *(_DWORD *)a1;
  v4 = *(_DWORD *)(a1 + 4);
  if (!v4)
  {
    v9 = (int *)fst::StringWeight<int,(fst::StringType)2>::One();
    v18 = *v9;
    v6 = v19;
    std::list<int>::list(v19, (uint64_t)(v9 + 2));
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight((uint64_t)v20, &v18, *(float *)(a1 + 8));
    v10 = *(_DWORD *)(a1 + 12);
    v8 = (uint64_t *)v20;
    fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc(a2, v5, v5, v20, v10);
LABEL_7:
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v8 + 5);
    std::__list_imp<char *>::clear(v8 + 1);
    return std::__list_imp<char *>::clear(v6);
  }
  fst::StringWeight<int,(fst::StringType)2>::StringWeight((uint64_t)&v13, v4);
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight((uint64_t)&v15, &v13, *(float *)(a1 + 8));
  fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc(a2, v5, v5, &v15, *(_DWORD *)(a1 + 12));
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v17);
  std::__list_imp<char *>::clear(v16);
  v6 = &v14;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1ADBFA274(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t *MutableState;
  _QWORD *result;
  int v6;
  _QWORD v7[3];
  int v8;
  uint64_t v9[3];

  MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  v6 = *a3;
  std::list<int>::list(v7, (uint64_t)(a3 + 2));
  v8 = a3[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v9, (uint64_t)(a3 + 10));
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(MutableState, (uint64_t)&v6);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v9);
  result = std::__list_imp<char *>::clear(v7);
  *((_DWORD *)MutableState + 26) |= 9u;
  return result;
}

void sub_1ADBFA37C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::One();
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(v2, v3);
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One(void)::one = v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One(void)::one;
}

void sub_1ADBFA420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero();
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(v2, v3);
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero(void)::zero = v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero(void)::zero;
}

void sub_1ADBFA4D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _DWORD **v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  v3 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v3 + 76) == a2)
  {
    v4 = (_DWORD **)(v3 + 80);
  }
  else
  {
    v5 = a2 + 1;
    v7 = v3 + 8;
    v6 = *(_QWORD *)(v3 + 8);
    if (v5 >= (*(_QWORD *)(v7 + 8) - v6) >> 3)
    {
      v8 = 0;
      return fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final(v8, a3);
    }
    v4 = (_DWORD **)(v6 + 8 * v5);
  }
  v8 = *v4;
  return fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final(v8, a3);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(uint64_t a1, int *a2, float a3)
{
  int v6;
  _QWORD v7[3];
  int v8;
  _QWORD v9[4];

  v6 = *a2;
  std::list<int>::list(v7, (uint64_t)(a2 + 2));
  fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::GallicWeight((uint64_t)&v8, &v6, a3);
  fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::UnionWeight(a1, &v8);
  std::__list_imp<char *>::clear(v9);
  std::__list_imp<char *>::clear(v7);
  return a1;
}

void sub_1ADBFA5D8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  std::__list_imp<char *>::clear((_QWORD *)(v2 + 8));
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::UnionWeight(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  *(_DWORD *)a1 = *a2;
  v4 = a2 + 2;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
  v6 = *a2;
  if (*a2)
    v7 = *((_QWORD *)a2 + 3) + 1;
  else
    v7 = 0;
  if (*(_DWORD *)v5)
    v8 = *(_QWORD *)(v5 + 24) + 1;
  else
    v8 = 0;
  if (v7 == v8)
  {
    v9 = 0;
    v10 = (uint64_t *)(a2 + 4);
    v11 = (uint64_t *)(v5 + 16);
    if (v6)
      v12 = v6 == *(_DWORD *)v5;
    else
      v12 = 0;
    v13 = !v12;
    v14 = v13 ^ 1;
    while (1)
    {
      v15 = *v10;
      v16 = *v11;
      if ((v9 & 1) == 0 && !v14)
        break;
      if ((int *)v15 == v4)
        goto LABEL_21;
      if (*(_DWORD *)(v15 + 16) != *(_DWORD *)(v16 + 16))
        return a1;
      v10 = (uint64_t *)(v15 + 8);
      v11 = (uint64_t *)(v16 + 8);
      v9 = 1;
    }
    if (v6)
      return a1;
LABEL_21:
    if (*((float *)a2 + 8) == *(float *)(v5 + 32))
    {
      v17 = std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>(a1 + 40, 0, 0, a2);
      v18 = *(_QWORD *)(a1 + 40);
      *v17 = v18;
      v17[1] = a1 + 40;
      *(_QWORD *)(v18 + 8) = v17;
      *(_QWORD *)(a1 + 40) = v17;
      ++*(_QWORD *)(a1 + 56);
    }
  }
  return a1;
}

void sub_1ADBFA744(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::NoWeight();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight(void)::no_weight = v2;
  }
  return fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight(void)::no_weight;
}

void sub_1ADBFA7F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  _DWORD *v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (_DWORD *)fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::NoWeight();
    *(_DWORD *)v2 = *v3;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)(v3 + 2));
    *(_DWORD *)(v2 + 32) = v3[8];
    fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight = v2;
  }
  return fst::ProductWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1ADBFA8C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::StringWeight<int,(fst::StringType)2>::NoWeight();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    *(_DWORD *)v2 = v4;
    std::list<int>::list((_QWORD *)(v2 + 8), (uint64_t)v5);
    *(_DWORD *)(v2 + 32) = 2143289344;
    std::__list_imp<char *>::clear(v5);
    fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight = v2;
  }
  return fst::PairWeight<fst::StringWeight<int,(fst::StringType)2>,fst::TropicalWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1ADBFA9C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C4067685F46);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _QWORD *v7;

  v7 = operator new(0x38uLL);
  *v7 = a2;
  v7[1] = a3;
  *((_DWORD *)v7 + 4) = *a4;
  std::list<int>::list(v7 + 3, (uint64_t)(a4 + 2));
  *((_DWORD *)v7 + 12) = a4[8];
  return v7;
}

void sub_1ADBFAA68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc(uint64_t a1, int a2, int a3, _DWORD *a4, int a5)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = *a4;
  std::list<int>::list((_QWORD *)(a1 + 16), (uint64_t)(a4 + 2));
  *(_DWORD *)(a1 + 40) = a4[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 48), (uint64_t)(a4 + 10));
  *(_DWORD *)(a1 + 72) = a5;
  return a1;
}

void sub_1ADBFAAE0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_DWORD *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  _DWORD *MutableState;
  _DWORD *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = MutableState[26];
    if ((v5 & 4) == 0)
    {
      MutableState[26] = v5 | 4;
      v6 = *((_QWORD *)MutableState + 11) - *((_QWORD *)MutableState + 10) + *(_QWORD *)(a1 + 112) + 112;
      *(_QWORD *)(a1 + 112) = v6;
      *(_BYTE *)(a1 + 104) = 1;
      if (v6 > *(_QWORD *)(a1 + 96))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

uint64_t *fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetFinal(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;

  *(_DWORD *)result = *(_DWORD *)a2;
  if (result != (uint64_t *)a2)
  {
    v3 = result;
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(result + 1, *(_QWORD *)(a2 + 16), a2 + 8);
    *((_DWORD *)v3 + 8) = *(_DWORD *)(a2 + 32);
    return std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>(v3 + 5, *(_QWORD *)(a2 + 48), a2 + 40);
  }
  return result;
}

_DWORD *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  _DWORD *result;
  uint64_t v5;
  void *MutableState;

  v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2)
    return *(_DWORD **)(a1 + 80);
  if (!*(_BYTE *)(a1 + 72))
    return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 76) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
    *((_DWORD *)MutableState + 26) |= 4u;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::reserve((uint64_t *)MutableState + 10, 0x80uLL);
    return *(_DWORD **)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(v5 + 108))
  {
    *(_DWORD *)(v5 + 104) &= ~4u;
    *(_BYTE *)(a1 + 72) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 76) = a2;
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Reset(v5);
  result = *(_DWORD **)(a1 + 80);
  result[26] |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GC(uint64_t a1, _DWORD *a2, char a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _DWORD *MutableState;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  fst *v27;
  _QWORD *v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37[2];
  char v38;
  char v39;
  char v40;
  void *__p[2];
  char v42;

  if (*(_BYTE *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0)
        operator delete(__p[0]);
    }
    v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      v18 = *(_DWORD *)(v17 + 16);
      if (v18)
        v19 = v18 - 1;
      else
        v19 = *(_DWORD *)(a1 + 76);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>::GetMutableState(a1, v19);
      v21 = *(_QWORD *)(a1 + 112);
      if (v21 > v16 && !MutableState[27])
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v22 = MutableState[26];
LABEL_19:
            if ((v22 & 4) != 0)
            {
              v23 = *((_QWORD *)MutableState + 11) - *((_QWORD *)MutableState + 10) + 112;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>::Delete((_QWORD *)a1);
            v17 = *(_QWORD *)(a1 + 56);
            continue;
          }
        }
        else
        {
          v22 = MutableState[26];
          if ((v22 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      MutableState[26] &= ~8u;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 112) <= v16)
    {
      v24 = *(_QWORD *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          v25 = *(_QWORD *)(a1 + 96);
          do
          {
            v25 *= 2;
            v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(_QWORD *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        v28 = (_QWORD *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      v30 = (_QWORD *)fst::cerr(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0)
        operator delete(v37[0]);
    }
  }
}

void sub_1ADBFB074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    v13 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v13);
  }
  else
  {
    v8 = *(void **)(v6 + 8 * a2);
    if (v8)
      return v8;
  }
  v8 = operator new(0x70uLL);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheState((uint64_t)v8);
  if (*(_BYTE *)a1)
  {
    v9 = operator new(0x18uLL);
    v9[4] = a2;
    v11 = *(_QWORD *)(a1 + 32);
    v10 = (_QWORD *)(a1 + 32);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v10;
    *(_QWORD *)(v11 + 8) = v9;
    *v10 = v9;
    ++v10[2];
  }
  return v8;
}

_QWORD *fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Reset(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
  *(_DWORD *)a1 = *(_DWORD *)v2;
  if (v2 != a1)
  {
    v3 = v2;
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 8), *(_QWORD *)(v2 + 16), v2 + 8);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v3 + 32);
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>((uint64_t *)(a1 + 40), *(_QWORD *)(v3 + 48), v3 + 40);
  }
  v5 = *(_QWORD *)(a1 + 80);
  v4 = (_QWORD *)(a1 + 80);
  v4[3] = 0;
  *(v4 - 2) = 0;
  *(v4 - 1) = 0;
  return std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__base_destruct_at_end[abi:ne180100](v4, v5);
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheState(uint64_t a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
  *(_DWORD *)a1 = *v2;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)(v2 + 2));
  *(_DWORD *)(a1 + 32) = v2[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 40), (uint64_t)(v2 + 10));
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return a1;
}

void sub_1ADBFB268(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void **std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 80 * v6;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1ADBFB318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 80;
      std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const&>(a1, v7 - 80, v9);
      v7 = *((_QWORD *)&v16 + 1) - 80;
      *((_QWORD *)&v16 + 1) -= 80;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1ADBFB454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  std::list<int>::list((_QWORD *)(a2 + 16), a3 + 16);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  result = std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a2 + 48), a3 + 48);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a3 + 72);
  return result;
}

void sub_1ADBFB4CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>::operator()[abi:ne180100]((_QWORD *)a1);
  return a1;
}

_QWORD *std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>::operator()[abi:ne180100](_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  while (v1 != v2)
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v1 + 48));
    result = std::__list_imp<char *>::clear((_QWORD *)(v1 + 16));
    v1 += 80;
  }
  return result;
}

void **std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~__split_buffer(void **a1)
{
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__destruct_at_end[abi:ne180100](a1, (uint64_t)a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v4[2] = v2 - 80;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v2 - 32));
      result = std::__list_imp<char *>::clear((_QWORD *)(v2 - 64));
      v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (a1 == a2)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  }
  else
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 8), *(_QWORD *)(a2 + 16), a2 + 8);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>((uint64_t *)(a1 + 40), *(_QWORD *)(a2 + 48), a2 + 40);
  }
  return a1;
}

uint64_t *std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v6;

  v4 = a2;
  v6 = (uint64_t *)a1[1];
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      *((_DWORD *)v6 + 4) = *(_DWORD *)(v4 + 16);
      if (v6 != (uint64_t *)v4)
        std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v6 + 3, *(_QWORD *)(v4 + 32), v4 + 24);
      *((_DWORD *)v6 + 12) = *(_DWORD *)(v4 + 48);
      v4 = *(_QWORD *)(v4 + 8);
      v6 = (uint64_t *)v6[1];
    }
    while (v4 != a3 && v6 != a1);
  }
  if (v6 == a1)
    return std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>((uint64_t)a1, a1, v4, a3);
  else
    return std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::erase((uint64_t)a1, v6, a1);
}

uint64_t *std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>(a1, 0, 0, (_DWORD *)(a3 + 16));
    v9 = v8;
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = (uint64_t)v8;
      do
      {
        v8 = std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>(a1, v12, 0, (_DWORD *)(v10 + 16));
        *(_QWORD *)(v12 + 8) = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1ADBFB7C4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>(v1);
  __cxa_rethrow();
}

void sub_1ADBFB7D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::erase(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = *a3;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    do
    {
      v8 = (_QWORD *)v4[1];
      --*(_QWORD *)(a1 + 16);
      std::__list_imp<char *>::clear(v4 + 3);
      operator delete(v4);
      v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

void fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>::Delete(_QWORD *a1)
{
  int v1;

  v1 = *(_DWORD *)(a1[7] + 16);
  if (!v1 || v1 - 1 == *((_DWORD *)a1 + 19))
  {
    *((_DWORD *)a1 + 19) = -1;
    a1[10] = 0;
  }
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::Delete(a1);
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::Delete(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Destroy(*(_QWORD *)(a1[1] + 8 * *(int *)(a1[7] + 16)));
  v2 = a1[6];
  *(_QWORD *)(a1[1] + 8 * *(int *)(a1[7] + 16)) = 0;
  v3 = (uint64_t *)a1[7];
  v5 = *v3;
  v4 = v3[1];
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)v3[1] = v5;
  a1[6] = v2 - 1;
  a1[7] = v4;
  operator delete(v3);
}

uint64_t *std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    v5 = std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__create_node[abi:ne180100]<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2> const&>((uint64_t)a1, 0, 0, (_DWORD *)(i + 16));
    v6 = *a1;
    *v5 = *a1;
    v5[1] = a1;
    *(_QWORD *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_1ADBFB970(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];
  int v6;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::One();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    v6 = v3[8];
    fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::UnionWeight(v2, &v4);
    std::__list_imp<char *>::clear(v5);
    fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::One(void)::one = v2;
  }
  return fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::One(void)::one;
}

void sub_1ADBFBA48(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C404C081FCELL);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::GallicWeight(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a1 + 40), (uint64_t)(a2 + 10));
  return a1;
}

void sub_1ADBFBAE4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  int *v3;
  int v4;
  _QWORD v5[3];
  int v6;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
    v4 = *v3;
    std::list<int>::list(v5, (uint64_t)(v3 + 2));
    v6 = v3[8];
    fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::UnionWeight(v2, &v4);
    std::__list_imp<char *>::clear(v5);
    fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero(void)::zero = v2;
  }
  return fst::UnionWeight<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>::Zero(void)::zero;
}

void sub_1ADBFBBBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  MEMORY[0x1AF44D190](v1, 0x1020C404C081FCELL);
  _Unwind_Resume(a1);
}

uint64_t *fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *a1;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)(a1 + 2));
  *(_DWORD *)(a2 + 32) = a1[8];
  return std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a2 + 40), (uint64_t)(a1 + 10));
}

void sub_1ADBFBC58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

unint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 88) - *(_QWORD *)(*(_QWORD *)v5 + 80)) >> 4);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v2 + 76) == a2)
  {
    v3 = (uint64_t *)(v2 + 80);
  }
  else
  {
    v4 = a2 + 1;
    v6 = v2 + 8;
    v5 = *(_QWORD *)(v2 + 8);
    if (v4 >= (*(_QWORD *)(v6 + 8) - v5) >> 3)
      return 0;
    v3 = (uint64_t *)(v5 + 8 * v4);
  }
  v7 = *v3;
  if (!v7)
    return 0;
  v8 = *(_DWORD *)(v7 + 104);
  if ((v8 & 2) == 0)
    return 0;
  *(_DWORD *)(v7 + 104) = v8 | 8;
  return 1;
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v7;
  __int128 *v8;
  int v9;
  int v10;
  uint64_t *MutableState;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  _BOOL4 v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  _BOOL4 v26;
  unsigned int v27;
  int v28;
  uint64_t *v29;
  int v30;
  _QWORD v31[3];
  int v32;
  uint64_t v33[3];
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  uint64_t v39[4];
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44[3];
  int v45;
  __int128 v46;

  v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetArcs(a1, a2);
    return;
  }
  v5 = *(_QWORD *)(a1 + 136);
  v7 = v4 != -1 && v4 <= a2;
  v38 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v5 + 136))(v5, (a2 - v7), &v34);
  while (1)
  {
    if (!v34)
    {
      if (v38 >= v36)
        goto LABEL_28;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34))
      break;
    if (v34)
    {
      v8 = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)v34 + 32))();
      goto LABEL_16;
    }
LABEL_15:
    v8 = (__int128 *)(v35 + 16 * v38);
LABEL_16:
    v46 = *v8;
    v9 = HIDWORD(v46);
    v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= SHIDWORD(v46))
      v9 = HIDWORD(v46) + 1;
    if (v9 >= *(_DWORD *)(a1 + 164))
      *(_DWORD *)(a1 + 164) = v9 + 1;
    HIDWORD(v46) = v9;
    fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()((uint64_t)&v46, (uint64_t)&v40);
    MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(MutableState, (uint64_t)&v40);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v44);
    std::__list_imp<char *>::clear(v42);
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
    else
      ++v38;
  }
  if (v34)
  {
    (*(void (**)(void))(*(_QWORD *)v34 + 8))();
    goto LABEL_30;
  }
LABEL_28:
  if (v37)
    --*v37;
LABEL_30:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasFinal(a1, a2) & 1) == 0|| (fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final(a1, a2, (uint64_t)&v40), v13 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero(), v14 = fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)&v40, v13), std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v43), std::__list_imp<char *>::clear(&v41), v14))
  {
    v15 = *(_DWORD *)(a1 + 156);
    if (v15 == 1)
    {
      v24 = *(_DWORD *)(a1 + 160);
      v26 = v24 != -1 && v24 <= a2;
      *(float *)&v27 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v26));
      v34 = 0;
      v35 = v27 | 0xFFFFFFFF00000000;
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()((uint64_t)&v34, (uint64_t)&v40);
      if (v40)
      {
        v28 = *(_DWORD *)(a1 + 160);
        if (v28 == -1)
        {
          v28 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v28;
          *(_DWORD *)(a1 + 164) = v28 + 1;
        }
        v45 = v28;
        v29 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(v29, (uint64_t)&v40);
      }
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v44);
      goto LABEL_56;
    }
    if (v15 == 2)
    {
      v16 = *(_DWORD *)(a1 + 160);
      v18 = v16 != -1 && v16 <= a2;
      *(float *)&v19 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v18));
      v34 = 0;
      v35 = v19 | 0xFFFFFFFF00000000;
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()((uint64_t)&v34, (uint64_t)&v40);
      v20 = v40;
      v21 = HIDWORD(v40);
      if (v40)
      {
LABEL_43:
        v30 = v41;
        std::list<int>::list(v31, (uint64_t)v42);
        v32 = v43;
        std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v33, (uint64_t)v44);
        fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::GallicArc((uint64_t)&v34, v20, v21, &v30, *(_DWORD *)(a1 + 160));
        v23 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(v23, (uint64_t)&v34);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v39);
        std::__list_imp<char *>::clear(&v36);
        std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v33);
        std::__list_imp<char *>::clear(v31);
      }
      else
      {
        v22 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
        if ((fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)&v41, v22) & 1) == 0)
        {
          v20 = v40;
          v21 = HIDWORD(v40);
          goto LABEL_43;
        }
      }
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v44);
LABEL_56:
      std::__list_imp<char *>::clear(v42);
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetArcs(a1, a2);
}

void sub_1ADBFC0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  _QWORD *v33;
  uint64_t *v34;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v34);
  std::__list_imp<char *>::clear(v33);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&a33);
  std::__list_imp<char *>::clear(&a29);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetArcs(uint64_t a1, int a2)
{
  _DWORD *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = *((_QWORD *)MutableState + 10);
  v6 = *((_QWORD *)MutableState + 11) - v5;
  if (v6)
  {
    v7 = v6 / 80;
    v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 72);
    do
    {
      v11 = *v9;
      v9 += 20;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  MutableState[26] |= 0xAu;
}

uint64_t fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>(int *a1, uint64_t a2)
{
  float v2;
  uint64_t v3;
  BOOL v4;
  float v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *(float *)a1;
  if (!*a1)
  {
    v3 = 0;
    v5 = *((float *)a1 + 8);
    if (v5 == -INFINITY)
      goto LABEL_10;
    goto LABEL_9;
  }
  v3 = 0;
  if (*((_QWORD *)a1 + 3))
    v4 = 0;
  else
    v4 = LODWORD(v2) == -2;
  v5 = *((float *)a1 + 8);
  if (!v4 && v5 != -INFINITY)
LABEL_9:
    v3 = *((_QWORD *)a1 + 7) + 1;
LABEL_10:
  if (!*(_DWORD *)a2)
  {
    v6 = 0;
    if (*(float *)(a2 + 32) == -INFINITY)
      goto LABEL_19;
    goto LABEL_18;
  }
  v6 = 0;
  if (*(_QWORD *)(a2 + 24))
    v7 = 0;
  else
    v7 = *(_DWORD *)a2 == -2;
  if (!v7 && *(float *)(a2 + 32) != -INFINITY)
LABEL_18:
    v6 = *(_QWORD *)(a2 + 56) + 1;
LABEL_19:
  if (v3 == v6)
  {
    v8 = 0;
    v9 = (uint64_t *)(a1 + 12);
    v10 = (uint64_t *)(a2 + 48);
    v12 = v2 == NAN && *((_QWORD *)a1 + 3) == 0 || v5 == -INFINITY;
LABEL_26:
    v13 = *v9;
    v14 = *v10;
    while (1)
    {
      v15 = v8;
      if ((v8 & 1) != 0)
      {
        v16 = (int *)(v13 + 16);
        if ((int *)v13 == a1 + 10)
          return 1;
      }
      else if (v2 == 0.0)
      {
        v17 = 1;
        v16 = a1;
        if (v5 == -INFINITY)
          return v17;
      }
      else
      {
        v16 = a1;
        if (v12)
          return 1;
      }
      if ((v15 & 1) != 0)
        v18 = v14 + 16;
      else
        v18 = a2;
      v19 = *v16;
      if (*v16)
        v20 = *((_QWORD *)v16 + 3) + 1;
      else
        v20 = 0;
      if (*(_DWORD *)v18)
        v21 = *(_QWORD *)(v18 + 24) + 1;
      else
        v21 = 0;
      if (v20 != v21)
        return 0;
      v22 = 0;
      v23 = (uint64_t *)(v16 + 4);
      v24 = (uint64_t *)(v18 + 16);
      v25 = v19 && v19 == *(_DWORD *)v18;
      v26 = !v25;
      while (1)
      {
        v27 = *v23;
        v28 = *v24;
        if ((v22 & 1) == 0 && v26)
          break;
        if ((int *)v27 == v16 + 2)
          goto LABEL_56;
        if (*(_DWORD *)(v27 + 16) != *(_DWORD *)(v28 + 16))
          return 0;
        v23 = (uint64_t *)(v27 + 8);
        v24 = (uint64_t *)(v28 + 8);
        v22 = 1;
      }
      if (v19)
        return 0;
LABEL_56:
      if (*((float *)v16 + 8) != *(float *)(v18 + 32))
        return 0;
      v8 = 1;
      if ((v15 & 1) != 0)
      {
        v9 = (uint64_t *)(v13 + 8);
        v10 = (uint64_t *)(v14 + 8);
        goto LABEL_26;
      }
    }
  }
  return 0;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 104) && (*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80) + *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v4;
    if (v4 > *(_QWORD *)(a1 + 96))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GC(a1, (_DWORD *)a2, 0, 0.666);
  }
}

_QWORD *fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetArcs(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _DWORD *v4;

  v1 = result[10];
  v2 = result[11] - v1;
  if (v2)
  {
    v3 = v2 / 80;
    if (v3 <= 1)
      v3 = 1;
    v4 = (_DWORD *)(v1 + 4);
    do
    {
      if (!*(v4 - 1))
        ++result[8];
      if (!*v4)
        ++result[9];
      v4 += 20;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1[12];
  v3 = (uint64_t)(a1 + 12);
  v5 = *(_QWORD *)(v3 - 8);
  if (v5 >= v4)
  {
    result = std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const&>(a1 + 10, a2);
  }
  else
  {
    std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const&>(v3, *(_QWORD *)(v3 - 8), a2);
    result = v5 + 80;
    a1[11] = v5 + 80;
  }
  a1[11] = result;
  return result;
}

void sub_1ADBFC5D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[80 * v3];
  v13 = &v7[80 * v6];
  std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 80;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~__split_buffer(&v10);
  return v8;
}

void sub_1ADBFC6D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 64);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 72);
}

unint64_t fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1ADBFC8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::vector<unsigned int>::size_type v17;
  _DWORD *v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  std::vector<unsigned int>::pointer end;
  unsigned int *v28;
  std::vector<unsigned int>::pointer begin;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  std::vector<unsigned int>::pointer v37;
  unsigned int *v38;
  std::vector<unsigned int>::pointer v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  std::vector<unsigned int>::pointer v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  std::vector<unsigned int>::pointer v54;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t *v63;
  int v65;
  uint64_t v66;
  _QWORD v67[2];
  _DWORD *v68;
  unint64_t v69;
  uint64_t v70[3];
  uint64_t v71;
  int v72;
  unsigned int v73;
  std::vector<unsigned int> v74;
  std::vector<unsigned int> v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[3];
  int v79;
  uint64_t v80[3];
  int v81;
  unint64_t v82;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v82 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v76 = 0;
      v77 = 0;
      v78[0] = 0;
      v78[1] = (uint64_t)&v82;
      fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>(a1, &v76, 0);
      v8 = v82;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      v63 = a3;
      v11 = a2 & 0xC0000;
      v12 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0)
        v12 = 0x10425A850000;
      v13 = v8 | v12;
      v14 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0)
        v13 |= 0x100000uLL;
      v82 = v13;
      memset(&v75, 0, sizeof(v75));
      memset(&v74, 0, sizeof(v74));
      v73 = 0;
      v15 = a1;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v71);
      v65 = 0;
LABEL_12:
      if (v71)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71))
        {
          if (v71)
          {
            v16 = (*(uint64_t (**)(void))(*(_QWORD *)v71 + 24))();
LABEL_18:
            v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v16);
            v18 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
            LODWORD(v77) = *v18;
            std::list<int>::list(v78, (uint64_t)(v18 + 2));
            v79 = v18[8];
            v80[0] = (uint64_t)v80;
            v80[1] = (uint64_t)v80;
            v80[2] = 0;
            v75.__end_ = v75.__begin_;
            v74.__end_ = v74.__begin_;
            if (v11)
              std::vector<int>::reserve(&v75, v17);
            if (v14)
              std::vector<int>::reserve(&v74, v17);
            v69 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v16, &v66);
            v19 = 1;
            while (1)
            {
              if (v66)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66))
                {
                  if (v66)
                  {
                    (*(void (**)(void))(*(_QWORD *)v66 + 8))();
                  }
                  else
                  {
LABEL_94:
                    if (v68)
                      --*v68;
                  }
                  v15 = a1;
                  if (v11
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v75.__end_ - (char *)v75.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    v47 = v75.__end_ - v75.__begin_;
                    if (v47 <= 2)
                      v47 = 2;
                    v48 = v75.__begin_ + 1;
                    v49 = *v75.__begin_;
                    v50 = v47 - 1;
                    while (1)
                    {
                      v52 = *v48++;
                      v51 = v52;
                      if (v52 == v49)
                        break;
                      v49 = v51;
                      if (!--v50)
                        goto LABEL_103;
                    }
                    v82 = v82 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v14)
                    {
LABEL_114:
                      if (v65 >= 1)
                        v82 = v82 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v66, a1, v16);
                      v59 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
                      if ((fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)&v66, v59) & 1) != 0)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v16) != 1)
                          v82 = v82 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      else
                      {
                        v60 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One();
                        if ((fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)&v66, v60) & 1) == 0)v82 = v82 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        ++v65;
                      }
                      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v70);
                      std::__list_imp<char *>::clear(v67);
                      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v80);
                      std::__list_imp<char *>::clear(v78);
                      if (v71)
                        (*(void (**)(uint64_t))(*(_QWORD *)v71 + 32))(v71);
                      else
                        ++v73;
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_103:
                    if (!v14)
                      goto LABEL_114;
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v74.__end_ - (char *)v74.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    v53 = v74.__end_ - v74.__begin_;
                    if (v53 <= 2)
                      v53 = 2;
                    v54 = v74.__begin_ + 1;
                    v55 = *v74.__begin_;
                    v56 = v53 - 1;
                    while (1)
                    {
                      v58 = *v54++;
                      v57 = v58;
                      if (v58 == v55)
                        break;
                      v55 = v57;
                      if (!--v56)
                        goto LABEL_114;
                    }
                    v82 = v82 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_114;
                }
                if (v66)
                {
                  v20 = (*(uint64_t (**)(void))(*(_QWORD *)v66 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v69 >= v67[1])
              {
                goto LABEL_94;
              }
              v20 = v67[0] + 80 * v69;
LABEL_29:
              v21 = *(_DWORD *)v20;
              v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
              {
                v82 = v82 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                v22 = *(_DWORD *)(v20 + 4);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (!v22)
                    goto LABEL_39;
                  goto LABEL_35;
                }
                v23 = v82;
              }
              else
              {
                v23 = v82 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              v82 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (!v22)
              {
LABEL_39:
                v82 = v82 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
                if ((v19 & 1) != 0)
                  goto LABEL_44;
                goto LABEL_40;
              }
LABEL_35:
              if ((v19 & 1) != 0)
                goto LABEL_44;
LABEL_40:
              if (v21 < (int)v76)
                v82 = v82 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              if (v22 < SHIDWORD(v76))
                v82 = v82 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_44:
              v24 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One();
              if ((fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)(v20 + 8), v24) & 1) == 0)
              {
                v25 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
                if ((fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)(v20 + 8), v25) & 1) == 0)v82 = v82 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
              }
              v26 = *(_DWORD *)(v20 + 72);
              if (v26 <= (int)v16)
                v82 = v82 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              if (v26 != (_DWORD)v16 + 1)
                v82 = v82 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              v76 = *(_QWORD *)v20;
              LODWORD(v77) = *(_DWORD *)(v20 + 8);
              if (&v76 != (uint64_t *)v20)
              {
                std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v78, *(_QWORD *)(v20 + 24), v20 + 16);
                v79 = *(_DWORD *)(v20 + 40);
                std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>(v80, *(_QWORD *)(v20 + 56), v20 + 48);
                v26 = *(_DWORD *)(v20 + 72);
              }
              v81 = v26;
              if (v11)
              {
                end = v75.__end_;
                if (v75.__end_ >= v75.__end_cap_.__value_)
                {
                  begin = v75.__begin_;
                  v30 = v75.__end_ - v75.__begin_;
                  v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62)
                    goto LABEL_137;
                  v32 = (char *)v75.__end_cap_.__value_ - (char *)v75.__begin_;
                  if (((char *)v75.__end_cap_.__value_ - (char *)v75.__begin_) >> 1 > v31)
                    v31 = v32 >> 1;
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                    v33 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v33 = v31;
                  if (v33)
                  {
                    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75.__end_cap_, v33);
                    begin = v75.__begin_;
                    end = v75.__end_;
                  }
                  else
                  {
                    v34 = 0;
                  }
                  v35 = (unsigned int *)&v34[4 * v30];
                  *v35 = *(_DWORD *)v20;
                  v28 = v35 + 1;
                  while (end != begin)
                  {
                    v36 = *--end;
                    *--v35 = v36;
                  }
                  v75.__begin_ = v35;
                  v75.__end_ = v28;
                  v75.__end_cap_.__value_ = (unsigned int *)&v34[4 * v33];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *v75.__end_ = *(_DWORD *)v20;
                  v28 = end + 1;
                }
                v75.__end_ = v28;
              }
              if (v14)
              {
                v37 = v74.__end_;
                if (v74.__end_ >= v74.__end_cap_.__value_)
                {
                  v39 = v74.__begin_;
                  v40 = v74.__end_ - v74.__begin_;
                  v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 62)
LABEL_137:
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v42 = (char *)v74.__end_cap_.__value_ - (char *)v74.__begin_;
                  if (((char *)v74.__end_cap_.__value_ - (char *)v74.__begin_) >> 1 > v41)
                    v41 = v42 >> 1;
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                    v43 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v43 = v41;
                  if (v43)
                  {
                    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v74.__end_cap_, v43);
                    v39 = v74.__begin_;
                    v37 = v74.__end_;
                  }
                  else
                  {
                    v44 = 0;
                  }
                  v45 = (unsigned int *)&v44[4 * v40];
                  *v45 = *(_DWORD *)(v20 + 4);
                  v38 = v45 + 1;
                  while (v37 != v39)
                  {
                    v46 = *--v37;
                    *--v45 = v46;
                  }
                  v74.__begin_ = v45;
                  v74.__end_ = v38;
                  v74.__end_cap_.__value_ = (unsigned int *)&v44[4 * v43];
                  if (v39)
                    operator delete(v39);
                }
                else
                {
                  *v74.__end_ = *(_DWORD *)(v20 + 4);
                  v38 = v37 + 1;
                }
                v74.__end_ = v38;
              }
              if (v66)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v66 + 40))(v66);
                v19 = 0;
              }
              else
              {
                v19 = 0;
                ++v69;
              }
            }
          }
LABEL_17:
          v16 = v73;
          goto LABEL_18;
        }
        if (v71)
          (*(void (**)(void))(*(_QWORD *)v71 + 8))();
      }
      else if ((int)v73 < v72)
      {
        goto LABEL_17;
      }
      v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      a3 = v63;
      if (v61 != -1 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        v82 = v82 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      if (v74.__begin_)
      {
        v74.__end_ = v74.__begin_;
        operator delete(v74.__begin_);
      }
      if (v75.__begin_)
      {
        v75.__end_ = v75.__begin_;
        operator delete(v75.__begin_);
      }
      v8 = v82;
    }
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1ADBFD130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 72);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 72);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 72);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 72), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 80 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19AA8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1ADBFD8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19AA8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::FinishState(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  int v7;
  unint64_t result;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int *i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _QWORD v24[4];
  uint64_t v25[3];

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v23);
  v6 = fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
  v7 = fst::operator==<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,fst::GallicUnionWeightOptions<int,fst::TropicalWeightTpl<float>>>((int *)&v23, v6);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v25);
  result = (unint64_t)std::__list_imp<char *>::clear(v24);
  if (!v7)
    *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v9 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * a2) != *(_DWORD *)(v9 + 4 * a2))
    goto LABEL_16;
  v10 = 0;
  v11 = *(_QWORD **)(a1 + 80);
  v12 = v11[1];
  v13 = **(_QWORD **)(a1 + 16);
  v14 = (int *)(((v12 - *v11) & 0xFFFFFFFFFFFFFFFCLL) + *v11 - 4);
  do
  {
    v15 = *v14--;
    v10 |= *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15;
  }
  while ((_DWORD)v15 != a2);
  v16 = *(_QWORD **)a1;
  v17 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v12 - 4); ; --i)
  {
    v19 = *i;
    if (v16)
      *(_DWORD *)(*v16 + 4 * v19) = *(_DWORD *)(a1 + 48);
    result = v19 >> 6;
    v20 = 1 << v19;
    if ((v10 & 1) == 0)
      break;
    *(_QWORD *)(v13 + 8 * result) |= v20;
    *(_QWORD *)(v17 + 8 * result) &= ~v20;
    if ((_DWORD)v19 == a2)
    {
      v11[1] = i;
      goto LABEL_15;
    }
LABEL_13:
    ;
  }
  *(_QWORD *)(v17 + 8 * result) &= ~v20;
  if ((_DWORD)v19 != a2)
    goto LABEL_13;
  v11[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_15:
  ++*(_DWORD *)(a1 + 48);
LABEL_16:
  if (a3 != -1)
  {
    v21 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v21 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      *(_QWORD *)(v21 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v22 = *(_DWORD *)(v9 + 4 * a2);
    if (v22 < *(_DWORD *)(v9 + 4 * a3))
      *(_DWORD *)(v9 + 4 * a3) = v22;
  }
  return result;
}

void sub_1ADBFDB80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v1 + 40));
  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::BackArc(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(int *)(a3 + 72);
  v4 = *(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v3);
  v5 = **(_QWORD **)(a1 + 64);
  if (v4 < *(_DWORD *)(v5 + 4 * a2))
    *(_DWORD *)(v5 + 4 * a2) = v4;
  v6 = **(_QWORD **)(a1 + 16);
  if (((*(_QWORD *)(v6 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    *(_QWORD *)(v6 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v7 = *(unint64_t **)(a1 + 24);
  v8 = *v7 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
  *v7 = v8;
  if (*(_DWORD *)(a3 + 72) == *(_DWORD *)(a1 + 40))
    *v7 = v8 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
  return 1;
}

uint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ForwardOrCrossArc(_QWORD **a1, int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(int *)(a3 + 72);
  v4 = *a1[7];
  v5 = *(_DWORD *)(v4 + 4 * v3);
  if (v5 >= *(_DWORD *)(v4 + 4 * a2))
  {
    v6 = v3 >> 6;
    v7 = 1 << v3;
  }
  else
  {
    v6 = v3 >> 6;
    v7 = 1 << v3;
    if ((*(_QWORD *)(*a1[9] + 8 * v6) & v7) != 0)
    {
      v8 = *a1[8];
      if (v5 < *(_DWORD *)(v8 + 4 * a2))
        *(_DWORD *)(v8 + 4 * a2) = v5;
    }
  }
  v9 = *a1[2];
  if ((*(_QWORD *)(v9 + 8 * v6) & v7) != 0)
    *(_QWORD *)(v9 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  return 1;
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19AA8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19AA8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19AA8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADBFDD40(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1AA60;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADBFDE28(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1AA60;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADBFE234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    v10 = v27 + 80 * v28;
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v25 = 0x4000;
    if (v13 > 0x4000)
      v25 = v13;
    *(_QWORD *)(a1 + 8) = v25;
    v15 = (uint64_t *)malloc_type_malloc(80 * v25, 0x1020040B5FA0AF2uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(uint64_t **)(a1 + 16);
    v15 = *(uint64_t **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[10 * v13];
  v16 = v26;
  v17 = v27;
  v19 = v28;
  v18 = v29;
  if (v29)
    ++*v29;
  v20 = 0;
LABEL_13:
  v15 += 10;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    v24 = v15 - 10;
    *v24 = *(_QWORD *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 10 != (uint64_t *)v23)
    {
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 8, *(_QWORD *)(v23 + 24), v23 + 16);
      *((_DWORD *)v15 - 10) = *(_DWORD *)(v23 + 40);
      std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>(v15 - 4, *(_QWORD *)(v23 + 56), v23 + 48);
    }
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 72);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 10;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 80 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1ADBFE4A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D242D0;
  if (a3)
  {
    v5 = operator new();
    fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADBFE55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D1B3A0;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  *(_QWORD *)(a1 + 144) = operator new();
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Init(a1);
  return a1;
}

void sub_1ADBFE604(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v13[8];
  unint64_t v14;

  *(_QWORD *)a1 = &unk_1E5D22A90;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B950;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v13[0] = *(_BYTE *)(a1 + 104);
  v14 = v7;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::VectorCacheStore((_QWORD *)v6, v13);
  v8 = v14;
  *(_BYTE *)(v6 + 72) = v14 == 0;
  *(_DWORD *)(v6 + 76) = -1;
  *(_QWORD *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 88) = v13[0];
  if (v8 <= 0x1FA0)
    v8 = 8096;
  *(_QWORD *)(v6 + 96) = v8;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v9 = 1;
  else
    v9 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v9;
  if (((a3 ^ 1) & 1) == 0)
  {
    v10 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>::operator=(v6, v10);
    v11 = *(_OWORD *)(v10 + 104);
    *(_OWORD *)(v6 + 88) = *(_OWORD *)(v10 + 88);
    *(_OWORD *)(v6 + 104) = v11;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1ADBFE790(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  void *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x70uLL);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final((_DWORD *)a2, a1);
  v4 = *(_OWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*>>((_QWORD *)(a1 + 80), v5, v6, 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 4));
  *(_QWORD *)(a1 + 104) = *(unsigned int *)(a2 + 104);
  return a1;
}

void sub_1ADBFEA3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v1 + 40));
  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADBFEABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const*,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::construct[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4> const&>(a1, v4, v6);
      v6 += 80;
      v4 = v12 + 80;
      v12 += 80;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1ADBFEB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>::operator()[abi:ne180100]((_QWORD *)a1);
  return a1;
}

_QWORD *std::_AllocatorDestroyRangeReverse<std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>*>::operator()[abi:ne180100](_QWORD *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t i;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  for (i = *v2; v3 != i; v3 -= 80)
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(v3 - 32));
    result = std::__list_imp<char *>::clear((_QWORD *)(v3 - 64));
  }
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1CA28;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1ADBFEC7C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  int v6;
  uint64_t v7;
  _QWORD v8[4];
  uint64_t v9[4];

  v1 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    v2 = result;
    if (!*(_BYTE *)(result + 44))
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        if ((result & 1) != 0)
          return result;
        v1 = *(_QWORD *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      v3 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 136) + 32))(*(_QWORD *)(v1 + 136), *(unsigned int *)(v2 + 40));
      v4 = 0;
      v5 = v3;
      v6 = -1;
      fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>::operator()((uint64_t)&v4, (uint64_t)&v7);
      if (v7)
        *(_BYTE *)(v2 + 44) = 1;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v9);
      return (uint64_t)std::__list_imp<char *>::clear(v8);
    }
  }
  return result;
}

_QWORD *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1CA28;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1CA28;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Done_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) & 1) != 0)
      return *(_BYTE *)(a1 + 44) == 0;
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(_BYTE *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Next(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  ++*(_DWORD *)(a1 + 40);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if ((result & 1) == 0)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
        return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(a1);
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 0;
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Reset(uint64_t a1)
{
  uint64_t v2;

  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  else
    *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::ToGallicMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::InitArcIterator(a1, a2, a3);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)(result + 120);
  if (*(_DWORD *)(v3 + 76) == a2)
    v4 = (uint64_t *)(v3 + 80);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8 * (a2 + 1));
  v5 = *v4;
  v8 = *(_DWORD *)(v5 + 108);
  v6 = (_DWORD *)(v5 + 108);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 7);
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v6 - 5) - v9) >> 4);
  if (*(_QWORD *)(v6 - 5) == v9)
    v9 = 0;
  *a3 = 0;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v6;
  *v6 = v7 + 1;
  return result;
}

_QWORD *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeFst<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  void *__p[2];
  char v18;
  char v19;

  *a1 = &unk_1E5D1E2F8;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1[1] + 8) |= 4uLL;
  }
  v13 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v13, a2, a3, a4, a5);
  v14 = (_DWORD *)a1[1];
  if (v14)
  {
    v15 = v14[14] - 1;
    v14[14] = v15;
    if (!v15)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  }
  a1[1] = v13;
  return a1;
}

void sub_1ADBFF164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  _DWORD *v20;
  int v21;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D279F8;
  v20 = (_DWORD *)v18[1];
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D279F8;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(*(_QWORD *)(a1 + 8));
}

uint64_t *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeFst(v4, a1, a2);
  return v4;
}

void sub_1ADBFF384(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D20368;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C568;
  *a2 = v4;
  return result;
}

void sub_1ADBFF440(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  fst *v13;
  _QWORD *v14;
  uint64_t *v15;
  void *__p[2];
  char v18;
  char v19;

  v10 = fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeFstImplBase<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>((uint64_t)a1, a2, a5);
  *(_QWORD *)v10 = &unk_1E5D20B88;
  *(_DWORD *)(v10 + 144) = *(_DWORD *)(a5 + 16);
  *(_QWORD *)(v10 + 152) = a3;
  *(_QWORD *)(v10 + 160) = a4;
  v11 = *(_QWORD **)(a5 + 32);
  if (!v11)
  {
    v11 = (_QWORD *)operator new();
    *v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  }
  a1[22] = v11;
  v12 = *(_QWORD **)(a5 + 40);
  if (!v12)
  {
    v12 = (_QWORD *)operator new();
    *v12 = 0;
    v12[2] = v12 + 1;
    v12[3] = v12 + 1;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v12 + 4), 0, v12 + 2, v12 + 3);
    v12[11] = 0;
    v12[12] = 0;
    v12[13] = 0;
  }
  a1[23] = v12;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v14 = (_QWORD *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"DeterminizeFst: argument not an acceptor", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  v15 = (uint64_t *)a1[20];
  if (v15)
    std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::__base_destruct_at_end[abi:ne180100](v15, *v15);
  return a1;
}

void sub_1ADBFF61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D22180;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeFstImplBase<fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheBaseImpl(a1, a3) = &unk_1E5D22180;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v8 = *(_DWORD *)(a3 + 24) != 1 || *(_BYTE *)(a3 + 28) != 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::DeterminizeProperties(v6, *(_DWORD *)(a3 + 20) != 0, v8) & 0x3FFFFFFF0004;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 40) = v11;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v13 = *(_QWORD *)(a1 + 48);
  if (v13 != v12)
  {
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v12)
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    else
      v14 = 0;
    *(_QWORD *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_1ADBFF854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v2, a1);
  return v2;
}

void sub_1ADBFF960(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::Expand(uint64_t a1, int a2)
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD **v6;
  BOOL v7;
  _QWORD **v8;
  _QWORD *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  v4 = v8;
  if (v8 != v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::AddArc(a1, a2, (uint64_t)(v4 + 5));
      v5 = v4[1];
      if (v5)
      {
        do
        {
          v6 = (_QWORD **)v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD **)v4[2];
          v7 = *v6 == v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::SetArcs(a1, a2);
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1ADBFFA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  int v2;
  int v3;
  int *v4;
  uint64_t v5;
  uint64_t State;
  int v8;
  _QWORD v9[3];
  int v10;
  uint64_t v11[3];
  _DWORD v12[4];
  _QWORD v13[4];
  uint64_t v14[3];

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if (v2 == -1)
    return 0xFFFFFFFFLL;
  v3 = v2;
  v4 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::One();
  v8 = *v4;
  std::list<int>::list(v9, (uint64_t)(v4 + 2));
  v10 = v4[8];
  std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(v11, (uint64_t)(v4 + 10));
  fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeElement((uint64_t)v12, v3, &v8);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v11);
  std::__list_imp<char *>::clear(v9);
  v5 = operator new();
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = -1;
  *(_QWORD *)v5 = std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>> const&>(v5, 0, v12);
  *(_BYTE *)(v5 + 8) = 0;
  State = fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::FindState(a1, (int **)v5);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v14);
  std::__list_imp<char *>::clear(v13);
  return State;
}

void sub_1ADBFFB6C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;

  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int **v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *result;
  int *i;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  char v26;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int v36;
  _QWORD v37[3];
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[4];
  uint64_t v44[3];
  int v45;
  uint64_t v46[4];
  uint64_t v47[3];
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;

  v4 = *(int ***)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 88) + 8 * a2);
  v5 = (_DWORD *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>::Zero();
  *(_DWORD *)a3 = *v5;
  std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v5 + 2));
  *(_DWORD *)(a3 + 32) = v5[8];
  v6 = a3 + 40;
  result = std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list((uint64_t *)(a3 + 40), (uint64_t)(v5 + 10));
  for (i = *v4; i; i = *(int **)i)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(&v42, *(_QWORD *)(a1 + 136), i[2]);
    fst::Times<int,fst::TropicalWeightTpl<float>>(i + 4, (int *)&v42, (uint64_t)&v45);
    fst::Plus<int,fst::TropicalWeightTpl<float>>((int *)a3, &v45, (uint64_t)&v48);
    *(_DWORD *)a3 = v48;
    if (&v48 != (int *)a3)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a3 + 8), v50, (uint64_t)&v49);
    *(_DWORD *)(a3 + 32) = v51;
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(a3 + 40));
    v9 = v54;
    if (v54)
    {
      v11 = v52;
      v10 = v53;
      v12 = *v53;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(v52 + 8);
      **(_QWORD **)(v11 + 8) = v12;
      v13 = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(v13 + 8) = v10;
      *v10 = v13;
      *(_QWORD *)(a3 + 40) = v11;
      *(_QWORD *)(v11 + 8) = v6;
      *(_QWORD *)(a3 + 56) += v9;
      v54 = 0;
    }
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v52);
    std::__list_imp<char *>::clear(&v49);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v47);
    std::__list_imp<char *>::clear(v46);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v44);
    std::__list_imp<char *>::clear(v43);
    v36 = *(_DWORD *)a3;
    std::list<int>::list(v37, a3 + 8);
    v38 = *(_DWORD *)(a3 + 32);
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::list(&v39, a3 + 40);
    v48 = v36;
    std::list<int>::list(&v49, (uint64_t)v37);
    v51 = v38;
    v52 = (uint64_t)&v52;
    v53 = &v52;
    v54 = 0;
    v14 = v41;
    if (v41)
    {
      v16 = v39;
      v15 = v40;
      v17 = *v40;
      *(_QWORD *)(v17 + 8) = *(_QWORD *)(v39 + 8);
      **(_QWORD **)(v16 + 8) = v17;
      v18 = v52;
      *(_QWORD *)(v52 + 8) = v15;
      *v15 = v18;
      v52 = v16;
      *(_QWORD *)(v16 + 8) = &v52;
      v54 = v14;
      v41 = 0;
    }
    *(_DWORD *)a3 = v48;
    if (&v48 != (int *)a3)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a3 + 8), v50, (uint64_t)&v49);
    *(_DWORD *)(a3 + 32) = v51;
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(a3 + 40));
    v19 = v54;
    if (v54)
    {
      v21 = v52;
      v20 = v53;
      v22 = *v53;
      *(_QWORD *)(v22 + 8) = *(_QWORD *)(v52 + 8);
      **(_QWORD **)(v21 + 8) = v22;
      v23 = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(v23 + 8) = v20;
      *v20 = v23;
      *(_QWORD *)(a3 + 40) = v21;
      *(_QWORD *)(v21 + 8) = v6;
      *(_QWORD *)(a3 + 56) += v19;
      v54 = 0;
    }
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v52);
    std::__list_imp<char *>::clear(&v49);
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(&v39);
    result = std::__list_imp<char *>::clear(v37);
    v24 = *(_DWORD *)a3;
    if (*(_DWORD *)a3)
    {
      if (*(_QWORD *)(a3 + 24))
        v25 = 0;
      else
        v25 = v24 == -2;
      if (!v25 && *(float *)(a3 + 32) != -INFINITY)
      {
LABEL_20:
        if ((unint64_t)(*(_QWORD *)(a3 + 56) + 1) >= 2)
        {
          v26 = 0;
          v29 = v24 != -2 || *(_QWORD *)(a3 + 24) != 0 || v24 == 0;
          v30 = (uint64_t *)(a3 + 48);
LABEL_31:
          v31 = *v30;
          while (1)
          {
            v32 = v26;
            if ((v26 & 1) != 0)
            {
              v33 = v31 + 16;
              if (v31 == v6)
                goto LABEL_45;
            }
            else
            {
              v33 = a3;
              if (!v29)
                goto LABEL_45;
            }
            if (*(_DWORD *)v33)
            {
              if (*(_DWORD *)v33 == -2 && *(_QWORD *)(v33 + 24) == 0)
                break;
            }
            if (*(float *)(v33 + 32) == -INFINITY)
              break;
            v26 = 1;
            if ((v32 & 1) != 0)
            {
              v30 = (uint64_t *)(v31 + 8);
              goto LABEL_31;
            }
          }
          *(_QWORD *)(a1 + 8) |= 4uLL;
        }
      }
    }
    else if (*(float *)(a3 + 32) != -INFINITY)
    {
      goto LABEL_20;
    }
LABEL_45:
    ;
  }
  return result;
}

void sub_1ADBFFF70(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  if (a2)
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  return a1;
}

void sub_1ADC00074(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADC000DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4>>::__base_destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;

  v3 = result;
  for (i = result[1]; i != a2; i -= 64)
  {
    std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear((uint64_t *)(i - 24));
    result = std::__list_imp<char *>::clear((_QWORD *)(i - 56));
  }
  v3[1] = a2;
  return result;
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D20B88;
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = a1[23];
  if (v3)
  {
    v4 = fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1AF44D190](v4, 0x10E0C400200E20DLL);
  }
  *a1 = &unk_1E5D22180;
  v5 = a1[17];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + 88;
  v2 = *(_QWORD **)(a1 + 88);
  v3 = *(_QWORD *)(v4 + 8);
  if ((int)((unint64_t)(v3 - (_QWORD)v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::clear((_QWORD **)v2[v5]);
        MEMORY[0x1AF44D190](v6, 0x1020C405F07FB98);
        v2 = *(_QWORD **)(a1 + 88);
        v3 = *(_QWORD *)(a1 + 96);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 32);
  return a1;
}

void std::__forward_list_base<fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::clear(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  if (*a1)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v2 + 7);
      std::__list_imp<char *>::clear(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  *a1 = 0;
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  size_t *v8;
  size_t v9;
  fst *v10;
  _QWORD *v11;
  void *__p[2];
  char v14;
  char v15;

  v4 = fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeFstImplBase((uint64_t)a1, a2);
  *(_QWORD *)v4 = &unk_1E5D20B88;
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  v5 = (_QWORD *)operator new();
  if (a1[17])
    v6 = a1[17];
  else
    v6 = **(_QWORD **)(a2 + 176);
  *v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 88))(v6, 0);
  a1[22] = v5;
  v7 = (_QWORD *)operator new();
  v8 = *(size_t **)(a2 + 184);
  v9 = *v8;
  *v7 = *v8;
  fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable((uint64_t)(v7 + 1), v9);
  a1[23] = v7;
  if (*(_QWORD *)(a2 + 160))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFsaImpl: cannot copy with out_dist vector", 52);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  return a1;
}

void sub_1ADC00434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D22180;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D22180;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v4)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 40) = v6;
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *(_QWORD *)(a1 + 48) = v9;
  }
  return a1;
}

void sub_1ADC0061C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::GetLabelMap(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t *v18;
  int v19;
  uint64_t v20[4];
  uint64_t v21[3];
  _DWORD v22[4];
  uint64_t v23[4];
  uint64_t v24[3];
  _QWORD v25[3];
  _DWORD *v26;
  unint64_t v27;

  v4 = result;
  v5 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 184) + 88) + 8 * a2);
  if (!v5)
    goto LABEL_17;
  do
  {
    v18 = (uint64_t *)v5;
    v7 = *(_DWORD *)(v5 + 8);
    v6 = v5 + 8;
    v8 = *(_QWORD *)(v4 + 136);
    v27 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v8 + 136))(v8, v7, v25);
    while (1)
    {
      result = v25[0];
      if (!v25[0])
      {
        if (v27 >= v25[2])
          goto LABEL_14;
LABEL_8:
        v10 = (_DWORD *)(v25[1] + 80 * v27);
        goto LABEL_9;
      }
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v25[0] + 24))(v25[0]);
      result = v25[0];
      if (v9)
        break;
      if (!v25[0])
        goto LABEL_8;
      v10 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v25[0] + 32))(v25[0]);
LABEL_9:
      v11 = v10[18];
      fst::Times<int,fst::TropicalWeightTpl<float>>((int *)(v6 + 8), v10 + 2, (uint64_t)&v19);
      fst::DeterminizeElement<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::DeterminizeElement((uint64_t)v22, v11, &v19);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v21);
      std::__list_imp<char *>::clear(v20);
      fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>::FilterArc(*(_QWORD *)(v4 + 176), v10, v6, v22, (uint64_t)a3);
      std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v24);
      std::__list_imp<char *>::clear(v23);
      if (v25[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v25[0] + 40))(v25[0]);
      else
        ++v27;
    }
    if (v25[0])
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v25[0] + 8))(v25[0]);
      goto LABEL_16;
    }
LABEL_14:
    if (v26)
      --*v26;
LABEL_16:
    v5 = *v18;
  }
  while (*v18);
LABEL_17:
  v14 = (_QWORD *)*a3;
  v12 = a3 + 1;
  v13 = v14;
  if (v14 != v12)
  {
    do
    {
      result = fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::NormArc(v4, (uint64_t)(v13 + 5));
      v15 = (_QWORD *)v13[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v13[2];
          v17 = *v16 == (_QWORD)v13;
          v13 = v16;
        }
        while (!v17);
      }
      v13 = v16;
    }
    while (v16 != v12);
  }
  return result;
}

void sub_1ADC00844(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  _DWORD *v4;

  v3 = *(_QWORD *)(v1 - 128);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v4 = *(_DWORD **)(v1 - 104);
    if (v4)
      --*v4;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  int *v6;
  int v7;
  int v8;
  uint64_t *MutableState;
  _DWORD v11[2];
  int v12;
  uint64_t v13[3];
  int v14;
  uint64_t v15[3];
  int State;

  v6 = (int *)fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>::NoWeight();
  v12 = *v6;
  std::list<int>::list(v13, (uint64_t)(v6 + 2));
  v7 = v6[8];
  v15[0] = (uint64_t)v15;
  v15[1] = (uint64_t)v15;
  v15[2] = 0;
  v11[0] = *(_DWORD *)a3;
  v11[1] = v11[0];
  v8 = *(_DWORD *)(a3 + 8);
  v14 = v7;
  v12 = v8;
  if (v11 != (_DWORD *)a3)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v13, *(_QWORD *)(a3 + 24), a3 + 16);
    v14 = *(_DWORD *)(a3 + 40);
    std::list<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>,std::__list_const_iterator<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>,void *>>(v15, *(_QWORD *)(a3 + 56), a3 + 48);
  }
  State = fst::DeterminizeFsaImpl<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::GallicCommonDivisor<int,fst::TropicalWeightTpl<float>,(fst::GallicType)4,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>>,fst::DefaultDeterminizeFilter<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>,fst::DefaultDeterminizeStateTable<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,fst::IntegerFilterState<signed char>>>::FindState(a1, *(int ***)(a3 + 72));
  MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)4>>>::PushArc(MutableState, (uint64_t)v11);
  std::__list_imp<fst::GallicWeight<int,fst::TropicalWeightTpl<float>,(fst::GallicType)2>>::clear(v15);
  return std::__list_imp<char *>::clear(v13);
}

