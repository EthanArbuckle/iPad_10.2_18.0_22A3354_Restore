char *std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(_QWORD *)result) >> 1)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    if (v8 <= a4)
      v10 = a4;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<short>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_17:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 1;
  if (v15 >= a4)
    goto LABEL_17;
  v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_19:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *v12 = &v9[v17];
  return result;
}

uint64_t kaldi::WriteIntegerByteArray<short>(_QWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t result;
  _QWORD *v11;
  std::runtime_error *exception;
  _QWORD v13[34];
  int v14;
  char v15;

  if (a2)
  {
    v15 = 2;
    std::ostream::write();
    if (a3)
      v9 = -(int)a4;
    else
      v9 = a4;
    v14 = v9;
    result = std::ostream::write();
    if ((_DWORD)a4)
    {
      if (a3 && !fst::AlignOutput(a1))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Could not align output");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
      }
      result = std::ostream::write();
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[ ", 2);
    for (; a4; --a4)
    {
      a5 += 2;
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
    }
    result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteIntegerType.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1ADA368AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *kaldi::CuMatrixBase<float>::CopyFromMat<float>(int *result, uint64_t a2, int a3)
{
  if (*(_DWORD *)(a2 + 20))
    return kaldi::MatrixBase<float>::CopyFromMat<float>(result + 2, (int *)(a2 + 8), a3);
  return result;
}

void kaldi::CuMatrixBase<float>::CopyFromMat<double>(uint64_t a1, int *a2, int a3)
{
  BOOL v5;
  int32x2_t v6;
  void *v7;
  int v8;
  char v9;

  kaldi::CuMatrix<double>::CuMatrix<double>(&v6, a2, 111, 0);
  if (v8)
    kaldi::MatrixBase<float>::CopyFromMat<double>(a1 + 8, (uint64_t)&v7, a3);
  v6 = (int32x2_t)&unk_1E5D34140;
  if (v7)
    v5 = v9 == 0;
  else
    v5 = 0;
  if (v5)
    free(v7);
}

void sub_1ADA3695C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a10)
  {
    if (!a14)
      free(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::CuMatrix<double>::~CuMatrix(uint64_t a1)
{
  void *v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &unk_1E5D34140;
  v3 = (_QWORD *)(a1 + 8);
  v2 = *(void **)(a1 + 8);
  if (v2 && !*(_BYTE *)(a1 + 40))
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return a1;
}

uint64_t kaldi::CuMatrix<float>::~CuMatrix(uint64_t a1)
{
  void *v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &unk_1E5D34170;
  v3 = (_QWORD *)(a1 + 8);
  v2 = *(void **)(a1 + 8);
  if (v2 && !*(_BYTE *)(a1 + 40))
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return a1;
}

{
  void *v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &unk_1E5D34170;
  v3 = (_QWORD *)(a1 + 8);
  v2 = *(void **)(a1 + 8);
  if (v2 && !*(_BYTE *)(a1 + 40))
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return a1;
}

int32x2_t *kaldi::CuMatrix<float>::CuMatrix<float>(int32x2_t *a1, int *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  a1[2] = 0;
  a1[3] = 0;
  *a1 = (int32x2_t)&unk_1E5D34170;
  a1[1] = 0;
  a1[5].i8[0] = 0;
  a1[4] = (int32x2_t)a4;
  if (a3 == 111)
  {
    v7 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  }
  else
  {
    v7 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  }
  kaldi::CuMatrix<float>::Resize(a1, v7, v8, 1, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&a1[1], a2, a3);
  return a1;
}

void kaldi::CuMatrix<float>::Resize(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v7;
  int v10;
  int v11;
  unint64_t v12;
  int32x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  void *v16;
  int32x2_t *v17;
  int32x2_t v18;
  __int128 v19;
  int32x2_t v20;
  _QWORD v21[4];
  int v22[8];
  int32x2_t v23;
  __int128 v24;
  __int8 v25;

  if (!((_DWORD)a3 * (_DWORD)a2))
  {
    a1[2] = 0;
    return;
  }
  v7 = a4;
  if ((_DWORD)a5)
    v10 = a1[3].i32[0] != a3;
  else
    v10 = 0;
  if (a4 == 3)
  {
    if (a1[2].i32[1] == (_DWORD)a2 && ((a1[2].i32[0] == (_DWORD)a3) & ~v10) != 0)
      return;
    v7 = 0;
  }
  v11 = a1[3].i32[0];
  if (v11 < 1)
    v12 = 0;
  else
    v12 = a1[3].i32[1] / v11;
  if (v11 < (int)a3)
    goto LABEL_17;
  if (v12 < (int)a2)
    LOBYTE(v10) = 1;
  if ((v10 & 1) != 0)
  {
LABEL_17:
    if (v7 == 2)
    {
      v20 = vmin_s32(a1[2], (int32x2_t)__PAIR64__(a2, a3));
      kaldi::Matrix<float>::Matrix((uint64_t)&v23, a2, a3, 0, a5);
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v22, (uint64_t)&v23, 0, v20.i32[1], 0, v20.i32[0]);
      v13 = a1[1];
      v14 = a1[4];
      v15 = a1[3];
      v21[1] = v20;
      v21[2] = v15;
      v21[3] = v14;
      v21[0] = v13;
      kaldi::MatrixBase<float>::CopyFromMat<float>(v22, (int *)v21, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
    }
    else
    {
      v17 = a1 + 1;
      v16 = (void *)a1[1];
      if (v16)
      {
        if (!a1[5].i8[0])
          free(v16);
      }
      *v17 = 0;
      a1[2] = 0;
      a1[3] = 0;
      kaldi::Matrix<float>::Matrix((uint64_t)&v23, a2, a3, v7, a5);
    }
    v18 = v23;
    v23 = a1[1];
    a1[1] = v18;
    v19 = v24;
    v24 = *(_OWORD *)a1[2].i8;
    *(_OWORD *)a1[2].i8 = v19;
    v18.i8[0] = v25;
    v25 = a1[5].i8[0];
    a1[5].i8[0] = v18.i8[0];
    kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
  }
  else
  {
    a1[2].i32[0] = a3;
    a1[2].i32[1] = a2;
    if (!v7)
      kaldi::MatrixBase<float>::SetZero((uint64_t)&a1[1]);
  }
}

void sub_1ADA36CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

int *kaldi::CuMatrixBase<float>::CopyFromMat(uint64_t a1, int *a2, int a3)
{
  return kaldi::MatrixBase<float>::CopyFromMat<float>((int *)(a1 + 8), a2, a3);
}

void kaldi::CuMatrix<double>::Resize(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v7;
  int v10;
  int v11;
  unint64_t v12;
  int32x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  void *v16;
  int32x2_t *v17;
  int32x2_t v18;
  __int128 v19;
  int32x2_t v20;
  _QWORD v21[4];
  int v22[8];
  int32x2_t v23;
  __int128 v24;
  __int8 v25;

  if (!((_DWORD)a3 * (_DWORD)a2))
  {
    a1[2] = 0;
    return;
  }
  v7 = a4;
  if ((_DWORD)a5)
    v10 = a1[3].i32[0] != a3;
  else
    v10 = 0;
  if (a4 == 3)
  {
    if (a1[2].i32[1] == (_DWORD)a2 && ((a1[2].i32[0] == (_DWORD)a3) & ~v10) != 0)
      return;
    v7 = 0;
  }
  v11 = a1[3].i32[0];
  if (v11 < 1)
    v12 = 0;
  else
    v12 = a1[3].i32[1] / v11;
  if (v11 < (int)a3)
    goto LABEL_17;
  if (v12 < (int)a2)
    LOBYTE(v10) = 1;
  if ((v10 & 1) != 0)
  {
LABEL_17:
    if (v7 == 2)
    {
      v20 = vmin_s32(a1[2], (int32x2_t)__PAIR64__(a2, a3));
      kaldi::Matrix<double>::Matrix((uint64_t)&v23, a2, a3, 0, a5);
      kaldi::SubMatrix<double>::SubMatrix((uint64_t)v22, (uint64_t)&v23, 0, v20.i32[1], 0, v20.i32[0]);
      v13 = a1[1];
      v14 = a1[4];
      v15 = a1[3];
      v21[1] = v20;
      v21[2] = v15;
      v21[3] = v14;
      v21[0] = v13;
      kaldi::MatrixBase<double>::CopyFromMat<double>(v22, (int *)v21, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
    }
    else
    {
      v17 = a1 + 1;
      v16 = (void *)a1[1];
      if (v16)
      {
        if (!a1[5].i8[0])
          free(v16);
      }
      *v17 = 0;
      a1[2] = 0;
      a1[3] = 0;
      kaldi::Matrix<double>::Matrix((uint64_t)&v23, a2, a3, v7, a5);
    }
    v18 = v23;
    v23 = a1[1];
    a1[1] = v18;
    v19 = v24;
    v24 = *(_OWORD *)a1[2].i8;
    *(_OWORD *)a1[2].i8 = v19;
    v18.i8[0] = v25;
    v25 = a1[5].i8[0];
    a1[5].i8[0] = v18.i8[0];
    kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
  }
  else
  {
    a1[2].i32[0] = a3;
    a1[2].i32[1] = a2;
    if (!v7)
      kaldi::MatrixBase<double>::SetZero((uint64_t)&a1[1]);
  }
}

void sub_1ADA36EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

int32x2_t *kaldi::CuMatrix<double>::CuMatrix<double>(int32x2_t *a1, int *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  a1[2] = 0;
  a1[3] = 0;
  *a1 = (int32x2_t)&unk_1E5D34140;
  a1[1] = 0;
  a1[5].i8[0] = 0;
  a1[4] = (int32x2_t)a4;
  if (a3 == 111)
  {
    v7 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  }
  else
  {
    v7 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  }
  kaldi::CuMatrix<double>::Resize(a1, v7, v8, 1, 0);
  kaldi::MatrixBase<double>::CopyFromMat<double>((int *)&a1[1], a2, a3);
  return a1;
}

int *kaldi::CuMatrixBase<float>::CopyToMat<float>(uint64_t a1, int *a2, int a3)
{
  return kaldi::MatrixBase<float>::CopyFromMat<float>(a2, (int *)(a1 + 8), a3);
}

void *kaldi::VectorBase<float>::CopyRowsFromMat(void **a1, uint64_t a2)
{
  return kaldi::VectorBase<float>::CopyRowsFromMat(a1, a2 + 8);
}

{
  char *v4;
  int v5;
  int v6;
  int v7;
  void *result;
  int v9;
  size_t v10;

  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::MatrixBase<float>::NumRows(a2);
  v4 = (char *)*a1;
  v5 = kaldi::MatrixBase<float>::NumCols(a2);
  v6 = kaldi::MatrixBase<float>::NumRows(a2);
  v7 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start(a2);
  result = (void *)kaldi::MatrixBase<float>::NumCols(a2);
  if (v7 == (_DWORD)result)
    return memcpy(v4, *(const void **)a2, 4 * v6 * v5);
  if (v6 >= 1)
  {
    v9 = 0;
    v10 = 4 * v5;
    do
    {
      result = memcpy(v4, (const void *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * v9++), v10);
      v4 += v10;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t kaldi::CuMatrix<float>::Swap(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 20) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = *(_DWORD *)(result + 28);
  *(_DWORD *)(result + 28) = v2;
  LOBYTE(v2) = *((_BYTE *)a2 + 32);
  *((_BYTE *)a2 + 32) = *(_BYTE *)(result + 40);
  *(_BYTE *)(result + 40) = v2;
  return result;
}

void sub_1ADA37074(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void sub_1ADA370C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(uint64_t a1, uint64_t a2)
{
  int *v4;

  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 16));
  kaldi::VectorwiseQuantizedMatrix<signed char>::CopyFromMat(v4, a2 + 8);
  return a1;
}

void sub_1ADA3710C(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::~VectorwiseQuantizedMatrix(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    MEMORY[0x1AF44D190](v2, 0x1000C40BDFB0063);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    MEMORY[0x1AF44D190](v3, 0x1000C4052888210);
  return a1;
}

void kaldi::QuantizedMatrixBase<signed char>::AddMat()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::QuantizedMatrixBase<short>::AddMat()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

_QWORD *kaldi::operator<<<float>(_QWORD *a1, uint64_t a2)
{
  int v5[10];

  kaldi::Matrix<float>::Matrix((uint64_t)v5, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>(v5, (int *)(a2 + 8), 111);
  kaldi::MatrixBase<float>::Write(v5, a1, 0, 0);
  kaldi::Matrix<float>::~Matrix((uint64_t)v5);
  return a1;
}

void sub_1ADA37270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

int32x2_t *kaldi::CuMatrix<float>::CuMatrix(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  a1[2] = 0;
  a1[3] = 0;
  *a1 = (int32x2_t)&unk_1E5D34170;
  a1[1] = 0;
  a1[5].i8[0] = 0;
  a1[4] = (int32x2_t)a5;
  kaldi::CuMatrix<float>::Resize(a1, a2, a3, a4, a6);
  return a1;
}

uint64_t kaldi::CuMatrix<float>::CuMatrix(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1E5D34170;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a3 == 111)
  {
    v7 = *(unsigned int *)(a2 + 16);
    v6 = *(unsigned int *)(a2 + 20);
    v8 = *(_DWORD *)(a2 + 24) == (_DWORD)v7;
  }
  else
  {
    v6 = *(unsigned int *)(a2 + 16);
    v7 = *(unsigned int *)(a2 + 20);
    v8 = 0;
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a1, v6, v7, 1, v8);
  if (*(_DWORD *)(a2 + 20))
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)(a1 + 8), (int *)(a2 + 8), a3);
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1E5D34170;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a3 == 111)
  {
    v7 = *(unsigned int *)(a2 + 16);
    v6 = *(unsigned int *)(a2 + 20);
  }
  else
  {
    v6 = *(unsigned int *)(a2 + 16);
    v7 = *(unsigned int *)(a2 + 20);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a1, v6, v7, 1, 0);
  if (*(_DWORD *)(a2 + 20))
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)(a1 + 8), (int *)(a2 + 8), a3);
  return a1;
}

int32x2_t *kaldi::CuMatrix<float>::operator=(int32x2_t *a1, int32x2_t *a2)
{
  if (!*(_QWORD *)&a1[4])
    a1[4] = a2[4];
  kaldi::CuMatrix<float>::Resize(a1, a2[2].u32[1], a2[2].u32[0], 1, 0);
  if (a2[2].i32[1])
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&a1[1], (int *)&a2[1], 111);
  return a1;
}

int32x2_t *kaldi::CuMatrix<float>::operator=(int32x2_t *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  v5 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  kaldi::CuMatrix<float>::Resize(a1, v4, v5, 1, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&a1[1], a2, 111);
  return a1;
}

void kaldi::CuMatrix<float>::Transpose(uint64_t a1)
{
  void *v2;
  __int128 v3;
  uint64_t v4;
  char v5;
  int v6;
  void *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  char v11;

  if (*(_DWORD *)(a1 + 20))
  {
    kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v7, a1, 112);
    v2 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v3 = v9;
    v9 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v3;
    v4 = v10;
    v10 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v4;
    v5 = v11;
    v6 = *(unsigned __int8 *)(a1 + 40);
    v11 = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v5;
    v7 = &unk_1E5D34170;
    v8 = v2;
    if (v2)
    {
      if (!v6)
        free(v2);
    }
  }
}

uint64_t kaldi::CuMatrix<float>::Swap(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 20) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(result + 28);
  *(_DWORD *)(result + 28) = v2;
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = v3;
  LOBYTE(v3) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(result + 40);
  *(_BYTE *)(result + 40) = v3;
  return result;
}

void kaldi::CuMatrixBase<float>::SetZero(uint64_t a1)
{
  kaldi::MatrixBase<float>::SetZero(a1 + 8);
}

uint64_t kaldi::CuMatrix<float>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  __int128 v9;
  char v10;
  int32x2_t v12;
  __int128 v13;
  char v14;

  kaldi::Matrix<float>::Matrix((uint64_t)&v12, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 16), 1, *(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 16));
  kaldi::Matrix<float>::Read(&v12, a2, a3, 0, a4);
  v8 = *(void **)(a1 + 8);
  if (v8 && !*(_BYTE *)(a1 + 40))
    free(v8);
  *(int32x2_t *)(a1 + 8) = v12;
  v9 = v13;
  v12 = 0;
  v13 = 0uLL;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = v14;
  v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v10;
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v12);
}

void sub_1ADA37694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuMatrix<float>::~CuMatrix(uint64_t a1)
{
  void *v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &unk_1E5D34170;
  v3 = (_QWORD *)(a1 + 8);
  v2 = *(void **)(a1 + 8);
  if (v2 && !*(_BYTE *)(a1 + 40))
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::CuMatrix<float>::DataUnowned(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t kaldi::CuMatrix<double>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  __int128 v9;
  char v10;
  int32x2_t v12;
  __int128 v13;
  char v14;

  kaldi::Matrix<double>::Matrix((uint64_t)&v12, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 16), 1, *(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 16));
  kaldi::Matrix<double>::Read(&v12, a2, a3, 0, a4);
  v8 = *(void **)(a1 + 8);
  if (v8 && !*(_BYTE *)(a1 + 40))
    free(v8);
  *(int32x2_t *)(a1 + 8) = v12;
  v9 = v13;
  v12 = 0;
  v13 = 0uLL;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = v14;
  v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v10;
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v12);
}

void sub_1ADA37810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuMatrix<double>::~CuMatrix(uint64_t a1)
{
  void *v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &unk_1E5D34140;
  v3 = (_QWORD *)(a1 + 8);
  v2 = *(void **)(a1 + 8);
  if (v2 && !*(_BYTE *)(a1 + 40))
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::CuMatrix<double>::DataUnowned(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t kaldi::CuMatrixBase<float>::CopyCols(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return kaldi::MatrixBase<float>::CopyCols(a1 + 8, (uint64_t *)(a2 + 8), a3);
}

void *kaldi::CuArray<int>::CopyToVec(const void **a1, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::pointer begin;
  unint64_t v5;
  std::vector<unsigned int>::size_type v6;

  begin = this->__begin_;
  v5 = (unint64_t)((char *)this->__end_ - (char *)this->__begin_) >> 2;
  v6 = *(int *)a1;
  if ((_DWORD)v6 != (_DWORD)v5)
  {
    std::vector<int>::resize(this, v6);
    begin = this->__begin_;
    LODWORD(v5) = *(_DWORD *)a1;
  }
  return memcpy(begin, a1[1], 4 * (int)v5);
}

unint64_t kaldi::CuMatrixBase<float>::CopyIndexedItems(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5)
{
  return kaldi::MatrixBase<float>::CopyIndexedItems(a1 + 8, (uint64_t *)(a2 + 8), *((_QWORD *)a3 + 1), *(_QWORD *)(a4 + 8), *a3, a5);
}

void kaldi::CuMatrixBase<float>::CopyRows(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  kaldi::MatrixBase<float>::CopyRows((char **)(a1 + 8), a2 + 8, a3);
}

void kaldi::CuMatrixBase<float>::CopySelectedRows(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::MatrixBase<float>::CopySelectedRows(a1 + 8, a2 + 8, a3 + 8, a4);
}

uint64_t kaldi::CuMatrixBase<float>::AddToDiag(uint64_t a1, uint64_t a2, float a3, float a4)
{
  return kaldi::MatrixBase<float>::AddToDiag(a1 + 8, (uint64_t *)(a2 + 8), a3, a4);
}

uint64_t kaldi::CuMatrixBase<float>::SetStride(uint64_t result, int a2)
{
  int v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD v9[34];

  v2 = *(_DWORD *)(result + 24);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"New stride (", 12);
      v3 = (_QWORD *)std::ostream::operator<<();
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") must not be smaller than", 26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" the current stride (", 21);
      v5 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, ").");
      goto LABEL_8;
    }
    if (a2 % v2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"New stride (", 12);
      v6 = (_QWORD *)std::ostream::operator<<();
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") must be a multiple of ", 24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"current stride (", 16);
      v8 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, ").");
LABEL_8:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
    }
    *(_DWORD *)(result + 20) = (*(_DWORD *)(result + 20) - 1) / (a2 / v2) + 1;
    *(_DWORD *)(result + 24) = a2;
  }
  return result;
}

void kaldi::CuMatrixBase<float>::AddMat(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  kaldi::MatrixBase<float>::AddMat(a1 + 8, a2 + 8, a3, a4, a5);
}

void **kaldi::CuMatrixBase<float>::CopyRowsFromVec(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::CopyRowsFromVec((void **)(a1 + 8), (char **)(a2 + 8));
}

void **kaldi::CuMatrixBase<float>::CopyRowsFromVec(uint64_t a1, char **a2)
{
  return kaldi::MatrixBase<float>::CopyRowsFromVec((void **)(a1 + 8), a2);
}

void kaldi::CuMatrixBase<float>::Sigmoid(uint64_t a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::Sigmoid(a1 + 8, a2 + 8);
}

void kaldi::CuMatrixBase<float>::GroupPnorm(uint64_t a1, uint64_t a2, float a3)
{
  kaldi::MatrixBase<float>::GroupPnorm(a1 + 8, (uint64_t *)(a2 + 8), a3);
}

void kaldi::CuMatrixBase<float>::GroupPnormDeriv(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  kaldi::MatrixBase<float>::GroupPnormDeriv(a1 + 8, (uint64_t *)(a2 + 8), (uint64_t *)(a3 + 8), a4);
}

void kaldi::CuMatrixBase<float>::Tanh(uint64_t a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::Tanh(a1 + 8, a2 + 8);
}

void kaldi::CuMatrixBase<float>::ApplyTanh(uint64_t a1)
{
  kaldi::MatrixBase<float>::ApplyTanh(a1 + 8);
}

uint64_t *kaldi::CuMatrixBase<float>::DiffSigmoid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::MatrixBase<float>::DiffSigmoid((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8), (uint64_t *)(a3 + 8));
}

uint64_t kaldi::CuMatrixBase<float>::DiffRelu(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *(_DWORD *)(result + 20);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = *(unsigned int *)(result + 16);
    v6 = *(_QWORD *)(a3 + 8);
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(result + 8);
    v9 = 4 * *(int *)(result + 24);
    v10 = 4 * *(int *)(a3 + 24);
    v11 = 4 * *(int *)(a2 + 24);
    do
    {
      if ((int)v5 >= 1)
      {
        result = 0;
        do
        {
          v12 = 0;
          if (*(float *)(v7 + result) > 0.0)
            v12 = *(_DWORD *)(v6 + result);
          *(_DWORD *)(v8 + result) = v12;
          result += 4;
        }
        while (4 * v5 != result);
      }
      ++v4;
      v8 += v9;
      v6 += v10;
      v7 += v11;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t *kaldi::CuMatrixBase<float>::DiffTanh(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::MatrixBase<float>::DiffTanh((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8), (uint64_t *)(a3 + 8));
}

void kaldi::CuMatrixBase<float>::DiffXent(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;

  kaldi::CuVector<float>::Resize(a3, *a2, 0);
  v6 = *(unsigned int *)(a1 + 20);
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = *((_QWORD *)a2 + 1);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 4 * *(int *)(a1 + 24);
    do
    {
      v12 = *(int *)(v8 + 4 * v7);
      v13 = *(float *)(v9 + 4 * v12);
      if (v13 < 1.0e-20)
      {
        *(_DWORD *)(v9 + 4 * v12) = 507307272;
        v13 = 1.0e-20;
      }
      *(float *)(v10 + 4 * v7) = logf(v13);
      *(float *)(v9 + 4 * v12) = *(float *)(v9 + 4 * v12) + -1.0;
      ++v7;
      v9 += v11;
    }
    while (v6 != v7);
  }
}

void kaldi::CuMatrixBase<float>::AddMatMat(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE a3, uint64_t a4, CBLAS_TRANSPOSE a5, float a6, float a7)
{
  _DWORD *v7;

  v7 = (_DWORD *)(a4 + 20);
  if (a5 != CblasTrans)
    v7 = (_DWORD *)(a4 + 16);
  if (*v7)
    kaldi::MatrixBase<float>::AddMatMat(a1 + 8, a2 + 8, a3, a4 + 8, a5, a6, a7);
}

uint64_t *kaldi::CuMatrixBase<float>::MaxoutForward(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::MaxoutForward((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
}

uint64_t kaldi::CuMatrixBase<float>::MaxoutDerivative(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::MatrixBase<float>::MaxoutDerivative(a1 + 8, (uint64_t *)(a2 + 8), (uint64_t *)(a3 + 8));
}

void kaldi::CuMatrixBase<float>::ApplyPow(uint64_t a1, float a2)
{
  kaldi::MatrixBase<float>::ApplyPow(a1 + 8, a2);
}

void kaldi::CuMatrixBase<float>::ApplyPowAbs(uint64_t a1, int a2, float a3)
{
  kaldi::MatrixBase<float>::ApplyPowAbs(a1 + 8, a2, a3);
}

uint64_t kaldi::CuMatrixBase<float>::ApplyHeaviside(uint64_t a1)
{
  return kaldi::MatrixBase<float>::ApplyHeaviside(a1 + 8);
}

uint64_t kaldi::CuMatrixBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  return kaldi::MatrixBase<float>::ApplyFloor(a1 + 8, a2);
}

uint64_t kaldi::CuMatrixBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  return kaldi::MatrixBase<float>::ApplyCeiling(a1 + 8, a2);
}

void kaldi::CuMatrixBase<float>::ApplyExp(uint64_t a1)
{
  kaldi::MatrixBase<float>::ApplyExp(a1 + 8);
}

uint64_t kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  v2 = a1 + 8;
  kaldi::MatrixBase<float>::CopyFromMat<float>((int *)(a1 + 8), (int *)(a2 + 8), 111);
  result = kaldi::MatrixBase<float>::NumRows(v2);
  if ((int)result >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)v2 + 4 * *(_DWORD *)(v2 + 16) * v4;
      v6 = kaldi::MatrixBase<float>::NumCols(v2);
      v9 = 0;
      v10 = 0;
      v7 = v5;
      v8 = v6;
      kaldi::VectorBase<float>::ApplySoftMax((uint64_t)&v7);
      ++v4;
      result = kaldi::MatrixBase<float>::NumRows(v2);
    }
    while (v4 < (int)result);
  }
  return result;
}

void kaldi::CuMatrixBase<float>::ApplyMaxNorm(uint64_t a1, int a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char v15;

  kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v13, a1, 111);
  v6 = a1 + 8;
  kaldi::MatrixBase<float>::MulElements((uint64_t)&v14, a1 + 8);
  if (a2)
  {
    v7 = *(unsigned int *)(a1 + 20);
    v11 = 0;
    v12 = 0;
    v9 = &unk_1E5D341C8;
    v10 = 0;
    kaldi::CuVector<float>::Resize((uint64_t)&v9, v7, 0);
    v12 = *(_QWORD *)(a1 + 32);
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)&v9, (uint64_t)&v13, 1.0, 0.0);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)&v9, 0.5);
    kaldi::CuVectorBase<float>::Scale((uint64_t)&v9, 1.0 / a3);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)&v9, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)&v9);
    kaldi::MatrixBase<float>::MulRowsVec(v6, &v10);
  }
  else
  {
    v8 = *(unsigned int *)(a1 + 16);
    v11 = 0;
    v12 = 0;
    v9 = &unk_1E5D341C8;
    v10 = 0;
    kaldi::CuVector<float>::Resize((uint64_t)&v9, v8, 0);
    v12 = *(_QWORD *)(a1 + 32);
    kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v9, (uint64_t)&v13, 1.0, 0.0);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)&v9, 0.5);
    kaldi::CuVectorBase<float>::Scale((uint64_t)&v9, 1.0 / a3);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)&v9, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)&v9);
    kaldi::MatrixBase<float>::MulColsVec(v6, &v10);
  }
  v9 = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)&v9);
  v13 = &unk_1E5D34170;
  if (v14)
  {
    if (!v15)
      free(v14);
  }
}

void sub_1ADA37F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  BOOL v19;

  if (a14)
    v19 = a18 == 0;
  else
    v19 = 0;
  if (v19)
    free(a14);
  _Unwind_Resume(exception_object);
}

float32_t kaldi::CuMatrixBase<float>::MulElements(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::MulElements(a1 + 8, a2 + 8);
}

uint64_t kaldi::CuMatrixBase<float>::MulRowsVec(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::MulRowsVec(a1 + 8, (uint64_t *)(a2 + 8));
}

uint64_t kaldi::CuMatrixBase<float>::MulColsVec(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::MulColsVec(a1 + 8, (uint64_t *)(a2 + 8));
}

void kaldi::CuMatrixBase<float>::FindRowMaxId(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;

  kaldi::CuArray<int>::Resize((uint64_t)a2, *(_DWORD *)(a1 + 20), 0);
  if (*a2 >= 1)
  {
    v4 = 0;
    v5 = *((_QWORD *)a2 + 1);
    do
      *(_DWORD *)(v5 + 4 * v4++) = -1;
    while (v4 < *a2);
  }
  v6 = *(unsigned int *)(a1 + 20);
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = *(unsigned int *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *((_QWORD *)a2 + 1);
    do
    {
      if ((int)v8 < 1)
      {
        v13 = -1;
      }
      else
      {
        v11 = 0;
        v13 = -1;
        v14 = -1.0e21;
        do
        {
          v12 = v9 + 4 * *(_DWORD *)(a1 + 24) * (int)v7;
          if (v14 < *(float *)(v12 + 4 * v11))
          {
            v14 = *(float *)(v12 + 4 * v11);
            v13 = v11;
          }
          ++v11;
        }
        while (v8 != v11);
      }
      *(_DWORD *)(v10 + 4 * v7++) = v13;
    }
    while (v7 != v6);
  }
}

void kaldi::CuArray<int>::Resize(uint64_t a1, unsigned int a2, int a3)
{
  _BOOL4 v3;
  void *v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[34];

  v3 = a3;
  if (a3 == 3)
    v3 = *(_DWORD *)a1 >= (int)a2;
  if (*(_DWORD *)(a1 + 4) >= (signed int)a2)
  {
    *(_DWORD *)a1 = a2;
    if (a2 && !v3)
    {
      v8 = *(void **)(a1 + 8);
      v9 = 4 * a2;
      goto LABEL_13;
    }
  }
  else
  {
    v6 = *(void **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    if (v6)
      free(v6);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = v7;
    if (a2)
    {
      v8 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
      *(_QWORD *)(a1 + 8) = v8;
      if (!v8)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Memory allocation failed when initializing CuVector ", 52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"with dimension ", 15);
        v11 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" object size in bytes: ", 23);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
      }
      *(_DWORD *)a1 = a2;
      *(_DWORD *)(a1 + 4) = a2;
      if (!v3)
      {
        v9 = 4 * a2;
LABEL_13:
        bzero(v8, v9);
      }
    }
  }
}

uint64_t kaldi::CuMatrixBase<float>::Set(uint64_t a1, float a2)
{
  return kaldi::MatrixBase<float>::Set(a1 + 8, a2);
}

uint64_t kaldi::CuMatrixBase<float>::Add(uint64_t a1, float a2)
{
  return kaldi::MatrixBase<float>::Add(a1 + 8, a2);
}

void kaldi::CuMatrixBase<float>::Scale(uint64_t a1, float a2)
{
  kaldi::MatrixBase<float>::Scale(a1 + 8, a2);
}

void kaldi::CuMatrixBase<float>::ApplyLog(uint64_t a1)
{
  kaldi::MatrixBase<float>::ApplyLog(a1 + 8);
}

uint64_t kaldi::CuMatrixBase<float>::DivElements(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::DivElements(a1 + 8, (uint64_t *)(a2 + 8));
}

uint64_t kaldi::CuMatrixBase<float>::Max(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::Max(a1 + 8, a2 + 8);
}

void kaldi::CuMatrixBase<float>::MulRowsGroupMat(uint64_t a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::MulRowsGroupMat(a1 + 8, a2 + 8);
}

uint64_t *kaldi::CuMatrixBase<float>::AddVecToCols(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t *v6;
  _QWORD *v8;
  _QWORD v9[34];

  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 20))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Non matching dimensions: Rows:", 30);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" VectorDim:", 11);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v6 = (uint64_t *)(a1 + 8);
  if (a4 != 1.0)
    kaldi::MatrixBase<float>::Scale(a1 + 8, a4);
  return kaldi::MatrixBase<float>::AddVecToCols<float>(v6, (uint64_t *)(a2 + 8), a3);
}

uint64_t *kaldi::CuMatrixBase<float>::AddVecToRows(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t *v6;
  _QWORD *v8;
  _QWORD v9[34];

  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Non matching dimensions: Cols:", 30);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" VectorDim:", 11);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v6 = (uint64_t *)(a1 + 8);
  if (a4 != 1.0)
    kaldi::MatrixBase<float>::Scale(a1 + 8, a4);
  return kaldi::MatrixBase<float>::AddVecToRows<float>(v6, (uint64_t *)(a2 + 8), a3);
}

void kaldi::CuMatrixBase<float>::AddVecVec(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v8;

  v8 = a1 + 8;
  if (a5 != 1.0)
    kaldi::MatrixBase<float>::Scale(a1 + 8, a5);
  kaldi::MatrixBase<float>::AddVecVec<float>(v8, a2 + 8, a3 + 8, a4);
}

void kaldi::CuMatrixBase<float>::AddMatMatMasked(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE a3, uint64_t a4, CBLAS_TRANSPOSE a5, float a6)
{
  _QWORD v6[34];

  if (a3 == CblasTrans && a5 == CblasTrans)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "matrix A and B can not be transposed at the same time, not implemented yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  kaldi::MatrixBase<float>::AddMatMat(a1 + 8, a2 + 8, a3, a4 + 8, a5, a6, 1.0);
}

uint64_t kaldi::CuMatrixBase<float>::AddMatEwpMat(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, float a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatEwpMat(a1 + 8, a2 + 8, a3, a4 + 8, a5, a6, a7);
}

void kaldi::CuMatrixBase<float>::AddDiagVecMat(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5, float a6)
{
  kaldi::MatrixBase<float>::AddDiagVecMat(a1 + 8, (float **)(a2 + 8), a3 + 8, a4, a5, a6);
}

void kaldi::CuMatrixBase<float>::AddMatDiagVec(uint64_t a1, uint64_t a2, int a3, uint64_t a4, float a5, float a6)
{
  kaldi::MatrixBase<float>::AddMatDiagVec(a1 + 8, a2 + 8, a3, (float **)(a4 + 8), a5, a6);
}

uint64_t kaldi::CuMatrixBase<float>::AddIndexedRows(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return kaldi::MatrixBase<float>::AddIndexedRows(a1 + 8, (uint64_t *)(a2 + 8), a3 + 8, a4);
}

float kaldi::CuMatrixBase<float>::Sum(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  _QWORD v6[4];

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v6[0] = &unk_1E5D341C8;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = v3;
  kaldi::CuVector<float>::Resize((uint64_t)v6, v2, 0);
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v6, a1, 1.0, 0.0);
  v4 = kaldi::CuVectorBase<float>::Sum((uint64_t)v6);
  v6[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v6);
  return v4;
}

void sub_1ADA384FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuMatrixBase<float>::CountZeros(uint64_t a1)
{
  return kaldi::MatrixBase<float>::CountZeros(a1 + 8);
}

void kaldi::CuMatrixBase<float>::SetRandn(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20))
    kaldi::MatrixBase<float>::SetRandn(a1 + 8);
}

uint64_t kaldi::CuMatrixBase<float>::Write(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  int v9[10];

  kaldi::Matrix<float>::Matrix((uint64_t)v9, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 16), 1, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>(v9, (int *)(a1 + 8), 111);
  kaldi::MatrixBase<float>::Write(v9, a2, a3, a4);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v9);
}

void sub_1ADA385A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuMatrixBase<float>::AddUniqueElements(uint64_t result, unsigned int *a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  float v9;
  float v10;
  int v11;

  v3 = *a2;
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(result + 8);
    v6 = *(_DWORD *)(result + 24);
    v7 = (_DWORD *)(*((_QWORD *)a2 + 1) + 8);
    do
    {
      v8 = *((_QWORD *)v7 - 1);
      v9 = *(float *)v7;
      v7 += 3;
      v10 = v9;
      if ((int)v8 >= 0)
        v11 = v8;
      else
        v11 = v4;
      *(float *)(v5 + 4 * v6 * v11 + 4 * (v8 >> 32)) = (float)(v10 * a3)
                                                       + *(float *)(v5 + 4 * v6 * v11 + 4 * (v8 >> 32));
      ++v4;
    }
    while (v3 != v4);
  }
  return result;
}

void kaldi::CuMatrixBase<float>::EqualElementColMask(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;

  kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(a1 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  v6 = *(_DWORD *)(a1 + 20);
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = *(unsigned int *)(a1 + 16);
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      if ((int)v8 >= 1)
      {
        v10 = 0;
        v11 = *(_QWORD *)&a3[1] + 4 * a3[3].i32[0] * v7;
        v12 = *(_QWORD *)(a1 + 8) + 4 * *(_DWORD *)(a1 + 24) * v7;
        do
        {
          if (*(float *)(v12 + 4 * v10) == *(float *)(v9 + 4 * v10))
            v13 = 1.0;
          else
            v13 = 0.0;
          *(float *)(v11 + 4 * v10++) = v13;
        }
        while (v8 != v10);
      }
      ++v7;
    }
    while (v7 != v6);
  }
}

void kaldi::CuMatrixBase<float>::EqualElementMask(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;

  kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  v6 = *(unsigned int *)(a1 + 20);
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(unsigned int *)(a1 + 16);
    v10 = *(_QWORD *)(a2 + 8);
    v11 = 4 * *(int *)(a2 + 24);
    do
    {
      if ((int)v9 >= 1)
      {
        v12 = 0;
        v13 = *(_QWORD *)&a3[1] + v7 * a3[3].i32[0];
        v14 = *(_QWORD *)(a1 + 8) + v7 * *(int *)(a1 + 24);
        do
        {
          if (*(float *)(v14 + 4 * v12) == *(float *)(v10 + 4 * v12))
            v15 = 1.0;
          else
            v15 = 0.0;
          *(float *)(v13 + 4 * v12++) = v15;
        }
        while (v9 != v12);
      }
      ++v8;
      v7 += 4;
      v10 += v11;
    }
    while (v8 != v6);
  }
}

uint64_t kaldi::CuMatrixBase<float>::ConcatenateVec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::MatrixBase<float>::ConcatenateVec(a1 + 8, (uint64_t *)(a2 + 8), a3 + 8);
}

void kaldi::CuMatrixBase<float>::ConcatenateVec(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  kaldi::MatrixBase<float>::ConcatenateVec((uint64_t *)(a1 + 8), a2, a3 + 8, a4, a5, a6, a7, a8, a9);
}

uint64_t kaldi::CuMatrixBase<float>::SummarizeVec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::MatrixBase<float>::SummarizeVec(a1 + 8, (uint64_t *)(a2 + 8), (uint64_t *)(a3 + 8));
}

void kaldi::CuMatrixBase<float>::SummarizeVec(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  kaldi::MatrixBase<float>::SummarizeVec(a1 + 8, a2, a3 + 8);
}

void kaldi::CuMatrixBase<float>::DataUnowned()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::CuMatrixBase<double>::DataUnowned()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void **kaldi::CuMatrixBase<float>::AddMatMat<signed char>(uint64_t a1, uint64_t a2, uint64_t a3, kaldi::quasar::Vocab *a4, int a5, double a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<signed char>((void **)(a1 + 8), a2 + 8, a6, a7, a3, a4, a5);
}

void **kaldi::CuMatrixBase<float>::AddMatMat<short>(uint64_t a1, uint64_t a2, uint64_t a3, kaldi::quasar::Vocab *a4, int a5, double a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<short>((void **)(a1 + 8), a2 + 8, a6, a7, a3, a4, a5);
}

int *kaldi::CuMatrixBase<float>::AddMatMat<signed char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, double a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<signed char>((int *)(a1 + 8), a2 + 8, a6, a7, a3, a4, a5);
}

int *kaldi::CuMatrixBase<float>::AddMatMat<short>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, double a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<short>((int *)(a1 + 8), a2 + 8, a6, a7, a3, a4, a5);
}

uint64_t kaldi::Quant3Levels<float>(uint64_t a1, uint64_t a2, float a3)
{
  return kaldi::Quant3Levels<float>(a1 + 8, a2 + 8, a3);
}

uint64_t kaldi::ZeroSmallValues<float>(uint64_t a1, uint64_t a2, float a3)
{
  return kaldi::ZeroSmallValues<float>(a1 + 8, a2 + 8, a3);
}

uint64_t quasar::stringToFst@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *Text;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void *__p;
  char v11;

  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&v9);
  Text = fst::SymbolTable::ReadText(a2);
  if (v11 < 0)
    operator delete(__p);
  v7 = operator new();
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = Text;
  *(_DWORD *)(v7 + 16) = -1;
  *(_BYTE *)(v7 + 20) = 0;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(a3);
  fst::StringCompiler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>((_DWORD *)v7, a1, (uint64_t)a3);
  result = MEMORY[0x1AF44D190](v7, 0x1060C40D58F381ALL);
  if (Text)
    return (*(uint64_t (**)(_QWORD *))(*Text + 8))(Text);
  return result;
}

void sub_1ADA3896C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v20;
  int v21;

  v18 = v16;
  *v18 = &unk_1E5D256C0;
  v20 = (_DWORD *)v18[1];
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  MEMORY[0x1AF44D190](v17, 0x1060C40D58F381ALL);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t quasar::LatticeFasterDecoder::registerParams(quasar::LatticeFasterDecoder *this, quasar::SystemConfig *a2)
{
  char *v4;
  char *v5;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  quasar::OnlinePhoneDecoderConfig::Register((uint64_t)this + 488, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v9, "word-syms-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "word symbol table text format filename");
  v4 = (char *)this + 608;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v9, (uint64_t)this + 608, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  std::string::basic_string[abi:ne180100]<0>(v9, "fst-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "HCLG FST filename");
  v5 = (char *)this + 448;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v9, (uint64_t)v5, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  MEMORY[0x1AF44C914](v4, "");
  return MEMORY[0x1AF44C914](v5, "");
}

void sub_1ADA38B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::OnlinePhoneDecoderConfig::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  kaldi::LatticeFasterDecoderConfig::Register(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "update-interval");
  std::string::basic_string[abi:ne180100]<0>(__p, "Beam update interval in frames");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 72, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "beam-update");
  std::string::basic_string[abi:ne180100]<0>(__p, "Beam update rate");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 76, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-beam-update");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max beam update rate");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 80, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "inter-utt-sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum # of silence frames to trigger new utterance");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 60, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-utt-sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum # of silence frames to trigger end of speech while no speech presented");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 68, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-utt-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "If the utterance becomes longer than this number of frames, shorter silence is acceptable as an utterance separator");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 64, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "det-max-mem");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum approximate memory usage in determinization (real usage might be many times this)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 84, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "det-max-loop");
  std::string::basic_string[abi:ne180100]<0>(__p, "Option used to detect a particular type of determinization failure, typically due to invalid input (e.g., negative-cost loops)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 88, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADA38E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::LatticeFasterDecoder::finishInit(quasar::LatticeFasterDecoder *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  quasar::ModelLoader::readSymbolTable(*((_QWORD *)this + 46), (uint64_t)this + 608, 4, 0, &v13);
  v11 = 3;
  std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<fst::SymbolTable> &,quasar::TextEncoding,void>(&v13, &v11, &v12);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 632, &v12);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD, char *))(**((_QWORD **)this + 46) + 16))(&v12, *((_QWORD *)this + 46), (char *)this + 448);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 472, &v12);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1ADA39020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::LatticeFasterDecoder::runImpl(_QWORD *a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  void **v32;
  void **v33;
  uint64_t v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t **v40;
  int v41;
  uint64_t v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  float *v52;
  int v53;
  int v54;
  float v55;
  char *v56;
  __int128 v57;
  std::string *v58;
  std::string *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  void **v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  void *__p[2];
  char v92;
  __int128 *v93[3];
  void *v94[2];
  char v95;
  void *v96[2];
  char v97;
  std::string v98;
  uint64_t v99;
  std::string *v100;
  unint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  void *v105[2];
  uint64_t v106;
  int **v107;
  unint64_t v108;
  unint64_t v109;
  _BYTE v110[32];
  __int128 v111;
  void *v112[2];
  __int128 v113;
  __int128 v114;
  void *v115[2];
  __int128 v116;
  __int128 v117;
  void *v118[2];
  __int128 v119;
  void *v120[2];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  void *v126;
  uint64_t v127;
  void **v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD v131[11];
  _OWORD v132[2];
  _OWORD *v133;
  uint64_t v134;
  int v135;
  __int128 v136;
  uint64_t v137;
  unint64_t v138;
  std::__shared_weak_count *v139;

  v5 = a3;
  quasar::SymbolTableList::clear((quasar::SymbolTableList *)(*a3)[59]);
  v7 = (uint64_t *)(*v5)[59];
  v8 = (std::__shared_weak_count *)a1[80];
  v138 = a1[79];
  v139 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v87 = v5;
  quasar::SymbolTableList::addSymbolTable(v7, &v138, 0, -1);
  v11 = v139;
  if (v139)
  {
    v12 = (unint64_t *)&v139->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *v5;
  v85 = (*v5)[1];
  v86 = **v5;
  if (v86 == v85)
  {
    v30 = 10;
  }
  else
  {
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v107);
    v129 = 0;
    v128 = 0;
    v130 = 0;
    v15 = **v5;
    v16 = (*v87)[1];
    if (v15 != v16)
    {
      v4 = (uint64_t)"/sil_I/";
      do
      {
        if (*(char *)(v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v110, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
        }
        else
        {
          v17 = *(_OWORD *)v15;
          *(_QWORD *)&v110[16] = *(_QWORD *)(v15 + 16);
          *(_OWORD *)v110 = v17;
        }
        std::string::basic_string[abi:ne180100]<0>(&v136, "/sil_S/");
        quasar::eraseAll((uint64_t)v110, (uint64_t)&v136);
        if (SHIBYTE(v137) < 0)
          operator delete((void *)v136);
        std::string::basic_string[abi:ne180100]<0>(&v136, "/sil_B/");
        quasar::eraseAll((uint64_t)v110, (uint64_t)&v136);
        if (SHIBYTE(v137) < 0)
          operator delete((void *)v136);
        std::string::basic_string[abi:ne180100]<0>(&v136, "/sil_I/");
        quasar::eraseAll((uint64_t)v110, (uint64_t)&v136);
        if (SHIBYTE(v137) < 0)
          operator delete((void *)v136);
        std::string::basic_string[abi:ne180100]<0>(&v136, "/sil_E/");
        quasar::eraseAll((uint64_t)v110, (uint64_t)&v136);
        if (SHIBYTE(v137) < 0)
          operator delete((void *)v136);
        std::string::basic_string[abi:ne180100]<0>(&v136, "sil");
        quasar::eraseAll((uint64_t)v110, (uint64_t)&v136);
        if (SHIBYTE(v137) < 0)
          operator delete((void *)v136);
        quasar::stringToFst((uint64_t)v110, (uint64_t)(a1 + 76), &v136);
        std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::push_back[abi:ne180100]((uint64_t *)&v128, (uint64_t)&v136);
        *(_QWORD *)&v136 = &unk_1E5D256C0;
        v18 = *((_QWORD *)&v136 + 1);
        if (*((_QWORD *)&v136 + 1))
        {
          v19 = *(_DWORD *)(*((_QWORD *)&v136 + 1) + 56) - 1;
          *(_DWORD *)(*((_QWORD *)&v136 + 1) + 56) = v19;
          if (!v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        }
        fst::Union<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v107, v129 - 16);
        if ((v110[23] & 0x80000000) != 0)
          operator delete(*(void **)v110);
        v15 += 24;
      }
      while (v15 != v16);
    }
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(&v107);
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v110);
    v20 = a1[59];
    LOBYTE(v136) = 1;
    DWORD1(v136) = 0;
    fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v20, (uint64_t)&v107, (uint64_t)v110, (uint64_t)&v136);
    v21 = operator new(0x28uLL);
    v21[2] = 0;
    *v21 = &unk_1E5D413A8;
    v21[1] = 0;
    v22 = *(_QWORD *)&v110[8];
    v21[4] = *(_QWORD *)&v110[8];
    ++*(_DWORD *)(v22 + 56);
    v21[3] = &unk_1E5D28970;
    *(_QWORD *)&v136 = v21 + 3;
    *((_QWORD *)&v136 + 1) = v21;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(a1 + 59), &v136);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
    if (*((_QWORD *)&v136 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    *(_QWORD *)v110 = &unk_1E5D256C0;
    v26 = *(_QWORD *)&v110[8];
    if (*(_QWORD *)&v110[8])
    {
      v27 = *(_DWORD *)(*(_QWORD *)&v110[8] + 56) - 1;
      *(_DWORD *)(*(_QWORD *)&v110[8] + 56) = v27;
      if (!v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
    *(_QWORD *)v110 = &v128;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
    v107 = (int **)&unk_1E5D256C0;
    v28 = v108;
    v5 = v87;
    if (v108)
    {
      v29 = *(_DWORD *)(v108 + 56) - 1;
      *(_DWORD *)(v108 + 56) = v29;
      if (!v29)
        (*(void (**)(unint64_t))(*(_QWORD *)v28 + 8))(v28);
    }
    v14 = *v87;
    v30 = 20;
  }
  v84 = v30;
  std::vector<std::string>::__clear[abi:ne180100](v14);
  v31 = *v5;
  v32 = (void **)v31[3];
  v33 = (void **)v31[4];
  while (v33 != v32)
  {
    v33 -= 3;
    v128 = v33;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v128);
  }
  v31[4] = (uint64_t)v32;
  v34 = a1[59];
  v35 = (__int128 *)(a1 + 61);
  quasar::PTree::begin(*(quasar::PTree **)(a2 + 32));
  kaldi::LatticeFasterOnlineDecoder::LatticeFasterOnlineDecoder((uint64_t)&v128, v34, v35);
  *(_OWORD *)((char *)v132 + 12) = *(__int128 *)((char *)v35 + 76);
  v36 = v35[3];
  v131[9] = v35[2];
  v131[10] = v36;
  v132[0] = v35[4];
  v37 = *v35;
  v38 = v35[1];
  v39 = a2;
  v131[7] = v37;
  v131[8] = v38;
  v134 = 1;
  v133 = v131;
  v135 = 0;
  v40 = v87;
  do
  {
    v41 = quasar::OnlinePhoneDecoder::DecodeMe<kaldi::DecodableInterface>((kaldi::LatticeFasterOnlineDecoder *)&v128, *(kaldi::DecodableInterface **)(v39 + 16));
    if (v41 != 1)
      continue;
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v126);
    if (kaldi::LatticeFasterOnlineDecoder::FinalRelativeCost((kaldi::LatticeFasterOnlineDecoder *)&v128) == INFINITY)
    {
      if (quasar::gLogLevel >= 4)
      {
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        *(_OWORD *)v120 = 0u;
        v121 = 0u;
        *(_OWORD *)v118 = 0u;
        v119 = 0u;
        v116 = 0u;
        v117 = 0u;
        v114 = 0u;
        *(_OWORD *)v115 = 0u;
        *(_OWORD *)v112 = 0u;
        v113 = 0u;
        v111 = 0u;
        memset(v110, 0, sizeof(v110));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Problem decoding utterance.", 27);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v110);
      }
    }
    else if (quasar::OnlinePhoneDecoder::GetDeterminizedLattice((uint64_t)&v128, (uint64_t)&v126, 1))
    {
      v136 = 0uLL;
      v137 = 0;
      fst::NbestAsFsts<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v126, v84, (uint64_t *)&v136);
      v107 = 0;
      v108 = 0;
      v109 = 0;
      v42 = v136;
      if ((_QWORD)v136 == *((_QWORD *)&v136 + 1))
      {
        v4 = 0;
      }
      else
      {
        v43 = 0;
        do
        {
          memset(v110, 0, 24);
          LOBYTE(v105[0]) = 0;
          if (quasar::Decoder::getLinearOutputSymbolSequenceWithDuration<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>(v42, (uint64_t *)v110, 0, (_QWORD *)v39, v105, 0, 0, 0, 0))
          {
            *((_BYTE *)*v40 + 144) |= LOBYTE(v105[0]);
            v44 = (_QWORD *)v108;
            if (v108 >= v109)
            {
              v45 = std::vector<std::vector<fst::symbol_outT<int>>>::__push_back_slow_path<std::vector<fst::symbol_outT<int>> const&>((uint64_t *)&v107, (uint64_t *)v110);
            }
            else
            {
              *(_QWORD *)v108 = 0;
              v44[1] = 0;
              v44[2] = 0;
              std::vector<fst::symbol_outT<int>>::__init_with_size[abi:ne180100]<fst::symbol_outT<int>*,fst::symbol_outT<int>*>(v44, *(uint64_t *)v110, *(uint64_t *)&v110[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v110[8] - *(_QWORD *)v110) >> 4));
              v45 = (uint64_t)(v44 + 3);
            }
            v108 = v45;
            ++v43;
          }
          v105[0] = v110;
          std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v105);
          v42 += 16;
        }
        while (v42 != *((_QWORD *)&v136 + 1));
        if (v43 <= 0)
        {
          v4 = 0;
        }
        else
        {
          v46 = 0;
          v90 = *v40;
          v88 = *v40 + 3;
          v89 = v43;
          do
          {
            v105[0] = 0;
            v105[1] = 0;
            v106 = 0;
            v102 = 0;
            v103 = 0;
            v104 = 0;
            quasar::SymbolTableList::lookup((uint64_t *)(*v40)[59], &v107[3 * v46], (uint64_t *)v105, (char **)&v102, 0);
            v99 = 0;
            v100 = 0;
            v101 = 0;
            v47 = (char *)v105[0];
            if (v105[1] != v105[0])
            {
              v48 = 0;
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v52 = (float *)&v107[3 * v46][v49];
                v53 = *((_DWORD *)v52 + 1);
                v54 = *((_DWORD *)v52 + 2);
                v55 = v52[3];
                v56 = &v47[v48];
                if (v56[23] < 0)
                {
                  std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)v56, *((_QWORD *)v56 + 1));
                }
                else
                {
                  v57 = *(_OWORD *)v56;
                  v98.__r_.__value_.__r.__words[2] = *((_QWORD *)v56 + 2);
                  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v57;
                }
                std::string::basic_string[abi:ne180100]<0>(v96, "");
                std::string::basic_string[abi:ne180100]<0>(v94, "");
                memset(v93, 0, sizeof(v93));
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                quasar::Token::Token((std::string *)v110, (__int128 *)&v98, v51, v53 + v51, v54, 1, 0, (__int128 *)v96, v55, (__int128 *)v94, v93, 0, (__int128 *)__p, 0, 0);
                if (v92 < 0)
                  operator delete(__p[0]);
                __p[0] = v93;
                std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                if (v95 < 0)
                  operator delete(v94[0]);
                if (v97 < 0)
                  operator delete(v96[0]);
                if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v98.__r_.__value_.__l.__data_);
                if (quasar::Token::isPrintable((quasar::Token *)v110))
                {
                  v58 = v100;
                  if ((unint64_t)v100 >= v101)
                  {
                    v59 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v99, (const quasar::Token *)v110);
                  }
                  else
                  {
                    quasar::Token::Token(v100, (const quasar::Token *)v110);
                    v59 = (std::string *)((char *)v58 + 224);
                  }
                  v100 = v59;
                }
                v51 = v111;
                if (SBYTE7(v121) < 0)
                  operator delete(v120[0]);
                if (SBYTE7(v119) < 0)
                  operator delete(v118[0]);
                v96[0] = (char *)&v116 + 8;
                std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
                if (SBYTE7(v116) < 0)
                  operator delete(v115[0]);
                v96[0] = (char *)&v113 + 8;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
                if (SBYTE7(v113) < 0)
                  operator delete(v112[0]);
                if ((v110[23] & 0x80000000) != 0)
                  operator delete(*(void **)v110);
                ++v50;
                v47 = (char *)v105[0];
                v49 += 12;
                v48 += 24;
              }
              while (0xAAAAAAAAAAAAAAABLL * (((char *)v105[1] - (char *)v105[0]) >> 3) > v50);
            }
            v60 = v90[4];
            if (v60 >= v90[5])
            {
              v61 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v88, &v99);
            }
            else
            {
              std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v88, &v99);
              v61 = v60 + 24;
            }
            v40 = v87;
            v90[4] = v61;
            *(_QWORD *)v110 = &v99;
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
            if (v102)
            {
              v103 = v102;
              operator delete(v102);
            }
            *(_QWORD *)v110 = v105;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
            ++v46;
          }
          while (v46 != v89);
          v62 = v90[3];
          if (v90[4] != v62)
          {
            v63 = 0;
            v64 = 0;
            do
            {
              quasar::formatResultTokensSimple((std::string *)(v62 + v63), 0);
              v65 = *v88;
              v110[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&v110[8], "▁");
              quasar::formatResultTokens((const quasar::Token **)(v65 + v63), v110);
              if ((v110[31] & 0x80000000) != 0)
              {
                operator delete(*(void **)&v110[8]);
                if (v64)
                  goto LABEL_110;
              }
              else if (v64)
              {
                goto LABEL_110;
              }
              if (quasar::gLogLevel >= 4)
              {
                v124 = 0u;
                v125 = 0u;
                v122 = 0u;
                v123 = 0u;
                *(_OWORD *)v120 = 0u;
                v121 = 0u;
                *(_OWORD *)v118 = 0u;
                v119 = 0u;
                v116 = 0u;
                v117 = 0u;
                v114 = 0u;
                *(_OWORD *)v115 = 0u;
                *(_OWORD *)v112 = 0u;
                v113 = 0u;
                v111 = 0u;
                memset(v110, 0, sizeof(v110));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
                v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"FINAL RESULT:", 13);
                if (v106 >= 0)
                  v67 = v105;
                else
                  v67 = (void **)v105[0];
                if (v106 >= 0)
                  v68 = HIBYTE(v106);
                else
                  v68 = (uint64_t)v105[1];
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
                quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v110);
              }
LABEL_110:
              v69 = *v87;
              v70 = (*v87)[1];
              if (v70 >= (*v87)[2])
              {
                v72 = std::vector<std::string>::__push_back_slow_path<std::string const&>(*v87, (__int128 *)v105);
              }
              else
              {
                if (SHIBYTE(v106) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)(*v87)[1], (const std::string::value_type *)v105[0], (std::string::size_type)v105[1]);
                }
                else
                {
                  v71 = *(_OWORD *)v105;
                  *(_QWORD *)(v70 + 16) = v106;
                  *(_OWORD *)v70 = v71;
                }
                v72 = v70 + 24;
                v69[1] = v70 + 24;
              }
              v69[1] = v72;
              if (v86 == v85)
              {
                if (quasar::gLogLevel >= 4)
                {
                  v124 = 0u;
                  v125 = 0u;
                  v122 = 0u;
                  v123 = 0u;
                  *(_OWORD *)v120 = 0u;
                  v121 = 0u;
                  *(_OWORD *)v118 = 0u;
                  v119 = 0u;
                  v116 = 0u;
                  v117 = 0u;
                  v114 = 0u;
                  *(_OWORD *)v115 = 0u;
                  *(_OWORD *)v112 = 0u;
                  v113 = 0u;
                  v111 = 0u;
                  memset(v110, 0, sizeof(v110));
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Result Choice[", 14);
                  v77 = (_QWORD *)std::ostream::operator<<();
                  v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"]: ", 3);
                  if (v104 >= 0)
                    v75 = &v102;
                  else
                    v75 = v102;
                  if (v104 >= 0)
                    v76 = HIBYTE(v104);
                  else
                    v76 = (uint64_t)v103;
                  goto LABEL_131;
                }
              }
              else if (quasar::gLogLevel >= 4)
              {
                v124 = 0u;
                v125 = 0u;
                v122 = 0u;
                v123 = 0u;
                *(_OWORD *)v120 = 0u;
                v121 = 0u;
                *(_OWORD *)v118 = 0u;
                v119 = 0u;
                v116 = 0u;
                v117 = 0u;
                v114 = 0u;
                *(_OWORD *)v115 = 0u;
                *(_OWORD *)v112 = 0u;
                v113 = 0u;
                v111 = 0u;
                memset(v110, 0, sizeof(v110));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Pronunciation Choice[", 21);
                v73 = (_QWORD *)std::ostream::operator<<();
                v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"]: ", 3);
                if (v106 >= 0)
                  v75 = v105;
                else
                  v75 = v105[0];
                if (v106 >= 0)
                  v76 = HIBYTE(v106);
                else
                  v76 = (uint64_t)v105[1];
LABEL_131:
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
                quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v110);
              }
              if (SHIBYTE(v104) < 0)
                operator delete(v102);
              if (SHIBYTE(v106) < 0)
                operator delete(v105[0]);
              ++v64;
              v62 = v90[3];
              v63 += 24;
            }
            while (v64 < 0xAAAAAAAAAAAAAAABLL * ((v90[4] - v62) >> 3));
          }
          v78 = 0;
          v39 = a2;
          while (quasar::Decoder::reportResults(v136 + v78, (uint64_t *)v87, a4, a2) != 2)
          {
            v78 += 16;
            if (!--v89)
            {
              v4 = 0;
              goto LABEL_147;
            }
          }
          v4 = 2;
LABEL_147:
          v41 = 1;
        }
      }
      *(_QWORD *)v110 = &v107;
      std::vector<std::vector<fst::symbol_outT<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
      *(_QWORD *)v110 = &v136;
      std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
      goto LABEL_149;
    }
    v4 = 2;
LABEL_149:
    v126 = &unk_1E5D25580;
    v79 = v127;
    if (v127)
    {
      v80 = *(_DWORD *)(v127 + 56) - 1;
      *(_DWORD *)(v127 + 56) = v80;
      if (!v80)
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
    }
  }
  while (v41 != 1);
  quasar::OnlinePhoneDecoder::~OnlinePhoneDecoder((quasar::OnlinePhoneDecoder *)&v128);
  return v4;
}

void sub_1ADA39D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,_DWORD *a53,uint64_t a54,void *a55,uint64_t a56)
{
  uint64_t v57;
  int v58;
  int v59;

  a55 = &unk_1E5D256C0;
  v57 = a56;
  if (a56)
  {
    v58 = *(_DWORD *)(a56 + 56) - 1;
    *(_DWORD *)(a56 + 56) = v58;
    if (!v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  }
  a55 = &STACK[0x298];
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  if (a53)
  {
    v59 = a53[14] - 1;
    a53[14] = v59;
    if (!v59)
      (*(void (**)(_DWORD *))(*(_QWORD *)a53 + 8))(a53);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((uint64_t)v7 - *a1) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v5 - *a1;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, v13);
    else
      v14 = 0;
    v15 = &v14[16 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[16 * v13];
    v16 = *(_QWORD *)(a2 + 8);
    *((_QWORD *)v15 + 1) = v16;
    ++*(_DWORD *)(v16 + 56);
    *(_QWORD *)v15 = &unk_1E5D28970;
    v17[2] = v15 + 16;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__swap_out_circular_buffer(a1, v17);
    v9 = (_QWORD *)a1[1];
    result = std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 8);
    v7[1] = v8;
    ++*(_DWORD *)(v8 + 56);
    *v7 = &unk_1E5D28970;
    v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((uint64_t)v7 - *a1) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v5 - *a1;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, v13);
    else
      v14 = 0;
    v15 = &v14[16 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[16 * v13];
    v16 = *(_QWORD *)(a2 + 8);
    *((_QWORD *)v15 + 1) = v16;
    ++*(_DWORD *)(v16 + 56);
    *(_QWORD *)v15 = &unk_1E5D28970;
    v17[2] = v15 + 16;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__swap_out_circular_buffer(a1, v17);
    v9 = (_QWORD *)a1[1];
    result = std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 8);
    v7[1] = v8;
    ++*(_DWORD *)(v8 + 56);
    *v7 = &unk_1E5D28970;
    v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1ADA3A15C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::Union<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2)
{
  fst *v4;
  const fst::SymbolTable *v5;
  fst *v6;
  const fst::SymbolTable *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  void *__p;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;

  v4 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v5 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  if (!fst::CompatSymbols(v4, v5, (const fst::SymbolTable *)1)
    || (v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1),
        v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2),
        !fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1)))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v20 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)&__p);
    v21 = (_QWORD *)fst::cerr(v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Union: input/output symbol tables of 1st argument ", 50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"do not match input/output symbol tables of 2nd argument", 55);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v33);
    if (SHIBYTE(v30) < 0)
      operator delete(__p);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x2000000000, 1);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((_DWORD)result == -1)
  {
    if ((v11 & 4) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
    return result;
  }
  v13 = result;
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v14 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    if (v9)
      v15 = v8;
    else
      v15 = v8 + 1;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 248))(a1, (v15 + v14));
  }
  v35 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v33);
LABEL_10:
  if (!v33)
  {
    if ((int)v35 >= v34)
      goto LABEL_40;
    goto LABEL_14;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33))
  {
LABEL_14:
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
    if (v33)
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
    else
      v17 = v35;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v17);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, v16);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, v16, v18);
    v32 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 136))(a2, v17, &__p);
    while (__p)
    {
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
      {
        if (__p)
        {
          (*(void (**)(void))(*(_QWORD *)__p + 8))();
          goto LABEL_31;
        }
LABEL_29:
        if (v31)
          --*v31;
LABEL_31:
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33);
        else
          ++v35;
        goto LABEL_10;
      }
      if (!__p)
        goto LABEL_23;
      v19 = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
LABEL_24:
      v27 = *v19;
      HIDWORD(v27) += v8;
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 208))(a1, v16, &v27);
      if (__p)
        (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
      else
        ++v32;
    }
    if (v32 >= v30)
      goto LABEL_29;
LABEL_23:
    v19 = (__int128 *)(v29 + 16 * v32);
    goto LABEL_24;
  }
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
LABEL_40:
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v23 == -1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v13);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v11, 0x3FFFFFFF0004);
  }
  else
  {
    v24 = v23;
    if (v9)
    {
      __p = 0;
      LODWORD(v29) = 0;
      HIDWORD(v29) = v13 + v8;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v23, &__p);
    }
    else
    {
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v25);
      __p = 0;
      LODWORD(v29) = 0;
      HIDWORD(v29) = v24;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v25, &__p);
      __p = 0;
      LODWORD(v29) = 0;
      HIDWORD(v29) = v13 + v8;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v25, &__p);
    }
    v26 = fst::UnionProperties(v10, v11, 0);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v26, 0x3FFFFFFF0007);
  }
}

void sub_1ADA3A6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlinePhoneDecoder::DecodeMe<kaldi::DecodableInterface>(kaldi::LatticeFasterOnlineDecoder *this, kaldi::DecodableInterface *a2)
{
  int v4;
  clockid_t v6;
  int32x2_t *v7;
  int v8;
  int v9;
  unint64_t v10;
  _QWORD *v12;
  clockid_t v13;
  _QWORD *v14;
  int32x2_t v15;
  uint64_t result;
  _OWORD v17[17];
  _QWORD v18[3];
  char v19;
  uint64_t v20;

  v4 = *((_DWORD *)this + 102);
  if (v4 == 4 || v4 == 1)
    kaldi::LatticeFasterOnlineDecoder::InitDecoding(this);
  v19 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v18, (clockid_t)a2);
  v20 = 0;
  kaldi::Timer::GetSeconds((kaldi::Timer *)5, v6);
  v7 = (int32x2_t *)((char *)this + 412);
  if (((*(uint64_t (**)(kaldi::DecodableInterface *, _QWORD))(*(_QWORD *)a2 + 8))(a2, (*((_DWORD *)this + 103) - 1)) & 1) == 0)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if (v9 >= *((_DWORD *)this + 90))
        break;
      if (v9)
      {
        HIDWORD(v10) = 85899344 - 1030792151 * v7->i32[0];
        LODWORD(v10) = HIDWORD(v10);
        if ((v10 >> 3) <= 0x147AE14 && quasar::gLogLevel >= 6)
        {
          memset(v17, 0, sizeof(v17));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Beam: ", 6);
          v12 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"; Speed: ", 9);
          kaldi::Timer::GetSeconds((kaldi::Timer *)5, v13);
          v14 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" xRT", 4);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v17);
        }
      }
      kaldi::LatticeFasterOnlineDecoder::ProcessEmitting(this, a2);
      kaldi::LatticeFasterOnlineDecoder::ProcessNonemitting(this);
      v15 = *v7;
      *v7 = vadd_s32(*v7, (int32x2_t)0x100000001);
      ++v9;
      v8 += 10;
    }
    while (!(*(unsigned int (**)(kaldi::DecodableInterface *, _QWORD))(*(_QWORD *)a2 + 8))(a2, v15.u32[0]));
  }
  if ((*(unsigned int (**)(kaldi::DecodableInterface *, _QWORD))(*(_QWORD *)a2 + 8))(a2, v7->u32[0]))
  {
    kaldi::LatticeFasterOnlineDecoder::FinalizeDecoding(this);
    result = 1;
  }
  else
  {
    result = 2;
  }
  *((_DWORD *)this + 102) = result;
  return result;
}

void sub_1ADA3A958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a9);
  _Unwind_Resume(a1);
}

BOOL quasar::OnlinePhoneDecoder::GetDeterminizedLattice(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL8 RawLattice;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  double v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t (**v44)(_QWORD);
  uint64_t v45;

  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v44);
  RawLattice = kaldi::LatticeFasterOnlineDecoder::GetRawLattice(a1, (uint64_t)&v44, a3);
  if (RawLattice)
  {
    if (v44[14](&v44))
    {
      v7 = v44[14](&v44);
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
    else
    {
      v8 = 0;
    }
    if (v44[15](&v44))
    {
      v9 = v44[15](&v44);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    }
    else
    {
      v10 = 0;
    }
    fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::InvertMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v44);
    ((void (*)(uint64_t (***)(_QWORD), uint64_t))v44[35])(&v44, v10);
    ((void (*)(uint64_t (***)(_QWORD), uint64_t))v44[36])(&v44, v8);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v44);
    v12 = quasar::gLogLevel < 2 || v11;
    if ((v12 & 1) == 0)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v33 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Could not topologically sort lattice: this probably means it has bad properties e.g. epsilon cycles.  Your LM or lexicon might be broken, e.g. LM with epsilon cycles or lexicon with empty words.", 194);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v27);
    }
    fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v44);
    fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v25);
    v13 = *(float *)(a1 + 304);
    v21 = 981467136;
    v22 = *(_QWORD *)(a1 + 388);
    v23 = -1;
    v24 = 1056964608;
    v14 = fst::DeterminizeLatticePruned<fst::LatticeWeightTpl<float>,int>((void **)&v44, (uint64_t)&v25, (__int128 *)&v21, v13);
    if (quasar::gLogLevel < 4)
      v15 = 1;
    else
      v15 = v14;
    if ((v15 & 1) == 0)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v33 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"determinization did not succeed(partial output will be pruned tighter than the specified beam.)", 95);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v27);
    }
    fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v25, a2, 1);
    v25 = &unk_1E5D25800;
    v16 = v26;
    if (v26)
    {
      v17 = *(_DWORD *)(v26 + 56) - 1;
      *(_DWORD *)(v26 + 56) = v17;
      if (!v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  v44 = (uint64_t (**)(_QWORD))&unk_1E5D25580;
  v18 = v45;
  if (v45)
  {
    v19 = *(_DWORD *)(v45 + 56) - 1;
    *(_DWORD *)(v45 + 56) = v19;
    if (!v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  return RawLattice;
}

void sub_1ADA3AC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, ...)
{
  uint64_t v7;
  int v9;
  _DWORD *v10;
  int v11;
  va_list va;

  va_start(va, a7);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  if (a7)
  {
    v9 = a7[14] - 1;
    a7[14] = v9;
    if (!v9)
      (*(void (**)(_DWORD *))(*(_QWORD *)a7 + 8))(a7);
  }
  *(_QWORD *)(v7 - 64) = &unk_1E5D25580;
  v10 = *(_DWORD **)(v7 - 56);
  if (v10)
  {
    v11 = v10[14] - 1;
    v10[14] = v11;
    if (!v11)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
  }
  _Unwind_Resume(a1);
}

void quasar::LatticeFasterDecoder::~LatticeFasterDecoder(void **this)
{
  *this = &off_1E5D37998;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 79));
  if (*((char *)this + 631) < 0)
    operator delete(this[76]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)(this + 73), this[74]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(this[56]);
  quasar::Decoder::~Decoder(this);
}

{
  *this = &off_1E5D37998;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 79));
  if (*((char *)this + 631) < 0)
    operator delete(this[76]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)(this + 73), this[74]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(this[56]);
  quasar::Decoder::~Decoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlinePhoneDecoder::~OnlinePhoneDecoder(quasar::OnlinePhoneDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 1);
  if (v2 != -1)
  {
    v3 = *((_QWORD *)this + 3);
    do
    {
      v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      v2 = *v4;
    }
    while (v2 != -1);
  }
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = -1;
  kaldi::LatticeFasterOnlineDecoder::DeleteElems((uint64_t)this, v5);
  kaldi::LatticeFasterOnlineDecoder::~LatticeFasterOnlineDecoder(this);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<fst::SymbolTable> &,quasar::TextEncoding,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::SymbolTable> &,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADA3AE68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::SymbolTable> &,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>(_QWORD *a1, uint64_t *a2, int *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D43328;
  a1[1] = 0;
  std::allocator<quasar::QsrTextSymbolTable>::construct[abi:ne180100]<quasar::QsrTextSymbolTable,std::shared_ptr<fst::SymbolTable> &,quasar::TextEncoding>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1ADA3AECC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

double std::allocator<quasar::QsrTextSymbolTable>::construct[abi:ne180100]<quasar::QsrTextSymbolTable,std::shared_ptr<fst::SymbolTable> &,quasar::TextEncoding>(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  double result;
  unint64_t v10;
  unint64_t v11;
  int v12;

  v4 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *a4;
    result = 0.0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a2 + 96) = v4;
    *(_QWORD *)(a2 + 104) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *(_DWORD *)(a2 + 112) = v8;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v12 = *a4;
    result = 0.0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a2 + 96) = v4;
    *(_QWORD *)(a2 + 104) = 0;
    *(_DWORD *)(a2 + 112) = v12;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 120) = 0;
  }
  return result;
}

uint64_t *std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 != *result)
  {
    do
    {
      *(_QWORD *)(v4 - 16) = &unk_1E5D28970;
      v4 -= 16;
      v5 = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v4 + 8) = v5;
      ++*(_DWORD *)(v5 + 56);
      v3 -= 16;
    }
    while (v3 != v2);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D413A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D413A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void quasar::TextProc::GetOrthography(__int128 **a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  BOOL v8;
  size_t v9;
  std::string *v10;
  const std::string::value_type *v11;
  __int128 v12;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  std::string v16;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v5 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        if (*((_QWORD *)v5 + 1))
        {
LABEL_6:
          if (*((_BYTE *)v5 + 44))
            v8 = 0;
          else
            v8 = a2 == 0;
          if (v8)
          {
            if ((*((_BYTE *)v5 + 23) & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
            }
            else
            {
              v12 = *v5;
              v16.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
              *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v12;
            }
          }
          else
          {
            if (*((char *)v5 + 23) >= 0)
              v9 = *((unsigned __int8 *)v5 + 23);
            else
              v9 = *((_QWORD *)v5 + 1);
            std::string::basic_string[abi:ne180100]((uint64_t)&v16, v9 + 1);
            if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v10 = &v16;
            else
              v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
            if (v9)
            {
              if (*((char *)v5 + 23) >= 0)
                v11 = (const std::string::value_type *)v5;
              else
                v11 = *(const std::string::value_type **)v5;
              memmove(v10, v11, v9);
            }
            *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 32;
          }
          if (*((_BYTE *)v5 + 45))
          {
            std::operator+<char>();
          }
          else if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
          }
          else
          {
            __p = v16;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          std::string::append(a3, (const std::string::value_type *)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
          v4 = a1[1];
        }
      }
      else if (*((_BYTE *)v5 + 23))
      {
        goto LABEL_6;
      }
      v5 += 14;
    }
    while (v5 != v4);
  }
}

void sub_1ADA3B22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void quasar::TextProc::GetTokenizedPhraseChoiceList(uint64_t **a1@<X0>, unsigned int a2@<W1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  void **v10;
  uint64_t v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  _DWORD *v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *i;
  uint64_t *v21;
  _QWORD *v22;
  unsigned int v23;
  _QWORD **v24;
  _QWORD *v25;
  _QWORD **v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  unsigned int *v32;
  unint64_t v33;
  void **v34;
  unint64_t v35;
  void **v36;
  _DWORD *v37;
  unint64_t v38;
  unsigned int v39;
  const std::string::value_type *v40;
  std::string *v41;
  __int128 v42;
  void **v43;
  std::string::size_type v44;
  const quasar::Token *v45;
  std::string *v46;
  std::string *v47;
  void **v48;
  unint64_t v49;
  _BOOL4 v50;
  _QWORD *v51;
  _QWORD **v52;
  _QWORD *v53;
  _QWORD **v54;
  unsigned int v55;
  uint64_t *v56;
  int v57;
  uint64_t *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  void **v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  _DWORD *v66;
  _DWORD **v67;
  unint64_t v68;
  _QWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  int v78;
  std::string *j;
  std::string *v80;
  void **v81;
  _QWORD *v82;
  unsigned int v83;
  std::string v84;
  void *__p[2];
  int64_t v86;
  std::string *v87;
  std::string *v88;
  unint64_t v89;
  std::string v90;
  uint64_t **v91;
  _QWORD *v92;
  uint64_t v93;
  unsigned int *v94;
  char *v95;
  uint64_t v96;
  void ***v97;
  _QWORD *v98;
  uint64_t v99;
  void **v100[3];
  void **v101;
  void **v102;
  unint64_t v103;
  void **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v107 = 0;
  v108 = 0;
  v109 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v6 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100]<std::vector<std::vector<unsigned int>>&,std::vector<std::vector<std::vector<quasar::Token>>>&,0>(a4, &v107, (uint64_t ***)&v104);
  }
  else
  {
    v10 = 0;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    do
    {
      v11 = v6[1];
      if (*v6 == v11)
      {
        if (v6 == *a1)
        {
          std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100]<std::vector<std::vector<unsigned int>>&,std::vector<std::vector<std::vector<quasar::Token>>>&,0>(a4, &v107, (uint64_t ***)&v104);
          goto LABEL_134;
        }
      }
      else
      {
        if (a2 <= *(_DWORD *)(v11 - 192))
          a2 = *(_DWORD *)(v11 - 192);
        if ((unint64_t)v10 >= v103)
        {
          v10 = (void **)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v101, v6);
        }
        else
        {
          *v10 = 0;
          v10[1] = 0;
          v10[2] = 0;
          std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v10, *v6, v6[1], 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 5));
          v10 += 3;
        }
        v102 = v10;
        v5 = a1[1];
      }
      v6 += 3;
    }
    while (v6 != v5);
    memset(v100, 0, sizeof(v100));
    std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v100, (uint64_t *)v101, (uint64_t *)v10, 0xAAAAAAAAAAAAAAABLL * (v10 - v101));
    v13 = v101;
    v12 = v102;
    if (v101 == v102)
      goto LABEL_129;
    v14 = v101;
    do
    {
      *((_DWORD *)*v14 + 7) = 0;
      *((_DWORD *)v14[1] - 48) = a2;
      v14 += 3;
    }
    while (v14 != v12);
    if (v13 == v12)
    {
LABEL_129:
      v98 = 0;
      v99 = 0;
      v97 = (void ***)&v98;
LABEL_130:
      std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100]<std::vector<std::vector<unsigned int>>&,std::vector<std::vector<std::vector<quasar::Token>>>&,0>(a4, &v107, (uint64_t ***)&v104);
    }
    else
    {
      v15 = v13;
      do
      {
        v16 = *v15;
        v17 = v15[1];
        if (*v15 != v17)
        {
          v18 = 0;
          while (1)
          {
            v19 = v16[7];
            if (v18 > v19)
              break;
            v18 = v16[8];
            if (v19 > v18)
              break;
            v16 += 56;
            if (v16 == v17)
              goto LABEL_23;
          }
          std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100]<std::vector<std::vector<unsigned int>>&,std::vector<std::vector<std::vector<quasar::Token>>>&,0>(a4, &v107, (uint64_t ***)&v104);
          goto LABEL_133;
        }
LABEL_23:
        v15 += 3;
      }
      while (v15 != v12);
      v98 = 0;
      v99 = 0;
      v97 = (void ***)&v98;
      if (v13 == v12)
        goto LABEL_130;
      do
      {
        v95 = 0;
        v96 = 0;
        v94 = (unsigned int *)&v95;
        for (i = (unsigned int *)*v13; i != v13[1]; i += 56)
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v94, i + 8, i + 8);
        if (v13 == v101)
        {
          std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)&v97, v94, (unsigned int *)&v95);
        }
        else
        {
          v92 = 0;
          v93 = 0;
          v91 = &v92;
          v21 = (uint64_t *)v94;
          if (v94 == (unsigned int *)&v95)
          {
            v32 = (unsigned int *)&v92;
          }
          else
          {
            do
            {
              v22 = v98;
              if (v98)
              {
                v23 = *((_DWORD *)v21 + 7);
                v24 = &v98;
                do
                {
                  v25 = v22;
                  v26 = v24;
                  v27 = *((_DWORD *)v22 + 7);
                  v28 = v22 + 1;
                  if (v27 >= v23)
                  {
                    v28 = v25;
                    v24 = (_QWORD **)v25;
                  }
                  v22 = (_QWORD *)*v28;
                }
                while (v22);
                if (v24 != &v98)
                {
                  if (v27 < v23)
                    v25 = v26;
                  if (v23 >= *((_DWORD *)v25 + 7))
                    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v91, (unsigned int *)v21 + 7, (_DWORD *)v21 + 7);
                }
              }
              v29 = (uint64_t *)v21[1];
              if (v29)
              {
                do
                {
                  v30 = v29;
                  v29 = (uint64_t *)*v29;
                }
                while (v29);
              }
              else
              {
                do
                {
                  v30 = (uint64_t *)v21[2];
                  v31 = *v30 == (_QWORD)v21;
                  v21 = v30;
                }
                while (!v31);
              }
              v21 = v30;
            }
            while (v30 != (uint64_t *)&v95);
            v32 = (unsigned int *)v91;
          }
          std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)&v97, v32, (unsigned int *)&v92);
          std::__tree<int>::destroy((uint64_t)&v91, v92);
        }
        std::__tree<int>::destroy((uint64_t)&v94, v95);
        v13 += 3;
      }
      while (v13 != v102);
      if (!v99)
        goto LABEL_130;
      std::vector<std::vector<unsigned int>>::resize(&v107, 0xAAAAAAAAAAAAAAABLL * (v13 - v101));
      v33 = v99;
      std::vector<std::vector<std::vector<quasar::Token>>>::resize((uint64_t *)&v104, v99);
      v94 = 0;
      v95 = 0;
      v96 = 0;
      std::vector<std::set<std::string>>::resize((uint64_t *)&v94, v33);
      v82 = a4;
      v91 = 0;
      v92 = 0;
      v93 = 0;
      std::vector<std::map<std::string,unsigned int>>::resize((uint64_t *)&v91, v33);
      v34 = v101;
      if (v102 != v101)
      {
        v35 = 0;
        do
        {
          memset(&v90, 0, sizeof(v90));
          v87 = 0;
          v88 = 0;
          v89 = 0;
          v36 = &v34[3 * v35];
          v37 = *v36;
          if (v36[1] != *v36)
          {
            v38 = 0;
            v83 = 0;
            do
            {
              v39 = v37[56 * v38 + 8];
              std::operator+<char>();
              if (LOBYTE(v37[56 * v38 + 11]))
                v40 = " ";
              else
                v40 = "";
              v41 = std::string::append(&v84, v40);
              v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
              v86 = v41->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = v42;
              v41->__r_.__value_.__l.__size_ = 0;
              v41->__r_.__value_.__r.__words[2] = 0;
              v41->__r_.__value_.__r.__words[0] = 0;
              if (v86 >= 0)
                v43 = __p;
              else
                v43 = (void **)__p[0];
              if (v86 >= 0)
                v44 = HIBYTE(v86);
              else
                v44 = (std::string::size_type)__p[1];
              std::string::append(&v90, (const std::string::value_type *)v43, v44);
              if (SHIBYTE(v86) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v84.__r_.__value_.__l.__data_);
              v45 = (const quasar::Token *)((char *)v100[0][3 * v35] + 224 * v38);
              v46 = v88;
              if ((unint64_t)v88 >= v89)
              {
                v47 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v87, v45);
              }
              else
              {
                quasar::Token::Token(v88, v45);
                v47 = (std::string *)((char *)v46 + 224);
              }
              v88 = v47;
              ++v38;
              v48 = &v101[3 * v35];
              v37 = *v48;
              v49 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v48[1] - (_BYTE *)*v48) >> 5);
              v50 = v49 == v38 || v37[56 * v38 + 8] != v39;
              v51 = v98;
              if (v98)
              {
                v52 = &v98;
                do
                {
                  v53 = v51;
                  v54 = v52;
                  v55 = *((_DWORD *)v51 + 7);
                  if (v55 >= v39)
                    v52 = (_QWORD **)v51;
                  else
                    ++v51;
                  v51 = (_QWORD *)*v51;
                }
                while (v51);
                if (v52 != &v98)
                {
                  if (v55 < v39)
                    v53 = v54;
                  if (v39 < *((_DWORD *)v53 + 7))
                    v50 = 0;
                  if (v50)
                  {
                    if (0xAAAAAAAAAAAAAAABLL * ((v95 - (char *)v94) >> 3) <= v83)
                      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                    v56 = (uint64_t *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v94[6 * v83], (const void **)&v90.__r_.__value_.__l.__data_);
                    if (0xAAAAAAAAAAAAAAABLL * ((v95 - (char *)v94) >> 3) <= v83)
                      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                    if (&v94[6 * v83 + 2] == (unsigned int *)v56)
                    {
                      if (0xAAAAAAAAAAAAAAABLL * ((v105 - (uint64_t)v104) >> 3) <= v83
                        || ((v58 = (uint64_t *)&v104[3 * v83], v59 = v58 + 1, v60 = v58[1], v60 >= v58[2])
                          ? (v61 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v58, (uint64_t *)&v87)): (std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v58, (uint64_t *)&v87), v61 = v60 + 24), *v59 = v61, 0xAAAAAAAAAAAAAAABLL * ((v105 - (uint64_t)v104) >> 3) <= v83))
                      {
                        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t **)v92 - v91) <= v83)
LABEL_136:
                        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                      v62 = &v104[3 * v83];
                      v64 = *v62;
                      v63 = v62[1];
                      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
                      v57 = -1 - 1431655765 * ((unint64_t)(v63 - v64) >> 3);
                      *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v91[3 * v83], (const void **)&v90.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v84)+ 14) = v57;
                      if (0xAAAAAAAAAAAAAAABLL * ((v95 - (char *)v94) >> 3) <= v83)
                        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v94[6 * v83], (const void **)&v90.__r_.__value_.__l.__data_, (uint64_t)&v90);
                    }
                    else
                    {
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t **)v92 - v91) <= v83)
                        goto LABEL_136;
                      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
                      v57 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v91[3 * v83], (const void **)&v90.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v84)+ 14);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * ((v108 - v107) >> 3) <= v35)
                      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                    v65 = v107 + 24 * v35;
                    v67 = (_DWORD **)(v65 + 8);
                    v66 = *(_DWORD **)(v65 + 8);
                    v69 = (_QWORD *)(v65 + 16);
                    v68 = *(_QWORD *)(v65 + 16);
                    if ((unint64_t)v66 >= v68)
                    {
                      v71 = *(_DWORD **)v65;
                      v72 = ((uint64_t)v66 - *(_QWORD *)v65) >> 2;
                      v73 = v72 + 1;
                      if ((unint64_t)(v72 + 1) >> 62)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v74 = v68 - (_QWORD)v71;
                      if (v74 >> 1 > v73)
                        v73 = v74 >> 1;
                      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
                        v75 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v75 = v73;
                      if (v75)
                      {
                        v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v69, v75);
                        v66 = *v67;
                        v71 = *(_DWORD **)v65;
                      }
                      else
                      {
                        v76 = 0;
                      }
                      v77 = &v76[4 * v72];
                      *(_DWORD *)v77 = v57;
                      v70 = v77 + 4;
                      while (v66 != v71)
                      {
                        v78 = *--v66;
                        *((_DWORD *)v77 - 1) = v78;
                        v77 -= 4;
                      }
                      *(_QWORD *)v65 = v77;
                      *v67 = v70;
                      *v69 = &v76[4 * v75];
                      if (v71)
                        operator delete(v71);
                    }
                    else
                    {
                      *v66 = v57;
                      v70 = v66 + 1;
                    }
                    *v67 = v70;
                    MEMORY[0x1AF44C914](&v90, "");
                    v80 = v87;
                    for (j = v88; j != v80; quasar::Token::~Token((void **)&j[-10].__r_.__value_.__r.__words[2]))
                      ;
                    v88 = v80;
                    ++v83;
                    v81 = &v101[3 * v35];
                    v37 = *v81;
                    v49 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v81[1] - (_BYTE *)*v81) >> 5);
                  }
                }
              }
            }
            while (v49 > v38);
          }
          __p[0] = &v87;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v90.__r_.__value_.__l.__data_);
          ++v35;
          v34 = v101;
        }
        while (0xAAAAAAAAAAAAAAABLL * (v102 - v101) > v35);
      }
      if ((a3 & 1) != 0)
        quasar::TextProc::RepairConfidence((uint64_t *)&v104);
      std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100]<std::vector<std::vector<unsigned int>>&,std::vector<std::vector<std::vector<quasar::Token>>>&,0>(v82, &v107, (uint64_t ***)&v104);
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
      std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
      v91 = (uint64_t **)&v94;
      std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
    }
    std::__tree<int>::destroy((uint64_t)&v97, v98);
LABEL_133:
    v97 = v100;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
LABEL_134:
    v100[0] = (void **)&v101;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v100);
  }
  v101 = (void **)&v104;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v101);
  v104 = (void **)&v107;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v104);
}

void sub_1ADA3BC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char **__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t *a39,_QWORD *a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  __p = &a33;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a33 = &a36;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  std::__tree<int>::destroy((uint64_t)&a39, a40);
  a39 = &a42;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  a42 = v42 - 168;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  *(_QWORD *)(v42 - 168) = v42 - 144;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 168));
  *(_QWORD *)(v42 - 144) = v42 - 120;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 144));
  _Unwind_Resume(a1);
}

void std::vector<std::vector<unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::vector<quasar::Token>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<quasar::Token>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::set<std::string>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::set<std::string>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      do
      {
        v8 = v3 - 24;
        std::__tree<std::string>::destroy(v3 - 24, *(char **)(v3 - 16));
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::map<std::string,unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::map<std::string,unsigned int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      do
      {
        v8 = v3 - 24;
        std::__tree<std::string>::destroy(v3 - 24, *(char **)(v3 - 16));
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void quasar::TextProc::RepairConfidence(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *p_p;
  uint64_t v34;
  unint64_t v36;
  uint64_t **v37;
  const char *v38;
  uint64_t v39;
  void *__p;
  uint64_t v41;
  unsigned __int8 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;

  v2 = *a1;
  v1 = a1[1];
  if (v1 == *a1)
    return;
  v3 = 0;
  do
  {
    v4 = v2 + 24 * v3;
    v6 = *(_QWORD *)(v4 + 8);
    v5 = (_QWORD *)(v4 + 8);
    v37 = (uint64_t **)(v2 + 24 * v3);
    v7 = *v37;
    if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)*v37) >> 3) < 2)
      goto LABEL_55;
    v8 = *v7;
    v9 = v7[1];
    v36 = v3;
    v10 = 0;
    if (*v7 != v9)
    {
      do
      {
        v10 = (uint64_t)(float)(*(float *)(v8 + 40) + (float)v10);
        v8 += 224;
      }
      while (v8 != v9);
    }
    v11 = 0;
    v12 = 1;
    v13 = *v37;
    do
    {
      v14 = &v13[3 * v12];
      v15 = v14[1];
      if (*v14 == v15)
      {
        v16 = 0;
      }
      else
      {
        v16 = 0;
        v17 = *v14;
        do
        {
          v16 = (uint64_t)(float)(*(float *)(v17 + 40) + (float)v16);
          v17 += 224;
        }
        while (v17 != v15);
      }
      v18 = 0x6DB6DB6DB6DB6DB7 * ((v15 - *v14) >> 5) * v10;
      v19 = 0x6DB6DB6DB6DB6DB7 * ((v7[1] - *v7) >> 5) * v16;
      if (v19)
        v20 = v18 < v19;
      else
        v20 = 0;
      if (v20)
      {
        v21 = quasar::gLogLevel;
        if ((v11 & 1) == 0)
        {
          if (quasar::gLogLevel < 5)
            goto LABEL_39;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v49 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Changed confidence for slot=", 28);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
          if (quasar::gLogLevel < 5)
          {
LABEL_39:
            v29 = *v14;
            v30 = v14[1];
            while (v29 != v30)
            {
              *(float *)(v29 + 40) = (float)(v18 * (uint64_t)*(float *)(v29 + 40) / v19);
              v29 += 224;
            }
            if (quasar::gLogLevel <= 4)
            {
              v11 = 1;
            }
            else
            {
              v58 = 0u;
              v59 = 0u;
              v56 = 0u;
              v57 = 0u;
              v54 = 0u;
              v55 = 0u;
              v52 = 0u;
              v53 = 0u;
              v50 = 0u;
              v51 = 0u;
              v49 = 0u;
              v47 = 0u;
              v48 = 0u;
              v45 = 0u;
              v46 = 0u;
              v43 = 0u;
              v44 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"phrase=", 7);
              v31 = (_QWORD *)std::ostream::operator<<();
              v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" new: ", 6);
              v38 = ",";
              v39 = 1;
              quasar::join<std::vector<quasar::Token>>(v14, (uint64_t *)&v38);
              if ((v42 & 0x80u) == 0)
                p_p = &__p;
              else
                p_p = __p;
              if ((v42 & 0x80u) == 0)
                v34 = v42;
              else
                v34 = v41;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)p_p, v34);
              if ((char)v42 < 0)
                operator delete(__p);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
              v11 = 1;
            }
            goto LABEL_53;
          }
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v49 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"1best: ", 7);
          v38 = ",";
          v39 = 1;
          quasar::join<std::vector<quasar::Token>>(v7, (uint64_t *)&v38);
          if ((v42 & 0x80u) == 0)
            v27 = &__p;
          else
            v27 = __p;
          if ((v42 & 0x80u) == 0)
            v28 = v42;
          else
            v28 = v41;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
          if ((char)v42 < 0)
            operator delete(__p);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
          v21 = quasar::gLogLevel;
        }
        if (v21 >= 5)
        {
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v49 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"phrase=", 7);
          v22 = (_QWORD *)std::ostream::operator<<();
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" orig: ", 7);
          v38 = ",";
          v39 = 1;
          quasar::join<std::vector<quasar::Token>>(v14, (uint64_t *)&v38);
          if ((v42 & 0x80u) == 0)
            v24 = &__p;
          else
            v24 = __p;
          if ((v42 & 0x80u) == 0)
            v25 = v42;
          else
            v25 = v41;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
          if ((char)v42 < 0)
            operator delete(__p);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
        }
        goto LABEL_39;
      }
LABEL_53:
      ++v12;
      v13 = *v37;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v5 - (_QWORD)*v37) >> 3) > v12);
    v3 = v36;
    v2 = *a1;
    v1 = a1[1];
LABEL_55:
    ++v3;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((v1 - v2) >> 3) > v3);
}

void sub_1ADA3C490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
    operator delete(__p);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a20);
  _Unwind_Resume(a1);
}

uint64_t quasar::join<std::vector<quasar::Token>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::Token>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADA3C5A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::TextProc::GranularizedTokenPhraseChoiceList(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  const quasar::Token *v26;
  const quasar::Token *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  _QWORD *v42;
  unint64_t i;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD **v49;
  unint64_t v50;
  _QWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  const quasar::Token *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  unsigned __int8 *v105;
  unsigned __int8 **v106;
  uint64_t v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  int v110;
  unsigned __int8 *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _DWORD *v115;
  _DWORD **v116;
  unint64_t v117;
  _QWORD *v118;
  _DWORD *v119;
  unint64_t v120;
  int v121;
  _DWORD *v122;
  _DWORD **v123;
  unint64_t v124;
  _QWORD *v125;
  _DWORD *v126;
  _DWORD *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  _DWORD *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  int v140;
  _QWORD *v141;
  uint64_t v142;
  char *v143;
  int v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t *v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t *v162;
  _QWORD *v163;
  uint64_t *v164;
  char *__p;
  char *v166;
  char *v167;
  unint64_t v168;
  __int128 v169;
  __int128 v170;
  int v171;
  char **v172;
  char v173;
  char *v174;
  uint64_t v175;
  char *v176;
  _BYTE v177[32];
  __int128 v178;
  void *v179[2];
  __int128 v180;
  __int128 v181;
  void *v182[2];
  __int128 v183;
  __int128 v184;
  void *v185[2];
  __int128 v186;
  void *v187[2];
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;

  v2 = a1;
  v193 = *MEMORY[0x1E0C80C00];
  if (a1[3] == a1[4] || (v4 = *a1, v5 = a1[1], *a1 == v5))
  {
    std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100]((_QWORD *)a2, (uint64_t)a1);
  }
  else
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    std::vector<std::vector<unsigned int>>::resize((uint64_t *)a2, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3));
    v6 = v2[3];
    v157 = (uint64_t *)a2;
    if (v2[4] != v6)
    {
      v7 = 0;
      v155 = (uint64_t *)(a2 + 24);
      v154 = v2;
      do
      {
        __p = 0;
        v166 = 0;
        v167 = 0;
        v8 = v2[1];
        v9 = *v2;
        do
        {
          memset(v177, 0, 24);
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v177, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
          v10 = *(_QWORD *)v177;
          v11 = v166;
          if (v166 >= v167)
          {
            v13 = __p;
            v14 = (v166 - __p) >> 2;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v16 = v167 - __p;
            if ((v167 - __p) >> 1 > v15)
              v15 = v16 >> 1;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
              v17 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
            {
              v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v167, v17);
              v13 = __p;
              v11 = v166;
            }
            else
            {
              v18 = 0;
            }
            v19 = &v18[4 * v14];
            *(_DWORD *)v19 = *(_DWORD *)(v10 + 4 * v7);
            v12 = v19 + 4;
            while (v11 != v13)
            {
              v20 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            __p = v19;
            v167 = &v18[4 * v17];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *(_DWORD *)v166 = *(_DWORD *)(*(_QWORD *)v177 + 4 * v7);
            v12 = v166 + 4;
          }
          v166 = v12;
          if (*(_QWORD *)v177)
          {
            *(_QWORD *)&v177[8] = *(_QWORD *)v177;
            operator delete(*(void **)v177);
          }
          v9 += 24;
        }
        while (v9 != v8);
        if (*(_DWORD *)__p)
        {
          v191 = 0u;
          v192 = 0u;
          v189 = 0u;
          v190 = 0u;
          *(_OWORD *)v187 = 0u;
          v188 = 0u;
          *(_OWORD *)v185 = 0u;
          v186 = 0u;
          v183 = 0u;
          v184 = 0u;
          v181 = 0u;
          *(_OWORD *)v182 = 0u;
          *(_OWORD *)v179 = 0u;
          v180 = 0u;
          v178 = 0u;
          memset(v177, 0, sizeof(v177));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v177);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)"Unsupported n-best index configuration", 38);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v177);
        }
        v156 = v7;
        v21 = (_QWORD *)(v6 + 24 * v7);
        v22 = (_QWORD *)v21[1];
        v161 = v21;
        v163 = v21 + 1;
        v23 = (uint64_t *)*v21;
        v24 = *(_QWORD *)(a2 + 32);
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v22 - *v21) >> 3) > 1)
        {
          v159 = *v155;
          v27 = (const quasar::Token *)*v23;
          v26 = (const quasar::Token *)v23[1];
          if ((const quasar::Token *)*v23 == v26)
          {
            v42 = (_QWORD *)*v21;
          }
          else
          {
            do
            {
              quasar::Token::Token((std::string *)v177, v27);
              v174 = 0;
              v175 = 0;
              v176 = 0;
              v172 = &v174;
              v173 = 0;
              v174 = (char *)operator new(0xE0uLL);
              v175 = (uint64_t)v174;
              v176 = v174 + 224;
              v175 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>((uint64_t)&v176, (uint64_t)v177, (uint64_t)&v190, (uint64_t)v174);
              *(_QWORD *)&v170 = 0;
              v169 = 0uLL;
              v172 = (char **)&v169;
              v173 = 0;
              *(_QWORD *)&v169 = operator new(0x18uLL);
              *((_QWORD *)&v169 + 1) = v169;
              *(_QWORD *)&v170 = v169 + 24;
              *((_QWORD *)&v169 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v170, (uint64_t *)&v174, (uint64_t *)v177, (_QWORD *)v169);
              v172 = &v174;
              std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
              if (SBYTE7(v188) < 0)
                operator delete(v187[0]);
              if (SBYTE7(v186) < 0)
                operator delete(v185[0]);
              v172 = (char **)&v183 + 1;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
              if (SBYTE7(v183) < 0)
                operator delete(v182[0]);
              v172 = (char **)&v180 + 1;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
              if (SBYTE7(v180) < 0)
                operator delete(v179[0]);
              if ((v177[23] & 0x80000000) != 0)
                operator delete(*(void **)v177);
              v28 = *(_QWORD *)(a2 + 32);
              if (v28 >= *(_QWORD *)(a2 + 40))
              {
                v29 = std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(v155, (uint64_t **)&v169);
              }
              else
              {
                std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>((uint64_t)v155, (uint64_t **)&v169);
                v29 = v28 + 24;
              }
              *(_QWORD *)(a2 + 32) = v29;
              v30 = *(_QWORD *)a2;
              if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              v31 = *(_QWORD *)(v30 + 16);
              v32 = *(_DWORD **)(v30 + 8);
              if ((unint64_t)v32 >= v31)
              {
                v34 = *(_DWORD **)v30;
                v35 = ((uint64_t)v32 - *(_QWORD *)v30) >> 2;
                v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v37 = v31 - (_QWORD)v34;
                if (v37 >> 1 > v36)
                  v36 = v37 >> 1;
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                  v38 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v38 = v36;
                if (v38)
                {
                  v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v30 + 16, v38);
                  v34 = *(_DWORD **)v30;
                  v32 = *(_DWORD **)(v30 + 8);
                }
                else
                {
                  v39 = 0;
                }
                v40 = &v39[4 * v35];
                *(_DWORD *)v40 = 0;
                v33 = v40 + 4;
                while (v32 != v34)
                {
                  v41 = *--v32;
                  *((_DWORD *)v40 - 1) = v41;
                  v40 -= 4;
                }
                *(_QWORD *)v30 = v40;
                *(_QWORD *)(v30 + 8) = v33;
                *(_QWORD *)(v30 + 16) = &v39[4 * v38];
                if (v34)
                  operator delete(v34);
              }
              else
              {
                *v32 = 0;
                v33 = v32 + 1;
              }
              *(_QWORD *)(v30 + 8) = v33;
              *(_QWORD *)v177 = &v169;
              std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
              v27 = (const quasar::Token *)((char *)v27 + 224);
            }
            while (v27 != v26);
            v42 = (_QWORD *)*v161;
            v22 = (_QWORD *)*v163;
          }
          v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v159) >> 3);
          v62 = v42 + 3;
          while (v62 != v22)
          {
            v63 = v62;
            v169 = 0u;
            v170 = 0u;
            v171 = 1065353216;
            v64 = v42[3];
            if (v42[4] != v64)
            {
              v65 = 0;
              do
              {
                v168 = 0;
                if (!v65 || (v66 = *v23, v67 = v23[1], *v23 == v67))
                {
                  v69 = 0;
                }
                else
                {
                  v68 = 0;
                  v69 = 0;
                  v70 = *(_DWORD *)(*v63 + 224 * v65 + 28);
                  v71 = -1;
                  do
                  {
                    v72 = *(_DWORD *)(v66 + 28);
                    if (v70 <= v72)
                      v73 = *(_DWORD *)(v66 + 28);
                    else
                      v73 = *(_DWORD *)(*v63 + 224 * v65 + 28);
                    if (v72 >= v70)
                      v74 = *(_DWORD *)(*v63 + 224 * v65 + 28);
                    else
                      v74 = *(_DWORD *)(v66 + 28);
                    v75 = v73 - v74;
                    if (v75 >= v71)
                      v76 = v69;
                    else
                      v76 = v68;
                    if (v75 >= v71)
                      v75 = v71;
                    if (v72)
                    {
                      v69 = v76;
                      v71 = v75;
                    }
                    ++v68;
                    v66 += 224;
                  }
                  while (v66 != v67);
                }
                v168 = v69;
                v77 = v69 + v61;
                v78 = *(_QWORD *)(a2 + 24);
                if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 32) - v78) >> 3) <= v69 + v61)
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                v79 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(&v169, &v168);
                v80 = (const quasar::Token *)(v64 + 224 * v65);
                if (v79)
                {
                  v81 = *(_QWORD *)(v78 + 24 * v77 + 8);
                  v82 = *(_QWORD *)(v81 - 16);
                  if (v82 >= *(_QWORD *)(v81 - 8))
                  {
                    v83 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)(v81 - 24), v80);
                  }
                  else
                  {
                    quasar::Token::Token(*(std::string **)(v81 - 16), v80);
                    v83 = v82 + 224;
                    *(_QWORD *)(v81 - 16) = v82 + 224;
                  }
                  *(_QWORD *)(v81 - 16) = v83;
                }
                else
                {
                  quasar::Token::Token((std::string *)v177, v80);
                  v174 = 0;
                  v175 = 0;
                  v176 = 0;
                  v172 = &v174;
                  v173 = 0;
                  v174 = (char *)operator new(0xE0uLL);
                  v175 = (uint64_t)v174;
                  v176 = v174 + 224;
                  v175 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>((uint64_t)&v176, (uint64_t)v177, (uint64_t)&v190, (uint64_t)v174);
                  std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100]((uint64_t *)(v78 + 24 * v77), (uint64_t)&v174);
                  v172 = &v174;
                  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
                  if (SBYTE7(v188) < 0)
                    operator delete(v187[0]);
                  if (SBYTE7(v186) < 0)
                    operator delete(v185[0]);
                  v172 = (char **)&v183 + 1;
                  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
                  if (SBYTE7(v183) < 0)
                    operator delete(v182[0]);
                  v172 = (char **)&v180 + 1;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
                  if (SBYTE7(v180) < 0)
                    operator delete(v179[0]);
                  if ((v177[23] & 0x80000000) != 0)
                    operator delete(*(void **)v177);
                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v169, &v168, &v168);
                }
                ++v65;
                v64 = *v63;
              }
              while (v65 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v42[4] - *v63) >> 5));
            }
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v169);
            v62 = v63 + 3;
            v22 = (_QWORD *)*v163;
            v42 = v63;
          }
          v84 = *(_QWORD *)(a2 + 24) + 24 * v61;
          for (i = v156; v84 != *(_QWORD *)(a2 + 32); v84 += 24)
          {
            v85 = *(uint64_t **)v84;
            v169 = 0uLL;
            *(_QWORD *)&v170 = 0;
            v86 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v169, v85);
            v87 = *(uint64_t **)v84;
            v88 = *(_QWORD *)a2;
            v89 = *(_QWORD *)(a2 + 8);
            *((_QWORD *)&v169 + 1) = v86;
            v90 = 0xAAAAAAAAAAAAAAABLL * ((v89 - v88) >> 3);
            v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v84 + 8) - (_QWORD)v87) >> 3);
            if (v90 < v91)
            {
              v191 = 0u;
              v192 = 0u;
              v189 = 0u;
              v190 = 0u;
              *(_OWORD *)v187 = 0u;
              v188 = 0u;
              *(_OWORD *)v185 = 0u;
              v186 = 0u;
              v183 = 0u;
              v184 = 0u;
              v181 = 0u;
              *(_OWORD *)v182 = 0u;
              *(_OWORD *)v179 = 0u;
              v180 = 0u;
              v178 = 0u;
              memset(v177, 0, sizeof(v177));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v177);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)"n-best output size is wrong", 27);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v177);
            }
            if (v91 >= 2)
            {
              v92 = 1;
              v158 = v84;
              do
              {
                v93 = &v87[3 * v92];
                v95 = (uint64_t *)*((_QWORD *)&v169 + 1);
                v94 = v169;
                v162 = v93;
                v164 = v87;
                if ((_QWORD)v169 == *((_QWORD *)&v169 + 1))
                {
                  v101 = (uint64_t *)v169;
                }
                else
                {
                  v96 = v87[3 * v92 + 1];
                  v97 = *v93;
                  v98 = (v96 - *v93) >> 5;
                  v99 = 0x6DB6DB6DB6DB6DB7 * v98;
                  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * v98) <= 1)
                    v100 = 1;
                  else
                    v100 = 0x6DB6DB6DB6DB6DB7 * v98;
                  v160 = v169;
                  v101 = (uint64_t *)v169;
                  while (1)
                  {
                    v102 = *v101;
                    if (0x6DB6DB6DB6DB6DB7 * ((v101[1] - *v101) >> 5) == v99)
                    {
                      if (v96 == v97)
                        break;
                      v103 = 0;
                      v104 = 0;
                      do
                      {
                        v105 = (unsigned __int8 *)(v102 + 224 * v104);
                        v106 = (unsigned __int8 **)(v97 + 224 * v104);
                        v107 = v105[23];
                        if ((v107 & 0x80u) == 0)
                          v108 = (unsigned __int8 *)v105[23];
                        else
                          v108 = (unsigned __int8 *)*((_QWORD *)v105 + 1);
                        v109 = (unsigned __int8 *)*((unsigned __int8 *)v106 + 23);
                        v110 = (char)v109;
                        if ((char)v109 < 0)
                          v109 = v106[1];
                        if (v108 != v109)
                          break;
                        if (v110 >= 0)
                          v111 = (unsigned __int8 *)(v97 + 224 * v104);
                        else
                          v111 = *v106;
                        if ((v107 & 0x80) != 0)
                        {
                          if (memcmp(*(const void **)v105, v111, *((_QWORD *)v105 + 1)))
                            break;
                        }
                        else if (v105[23])
                        {
                          while (*v105 == *v111)
                          {
                            ++v105;
                            ++v111;
                            if (!--v107)
                              goto LABEL_154;
                          }
                          break;
                        }
LABEL_154:
                        v103 = ++v104 >= v99;
                      }
                      while (v104 != v100);
                      if (v103)
                        break;
                    }
                    v101 += 3;
                    if (v101 == v95)
                    {
                      a2 = (uint64_t)v157;
                      v84 = v158;
                      v112 = *v157;
                      v113 = v157[1];
                      v94 = v160;
                      goto LABEL_164;
                    }
                  }
                  a2 = (uint64_t)v157;
                  v84 = v158;
                  v94 = v160;
                }
                v112 = *(_QWORD *)a2;
                v113 = *(_QWORD *)(a2 + 8);
                if (v101 == v95)
                {
LABEL_164:
                  if (0xAAAAAAAAAAAAAAABLL * ((v113 - v112) >> 3) <= v92)
LABEL_224:
                    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                  v120 = v112 + 24 * v92;
                  v121 = -1431655765 * (((unint64_t)v95 - v94) >> 3);
                  v123 = (_DWORD **)(v120 + 8);
                  v122 = *(_DWORD **)(v120 + 8);
                  v125 = (_QWORD *)(v120 + 16);
                  v124 = *(_QWORD *)(v120 + 16);
                  if ((unint64_t)v122 >= v124)
                  {
                    v127 = *(_DWORD **)v120;
                    v128 = ((uint64_t)v122 - *(_QWORD *)v120) >> 2;
                    v129 = v128 + 1;
                    if ((unint64_t)(v128 + 1) >> 62)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v130 = v124 - (_QWORD)v127;
                    if (v130 >> 1 > v129)
                      v129 = v130 >> 1;
                    if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL)
                      v131 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v131 = v129;
                    if (v131)
                    {
                      v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v125, v131);
                      v122 = *v123;
                      v127 = *(_DWORD **)v120;
                    }
                    else
                    {
                      v132 = 0;
                    }
                    v139 = &v132[4 * v128];
                    *(_DWORD *)v139 = v121;
                    v126 = v139 + 4;
                    while (v122 != v127)
                    {
                      v140 = *--v122;
                      *((_DWORD *)v139 - 1) = v140;
                      v139 -= 4;
                    }
                    *(_QWORD *)v120 = v139;
                    *v123 = v126;
                    *v125 = &v132[4 * v131];
                    if (v127)
                      operator delete(v127);
                  }
                  else
                  {
                    *v122 = v121;
                    v126 = v122 + 1;
                  }
                  *v123 = v126;
                  v141 = (_QWORD *)*((_QWORD *)&v169 + 1);
                  if (*((_QWORD *)&v169 + 1) >= (unint64_t)v170)
                  {
                    v142 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v169, v162);
                  }
                  else
                  {
                    **((_QWORD **)&v169 + 1) = 0;
                    v141[1] = 0;
                    v141[2] = 0;
                    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v141, *v162, v164[3 * v92 + 1], 0x6DB6DB6DB6DB6DB7 * ((v164[3 * v92 + 1] - *v162) >> 5));
                    v142 = (uint64_t)(v141 + 3);
                  }
                  *((_QWORD *)&v169 + 1) = v142;
                }
                else
                {
                  if (0xAAAAAAAAAAAAAAABLL * ((v113 - v112) >> 3) <= v92)
                    goto LABEL_224;
                  v114 = v112 + 24 * v92;
                  v116 = (_DWORD **)(v114 + 8);
                  v115 = *(_DWORD **)(v114 + 8);
                  v118 = (_QWORD *)(v114 + 16);
                  v117 = *(_QWORD *)(v114 + 16);
                  if ((unint64_t)v115 >= v117)
                  {
                    v133 = *(_DWORD **)v114;
                    v134 = ((uint64_t)v115 - *(_QWORD *)v114) >> 2;
                    v135 = v134 + 1;
                    if ((unint64_t)(v134 + 1) >> 62)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v136 = v117 - (_QWORD)v133;
                    if (v136 >> 1 > v135)
                      v135 = v136 >> 1;
                    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL)
                      v137 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v137 = v135;
                    if (v137)
                    {
                      v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v118, v137);
                      v115 = *v116;
                      v133 = *(_DWORD **)v114;
                    }
                    else
                    {
                      v138 = 0;
                    }
                    v143 = &v138[4 * v134];
                    *(_DWORD *)v143 = 0;
                    v119 = v143 + 4;
                    while (v115 != v133)
                    {
                      v144 = *--v115;
                      *((_DWORD *)v143 - 1) = v144;
                      v143 -= 4;
                    }
                    *(_QWORD *)v114 = v143;
                    *v116 = v119;
                    *v118 = &v138[4 * v137];
                    if (v133)
                      operator delete(v133);
                  }
                  else
                  {
                    *v115 = 0;
                    v119 = v115 + 1;
                  }
                  *v116 = v119;
                }
                ++v92;
                v87 = *(uint64_t **)v84;
              }
              while (v92 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v84 + 8) - *(_QWORD *)v84) >> 3));
            }
            i = v156;
            if ((__int128 *)v84 != &v169)
              std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v84, (uint64_t *)v169, *((uint64_t **)&v169 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v169 + 1) - v169) >> 3));
            *(_QWORD *)v177 = &v169;
            std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
          }
        }
        else
        {
          if (v24 >= *(_QWORD *)(a2 + 40))
          {
            v25 = std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(v155, (uint64_t **)v21);
          }
          else
          {
            std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>((uint64_t)v155, (uint64_t **)v21);
            v25 = v24 + 24;
          }
          i = v156;
          *(_QWORD *)(a2 + 32) = v25;
          v45 = __p;
          v44 = v12;
          if (v12 == __p)
            goto LABEL_205;
          v46 = 0;
          do
          {
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) <= v46)
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            v47 = *(_QWORD *)a2 + 24 * v46;
            v49 = (_DWORD **)(v47 + 8);
            v48 = *(_DWORD **)(v47 + 8);
            v51 = (_QWORD *)(v47 + 16);
            v50 = *(_QWORD *)(v47 + 16);
            if ((unint64_t)v48 >= v50)
            {
              v53 = *(_DWORD **)v47;
              v54 = ((uint64_t)v48 - *(_QWORD *)v47) >> 2;
              v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v56 = v50 - (_QWORD)v53;
              if (v56 >> 1 > v55)
                v55 = v56 >> 1;
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
                v57 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v57 = v55;
              if (v57)
              {
                v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v51, v57);
                v48 = *v49;
                v53 = *(_DWORD **)v47;
              }
              else
              {
                v58 = 0;
              }
              v59 = &v58[4 * v54];
              *(_DWORD *)v59 = *(_DWORD *)&v45[4 * v46];
              v52 = v59 + 4;
              while (v48 != v53)
              {
                v60 = *--v48;
                *((_DWORD *)v59 - 1) = v60;
                v59 -= 4;
              }
              *(_QWORD *)v47 = v59;
              *v49 = v52;
              *v51 = &v58[4 * v57];
              if (v53)
                operator delete(v53);
            }
            else
            {
              *v48 = *(_DWORD *)&v45[4 * v46];
              v52 = v48 + 1;
            }
            *v49 = v52;
            ++v46;
            v45 = __p;
          }
          while (v46 < (v166 - __p) >> 2);
        }
        v44 = __p;
LABEL_205:
        v2 = v154;
        if (v44)
          operator delete(v44);
        v7 = i + 1;
        v6 = v154[3];
      }
      while (v7 < 0xAAAAAAAAAAAAAAABLL * ((v154[4] - v6) >> 3));
    }
    memset(v177, 0, 24);
    std::vector<std::vector<unsigned int>>::__init_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(v177, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)a2);
    v145 = *(_QWORD **)&v177[8];
    v146 = *(_QWORD **)v177;
    if (*(_QWORD *)v177 != *(_QWORD *)&v177[8])
    {
      v147 = 0;
      v148 = *(uint64_t **)v177;
      do
      {
        v150 = *v148;
        v149 = v148[1];
        v148 += 3;
        v151 = (v149 - v150) >> 2;
        if (v147 <= v151)
          v147 = v151;
      }
      while (v148 != *(uint64_t **)&v177[8]);
      while (v146 != v145)
      {
        if (v147 == (uint64_t)(v146[1] - *v146) >> 2)
        {
          v152 = *(_QWORD *)(a2 + 8);
          if (v152 >= *(_QWORD *)(a2 + 16))
          {
            v153 = std::vector<std::vector<unsigned int>>::__push_back_slow_path<std::vector<unsigned int> const&>((uint64_t *)a2, (uint64_t)v146);
          }
          else
          {
            std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>(a2, (uint64_t)v146);
            v153 = v152 + 24;
          }
          *(_QWORD *)(a2 + 8) = v153;
        }
        v146 += 3;
      }
    }
    quasar::TextProc::RepairConfidence((uint64_t *)(a2 + 24));
    *(_QWORD *)&v169 = v177;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
  }
}

void sub_1ADA3D508(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADA3D658);
}

void sub_1ADA3D520()
{
  JUMPOUT(0x1ADA3D61CLL);
}

void sub_1ADA3D534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39)
{
  void **v39;

  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a34);
  a34 = (void **)&a36;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a34);
  quasar::Token::~Token(&a39);
  if (a25)
    operator delete(a25);
  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair(v39);
  _Unwind_Resume(a1);
}

void sub_1ADA3D584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  void **v40;

  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair(v40);
  _Unwind_Resume(a1);
}

void sub_1ADA3D5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  if (a25)
    operator delete(a25);
  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair(v25);
  _Unwind_Resume(a1);
}

void sub_1ADA3D5BC()
{
  JUMPOUT(0x1ADA3D61CLL);
}

void sub_1ADA3D5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v29 - 16) = v30;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a29);
  JUMPOUT(0x1ADA3D640);
}

void sub_1ADA3D5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39)
{
  a34 = (void **)&a36;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a34);
  quasar::Token::~Token(&a39);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a29);
  JUMPOUT(0x1ADA3D640);
}

void sub_1ADA3D618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39)
{
  void **v39;

  a39 = (void **)&a29;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a39);
  if (a25)
    operator delete(a25);
  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair(v39);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100]<std::vector<std::vector<unsigned int>>&,std::vector<std::vector<std::vector<quasar::Token>>>&,0>(_QWORD *a1, uint64_t *a2, uint64_t ***a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::vector<unsigned int>>::__init_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::vector<std::vector<quasar::Token>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(a1 + 3, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  return a1;
}

void sub_1ADA3D6DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::vector<quasar::Token>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(_QWORD *result, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADA3D758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t **v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADA3D820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

_QWORD *std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::vector<unsigned int>>::__init_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::vector<std::vector<quasar::Token>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(a1 + 3, *(uint64_t ***)(a2 + 24), *(uint64_t ***)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  return a1;
}

void sub_1ADA3D92C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>(uint64_t a1, uint64_t **a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1ADA3D998(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  v15 += 24;
  std::vector<std::vector<std::vector<quasar::Token>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<quasar::Token>>>::~__split_buffer(v14);
  return v12;
}

void sub_1ADA3DAAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<quasar::Token>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<unsigned int>>::__init_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADA3DB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADA3DBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__tree<unsigned int>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

void std::vector<std::vector<std::vector<quasar::Token>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::vector<quasar::Token>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<quasar::Token>>>::~__split_buffer(&v15);
  }
}

void sub_1ADA3DDE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<quasar::Token>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::set<std::string>>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  void **v23;

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 24 * a2;
      v14 = 24 * a2;
      v15 = (_QWORD *)(v7 + 8);
      do
      {
        *v15 = 0;
        v15[1] = 0;
        *(v15 - 1) = v15;
        v15 += 3;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      v13 = (uint64_t)*(result - 1);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v23 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v11);
    else
      v12 = 0;
    v19 = v12;
    v20 = &v12[24 * v8];
    v22 = &v12[24 * v11];
    v16 = &v20[24 * a2];
    v17 = 24 * a2;
    v18 = v20 + 8;
    do
    {
      *v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    v21 = v16;
    std::vector<std::set<std::string>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<std::set<std::string>>::~__split_buffer(&v19);
  }
  return result;
}

void sub_1ADA3DF40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::set<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::set<std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::set<std::string>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::set<std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<std::string>::destroy(i - 24, *(char **)(i - 16));
  }
}

void **std::vector<std::map<std::string,unsigned int>>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  void **v23;

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 24 * a2;
      v14 = 24 * a2;
      v15 = (_QWORD *)(v7 + 8);
      do
      {
        *v15 = 0;
        v15[1] = 0;
        *(v15 - 1) = v15;
        v15 += 3;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      v13 = (uint64_t)*(result - 1);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v23 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v11);
    else
      v12 = 0;
    v19 = v12;
    v20 = &v12[24 * v8];
    v22 = &v12[24 * v11];
    v16 = &v20[24 * a2];
    v17 = 24 * a2;
    v18 = v20 + 8;
    do
    {
      *v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    v21 = v16;
    std::vector<std::map<std::string,unsigned int>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<std::set<std::string>>::~__split_buffer(&v19);
  }
  return result;
}

void sub_1ADA3E2B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::set<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::map<std::string,unsigned int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,unsigned int>>,std::reverse_iterator<std::map<std::string,unsigned int>*>,std::reverse_iterator<std::map<std::string,unsigned int>*>,std::reverse_iterator<std::map<std::string,unsigned int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,unsigned int>>,std::reverse_iterator<std::map<std::string,unsigned int>*>,std::reverse_iterator<std::map<std::string,unsigned int>*>,std::reverse_iterator<std::map<std::string,unsigned int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,unsigned int>>,std::reverse_iterator<std::map<std::string,unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,unsigned int>>,std::reverse_iterator<std::map<std::string,unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *quasar::joinToStream<std::vector<quasar::Token>>(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      result = quasar::operator<<(v6, v3);
      v7 = 0;
      v3 += 224;
    }
    while (v3 != v4);
  }
  return result;
}

_QWORD *std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1ADA3E4E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::__push_back_slow_path<std::vector<unsigned int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADA3E5E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeRealignmentDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  _DWORD *v9;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  kaldi::WordBoundaryInfoNewOpts::Register((uint64_t)(this + 58), (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[56], a2, 16, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v13, "am-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Acoustic model (transition model) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 70), (uint64_t)__p, 1, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic likelihoods");
  v4 = this + 67;
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 67), (uint64_t)__p, 0, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoding beam");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)this + 540, (uint64_t)__p, 1, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "first-pass-lattice-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "First pass lattice beam");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 69), (uint64_t)__p, 1, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "lattice-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoding lattice beam");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)this + 548, (uint64_t)__p, 1, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "retry-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Fall-back decoding beam");
  v5 = this + 68;
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 68), (uint64_t)__p, 0, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "fst-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "HCP FST filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 73), (uint64_t)__p, 1, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "tree-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Tree file");
  v6 = (char *)(this + 76);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 76), (uint64_t)__p, 1, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "phone-map-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Phone mappings file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 79), (uint64_t)__p, 1, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "word-boundary-int-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word boundary file with format <integer-phone-id> [begin|end|singleton|internal|nonword]");
  v7 = (char *)(this + 82);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 82), (uint64_t)__p, 1, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "unpronounced-word-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing newline-separated list of words with no pronunciation.");
  v8 = (char *)(this + 85);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 85), (uint64_t)__p, 0, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "max-expand");
  std::string::basic_string[abi:ne180100]<0>(__p, "If >0, the max amount by which lattices will be expanded.");
  v9 = this + 88;
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)v9, (uint64_t)__p, 0, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  *v4 = 1065353216;
  *v9 = 0;
  *v5 = 0;
  MEMORY[0x1AF44C914](v6, "");
  MEMORY[0x1AF44C914](v7, "");
  return MEMORY[0x1AF44C914](v8, "");
}

void sub_1ADA3EBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeRealignmentDecoder::convertToOtherTransitionModel(kaldi::TransitionModel *a1@<X0>, kaldi::HmmTopology *a2@<X1>, void (***a3)(unsigned int (***)(_QWORD))@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *v25;
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  std::vector<unsigned int> __p;
  __int128 v38;
  void *v39[2];
  void *v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  float v56;
  int v57;
  float v58;

  if (((int (*)(_QWORD))**a3)(a3) > 1 && quasar::gLogLevel >= 5)
  {
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    v41 = 0u;
    v42 = 0u;
    *(_OWORD *)v39 = 0u;
    *(_OWORD *)v40 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Conversion of alignments in lattice is only supported for models with context width = 1, other models will result in alignments which do not properly consider cross-word contexts", 178);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v39);
  }
  v32 = a5;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 160))(a5);
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v38);
  if (v13 >= 1)
  {
    v14 = v13;
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v38 + 200))(v38);
      --v14;
    }
    while (v14);
  }
  v15 = v38;
  v16 = v32;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 176))(v15, v17);
  if (v13 < 1)
  {
LABEL_38:
    *(_OWORD *)a6 = v38;
    v38 = 0uLL;
  }
  else
  {
    v18 = 0;
    v31 = v13;
    while (1)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 64) + 8 * v18) + 48);
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 64) + 8 * v18) + 56) - v19;
      if (v20)
        break;
LABEL_25:
      v16 = v32;
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v32 + 32))(v39, v32, v18);
      v58 = *((float *)v39 + 1);
      LODWORD(__p.__begin_) = v39[0];
      v57 = 2139095040;
      v56 = INFINITY;
      if (*(float *)v39 != INFINITY || v58 != v56 || (v25 = v40[0], v40[0] != v39[1]))
      {
        memset(&__p, 0, sizeof(__p));
        v26 = kaldi::ConvertAlignment(a1, a2, a3, &v39[1], a4, &__p, 1, 1, 0);
        if ((v26 & 1) != 0)
        {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v39[1], (char *)__p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
          v27 = v38;
          v33 = v39[0];
          v35 = 0;
          v36 = 0;
          v34 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v34, v39[1], (uint64_t)v40[0], ((char *)v40[0] - (char *)v39[1]) >> 2);
          (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v27 + 184))(v27, v18, &v33);
          if (v34)
          {
            v35 = v34;
            operator delete(v34);
          }
        }
        else
        {
          *(_QWORD *)a6 = 0;
          *(_QWORD *)(a6 + 8) = 0;
        }
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        v25 = v39[1];
        if ((v26 & 1) == 0)
        {
          if (v39[1])
          {
            v40[0] = v39[1];
            operator delete(v39[1]);
          }
          goto LABEL_39;
        }
      }
      if (v25)
      {
        v40[0] = v25;
        operator delete(v25);
      }
      if (++v18 == v31)
        goto LABEL_38;
    }
    v21 = v20 / 48;
    if (v21 <= 1)
      v22 = 1;
    else
      v22 = v21;
    v23 = v19 + 24;
    while (1)
    {
      v39[0] = *(void **)(v23 - 24);
      v39[1] = *(void **)(v23 - 16);
      v40[1] = 0;
      *(_QWORD *)&v41 = 0;
      v40[0] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v40, *(const void **)(v23 - 8), *(_QWORD *)v23, (uint64_t)(*(_QWORD *)v23 - *(_QWORD *)(v23 - 8)) >> 2);
      DWORD2(v41) = *(_DWORD *)(v23 + 16);
      memset(&__p, 0, sizeof(__p));
      v24 = kaldi::ConvertAlignment(a1, a2, a3, v40, a4, &__p, 1, 1, 0);
      if ((v24 & 1) != 0)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v40, (char *)__p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
        (*(void (**)(_QWORD, uint64_t, void **))(*(_QWORD *)v38 + 208))(v38, v18, v39);
      }
      else
      {
        *(_QWORD *)a6 = 0;
        *(_QWORD *)(a6 + 8) = 0;
      }
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      if (v40[0])
      {
        v40[1] = v40[0];
        operator delete(v40[0]);
      }
      if ((v24 & 1) == 0)
        break;
      v23 += 48;
      if (!--v22)
        goto LABEL_25;
    }
  }
LABEL_39:
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1ADA3F070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,void *a24,uint64_t a25,uint64_t a26)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a23);
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeRealignmentDecoder::realignLattice(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v7;
  float v8;
  BOOL RawLattice;
  _QWORD *v10;
  char v11;
  char v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[192];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  _BYTE v40[40];
  _BYTE v41[32];

  v7 = 1;
  kaldi::DecodableMatrixScaledMapped::DecodableMatrixScaledMapped(v41, *(_QWORD *)(a1 + 712), a2, 1, *(float *)(a1 + 536));
  *(_QWORD *)((char *)&v39 + 4) = 0xC87FFFFFFFLL;
  HIDWORD(v39) = 0;
  *(_DWORD *)&v40[4] = 25;
  v40[8] = 1;
  *(_OWORD *)&v40[12] = xmmword_1AE140EC0;
  *(_QWORD *)&v40[28] = 0x2FAF0803A800000;
  *(_WORD *)&v40[36] = 257;
  v40[38] = 0;
  LODWORD(v39) = *(_DWORD *)(a1 + 540);
  *(_DWORD *)v40 = *(_DWORD *)(a1 + 548);
  kaldi::LatticeFasterDecoder::LatticeFasterDecoder(v34, a3, &v39);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v32);
  do
  {
    if (v7)
    {
      v8 = *(float *)&v39;
    }
    else
    {
      v8 = *(float *)(a1 + 544);
      *(float *)&v39 = v8;
      v38 = *(_QWORD *)&v40[32];
      v36 = *(_OWORD *)v40;
      v37 = *(_OWORD *)&v40[16];
      v35 = v39;
    }
    if (v8 <= 0.0
      || (kaldi::LatticeFasterDecoder::Decode((kaldi::LatticeFasterDecoder *)v34, (kaldi::DecodableInterface *)v41),
          kaldi::LatticeFasterOnlineDecoder::FinalRelativeCost((kaldi::LatticeFasterOnlineDecoder *)v34) == INFINITY))
    {
      RawLattice = 0;
      if (!v7)
        break;
    }
    else
    {
      RawLattice = kaldi::LatticeFasterDecoder::GetRawLattice((uint64_t)v34, (uint64_t)&v32, 1);
      if (!v7)
        break;
    }
    --v7;
  }
  while (!RawLattice);
  if (RawLattice)
  {
    fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v32);
    v10 = (_QWORD *)operator new();
    fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(v10);
    *a4 = v10;
    v11 = fst::DeterminizeLatticePhonePrunedWrapper(*(kaldi::TransitionModel **)(a1 + 712), &v32, (uint64_t)v10, 0x2FAF0803A800000, 257, *(float *)(a1 + 548));
    if (quasar::gLogLevel < 5)
      v12 = 1;
    else
      v12 = v11;
    if ((v12 & 1) == 0)
    {
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Determinization finished earlier than the beam", 46);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v15);
    }
  }
  else
  {
    if (quasar::gLogLevel >= 2)
    {
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Problem decoding utterance for re-alignment.", 44);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v15);
    }
    *a4 = 0;
  }
  v32 = &unk_1E5D25580;
  v13 = v33;
  if (v33)
  {
    v14 = *(_DWORD *)(v33 + 56) - 1;
    *(_DWORD *)(v33 + 56) = v14;
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  kaldi::LatticeFasterDecoder::~LatticeFasterDecoder((kaldi::LatticeFasterDecoder *)v34);
  kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped((kaldi::DecodableMatrixScaledMapped *)v41);
}

void sub_1ADA3F3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,char a46)
{
  uint64_t v46;
  uint64_t v48;
  int v49;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  a44 = &unk_1E5D25580;
  v48 = a45;
  if (a45)
  {
    v49 = *(_DWORD *)(a45 + 56) - 1;
    *(_DWORD *)(a45 + 56) = v49;
    if (!v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  }
  kaldi::LatticeFasterDecoder::~LatticeFasterDecoder((kaldi::LatticeFasterDecoder *)&a46);
  kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped((kaldi::DecodableMatrixScaledMapped *)(v46 - 96));
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeRealignmentDecoder::finishInit(quasar::OnlineLatticeRealignmentDecoder *this)
{
  const quasar::SystemConfig::Version *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string __p;
  __int128 v21[17];

  v2 = (quasar::OnlineLatticeRealignmentDecoder *)((char *)this + 32);
  quasar::SystemConfig::Version::Version(v21, 16, 1);
  if (quasar::SystemConfig::Version::operator>(v2, v21))
  {
    quasar::QsrTextSymbolTable::init(*((const std::string **)this + 56), v2, 0, *((unsigned __int8 *)this + 441), 1);
    v3 = quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 56), "<?>");
    if (v3 != -1)
    {
      v4 = v3;
      v5 = *((int *)this + 116);
      if ((_DWORD)v5 && v3 != v5 && quasar::gLogLevel >= 5)
      {
        memset(v21, 0, sizeof(v21));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Silence label is set to ", 24);
        v6 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" but does not match the auto-determined silence label ", 54);
        v7 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)". Will use latter.", 18);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v21);
      }
      *((_DWORD *)this + 116) = v4;
    }
  }
  if (*((char *)this + 655) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 79), *((_QWORD *)this + 80));
  else
    __p = *(std::string *)((char *)this + 632);
  kaldi::ReadPhoneMap((uint64_t)&__p, (std::vector<int> *)((char *)this + 496));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::ModelLoader::readTransitionModel(*((_QWORD *)this + 46), (unsigned __int8 *)this + 560, 1, (uint64_t *)v21);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 712, v21);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v21[0] + 1);
  if (*((_QWORD *)&v21[0] + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v21[0] + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  quasar::ModelLoader::readWordBoundaryInfo(*((_QWORD **)this + 46), (unsigned int *)this + 116, (uint64_t)this + 656, (uint64_t)this + 680, (uint64_t *)v21);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 480, v21);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v21[0] + 1);
  if (*((_QWORD *)&v21[0] + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v21[0] + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD, char *))(**((_QWORD **)this + 46) + 16))(v21, *((_QWORD *)this + 46), (char *)this + 584);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 728, v21);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v21[0] + 1);
  if (*((_QWORD *)&v21[0] + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v21[0] + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  quasar::ModelLoader::readContextDependency(*((_QWORD *)this + 46), (unsigned __int8 *)this + 608, (uint64_t *)v21);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 520, v21);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v21[0] + 1);
  if (*((_QWORD *)&v21[0] + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v21[0] + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1ADA3F768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a16);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeRealignmentDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  kaldi::TransitionModel *v12;
  uint64_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  float v26;
  float v27;
  kaldi::TransitionModel *v28;
  kaldi::HmmTopology *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  int32x2_t v63;
  __int128 v64;
  __int128 v65;
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void *v84;
  std::__shared_weak_count *v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t (**v90)(void **);
  uint64_t v91;
  void *v92;
  uint64_t v93;

  v67 = 0uLL;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 488, &v67);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(_QWORD *)(*(_QWORD *)(*a3 + 152) + 8);
  ++*(_DWORD *)(v11 + 56);
  v92 = &unk_1E5D28AB0;
  v93 = v11;
  v12 = (kaldi::TransitionModel *)quasar::PTree::begin(*(quasar::PTree **)(a2 + 32));
  kaldi::ConvertCompactLatticeToPhones(v12, &v92, 0);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v90);
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v92, (uint64_t)&v90, 1);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v88);
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,fst::TropicalWeightTpl<float>>((uint64_t)&v90, (uint64_t)&v88);
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(&v88);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v86);
  v13 = *(_QWORD *)(a1 + 728);
  LOBYTE(v67) = 1;
  DWORD1(v67) = 0;
  fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v13, (uint64_t)&v88, (uint64_t)&v86, (uint64_t)&v67);
  fst::RemoveEpsLocal<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v86);
  fst::MinimizeEncoded<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(&v86, 0.00097656);
  fst::Push<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t *)&v86, 0, 0, 1.0);
  v14 = *(const void **)(a2 + 16);
  if (v14)
  {
    if (v15)
    {
      v16 = *(std::__shared_weak_count **)(a2 + 24);
      v84 = v15;
      v85 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      v65 = 0u;
      v64 = 0u;
      v63 = (int32x2_t)&unk_1E5D34170;
      v66 = 0;
      v19 = *(_DWORD *)(*(_QWORD *)a4 + 8);
      if (*(_BYTE *)(*a3 + 580))
        kaldi::OnlineDecodableNnet1Lazy::GetLikelihoodsForRealignment((uint64_t)v15, v19, &v63);
      else
        kaldi::OnlineDecodableNnet1Lazy::GetLikelihoodsForRealignment((uint64_t)v15, v19, *(unsigned int *)(*a3 + 576), &v63);
      kaldi::Matrix<float>::Matrix<float>((uint64_t)&v67, (uint64_t)&v63, 111);
      quasar::OnlineLatticeRealignmentDecoder::realignLattice(a1, (uint64_t)&v67, (uint64_t)&v86, &v62);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v67);
      v21 = v62;
      if (!v62)
      {
        v20 = 2;
LABEL_49:
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v63);
        v39 = v85;
        if (v85)
        {
          v40 = (unint64_t *)&v85->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        goto LABEL_54;
      }
      std::vector<std::vector<double>>::vector(&v67, 2uLL);
      v60 = 0;
      std::vector<fst::LatticeWeightTpl<float>>::resize(v67, 2uLL, &v60);
      v60 = 0;
      std::vector<fst::LatticeWeightTpl<float>>::resize(v67 + 24, 2uLL, &v60);
      v22 = v67;
      **(_QWORD **)v67 = 0;
      *(_QWORD *)(*(_QWORD *)(v22 + 24) + 8) = 0;
      fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>((double ***)&v67, v21);
      v60 = (void **)&v67;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v60);
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v60);
      fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(v21, (uint64_t)&v60, 1);
      LODWORD(v67) = 2;
      fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v90, &v67);
      v23 = v90[15]((void **)&v90);
      ((void (*)(uint64_t (***)(void **), uint64_t))v90[35])(&v90, v23);
      fst::RemoveEpsLocal<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v90);
      fst::MinimizeEncoded<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(&v90, 0.00097656);
      fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v90);
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v58);
      LOBYTE(v67) = 1;
      DWORD1(v67) = 0;
      fst::Compose<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v60, (uint64_t)&v90, (uint64_t)&v58, (uint64_t)&v67);
      fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v56);
      v24 = fst::DeterminizeLatticePhonePrunedWrapper(*(kaldi::TransitionModel **)(a1 + 712), &v58, (uint64_t)&v56, 0x2FAF0803A800000, 257, *(float *)(a1 + 552));
      if (quasar::gLogLevel < 5)
        v25 = 1;
      else
        v25 = v24;
      if ((v25 & 1) == 0)
      {
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v67 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Determinization finished earlier than the beam", 46);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v67);
      }
      fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v54);
      v26 = *(float *)(a1 + 704);
      v27 = 0.0;
      if (v26 != 0.0)
        v27 = (float)(v26 * (float)(int)((*(_QWORD *)(v57 + 72) - *(_QWORD *)(v57 + 64)) >> 3)) + 1000.0;
      if (kaldi::WordAlignLattice((uint64_t)&v56, *(_QWORD *)(a1 + 712), *(_QWORD *)(a1 + 480), (int)v27, (uint64_t)&v54))
      {
        if (*(_DWORD *)(v55 + 88) != -1)
        {
          v28 = *(kaldi::TransitionModel **)(a1 + 712);
          v29 = (kaldi::HmmTopology *)quasar::PTree::begin(*(quasar::PTree **)(a2 + 32));
          quasar::OnlineLatticeRealignmentDecoder::convertToOtherTransitionModel(v28, v29, *(void (****)(unsigned int (***)(_QWORD)))(a1 + 520), (uint64_t *)(a1 + 496), (uint64_t)&v54, (uint64_t)&v67);
          if ((_QWORD)v67)
          {
            v30 = *a3;
            *(_DWORD *)(v30 + 576) = HIDWORD(v64);
            *(_BYTE *)(v30 + 145) = 1;
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v30 + 152), (uint64_t *)&v67);
            v20 = 0;
          }
          else
          {
            v20 = 2;
          }
          v51 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
          if (*((_QWORD *)&v67 + 1))
          {
            v52 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          goto LABEL_35;
        }
        if (quasar::gLogLevel >= 2)
        {
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v67 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Empty aligned lattice. MBR decoding failed.", 43);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v67);
        }
      }
      else if (quasar::gLogLevel >= 2)
      {
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v67 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Word alignment for MBR decoding failed.", 39);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v67);
      }
      v20 = 2;
LABEL_35:
      v54 = &unk_1E5D25800;
      v31 = v55;
      if (v55)
      {
        v32 = *(_DWORD *)(v55 + 56) - 1;
        *(_DWORD *)(v55 + 56) = v32;
        if (!v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      }
      v56 = &unk_1E5D25800;
      v33 = v57;
      if (v57)
      {
        v34 = *(_DWORD *)(v57 + 56) - 1;
        *(_DWORD *)(v57 + 56) = v34;
        if (!v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      }
      v58 = &unk_1E5D25580;
      v35 = v59;
      if (v59)
      {
        v36 = *(_DWORD *)(v59 + 56) - 1;
        *(_DWORD *)(v59 + 56) = v36;
        if (!v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      }
      v60 = (void **)&unk_1E5D25580;
      v37 = v61;
      if (v61)
      {
        v38 = *(_DWORD *)(v61 + 56) - 1;
        *(_DWORD *)(v61 + 56) = v38;
        if (!v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      }
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
      goto LABEL_49;
    }
  }
  v84 = 0;
  v85 = 0;
  if (quasar::gLogLevel >= 2)
  {
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"kaldi::OnlineDecodableNnet1Lazy is required at this point in the first pass with configured realign-model parameter.", 116);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v67);
  }
  v20 = 2;
LABEL_54:
  v86 = &unk_1E5D256C0;
  v42 = v87;
  if (v87)
  {
    v43 = *(_DWORD *)(v87 + 56) - 1;
    *(_DWORD *)(v87 + 56) = v43;
    if (!v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  v88 = &unk_1E5D256C0;
  v44 = v89;
  if (v89)
  {
    v45 = *(_DWORD *)(v89 + 56) - 1;
    *(_DWORD *)(v89 + 56) = v45;
    if (!v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  }
  v90 = (uint64_t (**)(void **))&unk_1E5D25580;
  v46 = v91;
  if (v91)
  {
    v47 = *(_DWORD *)(v91 + 56) - 1;
    *(_DWORD *)(v91 + 56) = v47;
    if (!v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  }
  v92 = &unk_1E5D25800;
  v48 = v93;
  if (v93)
  {
    v49 = *(_DWORD *)(v93 + 56) - 1;
    *(_DWORD *)(v93 + 56) = v49;
    if (!v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  }
  return v20;
}

void sub_1ADA3FF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6, uint64_t a7, _DWORD *a8, uint64_t a9, _DWORD *a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;
  int v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  int v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  va_list va;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v26 = va_arg(va1, _QWORD);
  v28 = va_arg(va1, _QWORD);
  v29 = va_arg(va1, _QWORD);
  v30 = va_arg(va1, _QWORD);
  v31 = va_arg(va1, _QWORD);
  v32 = va_arg(va1, _QWORD);
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)va1);
  if (a4)
  {
    v14 = a4[14] - 1;
    a4[14] = v14;
    if (!v14)
      (*(void (**)(_DWORD *))(*(_QWORD *)a4 + 8))(a4);
  }
  if (a6)
  {
    v15 = a6[14] - 1;
    a6[14] = v15;
    if (!v15)
      (*(void (**)(_DWORD *))(*(_QWORD *)a6 + 8))(a6);
  }
  if (a8)
  {
    v16 = a8[14] - 1;
    a8[14] = v16;
    if (!v16)
      (*(void (**)(_DWORD *))(*(_QWORD *)a8 + 8))(a8);
  }
  if (a10)
  {
    v17 = a10[14] - 1;
    a10[14] = v17;
    if (!v17)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v12 - 144);
  *(_QWORD *)(v12 - 128) = &unk_1E5D256C0;
  v18 = *(_DWORD **)(v12 - 120);
  if (v18)
  {
    v19 = v18[14] - 1;
    v18[14] = v19;
    if (!v19)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
  }
  *(_QWORD *)(v12 - 112) = &unk_1E5D256C0;
  v20 = *(_DWORD **)(v12 - 104);
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  *(_QWORD *)(v12 - 96) = &unk_1E5D25580;
  v22 = *(_DWORD **)(v12 - 88);
  if (v22)
  {
    v23 = v22[14] - 1;
    v22[14] = v23;
    if (!v23)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
  }
  *(_QWORD *)(v12 - 80) = &unk_1E5D25800;
  v24 = *(_DWORD **)(v12 - 72);
  if (v24)
  {
    v25 = v24[14] - 1;
    v24[14] = v25;
    if (!v25)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
  }
  _Unwind_Resume(a1);
}

void fst::Push<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t *a1, int a2, int a3, float a4)
{
  float v7;
  void *__p;
  void *v9;
  uint64_t v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)a1, (char **)&__p, a2 == 0, a4);
  v7 = 0.0;
  if (a3)
    v7 = fst::ComputeTotalWeight<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)a1, (uint64_t *)&__p, a2 == 0);
  fst::Reweight<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, &__p, a2);
  if (a3)
    fst::RemoveWeight<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)a1, a2 == 1, v7);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_1ADA402BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::MinimizeEncoded<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(_QWORD *a1, float a2)
{
  uint64_t v3;
  uint64_t v4;
  float v6;
  uint64_t v7;
  char v8;
  float v9[2];
  uint64_t v10;
  char v11;

  v9[0] = a2;
  fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::QuantizeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)a1, v9);
  fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::EncodeMapper((uint64_t)&v6, 3, 1);
  v3 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetInputSymbols(v7, v3);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  fst::EncodeTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetOutputSymbols(v7, v4);
  fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t)&v6);
  fst::AcceptorMinimize<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  v9[0] = v6;
  LODWORD(v9[1]) = 2;
  v10 = v7;
  v11 = v8;
  ++*(_DWORD *)(v7 + 80);
  fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t)v9);
  fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~EncodeMapper((uint64_t)v9);
  fst::RmFinalEpsilon<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
  (*(void (**)(_QWORD *, _QWORD))(*a1 + 280))(a1, *(_QWORD *)(v7 + 88));
  (*(void (**)(_QWORD *, _QWORD))(*a1 + 288))(a1, *(_QWORD *)(v7 + 96));
  return fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~EncodeMapper((uint64_t)&v6);
}

void sub_1ADA403E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~EncodeMapper((uint64_t)&a12);
  fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~EncodeMapper((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeRealignmentDecoder::supportsEager(quasar::OnlineLatticeRealignmentDecoder *this)
{
  return 1;
}

void quasar::OnlineLatticeRealignmentDecoder::~OnlineLatticeRealignmentDecoder(void **this)
{
  quasar::OnlineLatticeRealignmentDecoder::~OnlineLatticeRealignmentDecoder(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;

  *this = &off_1E5D3AD20;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 91));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 89));
  if (*((char *)this + 703) < 0)
    operator delete(this[85]);
  if (*((char *)this + 679) < 0)
    operator delete(this[82]);
  if (*((char *)this + 655) < 0)
    operator delete(this[79]);
  if (*((char *)this + 631) < 0)
    operator delete(this[76]);
  if (*((char *)this + 607) < 0)
    operator delete(this[73]);
  if (*((char *)this + 583) < 0)
    operator delete(this[70]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 65));
  v2 = this[62];
  if (v2)
  {
    this[63] = v2;
    operator delete(v2);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 60));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 56));
  quasar::Decoder::~Decoder(this);
}

_QWORD *fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, char **a2, char a3, float a4)
{
  char *v7;
  _DWORD *v8;
  _QWORD *result;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  _QWORD *v25;
  int v26;
  float v27;
  char v28;
  void *v29;
  uint64_t v30;
  void *__p;
  _BYTE *v32;
  uint64_t v33;
  _QWORD v34[9];

  if ((a3 & 1) != 0)
  {
    fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFst(&v29);
    fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (uint64_t *)&v29, 1);
    __p = 0;
    v32 = 0;
    v33 = 0;
    fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)v34, (uint64_t)&v29, (uint64_t)&__p);
    v25 = v34;
    v26 = -1;
    v28 = 0;
    v27 = a4;
    fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)&v29, &__p, (uint64_t)&v25);
    v7 = *a2;
    a2[1] = *a2;
    v8 = __p;
    if (v32 - (_BYTE *)__p == 4)
    {
      if (*(float *)__p >= -INFINITY && *(float *)__p <= -INFINITY)
      {
        v24 = 2143289344;
        std::vector<fst::TropicalWeightTpl<float>>::resize((uint64_t)a2, 1uLL, &v24);
      }
    }
    else
    {
      v10 = 0;
      v11 = a2 + 2;
      v12 = v7;
      do
      {
        v13 = v10 + 1;
        v14 = v8[v10 + 1];
        if ((unint64_t)v12 >= *v11)
        {
          if (v13 >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v15 = *v11 - (_QWORD)v7;
          v16 = v15 >> 1;
          if (v15 >> 1 <= v13)
            v16 = v10 + 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v17);
          else
            v18 = 0;
          v19 = &v18[4 * v10];
          *(_DWORD *)v19 = v14;
          v12 = v19 + 4;
          v21 = *a2;
          v20 = a2[1];
          if (v20 != *a2)
          {
            do
            {
              v22 = *((_DWORD *)v20 - 1);
              v20 -= 4;
              *((_DWORD *)v19 - 1) = v22;
              v19 -= 4;
            }
            while (v20 != v21);
            v20 = *a2;
          }
          *a2 = v19;
          a2[1] = v12;
          a2[2] = &v18[4 * v17];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_DWORD *)v12 = v14;
          v12 += 4;
        }
        a2[1] = v12;
        v7 = *a2;
        v10 = (v12 - *a2) >> 2;
        v8 = __p;
      }
      while (v10 < ((v32 - (_BYTE *)__p) >> 2) - 1);
    }
    fst::AutoQueue<int>::~AutoQueue(v34);
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
    }
    v29 = &unk_1E5D24B80;
    result = (_QWORD *)v30;
    if (v30)
    {
      v23 = *(_DWORD *)(v30 + 56) - 1;
      *(_DWORD *)(v30 + 56) = v23;
      if (!v23)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  else
  {
    fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)v34, a1, (uint64_t)a2);
    __p = v34;
    HIDWORD(v32) = -1;
    BYTE4(v33) = 0;
    *(float *)&v33 = a4;
    fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a2, (uint64_t)&__p);
    return fst::AutoQueue<int>::~AutoQueue(v34);
  }
  return result;
}

void sub_1ADA40758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v19;

  fst::AutoQueue<int>::~AutoQueue(&a18);
  if (__p)
    operator delete(__p);
  if (a14)
  {
    v19 = a14[14] - 1;
    a14[14] = v19;
    if (!v19)
      (*(void (**)(_DWORD *))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(a1);
}

float fst::ComputeTotalWeight<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t *a2, char a3)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;

  if ((a3 & 1) != 0)
  {
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) < (unint64_t)((a2[1] - *a2) >> 2))
      return *(float *)(*a2 + 4 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1));
    return INFINITY;
  }
  v6 = *a2;
  if (a2[1] == *a2)
    return INFINITY;
  v7 = 0;
  v5 = INFINITY;
  do
  {
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(a1, v7);
    v9 = *(float *)(v6 + 4 * v7);
    v10 = NAN;
    if (v9 != -INFINITY && v8 != -INFINITY)
    {
      v10 = INFINITY;
      v11 = v8 == INFINITY || v9 == INFINITY;
      v12 = v9 + v8;
      if (!v11)
        v10 = v12;
    }
    if (v5 >= v10)
      v13 = v10;
    else
      v13 = v5;
    if (v10 == -INFINITY || v5 == -INFINITY)
      v5 = NAN;
    else
      v5 = v13;
    ++v7;
    v6 = *a2;
  }
  while (v7 < (a2[1] - *a2) >> 2);
  return v5;
}

uint64_t fst::Reweight<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t *a1, _QWORD *a2, int a3)
{
  uint64_t result;
  __n128 v7;
  int v8;
  uint64_t v9;
  float v10;
  __n128 v11;
  __n128 v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  __n128 v17;
  __n128 v18;
  BOOL v19;
  float v20;
  float v21;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  BOOL v34;
  float v35;
  float (*v36)(uint64_t *, uint64_t);
  __n128 v37;
  float v38;
  BOOL v41;
  float v42;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  signed int v52;
  int v53;
  unsigned __int32 v54;

  result = (*(uint64_t (**)(uint64_t *))(*a1 + 160))(a1);
  if (!(_DWORD)result)
    return result;
  v52 = 0;
  (*(void (**)(uint64_t *, uint64_t *))(*a1 + 128))(a1, &v50);
LABEL_3:
  if (v50)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50))
      goto LABEL_72;
    if (v50)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
      goto LABEL_9;
    }
  }
  else if (v52 >= v51)
  {
    goto LABEL_72;
  }
  v8 = v52;
LABEL_9:
  v9 = v8;
  if (v8 != (uint64_t)(a2[1] - *a2) >> 2)
  {
    v10 = *(float *)(*a2 + 4 * v8);
    v48.n128_f32[0] = v10;
    LODWORD(v49) = 2139095040;
    v7.n128_f32[0] = v10;
    if (v10 == INFINITY)
      goto LABEL_44;
    (*(void (**)(uint64_t *, _QWORD, uint64_t *, float))(*a1 + 296))(a1, v8, &v49, v48.n128_f32[0]);
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49))
      {
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        if (a3)
        {
LABEL_44:
          if (a3 == 1)
          {
            v17.n128_u32[0] = (*(float (**)(uint64_t *, uint64_t, __n128))(*a1 + 32))(a1, v9, v7);
            v18.n128_u32[0] = 2143289344;
            if (v10 != -INFINITY && v17.n128_f32[0] != -INFINITY)
            {
              v18.n128_u32[0] = 2139095040;
              v19 = v17.n128_f32[0] == INFINITY || v10 == INFINITY;
              v17.n128_f32[0] = v10 + v17.n128_f32[0];
              if (!v19)
                v18.n128_f32[0] = v17.n128_f32[0];
            }
            (*(void (**)(uint64_t *, uint64_t, __n128, __n128))(*a1 + 184))(a1, v9, v18, v17);
          }
        }
        else
        {
          v20 = (*(float (**)(uint64_t *, uint64_t))(*a1 + 32))(a1, v9);
          if (v20 == -INFINITY || (LODWORD(v10) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          {
            v21 = NAN;
          }
          else
          {
            v21 = INFINITY;
            if (v20 != INFINITY)
              v21 = v20 - v10;
          }
          (*(void (**)(uint64_t *, uint64_t, float))(*a1 + 184))(a1, v9, v21);
        }
        if (v50)
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50);
        else
          ++v52;
        goto LABEL_3;
      }
      v11 = *(__n128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
      v48 = v11;
      if (v11.n128_i32[3] < (unint64_t)((uint64_t)(a2[1] - *a2) >> 2))
      {
        v11.n128_u32[0] = *(_DWORD *)(*a2 + 4 * v48.n128_i32[3]);
        v54 = v11.n128_u32[0];
        v53 = 2139095040;
        v12.n128_u32[0] = v11.n128_u32[0];
        if (v11.n128_f32[0] != INFINITY)
          break;
      }
LABEL_40:
      (*(void (**)(uint64_t, __n128, __n128))(*(_QWORD *)v49 + 40))(v49, v11, v12);
    }
    if (a3)
    {
      if (a3 != 1)
      {
LABEL_39:
        v11.n128_f64[0] = (*(double (**)(uint64_t, __n128 *))(*(_QWORD *)v49 + 88))(v49, &v48);
        goto LABEL_40;
      }
      v13 = NAN;
      if (v10 == -INFINITY)
        goto LABEL_38;
      v13 = NAN;
      if (v48.n128_f32[2] == -INFINITY)
        goto LABEL_38;
      if (v10 == INFINITY || v48.n128_f32[2] == INFINITY)
      {
        v13 = INFINITY;
        if ((v11.n128_u32[0] & 0x7FFFFFFF) >= 0x7F800000)
          v13 = NAN;
        goto LABEL_38;
      }
      v14 = v10 + v48.n128_f32[2];
      v13 = NAN;
      if ((float)(v10 + v48.n128_f32[2]) == -INFINITY)
      {
LABEL_38:
        v48.n128_f32[2] = v13;
        goto LABEL_39;
      }
      if ((v11.n128_u32[0] & 0x7FFFFFFF) <= 0x7F7FFFFF)
      {
        v13 = INFINITY;
        if (v14 != INFINITY)
          v13 = v14 - v11.n128_f32[0];
        goto LABEL_38;
      }
    }
    else
    {
      v13 = NAN;
      if (v48.n128_f32[2] == -INFINITY || v11.n128_f32[0] == -INFINITY)
        goto LABEL_38;
      v15 = v48.n128_f32[2] == INFINITY || v11.n128_f32[0] == INFINITY;
      v16 = v11.n128_f32[0] + v48.n128_f32[2];
      if (v15)
        v16 = INFINITY;
      if (v16 != -INFINITY && (LODWORD(v10) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v13 = INFINITY;
        if (v16 != INFINITY)
          v13 = v16 - v10;
        goto LABEL_38;
      }
    }
    v13 = NAN;
    goto LABEL_38;
  }
  while (1)
  {
LABEL_72:
    if (!v50)
    {
      if (v52 >= v51)
        break;
      goto LABEL_64;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50) & 1) != 0)
      break;
    if (v50)
    {
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
      goto LABEL_65;
    }
LABEL_64:
    v22 = v52;
LABEL_65:
    if (a3 == 1)
    {
      v15 = (*(float (**)(uint64_t *, uint64_t))(*a1 + 32))(a1, v22) == -INFINITY;
      v23.n128_u32[0] = 2139095040;
      if (v15)
        v23.n128_f32[0] = NAN;
      (*(void (**)(uint64_t *, uint64_t, __n128))(*a1 + 184))(a1, v22, v23);
    }
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50);
    else
      ++v52;
  }
  if ((*(int (**)(uint64_t *))(*a1 + 24))(a1) >= (unint64_t)((uint64_t)(a2[1] - *a2) >> 2))
    v25 = INFINITY;
  else
    v25 = *(float *)(*a2 + 4 * (*(int (**)(uint64_t *))(*a1 + 24))(a1));
  v48.n128_f32[0] = v25;
  LODWORD(v49) = 0;
  v24.n128_f32[0] = v25;
  if (v25 == 0.0)
    goto LABEL_137;
  v48.n128_f32[0] = v25;
  LODWORD(v49) = 2139095040;
  v24.n128_f32[0] = v25;
  if (v25 == INFINITY)
    goto LABEL_137;
  v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, float))(*a1 + 64))(a1, 0x2000000000, 1, v25);
  v27 = *a1;
  if ((v26 & 0x2000000000) == 0)
  {
    v28 = (*(uint64_t (**)(uint64_t *))(v27 + 200))(a1);
    v29 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
    if ((LODWORD(v25) & 0x7FFFFFFFu) >= 0x7F800000)
      v30 = NAN;
    else
      v30 = 0.0 - v25;
    if (!a3)
      v30 = v25;
    v48.n128_u64[0] = 0;
    v48.n128_u64[1] = __PAIR64__(v29, LODWORD(v30));
    (*(void (**)(uint64_t *, uint64_t, __n128 *))(*a1 + 208))(a1, v28, &v48);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 176))(a1, v28);
    goto LABEL_137;
  }
  v31 = (*(uint64_t (**)(uint64_t *))(v27 + 24))(a1);
  (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 296))(a1, v31, &v49);
  if ((LODWORD(v25) & 0x7FFFFFFFu) >= 0x7F800000)
    v32 = NAN;
  else
    v32 = 0.0 - v25;
  while (2)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49))
    {
      v48 = *(__n128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
      v33 = NAN;
      if (a3)
      {
        if (v32 != -INFINITY)
        {
          v33 = NAN;
          if (v48.n128_f32[2] != -INFINITY)
          {
            v33 = INFINITY;
            v34 = v48.n128_f32[2] == INFINITY || v32 == INFINITY;
            v35 = v32 + v48.n128_f32[2];
LABEL_103:
            if (!v34)
              v33 = v35;
          }
        }
      }
      else if (v25 != -INFINITY)
      {
        v33 = NAN;
        if (v48.n128_f32[2] != -INFINITY)
        {
          v33 = INFINITY;
          v34 = v48.n128_f32[2] == INFINITY || v25 == INFINITY;
          v35 = v48.n128_f32[2] + v25;
          goto LABEL_103;
        }
      }
      v48.n128_f32[2] = v33;
      (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v49 + 88))(v49, &v48);
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
      continue;
    }
    break;
  }
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v36 = *(float (**)(uint64_t *, uint64_t))(*a1 + 32);
  if (a3)
  {
    v37.n128_f32[0] = v36(a1, v31);
    v38 = INFINITY;
    if (v37.n128_f32[0] != INFINITY && v32 != INFINITY)
      v38 = v32 + v37.n128_f32[0];
    v41 = v37.n128_f32[0] == -INFINITY || v32 == -INFINITY;
    v37.n128_u32[0] = 2143289344;
    if (!v41)
      v37.n128_f32[0] = v38;
  }
  else
  {
    v37.n128_f32[0] = v36(a1, v31);
    v42 = INFINITY;
    if (v37.n128_f32[0] != INFINITY && v25 != INFINITY)
      v42 = v37.n128_f32[0] + v25;
    v45 = v37.n128_f32[0] == -INFINITY || v25 == -INFINITY;
    v37.n128_u32[0] = 2143289344;
    if (!v45)
      v37.n128_f32[0] = v42;
  }
  (*(void (**)(uint64_t *, uint64_t, __n128))(*a1 + 184))(a1, v31, v37);
LABEL_137:
  v46 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, __n128))(*a1 + 64))(a1, 0x3FFFFFFF0007, 0, v24);
  v47 = fst::ReweightProperties(v46);
  (*(void (**)(uint64_t *, unint64_t, uint64_t))(*a1 + 192))(a1, v47, 0x3FFFFFFF0007);
  result = v50;
  if (v50)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  return result;
}

void sub_1ADA41158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveWeight<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t result, int a2, float a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  __n128 v12;
  float v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;

  *(float *)&v15 = a3;
  LODWORD(v14) = 0;
  if (a3 == 0.0)
    return result;
  *(float *)&v15 = a3;
  LODWORD(v14) = 2139095040;
  if (a3 == INFINITY)
    return result;
  v4 = result;
  if (a2)
  {
    v16 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)result + 128))(result, &v15);
    while (1)
    {
      result = v15;
      if (!(_QWORD)v15)
        break;
      v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v15 + 16))(v15);
      result = v15;
      if (v5)
      {
        if ((_QWORD)v15)
          return (*(uint64_t (**)(void))(*(_QWORD *)v15 + 8))();
        return result;
      }
      if (!(_QWORD)v15)
        goto LABEL_11;
      v6 = (*(uint64_t (**)(void))(*(_QWORD *)v15 + 24))();
      if ((_QWORD)v15)
        v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v15 + 24))(v15);
      else
        v7 = v16;
LABEL_12:
      v8 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, v7);
      if (v8 == -INFINITY || (LODWORD(a3) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      {
        v9 = NAN;
      }
      else
      {
        v9 = INFINITY;
        if (v8 != INFINITY)
          v9 = v8 - a3;
      }
      (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v4 + 184))(v4, v6, v9);
      if ((_QWORD)v15)
        (*(void (**)(_QWORD))(*(_QWORD *)v15 + 32))(v15);
      else
        ++v16;
    }
    if ((int)v16 >= SDWORD2(v15))
      return result;
LABEL_11:
    v6 = v16;
    v7 = v16;
    goto LABEL_12;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v4 + 296))(v4, v10, &v14);
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
  {
    v15 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    v11 = *((float *)&v15 + 2) - a3;
    if (*((float *)&v15 + 2) == INFINITY)
      v11 = INFINITY;
    if (*((float *)&v15 + 2) == -INFINITY || (LODWORD(a3) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      v11 = NAN;
    *((float *)&v15 + 2) = v11;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 88))(v14, &v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  }
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v13 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, v10);
  if (v13 == -INFINITY || (LODWORD(a3) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    v12.n128_u32[0] = 2143289344;
  }
  else
  {
    v12.n128_u32[0] = 2139095040;
    if (v13 != INFINITY)
      v12.n128_f32[0] = v13 - a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v4 + 184))(v4, v10, v12);
}

void sub_1ADA414F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  fst *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  fst *v26;
  _QWORD *v27;
  uint64_t v28;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  fst *v32;
  _QWORD *v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  fst *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  fst *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  fst *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  fst *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  fst *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  void *__p[2];
  char v59;
  char v60;
  __int16 v61;
  void *v62[3];
  uint64_t v63[2];
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v6 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v7 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v8 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v21 = operator new();
    *(_DWORD *)(v21 + 8) = 5;
    *(_BYTE *)(v21 + 12) = 0;
    *(_QWORD *)v21 = &unk_1E5D1EEB0;
    *(_QWORD *)(v21 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v21;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v22 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v23 = (_QWORD *)fst::cerr(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"AutoQueue: using state-order discipline", 39);
  }
  else if ((v8 & 0x800000000) != 0)
  {
    v25 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v25, a2);
    *(_QWORD *)(a1 + 16) = v25;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v26 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v27 = (_QWORD *)fst::cerr(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"AutoQueue: using top-order discipline", 37);
  }
  else
  {
    if ((v8 & 0x200000000) == 0)
    {
      v66 = 0;
      v63[0] = (uint64_t)v7;
      v63[1] = 0;
      v64 = 0;
      v65 = &v66;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, v63, 0);
      v9 = *(int **)(a1 + 48);
      v10 = *(int **)(a1 + 56);
      if (v9 != v10)
      {
        v11 = v9 + 1;
        if (v9 + 1 != v10)
        {
          v12 = *v9;
          v13 = v9 + 1;
          do
          {
            v15 = *v13++;
            v14 = v15;
            v16 = v12 < v15;
            if (v12 <= v15)
              v12 = v14;
            if (v16)
              v9 = v11;
            v11 = v13;
          }
          while (v13 != v10);
        }
      }
      v17 = *v9;
      v18 = *v9 + 1;
      std::vector<fst::QueueType>::vector(v62, v18);
      if (a3)
      {
        v19 = operator new();
        v20 = (_QWORD *)operator new();
        *v20 = a3;
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v61 = 0;
      fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NaturalLess<fst::TropicalWeightTpl<float>>>(a2, v7, (uint64_t)v62, v19, &v61, (_BYTE *)&v61 + 1);
      if (HIBYTE(v61))
      {
        v31 = operator new();
        *(_DWORD *)(v31 + 8) = 2;
        *(_BYTE *)(v31 + 12) = 0;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_OWORD *)(v31 + 48) = 0u;
        *(_QWORD *)v31 = &unk_1E5D27B60;
        *(_QWORD *)(a1 + 16) = v31;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v32 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v33 = (_QWORD *)fst::cerr(v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_30:
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
LABEL_52:
        if (v20)
          MEMORY[0x1AF44D190](v20, 0x60C40B37CB4BBLL);
        if (v19)
          MEMORY[0x1AF44D190](v19, 0xC400A2AC0F1);
        v24 = v62[0];
        if (v62[0])
        {
          v62[1] = v62[0];
          goto LABEL_58;
        }
        return a1;
      }
      if ((_BYTE)v61)
      {
        v34 = operator new();
        fst::TopOrderQueue<int>::TopOrderQueue(v34, (uint64_t)v7);
        *(_QWORD *)(a1 + 16) = v34;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v35 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v36 = (_QWORD *)fst::cerr(v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: using top-order discipline", 37);
        goto LABEL_30;
      }
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v37 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v38 = (_QWORD *)fst::cerr(v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
      }
      std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v6, v18);
      if (v17 < 0)
      {
LABEL_51:
        v56 = operator new();
        *(_DWORD *)(v56 + 8) = 6;
        *(_BYTE *)(v56 + 12) = 0;
        *(_QWORD *)v56 = &unk_1E5D22CF0;
        *(_QWORD *)(v56 + 16) = v6;
        *(_QWORD *)(v56 + 24) = v7;
        *(_QWORD *)(v56 + 32) = 0xFFFFFFFF00000000;
        *(_QWORD *)(v56 + 48) = 0;
        *(_QWORD *)(v56 + 56) = 0;
        *(_QWORD *)(v56 + 40) = 0;
        *(_QWORD *)(a1 + 16) = v56;
        goto LABEL_52;
      }
      v39 = 0;
      while (1)
      {
        v40 = *((_DWORD *)v62[0] + v39);
        if (v40 == 3)
        {
          v44 = operator new();
          *(_DWORD *)(v44 + 8) = 3;
          *(_BYTE *)(v44 + 12) = 0;
          *(_QWORD *)v44 = &unk_1E5D21710;
          *(_OWORD *)(v44 + 16) = *(_OWORD *)v20;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_OWORD *)(v44 + 48) = 0u;
          *(_OWORD *)(v44 + 64) = 0u;
          *(_OWORD *)(v44 + 80) = 0u;
          *(_OWORD *)(v44 + 92) = 0u;
          *(_QWORD *)(v44 + 120) = 0;
          *(_QWORD *)(v44 + 128) = 0;
          *(_QWORD *)(v44 + 112) = 0;
          *(_QWORD *)(*v6 + 8 * v39) = v44;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v45 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v46 = (_QWORD *)fst::cerr(v45);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"AutoQueue: SCC #", 16);
            v47 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": using shortest-first discipline", 33);
            goto LABEL_48;
          }
        }
        else if (v40 == 2)
        {
          v48 = operator new();
          *(_DWORD *)(v48 + 8) = 2;
          *(_BYTE *)(v48 + 12) = 0;
          *(_OWORD *)(v48 + 16) = 0u;
          *(_OWORD *)(v48 + 32) = 0u;
          *(_OWORD *)(v48 + 48) = 0u;
          *(_QWORD *)v48 = &unk_1E5D27B60;
          *(_QWORD *)(*v6 + 8 * v39) = v48;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v49 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v50 = (_QWORD *)fst::cerr(v49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"AutoQueue: SCC #", 16);
            v51 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": using LIFO disciplle", 22);
            goto LABEL_48;
          }
        }
        else if (v40)
        {
          v52 = operator new();
          *(_DWORD *)(v52 + 8) = 1;
          *(_BYTE *)(v52 + 12) = 0;
          *(_OWORD *)(v52 + 16) = 0u;
          *(_OWORD *)(v52 + 32) = 0u;
          *(_OWORD *)(v52 + 48) = 0u;
          *(_QWORD *)v52 = &unk_1E5D23A28;
          *(_QWORD *)(*v6 + 8 * v39) = v52;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v53 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v54 = (_QWORD *)fst::cerr(v53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"AutoQueue: SCC #", 16);
            v55 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": using FIFO disciplle", 22);
LABEL_48:
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
            if (v59 < 0)
              operator delete(__p[0]);
          }
        }
        else
        {
          *(_QWORD *)(*v6 + 8 * v39) = 0;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v41 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v42 = (_QWORD *)fst::cerr(v41);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"AutoQueue: SCC #", 16);
            v43 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": using trivial discipline", 26);
            goto LABEL_48;
          }
        }
        if (v18 == ++v39)
          goto LABEL_51;
      }
    }
    v28 = operator new();
    *(_DWORD *)(v28 + 8) = 2;
    *(_BYTE *)(v28 + 12) = 0;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_QWORD *)v28 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v28;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v29 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"AutoQueue: using LIFO discipline", 32);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)v62);
  if (SHIBYTE(v64) < 0)
  {
    v24 = (void *)v63[0];
LABEL_58:
    operator delete(v24);
  }
  return a1;
}

void sub_1ADA41D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;

  if (a16 < 0)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  v32 = *v30;
  if (*v30)
  {
    *(_QWORD *)(v28 + 56) = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    *(_QWORD *)(v28 + 32) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1ADA41FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 16 * v12[5];
            v18 = *(int *)(v17 + 12);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 12);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 12);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D19760;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADA426F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19760;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::AcceptorMinimize<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(_QWORD *a1)
{
  fst *v2;
  _QWORD *v3;
  fst *v4;
  _QWORD *v5;
  fst *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9[2];
  __int128 v10;
  void *__p[2];
  char v12;
  char v13;

  if ((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x200010000, 1))
  {
    fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 160))(a1))
    {
      if ((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x800000000, 1))
      {
        if (FLAGS_v >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
          v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
          v3 = (_QWORD *)fst::cerr(v2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Acyclic Minimization", 20);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
          if (v12 < 0)
            operator delete(__p[0]);
        }
        fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)a1);
        fst::AcyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::AcyclicMinimizer((uint64_t)__p, a1);
        fst::MergeStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(__p, (uint64_t)a1);
        fst::Partition<int>::~Partition(__p);
      }
      else
      {
        if (FLAGS_v >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
          v6 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
          v7 = (_QWORD *)fst::cerr(v6);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Cyclic Minimization", 19);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
          if (v12 < 0)
            operator delete(__p[0]);
        }
        fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::CyclicMinimizer((uint64_t)__p, (uint64_t)a1);
        fst::MergeStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(__p, (uint64_t)a1);
        fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::~CyclicMinimizer(__p);
      }
      v8 = a1;
      *(_OWORD *)v9 = 0u;
      v10 = 0u;
      fst::StateMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)a1, (uint64_t *)&v8);
      if (v9[0])
      {
        v9[1] = v9[0];
        operator delete(v9[0]);
      }
    }
  }
  else
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"FST is not an unweighted acceptor", 33);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
    if (v12 < 0)
      operator delete(__p[0]);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 192))(a1, 4, 4);
  }
}

void sub_1ADA429C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADA42A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    JUMPOUT(0x1ADA42A24);
  JUMPOUT(0x1ADA42A28);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::QuantizeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, float *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int32x2_t v7;
  uint64_t v8;
  double v9;
  float v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13[3];
  uint64_t v14;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v6 = 0;
      v7 = vdup_n_s32(0x7F800000u);
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v6, &v14);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
        {
          v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
          *(int32x2_t *)&v9 = fst::QuantizeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()(a2, v8, v13);
          (*(void (**)(uint64_t, int32x2_t *, double))(*(_QWORD *)v14 + 88))(v14, v13, v9);
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
        }
        if (v14)
          (*(void (**)(void))(*(_QWORD *)v14 + 8))();
        (*(void (**)(int32x2_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(v13, a1, v6);
        v10 = vaddv_f32((float32x2_t)v13[0]);
        v11 = (int32x2_t)0x7F0000007FLL;
        if (v10 != -INFINITY)
        {
          v11 = v7;
          if (v10 != INFINITY)
          {
            v11.i32[0] = *(__int32 *)a2;
            v11 = (int32x2_t)vmul_n_f32(vrndm_f32(vadd_f32(vdiv_f32((float32x2_t)v13[0], (float32x2_t)vdup_lane_s32(v11, 0)), (float32x2_t)0x3F0000003F000000)), *a2);
          }
        }
        v12 = v11;
        (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(_QWORD *)a1 + 184))(a1, v6, &v12);
        v6 = (v6 + 1);
      }
      while ((int)v6 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0x3FFCFFFF0007, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1ADA42C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

int32x2_t fst::QuantizeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()@<D0>(float *a1@<X0>, uint64_t a2@<X1>, int32x2_t *a3@<X8>)
{
  float32x2_t v3;
  float v4;
  int32x2_t v5;
  __int32 v6;
  int32x2_t result;

  v3 = *(float32x2_t *)(a2 + 8);
  v4 = vaddv_f32(v3);
  v5 = (int32x2_t)0x7F0000007FLL;
  if (v4 != -INFINITY)
  {
    if (v4 == INFINITY)
    {
      v5 = vdup_n_s32(0x7F800000u);
    }
    else
    {
      v5.i32[0] = *(__int32 *)a1;
      v5 = (int32x2_t)vmul_n_f32(vrndm_f32(vadd_f32(vdiv_f32(v3, (float32x2_t)vdup_lane_s32(v5, 0)), (float32x2_t)0x3F0000003F000000)), *a1);
    }
  }
  v6 = *(_DWORD *)(a2 + 16);
  result = *(int32x2_t *)a2;
  *a3 = *(int32x2_t *)a2;
  a3[1] = v5;
  a3[2].i32[0] = v6;
  return result;
}

uint64_t fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::EncodeMapper(uint64_t a1, int a2, int a3)
{
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  v5 = operator new();
  fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::EncodeTable(v5, a2);
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  return a1;
}

void sub_1ADA42D40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A0C40782F6942);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::EncodeTable(uint64_t a1, int a2)
{
  int v4;
  char v5;
  BOOL v6;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = a2;
  v5 = a2 & 1;
  v6 = (a2 & 2) != 0;
  std::unordered_map<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,std::allocator<std::pair<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const* const,int>>>::unordered_map(a1 + 32, 0x400uLL, &v4);
  *(_DWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_1ADA42DD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,std::allocator<std::pair<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const* const,int>>>::unordered_map(uint64_t a1, size_t a2, int *a3)
{
  int v4;

  v4 = *a3;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 36) = v4 & 1;
  *(_BYTE *)(a1 + 37) = (v4 & 2) != 0;
  *(_DWORD *)(a1 + 40) = 1065353216;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADA42E3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int32x2_t v8;
  int8x8_t *v9;
  int v10;
  fst *v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int32x2_t v20;
  uint64_t v21;
  void *__p[2];
  char v23;
  char v24;
  _QWORD v25[2];
  char v26;
  char v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int v31;
  _QWORD *v32;
  float v33[3];
  uint64_t v34;
  float v35;
  int v36;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 280))(a1, 0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 288))(a1, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if (*(_DWORD *)(a2 + 4) == 1 && (*(_BYTE *)a2 & 2) != 0)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
      v34 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v5, &v34);
      v6 = 0;
    }
    else
    {
      LODWORD(v5) = -1;
      v6 = 1;
    }
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      v8 = vdup_n_s32(0x7F800000u);
      while (1)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)a1 + 296))(a1, v7, &v29);
        while (!(*(unsigned int (**)(_QWORD *))(*v29 + 24))(v29))
        {
          v9 = (int8x8_t *)(*(uint64_t (**)(_QWORD *))(*v29 + 32))(v29);
          fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()((int *)a2, v9, (uint64_t)&v32);
          (*(void (**)(_QWORD *, _QWORD **))(*v29 + 88))(v29, &v32);
          (*(void (**)(_QWORD *))(*v29 + 40))(v29);
        }
        if (v29)
          (*(void (**)(void))(*v29 + 8))();
        if ((v6 & 1) != 0)
        {
          (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v28, a1, v7);
          v29 = 0;
          v30 = v28;
          v31 = -1;
          fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()((int *)a2, (int8x8_t *)&v29, (uint64_t)&v32);
          if (v32)
          {
            v10 = FLAGS_fst_error_fatal;
            if (FLAGS_fst_error_fatal)
            {
              std::string::basic_string[abi:ne180100]<0>(v25, "FATAL");
              v11 = fst::LogMessage::LogMessage((fst *)&v27, (uint64_t)v25);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
              v11 = fst::LogMessage::LogMessage((fst *)&v24, (uint64_t)__p);
            }
            v12 = (_QWORD *)fst::cerr(v11);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
            if (v10)
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v27);
              if (v26 < 0)
              {
                v15 = (void *)v25[0];
                goto LABEL_30;
              }
            }
            else
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v24);
              if (v23 < 0)
              {
                v15 = __p[0];
LABEL_30:
                operator delete(v15);
              }
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
          }
          v21 = *(_QWORD *)v33;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v7, &v21);
          goto LABEL_33;
        }
        if ((_DWORD)v7 != (_DWORD)v5)
          break;
LABEL_33:
        v7 = (v7 + 1);
        if ((int)v7 >= (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1))
          goto LABEL_34;
      }
      (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v28, a1, v7);
      v29 = 0;
      v30 = v28;
      v31 = -1;
      fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()((int *)a2, (int8x8_t *)&v29, (uint64_t)&v32);
      if (v32)
      {
        v14 = LODWORD(v33[1]);
        v13 = LODWORD(v33[0]);
      }
      else
      {
        v14 = LODWORD(v33[1]);
        *(float *)&v28 = v33[1];
        v13 = LODWORD(v33[0]);
        *(float *)&v29 = v33[0];
        v36 = 2139095040;
        v35 = INFINITY;
        if (v33[0] == INFINITY && *(float *)&v28 == v35)
          goto LABEL_23;
      }
      v29 = v32;
      v30 = __PAIR64__(v14, v13);
      v31 = v5;
      (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)a1 + 208))(a1, v7, &v29);
LABEL_23:
      v20 = v8;
      (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(_QWORD *)a1 + 184))(a1, v7, &v20);
      goto LABEL_33;
    }
LABEL_34:
    v16 = 0x3FFF00000007;
    if ((*(_DWORD *)a2 & 1) == 0)
      v16 = 0x3FFFFFFF0007;
    if ((*(_DWORD *)a2 & 2) != 0)
    {
      v17 = 0x1D7C48100007;
      if (*(_DWORD *)(a2 + 4) == 1)
        v17 = 0x2EBC84200007;
      v16 &= v17;
    }
    if (*(_BYTE *)(a2 + 16))
      v18 = v19 | 4;
    else
      v18 = v19;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v16 & v18, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1ADA43280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a21);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()(int *a1@<X0>, int8x8_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  __int32 v7;
  __int32 v8;
  unsigned int v9;
  int8x8_t v10;
  int v11;
  fst *v12;
  _QWORD *v13;
  float v14;
  __int32 v15;
  fst *v16;
  _QWORD *v17;
  int8x8_t *v18;
  int8x8_t *v19;
  __int32 v20;
  int8x8_t *v21;
  fst *v22;
  _QWORD *v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *__p[2];
  char v29;
  char v30;
  float v31;
  float v32;

  v6 = a2[2].i32[0];
  if (a1[1] == 1)
  {
    if (v6 != -1)
    {
LABEL_3:
      v7 = fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Encode(*((_QWORD *)a1 + 1), a2);
      v8 = a2->i32[1];
      if ((*a1 & 1) != 0)
        v8 = v7;
      v9 = (*a1 & 2) == 0;
      v6 = a2[2].i32[0];
      *(_DWORD *)a3 = v7;
      *(_DWORD *)(a3 + 4) = v8;
      v10 = vand_s8(a2[1], (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v9), 0x1FuLL)));
      goto LABEL_41;
    }
    if ((*(_BYTE *)a1 & 2) != 0)
    {
      LODWORD(__p[0]) = 0;
      v14 = *(float *)a2[1].i32;
      v15 = a2[1].i32[1];
      *(float *)__p = v14;
      LODWORD(v26[0]) = v15;
      LODWORD(v24[0]) = 2139095040;
      v32 = INFINITY;
      if (v14 != INFINITY || *(float *)v26 != v32)
        goto LABEL_3;
    }
    else
    {
      v14 = *(float *)a2[1].i32;
      v15 = a2[1].i32[1];
    }
    *(int8x8_t *)a3 = *a2;
    *(float *)(a3 + 8) = v14;
    *(_DWORD *)(a3 + 12) = v15;
    goto LABEL_19;
  }
  if (v6 == -1)
  {
    *(int8x8_t *)a3 = *a2;
    *(int8x8_t *)(a3 + 8) = a2[1];
LABEL_19:
    v6 = -1;
    goto LABEL_42;
  }
  if (!a2->i32[0])
  {
    *(int8x8_t *)a3 = *a2;
    v10 = a2[1];
LABEL_41:
    *(int8x8_t *)(a3 + 8) = v10;
    goto LABEL_42;
  }
  v11 = *a1;
  if ((*a1 & 1) != 0 && a2->i32[0] != a2->i32[1])
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v12 = fst::LogMessage::LogMessage((fst *)&v30, (uint64_t)__p);
    v13 = (_QWORD *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"EncodeMapper: Label-encoded arc has different input and output labels", 69);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v30);
    if (v29 < 0)
      operator delete(__p[0]);
    *((_BYTE *)a1 + 16) = 1;
    v11 = *a1;
  }
  if ((v11 & 2) != 0)
  {
    LODWORD(v26[0]) = 0;
    LODWORD(v26[0]) = a2[1].i32[0];
    LODWORD(v24[0]) = 0;
    LODWORD(v24[0]) = a2[1].i32[1];
    v32 = 0.0;
    v31 = 0.0;
    if (*(float *)v26 != 0.0 || *(float *)v24 != v31)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(v26, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(v26, "ERROR");
      v16 = fst::LogMessage::LogMessage((fst *)&v32, (uint64_t)v26);
      v17 = (_QWORD *)fst::cerr(v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"EncodeMapper: Weight-encoded arc has non-trivial weight", 55);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v32);
      if (v27 < 0)
        operator delete(v26[0]);
      *((_BYTE *)a1 + 16) = 1;
    }
  }
  v18 = (int8x8_t *)fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Decode(*((_QWORD *)a1 + 1), a2->i32[0]);
  if (v18)
  {
    if ((*a1 & 1) != 0)
      v19 = v18;
    else
      v19 = a2;
    v20 = v19->i32[1];
    if ((*a1 & 2) != 0)
      v21 = v18;
    else
      v21 = a2;
    v6 = a2[2].i32[0];
    *(_DWORD *)a3 = v18->i32[0];
    *(_DWORD *)(a3 + 4) = v20;
    v10 = v21[1];
    goto LABEL_41;
  }
  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(v24, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(v24, "ERROR");
  v22 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)v24);
  v23 = (_QWORD *)fst::cerr(v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"EncodeMapper: decode failed", 27);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
  if (v25 < 0)
    operator delete(v24[0]);
  *((_BYTE *)a1 + 16) = 1;
  v6 = a2[2].i32[0];
  *(_QWORD *)a3 = -1;
  *(int32x2_t *)(a3 + 8) = vdup_n_s32(0x7FC00000u);
LABEL_42:
  *(_DWORD *)(a3 + 16) = v6;
}

void sub_1ADA43684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v27 - 40));
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Encode(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v8;
  int8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  int **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  int **v27;

  v3 = a1 + 32;
  v4 = ((int)(*(_DWORD *)a1 << 31) >> 31) & a2->i32[1];
  v5 = (*(_DWORD *)a1 & 2) == 0;
  LODWORD(v25) = a2->i32[0];
  HIDWORD(v25) = v4;
  v26 = vand_s8(a2[1], (int8x8_t)vcgez_s32(vshl_n_s32(vdup_n_s32(v5), 0x1FuLL)));
  v27 = (int **)&v25;
  v6 = std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>>>::find<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*>((_QWORD *)(a1 + 32), (int **)&v27);
  if (v6)
    return *((unsigned int *)v6 + 6);
  v8 = (_QWORD *)operator new();
  v9 = v26;
  *v8 = v25;
  v8[1] = v9;
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD **)(a1 + 16);
  if ((unint64_t)v11 >= v10)
  {
    v13 = *(_QWORD *)(a1 + 8);
    v14 = ((uint64_t)v11 - v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = v10 - v13;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 24, v17);
    else
      v18 = 0;
    v19 = &v18[8 * v14];
    v20 = &v18[8 * v17];
    *(_QWORD *)v19 = v8;
    v12 = (int **)(v19 + 8);
    v22 = *(char **)(a1 + 8);
    v21 = *(char **)(a1 + 16);
    if (v21 != v22)
    {
      do
      {
        v23 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      v21 = *(char **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 8) = v19;
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v11 = v8;
    v12 = (int **)(v11 + 1);
  }
  *(_QWORD *)(a1 + 16) = v12;
  v24 = ((unint64_t)v12 - *(_QWORD *)(a1 + 8)) >> 3;
  v27 = v12 - 1;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>>>::__emplace_unique_key_args<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::piecewise_construct_t const&,std::tuple<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const* const&>,std::tuple<>>(v3, v12 - 1, (uint64_t)&std::piecewise_construct, &v27)+ 6) = v24;
  return (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Decode(uint64_t a1, int a2)
{
  uint64_t v2;
  fst *v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  char v8;

  if (a2 >= 1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (a2 <= (unint64_t)((*(_QWORD *)(a1 + 16) - v2) >> 3))
      return *(_QWORD *)(v2 + 8 * (a2 - 1));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
  v4 = (_QWORD *)fst::cerr(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"EncodeTable::Decode: unknown decode key: ", 41);
  std::ostream::operator<<();
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
  if (v7 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADA43958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>>>::find<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*>(_QWORD *a1, int **a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey::operator()((uint64_t)(a1 + 4), *a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 5);
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        if (fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual::operator()(v12, v11[2], (uint64_t)*a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey::operator()(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  uint64_t result;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned __int8 *)(a1 + 4);
  v3 = *(unsigned __int8 *)(a1 + 5);
  result = *a2;
  if (v2)
    result += 7853 * a2[1];
  if (v3)
  {
    v5 = a2[2];
    v6 = a2[3];
    v7 = __CFADD__(v6, v5);
    v8 = (v6 + v5);
    v9 = 0x100000000;
    if (!v7)
      v9 = 0;
    result += 7867 * (v9 | v8);
  }
  return result;
}

BOOL fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)a2 == *(_DWORD *)a3
      && *(_DWORD *)(a2 + 4) == *(_DWORD *)(a3 + 4)
      && *(float *)(a2 + 8) == *(float *)(a3 + 8)
      && *(float *)(a2 + 12) == *(float *)(a3 + 12);
}

_QWORD *std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>>>::__emplace_unique_key_args<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::piecewise_construct_t const&,std::tuple<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const* const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey::operator()(a1 + 32, *a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual::operator()(a1 + 40, v14[2], (uint64_t)*a2))
            {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v9;
  v14[2] = **a4;
  *((_DWORD *)v14 + 6) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 40);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v14 = *v23;
LABEL_38:
    *v23 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    v24 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1ADA43D84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::MergeStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  unint64_t v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  int v14;
  _QWORD v15[2];
  int v16;
  uint64_t v17;
  std::vector<int> v18;

  std::vector<int>::vector(&v18, (int)((uint64_t)(a1[5] - a1[4]) >> 3));
  v5 = a1[4];
  v4 = a1[5];
  v6 = v4 - v5;
  if (((unint64_t)(v4 - v5) >> 3))
  {
    v7 = 0;
    v8 = (int)(v6 >> 3);
    begin = v18.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      *begin++ = **(_DWORD **)(v5 + (v7 >> 29));
      v7 += 0x100000000;
      --v8;
    }
    while (v8);
  }
  if ((v6 & 0x7FFFFFFF8) != 0)
  {
    v10 = 0;
    do
    {
      v11 = *(unsigned int **)(v5 + 8 * (int)v10);
      if (v11)
      {
        do
        {
          v12 = *v11;
          (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a2 + 296))(a2, *v11, &v17);
          while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17))
          {
            v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
            v15[0] = *(_QWORD *)v13;
            v15[1] = *(_QWORD *)(v13 + 8);
            v16 = *(_DWORD *)(v13 + 16);
            v16 = v18.__begin_[*(int *)(a1[10] + 4 * v16)];
            if (v12 == v18.__begin_[v10])
              (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 88))(v17, v15);
            else
              (*(void (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2);
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
          }
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          v11 = (unsigned int *)*((_QWORD *)v11 + 1);
        }
        while (v11);
        v5 = a1[4];
        v4 = a1[5];
      }
      ++v10;
    }
    while (v10 < (int)((unint64_t)(v4 - v5) >> 3));
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, v18.__begin_[*(int *)(a1[10] + 4 * v14)]);
  fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
  if (v18.__begin_)
  {
    v18.__end_ = v18.__begin_;
    operator delete(v18.__begin_);
  }
}

void sub_1ADA43F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::AcyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::AcyclicMinimizer(uint64_t a1, _QWORD *a2)
{
  BOOL v4;

  v4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 64))(a2, 0x40000, 1) == 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = v4;
  if (!(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 64))(a2, 0x40000, 1))
    FstCheck(1, "Weight::Properties() & kIdempotent", "../libquasar/libkaldi/tools/openfst/src/include/fst/minimize.h");
  fst::AcyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Initialize((_QWORD *)a1, (uint64_t)a2);
  fst::AcyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Refine((_QWORD *)a1, a2);
  return a1;
}

void sub_1ADA44080(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::Partition<int>::~Partition(v1);
  _Unwind_Resume(a1);
}

void fst::AcyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Initialize(_QWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AcyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::HeightVisitor,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a2, (uint64_t)&v10, 0);
  fst::Partition<int>::Initialize((uint64_t)a1, v12);
  fst::Partition<int>::AllocateClasses((uint64_t)a1, DWORD2(v11) + 1);
  v3 = (_DWORD *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1) != (_QWORD)v10)
  {
    v4 = 0;
    v5 = 0;
    v3 = (_DWORD *)v10;
    do
    {
      v6 = v3[v5];
      v7 = *(_QWORD *)(a1[1] + (v4 >> 29));
      v8 = a1[4];
      v9 = *(_QWORD *)(v8 + 8 * v6);
      if (v9)
      {
        *(_QWORD *)(v9 + 16) = v7;
        v9 = *(_QWORD *)(v8 + 8 * v6);
      }
      *(_QWORD *)(v7 + 8) = v9;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v8 + 8 * v6) = v7;
      *(_DWORD *)(a1[10] + 4 * (v4 >> 32)) = v6;
      ++*(_DWORD *)(a1[13] + 4 * v6);
      ++v5;
      v3 = (_DWORD *)v10;
      v4 += 0x100000000;
    }
    while (v5 < (uint64_t)(*((_QWORD *)&v10 + 1) - v10) >> 2);
  }
  if (v3)
  {
    *((_QWORD *)&v10 + 1) = v3;
    operator delete(v3);
  }
}

void sub_1ADA44180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::AcyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Refine(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t *v16;
  _QWORD *v17[4];
  int v18;
  unsigned int *v19;

  v2 = a1[5] - a1[4];
  if (((unint64_t)v2 >> 3))
  {
    v5 = 0;
    v6 = (int)(v2 >> 3);
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    do
    {
      v17[0] = 0;
      v17[1] = 0;
      v17[2] = a2;
      v17[3] = a1;
      v18 = 7;
      v16 = (uint64_t *)v17;
      v8 = *(_QWORD *)(a1[4] + 8 * (int)v5);
      v15 = *(_DWORD *)v8;
      v19 = (unsigned int *)&v15;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8) = v5;
      for (i = *(_QWORD *)(v8 + 8); i; i = *(_QWORD *)(i + 8))
      {
        v15 = 0;
        v15 = *(_DWORD *)i;
        v10 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>((uint64_t)&v16, (unsigned int *)&v15);
        if (v17 == (_QWORD **)v10)
          v11 = fst::Partition<int>::AddClass((uint64_t)a1);
        else
          v11 = *(_DWORD *)(v10 + 32);
        v19 = (unsigned int *)&v15;
        *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8) = v11;
      }
      v12 = *(_QWORD *)(a1[4] + 8 * (int)v5);
      while (v12)
      {
        v15 = 0;
        v15 = *(_DWORD *)v12;
        v13 = *(_DWORD *)(a1[10] + 4 * v15);
        v19 = (unsigned int *)&v15;
        v14 = *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8);
        v12 = *(_QWORD *)(v12 + 8);
        if (v13 != v14)
          fst::Partition<int>::Move(a1, v15, v14);
      }
      std::__tree<int>::destroy((uint64_t)&v16, v17[0]);
      ++v5;
    }
    while (v5 != v7);
  }
}

void sub_1ADA44360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<int>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AcyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::HeightVisitor,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int v36;
  std::vector<char>::pointer end;
  char *v38;
  std::vector<char>::pointer v39;
  int64_t v40;
  int64_t v41;
  unint64_t v42;
  size_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char v48;
  char v49;
  uint64_t v50;
  int v51;
  std::vector<char>::value_type v52[8];
  std::vector<char>::value_type __x[8];
  int v54;
  int v55;
  void *v56;
  _QWORD v57[6];
  _QWORD *v58;
  _OWORD v59[2];
  __int128 v60;
  std::vector<char> v61;

  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v51 == -1)
    return;
  memset(&v61, 0, sizeof(v61));
  v60 = 0u;
  memset(v59, 0, sizeof(v59));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MemoryPool(&v56, 64);
  v50 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v50)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v51 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v61.__end_ - v61.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v61.__end_ - v61.__begin_))
      v61.__end_ = &v61.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v61, (int)v6 - (unint64_t)(v61.__end_ - v61.__begin_), __x);
  }
  v55 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v51 >= (int)v6)
    goto LABEL_107;
  v7 = v51;
  v49 = a3;
  do
  {
    v61.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v58;
    if (v58)
    {
      v58 = (_QWORD *)v58[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v57, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v52 = v8;
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::push_back(v59, v52);
    inited = fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HeightVisitor::InitState((char **)a2, v7);
LABEL_15:
    v10 = inited;
    while (*((_QWORD *)&v60 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v59[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v60 + 1) + v60 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v60 + 1) + v60 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v61.__end_ - v61.__begin_;
      if (v61.__end_ - v61.__begin_ <= v12)
      {
        v6 = (v12 + 1);
        v52[0] = 0;
        if ((int)v6 <= v13)
        {
          if ((int)v6 < v13)
            v61.__end_ = &v61.__begin_[(int)v6];
        }
        else
        {
          std::vector<char>::__append(&v61, (int)v6 - v13, v52);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_32;
      v14 = v11[1];
      if (!v14)
      {
        if (v11[5] < v11[3])
          goto LABEL_28;
        goto LABEL_32;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
      {
LABEL_32:
        v61.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v58;
        v58 = v11;
        --*((_QWORD *)&v60 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v59, 1);
        if (*((_QWORD *)&v60 + 1))
        {
          v22 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)&v59[0] + 1)
                                             + (((unint64_t)(*((_QWORD *)&v60 + 1) + v60 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((*((_QWORD *)&v60 + 1) + v60 - 1) & 0x1FF));
          v23 = *v22;
          v24 = *((_QWORD *)v22 + 1);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          v25 = *(char **)a2;
          v26 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v12);
          if (v26 == -1)
          {
            v26 = 0;
            *(_DWORD *)&v25[4 * v12] = 0;
            if ((v23 & 0x80000000) != 0)
              goto LABEL_49;
          }
          else if ((v23 & 0x80000000) != 0)
          {
            goto LABEL_49;
          }
          v27 = v26 + 1;
          if (v26 >= *(_DWORD *)&v25[4 * v23])
            *(_DWORD *)&v25[4 * v23] = v27;
          if (*(_QWORD *)(a2 + 24) < (unint64_t)v27)
            *(_QWORD *)(a2 + 24) = v27;
LABEL_49:
          v28 = *((_QWORD *)v22 + 1);
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
          else
            ++*((_QWORD *)v22 + 5);
        }
        else if (*(_DWORD *)(*(_QWORD *)a2 + 4 * v12) == -1)
        {
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v12) = 0;
        }
      }
      else
      {
        v15 = v11[1];
        if (v15)
        {
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
          goto LABEL_29;
        }
LABEL_28:
        v16 = v11[2] + 20 * v11[5];
LABEL_29:
        v17 = *(int *)(v16 + 16);
        begin = v61.__begin_;
        v19 = v61.__end_ - v61.__begin_;
        if (v61.__end_ - v61.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v52[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v61.__end_ = &v61.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v61, (int)v6 - v19, v52);
            v17 = *(int *)(v16 + 16);
            begin = v61.__begin_;
          }
        }
        v29 = begin[v17];
        if (v29 != 1)
        {
          if (v29 != 2)
          {
            begin[v17] = 1;
            v32 = (uint64_t)v58;
            if (v58)
            {
              v58 = (_QWORD *)v58[6];
            }
            else
            {
              v32 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v57, 1);
              *(_QWORD *)(v32 + 48) = 0;
            }
            *(_DWORD *)v32 = *(_DWORD *)(v16 + 16);
            *(_QWORD *)(v32 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v52 = v32;
            std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::push_back(v59, v52);
            inited = fst::AcyclicMinimizer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::HeightVisitor::InitState((char **)a2, *(_DWORD *)(v16 + 16));
            goto LABEL_15;
          }
          v30 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v17);
          if (v30 >= *(_DWORD *)(*(_QWORD *)a2 + 4 * v12))
            *(_DWORD *)(*(_QWORD *)a2 + 4 * v12) = v30 + 1;
        }
        v31 = v11[1];
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
        else
          ++v11[5];
        v10 = 1;
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v51)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v33 = &v61.__begin_[(int)v7];
      v34 = (int)v6 - (uint64_t)(int)v7;
      while (*v33++)
      {
        v7 = (v7 + 1);
        if (!--v34)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v50 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_77:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_83;
      }
    }
    else if (v55 >= v54)
    {
      continue;
    }
    v36 = v55;
LABEL_83:
    if (v36 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v55;
      goto LABEL_77;
    }
    end = v61.__end_;
    if (v61.__end_ >= v61.__end_cap_.__value_)
    {
      v39 = v61.__begin_;
      v40 = v61.__end_ - v61.__begin_;
      v41 = v61.__end_ - v61.__begin_ + 1;
      if (v41 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v42 = v61.__end_cap_.__value_ - v61.__begin_;
      if (2 * (v61.__end_cap_.__value_ - v61.__begin_) > (unint64_t)v41)
        v41 = 2 * v42;
      if (v42 >= 0x3FFFFFFFFFFFFFFFLL)
        v43 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
        v44 = (char *)operator new(v43);
      else
        v44 = 0;
      v45 = &v44[v40];
      v46 = &v44[v40];
      *v46 = 0;
      v38 = v46 + 1;
      if (end != v39)
      {
        v47 = &end[~(unint64_t)v39];
        do
        {
          v48 = *--end;
          (v47--)[(_QWORD)v44] = v48;
        }
        while (end != v39);
        end = v61.__begin_;
        v45 = v44;
      }
      v61.__begin_ = v45;
      v61.__end_ = v38;
      v61.__end_cap_.__value_ = &v44[v43];
      if (end)
        operator delete(end);
    }
    else
    {
      *v61.__end_ = 0;
      v38 = end + 1;
    }
    v61.__end_ = v38;
    v6 = (v6 + 1);
    a3 = v49;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_107:
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v56 = &unk_1E5D198A0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena(v57);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v56);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v59);
  if (v61.__begin_)
  {
    v61.__end_ = v61.__begin_;
    operator delete(v61.__begin_);
  }
}

void sub_1ADA44A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198A0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__find_equal<int>((uint64_t)a1, &v10, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = **a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__find_equal<int>(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v7;
  uint64_t *v8;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v7 = (_QWORD *)(a1 + 24);
    do
    {
      while (1)
      {
        v8 = v4;
        if (!fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v7, *a3, *((unsigned int *)v4 + 7)))break;
        v4 = (uint64_t *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v7, *((unsigned int *)v8 + 7), *a3))break;
      v5 = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v23[3];
  _DWORD *v24;
  unint64_t v25;
  _QWORD v26[3];
  _DWORD *v27;
  unint64_t v28;

  v6 = *((_DWORD *)a1 + 4);
  if ((v6 & 1) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(v26, *a1, a2);
    if (__CFADD__(HIDWORD(v26[0]), v26[0]))
      v16 = 0x100000000;
    else
      v16 = 0;
    v17 = v16 | (HIDWORD(v26[0]) + LODWORD(v26[0]));
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(v26, *a1, a3);
    if (__CFADD__(HIDWORD(v26[0]), v26[0]))
      v18 = 0x100000000;
    else
      v18 = 0;
    v19 = v18 | (HIDWORD(v26[0]) + LODWORD(v26[0]));
    if (v17 < v19)
      return 1;
    if (v17 <= v19 && (a1[2] & 2) != 0)
      goto LABEL_3;
    return 0;
  }
  if ((v6 & 2) == 0)
    return 0;
LABEL_3:
  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a2);
  if (v7 < (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a3))
    return 1;
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a2);
  if (v8 > (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a3) || (a1[2] & 4) == 0)
    return 0;
  v9 = *a1;
  v28 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v9 + 136))(v9, a2, v26);
  v10 = *a1;
  v25 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v10 + 136))(v10, a3, v23);
  while (1)
  {
    if (v26[0])
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v26[0] + 24))(v26[0]) & 1) != 0)
        goto LABEL_42;
    }
    else if (v28 >= v26[2])
    {
      goto LABEL_42;
    }
    if (v23[0])
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v23[0] + 24))(v23[0]) & 1) != 0)
        goto LABEL_42;
    }
    else if (v25 >= v23[2])
    {
LABEL_42:
      v20 = 0;
      v21 = 1;
      goto LABEL_45;
    }
    if (v26[0])
      v11 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v26[0] + 32))(v26[0]);
    else
      v11 = (_DWORD *)(v26[1] + 20 * v28);
    if (v23[0])
      v12 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v23[0] + 32))(v23[0]);
    else
      v12 = (_DWORD *)(v23[1] + 20 * v25);
    if (*v11 < *v12)
      goto LABEL_43;
    if (*v11 > *v12)
      break;
    v13 = *(_QWORD *)(a1[1] + 80);
    v14 = *(_DWORD *)(v13 + 4 * (int)v11[4]);
    v15 = *(_DWORD *)(v13 + 4 * (int)v12[4]);
    if (v14 < v15)
    {
LABEL_43:
      v21 = 0;
      v20 = 1;
      goto LABEL_45;
    }
    if (v14 > v15)
      break;
    if (v26[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v26[0] + 40))(v26[0]);
    else
      ++v28;
    if (v23[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v23[0] + 40))(v23[0]);
    else
      ++v25;
  }
  v21 = 0;
  v20 = 0;
LABEL_45:
  if (v23[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v23[0] + 8))(v23[0]);
  }
  else if (v24)
  {
    --*v24;
  }
  if (v26[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v26[0] + 8))(v26[0]);
  }
  else if (v27)
  {
    --*v27;
  }
  if ((v21 & 1) != 0)
    return 0;
  return v20;
}

void sub_1ADA44EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  else if (a17)
  {
    --*a17;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 24);
  v6 = a1 + 8;
  do
  {
    v7 = fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v5, *(unsigned int *)(v3 + 28), *a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2
    || fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v5, *a2, *(unsigned int *)(v6 + 28)))
  {
    return v2;
  }
  return v6;
}

uint64_t fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::CyclicMinimizer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x40000, 1);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = v4 == 0;
  *(_DWORD *)(a1 + 192) = 2;
  *(_BYTE *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 184) = &unk_1E5D27B60;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorFst((_QWORD *)(a1 + 248));
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x40000, 1))
    FstCheck(1, "Weight::Properties() & kIdempotent", "../libquasar/libkaldi/tools/openfst/src/include/fst/minimize.h");
  fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::Initialize((_QWORD *)a1, a2);
  fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::Compute((_QWORD *)a1);
  return a1;
}

void sub_1ADA450DC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::deque<int>::~deque[abi:ne180100](v2);
  fst::Partition<int>::~Partition(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::Initialize(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = (uint64_t)(a1 + 31);
  fst::Reverse<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a2, a1 + 31, 1);
  fst::ArcSort<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v4);
  fst::Partition<int>::Initialize((uint64_t)a1, (((*(_QWORD *)(a1[32] + 72) - *(_QWORD *)(a1[32] + 64)) << 29) - 0x100000000) >> 32);
  fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::PrePartition(a1, a2);
  result = (_QWORD *)operator new();
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = a1;
  a1[33] = result;
  return result;
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::Compute(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  v1 = a1[30];
  if (v1)
  {
    v3 = (uint64_t)(a1 + 25);
    do
    {
      v4 = *(_DWORD *)(*(_QWORD *)(a1[26] + ((a1[29] >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (a1[29] & 0x3FFLL));
      ++a1[29];
      a1[30] = v1 - 1;
      std::deque<int>::__maybe_remove_front_spare[abi:ne180100](v3, 1);
      fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::Split(a1, v4);
      v1 = a1[30];
    }
    while (v1);
  }
}

void fst::ArcSort<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1)
{
  uint64_t v1[2];
  void *__p[2];
  __int128 v3;
  char v4;

  v1[0] = a1;
  v1[1] = (uint64_t)&v4;
  *(_OWORD *)__p = 0u;
  v3 = 0u;
  fst::StateMap<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1ADA4528C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::PrePartition(_QWORD *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  fst *v27;
  _QWORD *v28;
  void *v29[2];
  char v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  void *__p;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;

  if (FLAGS_v >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
    v4 = fst::LogMessage::LogMessage((fst *)&v32, (uint64_t)&__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"PrePartition", 12);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v32);
    if (SHIBYTE(v37) < 0)
      operator delete(__p);
  }
  v37 = 0;
  v38 = a2;
  v39 = a1;
  v40 = 1;
  __p = &v36;
  v36 = 0;
  v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v32);
  v6 = fst::Partition<int>::AddClass((uint64_t)a1);
  if (v32)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  else
    v7 = v34;
  v8 = *(_QWORD *)(a1[1] + 8 * v7);
  v9 = a1[4];
  v10 = *(_QWORD *)(v9 + 8 * v6);
  if (v10)
  {
    *(_QWORD *)(v10 + 16) = v8;
    v10 = *(_QWORD *)(v9 + 8 * v6);
  }
  *(_QWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v9 + 8 * v6) = v8;
  *(_DWORD *)(a1[10] + 4 * v7) = v6;
  ++*(_DWORD *)(a1[13] + 4 * v6);
  if (v32)
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  else
    v11 = v34;
  v31 = v11;
  v29[0] = &v31;
  *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v6;
  LODWORD(v29[0]) = v6;
  std::deque<int>::push_front((uint64_t)(a1 + 25), v29);
  v12 = v32;
  if (v32)
    goto LABEL_28;
  ++v34;
  while (v32)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32) & 1) != 0)
      goto LABEL_30;
    v31 = 0;
    if (!v32)
      goto LABEL_19;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
LABEL_20:
    v31 = v13;
    v14 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>((uint64_t)&__p, (unsigned int *)&v31);
    if (&v36 == (_QWORD **)v14)
    {
      v21 = fst::Partition<int>::AddClass((uint64_t)a1);
      v22 = v21;
      v23 = v31;
      v24 = *(_QWORD *)(a1[1] + 8 * v31);
      v25 = a1[4];
      v26 = *(_QWORD *)(v25 + 8 * v21);
      if (v26)
      {
        *(_QWORD *)(v26 + 16) = v24;
        v26 = *(_QWORD *)(v25 + 8 * v21);
      }
      *(_QWORD *)(v24 + 8) = v26;
      *(_QWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v25 + 8 * v21) = v24;
      *(_DWORD *)(a1[10] + 4 * v23) = v21;
      ++*(_DWORD *)(a1[13] + 4 * v21);
      v29[0] = &v31;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v21;
      LODWORD(v29[0]) = v22;
      std::deque<int>::push_front((uint64_t)(a1 + 25), v29);
    }
    else
    {
      v15 = v31;
      v16 = *(_DWORD *)(v14 + 32);
      v17 = *(_QWORD *)(a1[1] + 8 * v31);
      v18 = a1[4];
      v19 = *(_QWORD *)(v18 + 8 * v16);
      if (v19)
      {
        *(_QWORD *)(v19 + 16) = v17;
        v19 = *(_QWORD *)(v18 + 8 * v16);
      }
      *(_QWORD *)(v17 + 8) = v19;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)(v18 + 8 * v16) = v17;
      *(_DWORD *)(a1[10] + 4 * v15) = v16;
      ++*(_DWORD *)(a1[13] + 4 * v16);
      v20 = *(_DWORD *)(v14 + 32);
      v29[0] = &v31;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v20;
    }
    v12 = v32;
    if (v32)
LABEL_28:
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v12);
    else
      ++v34;
  }
  if (v34 < v33)
  {
LABEL_19:
    v13 = v34;
    goto LABEL_20;
  }
LABEL_30:
  if (FLAGS_v >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "INFO");
    v27 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)v29);
    v28 = (_QWORD *)fst::cerr(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Initial Partition: ", 19);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (v30 < 0)
      operator delete(v29[0]);
  }
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  std::__tree<int>::destroy((uint64_t)&__p, v36);
}

void sub_1ADA45674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,_QWORD *a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0)
    operator delete(__p);
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  std::__tree<int>::destroy((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

uint64_t fst::StateMap<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = a2[5]; ; a2[5] = i)
        {
          v9 = a2[2];
          if (i >= 0xCCCCCCCCCCCCCCCDLL * ((a2[3] - v9) >> 2))
            break;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 208))(a1, v7, v9 + 20 * i);
          i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(&v10, *a2, v7);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v7, &v10);
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _DWORD *v15;
  unint64_t v16;

  a1[5] = 0;
  v4 = a1 + 2;
  a1[3] = a1[2];
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::reserve(v4, v5);
  v6 = *a1;
  v16 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v14);
  while (1)
  {
    if (!v14[0])
    {
      if (v16 >= v14[2])
        goto LABEL_16;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v14[0] + 24))(v14[0]))
      break;
    if (v14[0])
    {
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v14[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = v14[1] + 20 * v16;
LABEL_8:
    v8 = a1[3];
    if (v8 >= a1[4])
    {
      v9 = std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const&>(v4, v7);
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v7;
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v7 + 16);
      v9 = v8 + 20;
    }
    a1[3] = v9;
    if (v14[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v14[0] + 40))(v14[0]);
    else
      ++v16;
  }
  if (v14[0])
  {
    (*(void (**)(void))(*(_QWORD *)v14[0] + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (v15)
    --*v15;
LABEL_18:
  v10 = (uint64_t *)a1[2];
  v11 = (uint64_t *)a1[3];
  v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v11 - (char *)v10) >> 2));
  if (v11 == v10)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>*,false>(v10, v11, (uint64_t)v14, v13, 1);
}

void sub_1ADA45A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_QWORD *)(a2 - 20);
      v7 = *(_QWORD *)a1;
      if ((int)v6 < (int)*(_QWORD *)a1)
      {
        v8 = *(_DWORD *)(a1 + 16);
        *(_QWORD *)a1 = v6;
        v9 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 4);
        v10 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a2 - 20) = v7;
        *(_QWORD *)(a2 - 12) = v10;
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)(a1 + 20), (uint64_t *)(a2 - 20));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a1 + 20, a1 + 40, a2 - 20);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a1 + 20, a1 + 40, a1 + 60, a2 - 20);
      return 1;
    default:
      v11 = (uint64_t *)(a1 + 40);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)(a1 + 20), (uint64_t *)(a1 + 40));
      v12 = a1 + 60;
      if (a1 + 60 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(_QWORD *)v12;
    v16 = *v11;
    if ((int)*(_QWORD *)v12 < (int)*v11)
    {
      v17 = *(_QWORD *)(v12 + 8);
      v18 = *(_DWORD *)(v12 + 16);
      v19 = v13;
      while (1)
      {
        v20 = a1 + v19;
        *(_QWORD *)(v20 + 60) = v16;
        *(_QWORD *)(v20 + 68) = *(_QWORD *)(a1 + v19 + 48);
        *(_DWORD *)(v20 + 76) = *(_DWORD *)(a1 + v19 + 56);
        if (v19 == -40)
          break;
        v16 = *(_QWORD *)(v20 + 20);
        v19 -= 20;
        if ((int)v15 >= (int)v16)
        {
          v21 = a1 + v19 + 60;
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *(_QWORD *)v21 = v15;
      *(_QWORD *)(v21 + 8) = v17;
      *(_DWORD *)(v21 + 16) = v18;
      if (++v14 == 8)
        return v12 + 20 == a2;
    }
    v11 = (uint64_t *)v12;
    v13 += 20;
    v12 += 20;
    if (v12 == a2)
      return 1;
  }
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::Split(_QWORD *a1, int a2)
{
  int *i;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD **v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  _DWORD *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void **v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  void *v51;

  for (i = *(int **)(a1[4] + 8 * a2); i; i = (int *)*((_QWORD *)i + 1))
  {
    v4 = *i + 1;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[32] + 64) + 8 * v4) + 32) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[32] + 64) + 8 * v4)
                                                                                           + 24))
    {
      v5 = (void **)a1[33];
      v6 = operator new();
      *(_QWORD *)(v6 + 32) = 0;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[31] + 136))(a1 + 31, v4, v6);
      v7 = (unint64_t)v5[2];
      v8 = (uint64_t *)v5[1];
      if ((unint64_t)v8 >= v7)
      {
        v10 = ((char *)v8 - (_BYTE *)*v5) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v11 = v7 - (_QWORD)*v5;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v5 + 2), v13);
        else
          v14 = 0;
        v15 = (uint64_t *)&v14[8 * v10];
        *v15 = v6;
        v9 = (uint64_t)(v15 + 1);
        v17 = (char *)*v5;
        v16 = (char *)v5[1];
        if (v16 != *v5)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *--v15 = v18;
          }
          while (v16 != v17);
          v16 = (char *)*v5;
        }
        *v5 = v15;
        v5[1] = (void *)v9;
        v5[2] = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8 = v6;
        v9 = (uint64_t)(v8 + 1);
      }
      v5[1] = (void *)v9;
      v19 = *v5;
      v51 = v5[3];
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> **>>((_BOOL8)v19, v9, (uint64_t)&v51, (v9 - (uint64_t)v19) >> 3);
    }
  }
  v20 = a1[33];
  v21 = *(_QWORD **)v20;
  v22 = (_QWORD *)(v20 + 8);
  v23 = *(_QWORD *)(v20 + 8);
  if (*(_QWORD *)v20 != v23)
  {
    v24 = -1;
    while (1)
    {
      v25 = (_QWORD *)*v21;
      v51 = *(void **)(v20 + 24);
      if (v23 - (uint64_t)v21 >= 9)
      {
        v26 = (_QWORD *)*v21;
        v27 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> **>>(v21, (uint64_t)&v51, (unint64_t)(v23 - (_QWORD)v21) >> 3);
        v28 = (_QWORD *)(v23 - 8);
        if ((_QWORD **)(v23 - 8) == v27)
        {
          *v27 = v26;
        }
        else
        {
          *v27 = (_QWORD *)*v28;
          *v28 = v26;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> **>>((_BOOL8)v21, (uint64_t)(v27 + 1), (uint64_t)&v51, v27 + 1 - (_QWORD **)v21);
        }
      }
      *v22 -= 8;
      if (!*v25)
        break;
      v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 24))(*v25);
      v30 = *v25;
      if ((v29 & 1) == 0)
      {
        if (v30)
        {
          v32 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
          if (*v25)
          {
            v33 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 32))(*v25);
            goto LABEL_40;
          }
        }
        else
        {
LABEL_38:
          v32 = (int *)(v25[1] + 20 * v25[4]);
        }
        v33 = v25[1] + 20 * v25[4];
LABEL_40:
        v34 = *(int *)(v33 + 16);
        v35 = *v32;
        if (v24 != *v32)
          fst::Partition<int>::FinalizeSplit<fst::LifoQueue<int>>((uint64_t)a1, (uint64_t)(a1 + 23));
        if (*(_DWORD *)(a1[13] + 4 * *(int *)(a1[10] + 4 * (v34 - 1))) >= 2u)
          fst::Partition<int>::SplitOn(a1, v34 - 1);
        if (*v25)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v25 + 40))(*v25);
          if (*v25)
          {
            if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v25 + 24))(*v25) & 1) != 0)
            {
              if (*v25)
              {
                (*(void (**)(_QWORD))(*(_QWORD *)*v25 + 8))(*v25);
                goto LABEL_55;
              }
LABEL_53:
              v40 = (_DWORD *)v25[3];
              if (v40)
                --*v40;
LABEL_55:
              MEMORY[0x1AF44D190](v25, 0x1070C401ACC3EEFLL);
LABEL_71:
              v24 = v35;
              goto LABEL_72;
            }
LABEL_51:
            v36 = (void **)a1[33];
            v37 = (char *)v36[1];
            v38 = (unint64_t)v36[2];
            if ((unint64_t)v37 >= v38)
            {
              v41 = (v37 - (_BYTE *)*v36) >> 3;
              if ((unint64_t)(v41 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v42 = v38 - (_QWORD)*v36;
              v43 = v42 >> 2;
              if (v42 >> 2 <= (unint64_t)(v41 + 1))
                v43 = v41 + 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                v44 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v44 = v43;
              if (v44)
                v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v36 + 2), v44);
              else
                v45 = 0;
              v46 = &v45[8 * v41];
              *(_QWORD *)v46 = v25;
              v39 = (uint64_t)(v46 + 8);
              v48 = (char *)*v36;
              v47 = (char *)v36[1];
              if (v47 != *v36)
              {
                do
                {
                  v49 = *((_QWORD *)v47 - 1);
                  v47 -= 8;
                  *((_QWORD *)v46 - 1) = v49;
                  v46 -= 8;
                }
                while (v47 != v48);
                v47 = (char *)*v36;
              }
              *v36 = v46;
              v36[1] = (void *)v39;
              v36[2] = &v45[8 * v44];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_QWORD *)v37 = v25;
              v39 = (uint64_t)(v37 + 8);
            }
            v36[1] = (void *)v39;
            v50 = *v36;
            v51 = v36[3];
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> **>>((_BOOL8)v50, v39, (uint64_t)&v51, (v39 - (uint64_t)v50) >> 3);
            goto LABEL_71;
          }
        }
        else
        {
          ++v25[4];
        }
        if (v25[4] >= v25[2])
          goto LABEL_53;
        goto LABEL_51;
      }
      if (!v30)
        goto LABEL_32;
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
LABEL_34:
      MEMORY[0x1AF44D190](v25, 0x1070C401ACC3EEFLL);
LABEL_72:
      v20 = a1[33];
      v21 = *(_QWORD **)v20;
      v22 = (_QWORD *)(v20 + 8);
      v23 = *(_QWORD *)(v20 + 8);
      if (*(_QWORD *)v20 == v23)
        goto LABEL_73;
    }
    if (v25[4] < v25[2])
      goto LABEL_38;
LABEL_32:
    v31 = (_DWORD *)v25[3];
    if (v31)
      --*v31;
    goto LABEL_34;
  }
LABEL_73:
  fst::Partition<int>::FinalizeSplit<fst::LifoQueue<int>>((uint64_t)a1, (uint64_t)(a1 + 23));
}

void sub_1ADA4647C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C401ACC3EEFLL);
  _Unwind_Resume(a1);
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> **>>(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (_QWORD **)(result + 8 * (v4 >> 1));
    v9 = (_QWORD **)(a2 - 8);
    result = fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a3, *v8, *(_QWORD **)(a2 - 8));
    if (result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (_QWORD **)(v6 + 8 * v7);
        result = fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a3, *v8, v10);
        v9 = (_QWORD **)v11;
      }
      while (result);
      *v11 = v10;
    }
  }
  return result;
}

BOOL fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v4;
  _DWORD *v5;

  if (*a2)
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
  else
    v4 = (_DWORD *)(a2[1] + 20 * a2[4]);
  if (*a3)
    v5 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 32))(*a3);
  else
    v5 = (_DWORD *)(a3[1] + 20 * a3[4]);
  return *v4 > *v5;
}

_QWORD **std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> **>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (_QWORD **)&a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a2, *v9, (_QWORD *)a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

_QWORD *fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::~CyclicMinimizer(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  _DWORD *v4;
  int v5;

  v2 = a1[33];
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1AF44D190](v2, 0xE0C40DD5D8FE3);
  }
  a1[31] = &unk_1E5D24A40;
  v4 = (_DWORD *)a1[32];
  if (v4)
  {
    v5 = v4[14] - 1;
    v4[14] = v5;
    if (!v5)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  }
  std::deque<int>::~deque[abi:ne180100](a1 + 25);
  return fst::Partition<int>::~Partition(a1);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = a2[5]; ; a2[5] = i)
        {
          v9 = a2[2];
          if (i >= 0xCCCCCCCCCCCCCCCDLL * ((a2[3] - v9) >> 2))
            break;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 208))(a1, v7, v9 + 20 * i);
          i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(&v10, *a2, v7);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v7, &v10);
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0xA6A0A950007, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::SetState(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;

  a1[5] = 0;
  v4 = a1 + 2;
  a1[3] = a1[2];
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::reserve(v4, v5);
  v6 = *a1;
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_16;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (v15[0])
    {
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = v15[1] + 20 * v17;
LABEL_8:
    v8 = a1[3];
    if (v8 >= a1[4])
    {
      v9 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(v4, v7);
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v7;
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v7 + 16);
      v9 = v8 + 20;
    }
    a1[3] = v9;
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (v16)
    --*v16;
LABEL_18:
  v10 = (uint64_t *)a1[2];
  v11 = (char *)a1[3];
  v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v11 - (char *)v10) >> 2));
  if (v11 == (char *)v10)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(v10, v11, (uint64_t)v15, v13, 1);
  v14 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *>,std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *>,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Equal &>(a1[2], a1[3], (uint64_t)v15);
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::resize(v4, 0xCCCCCCCCCCCCCCCDLL * ((v14 - a1[2]) >> 2));
}

void sub_1ADA46A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 20 * a2;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(uint64_t *a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t *v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;

  if (result == a2)
    return result;
  v2 = result + 20;
  if (result + 20 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = *(_DWORD *)(v5 + 20);
    if (v6 >= *(_DWORD *)v5)
    {
      if (v6 > *(_DWORD *)v5)
        goto LABEL_21;
      v15 = *(_DWORD *)(v5 + 24);
      v16 = *(_DWORD *)(v5 + 4);
      if (v15 >= v16 && (v15 > v16 || *(_DWORD *)(v5 + 36) >= *(_DWORD *)(v5 + 16)))
        goto LABEL_21;
    }
    v7 = *(_QWORD *)(v5 + 20);
    v8 = *(_QWORD *)(v5 + 28);
    v9 = *(_DWORD *)(v5 + 36);
    *(_QWORD *)(v5 + 20) = *(_QWORD *)v5;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v5 + 8);
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v5 + 16);
    v10 = result;
    if (v5 == result)
      goto LABEL_20;
    v11 = v3;
    while (1)
    {
      v12 = result + v11;
      v13 = *(_DWORD *)(result + v11 - 20);
      if (v13 <= (int)v7)
      {
        if (v13 < (int)v7)
          goto LABEL_19;
        v14 = *(_DWORD *)(result + v11 - 16);
        if (v14 <= SHIDWORD(v7))
          break;
      }
LABEL_12:
      v5 -= 20;
      *(_QWORD *)v12 = *(_QWORD *)(v12 - 20);
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(v12 - 12);
      *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 - 4);
      v11 -= 20;
      if (!v11)
      {
        v10 = result;
        goto LABEL_20;
      }
    }
    if (v14 >= SHIDWORD(v7))
    {
      v10 = result + v11;
      if (v9 >= *(_DWORD *)(result + v11 - 4))
        goto LABEL_20;
      goto LABEL_12;
    }
LABEL_19:
    v10 = v5;
LABEL_20:
    *(_QWORD *)v10 = v7;
    *(_QWORD *)(v10 + 8) = v8;
    *(_DWORD *)(v10 + 16) = v9;
LABEL_21:
    v2 = v4 + 20;
    v3 += 20;
  }
  while (v4 + 20 != a2);
  return result;
}

_QWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;

  if (result != a2)
  {
    v2 = (_QWORD *)((char *)result + 20);
    if ((_QWORD *)((char *)result + 20) != a2)
    {
      v3 = result + 1;
      do
      {
        v4 = result;
        result = v2;
        v5 = *((_DWORD *)v4 + 5);
        if (v5 < *(_DWORD *)v4
          || v5 <= *(_DWORD *)v4
          && ((v14 = *((_DWORD *)v4 + 6), v15 = *((_DWORD *)v4 + 1), v14 < v15)
           || v14 <= v15 && *((_DWORD *)v4 + 9) < *((_DWORD *)v4 + 4)))
        {
          v6 = *result;
          v7 = *(_QWORD *)((char *)v4 + 28);
          v8 = *((_DWORD *)v4 + 9);
          v9 = HIDWORD(*result);
          v10 = v3;
          do
          {
            do
            {
              v11 = v10;
              *(_QWORD *)((char *)v10 + 12) = *(v10 - 1);
              *(_QWORD *)((char *)v10 + 20) = *v10;
              *((_DWORD *)v10 + 7) = *((_DWORD *)v10 + 2);
              v12 = *((_DWORD *)v10 - 7);
              v10 = (_QWORD *)((char *)v10 - 20);
            }
            while (v12 > (int)v6);
            if (v12 < (int)v6)
              break;
            v13 = *((_DWORD *)v11 - 6);
          }
          while (v13 > (int)v9 || v13 >= (int)v9 && v8 < *((_DWORD *)v11 - 3));
          *(v11 - 1) = v6;
          *v11 = v7;
          *((_DWORD *)v11 + 2) = v8;
        }
        v2 = (_QWORD *)((char *)result + 20);
        v3 = (_QWORD *)((char *)v3 + 20);
      }
      while ((_QWORD *)((char *)result + 20) != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t *a1, int *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;

  v3 = *a2;
  if (*a2 < *(_DWORD *)a1
    || v3 <= *(_DWORD *)a1
    && ((v25 = a2[1], v26 = *((_DWORD *)a1 + 1), v25 < v26) || v25 <= v26 && a2[4] < *((_DWORD *)a1 + 4)))
  {
    if (*(_DWORD *)a3 < v3
      || *(_DWORD *)a3 <= v3
      && ((v19 = *((_DWORD *)a3 + 1), v20 = a2[1], v19 < v20) || v19 <= v20 && *((_DWORD *)a3 + 4) < a2[4]))
    {
      v4 = *a1;
      v5 = *((_DWORD *)a1 + 4);
      *a1 = *a3;
      v6 = a3[1];
      *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
      v7 = a1[1];
      a1[1] = v6;
      *a3 = v4;
      a3[1] = v7;
      *((_DWORD *)a3 + 4) = v5;
    }
    else
    {
      v21 = *a1;
      v22 = *((_DWORD *)a1 + 2);
      v23 = *((_DWORD *)a1 + 3);
      v24 = *((_DWORD *)a1 + 4);
      *a1 = *(_QWORD *)a2;
      a1[1] = *((_QWORD *)a2 + 1);
      *((_DWORD *)a1 + 4) = a2[4];
      *(_QWORD *)a2 = v21;
      a2[2] = v22;
      a2[3] = v23;
      a2[4] = v24;
      if (*(_DWORD *)a3 < (int)v21
        || *(_DWORD *)a3 <= (int)v21
        && ((v29 = *((_DWORD *)a3 + 1), v29 < SHIDWORD(v21)) || v29 <= SHIDWORD(v21) && *((_DWORD *)a3 + 4) < v24))
      {
        *(_QWORD *)a2 = *a3;
        *((_QWORD *)a2 + 1) = a3[1];
        a2[4] = *((_DWORD *)a3 + 4);
        *a3 = v21;
        *((_DWORD *)a3 + 2) = v22;
        *((_DWORD *)a3 + 3) = v23;
        *((_DWORD *)a3 + 4) = v24;
        return 2;
      }
    }
    return 1;
  }
  if (*(_DWORD *)a3 < v3
    || *(_DWORD *)a3 <= v3
    && ((v9 = *((_DWORD *)a3 + 1), v10 = a2[1], v9 < v10) || v9 <= v10 && *((_DWORD *)a3 + 4) < a2[4]))
  {
    v11 = *(_QWORD *)a2;
    v12 = a2[4];
    *(_QWORD *)a2 = *a3;
    v13 = a3[1];
    a2[4] = *((_DWORD *)a3 + 4);
    v14 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v13;
    *a3 = v11;
    a3[1] = v14;
    *((_DWORD *)a3 + 4) = v12;
    if (*a2 < *(_DWORD *)a1
      || *a2 <= *(_DWORD *)a1
      && ((v27 = a2[1], v28 = *((_DWORD *)a1 + 1), v27 < v28) || v27 <= v28 && a2[4] < *((_DWORD *)a1 + 4)))
    {
      v15 = *a1;
      v16 = *((_DWORD *)a1 + 4);
      *a1 = *(_QWORD *)a2;
      v17 = *((_QWORD *)a2 + 1);
      *((_DWORD *)a1 + 4) = a2[4];
      v18 = a1[1];
      a1[1] = v17;
      *(_QWORD *)a2 = v15;
      *((_QWORD *)a2 + 1) = v18;
      a2[4] = v16;
      return 2;
    }
    return 1;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unint64_t v5;
  int v6;
  uint64_t *i;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  int v25;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 4);
  v4 = *(_DWORD *)(a2 - 20);
  v5 = HIDWORD(*a1);
  if (v4 <= (int)*a1
    && (v4 < (int)*a1 || (v6 = *(_DWORD *)(a2 - 16), v6 <= (int)v5) && (v6 < (int)v5 || v3 >= *(_DWORD *)(a2 - 4))))
  {
    for (i = (uint64_t *)((char *)a1 + 20); (unint64_t)i < a2; i = (uint64_t *)((char *)i + 20))
    {
      if (*(_DWORD *)i > (int)v2)
        break;
      if (*(_DWORD *)i >= (int)v2)
      {
        v25 = *((_DWORD *)i + 1);
        if (v25 > (int)v5 || v25 >= (int)v5 && v3 < *((_DWORD *)i + 4))
          break;
      }
    }
  }
  else
  {
    i = a1;
    while (1)
    {
      v9 = *((_DWORD *)i + 5);
      i = (uint64_t *)((char *)i + 20);
      v8 = v9;
      if (v9 > (int)v2)
        break;
      if (v8 >= (int)v2)
      {
        v10 = *((_DWORD *)i + 1);
        if (v10 > (int)v5 || v10 >= (int)v5 && v3 < *((_DWORD *)i + 4))
          break;
      }
    }
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 20; ; a2 -= 20)
    {
      if (v4 <= (int)v2)
      {
        if (v4 < (int)v2)
          break;
        v11 = *(_DWORD *)(a2 + 4);
        if (v11 <= (int)v5 && (v11 < (int)v5 || v3 >= *(_DWORD *)(a2 + 16)))
          break;
      }
      v12 = *(_DWORD *)(a2 - 20);
      v4 = v12;
    }
  }
  v13 = a1[1];
  while ((unint64_t)i < a2)
  {
    v14 = *i;
    v15 = *((_DWORD *)i + 4);
    *i = *(_QWORD *)a2;
    v16 = *(_QWORD *)(a2 + 8);
    *((_DWORD *)i + 4) = *(_DWORD *)(a2 + 16);
    v17 = i[1];
    i[1] = v16;
    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v17;
    *(_DWORD *)(a2 + 16) = v15;
    while (1)
    {
      v19 = *((_DWORD *)i + 5);
      i = (uint64_t *)((char *)i + 20);
      v18 = v19;
      if (v19 > (int)v2)
        break;
      if (v18 >= (int)v2)
      {
        v20 = *((_DWORD *)i + 1);
        if (v20 > (int)v5 || v20 >= (int)v5 && v3 < *((_DWORD *)i + 4))
          break;
      }
    }
    do
    {
      do
      {
        v21 = *(_DWORD *)(a2 - 20);
        a2 -= 20;
        v22 = v21 < (int)v2;
      }
      while (v21 > (int)v2);
      if (v22)
        break;
      v23 = *(_DWORD *)(a2 + 4);
    }
    while (v23 > (int)v5 || v23 >= (int)v5 && v3 < *(_DWORD *)(a2 + 16));
  }
  if ((uint64_t *)((char *)i - 20) != a1)
  {
    *a1 = *(uint64_t *)((char *)i - 20);
    a1[1] = *(uint64_t *)((char *)i - 12);
    *((_DWORD *)a1 + 4) = *((_DWORD *)i - 1);
  }
  *(uint64_t *)((char *)i - 20) = v2;
  *(uint64_t *)((char *)i - 12) = v13;
  *((_DWORD *)i - 1) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  int v30;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  v5 = *((_DWORD *)a1 + 4);
  v6 = HIDWORD(*a1);
  while (1)
  {
    v7 = *(_DWORD *)((char *)a1 + v2 + 20);
    if (v7 >= (int)v3)
    {
      if (v7 > (int)v3)
        break;
      v8 = *(_DWORD *)((char *)a1 + v2 + 24);
      if (v8 >= (int)v6 && (v8 > (int)v6 || *(_DWORD *)((char *)a1 + v2 + 36) >= v5))
        break;
    }
    v2 += 20;
  }
  v9 = (unint64_t)a1 + v2 + 20;
  if (v2)
  {
    while (1)
    {
      v11 = *(_DWORD *)(a2 - 20);
      a2 -= 20;
      v10 = v11;
      if (v11 < (int)v3)
        break;
      if (v10 <= (int)v3)
      {
        v12 = *(_DWORD *)(a2 + 4);
        if (v12 < (int)v6 || v12 <= (int)v6 && *(_DWORD *)(a2 + 16) < v5)
          break;
      }
    }
  }
  else
  {
LABEL_25:
    if (v9 < a2)
    {
      do
      {
        v14 = *(_DWORD *)(a2 - 20);
        a2 -= 20;
        v13 = v14;
        if (v14 < (int)v3)
          break;
        if (v13 > (int)v3)
          goto LABEL_25;
        v15 = *(_DWORD *)(a2 + 4);
        if (v15 < (int)v6)
          break;
        if (v15 > (int)v6)
          goto LABEL_25;
      }
      while (*(_DWORD *)(a2 + 16) >= v5 && v9 < a2);
    }
  }
  v17 = v9;
  if (v9 < a2)
  {
    v18 = a2;
    do
    {
      v19 = *(_QWORD *)v17;
      v20 = *(_DWORD *)(v17 + 16);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v21 = *(_QWORD *)(v18 + 8);
      *(_DWORD *)(v17 + 16) = *(_DWORD *)(v18 + 16);
      v22 = *(_QWORD *)(v17 + 8);
      *(_QWORD *)(v17 + 8) = v21;
      *(_QWORD *)v18 = v19;
      *(_QWORD *)(v18 + 8) = v22;
      *(_DWORD *)(v18 + 16) = v20;
      do
      {
        do
        {
          v23 = *(_DWORD *)(v17 + 20);
          v17 += 20;
          v26 = __OFSUB__(v23, (_DWORD)v3);
          v24 = v23 == (_DWORD)v3;
          v25 = v23 - (int)v3 < 0;
        }
        while (v23 < (int)v3);
        if (!(v25 ^ v26 | v24))
          break;
        v27 = *(_DWORD *)(v17 + 4);
      }
      while (v27 < (int)v6 || v27 <= (int)v6 && *(_DWORD *)(v17 + 16) < v5);
      while (1)
      {
        v29 = *(_DWORD *)(v18 - 20);
        v18 -= 20;
        v28 = v29;
        if (v29 < (int)v3)
          break;
        if (v28 <= (int)v3)
        {
          v30 = *(_DWORD *)(v18 + 4);
          if (v30 < (int)v6 || v30 <= (int)v6 && *(_DWORD *)(v18 + 16) < v5)
            break;
        }
      }
    }
    while (v17 < v18);
  }
  if ((uint64_t *)(v17 - 20) != a1)
  {
    *a1 = *(_QWORD *)(v17 - 20);
    a1[1] = *(_QWORD *)(v17 - 12);
    *((_DWORD *)a1 + 4) = *(_DWORD *)(v17 - 4);
  }
  *(_QWORD *)(v17 - 20) = v3;
  *(_QWORD *)(v17 - 12) = v4;
  *(_DWORD *)(v17 - 4) = v5;
  return v17 - 20;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_DWORD *)(a2 - 20);
      if (v6 < *(_DWORD *)a1
        || v6 <= *(_DWORD *)a1
        && ((v25 = *(_DWORD *)(a2 - 16), v26 = *(_DWORD *)(a1 + 4), v25 < v26)
         || v25 <= v26 && *(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 16)))
      {
        v7 = *(_QWORD *)a1;
        v8 = *(_DWORD *)(a1 + 16);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 20);
        v9 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 4);
        v10 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a2 - 20) = v7;
        *(_QWORD *)(a2 - 12) = v10;
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (int *)(a1 + 20), (uint64_t *)(a2 - 20));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, (uint64_t *)(a1 + 20), (uint64_t *)(a1 + 40), (uint64_t *)(a2 - 20));
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a1 + 20, a1 + 40, a1 + 60, a2 - 20);
      return 1;
    default:
      v11 = a1 + 40;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (int *)(a1 + 20), (uint64_t *)(a1 + 40));
      v12 = a1 + 60;
      if (a1 + 60 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)v12 < *(_DWORD *)v11
      || *(_DWORD *)v12 <= *(_DWORD *)v11
      && ((v23 = *(_DWORD *)(v12 + 4), v24 = *(_DWORD *)(v11 + 4), v23 < v24)
       || v23 <= v24 && *(_DWORD *)(v12 + 16) < *(_DWORD *)(v11 + 16)))
    {
      v15 = *(_QWORD *)v12;
      v16 = *(_QWORD *)(v12 + 8);
      v17 = *(_DWORD *)(v12 + 16);
      *(_QWORD *)v12 = *(_QWORD *)v11;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(v11 + 8);
      *(_DWORD *)(v12 + 16) = *(_DWORD *)(v11 + 16);
      v18 = a1;
      if (v11 != a1)
      {
        v19 = v13;
        while (1)
        {
          v20 = a1 + v19;
          v21 = *(_DWORD *)(a1 + v19 + 20);
          if (v21 <= (int)v15)
          {
            if (v21 < (int)v15)
              goto LABEL_22;
            v22 = *(_DWORD *)(a1 + v19 + 24);
            if (v22 <= SHIDWORD(v15))
            {
              if (v22 < SHIDWORD(v15))
              {
LABEL_22:
                v18 = v11;
                goto LABEL_24;
              }
              if (v17 >= *(_DWORD *)(a1 + v19 + 36))
                break;
            }
          }
          v11 -= 20;
          *(_QWORD *)(v20 + 40) = *(_QWORD *)(v20 + 20);
          *(_QWORD *)(v20 + 48) = *(_QWORD *)(v20 + 28);
          *(_DWORD *)(v20 + 56) = *(_DWORD *)(v20 + 36);
          v19 -= 20;
          if (v19 == -40)
          {
            v18 = a1;
            goto LABEL_24;
          }
        }
        v18 = a1 + v19 + 40;
      }
LABEL_24:
      *(_QWORD *)v18 = v15;
      *(_QWORD *)(v18 + 8) = v16;
      *(_DWORD *)(v18 + 16) = v17;
      if (++v14 == 8)
        return v12 + 20 == a2;
    }
    v11 = v12;
    v13 += 20;
    v12 += 20;
    if (v12 == a2)
      return 1;
  }
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  double result;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (int *)a2, a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3
    || *(_DWORD *)a4 <= *(_DWORD *)a3
    && ((v9 = *((_DWORD *)a4 + 1), v10 = *((_DWORD *)a3 + 1), v9 < v10)
     || v9 <= v10 && *((_DWORD *)a4 + 4) < *((_DWORD *)a3 + 4)))
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 4);
    *a3 = *a4;
    result = *((double *)a4 + 1);
    *((_DWORD *)a3 + 4) = *((_DWORD *)a4 + 4);
    v13 = a3[1];
    *((double *)a3 + 1) = result;
    *a4 = v11;
    a4[1] = v13;
    *((_DWORD *)a4 + 4) = v12;
    if (*(_DWORD *)a3 < *(_DWORD *)a2
      || *(_DWORD *)a3 <= *(_DWORD *)a2
      && ((v14 = *((_DWORD *)a3 + 1), v15 = *((_DWORD *)a2 + 1), v14 < v15)
       || v14 <= v15 && *((_DWORD *)a3 + 4) < *((_DWORD *)a2 + 4)))
    {
      v16 = *a2;
      v17 = *((_DWORD *)a2 + 4);
      *a2 = *a3;
      result = *((double *)a3 + 1);
      *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
      v18 = a2[1];
      *((double *)a2 + 1) = result;
      *a3 = v16;
      a3[1] = v18;
      *((_DWORD *)a3 + 4) = v17;
      if (*(_DWORD *)a2 < *(_DWORD *)a1
        || *(_DWORD *)a2 <= *(_DWORD *)a1
        && ((v19 = *((_DWORD *)a2 + 1), v20 = *(_DWORD *)(a1 + 4), v19 < v20)
         || v19 <= v20 && *((_DWORD *)a2 + 4) < *(_DWORD *)(a1 + 16)))
      {
        v21 = *(_QWORD *)a1;
        v22 = *(_DWORD *)(a1 + 16);
        *(_QWORD *)a1 = *a2;
        result = *((double *)a2 + 1);
        *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
        v23 = *(_QWORD *)(a1 + 8);
        *(double *)(a1 + 8) = result;
        *a2 = v21;
        a2[1] = v23;
        *((_DWORD *)a2 + 4) = v22;
      }
    }
  }
  return result;
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, (uint64_t *)a2, (uint64_t *)a3, (uint64_t *)a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4
    || *(_DWORD *)a5 <= *(_DWORD *)a4
    && ((v32 = *(_DWORD *)(a5 + 4), v33 = *(_DWORD *)(a4 + 4), v32 < v33)
     || v32 <= v33 && *(_DWORD *)(a5 + 16) < *(_DWORD *)(a4 + 16)))
  {
    v10 = *(_QWORD *)a4;
    v11 = *(_DWORD *)(a4 + 16);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    v12 = *(_QWORD *)(a5 + 8);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
    v13 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v12;
    *(_QWORD *)a5 = v10;
    *(_QWORD *)(a5 + 8) = v13;
    *(_DWORD *)(a5 + 16) = v11;
    if (*(_DWORD *)a4 < *(_DWORD *)a3
      || *(_DWORD *)a4 <= *(_DWORD *)a3
      && ((v14 = *(_DWORD *)(a4 + 4), v15 = *(_DWORD *)(a3 + 4), v14 < v15)
       || v14 <= v15 && *(_DWORD *)(a4 + 16) < *(_DWORD *)(a3 + 16)))
    {
      v16 = *(_QWORD *)a3;
      v17 = *(_DWORD *)(a3 + 16);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      v18 = *(_QWORD *)(a4 + 8);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      v19 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v18;
      *(_QWORD *)a4 = v16;
      *(_QWORD *)(a4 + 8) = v19;
      *(_DWORD *)(a4 + 16) = v17;
      if (*(_DWORD *)a3 < *(_DWORD *)a2
        || *(_DWORD *)a3 <= *(_DWORD *)a2
        && ((v20 = *(_DWORD *)(a3 + 4), v21 = *(_DWORD *)(a2 + 4), v20 < v21)
         || v20 <= v21 && *(_DWORD *)(a3 + 16) < *(_DWORD *)(a2 + 16)))
      {
        v22 = *(_QWORD *)a2;
        v23 = *(_DWORD *)(a2 + 16);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        v24 = *(_QWORD *)(a3 + 8);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        v25 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v24;
        *(_QWORD *)a3 = v22;
        *(_QWORD *)(a3 + 8) = v25;
        *(_DWORD *)(a3 + 16) = v23;
        if (*(_DWORD *)a2 < *(_DWORD *)a1
          || *(_DWORD *)a2 <= *(_DWORD *)a1
          && ((v26 = *(_DWORD *)(a2 + 4), v27 = *(_DWORD *)(a1 + 4), v26 < v27)
           || v26 <= v27 && *(_DWORD *)(a2 + 16) < *(_DWORD *)(a1 + 16)))
        {
          v28 = *(_QWORD *)a1;
          v29 = *(_DWORD *)(a1 + 16);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v30 = *(_QWORD *)(a2 + 8);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          v31 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v30;
          *(_QWORD *)a2 = v28;
          *(_QWORD *)(a2 + 8) = v31;
          *(_DWORD *)(a2 + 16) = v29;
        }
      }
    }
  }
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;

  if ((uint64_t *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 20;
    if ((uint64_t)a2 - a1 >= 21)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 20 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v9, v12);
        v12 = (uint64_t *)((char *)v12 - 20);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1
          || *(_DWORD *)v14 <= *(_DWORD *)a1
          && ((v15 = *((_DWORD *)v14 + 1), v16 = *(_DWORD *)(a1 + 4), v15 < v16)
           || v15 <= v16 && *((_DWORD *)v14 + 4) < *(_DWORD *)(a1 + 16)))
        {
          v17 = *v14;
          v18 = *((_DWORD *)v14 + 4);
          *v14 = *(_QWORD *)a1;
          v19 = *(_QWORD *)(a1 + 8);
          *((_DWORD *)v14 + 4) = *(_DWORD *)(a1 + 16);
          v20 = v14[1];
          v14[1] = v19;
          *(_QWORD *)a1 = v17;
          *(_QWORD *)(a1 + 8) = v20;
          *(_DWORD *)(a1 + 16) = v18;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v9, (uint64_t *)a1);
        }
        v14 = (uint64_t *)((char *)v14 + 20);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 21)
    {
      v21 = v8 / 0x14uLL;
      v22 = (uint64_t)a2 - 20;
      do
      {
        v23 = *(_QWORD *)a1;
        v25 = *(_DWORD *)(a1 + 8);
        v24 = *(_DWORD *)(a1 + 12);
        v26 = *(_DWORD *)(a1 + 16);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v21);
        if (v22 == v27)
        {
          *(_QWORD *)v27 = v23;
          *(_DWORD *)(v27 + 8) = v25;
          *(_DWORD *)(v27 + 12) = v24;
          *(_DWORD *)(v27 + 16) = v26;
        }
        else
        {
          *(_QWORD *)v27 = *(_QWORD *)v22;
          *(_QWORD *)(v27 + 8) = *(_QWORD *)(v22 + 8);
          *(_DWORD *)(v27 + 16) = *(_DWORD *)(v22 + 16);
          *(_QWORD *)v22 = v23;
          *(_DWORD *)(v22 + 8) = v25;
          *(_DWORD *)(v22 + 12) = v24;
          *(_DWORD *)(v22 + 16) = v26;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, v27 + 20, a4, 0xCCCCCCCCCCCCCCCDLL * ((v27 + 20 - a1) >> 2));
        }
        v22 -= 20;
      }
      while (v21-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int64_t v4;
  int64_t v5;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 2)))
    {
      v5 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 2)) | 1;
      v6 = (uint64_t *)(result + 20 * v5);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - result) >> 2) + 2) < a3)
      {
        v7 = *((_DWORD *)v6 + 5);
        if (*(_DWORD *)v6 < v7
          || *(_DWORD *)v6 <= v7
          && ((v8 = *(_DWORD *)(result + 20 * v5 + 4), v9 = *((_DWORD *)v6 + 6), v8 < v9)
           || v8 <= v9 && *(_DWORD *)(result + 20 * v5 + 16) < *((_DWORD *)v6 + 9)))
        {
          v6 = (uint64_t *)((char *)v6 + 20);
          v5 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      if (*(_DWORD *)v6 >= *(_DWORD *)a4)
      {
        if (*(_DWORD *)v6 > *(_DWORD *)a4
          || (v10 = *((_DWORD *)v6 + 1), v11 = *((_DWORD *)a4 + 1), v10 >= v11)
          && (v10 > v11 || *((_DWORD *)v6 + 4) >= *((_DWORD *)a4 + 4)))
        {
          v12 = *a4;
          v13 = a4[1];
          v14 = *((_DWORD *)a4 + 4);
          *a4 = *v6;
          a4[1] = v6[1];
          *((_DWORD *)a4 + 4) = *((_DWORD *)v6 + 4);
          if (v4 >= v5)
          {
            while (1)
            {
              v15 = v6;
              v16 = 2 * v5;
              v5 = (2 * v5) | 1;
              v6 = (uint64_t *)(result + 20 * v5);
              v17 = v16 + 2;
              if (v17 < a3)
              {
                v18 = *((_DWORD *)v6 + 5);
                if (*(_DWORD *)v6 < v18
                  || *(_DWORD *)v6 <= v18
                  && ((v19 = *(_DWORD *)(result + 20 * v5 + 4), v20 = *((_DWORD *)v6 + 6), v19 < v20)
                   || v19 <= v20 && *(_DWORD *)(result + 20 * v5 + 16) < *((_DWORD *)v6 + 9)))
                {
                  v6 = (uint64_t *)((char *)v6 + 20);
                  v5 = v17;
                }
              }
              if (*(_DWORD *)v6 < (int)v12)
                break;
              if (*(_DWORD *)v6 <= (int)v12)
              {
                v21 = *((_DWORD *)v6 + 1);
                if (v21 < SHIDWORD(v12) || v21 <= SHIDWORD(v12) && *((_DWORD *)v6 + 4) < v14)
                  break;
              }
              *v15 = *v6;
              v15[1] = v6[1];
              *((_DWORD *)v15 + 4) = *((_DWORD *)v6 + 4);
              if (v4 < v5)
                goto LABEL_31;
            }
            v6 = v15;
          }
LABEL_31:
          *v6 = v12;
          v6[1] = v13;
          *((_DWORD *)v6 + 4) = v14;
        }
      }
    }
  }
  return result;
}

double std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  double result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    v7 = v3 + 1;
    a1 += 20 * (v3 + 1);
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = *(_DWORD *)(a1 + 20);
      if (*(_DWORD *)a1 < v10
        || *(_DWORD *)a1 <= v10
        && ((v11 = *(_DWORD *)(v6 + 20 * v7 + 4), v12 = *(_DWORD *)(a1 + 24), v11 < v12)
         || v11 <= v12 && *(_DWORD *)(v6 + 20 * v7 + 16) < *(_DWORD *)(a1 + 36)))
      {
        a1 += 20;
        v3 = v9;
      }
    }
    *(_QWORD *)v6 = *(_QWORD *)a1;
    result = *(double *)(a1 + 8);
    *(double *)(v6 + 8) = result;
    *(_DWORD *)(v6 + 16) = *(_DWORD *)(a1 + 16);
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = result + 20 * (v4 >> 1);
    v7 = *(_DWORD *)(a2 - 20);
    if (*(_DWORD *)v6 < v7
      || *(_DWORD *)v6 <= v7
      && ((v8 = *(_DWORD *)(result + 20 * v5 + 4), v9 = *(_DWORD *)(a2 - 16), v8 < v9)
       || v8 <= v9 && *(_DWORD *)(result + 20 * v5 + 16) < *(_DWORD *)(a2 - 4)))
    {
      v10 = *(_QWORD *)(a2 - 20);
      v11 = *(_QWORD *)(a2 - 12);
      v12 = *(_DWORD *)(a2 - 4);
      *(_QWORD *)(a2 - 20) = *(_QWORD *)v6;
      v13 = result + 20 * v5;
      *(_QWORD *)(a2 - 12) = *(_QWORD *)(v13 + 8);
      *(_DWORD *)(a2 - 4) = *(_DWORD *)(v13 + 16);
      if (v4 >= 2)
      {
        while (1)
        {
          v15 = v5 - 1;
          v5 = (v5 - 1) >> 1;
          v14 = result + 20 * v5;
          if (*(_DWORD *)v14 >= (int)v10)
          {
            if (*(_DWORD *)v14 > (int)v10)
              break;
            v16 = *(_DWORD *)(result + 20 * v5 + 4);
            if (v16 >= SHIDWORD(v10) && (v16 > SHIDWORD(v10) || *(_DWORD *)(result + 20 * v5 + 16) >= v12))
              break;
          }
          *(_QWORD *)v6 = *(_QWORD *)v14;
          v17 = result + 20 * v5;
          *(_QWORD *)(v6 + 8) = *(_QWORD *)(v17 + 8);
          *(_DWORD *)(v6 + 16) = *(_DWORD *)(v17 + 16);
          v6 = v17;
          if (v15 <= 1)
            goto LABEL_15;
        }
      }
      v14 = v6;
LABEL_15:
      *(_QWORD *)v14 = v10;
      *(_QWORD *)(v14 + 8) = v11;
      *(_DWORD *)(v14 + 16) = v12;
    }
  }
  return result;
}

uint64_t std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *>,std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *>,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Equal &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;

  result = a2;
  if (a1 != a2)
  {
    do
    {
      v7 = a1 + 20;
      if (a1 + 20 == a2)
        return a2;
      v8 = fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Equal::operator()(a3, a1, a1 + 20);
      a1 = v7;
    }
    while (!v8);
    v9 = v7 + 20;
    v10 = v7 - 20;
    while (v9 != a2)
    {
      if (!fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Equal::operator()(a3, v10, v9))
      {
        *(_QWORD *)(v10 + 20) = *(_QWORD *)v9;
        v10 += 20;
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(v9 + 8);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v9 + 16);
      }
      v9 += 20;
    }
    return v10 + 20;
  }
  return result;
}

BOOL fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Equal::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)a2 == *(_DWORD *)a3
      && *(_DWORD *)(a2 + 4) == *(_DWORD *)(a3 + 4)
      && *(_DWORD *)(a2 + 16) == *(_DWORD *)(a3 + 16)
      && *(float *)(a2 + 8) == *(float *)(a3 + 8)
      && *(float *)(a2 + 12) == *(float *)(a3 + 12);
}

void std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *__p;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) >= a2)
  {
    a1[1] = v7 + 20 * (20 * a2 / 0x14);
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x666666666666666)
      v11 = 0xCCCCCCCCCCCCCCCLL;
    else
      v11 = v9;
    v17 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v4, v11);
    else
      v12 = 0;
    __p = v12;
    v14 = &v12[20 * v8];
    v15 = &v14[20 * (20 * a2 / 0x14)];
    v16 = &v12[20 * v11];
    std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, &__p);
    if (v15 != v14)
      v15 = &v14[(v15 - v14 - 20) % 0x14uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_1ADA48434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::RmFinalEpsilon<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1)
{
  unsigned int v2;
  __n128 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  BOOL v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  unsigned int v31;
  void *__p;
  _BYTE *v33;
  unint64_t v34;
  _OWORD v35[2];
  int v36;
  uint64_t v37[11];
  uint64_t v38;
  void *v39[3];
  void *v40[3];
  float v41;

  memset(v40, 0, sizeof(v40));
  memset(v39, 0, sizeof(v39));
  v38 = 0;
  v37[0] = 0;
  v37[1] = (uint64_t)v40;
  v37[2] = (uint64_t)v39;
  v37[3] = (uint64_t)&v38;
  fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, v37, 0);
  memset(v35, 0, sizeof(v35));
  v36 = 1065353216;
  LODWORD(v34) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 128))(a1, &__p);
  while (1)
  {
    if (!__p)
    {
      if ((int)v34 >= (int)v33)
        goto LABEL_36;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 16))(__p))
      break;
    v31 = 0;
    if (__p)
    {
      v2 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 24))();
      goto LABEL_8;
    }
LABEL_7:
    v2 = v34;
LABEL_8:
    v31 = v2;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(&v26, a1);
    LODWORD(v22) = HIDWORD(v26);
    LODWORD(v23) = v26;
    LODWORD(v21) = 2139095040;
    v41 = INFINITY;
    v3.n128_u32[0] = v26;
    if (*(float *)&v26 == INFINITY)
    {
      v3.n128_u32[0] = v22;
      if (*(float *)&v22 == v41)
        goto LABEL_31;
    }
    v30 = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t *, __n128))(*(_QWORD *)a1 + 136))(a1, v31, &v26, v3);
    while (1)
    {
      if (v26)
      {
        v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
        v5 = v26;
        if ((v4 & 1) != 0)
        {
          v7 = 0;
          if (v26)
            goto LABEL_22;
          goto LABEL_24;
        }
        if (v26)
        {
          v6 = (*(uint64_t (**)(void))(*(_QWORD *)v26 + 32))();
          v5 = v26;
          goto LABEL_17;
        }
      }
      else if (v30 >= v28)
      {
        if (v29)
          --*v29;
        goto LABEL_30;
      }
      v5 = 0;
      v6 = v27 + 20 * v30;
LABEL_17:
      if (((*(_QWORD *)((char *)v39[0] + (((unint64_t)*(int *)(v6 + 16) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v6 + 16)) & 1) != 0)
        break;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      else
        ++v30;
    }
    v7 = 1;
    if (v5)
    {
LABEL_22:
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      goto LABEL_26;
    }
LABEL_24:
    if (v29)
      --*v29;
LABEL_26:
    if ((v7 & 1) != 0)
      goto LABEL_31;
LABEL_30:
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v35, (int *)&v31, &v31);
LABEL_31:
    if (__p)
      (*(void (**)(void *, __n128))(*(_QWORD *)__p + 32))(__p, v3);
    else
      LODWORD(v34) = v34 + 1;
  }
  if (__p)
    (*(void (**)(void))(*(_QWORD *)__p + 8))();
LABEL_36:
  __p = 0;
  v33 = 0;
  v34 = 0;
  v25 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v23);
  while (2)
  {
    if (!v23)
    {
      if ((int)v25 >= v24)
        goto LABEL_82;
      goto LABEL_42;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23))
    {
      if (v23)
      {
        v8 = (*(uint64_t (**)(void))(*(_QWORD *)v23 + 24))();
        goto LABEL_43;
      }
LABEL_42:
      v8 = v25;
LABEL_43:
      (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v22, a1, v8);
      v33 = __p;
      v30 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v8, &v26);
LABEL_44:
      if (v26)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26))
        {
          if (v26)
          {
            (*(void (**)(void))(*(_QWORD *)v26 + 8))();
            goto LABEL_73;
          }
LABEL_71:
          if (v29)
            --*v29;
LABEL_73:
          v16 = __p;
          v15 = v33;
          if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v16) >> 2) < (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v8))
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v8);
            v20 = v22;
            (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a1 + 184))(a1, v8, &v20);
            v17 = (char *)__p;
            if (v33 != __p)
            {
              v18 = 0;
              v19 = 0;
              do
              {
                (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 208))(a1, v8, &v17[v18]);
                ++v19;
                v17 = (char *)__p;
                v18 += 20;
              }
              while (v19 < 0xCCCCCCCCCCCCCCCDLL * ((v33 - (_BYTE *)__p) >> 2));
            }
          }
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
          else
            ++v25;
          continue;
        }
        if (v26)
        {
          v9 = (*(uint64_t (**)(void))(*(_QWORD *)v26 + 32))();
          goto LABEL_50;
        }
      }
      else if (v30 >= v28)
      {
        goto LABEL_71;
      }
      v9 = v27 + 20 * v30;
LABEL_50:
      if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v35, (int *)(v9 + 16)))
      {
        if (!*(_QWORD *)v9)
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(&v21, a1, *(unsigned int *)(v9 + 16));
          v10 = *(float *)&v21 + *(float *)(v9 + 8);
          v11 = *((float *)&v21 + 1) + *(float *)(v9 + 12);
          if ((float)(v10 + v11) >= (float)(*(float *)&v22 + *((float *)&v22 + 1)))
          {
            if ((float)(v10 + v11) > (float)(*(float *)&v22 + *((float *)&v22 + 1))
              || (v10 >= *(float *)&v22 ? (v12 = v10 <= *(float *)&v22) : (v12 = 1), !v12))
            {
              v11 = *((float *)&v22 + 1);
              LODWORD(v10) = v22;
            }
          }
          v22 = __PAIR64__(LODWORD(v11), LODWORD(v10));
          goto LABEL_66;
        }
        v13 = v33;
        if ((unint64_t)v33 < v34)
        {
LABEL_63:
          *(_QWORD *)v13 = *(_QWORD *)v9;
          *((_QWORD *)v13 + 1) = *(_QWORD *)(v9 + 8);
          *((_DWORD *)v13 + 4) = *(_DWORD *)(v9 + 16);
          v14 = (uint64_t)(v13 + 20);
LABEL_65:
          v33 = (_BYTE *)v14;
LABEL_66:
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
          else
            ++v30;
          goto LABEL_44;
        }
      }
      else
      {
        v13 = v33;
        if ((unint64_t)v33 < v34)
          goto LABEL_63;
      }
      v14 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t *)&__p, v9);
      goto LABEL_65;
    }
    break;
  }
  if (v23)
    (*(void (**)(void))(*(_QWORD *)v23 + 8))();
LABEL_82:
  fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v35);
  if (v39[0])
    operator delete(v39[0]);
  if (v40[0])
    operator delete(v40[0]);
}

void sub_1ADA48A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v27;
  void *v28;

  if (__p)
    operator delete(__p);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a25);
  v27 = *(void **)(v25 - 120);
  if (v27)
    operator delete(v27);
  v28 = *(void **)(v25 - 96);
  if (v28)
    operator delete(v28);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~EncodeMapper(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(v2 + 80) - 1;
  *(_DWORD *)(v2 + 80) = v3;
  if (!v3)
  {
    v4 = fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~EncodeTable((_QWORD *)v2);
    MEMORY[0x1AF44D190](v4, 0x10A0C40782F6942);
  }
  return a1;
}

_QWORD *fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~EncodeTable(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x1AF44D190](v5, 0x1000C40451B5BE8);
        v3 = a1[1];
        v2 = a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[11];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[12];
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 4));
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void LMThreads::freeThread(LMThreads *this)
{
  LMStats *v1;
  NBestHyp *v2;
  Vocab *v3;
  WordMesh *v4;
  XCount *v5;
  DStructThreads *v6;
  void **v7;
  void **v8;

  LM::freeThread(this);
  LMStats::freeThread(v1);
  NBestHyp::freeThread(v2);
  Vocab::freeThread(v3);
  WordMesh::freeThread(v4);
  XCount::freeThread(v5);
  RefList_freeThread();
  wordError_freeThread();
  DStructThreads::freeThread(v6);
  v7 = (void **)countSentenceWidsTLS();
  if (*v7)
  {
    free(*v7);
    *v7 = 0;
  }
  v8 = (void **)writeBufferTLS();
  if (*v8)
  {
    free(*v8);
    *v8 = 0;
  }
}

uint64_t _ZTW20countSentenceWidsTLS()
{
  return countSentenceWidsTLS();
}

uint64_t _ZTW14writeBufferTLS()
{
  return writeBufferTLS();
}

double kaldi::BeamSearchDecoder::BeamSearchDecoder(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  double result;
  _QWORD v4[34];

  v2 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  if (*(int *)(a1 + 4) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"opts_.max_steps > 0", 19);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  if (*(int *)(a1 + 8) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"opts_.beam > 0", 14);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

void sub_1ADA48E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  void **v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v12 = *(void **)(v9 + 232);
  if (v12)
  {
    *(_QWORD *)(v9 + 240) = v12;
    operator delete(v12);
  }
  a9 = (void **)(v9 + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  v13 = *(void **)(v9 + 184);
  if (v13)
  {
    *(_QWORD *)(v9 + 192) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(v9 + 160);
  if (v14)
  {
    *(_QWORD *)(v9 + 168) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v9 + 136);
  if (v15)
  {
    *(_QWORD *)(v9 + 144) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(v9 + 112);
  if (v16)
  {
    *(_QWORD *)(v9 + 120) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(v9 + 88);
  if (v17)
    operator delete(v17);
  v18 = *(void **)(v9 + 64);
  if (v18)
  {
    *(_QWORD *)(v9 + 72) = v18;
    operator delete(v18);
  }
  v19 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 48) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void kaldi::BeamSearchDecoder::InitDecoding(kaldi::BeamSearchDecoder *this)
{
  std::vector<int>::size_type v2;
  void *v3;
  unint64_t v4;
  void *v5;
  std::vector<int>::size_type v6;
  void *v7;
  unint64_t v8;
  void *v9;
  std::vector<int>::value_type __x;
  std::vector<int> v11;

  *(_OWORD *)((char *)this + 20) = xmmword_1AE15CEB0;
  *((_QWORD *)this + 6) = *((_QWORD *)this + 5);
  v2 = *((int *)this + 2);
  __x = 0;
  std::vector<int>::vector(&v11, v2, &__x);
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  *(std::vector<int> *)((char *)this + 64) = v11;
  v4 = *((int *)this + 2);
  LOBYTE(__x) = 0;
  std::vector<BOOL>::vector(&v11, v4, (unsigned __int8 *)&__x);
  v5 = (void *)*((_QWORD *)this + 11);
  if (v5)
    operator delete(v5);
  *(std::vector<int> *)((char *)this + 88) = v11;
  v6 = *((int *)this + 2);
  __x = 0;
  std::vector<int>::vector(&v11, v6, &__x);
  v7 = (void *)*((_QWORD *)this + 14);
  if (v7)
  {
    *((_QWORD *)this + 15) = v7;
    operator delete(v7);
  }
  *(std::vector<int> *)((char *)this + 112) = v11;
  v8 = *((int *)this + 2);
  __x = 0;
  std::vector<float>::vector(&v11, v8, &__x);
  v9 = (void *)*((_QWORD *)this + 17);
  if (v9)
  {
    *((_QWORD *)this + 18) = v9;
    operator delete(v9);
  }
  *(std::vector<int> *)((char *)this + 136) = v11;
  *((_QWORD *)this + 21) = *((_QWORD *)this + 20);
  *((_QWORD *)this + 24) = *((_QWORD *)this + 23);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 26);
}

BOOL kaldi::BeamSearchDecoder::Finished(kaldi::BeamSearchDecoder *this)
{
  unint64_t v1;
  int v2;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _BOOL8 result;

  if (*((_DWORD *)this + 8) == *((_DWORD *)this + 1))
    return 1;
  v1 = *((_QWORD *)this + 12);
  v2 = v1 & 0x3F;
  if (v1 <= 0x3F && v2 == 0)
    return 1;
  v4 = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 11);
  v6 = &v5[v1 >> 6];
  do
  {
    result = (*v5 & (1 << v4)) != 0;
    if ((*v5 & (1 << v4)) == 0)
      break;
    v5 += v4 == 63;
    if (v4 == 63)
      v4 = 0;
    else
      ++v4;
  }
  while (v4 != v2 || v5 != v6);
  return result;
}

uint64_t kaldi::BeamSearchDecoder::AdvanceDecoding(kaldi::BeamSearchDecoder *this, uint64_t a2, unsigned int a3)
{
  void *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  void *v10;
  std::vector<int> v13;
  void *v14;
  _BYTE *v15;
  _BYTE __p[24];
  _BYTE v17[32];
  int v18;

  if (!*((_DWORD *)this + 8))
  {
    *((_DWORD *)this + 5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    *((_DWORD *)this + 6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *((_DWORD *)this + 7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    std::vector<int>::vector((std::vector<int> *)v17, *((int *)this + 2), (const std::vector<int>::value_type *)this + 5);
    v5 = (void *)*((_QWORD *)this + 5);
    if (v5)
    {
      *((_QWORD *)this + 6) = v5;
      operator delete(v5);
      *((_QWORD *)this + 5) = 0;
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 7) = 0;
    }
    *(_OWORD *)((char *)this + 40) = *(_OWORD *)v17;
    *((_QWORD *)this + 7) = *(_QWORD *)&v17[16];
    if ((*((_DWORD *)this + 5) & 0x80000000) != 0 || (*((_DWORD *)this + 6) & 0x80000000) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "bos_index_ >= 0 && eos_index_ >= 0");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
  }
  if (!a3)
    return 0;
  v6 = 0;
  while (!kaldi::BeamSearchDecoder::Finished(this))
  {
    memset(v17, 0, sizeof(v17));
    v18 = 1065353216;
    if (((**(uint64_t (***)(uint64_t, _QWORD, char *, char *, _BYTE *, char *))a2)(a2, *((unsigned int *)this + 8), (char *)this + 64, (char *)this + 40, v17, (char *)this + 232) & 1) == 0)goto LABEL_31;
    if (!*(_QWORD *)&v17[24])
    {
      v9 = *((int *)this + 2);
      LOBYTE(v14) = 1;
      std::vector<BOOL>::vector(__p, v9, (unsigned __int8 *)&v14);
      v10 = (void *)*((_QWORD *)this + 11);
      if (v10)
      {
        operator delete(v10);
        *((_QWORD *)this + 11) = 0;
        *((_QWORD *)this + 12) = 0;
        *((_QWORD *)this + 13) = 0;
      }
      *((_QWORD *)this + 11) = *(_QWORD *)__p;
      *((_OWORD *)this + 6) = *(_OWORD *)&__p[8];
LABEL_31:
      std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)v17);
      return v6;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "loglikes");
    v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v17, __p);
    if (!v7)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "att_probs");
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v17, __p);
    if (!v8)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    kaldi::BeamSearchDecoder::AdjustLogProbs((uint64_t)this, (uint64_t)(v7 + 40));
    kaldi::BeamSearchDecoder::AdjustAttentionProbs((unsigned int *)this, (char **)v8 + 5);
    *(_OWORD *)__p = *((_OWORD *)this + 7);
    *(_QWORD *)&__p[16] = *((_QWORD *)this + 16);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 14) = 0;
    kaldi::BeamSearchDecoder::AdjustLengths((uint64_t)this, __p);
    kaldi::BeamSearchDecoder::Score((uint64_t)this, (uint64_t *)v7 + 5, (uint64_t *)v8 + 5, (int **)__p, (uint64_t *)&v14, *((float *)this + 3), 0.0);
    if (!*((_DWORD *)this + 8))
      std::vector<float>::resize((uint64_t)&v14, ((v15 - (_BYTE *)v14) >> 2) / (unint64_t)*((int *)this + 2));
    kaldi::BeamSearchDecoder::ComputeTopIndices((uint64_t)this, (uint64_t *)&v14, &v13);
    kaldi::BeamSearchDecoder::UpdateDecoderState((uint64_t)this, (uint64_t *)v7 + 5, (uint64_t *)v8 + 5, (uint64_t *)__p, &v13.__begin_);
    if (v13.__begin_)
    {
      v13.__end_ = v13.__begin_;
      operator delete(v13.__begin_);
    }
    if (v14)
    {
      v15 = v14;
      operator delete(v14);
    }
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)v17);
    ++*((_DWORD *)this + 8);
    v6 = (v6 + 1);
    if (a3 == (_DWORD)v6)
      return a3;
  }
  return v6;
}

void sub_1ADA493BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_1ADA49448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::BeamSearchDecoder::FinalizeDecoding(kaldi::BeamSearchDecoder *this)
{
  std::vector<int> __p;
  void *v3[3];

  if (*((_DWORD *)this + 8))
  {
    kaldi::BeamSearchDecoder::Score((uint64_t)this, (uint64_t *)this + 17, (uint64_t *)this + 20, (int **)this + 14, (uint64_t *)v3, *((float *)this + 3), *((float *)this + 4));
    kaldi::BeamSearchDecoder::ComputeTopIndices((uint64_t)this, (uint64_t *)v3, &__p);
    kaldi::BeamSearchDecoder::FinalizeDecoderState((uint64_t)this, (uint64_t *)v3, &__p.__begin_);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v3[0])
    {
      v3[1] = v3[0];
      operator delete(v3[0]);
    }
  }
}

void sub_1ADA494DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::BeamSearchDecoder::AdjustLogProbs(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  float *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float *v11;
  unint64_t v12;
  float *v13;

  v2 = *(unsigned int *)(result + 8);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(float **)a2;
    v5 = ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) / v2;
    v6 = v5 << 32;
    v7 = (int)v5;
    v8 = *(_QWORD *)(result + 136);
    v9 = *(_QWORD *)(result + 88);
    v10 = (unint64_t)(4 * (int)v5) >> 2;
    do
    {
      v11 = &v4[v7];
      if (((*(_QWORD *)(v9 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
      {
        if (v6 >= 1)
        {
          v12 = v10;
          v13 = v4;
          do
            *v13++ = -3.4028e38;
          while (v12-- > 1);
        }
        v4[*(int *)(result + 24)] = *(float *)(v8 + 4 * v3);
      }
      else if (v6)
      {
        do
        {
          *v4 = *(float *)(v8 + 4 * v3) + *v4;
          ++v4;
        }
        while (v4 != v11);
      }
      ++v3;
      v4 = v11;
    }
    while (v3 != v2);
  }
  return result;
}

unsigned int *kaldi::BeamSearchDecoder::AdjustAttentionProbs(unsigned int *result, char **a2)
{
  float *v3;
  float *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float v16;

  v3 = (float *)*((_QWORD *)result + 20);
  v4 = (float *)*((_QWORD *)result + 21);
  if (v3 != v4)
  {
    v5 = result;
    v6 = result[2];
    if ((int)v6 >= 1)
    {
      v7 = 0;
      v8 = *a2;
      v9 = (v4 - v3) / v6;
      v10 = v9 << 32;
      v11 = (int)v9;
      v12 = 4 * (int)v9;
      v13 = (int)(((a2[1] - *a2) >> 2) / v6);
      do
      {
        v14 = &v3[v11];
        if (((*(_QWORD *)(*((_QWORD *)v5 + 11) + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          if (v10)
          {
            result = (unsigned int *)memmove(v8, v3, v12);
            LODWORD(v6) = v5[2];
          }
        }
        else
        {
          v15 = (float *)v8;
          if (v10)
          {
            do
            {
              v16 = *v3++;
              *v15 = v16 + *v15;
              ++v15;
            }
            while (v3 != v14);
          }
        }
        v8 += 4 * v13;
        ++v7;
        v3 = v14;
      }
      while ((uint64_t)v7 < (int)v6);
    }
  }
  return result;
}

uint64_t kaldi::BeamSearchDecoder::AdjustLengths(uint64_t result, _QWORD *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_DWORD *)(result + 8);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(result + 88);
    do
    {
      if (((*(_QWORD *)(v4 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) == 0)
      {
        ++*(_DWORD *)(*a2 + 4 * v3);
        v2 = *(_DWORD *)(result + 8);
      }
      ++v3;
    }
    while ((uint64_t)v3 < v2);
  }
  return result;
}

void kaldi::BeamSearchDecoder::Score(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, int **a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>, float a7@<S1>)
{
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  int v26;
  int *v27;
  float v28;
  int *v30[3];
  void *__p[3];
  void *v32[3];
  void *v33[3];

  kaldi::BeamSearchDecoder::LengthPenalty(a4, v33, a6);
  kaldi::BeamSearchDecoder::CoveragePenalty(a1, a3, v32, a7);
  std::vector<float>::vector(a5, (a2[1] - *a2) >> 2);
  v13 = *(int *)(a1 + 8);
  if ((int)v13 >= 1)
  {
    v14 = 0;
    v15 = 0;
    v16 = *a2;
    v17 = ((a2[1] - *a2) >> 2) / v13;
    do
    {
      v18 = *((float *)v32[0] + v14);
      v19 = v14 * (int)v17;
      if ((int)v17 >= 1)
      {
        v20 = *((float *)v33[0] + v14);
        v21 = *a5;
        v22 = v15;
        do
        {
          *(float *)(v21 + 4 * v22) = v18 + (float)(*(float *)(v16 + 4 * v22) / v20);
          ++v22;
        }
        while (v22 < v19 + (int)v17);
      }
      v23 = *(_DWORD *)(a1 + 28);
      if (v23 != -1 && v23 < (int)v17)
      {
        v25 = *(_QWORD *)(a1 + 40);
        if (v25 != *(_QWORD *)(a1 + 48) && *(_DWORD *)(v25 + 4 * v14) == v23)
        {
          v26 = (*a4)[v14];
          v27 = (int *)operator new(4uLL);
          *v27 = v26 - 1;
          v30[1] = v27 + 1;
          v30[2] = v27 + 1;
          v30[0] = v27;
          kaldi::BeamSearchDecoder::LengthPenalty(v30, __p, a6);
          v28 = *(float *)__p[0];
          __p[1] = __p[0];
          operator delete(__p[0]);
          operator delete(v27);
          v16 = *a2;
          *(float *)(*a5 + 4 * (v19 + *(int *)(a1 + 28))) = v18
                                                          + (float)(*(float *)(*a2 + 4 * (v19 + *(int *)(a1 + 28))) / v28);
          LODWORD(v13) = *(_DWORD *)(a1 + 8);
        }
      }
      ++v14;
      v15 += v17;
    }
    while (v14 < (int)v13);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
}

void sub_1ADA498D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void kaldi::BeamSearchDecoder::ComputeTopIndices(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::vector<int> *a3@<X8>)
{
  int *begin;
  int *end;
  int v8;
  int *v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  int *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  int *v33;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;

  std::vector<int>::vector(a3, (a2[1] - *a2) >> 2);
  begin = a3->__begin_;
  end = a3->__end_;
  if (a3->__begin_ != end)
  {
    v8 = 0;
    v9 = a3->__begin_;
    do
      *v9++ = v8++;
    while (v9 != end);
  }
  v10 = *(int *)(a1 + 8);
  if (v10 >= (a2[1] - *a2) >> 2)
  {
    v38 = a2;
    if ((char *)end - (char *)begin < 513)
    {
      v35 = 0;
      v37 = 0;
    }
    else
    {
      v35 = (int *)std::get_temporary_buffer[abi:ne180100]<int>(end - begin);
      v37 = v36;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(begin, end, &v38, end - begin, v35, v37);
    if (v35)
      operator delete(v35);
  }
  else
  {
    v38 = a2;
    if ((_DWORD)v10)
    {
      v11 = &begin[v10];
      if ((int)v10 >= 2)
      {
        v12 = (v10 - 2) >> 1;
        v13 = v12 + 1;
        v14 = &begin[v12];
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)begin, &v38, v10, v14--);
          --v13;
        }
        while (v13);
      }
      if (v11 != end)
      {
        v15 = &begin[v10];
        do
        {
          v16 = *v15;
          v17 = *begin;
          if (*(float *)(*a2 + 4 * v16) > *(float *)(*a2 + 4 * v17))
          {
            *v15 = v17;
            *begin = v16;
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)begin, &v38, v10, begin);
          }
          ++v15;
        }
        while (v15 != end);
      }
      if ((int)v10 >= 2)
      {
        v18 = v10;
        do
        {
          v19 = 0;
          v20 = *begin;
          v21 = v38;
          v22 = begin;
          do
          {
            v23 = v22;
            v22 += v19 + 1;
            v24 = 2 * v19;
            v19 = (2 * v19) | 1;
            v25 = v24 + 2;
            if (v25 < v18 && *(float *)(*v21 + 4 * *v22) > *(float *)(*v21 + 4 * v22[1]))
            {
              ++v22;
              v19 = v25;
            }
            *v23 = *v22;
          }
          while (v19 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
          if (v22 == --v11)
          {
            *v22 = v20;
          }
          else
          {
            *v22 = *v11;
            *v11 = v20;
            v26 = (char *)v22 - (char *)begin + 4;
            if (v26 >= 5)
            {
              v27 = (((unint64_t)v26 >> 2) - 2) >> 1;
              v28 = &begin[v27];
              v29 = *v28;
              v30 = *v22;
              v31 = *v21;
              v32 = *(float *)(v31 + 4 * v30);
              if (*(float *)(v31 + 4 * v29) > v32)
              {
                do
                {
                  v33 = v28;
                  *v22 = v29;
                  if (!v27)
                    break;
                  v27 = (v27 - 1) >> 1;
                  v28 = &begin[v27];
                  v29 = *v28;
                  v22 = v33;
                }
                while (*(float *)(v31 + 4 * v29) > v32);
                *v33 = v30;
              }
            }
          }
        }
        while (v18-- > 2);
      }
    }
    std::vector<int>::resize((std::vector<unsigned int> *)a3, *(int *)(a1 + 8));
  }
}

void sub_1ADA49BDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  void *v4;

  if (v2)
    operator delete(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::BeamSearchDecoder::UpdateDecoderState(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int **a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int **v14;
  unint64_t v15;
  int *v16;
  int v17;
  int **v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  int v23;
  int *v24;
  int v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  std::vector<unsigned int>::pointer begin;
  int v33;
  char *v34;
  uint64_t v35;
  int *v36;
  int *v37;
  float v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  void *__p;
  char *v50;
  char *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  std::vector<unsigned int> v55;

  v9 = *(int *)(a1 + 8);
  v10 = *a3;
  v11 = a3[1];
  v12 = *a5;
  v13 = a5[1];
  v14 = (int **)(a1 + 64);
  v15 = ((a2[1] - *a2) >> 2) / v9;
  if (*a5 != v13)
  {
    v16 = *v14;
    do
    {
      v17 = *v12++;
      *v16++ = v17 / (int)v15;
    }
    while (v12 != v13);
  }
  memset(&v55, 0, sizeof(v55));
  v18 = (int **)(a1 + 40);
  kaldi::BeamSearchDecoder::Gather<int>(a1, (uint64_t *)(a1 + 40), (int **)(a1 + 64), &v55);
  v19 = *a5;
  v20 = a5[1];
  v21 = *v18;
  if (*a5 != v20)
  {
    v22 = *v18;
    do
    {
      v23 = *v19++;
      *v22++ = v23 % (int)v15;
    }
    while (v19 != v20);
  }
  v24 = *(int **)(a1 + 48);
  if (v21 != v24)
  {
    v25 = 0;
    v26 = *(uint64_t **)(a1 + 88);
    v27 = *(_DWORD *)(a1 + 24);
    do
    {
      v28 = 1 << v25;
      if (v27 == *v21)
        v29 = *v26 | v28;
      else
        v29 = *v26 & ~v28;
      *v26 = v29;
      ++v21;
      v26 += v25 == 63;
      if (v25 == 63)
        v25 = 0;
      else
        ++v25;
    }
    while (v21 != v24);
  }
  v52 = 0;
  v53 = 0;
  v54 = 0;
  kaldi::BeamSearchDecoder::Gather<float>(a1, (uint64_t *)(a1 + 136), v14, (float **)&v52);
  kaldi::BeamSearchDecoder::Gather<float>(a1, a2, a5, (float **)(a1 + 136));
  kaldi::BeamSearchDecoder::GatherBlocks<float>(a1, a3, v14, ((v11 - v10) >> 2) / v9, (char **)(a1 + 160));
  kaldi::BeamSearchDecoder::Gather<int>(a1, a4, v14, (std::vector<unsigned int> *)(a1 + 112));
  v30 = *(_DWORD *)(a1 + 8);
  if (v30 <= 0)
  {
    __p = 0;
    v50 = 0;
    v51 = 0;
  }
  else
  {
    v31 = 0;
    begin = v55.__begin_;
    do
    {
      v33 = *(_DWORD *)(a1 + 28);
      if (v33 != -1 && begin[v31] == v33 && (*v18)[v31] == v33)
      {
        --*(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v31);
        v30 = *(_DWORD *)(a1 + 8);
      }
      ++v31;
    }
    while (v31 < v30);
    __p = 0;
    v50 = 0;
    v51 = 0;
    if (v30 >= 1)
    {
      v34 = 0;
      v35 = 0;
      do
      {
        v36 = *v18;
        v37 = *v14;
        v38 = *(float *)(*(_QWORD *)(a1 + 136) + 4 * v35) - *((float *)v52 + v35);
        if (v34 >= v51)
        {
          v39 = (char *)__p;
          v40 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (_BYTE *)__p) >> 2);
          v41 = v40 + 1;
          if (v40 + 1 > 0x1555555555555555)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v51 - (_BYTE *)__p) >> 2) > v41)
            v41 = 0x5555555555555556 * ((v51 - (_BYTE *)__p) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v51 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v42 = 0x1555555555555555;
          else
            v42 = v41;
          if (v42)
          {
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)&v51, v42);
            v39 = (char *)__p;
            v34 = v50;
          }
          else
          {
            v43 = 0;
          }
          v44 = &v43[12 * v40];
          *(_DWORD *)v44 = v36[v35];
          *((_DWORD *)v44 + 1) = v37[v35];
          *((float *)v44 + 2) = v38;
          v45 = v44;
          if (v34 != v39)
          {
            do
            {
              v46 = *(_QWORD *)(v34 - 12);
              v34 -= 12;
              v47 = *((_DWORD *)v34 + 2);
              *(_QWORD *)(v45 - 12) = v46;
              v45 -= 12;
              *((_DWORD *)v45 + 2) = v47;
            }
            while (v34 != v39);
            v39 = (char *)__p;
          }
          v34 = v44 + 12;
          __p = v45;
          v50 = v44 + 12;
          v51 = &v43[12 * v42];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_DWORD *)v34 = v36[v35];
          *((_DWORD *)v34 + 1) = v37[v35];
          *((float *)v34 + 2) = v38;
          v34 += 12;
        }
        v50 = v34;
        ++v35;
      }
      while (v35 < *(int *)(a1 + 8));
    }
  }
  std::vector<std::vector<std::tuple<int,int,float>>>::push_back[abi:ne180100]((uint64_t *)(a1 + 208), (uint64_t)&__p);
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
}

void sub_1ADA49FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void kaldi::BeamSearchDecoder::FinalizeDecoderState(uint64_t a1, uint64_t *a2, int **a3)
{
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;

  kaldi::BeamSearchDecoder::Gather<float>(a1, a2, a3, (float **)(a1 + 184));
  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  kaldi::BeamSearchDecoder::Gather<float>(a1, (uint64_t *)(a1 + 136), a3, (float **)__p);
  v5 = *(void **)(a1 + 136);
  if (v5)
  {
    *(_QWORD *)(a1 + 144) = v5;
    operator delete(v5);
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 152) = v12;
  __p[1] = 0;
  v12 = 0;
  __p[0] = 0;
  v9 = 0uLL;
  v6 = (uint64_t *)(*(_QWORD *)(a1 + 216) - 24);
  v10 = 0;
  kaldi::BeamSearchDecoder::Gather<std::tuple<int,int,float>>(a1, v6, a3, (uint64_t *)&v9);
  v7 = *(_QWORD *)(a1 + 216);
  v8 = *(void **)(v7 - 24);
  if (v8)
  {
    *(_QWORD *)(v7 - 16) = v8;
    operator delete(v8);
    *(_QWORD *)(v7 - 24) = 0;
    *(_QWORD *)(v7 - 16) = 0;
    *(_QWORD *)(v7 - 8) = 0;
  }
  *(_OWORD *)(v7 - 24) = v9;
  *(_QWORD *)(v7 - 8) = v10;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1ADA4A108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void kaldi::BeamSearchDecoder::Gather<int>(int a1, uint64_t *a2, int **a3, std::vector<unsigned int> *this)
{
  int *v7;
  int *v8;
  std::vector<unsigned int>::pointer begin;
  uint64_t v10;
  uint64_t v11;

  std::vector<int>::resize(this, a3[1] - *a3);
  v7 = *a3;
  v8 = a3[1];
  if (*a3 != v8)
  {
    begin = this->__begin_;
    v10 = *a2;
    do
    {
      v11 = *v7++;
      *begin++ = *(_DWORD *)(v10 + 4 * v11);
    }
    while (v7 != v8);
  }
}

float kaldi::BeamSearchDecoder::Gather<float>(uint64_t a1, uint64_t *a2, int **a3, float **a4)
{
  float result;
  int *v8;
  int *v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;

  std::vector<float>::resize((uint64_t)a4, a3[1] - *a3);
  v8 = *a3;
  v9 = a3[1];
  if (*a3 != v9)
  {
    v10 = *a4;
    v11 = *a2;
    do
    {
      v12 = *v8++;
      result = *(float *)(v11 + 4 * v12);
      *v10++ = result;
    }
    while (v8 != v9);
  }
  return result;
}

void kaldi::BeamSearchDecoder::GatherBlocks<float>(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, char **a5)
{
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  char *v12;

  v9 = a4;
  std::vector<float>::resize((uint64_t)a5, ((uint64_t)(a3[1] - *a3) >> 2) * a4);
  v10 = (_DWORD *)*a3;
  v11 = (_DWORD *)a3[1];
  if ((_DWORD *)*a3 != v11)
  {
    v12 = *a5;
    do
    {
      if (a4)
        memmove(v12, (const void *)(*a2 + 4 * *v10 * a4), 4 * v9);
      ++v10;
      v12 += 4 * v9;
    }
    while (v10 != v11);
  }
}

uint64_t std::vector<std::vector<std::tuple<int,int,float>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::tuple<int,int,float>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1ADA4A3D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::BeamSearchDecoder::Gather<std::tuple<int,int,float>>(uint64_t a1, uint64_t *a2, int **a3, uint64_t *a4)
{
  float result;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;

  std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::resize((uint64_t)a4, a3[1] - *a3);
  v8 = *a3;
  v9 = a3[1];
  if (*a3 != v9)
  {
    v10 = *a4;
    v11 = *a2;
    do
    {
      v12 = *v8++;
      v13 = (float *)(v11 + 12 * v12);
      v14 = *(_QWORD *)v13;
      result = v13[2];
      v15 = HIDWORD(*(_QWORD *)v13);
      *(_DWORD *)v10 = v14;
      *(_DWORD *)(v10 + 4) = v15;
      *(float *)(v10 + 8) = result;
      v10 += 12;
    }
    while (v8 != v9);
  }
  return result;
}

BOOL kaldi::BeamSearchDecoder::ReachedFinal(kaldi::BeamSearchDecoder *this, int a2)
{
  int *v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _BOOL8 result;
  int v11;

  v11 = a2;
  v2 = (int *)((char *)this + 8);
  if (a2 != -1 && *v2 >= a2)
    v2 = &v11;
  v3 = *v2;
  if ((v3 & 0x80000000) != 0)
    v4 = -(uint64_t)((63 - v3) >> 6);
  else
    v4 = v3 >> 6;
  v5 = v3 & 0x3F;
  if (v5)
    v6 = 0;
  else
    v6 = v4 == 0;
  if (v6)
    return 0;
  v7 = 0;
  v8 = (_QWORD *)*((_QWORD *)this + 11);
  v9 = &v8[v4];
  do
  {
    result = (*v8 & (1 << v7)) != 0;
    if ((*v8 & (1 << v7)) != 0)
      break;
    v8 += v7 == 63;
    if (v7 == 63)
      v7 = 0;
    else
      ++v7;
  }
  while (v7 != v5 || v8 != v9);
  return result;
}

uint64_t kaldi::BeamSearchDecoder::GetRawLattice(uint64_t a1, uint64_t a2, int a3)
{
  int *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  float v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  float v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int32x2_t v37;
  __int128 *v38;
  float v39;
  float v40;
  int v41;
  uint64_t v42;
  float v43;
  __int128 v44;
  __int128 v45;
  int v46;
  __int128 v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  int v51;
  _DWORD *v52;

  v51 = a3;
  v5 = (int *)(a1 + 8);
  if (a3 != -1 && *v5 >= a3)
    v5 = &v51;
  v6 = *v5;
  v51 = *v5;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  if (*(_QWORD *)(a1 + 216) == *(_QWORD *)(a1 + 208))
  {
    result = 0;
    v24 = *(_QWORD *)(a1 + 232);
    v23 = *(_QWORD *)(a1 + 240);
    if (v23 == v24 || v6 == 0)
      return result;
    v25 = 0;
  }
  else
  {
    if (!v6)
      return 0;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    v50 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v7, &v50);
    v47 = 0u;
    v48 = 0u;
    v49 = 1065353216;
    LODWORD(v44) = 0;
    if (v6 >= 1)
    {
      do
      {
        v38 = &v44;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)&v47, (int *)&v44, (uint64_t)&std::piecewise_construct, (_DWORD **)&v38)+ 5) = v7;
        LODWORD(v44) = v44 + 1;
      }
      while ((int)v44 < v6);
    }
    v8 = -1431655765 * ((*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3) - 1;
    if ((v8 & 0x80000000) == 0)
    {
      do
      {
        v9 = *(_QWORD *)(a1 + 208);
        v10 = v8;
        v44 = 0u;
        v45 = 0u;
        v46 = 1065353216;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::swap((uint64_t)&v44, (uint64_t)&v47);
        v11 = (uint64_t *)v45;
        if ((_QWORD)v45)
        {
          v12 = (_QWORD *)(v9 + 24 * v8);
          do
          {
            v13 = *v12 + 12 * *((int *)v11 + 4);
            v14 = *(float *)(v13 + 8);
            v15 = *(_QWORD *)v13;
            v42 = v15;
            v43 = v14;
            if ((_DWORD)v15 == *(_DWORD *)(a1 + 24))
            {
              if (*(_BYTE *)a1)
                LODWORD(v15) = 0;
            }
            else if ((_DWORD)v15 == *(_DWORD *)(a1 + 20))
            {
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Decoding output contains BOS label (", 36);
                v16 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"). Mapping it to label 0.", 25);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
              }
              LODWORD(v15) = 0;
            }
            else if (!(_DWORD)v15)
            {
              LODWORD(v15) = *(_DWORD *)(a1 + 20);
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Decoding output contains label 0. Mapping it to BOS label (", 59);
                v17 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)").", 2);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
                LODWORD(v15) = *(_DWORD *)(a1 + 20);
              }
            }
            if (*(_BYTE *)(a1 + 1) && (_DWORD)v42 == *(_DWORD *)(a1 + 28))
              LODWORD(v15) = 0;
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3) - 1 != v10
              || (v18 = *(_QWORD *)(a1 + 184), v18 == *(_QWORD *)(a1 + 192)))
            {
              v19 = -0.0;
            }
            else
            {
              v19 = *(float *)(v18 + 4 * *((int *)v11 + 4))
                  - *(float *)(*(_QWORD *)(a1 + 136) + 4 * *((int *)v11 + 4));
            }
            v20 = *((_DWORD *)v11 + 5);
            v38 = (__int128 *)__PAIR64__(v15, v42);
            v39 = -v19;
            v40 = -v43;
            v41 = v20;
            v21 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v47, (int *)&v42 + 1);
            if (v21)
            {
              v22 = *((unsigned int *)v21 + 5);
            }
            else
            {
              v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
              v52 = (_DWORD *)&v42 + 1;
              *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)&v47, (int *)&v42 + 1, (uint64_t)&std::piecewise_construct, &v52)+ 5) = v22;
            }
            (*(void (**)(uint64_t, uint64_t, __int128 **))(*(_QWORD *)a2 + 208))(a2, v22, &v38);
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v44);
        v8 = v10 - 1;
      }
      while ((int)v10 > 0);
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, *(unsigned int *)(v48 + 20));
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v47);
    v24 = *(_QWORD *)(a1 + 232);
    v23 = *(_QWORD *)(a1 + 240);
    v25 = v7;
  }
  if (v23 != v24)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
    {
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v25);
    }
    v37 = vdup_n_s32(0x7F800000u);
    (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(_QWORD *)a2 + 184))(a2, v25, &v37);
    v28 = *(unsigned int **)(a1 + 232);
    v29 = *(unsigned int **)(a1 + 240);
    if (v28 == v29)
    {
      v32 = v25;
    }
    else
    {
      do
      {
        v30 = *v28;
        v31 = *((float *)v28 + 1);
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
        if (v30 == *(_DWORD *)(a1 + 24))
        {
          if (*(_BYTE *)a1)
            v33 = 0;
          else
            v33 = v30;
        }
        else if (v30 == *(_DWORD *)(a1 + 20))
        {
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Decoding output contains BOS label (", 36);
            v34 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"). Mapping it to label 0.", 25);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
          }
          v33 = 0;
        }
        else
        {
          v33 = v30;
          if (!v30)
          {
            v33 = *(_DWORD *)(a1 + 20);
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Decoding output contains label 0. Mapping it to BOS label (", 59);
              v35 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)").", 2);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
              v33 = *(_DWORD *)(a1 + 20);
            }
          }
        }
        if (*(_BYTE *)(a1 + 1))
        {
          if (v30 == *(_DWORD *)(a1 + 28))
            v33 = 0;
        }
        v38 = (__int128 *)__PAIR64__(v33, v30);
        v39 = 0.0;
        v40 = -v31;
        v41 = v32;
        (*(void (**)(uint64_t, uint64_t, __int128 **))(*(_QWORD *)a2 + 208))(a2, v25, &v38);
        v28 += 2;
        v25 = v32;
      }
      while (v28 != v29);
    }
    v36 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v32, &v36);
  }
  fst::RemoveEpsLocal<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
  return 1;
}

void sub_1ADA4AAD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1 - 176);
  _Unwind_Resume(a1);
}

uint64_t kaldi::BeamSearchDecoder::GetBestPath(uint64_t a1, uint64_t a2)
{
  return kaldi::BeamSearchDecoder::GetRawLattice(a1, a2, 1);
}

void kaldi::BeamSearchDecoder::LengthPenalty(int **a1@<X1>, _QWORD *a2@<X8>, float a3@<S0>)
{
  unint64_t v5;
  float **v6;
  int *v7;
  int **v8;
  uint64_t v9;
  unint64_t v10;
  long double v11;
  float *v12;
  uint64_t v13;
  int v14;
  float v15;
  int v16;

  v5 = a1[1] - *a1;
  v16 = 1065353216;
  v6 = (float **)std::vector<float>::vector(a2, v5, &v16);
  if (a3 != 0.0)
  {
    v8 = a1;
    v7 = *a1;
    v9 = (char *)v8[1] - (char *)v7;
    if (v9)
    {
      v10 = v9 >> 2;
      v11 = a3;
      v12 = *v6;
      if (v10 <= 1)
        v13 = 1;
      else
        v13 = v10;
      do
      {
        v14 = *v7++;
        v15 = pow(((double)v14 + 5.0) / 6.0, v11);
        *v12++ = v15;
        --v13;
      }
      while (v13);
    }
  }
}

void kaldi::BeamSearchDecoder::CoveragePenalty(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>, float a4@<S0>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  int v24;

  v8 = *a2;
  v7 = a2[1];
  v9 = *(int *)(a1 + 8);
  v24 = 0;
  v10 = std::vector<float>::vector(a3, v9, &v24);
  if (a4 != 0.0)
  {
    v11 = *(unsigned int *)(a1 + 8);
    if ((int)v11 >= 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = ((v7 - v8) >> 2) / v9;
      v15 = *a2;
      v16 = *v10;
      do
      {
        v17 = v12 + 1;
        v18 = *(float *)(v16 + 4 * v12);
        if ((int)v14 >= 1)
        {
          v19 = v13;
          do
          {
            v20 = *(float *)(v15 + 4 * v19);
            v21 = 1.0;
            if (v20 > 1.0 || (v22 = v20 < 0.000001, v21 = *(float *)(v15 + 4 * v19), v23 = 0.000001, !v22))
              v23 = v21;
            v18 = logf(v23) + v18;
            *(float *)(v16 + 4 * v12) = v18;
            ++v19;
          }
          while (v19 < v17 * (int)v14);
        }
        *(float *)(v16 + 4 * v12) = v18 * a4;
        v13 += v14;
        ++v12;
      }
      while (v17 != v11);
    }
  }
}

int *std::__stable_sort<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3, unint64_t a4, int *a5, uint64_t a6)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  int *v20;
  int *v22;
  unint64_t v23;
  int *v24;
  unint64_t v25;
  int *v26;
  int *v27;
  uint64_t *v28;
  int *v29;
  int *v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  char v36;
  int *v37;
  uint64_t v38;

  if (a4 >= 2)
  {
    v8 = (char *)result;
    if (a4 == 2)
    {
      v9 = *(a2 - 1);
      v10 = *result;
      if (*(float *)(**a3 + 4 * v9) > *(float *)(**a3 + 4 * v10))
      {
        *result = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v22 = a5;
      v23 = a4 >> 1;
      v24 = &result[a4 >> 1];
      v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(result, v24, a3, v25, a5);
        v26 = &v22[v23];
        result = std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>((int *)&v8[4 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v26);
        v27 = &v22[a4];
        v28 = *a3;
        v29 = v26;
        while (v29 != v27)
        {
          v30 = v29;
          v31 = *v29;
          v32 = *(float *)(*v28 + 4 * v31);
          v33 = *v22;
          v34 = *(float *)(*v28 + 4 * v33);
          if (v32 > v34)
            LODWORD(v33) = v31;
          v22 += v32 <= v34;
          v29 = &v30[v32 > v34];
          *(_DWORD *)v8 = v33;
          v8 += 4;
          if (v22 == v26)
          {
            if (v29 != v27)
            {
              v35 = 0;
              if (v32 > v34)
                v36 = 1;
              else
                v36 = 2;
              v37 = &v30[v36 & 1];
              do
              {
                *(_DWORD *)&v8[v35 * 4] = v37[v35];
                ++v35;
              }
              while (&v37[v35] != v27);
            }
            return result;
          }
        }
        if (v22 != v26)
        {
          v38 = 0;
          do
          {
            *(_DWORD *)&v8[v38 * 4] = v22[v38];
            ++v38;
          }
          while (&v22[v38] != v26);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(result, v24, a3, v25, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(&v8[4 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v22, a6);
        return (int *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(v8, &v8[4 * (a4 >> 1)], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v22, a6);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = **a3;
        v15 = result;
        do
        {
          v16 = *v15;
          v15 = v12;
          v17 = *v12;
          v18 = *(float *)(v14 + 4 * v17);
          if (v18 > *(float *)(v14 + 4 * v16))
          {
            v19 = v13;
            while (1)
            {
              *(int *)((char *)result + v19 + 4) = v16;
              if (!v19)
                break;
              v16 = *(int *)((char *)result + v19 - 4);
              v19 -= 4;
              if (v18 <= *(float *)(v14 + 4 * v16))
              {
                v20 = (int *)((char *)result + v19 + 4);
                goto LABEL_15;
              }
            }
            v20 = result;
LABEL_15:
            *v20 = v17;
          }
          v12 = v15 + 1;
          v13 += 4;
        }
        while (v15 + 1 != a2);
      }
    }
  }
  return result;
}

int *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3, unint64_t a4, int *a5)
{
  int *v5;
  int *v7;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t *v26;
  int *v27;
  int *v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      v11 = **a3;
      v12 = *(float *)(v11 + 4 * v10);
      v13 = *(float *)(v11 + 4 * *result);
      if (v12 <= v13)
        LODWORD(v10) = *result;
      *a5 = v10;
      v5 = a5 + 1;
      if (v12 <= v13)
        v7 = a2 - 1;
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      v25 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(result, v25, a3, a4 >> 1, a5, a4 >> 1);
      result = (int *)std::__stable_sort<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v26 = *a3;
      v27 = &v7[a4 >> 1];
      while (v27 != a2)
      {
        v28 = v27;
        v29 = *v27;
        v30 = *(float *)(*v26 + 4 * v29);
        v31 = *v7;
        v32 = *(float *)(*v26 + 4 * v31);
        if (v30 > v32)
          LODWORD(v31) = v29;
        v27 = &v28[v30 > v32];
        v7 += v30 <= v32;
        *v5++ = v31;
        if (v7 == v25)
        {
          if (v27 != a2)
          {
            v33 = 0;
            v34 = &v28[v30 > v32];
            do
            {
              v5[v33] = v34[v33];
              ++v33;
            }
            while (&v34[v33] != a2);
          }
          return result;
        }
      }
      if (v7 != v25)
      {
        v35 = 0;
        do
        {
          v5[v35] = v7[v35];
          ++v35;
        }
        while (&v7[v35] != v25);
      }
    }
    else if (result != a2)
    {
      v14 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v15 = 0;
        v16 = **a3;
        v17 = a5;
        v18 = a5;
        do
        {
          v20 = *v18++;
          v19 = v20;
          v21 = *v14;
          if (*(float *)(v16 + 4 * v21) <= *(float *)(v16 + 4 * v20))
          {
            *v18 = v21;
          }
          else
          {
            v17[1] = v19;
            v22 = a5;
            if (v17 != a5)
            {
              v23 = v15;
              while (1)
              {
                v22 = (int *)((char *)a5 + v23);
                v24 = *(int *)((char *)a5 + v23 - 4);
                if (*(float *)(v16 + 4 * *v14) <= *(float *)(v16 + 4 * v24))
                  break;
                *v22 = v24;
                v23 -= 4;
                if (!v23)
                {
                  v22 = a5;
                  break;
                }
              }
            }
            *v22 = *v14;
          }
          ++v14;
          v15 += 4;
          v17 = v18;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(char *result, char *a2, char *a3, uint64_t **a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8)
{
  uint64_t v10;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  int *v51;
  uint64_t v52;
  float v53;
  float v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t **v59;
  int *__src;

  if (a6)
  {
    v10 = a6;
    v13 = result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5)
        return result;
      v14 = 0;
      v15 = *(int *)a2;
      v16 = **a4;
      v17 = -a5;
      while (1)
      {
        v18 = *(int *)&v13[v14];
        if (*(float *)(v16 + 4 * v15) > *(float *)(v16 + 4 * v18))
          break;
        v14 += 4;
        if (__CFADD__(v17++, 1))
          return result;
      }
      v59 = a4;
      __src = a7;
      v57 = a8;
      v58 = a3;
      v56 = &v13[v14];
      if (-v17 >= v10)
      {
        if (v17 == -1)
        {
          *(_DWORD *)&v13[v14] = v15;
          *(_DWORD *)a2 = v18;
          return result;
        }
        if (v17 <= 0)
          v30 = -v17;
        else
          v30 = 1 - v17;
        v29 = v30 >> 1;
        v23 = &v13[4 * (v30 >> 1) + v14];
        v22 = a2;
        if (a2 != a3)
        {
          v31 = (a3 - a2) >> 2;
          v22 = a2;
          do
          {
            v32 = v31 >> 1;
            v33 = &v22[4 * (v31 >> 1)];
            v35 = *(int *)v33;
            v34 = v33 + 4;
            v31 += ~(v31 >> 1);
            if (*(float *)(v16 + 4 * v35) > *(float *)(v16 + 4 * *(int *)v23))
              v22 = v34;
            else
              v31 = v32;
          }
          while (v31);
        }
        v21 = (v22 - a2) >> 2;
      }
      else
      {
        if (v10 >= 0)
          v20 = v10;
        else
          v20 = v10 + 1;
        v21 = v20 >> 1;
        v22 = &a2[4 * (v20 >> 1)];
        v23 = a2;
        if (a2 - v13 != v14)
        {
          v24 = (a2 - v13 - v14) >> 2;
          v23 = &v13[v14];
          do
          {
            v25 = v24 >> 1;
            v26 = &v23[4 * (v24 >> 1)];
            v28 = *(int *)v26;
            v27 = v26 + 4;
            v24 += ~(v24 >> 1);
            if (*(float *)(v16 + 4 * *(int *)v22) > *(float *)(v16 + 4 * v28))
              v24 = v25;
            else
              v23 = v27;
          }
          while (v24);
        }
        v29 = (v23 - v13 - v14) >> 2;
      }
      a5 = -(v29 + v17);
      v36 = v10 - v21;
      v37 = v29;
      v38 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(v23, a2, v22);
      v39 = v37;
      v40 = v38;
      if (v39 + v21 >= v10 - (v39 + v21) - v17)
      {
        v43 = v22;
        v44 = v39;
        a8 = v57;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(v38, v43, v58, v59, a5, v10 - v21, __src, v57);
        a2 = v23;
        a4 = v59;
        v36 = v21;
        a7 = __src;
        a5 = v44;
        a3 = v40;
        v13 = v56;
      }
      else
      {
        v41 = v23;
        a4 = v59;
        v42 = v21;
        a7 = __src;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(&v13[v14], v41, v38, v59, v39, v42, __src, v57);
        v13 = v40;
        a2 = v22;
        a8 = v57;
        a3 = v58;
      }
      v10 = v36;
      if (!v36)
        return result;
    }
    if (a5 <= v10)
    {
      if (v13 != a2)
      {
        v49 = 0;
        do
        {
          a7[v49 / 4] = *(_DWORD *)&v13[v49];
          v49 += 4;
        }
        while (&v13[v49] != a2);
        if (v49)
        {
          v50 = *a4;
          v51 = a7;
          while (a2 != a3)
          {
            v52 = *(int *)a2;
            v53 = *(float *)(*v50 + 4 * v52);
            v54 = *(float *)(*v50 + 4 * *v51);
            if (v53 <= v54)
              LODWORD(v52) = *v51;
            a2 += 4 * (v53 > v54);
            v51 += v53 <= v54;
            *(_DWORD *)v13 = v52;
            v13 += 4;
            if (&a7[v49 / 4] == v51)
              return result;
          }
          return (char *)memmove(v13, v51, (char *)a7 - (char *)v51 + v49);
        }
      }
    }
    else if (a3 != a2)
    {
      v45 = 0;
      do
      {
        a7[v45] = *(_DWORD *)&a2[v45 * 4];
        ++v45;
      }
      while (&a2[v45 * 4] != a3);
      if (v45 * 4)
      {
        v46 = &a7[v45];
        v47 = a3 - 4;
        while (a2 != v13)
        {
          v48 = *(v46 - 1);
          if (*(float *)(**a4 + 4 * v48) <= *(float *)(**a4 + 4 * *((int *)a2 - 1)))
          {
            --v46;
          }
          else
          {
            LODWORD(v48) = *((_DWORD *)a2 - 1);
            a2 -= 4;
          }
          *(_DWORD *)v47 = v48;
          v47 -= 4;
          if (v46 == a7)
            return result;
        }
        v55 = 0;
        do
        {
          *(_DWORD *)&v47[v55 * 4] = v46[v55 - 1];
          --v55;
        }
        while (&v46[v55] != a7);
      }
    }
  }
  return result;
}

uint64_t std::vector<std::vector<std::tuple<int,int,float>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::tuple<int,int,float>>>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::tuple<int,int,float>>>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::tuple<int,int,float>>>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::tuple<int,int,float>>>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *TAllocator::clear(TAllocator *this)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)*((_QWORD *)this + 4);
  if (result)
  {
    do
    {
      v3 = (_QWORD *)*result;
      MEMORY[0x1AF44D160]();
      result = v3;
    }
    while (v3);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  return result;
}

void TAllocator::TAllocator(TAllocator *this, uint64_t a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
}

_QWORD *TAllocator::allocate(TAllocator *this, uint64_t a2)
{
  unint64_t v3;
  _QWORD *result;
  char *v5;
  unint64_t v6;
  _QWORD *v7;

  v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (char *)this + 16;
  result = (_QWORD *)*((_QWORD *)this + 2);
  if (*((_QWORD *)v5 + 1) - (_QWORD)result < v3)
  {
    if (v3 + 8 <= *((_QWORD *)this + 1))
      v6 = *((_QWORD *)this + 1);
    else
      v6 = v3 + 8;
    *(_QWORD *)this += v6;
    v7 = (_QWORD *)operator new[]();
    *v7 = *((_QWORD *)this + 4);
    result = v7 + 1;
    *((_QWORD *)this + 3) = (char *)v7 + v6;
    *((_QWORD *)this + 4) = v7;
  }
  *((_QWORD *)this + 2) = (char *)result + v3;
  return result;
}

void DStructThreads::freeThread(DStructThreads *this)
{
  BM_freeThread();
  srilm_tserror_freeThread();
}

void quasar::GrammarFST::getAlternatives(unsigned __int8 ***a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned __int8 **v3;
  unsigned __int8 **v4;
  std::string *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BYTE *v10;
  int v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  std::string *i;
  unint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  unint64_t v21;
  __int128 **v22;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
    goto LABEL_57;
  v5 = 0;
  v6 = 0;
  do
  {
    if (v6)
      goto LABEL_4;
    v9 = *((char *)v3 + 23);
    if (v9 < 0)
    {
      if (v3[1] != (unsigned __int8 *)1)
        goto LABEL_4;
      v10 = *v3;
    }
    else
    {
      v10 = v3;
      if (v9 != 1)
        goto LABEL_4;
    }
    if (*v10 == 124)
    {
      v13 = a2[1];
      if (v13 >= a2[2])
      {
        v14 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a2, (__int128 **)&v19);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a2, (__int128 **)&v19);
        v14 = v13 + 24;
      }
      a2[1] = v14;
      v5 = v19;
      for (i = v20; i != v5; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i[-1].__r_.__value_.__l.__data_);
      }
      v20 = v5;
    }
LABEL_4:
    v7 = *((unsigned __int8 *)v3 + 23);
    if (*((char *)v3 + 23) < 0)
    {
      if (v3[1] != (unsigned __int8 *)1)
        goto LABEL_39;
      v8 = **v3;
    }
    else
    {
      if (v7 != 1)
        goto LABEL_16;
      v8 = *(unsigned __int8 *)v3;
    }
    if (v8 == 91 || v8 == 40)
      ++v6;
    if ((v7 & 0x80) == 0)
    {
LABEL_16:
      if (v7 == 1)
      {
        v11 = *(unsigned __int8 *)v3;
LABEL_22:
        if (v11 == 93 || v11 == 41)
          --v6;
        if (v6)
          goto LABEL_39;
        if ((v7 & 0x80) != 0)
        {
          if (v3[1] == (unsigned __int8 *)1)
          {
            v12 = *v3;
LABEL_36:
            v6 = 0;
            if (*v12 == 124)
              goto LABEL_46;
            goto LABEL_39;
          }
        }
        else
        {
LABEL_27:
          v12 = v3;
          if (v7 == 1)
            goto LABEL_36;
        }
        v6 = 0;
        goto LABEL_39;
      }
      if (!v6)
        goto LABEL_27;
      goto LABEL_39;
    }
    if (v3[1] == (unsigned __int8 *)1)
    {
      v11 = **v3;
      goto LABEL_22;
    }
LABEL_39:
    if ((unint64_t)v5 >= v21)
    {
      v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v19, (__int128 *)v3);
    }
    else
    {
      if ((v7 & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)*v3, (std::string::size_type)v3[1]);
      }
      else
      {
        v15 = *(_OWORD *)v3;
        v5->__r_.__value_.__r.__words[2] = (std::string::size_type)v3[2];
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v15;
      }
      ++v5;
    }
    v20 = v5;
LABEL_46:
    v3 += 3;
  }
  while (v3 != v4);
  v17 = a2[1];
  if (v17 >= a2[2])
  {
LABEL_57:
    v18 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a2, (__int128 **)&v19);
    goto LABEL_58;
  }
  std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a2, (__int128 **)&v19);
  v18 = v17 + 24;
LABEL_58:
  a2[1] = v18;
  v22 = (__int128 **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
}

void sub_1ADA4BA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::GrammarFST::getWeight(uint64_t a1, uint64_t a2, float *a3, int a4)
{
  uint64_t v7;
  __int32 *v8;
  void *v9;
  uint64_t v10;
  float v11;
  float v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string __p;
  _OWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  std::regex_traits<char> v27[2];
  std::__shared_weak_count *v28;

  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v27, "prior=(-?\\d+\\.?\\d*)$", 0);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  memset(v18, 0, 41);
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (__int32 *)a2;
  else
    v8 = *(__int32 **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v8, (__int32 *)((char *)v8 + v7), (uint64_t)v18, (uint64_t)v27, 0))
  {
    v9 = *(void **)&v18[0];
    if (*((_QWORD *)&v18[0] + 1) - *(_QWORD *)&v18[0] != 48)
    {
      v10 = 0;
      if (!*(_QWORD *)&v18[0])
        goto LABEL_27;
      goto LABEL_26;
    }
    if (a4)
    {
      if (*(_BYTE *)(*(_QWORD *)&v18[0] + 40))
        std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(char **)(*(_QWORD *)&v18[0] + 24), *(char **)(*(_QWORD *)&v18[0] + 32), *(_QWORD *)(*(_QWORD *)&v18[0] + 32) - *(_QWORD *)(*(_QWORD *)&v18[0] + 24));
      else
        memset(&__p, 0, sizeof(__p));
      v11 = std::stof(&__p, 0);
      if (v11 < 0.00000001)
        v11 = 0.00000001;
      v12 = -logf(v11);
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)&v18[0] + 40))
        std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(char **)(*(_QWORD *)&v18[0] + 24), *(char **)(*(_QWORD *)&v18[0] + 32), *(_QWORD *)(*(_QWORD *)&v18[0] + 32) - *(_QWORD *)(*(_QWORD *)&v18[0] + 24));
      else
        memset(&__p, 0, sizeof(__p));
      v12 = std::stof(&__p, 0);
    }
    *a3 = v12;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  v9 = *(void **)&v18[0];
  if (*(_QWORD *)&v18[0])
  {
LABEL_26:
    *((_QWORD *)&v18[0] + 1) = v9;
    operator delete(v9);
  }
LABEL_27:
  v13 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::locale::~locale(&v27[0].__loc_);
  return v10;
}

void sub_1ADA4BCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  __cxa_end_catch();
  v11 = *(void **)(v9 - 208);
  if (v11)
  {
    *(_QWORD *)(v9 - 200) = v11;
    operator delete(v11);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v9 - 56);
  std::locale::~locale((std::locale *)(v9 - 96));
  _Unwind_Resume(a1);
}

uint64_t quasar::GrammarFST::extractBracketedPart(uint64_t a1, uint64_t *a2, unsigned int a3, _DWORD *a4, char *a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  void **v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  void *v25;
  void **v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  _BYTE *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v40[17];
  void *v41[2];
  unsigned __int8 v42;
  std::string v43;

  if ((a3 & 0x80000000) != 0)
    return 0;
  v7 = a3 + 1;
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) < v7)
    return 0;
  v11 = *a2 + 24 * a3;
  if (*(char *)(v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
  }
  else
  {
    v12 = *(_OWORD *)v11;
    v43.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v12;
  }
  v13 = std::string::basic_string[abi:ne180100]<0>(v41, "");
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v43.__r_.__value_.__l.__size_ != 1)
      goto LABEL_65;
    v14 = *v43.__r_.__value_.__l.__data_;
  }
  else
  {
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) != 1)
      goto LABEL_65;
    v14 = v43.__r_.__value_.__s.__data_[0];
  }
  if (v14 == 91)
  {
    MEMORY[0x1AF44C914](v13, "]");
    v15 = 1;
    goto LABEL_16;
  }
  if (v14 != 40)
  {
LABEL_65:
    if (quasar::gLogLevel >= 1)
    {
      memset(v40, 0, sizeof(v40));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"RegexParseError: expected [ or(at ", 36);
      v33 = (_QWORD *)std::ostream::operator<<();
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" but found ", 11);
      v35 = *a2 + 24 * a3;
      v36 = *(char *)(v35 + 23);
      if (v36 >= 0)
        v37 = *a2 + 24 * a3;
      else
        v37 = *(_QWORD *)v35;
      if (v36 >= 0)
        v38 = *(unsigned __int8 *)(v35 + 23);
      else
        v38 = *(_QWORD *)(v35 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v37, v38);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v40);
    }
    goto LABEL_73;
  }
  MEMORY[0x1AF44C914](v13, ")");
  v15 = 0;
LABEL_16:
  *a5 = v15;
  v16 = *a2;
  v17 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (v17 <= v7)
  {
LABEL_73:
    v8 = 0;
    goto LABEL_74;
  }
  v18 = 0;
  if ((v42 & 0x80u) == 0)
    v19 = v42;
  else
    v19 = (unint64_t)v41[1];
  if ((v42 & 0x80u) == 0)
    v20 = v41;
  else
    v20 = (void **)v41[0];
  v21 = v16 + 23;
  while (1)
  {
    if (v18)
    {
      v22 = *(unsigned __int8 *)(v21 + 24 * v7);
      goto LABEL_36;
    }
    v23 = (unsigned __int8 *)(v16 + 24 * v7);
    v24 = v23[23];
    v22 = v23[23];
    v25 = (v24 & 0x80u) == 0 ? (void *)v23[23] : (void *)*((_QWORD *)v23 + 1);
    if (v25 == (void *)v19)
      break;
LABEL_36:
    v23 = (unsigned __int8 *)(v16 + 24 * v7);
    if ((v22 & 0x80) != 0)
      goto LABEL_40;
    if (v22 != 1)
      goto LABEL_44;
    LODWORD(v27) = 0;
    v28 = (_BYTE *)(v16 + 24 * v7);
LABEL_42:
    if (*v28 == 91)
      goto LABEL_43;
    if ((_DWORD)v27)
    {
      if (*((_QWORD *)v23 + 1) != 1)
        goto LABEL_44;
      v31 = *(_BYTE **)v23;
    }
    else
    {
      if (v22 != 1)
        goto LABEL_44;
      v31 = v23;
    }
    if (*v31 == 40)
    {
LABEL_43:
      ++v18;
    }
    else
    {
      if ((_DWORD)v27)
      {
        if (*((_QWORD *)v23 + 1) != 1)
          goto LABEL_44;
        v32 = *(_BYTE **)v23;
      }
      else
      {
        if (v22 != 1)
          goto LABEL_44;
        v32 = v23;
      }
      if (*v32 != 93)
      {
        if ((_DWORD)v27)
        {
          if (*((_QWORD *)v23 + 1) != 1)
            goto LABEL_44;
          v23 = *(unsigned __int8 **)v23;
        }
        else if (v22 != 1)
        {
          goto LABEL_44;
        }
        if (*v23 != 41)
          goto LABEL_44;
      }
      --v18;
    }
LABEL_44:
    if (v17 <= ++v7)
      goto LABEL_73;
  }
  if ((v22 & 0x80) == 0)
  {
    if (!v23[23])
      goto LABEL_79;
    v26 = v20;
    while (*v23 == *(unsigned __int8 *)v26)
    {
      ++v23;
      v26 = (void **)((char *)v26 + 1);
      if (!--v24)
        goto LABEL_79;
    }
    goto LABEL_36;
  }
  v29 = v21;
  v30 = memcmp(*(const void **)v23, v20, *((_QWORD *)v23 + 1));
  v21 = v29;
  if (v30)
  {
LABEL_40:
    v27 = *(_QWORD *)(v16 + 24 * v7 + 8);
    if (v27 != 1)
      goto LABEL_44;
    v28 = *(_BYTE **)v23;
    goto LABEL_42;
  }
LABEL_79:
  *a4 = v7;
  v8 = 1;
LABEL_74:
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1ADA4C0B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::GrammarFST::compile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned __int8 **v19;
  uint64_t v20;
  signed int v21;
  unsigned __int8 **v22;
  __int128 v23;
  int v24;
  std::string *v25;
  _QWORD *v26;
  std::string *v27;
  std::string::size_type v28;
  _QWORD *v29;
  _QWORD *v30;
  void *p_p;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  std::string::size_type size;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  std::string *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 *v44;
  uint64_t v45;
  std::string *v46;
  int v47;
  int v48;
  char v51;
  uint64_t v52[2];
  void *__p;
  uint64_t v54;
  unsigned __int8 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  std::string v73;
  uint64_t v74;
  uint64_t v75;

  v9 = a3;
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    *(_QWORD *)&v56 = 0;
    DWORD2(v56) = 0;
    HIDWORD(v56) = a4;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a6 + 208))(a6, a3, &v56);
    return 1;
  }
  quasar::GrammarFST::getAlternatives((unsigned __int8 ***)a2, &v74);
  v14 = v74;
  v15 = v75;
  if (0xAAAAAAAAAAAAAAABLL * ((v75 - v74) >> 3) <= 1)
  {
    v19 = *(unsigned __int8 ***)a2;
    if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
      goto LABEL_95;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = &v19[3 * v20];
      if (*((char *)v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v73, (const std::string::value_type *)*v22, (std::string::size_type)v22[1]);
      }
      else
      {
        v23 = *(_OWORD *)v22;
        v73.__r_.__value_.__r.__words[2] = (std::string::size_type)v22[2];
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v23;
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v73.__r_.__value_.__l.__size_ != 1)
          goto LABEL_47;
        v24 = *v73.__r_.__value_.__l.__data_;
        if (v24 != 40 && v24 != 91)
        {
          if (v24 != 93)
          {
            v25 = (std::string *)v73.__r_.__value_.__r.__words[0];
            if (*v73.__r_.__value_.__l.__data_ != 41)
            {
              if ((*((_BYTE *)&v73.__r_.__value_.__s + 23) & 0x80) == 0)
              {
                if (HIBYTE(v73.__r_.__value_.__r.__words[2]) != 1)
                  goto LABEL_47;
LABEL_29:
                v25 = &v73;
              }
              if (v25->__r_.__value_.__s.__data_[0] != 124)
              {
LABEL_47:
                v34 = a4;
                if (-1 - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) != v20)
                {
                  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 200))(a6);
                  v34 = v13;
                }
                LODWORD(v52[0]) = 0;
                if ((quasar::GrammarFST::getWeight(v13, (uint64_t)&v73, (float *)v52, 1) & 1) != 0)
                {
                  *(_QWORD *)&v56 = 0;
                  *((_QWORD *)&v56 + 1) = __PAIR64__(v34, v52[0]);
                  v13 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a6 + 208))(a6, v9, &v56);
LABEL_78:
                  v47 = 0;
                  ++v21;
                  goto LABEL_91;
                }
                v35 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a7 + 32))(a7, &v73);
                v36 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
                if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
                else
                  size = v73.__r_.__value_.__l.__size_;
                v38 = *(unsigned __int8 *)(a1 + 135);
                v39 = (char)v38;
                if ((v38 & 0x80u) != 0)
                  v38 = *(_QWORD *)(a1 + 120);
                if (size == v38)
                {
                  if (v39 >= 0)
                    v40 = (unsigned __int8 *)(a1 + 112);
                  else
                    v40 = *(unsigned __int8 **)(a1 + 112);
                  if ((*((_BYTE *)&v73.__r_.__value_.__s + 23) & 0x80) == 0)
                  {
                    if (*((_BYTE *)&v73.__r_.__value_.__s + 23))
                    {
                      v41 = &v73;
                      while (v41->__r_.__value_.__s.__data_[0] == *v40)
                      {
                        v41 = (std::string *)((char *)v41 + 1);
                        ++v40;
                        if (!--v36)
                          goto LABEL_77;
                      }
                      goto LABEL_76;
                    }
LABEL_77:
                    LODWORD(v56) = v35;
                    *(_QWORD *)((char *)&v56 + 4) = v35;
                    HIDWORD(v56) = v9;
                    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a6 + 208))(a6, v9, &v56);
                    __p = 0;
                    LODWORD(v54) = 0;
                    HIDWORD(v54) = v34;
                    v13 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a6 + 208))(a6, v9, &__p);
                    goto LABEL_78;
                  }
                  if (!memcmp(v73.__r_.__value_.__l.__data_, v40, v73.__r_.__value_.__l.__size_))
                    goto LABEL_77;
                }
LABEL_76:
                LODWORD(v56) = v35;
                *(_QWORD *)((char *)&v56 + 4) = v35;
                HIDWORD(v56) = v34;
                v13 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a6 + 208))(a6, v9, &v56);
                goto LABEL_78;
              }
            }
          }
LABEL_31:
          if (quasar::gLogLevel >= 1)
          {
            v71 = 0u;
            v72 = 0u;
            v69 = 0u;
            v70 = 0u;
            v67 = 0u;
            v68 = 0u;
            v65 = 0u;
            v66 = 0u;
            v63 = 0u;
            v64 = 0u;
            v62 = 0u;
            v60 = 0u;
            v61 = 0u;
            v58 = 0u;
            v59 = 0u;
            v56 = 0u;
            v57 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Unexpected regex found: '", 25);
            if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v27 = &v73;
            else
              v27 = (std::string *)v73.__r_.__value_.__r.__words[0];
            if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v28 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
            else
              v28 = v73.__r_.__value_.__l.__size_;
            v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
            v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"' in '", 6);
            v52[0] = (uint64_t)" ";
            v52[1] = 1;
            quasar::join<std::vector<std::string>>((uint64_t *)a2, v52);
            if ((v55 & 0x80u) == 0)
              p_p = &__p;
            else
              p_p = __p;
            if ((v55 & 0x80u) == 0)
              v32 = v55;
            else
              v32 = v54;
            v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)p_p, v32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"'", 1);
            if ((char)v55 < 0)
              operator delete(__p);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v56);
          }
          goto LABEL_74;
        }
      }
      else
      {
        if (HIBYTE(v73.__r_.__value_.__r.__words[2]) != 1)
          goto LABEL_47;
        if (v73.__r_.__value_.__s.__data_[0] != 40 && v73.__r_.__value_.__s.__data_[0] != 91)
        {
          if (v73.__r_.__value_.__s.__data_[0] != 93 && v73.__r_.__value_.__s.__data_[0] != 41)
            goto LABEL_29;
          goto LABEL_31;
        }
      }
      LODWORD(v52[0]) = 0;
      v51 = 0;
      v13 = quasar::GrammarFST::extractBracketedPart(v13, (uint64_t *)a2, v21, v52, &v51);
      if ((v13 & 1) != 0)
      {
        v42 = (__int128 *)(*(_QWORD *)a2 + 24 * v20 + 24);
        v43 = SLODWORD(v52[0]);
        v44 = (__int128 *)(*(_QWORD *)a2 + 24 * SLODWORD(v52[0]));
        *(_QWORD *)&v57 = 0;
        v56 = 0uLL;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::string *)&v56, v42, v44, 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (char *)v42) >> 3));
        v45 = a4;
        if (-1 - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) != v43)
          v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 200))(a6);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v73.__r_.__value_.__l.__size_ == 1)
          {
            v46 = (std::string *)v73.__r_.__value_.__r.__words[0];
            goto LABEL_81;
          }
        }
        else if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) == 1)
        {
          v46 = &v73;
LABEL_81:
          if (v46->__r_.__value_.__s.__data_[0] == 91)
          {
            __p = 0;
            LODWORD(v54) = 0;
            HIDWORD(v54) = v45;
            (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a6 + 208))(a6, v9, &__p);
          }
        }
        v48 = quasar::GrammarFST::compile(a1, &v56, v9, v45, (a5 + 1), a6, a7);
        if (v48)
        {
          v21 = v43 + 1;
          v9 = v45;
        }
        else
        {
          v9 = v9;
        }
        if (v48)
          v47 = 4;
        else
          v47 = 1;
        __p = &v56;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_90;
      }
      if (quasar::gLogLevel >= 1)
      {
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v62 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Unbalanced parenthesis or brackets found in grammar", 51);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v56);
      }
LABEL_74:
      v47 = 1;
LABEL_90:
      v34 = v9;
LABEL_91:
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if ((v47 | 4) != 4)
      {
        v17 = 0;
        goto LABEL_96;
      }
      v20 = v21;
      v19 = *(unsigned __int8 ***)a2;
      v9 = v34;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) <= v21)
        goto LABEL_95;
    }
  }
  if (v74 == v75)
  {
LABEL_95:
    v17 = 1;
    goto LABEL_96;
  }
  do
  {
    v16 = quasar::GrammarFST::compile(a1, v14, v9, a4, 1, a6, a7);
    v17 = v16;
    v14 += 24;
    if (v14 == v15)
      v18 = 0;
    else
      v18 = v16;
  }
  while ((v18 & 1) != 0);
LABEL_96:
  *(_QWORD *)&v56 = &v74;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  return v17;
}

void sub_1ADA4C7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;

  __p = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v23 - 121) < 0)
    operator delete(*(void **)(v22 + 272));
  a22 = v23 - 120;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

uint64_t quasar::GrammarFST::_createFST(uint64_t a1, quasar::SpokenFormLine **a2, _QWORD *a3, uint64_t a4, int a5, uint64_t a6)
{
  _DWORD *v10;
  _DWORD *v11;
  int v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  std::ios_base *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  quasar::SpokenFormLine *v23;
  quasar::SpokenFormLine *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string *v32;
  std::string::size_type size;
  _QWORD *v34;
  const std::locale::facet *v35;
  int v36;
  quasar::SpokenFormLine *v37;
  void *v41[2];
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::string __str;
  std::string v46;
  void *__p;
  _DWORD *v48;
  char v49;
  _BYTE v50[96];
  uint64_t v51;
  _QWORD v52[21];

  v52[19] = *MEMORY[0x1E0C80C00];
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&__p);
  v10 = v48;
  ++v48[14];
  v11 = (_DWORD *)a3[1];
  if (v11 && (v12 = v11[14] - 1, (v11[14] = v12) == 0))
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    v14 = v48;
    a3[1] = v10;
    __p = &unk_1E5D256C0;
    v10 = v14;
    if (!v14)
      goto LABEL_7;
  }
  else
  {
    a3[1] = v10;
    __p = &unk_1E5D256C0;
  }
  v13 = v10[14] - 1;
  v10[14] = v13;
  if (!v13)
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(&__p, "<eps>");
  (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a4 + 24))(a4, &__p, 0);
  if (v49 < 0)
    operator delete(__p);
  v15 = MEMORY[0x1E0DE4FB0];
  v16 = MEMORY[0x1E0DE4FB0] + 64;
  v17 = *(void **)(MEMORY[0x1E0DE4F48] + 8);
  v18 = *(void **)(MEMORY[0x1E0DE4F48] + 16);
  v52[0] = MEMORY[0x1E0DE4FB0] + 64;
  __p = v17;
  *(void **)((char *)&__p + *((_QWORD *)v17 - 3)) = v18;
  v19 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
  std::ios_base::init(v19, &v48);
  v19[1].__vftable = 0;
  v19[1].__fmtflags_ = -1;
  __p = (void *)(v15 + 24);
  v52[0] = v16;
  MEMORY[0x1AF44CA64](&v48);
  v20 = *(unsigned __int8 *)(a6 + 23);
  if ((v20 & 0x80u) != 0)
    v20 = *(_QWORD *)(a6 + 8);
  if (v20)
    std::ofstream::open();
  v21 = (*(uint64_t (**)(_QWORD *))(*a3 + 200))(a3);
  (*(void (**)(_QWORD *, uint64_t))(*a3 + 176))(a3, v21);
  v22 = (*(uint64_t (**)(_QWORD *))(*a3 + 200))(a3);
  (*(void (**)(_QWORD *, uint64_t, float))(*a3 + 184))(a3, v22, 0.0);
  v23 = *a2;
  v24 = a2[1];
  if (*a2 == v24)
  {
    v25 = 0;
    v37 = *a2;
  }
  else
  {
    LODWORD(v25) = 0;
    do
    {
      memset(&v46, 0, sizeof(v46));
      if (a5)
      {
        v26 = *(std::__shared_weak_count **)(a1 + 32);
        v43 = *(_QWORD *)(a1 + 24);
        v44 = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(p_shared_owners);
          while (__stxr(v28 + 1, p_shared_owners));
        }
        quasar::SpokenFormLine::getTokenizedLineWithPrior((uint64_t)v23, &v43, (unsigned __int8 **)(a1 + 48), *(uint64_t **)(a1 + 40), 0, a1 + 136, &__str);
        std::string::operator=(&v46, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v29 = v44;
        if (v44)
        {
          v30 = (unint64_t *)&v44->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
      else
      {
        quasar::SpokenFormLine::getLineWithPrior(v23, &__str);
        std::string::operator=(&v46, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v51)
      {
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &v46;
        else
          v32 = (std::string *)v46.__r_.__value_.__r.__words[0];
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        else
          size = v46.__r_.__value_.__l.__size_;
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v32, size);
        std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
        v35 = std::locale::use_facet((const std::locale *)&__str, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
        std::locale::~locale((std::locale *)&__str);
        std::ostream::put();
        std::ostream::flush();
      }
      std::string::basic_string[abi:ne180100]<0>(v41, " ");
      quasar::splitAndTrimNoEmpty(&v46, (char *)v41, &__str);
      if (v42 < 0)
        operator delete(v41[0]);
      v36 = quasar::GrammarFST::compile(a1, (uint64_t)&__str, v21, v22, 0, (uint64_t)a3, a4);
      v41[0] = &__str;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v41);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      v25 = v25 + (v36 ^ 1);
      v23 = (quasar::SpokenFormLine *)((char *)v23 + 112);
    }
    while (v23 != v24);
    v23 = *a2;
    v37 = a2[1];
  }
  if (0x6DB6DB6DB6DB6DB7 * ((v37 - v23) >> 4) == v25)
  {
    v46.__r_.__value_.__r.__words[0] = 0;
    LODWORD(v46.__r_.__value_.__r.__words[1]) = 0;
    HIDWORD(v46.__r_.__value_.__r.__words[1]) = v22;
    (*(void (**)(_QWORD *, uint64_t, std::string *))(*a3 + 208))(a3, v21, &v46);
  }
  if (v51 && !std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3)), *(_DWORD *)&v50[*((_QWORD *)__p - 3)] | 4);
  __p = (void *)*MEMORY[0x1E0DE4F48];
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1AF44CA70](&v48);
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](v52);
  return v25;
}

void sub_1ADA4CD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,std::locale a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::ofstream::~ofstream(&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::GrammarFST::createFstWithTokenization(uint64_t a1, quasar::SpokenFormLine **a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  return quasar::GrammarFST::_createFST(a1, a2, a3, a4, 1, a5);
}

void quasar::SpokenFormLine::getLineWithPrior(quasar::SpokenFormLine *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  char *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string v16;
  std::string v17;
  std::string v18;

  if (*((_BYTE *)this + 56))
  {
    std::to_string(&v16, *(float *)this);
    v4 = std::string::insert(&v16, 0, "prior=");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v17, " ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v10 = (const std::string::value_type *)*((_QWORD *)this + 1);
    v9 = (char *)this + 8;
    v8 = v10;
    v11 = v9[23];
    if (v11 >= 0)
      v12 = v9;
    else
      v12 = v8;
    if (v11 >= 0)
      v13 = v9[23];
    else
      v13 = *((_QWORD *)v9 + 1);
    v14 = std::string::append(&v18, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  else if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

void sub_1ADA4CFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1ADA4D054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::nnet1::Nnet>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x51B3BEA3677D46CFLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<kaldi::nnet1::Nnet>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 376 * a2;
    while (v3 != v7)
      kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(v3 - 376));
    a1[1] = v7;
  }
}

double kaldi::nnet1::ParallelComponent::ParallelComponent(kaldi::nnet1::ParallelComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 54) = a2;
  *((_DWORD *)this + 55) = a3;
  *((_WORD *)this + 112) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 26) = off_1E5D2E4A0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 264) = xmmword_1AE13F660;
  *((_QWORD *)this + 35) = 0x3BF800000;
  *((_DWORD *)this + 72) = 1;
  *((_WORD *)this + 146) = 0;
  *((_BYTE *)this + 294) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = &unk_1E5D2C5B0;
  *((_DWORD *)this + 10) = 1;
  *(_QWORD *)this = &unk_1E5D00F68;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 26) = &unk_1E5D01110;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE13F660;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *((_QWORD *)this + 6) = &off_1E5D305B8;
  *((_QWORD *)this + 11) = &unk_1E5D305D8;
  *((_QWORD *)this + 12) = 0x100000001;
  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_QWORD *)this = &off_1E5D2D520;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = &off_1E5D2D678;
  *((_QWORD *)this + 21) = &unk_1E5D2D6A0;
  *((_WORD *)this + 88) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = &off_1E5D2D7D8;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  return result;
}

double kaldi::nnet1::WordVecComponent::WordVecComponent(kaldi::nnet1::WordVecComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 56) = xmmword_1AE13F660;
  *((_DWORD *)this + 18) = -1082130432;
  *(_QWORD *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 86) = 0;
  *(_QWORD *)this = &off_1E5D2D230;
  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 11) = &unk_1E5D2D360;
  *((_QWORD *)this + 12) = &unk_1E5D34170;
  *((_BYTE *)this + 136) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 18) = &unk_1E5D34170;
  *((_BYTE *)this + 184) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 24) = &unk_1E5D34170;
  *((_BYTE *)this + 232) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 64) = a3 / a2;
  *((_DWORD *)this + 65) = 1065353216;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_QWORD *)this + 33) = &unk_1E5D34170;
  *((_BYTE *)this + 304) = 0;
  *((_QWORD *)this + 47) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  return result;
}

uint64_t *kaldi::nnet1::ParallelComponent::CheckNetworkDimensions(uint64_t *this)
{
  uint64_t v1;
  kaldi::nnet1::Nnet *v2;
  kaldi::nnet1::Nnet *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[34];

  v1 = (uint64_t)this;
  *((_BYTE *)this + 177) = 1;
  v2 = (kaldi::nnet1::Nnet *)this[23];
  v3 = (kaldi::nnet1::Nnet *)this[24];
  if (v2 == v3)
  {
    v5 = 0;
    v4 = 0;
    v8 = *this;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = kaldi::nnet1::Nnet::InputDim(v2);
      v7 = kaldi::nnet1::Nnet::OutputDim(v2);
      this = (uint64_t *)kaldi::nnet1::Nnet::OutputDim(v2);
      v8 = *(_QWORD *)v1;
      if ((_DWORD)this != *(_DWORD *)(v1 + 12 + *(_QWORD *)(*(_QWORD *)v1 - 24)))
        *(_BYTE *)(v1 + 177) = 0;
      v4 += v6;
      v5 += v7;
      v2 = (kaldi::nnet1::Nnet *)((char *)v2 + 376);
    }
    while (v2 != v3);
  }
  *(_BYTE *)(v1 + 176) = 1;
  v9 = *(int *)(v1 + *(_QWORD *)(v8 - 24) + 8);
  if ((_DWORD)v9 != v4)
  {
    if (v4 / (unint64_t)(0x51B3BEA3677D46CFLL * ((uint64_t)(*(_QWORD *)(v1 + 192) - *(_QWORD *)(v1 + 184)) >> 3)) != v9)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Input dimension of parallel component and input dimensions of nested networks do not match.");
      goto LABEL_16;
    }
    *(_BYTE *)(v1 + 176) = 0;
  }
  if (!*(_BYTE *)(v1 + 177) && *(_DWORD *)(v1 + *(_QWORD *)(v8 - 24) + 12) != v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Output dimension of parallel component and output dimensions of nested networks do not match.");
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return this;
}

char *std::vector<kaldi::nnet1::Nnet>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAE4C415C9882BALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[376 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a4 + v7), (const kaldi::nnet1::Nnet *)(a2 + v7));
      v7 += 376;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADA4D500(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 376;
    do
    {
      kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(v4 + v2));
      v2 -= 376;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAE4C415C9882BALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(376 * a2);
}

void std::vector<kaldi::nnet1::Nnet>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(v4 - 376));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

kaldi::nnet1::Nnet *std::vector<kaldi::nnet1::Nnet>::__append(uint64_t *a1, unint64_t a2)
{
  kaldi::nnet1::Nnet *result;
  uint64_t v5;
  uint64_t v6;
  kaldi::nnet1::Nnet *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  kaldi::nnet1::Nnet *v13;
  uint64_t v14;
  kaldi::nnet1::Nnet *v15;
  uint64_t v16;
  kaldi::nnet1::Nnet *v17;
  _QWORD v18[2];
  kaldi::nnet1::Nnet *v19;
  char *v20;
  kaldi::nnet1::Nnet *v21;

  v6 = a1[2];
  result = (kaldi::nnet1::Nnet *)(a1 + 2);
  v5 = v6;
  v7 = (kaldi::nnet1::Nnet *)*((_QWORD *)result - 1);
  if (0x51B3BEA3677D46CFLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (kaldi::nnet1::Nnet *)((char *)v7 + 376 * a2);
      v14 = 376 * a2;
      do
      {
        result = kaldi::nnet1::Nnet::Nnet(v7);
        v7 = (kaldi::nnet1::Nnet *)((char *)v7 + 376);
        v14 -= 376;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0x51B3BEA3677D46CFLL * (((uint64_t)v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAE4C415C9882B9)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x51B3BEA3677D46CFLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x572620AE4C415CLL)
      v11 = 0xAE4C415C9882B9;
    else
      v11 = v9;
    v21 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>((uint64_t)result, v11);
    else
      v12 = 0;
    v15 = (kaldi::nnet1::Nnet *)&v12[376 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v19 = v15;
    v20 = &v12[376 * v11];
    v16 = 376 * a2;
    v17 = (kaldi::nnet1::Nnet *)((char *)v15 + 376 * a2);
    do
    {
      kaldi::nnet1::Nnet::Nnet(v15);
      v15 = (kaldi::nnet1::Nnet *)((char *)v15 + 376);
      v16 -= 376;
    }
    while (v16);
    v19 = v17;
    std::vector<kaldi::nnet1::Nnet>::__swap_out_circular_buffer(a1, v18);
    return (kaldi::nnet1::Nnet *)std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_1ADA4D73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::nnet1::Nnet>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  kaldi::nnet1::Nnet *v12;

  v10 = 0;
  v11 = a7 - 376;
  while (a3 + v10 != a5)
  {
    v12 = (kaldi::nnet1::Nnet *)(v11 + v10);
    v10 -= 376;
    kaldi::nnet1::Nnet::Nnet(v12, (const kaldi::nnet1::Nnet *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 376;
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(i - 376));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *,false>(unint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  char v23;
  BOOL v24;
  __int128 v25;
  const void *v26;
  __int128 v27;
  uint64_t v28;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

uint64_t std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(uint64_t a1, const void **a2, const void **a3)
{
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  int v15;
  BOOL v16;
  const void **v17;
  const void **v18;
  const void **v19;
  int v20;
  const void **v21;
  const void **v22;
  const void **v23;
  int v24;
  size_t v25;
  const void **v26;
  size_t v27;
  const void **v28;
  size_t v29;
  int v30;

  v5 = *((char *)a3 + 23);
  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  if (v6 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v5 >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = (size_t)a3[1];
  if (v5 >= 0)
    v10 = a3;
  else
    v10 = *a3;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = v7 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  v15 = memcmp(v10, v8, v11);
  v16 = v9 < v7;
  if (v15)
    v16 = v15 < 0;
  if (v16)
    return 0;
  v19 = (const void **)a3[3];
  v18 = a3 + 3;
  v17 = v19;
  v20 = *((char *)v18 + 23);
  v23 = (const void **)a2[3];
  v22 = a2 + 3;
  v21 = v23;
  v24 = *((char *)v22 + 23);
  if (v24 >= 0)
    v25 = *((unsigned __int8 *)v22 + 23);
  else
    v25 = (size_t)v22[1];
  if (v24 >= 0)
    v26 = v22;
  else
    v26 = v21;
  if (v20 >= 0)
    v27 = *((unsigned __int8 *)v18 + 23);
  else
    v27 = (size_t)v18[1];
  if (v20 >= 0)
    v28 = v18;
  else
    v28 = v17;
  if (v27 >= v25)
    v29 = v25;
  else
    v29 = v27;
  v30 = memcmp(v26, v28, v29);
  if (v30)
    return v30 < 0;
  else
    return v25 < v27;
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(uint64_t a1, const void **a2, uint64_t a3)
{
  const void **v5;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13[2];
  const void *v14;
  __int128 __p;
  uint64_t v16;

  if ((const void **)a1 != a2)
  {
    v5 = (const void **)(a1 + 48);
    if ((const void **)(a1 + 48) != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v5;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, v5, (const void **)v8))
        {
          *(_OWORD *)v13 = *(_OWORD *)v9;
          v14 = v9[2];
          v9[1] = 0;
          v9[2] = 0;
          *v9 = 0;
          __p = *(_OWORD *)(v8 + 72);
          v16 = *(_QWORD *)(v8 + 88);
          *(_QWORD *)(v8 + 72) = 0;
          *(_QWORD *)(v8 + 80) = 0;
          v10 = v7;
          *(_QWORD *)(v8 + 88) = 0;
          while (1)
          {
            std::pair<std::string,std::string>::operator=[abi:ne180100](a1 + v10 + 48, (__int128 *)(a1 + v10));
            if (!v10)
              break;
            v11 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v13, (const void **)(a1 + v10 - 48));
            v10 -= 48;
            if ((v11 & 1) == 0)
            {
              v12 = a1 + v10 + 48;
              goto LABEL_10;
            }
          }
          v12 = a1;
LABEL_10:
          std::pair<std::string,std::string>::operator=[abi:ne180100](v12, (__int128 *)v13);
          if (SHIBYTE(v16) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v14) < 0)
            operator delete(v13[0]);
        }
        v5 = v9 + 6;
        v7 += 48;
        v8 = (uint64_t)v9;
      }
      while (v9 + 6 != a2);
    }
  }
}

void sub_1ADA4DF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(const void **a1, const void **a2, uint64_t a3)
{
  const void **v4;
  const void **v5;
  const void **v7;
  void *v8[2];
  const void *v9;
  __int128 __p;
  const void *v11;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 6;
    if (a1 + 6 != a2)
    {
      do
      {
        v7 = v5;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, v5, v4))
        {
          *(_OWORD *)v8 = *(_OWORD *)v7;
          v9 = v7[2];
          v7[1] = 0;
          v7[2] = 0;
          *v7 = 0;
          __p = *(_OWORD *)(v4 + 9);
          v11 = v4[11];
          v4[9] = 0;
          v4[10] = 0;
          v4[11] = 0;
          do
          {
            std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)(v4 + 6), (__int128 *)v4);
            v4 -= 6;
          }
          while ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v8, v4) & 1) != 0);
          std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)(v4 + 6), (__int128 *)v8);
          if (SHIBYTE(v11) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v9) < 0)
            operator delete(v8[0]);
        }
        v5 = v7 + 6;
        v4 = v7;
      }
      while (v7 + 6 != a2);
    }
  }
}

void sub_1ADA4E030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v8 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a4, (const void **)a2, (const void **)a1);
  result = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a4, (const void **)a3, (const void **)a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v17 = *((_QWORD *)a2 + 2);
    v18 = *a2;
    v19 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v19;
    *a3 = v18;
    *((_QWORD *)a3 + 2) = v17;
    v20 = *((_QWORD *)a2 + 5);
    v21 = *(__int128 *)((char *)a2 + 24);
    v22 = *((_QWORD *)a3 + 5);
    *(__int128 *)((char *)a2 + 24) = *(__int128 *)((char *)a3 + 24);
    *((_QWORD *)a2 + 5) = v22;
    *(__int128 *)((char *)a3 + 24) = v21;
    *((_QWORD *)a3 + 5) = v20;
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a4, (const void **)a2, (const void **)a1))return 1;
    v23 = *((_QWORD *)a1 + 2);
    v24 = *a1;
    v25 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v25;
    *a2 = v24;
    *((_QWORD *)a2 + 2) = v23;
    v26 = *((_QWORD *)a1 + 5);
    v27 = *(__int128 *)((char *)a1 + 24);
    v28 = *((_QWORD *)a2 + 5);
    *(__int128 *)((char *)a1 + 24) = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a1 + 5) = v28;
    *(__int128 *)((char *)a2 + 24) = v27;
    *((_QWORD *)a2 + 5) = v26;
    return 2;
  }
  v10 = (__int128 *)((char *)a1 + 24);
  if (!(_DWORD)result)
  {
    v29 = *((_QWORD *)a1 + 2);
    v30 = *a1;
    v31 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v31;
    *a2 = v30;
    *((_QWORD *)a2 + 2) = v29;
    v32 = *((_QWORD *)a1 + 5);
    v33 = *v10;
    v34 = *((_QWORD *)a2 + 5);
    *v10 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a1 + 5) = v34;
    *(__int128 *)((char *)a2 + 24) = v33;
    *((_QWORD *)a2 + 5) = v32;
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a4, (const void **)a3, (const void **)a2))return 1;
    v35 = *((_QWORD *)a2 + 2);
    v36 = *a2;
    v37 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v37;
    *a3 = v36;
    *((_QWORD *)a3 + 2) = v35;
    v38 = *((_QWORD *)a2 + 5);
    v39 = *(__int128 *)((char *)a2 + 24);
    v40 = *((_QWORD *)a3 + 5);
    *(__int128 *)((char *)a2 + 24) = *(__int128 *)((char *)a3 + 24);
    *((_QWORD *)a2 + 5) = v40;
    *(__int128 *)((char *)a3 + 24) = v39;
    *((_QWORD *)a3 + 5) = v38;
    return 2;
  }
  v11 = *((_QWORD *)a1 + 2);
  v12 = *a1;
  v13 = *((_QWORD *)a3 + 2);
  *a1 = *a3;
  *((_QWORD *)a1 + 2) = v13;
  *a3 = v12;
  *((_QWORD *)a3 + 2) = v11;
  v14 = *((_QWORD *)a1 + 5);
  v15 = *v10;
  v16 = *((_QWORD *)a3 + 5);
  *v10 = *(__int128 *)((char *)a3 + 24);
  *((_QWORD *)a1 + 5) = v16;
  *(__int128 *)((char *)a3 + 24) = v15;
  *((_QWORD *)a3 + 5) = v14;
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string,std::string> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v6;
  unint64_t v7;
  const void **v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v17[2];
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = a2;
  *(_OWORD *)v17 = *(_OWORD *)a1;
  v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)__p = v6;
  v20 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v17, (const void **)(a2 - 48)) & 1) != 0)
  {
    v7 = a1;
    do
      v7 += 48;
    while ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v17, (const void **)v7) & 1) == 0);
  }
  else
  {
    v8 = (const void **)(a1 + 48);
    do
    {
      v7 = (unint64_t)v8;
      if ((unint64_t)v8 >= v4)
        break;
      v9 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v17, v8);
      v8 = (const void **)(v7 + 48);
    }
    while (!v9);
  }
  if (v7 < v4)
  {
    do
      v4 -= 48;
    while ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v17, (const void **)v4) & 1) != 0);
  }
  while (v7 < v4)
  {
    v10 = *(_OWORD *)v7;
    v22 = *(_QWORD *)(v7 + 16);
    v21 = v10;
    v11 = *(_OWORD *)v4;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
    *(_OWORD *)v7 = v11;
    v12 = v21;
    *(_QWORD *)(v4 + 16) = v22;
    *(_OWORD *)v4 = v12;
    v13 = *(_QWORD *)(v7 + 40);
    v14 = *(_OWORD *)(v7 + 24);
    v15 = *(_QWORD *)(v4 + 40);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(v7 + 40) = v15;
    *(_OWORD *)(v4 + 24) = v14;
    *(_QWORD *)(v4 + 40) = v13;
    do
      v7 += 48;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v17, (const void **)v7));
    do
      v4 -= 48;
    while ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v17, (const void **)v4) & 1) != 0);
  }
  if (v7 - 48 != a1)
    std::pair<std::string,std::string>::operator=[abi:ne180100](a1, (__int128 *)(v7 - 48));
  std::pair<std::string,std::string>::operator=[abi:ne180100](v7 - 48, (__int128 *)v17);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  return v7;
}

void sub_1ADA4E3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string,std::string> *,std::__less<void,void> &>(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  const void **v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  const void *v15;
  __int128 v16;
  const void *v17;
  __int128 *v18;
  void *v20[2];
  uint64_t v21;
  void *__p[2];
  uint64_t v23;
  __int128 v24;
  const void *v25;

  v6 = 0;
  v21 = *(_QWORD *)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)v20 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)__p = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  do
  {
    v8 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)(a1 + v6 + 48), (const void **)v20);
    v6 += 48;
  }
  while ((v8 & 1) != 0);
  v9 = a1 + v6;
  if (v6 == 48)
  {
    do
    {
      if (v9 >= (unint64_t)a2)
        break;
      a2 -= 6;
    }
    while ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, a2, (const void **)v20) & 1) == 0);
  }
  else
  {
    do
      a2 -= 6;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, a2, (const void **)v20));
  }
  if (v9 >= (unint64_t)a2)
  {
    v18 = (__int128 *)(v9 - 48);
  }
  else
  {
    v10 = a1 + v6;
    v11 = a2;
    do
    {
      v24 = *(_OWORD *)v10;
      v12 = v24;
      v25 = *(const void **)(v10 + 16);
      v13 = v25;
      v14 = v11[2];
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *(_QWORD *)(v10 + 16) = v14;
      v11[2] = v13;
      *(_OWORD *)v11 = v12;
      v15 = *(const void **)(v10 + 40);
      v16 = *(_OWORD *)(v10 + 24);
      v17 = v11[5];
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 3);
      *(_QWORD *)(v10 + 40) = v17;
      *(_OWORD *)(v11 + 3) = v16;
      v11[5] = v15;
      do
        v10 += 48;
      while ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v10, (const void **)v20) & 1) != 0);
      do
        v11 -= 6;
      while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, v11, (const void **)v20));
    }
    while (v10 < (unint64_t)v11);
    v18 = (__int128 *)(v10 - 48);
  }
  if (v18 != (__int128 *)a1)
    std::pair<std::string,std::string>::operator=[abi:ne180100](a1, v18);
  std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)v18, (__int128 *)v20);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  return v18;
}

void sub_1ADA4E5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void *v23[2];
  uint64_t v24;
  __int128 __p;
  uint64_t v26;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (_OWORD *)(a2 - 48);
      if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)(a2 - 48), (const void **)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a2 - 32);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v11;
        *v8 = v10;
        *(_QWORD *)(a2 - 32) = v9;
        v12 = *(_QWORD *)(a1 + 40);
        v13 = *(_OWORD *)(a1 + 24);
        v14 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 40) = v14;
        *(_OWORD *)(a2 - 24) = v13;
        *(_QWORD *)(a2 - 8) = v12;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v15 = (const void **)(a1 + 96);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v16 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      break;
  }
  while (1)
  {
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v16, v15))
    {
      *(_OWORD *)v23 = *(_OWORD *)v16;
      v24 = *(_QWORD *)(v16 + 16);
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      v19 = *(_OWORD *)(v16 + 24);
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      __p = v19;
      v26 = *(_QWORD *)(v16 + 40);
      v20 = v17;
      *(_QWORD *)(v16 + 32) = 0;
      *(_QWORD *)(v16 + 40) = 0;
      while (1)
      {
        std::pair<std::string,std::string>::operator=[abi:ne180100](a1 + v20 + 144, (__int128 *)(a1 + v20 + 96));
        if (v20 == -96)
          break;
        v21 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v23, (const void **)(a1 + v20 + 48));
        v20 -= 48;
        if ((v21 & 1) == 0)
        {
          v22 = a1 + v20 + 144;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      std::pair<std::string,std::string>::operator=[abi:ne180100](v22, (__int128 *)v23);
      if (SHIBYTE(v26) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v24) < 0)
        operator delete(v23[0]);
      if (++v18 == 8)
        return v16 + 48 == a2;
    }
    v15 = (const void **)v16;
    v17 += 48;
    v16 += 48;
    if (v16 == a2)
      return 1;
  }
}

void sub_1ADA4E838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a5, (const void **)a4, (const void **)a3))
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(_QWORD *)(a4 + 16) = v11;
    v14 = *(_QWORD *)(a3 + 40);
    v15 = *(_OWORD *)(a3 + 24);
    v16 = *(_QWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 40) = v16;
    *(_OWORD *)(a4 + 24) = v15;
    *(_QWORD *)(a4 + 40) = v14;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a5, (const void **)a3, (const void **)a2))
    {
      v17 = *(_QWORD *)(a2 + 16);
      v18 = *(_OWORD *)a2;
      v19 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v19;
      *(_OWORD *)a3 = v18;
      *(_QWORD *)(a3 + 16) = v17;
      v20 = *(_QWORD *)(a2 + 40);
      v21 = *(_OWORD *)(a2 + 24);
      v22 = *(_QWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a2 + 40) = v22;
      *(_OWORD *)(a3 + 24) = v21;
      *(_QWORD *)(a3 + 40) = v20;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a5, (const void **)a2, (const void **)a1))
      {
        v23 = *(_QWORD *)(a1 + 16);
        v24 = *(_OWORD *)a1;
        v25 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v25;
        *(_OWORD *)a2 = v24;
        *(_QWORD *)(a2 + 16) = v23;
        v26 = *(_QWORD *)(a1 + 40);
        result = *(__n128 *)(a1 + 24);
        v27 = *(_QWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 40) = v27;
        *(__n128 *)(a2 + 24) = result;
        *(_QWORD *)(a2 + 40) = v26;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(a1, a2, a3, a4, a6);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a6, (const void **)a5, (const void **)a4))
  {
    v13 = *(_QWORD *)(a4 + 16);
    v14 = *(_OWORD *)a4;
    v15 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v15;
    *(_OWORD *)a5 = v14;
    *(_QWORD *)(a5 + 16) = v13;
    v16 = *(_QWORD *)(a4 + 40);
    v17 = *(_OWORD *)(a4 + 24);
    v18 = *(_QWORD *)(a5 + 40);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    *(_QWORD *)(a4 + 40) = v18;
    *(_OWORD *)(a5 + 24) = v17;
    *(_QWORD *)(a5 + 40) = v16;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a6, (const void **)a4, (const void **)a3))
    {
      v19 = *(_QWORD *)(a3 + 16);
      v20 = *(_OWORD *)a3;
      v21 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v21;
      *(_OWORD *)a4 = v20;
      *(_QWORD *)(a4 + 16) = v19;
      v22 = *(_QWORD *)(a3 + 40);
      v23 = *(_OWORD *)(a3 + 24);
      v24 = *(_QWORD *)(a4 + 40);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
      *(_QWORD *)(a3 + 40) = v24;
      *(_OWORD *)(a4 + 24) = v23;
      *(_QWORD *)(a4 + 40) = v22;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a6, (const void **)a3, (const void **)a2))
      {
        v25 = *(_QWORD *)(a2 + 16);
        v26 = *(_OWORD *)a2;
        v27 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v27;
        *(_OWORD *)a3 = v26;
        *(_QWORD *)(a3 + 16) = v25;
        v28 = *(_QWORD *)(a2 + 40);
        v29 = *(_OWORD *)(a2 + 24);
        v30 = *(_QWORD *)(a3 + 40);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
        *(_QWORD *)(a2 + 40) = v30;
        *(_OWORD *)(a3 + 24) = v29;
        *(_QWORD *)(a3 + 40) = v28;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a6, (const void **)a2, (const void **)a1))
        {
          v31 = *(_QWORD *)(a1 + 16);
          v32 = *(_OWORD *)a1;
          v33 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v33;
          *(_OWORD *)a2 = v32;
          *(_QWORD *)(a2 + 16) = v31;
          v34 = *(_QWORD *)(a1 + 40);
          result = *(__n128 *)(a1 + 24);
          v35 = *(_QWORD *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 40) = v35;
          *(__n128 *)(a2 + 24) = result;
          *(_QWORD *)(a2 + 40) = v34;
        }
      }
    }
  }
  return result;
}

uint64_t std::pair<std::string,std::string>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  return a1;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 48;
    if (a2 - a1 >= 49)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 48 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(a1, a4, v9, v12);
        v12 -= 48;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = (_OWORD *)(a1 + 24);
      v15 = v6;
      do
      {
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a4, (const void **)v15, (const void **)a1))
        {
          v16 = *(_QWORD *)(v15 + 16);
          v17 = *(_OWORD *)v15;
          v18 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)v15 = *(_OWORD *)a1;
          *(_QWORD *)(v15 + 16) = v18;
          *(_OWORD *)a1 = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_QWORD *)(v15 + 40);
          v20 = *(_OWORD *)(v15 + 24);
          v21 = *(_QWORD *)(a1 + 40);
          *(_OWORD *)(v15 + 24) = *v14;
          *(_QWORD *)(v15 + 40) = v21;
          *v14 = v20;
          *(_QWORD *)(a1 + 40) = v19;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(a1, a4, v9, a1);
        }
        v15 += 48;
      }
      while (v15 != a3);
      v13 = a3;
    }
    if (v8 >= 49)
    {
      v22 = v8 / 0x30uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<std::string,std::string> *>(a1, v6, a4, v22);
        v6 -= 48;
      }
      while (v22-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  void *__p[2];
  uint64_t v19;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 4)))
    {
      v10 = (0x5555555555555556 * ((a4 - a1) >> 4)) | 1;
      v11 = a1 + 48 * v10;
      v12 = 0x5555555555555556 * ((a4 - a1) >> 4) + 2;
      if (v12 < a3
        && std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a2, (const void **)(a1 + 48 * v10), (const void **)(v11 + 48)))
      {
        v11 += 48;
        v10 = v12;
      }
      if ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a2, (const void **)v11, (const void **)v5) & 1) == 0)
      {
        *(_OWORD *)v16 = *(_OWORD *)v5;
        v17 = *(_QWORD *)(v5 + 16);
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v13 = *(_OWORD *)(v5 + 24);
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 24) = 0;
        *(_OWORD *)__p = v13;
        v19 = *(_QWORD *)(v5 + 40);
        *(_QWORD *)(v5 + 32) = 0;
        *(_QWORD *)(v5 + 40) = 0;
        do
        {
          v14 = v11;
          std::pair<std::string,std::string>::operator=[abi:ne180100](v5, (__int128 *)v11);
          if (v7 < v10)
            break;
          v15 = (2 * v10) | 1;
          v11 = a1 + 48 * v15;
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v15;
          }
          else if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a2, (const void **)(a1 + 48 * v15), (const void **)(v11 + 48)))
          {
            v11 += 48;
          }
          else
          {
            v10 = v15;
          }
          v5 = v14;
        }
        while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a2, (const void **)v11, (const void **)v16));
        std::pair<std::string,std::string>::operator=[abi:ne180100](v14, (__int128 *)v16);
        if (SHIBYTE(v19) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v17) < 0)
          operator delete(v16[0]);
      }
    }
  }
}

void sub_1ADA4EEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  void *v11[2];
  uint64_t v12;
  void *__p[2];
  uint64_t v14;

  if (a4 >= 2)
  {
    *(_OWORD *)v11 = *(_OWORD *)a1;
    v12 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)__p = v7;
    v14 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(a1, a3, a4);
    v9 = v8;
    v10 = (__int128 *)(a2 - 48);
    if (v8 == v10)
    {
      std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)v8, (__int128 *)v11);
    }
    else
    {
      std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)v8, v10);
      std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)v10, (__int128 *)v11);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(a1, (uint64_t)(v9 + 3), a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - a1 + 48) >> 4));
    }
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
  }
}

void sub_1ADA4EFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (__int128 *)(a1 + 48 * v6 + 48);
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a2, (const void **)(a1 + 48 * v6 + 48), (const void **)(a1 + 48 * v6 + 96)))
    {
      v9 += 3;
      v10 = v11;
    }
    std::pair<std::string,std::string>::operator=[abi:ne180100](a1, v9);
    a1 = (uint64_t)v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *__p[2];
  uint64_t v14;

  if (a4 >= 2)
  {
    v7 = (unint64_t)(a4 - 2) >> 1;
    v8 = (__int128 *)(a1 + 48 * v7);
    v9 = a2 - 48;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v8, (const void **)(a2 - 48)))
    {
      *(_OWORD *)v11 = *(_OWORD *)v9;
      v12 = *(_QWORD *)(v9 + 16);
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      *(_OWORD *)__p = *(_OWORD *)(a2 - 24);
      v14 = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 24) = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      do
      {
        v10 = (uint64_t)v8;
        std::pair<std::string,std::string>::operator=[abi:ne180100](v9, v8);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (__int128 *)(a1 + 48 * v7);
        v9 = v10;
      }
      while ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v8, (const void **)v11) & 1) != 0);
      std::pair<std::string,std::string>::operator=[abi:ne180100](v10, (__int128 *)v11);
      if (SHIBYTE(v14) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v12) < 0)
        operator delete(v11[0]);
    }
  }
}

void sub_1ADA4F1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[1],0>(std::string *this, __int128 *a2, char *__s)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::basic_string[abi:ne180100]<0>(this[1].__r_.__value_.__r.__words, __s);
  return this;
}

void sub_1ADA4F238(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

const void **std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,std::string> *>,std::__wrap_iter<std::pair<std::string,std::string> *>,std::pair<std::string,std::string>,std::__identity,std::__less<void,void>>(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  const void **v4;
  unint64_t v7;
  const void **v8;
  int v9;

  v4 = a1;
  if (a2 != a1)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 4);
    do
    {
      v8 = &v4[6 * (v7 >> 1)];
      v9 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a4, v8, a3);
      if (v9)
        v7 += ~(v7 >> 1);
      else
        v7 >>= 1;
      if (v9)
        v4 = v8 + 6;
    }
    while (v7);
  }
  return v4;
}

_QWORD *TSegmenter::TSegmenter(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_1E5D173C8;
  a1[1] = 0;
  TAllocator::TAllocator((TAllocator *)(a1 + 2), 2048);
  a1[7] = a2;
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[12] = a3;
  a1[13] = a4;
  a1[1] = 5;
  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  a1[11] = *(_QWORD *)(a3 + 72);
  return a1;
}

void sub_1ADA4F378(_Unwind_Exception *a1)
{
  uint64_t v1;
  TAllocator *v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v5;
    operator delete(v5);
  }
  TAllocator::clear(v2);
  _Unwind_Resume(a1);
}

void TSegmenter::~TSegmenter(TSegmenter *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 9) = v2;
  if (v2)
    operator delete(v2);
  TAllocator::clear((TSegmenter *)((char *)this + 16));
}

unsigned __int8 *TSegmenter::findSegmentEnd(_QWORD *a1, unsigned __int8 *a2, int *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int *v29;
  int v30;
  signed int v31;
  int *v32;
  signed int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *i;
  unint64_t v43;
  int *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 v47;
  int v48;
  int v49;
  unsigned __int8 v50;
  int v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  char isAlpha;
  unsigned __int8 v59;
  BOOL v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  int v64;
  unsigned __int8 v65;
  int v66;
  unsigned __int8 v67;
  uint64_t isPunct;
  TLocaleInfo *GlobalLocaleInfo;
  _BOOL8 v70;
  TLocaleInfo *v71;
  TLocaleInfo *v72;
  TLocaleInfo *v73;
  int v74;
  uint64_t v75;
  TLocaleInfo *v76;
  uint64_t v77;
  unsigned __int8 v78;
  BOOL v80;
  uint64_t v81;
  unsigned __int8 v82;
  int v83;
  int v84;
  int v85;
  int v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int *v92;
  int v93;
  int *v94;
  int v95;
  BOOL v96;
  TLocaleInfo *v97;
  TLocaleInfo *v98;
  TLocaleInfo *v99;
  unsigned int v100;
  TLocaleInfo *v101;
  _BOOL4 v103;
  TLocaleInfo *v104;
  TLocaleInfo *v105;
  TLocaleInfo *v106;
  TLocaleInfo *v107;
  TLocaleInfo *v108;
  TLocaleInfo *v109;
  TLocaleInfo *v110;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned __int8 v117;
  unint64_t v118;
  unsigned int v119;
  unsigned __int8 v120;
  int v121;
  TLocaleInfo *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned __int8 v129;
  int v130;
  unsigned __int8 v131;
  uint64_t v132;
  int *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v137;
  int v139;
  uint64_t v140;
  unint64_t v141;
  int *v142;
  unint64_t v143;
  TLocaleInfo *v144;
  TLocaleInfo *v145;
  TLocaleInfo *v146;
  TLocaleInfo *v147;
  TLocaleInfo *v148;
  TLocaleInfo *v149;
  TLocaleInfo *v150;
  TLocaleInfo *v151;
  TLocaleInfo *v152;
  TLocaleInfo *v153;
  unint64_t v154;
  int *v155;
  uint64_t v156;
  _OWORD v157[65];
  char v158;
  signed int v159;
  int v160;
  int v161[3];

  v5 = a5;
  v10 = a1[12];
  if (*(_DWORD *)(v10 + 64) != 2)
  {
    v35 = 0;
    v36 = 0;
    memset(v157, 0, 32);
    while (1)
    {
      v37 = a2[v35];
      if (v37 <= 0x20 && ((1 << v37) & 0x100003E01) != 0)
        break;
      v39 = v37 >> 6;
      v40 = 1 << v37;
      v41 = *((_QWORD *)v157 + v39);
      if ((v41 & v40) == 0)
      {
        *((_QWORD *)v157 + v39) = v41 | v40;
        ++v36;
      }
      ++v35;
    }
    i = &a2[v35];
    if (v36 >= 0x1F)
    {
      *a3 = 5;
      v43 = *(_QWORD *)(a5 + 16);
      v44 = (int *)&unk_1AE15CF10;
      v45 = a5;
      v46 = 6;
LABEL_264:
      TBuffer<wchar_t>::insert(v45, v43, v44, v46);
      return i;
    }
    if (v35 >= 0x100)
    {
      *a3 = 5;
LABEL_263:
      v43 = *(_QWORD *)(v5 + 16);
      v44 = (int *)&unk_1AE15CF2C;
      v45 = v5;
      v46 = 16;
      goto LABEL_264;
    }
  }
  v160 = 0;
  v11 = TLocaleInfo::multiByteToUnicode(v10, a2, &v160);
  if (v11 == -1)
  {
    LODWORD(v157[0]) = 0;
    for (i = a2 + 1; TLocaleInfo::multiByteToUnicode(a1[12], i, v157) == -1; ++i)
      ;
    *a3 = 5;
    v43 = *(_QWORD *)(v5 + 16);
    v44 = (int *)&unk_1AE15CF70;
    v45 = v5;
    v46 = 8;
    goto LABEL_264;
  }
  v12 = v11;
  v156 = v5;
  if (a1[11] >= 3uLL)
  {
    v13 = v160;
    if ((v14 & 1) == 0
    {
      v145 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v145);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v145;
    }
    v16 = (int)v13 < 65281 && (_DWORD)v13 != 12288;
    if ((int)v13 <= 65510
      && !v16
      && ((v13 - 65471) > 0x20
       || TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v13) != (_DWORD)v13))
    {
      v17 = v160;
      if ((v18 & 1) == 0
      {
        v147 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v147);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v147;
      }
      v160 = TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v17);
      *a4 |= 2uLL;
    }
  }
  v159 = 0;
  v19 = &a2[v12];
  v20 = TLocaleInfo::multiByteToUnicode(a1[12], v19, &v159);
  v21 = v20;
  if (*v19)
    v22 = v20 == -1;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v23 = TLocaleInfo::composeCharacter(a1[12], v160, v159);
      if (!v23)
        break;
      v24 = (v159 & 0xFFFFFFFB) != 0x670 && v159 >= 0x660;
      v25 = v24 ? 1 : 4;
      v26 = v159 >= 1611 ? v25 : 1;
      *a4 |= v26;
      v160 = v23;
      v19 += v21;
      v27 = TLocaleInfo::multiByteToUnicode(a1[12], v19, &v159);
      v21 = v27;
    }
    while (*v19 && v27 != -1);
  }
  v29 = (int *)a1[13];
  if (v29)
  {
    v30 = *v29;
    v31 = v160;
    if (*v29)
    {
      v32 = v29 + 2;
      do
      {
        v33 = *(v32 - 1);
        if (!v33)
          break;
        if (v160 == v30)
        {
          v160 = *(v32 - 1);
          *a4 |= 8uLL;
          v31 = v33;
          break;
        }
        v34 = *v32;
        v32 += 2;
        v30 = v34;
      }
      while (v34);
    }
  }
  else
  {
    v31 = v160;
  }
  {
    v144 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v144);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v144;
  }
  if ((TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v31) & 1) != 0)
  {
    v48 = 1;
    goto LABEL_76;
  }
  v49 = v160;
  {
    v146 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v146);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v146;
  }
  v48 = 0;
  if (v49 > 159)
  {
    if (v49 >= 12288)
    {
      if (v49 == 12288)
        goto LABEL_76;
      v51 = 65279;
    }
    else
    {
      if (v49 == 160)
        goto LABEL_76;
      v51 = 8203;
    }
    if (v49 == v51)
      goto LABEL_76;
  }
  else if (v49 <= 0x20 && ((1 << v49) & 0x100002600) != 0)
  {
    goto LABEL_76;
  }
  v116 = v160;
  {
    v148 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v148);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v148;
  }
  if (TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v116))
  {
    v118 = 1;
    i = v19;
    if (*v19 && v21 != -1)
    {
      v118 = 1;
      i = v19;
      do
      {
        v119 = v159;
        if ((v120 & 1) == 0
        {
          v123 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v123);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v123;
        }
        if (!TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v119))
          break;
        ++v118;
        i += v21;
        v121 = TLocaleInfo::multiByteToUnicode(a1[12], i, &v159);
        v21 = v121;
      }
      while (*i && v121 != -1);
    }
    if (v118 > a1[1])
    {
      *a3 = 5;
      v45 = v156;
      v43 = *(_QWORD *)(v156 + 16);
      v44 = (int *)&unk_1AE15CF94;
      v46 = 32;
      goto LABEL_264;
    }
    v139 = 3;
    goto LABEL_323;
  }
  v128 = v160;
  {
    v149 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v149);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v149;
  }
  if ((int)v128 >= 48
    && (v128 < 0x3A
     || v128 >= 0x660
     && TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v128) != -1))
  {
    v48 = 2;
    goto LABEL_76;
  }
  v130 = v160;
  {
    v150 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v150);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v150;
  }
  v48 = 5;
  if ((v130 - 1) >= 8 && (v130 - 11) >= 2 && v130 != 0xFFFF)
  {
    if ((v130 - 14) < 0x12)
    {
      v48 = 5;
      goto LABEL_76;
    }
    if (a1[11] < 3uLL || !unicodeIsDiacritic(v160, a1[12]))
    {
      v48 = 4;
      goto LABEL_76;
    }
    if (isComposableDiacriticInContext(0, v160, a1[12]))
    {
      *a3 = 5;
      v140 = v156;
      v141 = *(_QWORD *)(v156 + 16);
      v142 = (int *)&unk_1AE15D018;
      v143 = 9;
      goto LABEL_324;
    }
    v139 = 4;
LABEL_323:
    *a3 = v139;
    LODWORD(v157[0]) = v160;
    v140 = v156;
    v141 = *(_QWORD *)(v156 + 16);
    v142 = (int *)v157;
    v143 = 1;
LABEL_324:
    TBuffer<wchar_t>::insert(v140, v141, v142, v143);
    return v19;
  }
LABEL_76:
  *a3 = v48;
  v52 = *(_QWORD *)(v156 + 16);
  LODWORD(v157[0]) = v160;
  v154 = v52;
  TBuffer<wchar_t>::insert(v156, v52, (int *)v157, 1uLL);
  v155 = a3;
  if (!*v19 || v21 == -1)
  {
    i = v19;
  }
  else
  {
    i = v19;
    while (2)
    {
      v53 = v159;
      if (!v159)
        break;
      v54 = v160;
      v55 = a1[12];
      switch(*v155)
      {
        case 0:
          if ((v56 & 1) == 0
          {
            v105 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v105);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v105;
          }
          if ((int)v54 <= 8202)
          {
            if ((_DWORD)v54 != 32 && (_DWORD)v54 != 160)
            {
LABEL_142:
              if ((_DWORD)v54 == 13 && v53 == 10)
                goto LABEL_152;
              break;
            }
          }
          else if ((_DWORD)v54 != 8203 && (_DWORD)v54 != 65279 && (_DWORD)v54 != 12288)
          {
            goto LABEL_142;
          }
          if ((v65 & 1) == 0
          {
            v110 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v110);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v110;
          }
          if (v53 > 8202)
          {
            if (v53 != 8203 && v53 != 12288)
            {
              v66 = 65279;
              goto LABEL_137;
            }
            goto LABEL_152;
          }
          if (v53 == 32 || v53 == 160)
            goto LABEL_152;
          break;
        case 1:
          if ((v57 & 1) == 0
          {
            v106 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v106);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v106;
          }
          isAlpha = TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v53);
          goto LABEL_151;
        case 2:
          if ((v63 & 1) == 0
          {
            v108 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v108);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v108;
          }
          if (v53 < 48
            || v53 >= 0x3A
            && (v53 < 0x660
             || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v53) == -1))
          {
            break;
          }
          goto LABEL_152;
        case 3:
          break;
        case 5:
          if ((v59 & 1) == 0
          {
            v107 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v107);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v107;
          }
          if ((v53 - 1) >= 8)
          {
            v60 = (v53 - 11) < 2 || v53 == 0xFFFF;
            if (!v60 && (v53 - 32) < 0xFFFFFFEE)
              break;
          }
          goto LABEL_152;
        default:
          if ((v61 & 1) == 0
          {
            v151 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v151);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v151;
          }
          if ((TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v53) & 1) != 0)
            break;
          if ((v62 & 1) == 0
          {
            v152 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v152);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v152;
          }
          if (v53 > 159)
          {
            if (v53 >= 12288)
            {
              if (v53 == 12288)
                break;
              v64 = 65279;
            }
            else
            {
              if (v53 == 160)
                break;
              v64 = 8203;
            }
            if (v53 == v64)
              break;
          }
          else if (v53 <= 0x20 && ((1 << v53) & 0x100002600) != 0)
          {
            break;
          }
          if ((v67 & 1) == 0
          {
            v153 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v153);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v153;
          }
          isPunct = TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v53);
          if ((isPunct & 1) != 0)
            break;
          GlobalLocaleInfo = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)isPunct);
          if (v53 >= 48)
          {
            if (v53 < 0x3A)
              break;
            if (v53 >= 0x660)
            {
              GlobalLocaleInfo = (TLocaleInfo *)TLocaleInfo::getDigitExtended((uint64_t)GlobalLocaleInfo, v53);
              if ((_DWORD)GlobalLocaleInfo != -1)
                break;
            }
          }
          TLocaleInfo::getGlobalLocaleInfo(GlobalLocaleInfo);
          if ((unicodeIsJunk(v53) & 1) != 0)
            break;
          if (isComposableDiacriticInContext(0, v54, v55))
            break;
          v70 = isComposableDiacriticInContext(v54, v53, v55);
          if (v70)
            break;
          v71 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)v70);
          if ((v54 - 19968) >> 4 <= 0x51A)
          {
            v66 = 12293;
LABEL_137:
            if (v53 != v66)
              break;
            goto LABEL_152;
          }
          v72 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v71);
          if ((v53 - 19968) >> 4 < 0x51B)
            break;
          TLocaleInfo::getGlobalLocaleInfo(v72);
          v73 = (TLocaleInfo *)isKatakana(v54);
          v74 = (int)v73;
          TLocaleInfo::getGlobalLocaleInfo(v73);
          if (v74)
          {
            isAlpha = isSmallKatakana(v53);
            goto LABEL_150;
          }
          v75 = isKatakana(v53);
          if ((v75 & 1) != 0)
            break;
          v76 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)v75);
          if ((v54 - 12353) < 0x53 || (v54 - 12540) < 3 || (v54 - 12445) <= 1)
          {
            TLocaleInfo::getGlobalLocaleInfo(v76);
            isAlpha = isSmallHiragana(v53);
LABEL_150:
            if ((_DWORD)v54 == 12540)
              break;
LABEL_151:
            if ((isAlpha & 1) == 0)
              break;
            goto LABEL_152;
          }
          v97 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v76);
          if ((v53 - 12353) < 0x53 || (v53 - 12540) < 3 || (v53 - 12445) < 2)
            break;
          v98 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v97);
          v99 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v98);
          v100 = v53 - 3585;
          if ((v54 - 3585) > 0x5A)
          {
            if (v100 < 0x5B)
              break;
            v101 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v99);
            if ((int)v54 >= 1425)
            {
              v103 = v54 < 0x5F5 || (v54 - 64285) < 0x33;
              TLocaleInfo::getGlobalLocaleInfo(v101);
              if (v53 >= 1425)
              {
                if (v53 >= 0x5F5)
                {
                  if (((((v53 - 64285) < 0x33) ^ v103) & 1) != 0)
                    break;
                }
                else if (!v103)
                {
                  break;
                }
              }
              else if (v103)
              {
                break;
              }
            }
            else
            {
              TLocaleInfo::getGlobalLocaleInfo(v101);
              if (v53 >= 1425 && (v53 < 0x5F5 || (v53 - 64285) < 0x33))
                break;
            }
          }
          else
          {
            if (v100 > 0x5A)
              break;
            if ((v53 - 3663) >= 0xFFFFFFD5)
            {
              if (v53 > 0xE3A)
              {
                if (v53 > 0xE44)
                  goto LABEL_152;
              }
              else if (v53 > 0xE2F || (v53 & 0xFFFFFFFD) == 0xE24)
              {
                goto LABEL_152;
              }
            }
            if ((v54 - 3653) < 0xFFFFFFFB)
              break;
          }
LABEL_152:
          if (a1[11] >= 3uLL)
          {
            v77 = v159;
            if ((v78 & 1) == 0
            {
              v104 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v104);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v104;
            }
            v80 = (int)v77 < 65281 && (_DWORD)v77 != 12288;
            if ((int)v77 <= 65510
              && !v80
              && ((v77 - 65471) > 0x20
               || TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v77) != (_DWORD)v77))
            {
              v81 = v159;
              if ((v82 & 1) == 0
              {
                v109 = (TLocaleInfo *)operator new();
                TLocaleInfo::TLocaleInfo(v109);
                TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v109;
              }
              v159 = TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v81);
              *a4 |= 2uLL;
            }
          }
          v83 = v160;
          v160 = v159;
          i += v21;
          v84 = TLocaleInfo::multiByteToUnicode(a1[12], i, &v159);
          v21 = v84;
          v85 = *i;
          if (v83 == 3661 && v160 >= 3656 && v160 <= 3659 && v159 == 3634 && *i && v84 != -1)
          {
            *(_DWORD *)(*(_QWORD *)v156 + 4 * *(_QWORD *)(v156 + 16) - 4) = v160;
            v160 = 3661;
            v85 = *i;
          }
          if (v85 && v84 != -1)
          {
            do
            {
              v86 = TLocaleInfo::composeCharacter(a1[12], v160, v159);
              if (!v86)
                break;
              v87 = (v159 & 0xFFFFFFFB) != 0x670 && v159 >= 0x660;
              v88 = v87 ? 1 : 4;
              v89 = v159 >= 1611 ? v88 : 1;
              *a4 |= v89;
              v160 = v86;
              i += v21;
              v90 = TLocaleInfo::multiByteToUnicode(a1[12], i, &v159);
              v21 = v90;
            }
            while (*i && v90 != -1);
          }
          v92 = (int *)a1[13];
          if (v92)
          {
            v93 = *v92;
            if (*v92)
            {
              v94 = v92 + 2;
              while (*(v94 - 1))
              {
                if (v160 == v93)
                {
                  v160 = *(v94 - 1);
                  *a4 |= 8uLL;
                  break;
                }
                v95 = *v94;
                v94 += 2;
                v93 = v95;
                if (!v95)
                  break;
              }
            }
          }
          if ((unint64_t)(i - a2) <= 0xFF)
          {
            LODWORD(v157[0]) = v160;
            TBuffer<wchar_t>::insert(v156, *(_QWORD *)(v156 + 16), (int *)v157, 1uLL);
          }
          if (*i)
            v96 = v21 == -1;
          else
            v96 = 1;
          if (v96)
            break;
          continue;
      }
      break;
    }
  }
  if ((unint64_t)(i - a2) >= 0x100)
  {
    v5 = v156;
    *v155 = 5;
    TBuffer<wchar_t>::resize(v156, v154);
    goto LABEL_263;
  }
  if (*v155 != 4)
  {
    if (*v155 != 5)
      return i;
    TBuffer<wchar_t>::resize(v156, v154);
    v43 = *(_QWORD *)(v156 + 16);
    v44 = (int *)&unk_1AE15D040;
    v45 = v156;
    v46 = 11;
    goto LABEL_264;
  }
  v112 = a1[12];
  v114 = *(_QWORD *)(v156 + 8);
  v113 = *(_QWORD *)(v156 + 16);
  if (v113 >= v114)
  {
    if (*(_BYTE *)(v156 + 1048))
    {
      LODWORD(v157[0]) = 0;
      TBuffer<wchar_t>::insert(v156, v113, (int *)v157, 1uLL);
      --*(_QWORD *)(v156 + 16);
      v115 = *(_QWORD *)v156;
    }
    else
    {
      v115 = *(_QWORD *)v156;
      if (v114)
        *(_DWORD *)(v115 + 4 * v114 - 4) = 0;
    }
  }
  else
  {
    v115 = *(_QWORD *)v156;
    *(_DWORD *)(*(_QWORD *)v156 + 4 * v113) = 0;
  }
  if (TLocaleInfo::isKtivMenukad(v112, (unsigned int *)(v115 + 4 * v154)))
  {
    *(_QWORD *)&v157[0] = (char *)&v157[1] + 8;
    *(_OWORD *)((char *)v157 + 8) = xmmword_1AE1418C0;
    v158 = 1;
    v124 = a1[12];
    v126 = *(_QWORD *)(v156 + 8);
    v125 = *(_QWORD *)(v156 + 16);
    if (v125 >= v126)
    {
      if (*(_BYTE *)(v156 + 1048))
      {
        v161[0] = 0;
        TBuffer<wchar_t>::insert(v156, v125, v161, 1uLL);
        --*(_QWORD *)(v156 + 16);
        v127 = *(_QWORD *)v156;
      }
      else
      {
        v127 = *(_QWORD *)v156;
        if (v126)
          *(_DWORD *)(v127 + 4 * v126 - 4) = 0;
      }
    }
    else
    {
      v127 = *(_QWORD *)v156;
      *(_DWORD *)(*(_QWORD *)v156 + 4 * v125) = 0;
    }
    TLocaleInfo::ktivMenukadToKtivMaleh(v124, (int *)(v127 + 4 * v154), v157);
    TBuffer<wchar_t>::resize(v156, v154);
    if (*(_QWORD *)&v157[1])
    {
      v132 = TBuffer<wchar_t>::c_str((uint64_t)v157);
      v133 = (int *)v132;
      v134 = 0;
      v135 = *(_QWORD *)(v156 + 16);
      while (*(_DWORD *)(v132 + 4 * v134++))
        ;
      v137 = v134 - 1;
    }
    else
    {
      *v155 = 5;
      v135 = *(_QWORD *)(v156 + 16);
      v133 = (int *)&unk_1AE15D070;
      v137 = 6;
    }
    TBuffer<wchar_t>::insert(v156, v135, v133, v137);
    if (v158)
    {
      if (*(_OWORD **)&v157[0] != (_OWORD *)((char *)&v157[1] + 8) && *(_QWORD *)&v157[0] != 0)
        MEMORY[0x1AF44D160]();
    }
  }
  return i;
}

void sub_1ADA5078C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TLocaleInfo::getGlobalLocaleInfo(TLocaleInfo *this)
{
  unsigned __int8 v1;
  TLocaleInfo *v3;

  {
    v3 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v3);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v3;
  }
  return TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
}

void sub_1ADA508FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t unicodeIsJunk(int a1)
{
  _BOOL4 v1;
  unsigned int v2;

  v1 = a1 == 0xFFFF || (a1 - 14) < 0x12;
  v2 = (a1 - 11) < 2 || v1;
  if ((a1 - 1) >= 8)
    return v2;
  else
    return 1;
}

uint64_t unicodeIsDiacritic(unsigned int a1, uint64_t a2)
{
  uint64_t v2;

  if ((int)a1 < 768)
    return 0;
  if (a1 < 0x370)
    return 1;
  if (a1 > 0xE30)
  {
    LODWORD(v2) = a1 - 3655 < 0xFFFFFFF4;
    if (a1 <= 0xE33)
      LODWORD(v2) = a1 == 3633;
    if (a1 <= 0xE4E)
      return v2;
    else
      return 0;
  }
  else
  {
    if (a1 == 1600)
      return 1;
    if (a1 < 0x64B)
      return 0;
    v2 = 1;
    if (a1 >= 0x660 && (a1 & 0xFFFFFFFB) != 0x670)
    {
      if (a1 == 2364)
        return *(_QWORD *)(a2 + 72) > 3uLL;
      return 0;
    }
  }
  return v2;
}

BOOL isComposableDiacriticInContext(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  unsigned __int8 v7;
  TLocaleInfo *v8;

  if ((int)a2 < 768)
    return 0;
  if (a2 < 0x370)
    goto LABEL_4;
  if (a2 > 0xE30)
  {
    if (a2 > 0xE4E)
      return 0;
    if (a2 > 0xE33)
    {
      if (a2 - 3655 > 0xFFFFFFF3)
        return 0;
    }
    else if (a2 != 3633)
    {
      return 0;
    }
  }
  else if (a2 != 1600)
  {
    if (a2 >= 0x64B)
    {
      if (a2 >= 0x660 && (a2 & 0xFFFFFFFB) != 0x670)
      {
        result = 0;
        if (a2 != 2364 || *(_QWORD *)(a3 + 72) <= 3uLL)
          return result;
      }
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  {
    v8 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v8);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v8;
  }
  return a2 - 3585 > 0x5A || TLocaleInfo::composeCharacter(a3, a1, a2) != 0;
}

void sub_1ADA50B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TBuffer<wchar_t>::c_str(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= v3)
  {
    if (*(_BYTE *)(a1 + 1048))
    {
      v5 = 0;
      TBuffer<wchar_t>::insert(a1, v2, &v5, 1uLL);
      --*(_QWORD *)(a1 + 16);
      return *(_QWORD *)a1;
    }
    else
    {
      result = *(_QWORD *)a1;
      if (v3)
        *(_DWORD *)(result + 4 * v3 - 4) = 0;
    }
  }
  else
  {
    result = *(_QWORD *)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 4 * v2) = 0;
  }
  return result;
}

uint64_t TSegmenter::getSegment(TSegmenter *this, char *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  unsigned __int8 *SegmentEnd;
  uint64_t v9;
  TAllocator *v10;
  __int32 *v11;
  __int32 *v12;
  _QWORD *v13;
  __int32 *v14;
  __int128 v15;
  _BYTE v16[1024];
  char v17;
  uint64_t v18;
  int v19;
  int v20;

  if (!*a2)
    return 0;
  v4 = (unint64_t)&a2[-*((_QWORD *)this + 7)];
  v5 = *((_QWORD *)this + 8);
  v6 = (uint64_t *)((char *)this + 64);
  if (v4 >= (*((_QWORD *)this + 9) - v5) >> 3)
  {
    v14 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)this + 64, 2 * v4 + 2, &v14);
    v5 = *v6;
  }
  result = *(_QWORD *)(v5 + 8 * v4);
  if (!result)
  {
    v19 = 4;
    v18 = 0;
    v14 = (__int32 *)v16;
    v15 = xmmword_1AE1418C0;
    v17 = 1;
    SegmentEnd = TSegmenter::findSegmentEnd(this, (unsigned __int8 *)a2, &v19, &v18, (uint64_t)&v14);
    if ((unint64_t)(*((_QWORD *)&v15 + 1) + 1) >> 62)
      v9 = -1;
    else
      v9 = 4 * (*((_QWORD *)&v15 + 1) + 1);
    v10 = (TSegmenter *)((char *)this + 16);
    v11 = (__int32 *)TAllocator::allocate((TSegmenter *)((char *)this + 16), v9);
    if (*((_QWORD *)&v15 + 1) >= (unint64_t)v15)
    {
      if (v17)
      {
        v20 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v14, *((unint64_t *)&v15 + 1), &v20, 1uLL);
        v12 = v14;
        --*((_QWORD *)&v15 + 1);
      }
      else
      {
        v12 = v14;
        if ((_QWORD)v15)
          v14[(_QWORD)v15 - 1] = 0;
      }
    }
    else
    {
      v12 = v14;
      v14[*((_QWORD *)&v15 + 1)] = 0;
    }
    wcscpy(v11, v12);
    v13 = TAllocator::allocate(v10, 32);
    *v13 = v11;
    v13[1] = SegmentEnd;
    v13[2] = v18;
    *((_DWORD *)v13 + 6) = v19;
    *(_QWORD *)(*v6 + 8 * v4) = v13;
    if (v17 && v14 != (__int32 *)v16)
    {
      if (v14)
        MEMORY[0x1AF44D160]();
    }
    return *(_QWORD *)(*v6 + 8 * v4);
  }
  return result;
}

void sub_1ADA50DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (LOBYTE(STACK[0x418]) && a9 != v9)
  {
    if (a9)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t TSegmenter::getPreviousSegment(TSegmenter *this, char *a2)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  char *i;

  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == a2)
    return 0;
  v5 = a2 - v3;
  v6 = *((_QWORD *)this + 8);
  v7 = (*((_QWORD *)this + 9) - v6) >> 3;
  v8 = a2 - v3 - 1;
  if ((unint64_t)(a2 - v3) <= 1)
    v5 = 1;
  while (1)
  {
    if (v8 < v7)
    {
      result = *(_QWORD *)(v6 + 8 * v8);
      if (result)
        break;
    }
    --v8;
    if (!--v5)
      return TSegmenter::getSegment(this, v3);
  }
  for (i = *(char **)(result + 8); i < a2; i = *(char **)(result + 8))
    result = TSegmenter::getSegment(this, i);
  return result;
}

uint64_t isKatakana(int a1)
{
  _BOOL4 v1;
  int v2;
  unsigned int v3;

  v1 = (a1 - 12540) < 3 || (a1 - 65438) < 2;
  v2 = (a1 - 12443) < 4 || v1;
  if ((a1 - 12449) >= 0x56)
    v3 = v2;
  else
    v3 = 1;
  if ((a1 - 65382) >= 0x38)
    return v3;
  else
    return 1;
}

uint64_t isSmallKatakana(int a1)
{
  BOOL v1;
  uint64_t result;

  v1 = (a1 - 12443) >= 4 && (a1 - 12540) >= 3;
  if (!v1 || (a1 - 65382) < 0xB)
    return 1;
  result = 1;
  if (((a1 - 12449) > 0x22 || ((1 << (a1 + 95)) & 0x400000155) == 0)
    && ((a1 - 12515) > 0xB || ((1 << (a1 + 29)) & 0x815) == 0)
    && (a1 - 65438) >= 2)
  {
    return 0;
  }
  return result;
}

BOOL isSmallHiragana(int a1)
{
  _BOOL8 result;
  BOOL v3;

  result = 1;
  v3 = (a1 - 12419) > 0x1B || ((1 << (a1 + 125)) & 0xC000815) == 0;
  if (v3 && ((a1 - 12353) > 8 || ((1 << (a1 - 65)) & 0x155) == 0))
    return (a1 - 12540) < 3;
  return result;
}

void quasar::corrective_reranking::CorrectiveRerankerConfig::read(std::string *this, const quasar::PTree *a2)
{
  const std::string *String;
  quasar::PTree *Child;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  std::string::size_type size;
  uint64_t v11;
  uint64_t Int;
  float Double;
  uint64_t v14;
  double v15;
  double v16;
  char v17;
  char v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ChildOptional;
  quasar::PTree *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  std::string::size_type v30;
  uint64_t v31;
  std::string __p;
  _BYTE v33[64];

  std::string::basic_string[abi:ne180100]<0>(&__p, "model-file");
  String = (const std::string *)quasar::PTree::getString((uint64_t)a2, (__int128 *)&__p);
  std::string::operator=(this, String);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)&this[1]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "features");
  Child = (quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (__int128 *)quasar::PTree::begin(Child);
  v7 = quasar::PTree::end(Child);
  if (v6 != (__int128 *)v7)
  {
    v8 = (__int128 *)v7;
    do
    {
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100](&__p, v6);
      v9 = (__int128 *)quasar::PTree::getString((quasar::PTree *)v33);
      size = this[1].__r_.__value_.__l.__size_;
      if (size >= this[1].__r_.__value_.__r.__words[2])
      {
        v11 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&this[1], v9);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&this[1], v9);
        v11 = size + 24;
      }
      this[1].__r_.__value_.__l.__size_ = v11;
      quasar::PTree::~PTree((quasar::PTree *)v33);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v6 = (__int128 *)((char *)v6 + 88);
    }
    while (v6 != v8);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "target-candidate-length-variability");
  Int = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((Int & 0xFF00000000) != 0)
    LODWORD(this[2].__r_.__value_.__l.__data_) = Int;
  std::string::basic_string[abi:ne180100]<0>(&__p, "target-candidate-distance-threshold");
  Double = quasar::PTree::getDouble((uint64_t)a2, (__int128 *)&__p);
  *((float *)this[2].__r_.__value_.__r.__words + 1) = Double;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num-payload-corrections");
  v14 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v14 & 0xFF00000000) != 0)
    LODWORD(this[2].__r_.__value_.__r.__words[1]) = v14;
  std::string::basic_string[abi:ne180100]<0>(&__p, "phonetic-payload-matching-threshold");
  quasar::PTree::getDoubleOptional((uint64_t)a2, (uint64_t)&__p);
  v16 = v15;
  v18 = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v18)
  {
    v19 = v16;
    *((float *)&this[2].__r_.__value_.__r.__words[1] + 1) = v19;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "apply-capitalization-top-n");
  v20 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v20 & 0xFF00000000) != 0)
    LODWORD(this[2].__r_.__value_.__r.__words[2]) = v20;
  std::string::basic_string[abi:ne180100]<0>(&__p, "adjacent-capitalization-range");
  v21 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v21 & 0xFF00000000) != 0)
    HIDWORD(this[2].__r_.__value_.__r.__words[2]) = v21;
  std::string::basic_string[abi:ne180100]<0>(&__p, "adjacent-range");
  v22 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v22 & 0xFF00000000) != 0)
    LODWORD(this[3].__r_.__value_.__l.__data_) = v22;
  std::string::basic_string[abi:ne180100]<0>(&__p, "max-parses");
  v23 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v23 & 0xFF00000000) != 0)
    HIDWORD(this[3].__r_.__value_.__r.__words[0]) = v23;
  std::string::basic_string[abi:ne180100]<0>(&__p, "target-patterns");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)&__p);
  v25 = (quasar::PTree *)ChildOptional;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v25)
      return;
  }
  else if (!ChildOptional)
  {
    return;
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)&this[3].__r_.__value_.__l.__size_);
  v26 = (__int128 *)quasar::PTree::begin(v25);
  v27 = quasar::PTree::end(v25);
  if (v26 != (__int128 *)v27)
  {
    v28 = (__int128 *)v27;
    do
    {
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100](&__p, v26);
      v29 = (__int128 *)quasar::PTree::getString((quasar::PTree *)v33);
      v30 = this[3].__r_.__value_.__r.__words[2];
      if (v30 >= this[4].__r_.__value_.__r.__words[0])
      {
        v31 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&this[3].__r_.__value_.__l.__size_, v29);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&this[3].__r_.__value_.__l.__size_, v29);
        v31 = v30 + 24;
      }
      this[3].__r_.__value_.__r.__words[2] = v31;
      quasar::PTree::~PTree((quasar::PTree *)v33);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v26 = (__int128 *)((char *)v26 + 88);
    }
    while (v26 != v28);
  }
}

void sub_1ADA5140C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::FusedIntentClassifierConfig::read(std::string *this, const quasar::PTree *a2)
{
  const std::string *String;
  quasar::PTree *Child;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  std::string::size_type size;
  uint64_t v11;
  float Double;
  std::string __p;
  _BYTE v14[64];

  std::string::basic_string[abi:ne180100]<0>(&__p, "model-file");
  String = (const std::string *)quasar::PTree::getString((uint64_t)a2, (__int128 *)&__p);
  std::string::operator=(this, String);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)&this[1]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "features");
  Child = (quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (__int128 *)quasar::PTree::begin(Child);
  v7 = quasar::PTree::end(Child);
  if (v6 != (__int128 *)v7)
  {
    v8 = (__int128 *)v7;
    do
    {
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100](&__p, v6);
      v9 = (__int128 *)quasar::PTree::getString((quasar::PTree *)v14);
      size = this[1].__r_.__value_.__l.__size_;
      if (size >= this[1].__r_.__value_.__r.__words[2])
      {
        v11 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&this[1], v9);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&this[1], v9);
        v11 = size + 24;
      }
      this[1].__r_.__value_.__l.__size_ = v11;
      quasar::PTree::~PTree((quasar::PTree *)v14);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v6 = (__int128 *)((char *)v6 + 88);
    }
    while (v6 != v8);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "text-edit-score-threshold");
  Double = quasar::PTree::getDouble((uint64_t)a2, (__int128 *)&__p);
  *(float *)&this[2].__r_.__value_.__l.__data_ = Double;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADA515D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::OverridesConfig::read(std::string *this, const quasar::PTree *a2)
{
  void *__p[2];
  char v5;
  std::string __str;
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "tokens-file");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)__p, &__str);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7)
  {
    std::string::operator=(this, &__str);
    if (v7)
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "phrases-file");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)__p, &__str);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7)
  {
    std::string::operator=(this + 1, &__str);
    if (v7)
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "slots-file");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)__p, &__str);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7)
  {
    std::string::operator=(this + 2, &__str);
    if (v7)
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1ADA51748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a22)
  {
    if (a21 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::PhoneticMatcherConfig::read(quasar::corrective_reranking::PhoneticMatcherConfig *this, const quasar::PTree *a2)
{
  std::string::size_type size;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int16 BoolOptional;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  uint64_t Int;
  uint64_t v13;
  unsigned __int16 v14;
  void *__p[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::string v32;
  char v33;

  std::string::basic_string[abi:ne180100]<0>(__p, "euclid-config-file");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)__p, &v32);
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  if (!v33)
    goto LABEL_12;
  size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v32.__r_.__value_.__l.__size_;
  if (size)
  {
    std::allocate_shared[abi:ne180100]<quasar::SystemConfig,std::allocator<quasar::SystemConfig>,std::string &,void>((uint64_t)&v32, __p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this, (__int128 *)__p);
    v5 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v6 = (unint64_t *)((char *)__p[1] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
LABEL_12:
    if (!*((_QWORD *)this + 5))
    {
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Error: PhoneticMatcherConfig requires non-empty 'euclid-config-file' or non-null sysConfig", 90);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](this, (uint64_t *)this + 5);
  }
  if (v33 && SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "lowercase");
  BoolOptional = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  if (BoolOptional >= 0x100u)
  {
    *((_BYTE *)this + 25) = 1;
    *((_BYTE *)this + 32) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "compare-original-case");
    v9 = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
    if (SBYTE7(v16) < 0)
      operator delete(__p[0]);
    if (v9 >= 0x100u)
    {
      *((_BYTE *)this + 24) = v9;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "compare-lowercase");
      v10 = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
      if (SBYTE7(v16) < 0)
        operator delete(__p[0]);
      if (v10 >= 0x100u)
      {
        *((_BYTE *)this + 25) = v10;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "compare-uppercase");
        v11 = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
        if (SBYTE7(v16) < 0)
          operator delete(__p[0]);
        if (v11 >= 0x100u)
        {
          *((_BYTE *)this + 26) = v11;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "uppercase-input-max-length");
          Int = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)__p);
          if (SBYTE7(v16) < 0)
            operator delete(__p[0]);
          if ((Int & 0xFF00000000) != 0)
          {
            *((_DWORD *)this + 7) = Int;
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "adapt-to-left-casing");
            v14 = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
            if (SBYTE7(v16) < 0)
              operator delete(__p[0]);
            if (v14 >= 0x100u)
              *((_BYTE *)this + 32) = v14;
          }
        }
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "cache-capacity");
  v13 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)__p);
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  if ((v13 & 0xFF00000000) != 0)
    *((_QWORD *)this + 2) = (int)v13;
}

void sub_1ADA51ADC()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 - 48))
  {
    if (*(char *)(v0 - 49) < 0)
      JUMPOUT(0x1ADA51B18);
  }
  JUMPOUT(0x1ADA51B1CLL);
}

void sub_1ADA51B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TransformerClassifierConfig::read(std::string *this, const quasar::PTree *a2)
{
  const std::string *String;
  const std::string *v5;
  uint64_t Int;
  uint64_t v7;
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  String = (const std::string *)quasar::PTree::getString((uint64_t)a2, (__int128 *)__p);
  std::string::operator=(this, String);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "vocab-file");
  v5 = (const std::string *)quasar::PTree::getString((uint64_t)a2, (__int128 *)__p);
  std::string::operator=(this + 1, v5);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-length");
  Int = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if ((Int & 0xFF00000000) != 0)
    LODWORD(this[2].__r_.__value_.__l.__data_) = Int;
  std::string::basic_string[abi:ne180100]<0>(__p, "truncation-length");
  v7 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if ((v7 & 0xFF00000000) != 0)
    HIDWORD(this[2].__r_.__value_.__r.__words[0]) = v7;
}

void sub_1ADA51C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::WFSTConfig::read(std::string *this, const quasar::PTree *a2)
{
  const std::string *String;
  const std::string *v5;
  unsigned __int16 BoolOptional;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "text-file");
  String = (const std::string *)quasar::PTree::getString((uint64_t)a2, (__int128 *)__p);
  std::string::operator=(this, String);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isyms-file");
  v5 = (const std::string *)quasar::PTree::getString((uint64_t)a2, (__int128 *)__p);
  std::string::operator=(this + 1, v5);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "initial-state-is-max-id");
  BoolOptional = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (BoolOptional >= 0x100u)
    this[2].__r_.__value_.__s.__data_[0] = BoolOptional;
}

void sub_1ADA51D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TargetIndexFilterConfig::read(std::string *this, const quasar::PTree *a2)
{
  const std::string *String;
  uint64_t Int;
  float Double;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "filter-file");
  String = (const std::string *)quasar::PTree::getString((uint64_t)a2, (__int128 *)__p);
  std::string::operator=(this, String);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-max-target-index");
  Int = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if ((Int & 0xFF00000000) != 0)
    LODWORD(this[1].__r_.__value_.__l.__data_) = Int;
  std::string::basic_string[abi:ne180100]<0>(__p, "disambiguation-numerization-threshold");
  Double = quasar::PTree::getDouble((uint64_t)a2, (__int128 *)__p);
  *((float *)this[1].__r_.__value_.__r.__words + 1) = Double;
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1ADA51E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::corrective_reranking::Config::Config(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const quasar::PTree *Ptree;
  void *__p[2];
  char v18;

  *(_QWORD *)a1 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  quasar::corrective_reranking::CorrectiveRerankerConfig::CorrectiveRerankerConfig((quasar::corrective_reranking::CorrectiveRerankerConfig *)(a1 + 40));
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0x2000;
  *(_WORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 298) = 0;
  *(_DWORD *)(a1 + 300) = -1;
  *(_BYTE *)(a1 + 304) = 1;
  *(_QWORD *)(a1 + 312) = v7;
  *(_QWORD *)(a1 + 320) = v8;
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 376) = 0xC000000200;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 10;
  *(_QWORD *)(a1 + 496) = 0;
  quasar::PTree::PTree((quasar::PTree *)(a1 + 528));
  v14 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.voice-commands.corrective-reranking");
  Ptree = (const quasar::PTree *)quasar::SystemConfig::getPtree(v14, (uint64_t)__p);
  quasar::corrective_reranking::Config::read((quasar::corrective_reranking::Config *)a1, Ptree);
  if (v18 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1ADA52020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  quasar::PTree *v21;
  void **v22;

  quasar::PTree::~PTree(v21);
  if (*(char *)(v15 + 519) < 0)
    operator delete(*(void **)(v15 + 496));
  std::pair<std::string,std::string>::~pair(v20);
  std::pair<std::string,std::string>::~pair(v15 + 384);
  std::pair<std::string,std::string>::~pair(v19);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v15 + 312);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v18);
  std::pair<std::string,std::vector<std::string>>::~pair((uint64_t)(v17 + 9));
  quasar::corrective_reranking::OverridesConfig::~OverridesConfig(v17);
  quasar::corrective_reranking::CorrectiveRerankerConfig::~CorrectiveRerankerConfig(v16);
  if (*(char *)(v15 + 39) < 0)
    operator delete(*v22);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::Config::Config(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  std::allocate_shared[abi:ne180100]<quasar::SystemConfig,std::allocator<quasar::SystemConfig>,std::string const&,void>(a2, &v7);
  quasar::corrective_reranking::Config::Config(a1, &v7);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_1ADA5214C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Config::read(quasar::corrective_reranking::Config *this, const quasar::PTree *a2)
{
  _QWORD *v4;
  int v5;
  char *v6;
  uint64_t v7;
  const quasar::PTree *Child;
  const quasar::PTree *v9;
  const quasar::PTree *v10;
  uint64_t ChildOptional;
  const quasar::PTree *v12;
  uint64_t v13;
  const quasar::PTree *v14;
  const quasar::PTree *v15;
  const quasar::PTree *v16;
  const quasar::PTree *v17;
  const quasar::PTree *v18;
  uint64_t v19;
  void *__p[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37[2];
  char v38;

  std::string::basic_string[abi:ne180100]<0>(v37, "version");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)v37, (std::string *)__p);
  if (v38 < 0)
    operator delete(v37[0]);
  if (BYTE8(v21))
  {
    std::string::operator=((std::string *)((char *)this + 16), (const std::string *)__p);
    if (BYTE8(v21))
    {
      if (SBYTE7(v21) < 0)
        operator delete(__p[0]);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading Corrective Reranking config: version=", 45);
    v5 = *((char *)this + 39);
    if (v5 >= 0)
      v6 = (char *)this + 16;
    else
      v6 = (char *)*((_QWORD *)this + 2);
    if (v5 >= 0)
      v7 = *((unsigned __int8 *)this + 39);
    else
      v7 = *((_QWORD *)this + 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "corrective-reranker");
  Child = (const quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, (__int128 *)__p);
  quasar::corrective_reranking::CorrectiveRerankerConfig::read((std::string *)((char *)this + 40), Child);
  if (SBYTE7(v21) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fused-intent-classifier");
  v9 = (const quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, (__int128 *)__p);
  quasar::corrective_reranking::FusedIntentClassifierConfig::read((std::string *)this + 9, v9);
  if (SBYTE7(v21) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "phonetic-matcher");
  v10 = (const quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, (__int128 *)__p);
  quasar::corrective_reranking::PhoneticMatcherConfig::read((quasar::corrective_reranking::Config *)((char *)this + 272), v10);
  if (SBYTE7(v21) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "overrides");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)__p);
  v12 = (const quasar::PTree *)ChildOptional;
  if (SBYTE7(v21) < 0)
  {
    operator delete(__p[0]);
    if (!v12)
      goto LABEL_25;
LABEL_28:
    quasar::corrective_reranking::OverridesConfig::read((std::string *)this + 6, v12);
    goto LABEL_29;
  }
  if (ChildOptional)
    goto LABEL_28;
LABEL_25:
  std::string::basic_string[abi:ne180100]<0>(__p, "meta-tokens");
  v12 = (const quasar::PTree *)quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)__p);
  if (SBYTE7(v21) < 0)
    operator delete(__p[0]);
  if (v12)
    goto LABEL_28;
LABEL_29:
  std::string::basic_string[abi:ne180100]<0>(__p, "transformer-classifier");
  v13 = quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)__p);
  v14 = (const quasar::PTree *)v13;
  if (SBYTE7(v21) < 0)
  {
    operator delete(__p[0]);
    if (v14)
      goto LABEL_31;
  }
  else if (v13)
  {
LABEL_31:
    quasar::corrective_reranking::TransformerClassifierConfig::read((std::string *)((char *)this + 328), v14);
    goto LABEL_35;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "transformer-discriminator");
  v15 = (const quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, (__int128 *)__p);
  quasar::corrective_reranking::TransformerClassifierConfig::read((std::string *)((char *)this + 328), v15);
  if (SBYTE7(v21) < 0)
    operator delete(__p[0]);
LABEL_35:
  std::string::basic_string[abi:ne180100]<0>(__p, "wfst");
  v16 = (const quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, (__int128 *)__p);
  quasar::corrective_reranking::WFSTConfig::read((std::string *)this + 16, v16);
  if (SBYTE7(v21) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "exhaustive-wfst");
  v17 = (const quasar::PTree *)quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)__p);
  if (SBYTE7(v21) < 0)
    operator delete(__p[0]);
  if (v17)
    quasar::corrective_reranking::WFSTConfig::read((std::string *)((char *)this + 440), v17);
  std::string::basic_string[abi:ne180100]<0>(__p, "target-index-filter");
  v18 = (const quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, (__int128 *)__p);
  quasar::corrective_reranking::TargetIndexFilterConfig::read((std::string *)((char *)this + 496), v18);
  if (SBYTE7(v21) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "featurizer");
  v19 = quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)__p);
  if (SBYTE7(v21) < 0)
    operator delete(__p[0]);
  if (v19)
  {
    *((_DWORD *)this + 132) = *(_DWORD *)v19;
    std::string::operator=((std::string *)((char *)this + 536), (const std::string *)(v19 + 8));
    if ((quasar::corrective_reranking::Config *)((char *)this + 528) != (quasar::corrective_reranking::Config *)v19)
      std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)this + 560, *(std::string **)(v19 + 32), *(std::string **)(v19 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v19 + 40) - *(_QWORD *)(v19 + 32)) >> 3));
    *((_BYTE *)this + 584) = *(_BYTE *)(v19 + 56);
  }
}

void sub_1ADA52548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::OverridesConfig::~OverridesConfig(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void quasar::corrective_reranking::CorrectiveRerankerConfig::~CorrectiveRerankerConfig(void **this)
{
  void **v2;

  v2 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

quasar::corrective_reranking::CorrectiveRerankerConfig *quasar::corrective_reranking::CorrectiveRerankerConfig::CorrectiveRerankerConfig(quasar::corrective_reranking::CorrectiveRerankerConfig *this)
{
  std::string *v2;
  void *__p[2];
  char v5;
  __int128 v6;

  *(_QWORD *)&v6 = *MEMORY[0x1E0C80C00];
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 12) = 1;
  *(_QWORD *)((char *)this + 60) = 0;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 68) = 0x100000001;
  *((_DWORD *)this + 19) = 50;
  std::string::basic_string[abi:ne180100]<0>(__p, "\\b\\d+:\\d+\\b");
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v2 = (std::string *)operator new(0x18uLL);
  *((_QWORD *)this + 12) = v2 + 1;
  *((_QWORD *)this + 10) = v2;
  *((_QWORD *)this + 11) = v2;
  *((_QWORD *)this + 11) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)this + 96, (__int128 *)__p, &v6, v2);
  if (v5 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_1ADA52750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = v17;
  *(_QWORD *)(v16 + 88) = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a16 < 0)
    operator delete(__p);
  __p = (void *)(v16 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SystemConfig,std::allocator<quasar::SystemConfig>,std::string &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x620uLL);
  result = std::__shared_ptr_emplace<quasar::SystemConfig>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::SystemConfig>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADA527F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SystemConfig>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::SystemConfig>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D42758;
  a1[1] = 0;
  std::allocator<quasar::SystemConfig>::construct[abi:ne180100]<quasar::SystemConfig,std::string &>((uint64_t)&v4, (quasar::SystemConfig *)(a1 + 3), a2);
  return a1;
}

void sub_1ADA52850(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SystemConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SystemConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42758;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::SystemConfig>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void std::allocator<quasar::SystemConfig>::construct[abi:ne180100]<quasar::SystemConfig,std::string &>(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3)
{
  _OWORD v3[2];
  int v4;
  uint64_t v5[3];

  memset(v5, 0, sizeof(v5));
  memset(v3, 0, sizeof(v3));
  v4 = 1065353216;
  quasar::SystemConfig::SystemConfig(a2, a3, v5, (uint64_t)v3);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v3);
  *(_QWORD *)&v3[0] = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v3);
}

void sub_1ADA52924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  a9 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SystemConfig,std::allocator<quasar::SystemConfig>,std::string const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x620uLL);
  result = std::__shared_ptr_emplace<quasar::SystemConfig>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SystemConfig>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADA5298C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SystemConfig>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SystemConfig>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D42758;
  a1[1] = 0;
  std::allocator<quasar::SystemConfig>::construct[abi:ne180100]<quasar::SystemConfig,std::string const&>((uint64_t)&v4, (quasar::SystemConfig *)(a1 + 3), a2);
  return a1;
}

void sub_1ADA529EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::SystemConfig>::construct[abi:ne180100]<quasar::SystemConfig,std::string const&>(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3)
{
  _OWORD v3[2];
  int v4;
  uint64_t v5[3];

  memset(v5, 0, sizeof(v5));
  memset(v3, 0, sizeof(v3));
  v4 = 1065353216;
  quasar::SystemConfig::SystemConfig(a2, a3, v5, (uint64_t)v3);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v3);
  *(_QWORD *)&v3[0] = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v3);
}

void sub_1ADA52A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  a9 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::RecogRequestFilter::getPowerContextOptions(uint64_t a1@<X8>)
{
  void *__p[2];
  char v4;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "unconstrained");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)a1, (const void **)__p, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "reduced");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)a1, (const void **)__p, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avoid");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)a1, (const void **)__p, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1ADA52B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::__tree<std::string>::destroy(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

std::string *quasar::RecogRequestFilter::RecogRequestFilter(std::string *this, kaldi::quasar::Vocab *a2, std::string *a3)
{
  __int128 v6;
  std::string *v7;
  std::string *v8;
  int v9;
  const std::string *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  const std::string *i;
  const std::string *v16;
  int v17;
  int v18;
  unint64_t v19;
  _DWORD *size;
  std::string::size_type v21;
  std::string::pointer data;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  int *v28;
  int v29;
  const std::string *v30;
  std::string::pointer v31;
  std::string::size_type v32;
  int64_t v33;
  uint64_t v34;
  _BYTE *v35;
  void *v36;
  _BYTE *v37;
  const std::string *v38;
  std::string::pointer v39;
  std::string::size_type v40;
  char v41;
  int64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  void *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  const std::string *v50;
  std::string::size_type v51;
  std::string::pointer v52;
  const std::string *v53;
  std::string::size_type v54;
  std::string::pointer v55;
  const std::string *v56;
  std::string::size_type v57;
  std::string::pointer v58;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  std::vector<std::wstring> *v89;
  std::vector<std::wstring> *v90;
  std::vector<std::wstring> *v91;
  std::string *v92;
  void *v93[2];
  char v94;
  uint64_t v95;
  uint64_t v96;
  void **v97;
  _BYTE __p[32];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
  }
  else
  {
    v6 = *(_OWORD *)&a3->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  v7 = this + 1;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = 0u;
  v8 = this + 5;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = 0u;
  v91 = (std::vector<std::wstring> *)&this[7];
  v92 = this + 4;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = 0u;
  v89 = (std::vector<std::wstring> *)&this[8];
  v90 = (std::vector<std::wstring> *)&this[6];
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "::");
  quasar::splitAndTrim(a3, __p, &v95);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v9 = kaldi::quasar::Vocab::VocabSize(a2);
  v10 = (const std::string *)v95;
  v11 = v96 - v95;
  if (v9 > 14)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    if (v13 != 5 && v13 != 8)
    {
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v99 = 0u;
      memset(__p, 0, sizeof(__p));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"The number of recognition request parameters is ", 48);
      v84 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" (requirement is 5 or 8 for config file ver 15.0+)", 50);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
  }
  else if (v11 != 72)
  {
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v99 = 0u;
    memset(__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"The number of recognition request parameters is ", 48);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (requirement is 3)", 19);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v93, "|");
  quasar::splitAndTrimNoEmpty(v10, (char *)v93, __p);
  if (v94 < 0)
    operator delete(v93[0]);
  v16 = *(const std::string **)__p;
  for (i = *(const std::string **)&__p[8]; v16 != i; ++v16)
  {
    v17 = std::stoi(v16, 0, 10);
    v18 = v17;
    size = (_DWORD *)this[1].__r_.__value_.__l.__size_;
    v19 = this[1].__r_.__value_.__r.__words[2];
    if ((unint64_t)size >= v19)
    {
      data = (std::string::pointer)v7->__r_.__value_.__r.__words[0];
      v23 = (uint64_t)((uint64_t)size - v7->__r_.__value_.__r.__words[0]) >> 2;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v25 = v19 - (_QWORD)data;
      if (v25 >> 1 > v24)
        v24 = v25 >> 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this[1].__r_.__value_.__r.__words[2], v26);
        data = this[1].__r_.__value_.__l.__data_;
        size = (_DWORD *)this[1].__r_.__value_.__l.__size_;
      }
      else
      {
        v27 = 0;
      }
      v28 = (int *)&v27[4 * v23];
      *v28 = v18;
      v21 = (std::string::size_type)(v28 + 1);
      while (size != (_DWORD *)data)
      {
        v29 = *--size;
        *--v28 = v29;
      }
      this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      this[1].__r_.__value_.__l.__size_ = v21;
      this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v27[4 * v26];
      if (data)
        operator delete(data);
    }
    else
    {
      *size = v17;
      v21 = (std::string::size_type)(size + 1);
    }
    this[1].__r_.__value_.__l.__size_ = v21;
  }
  v93[0] = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v93);
  v30 = (const std::string *)v95;
  std::string::basic_string[abi:ne180100]<0>(v93, "|");
  quasar::splitAndTrimNoEmpty(v30 + 1, (char *)v93, __p);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&this[2]);
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  this[2].__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[16];
  v97 = (void **)__p;
  memset(__p, 0, 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v97);
  if (v94 < 0)
    operator delete(v93[0]);
  v31 = this[2].__r_.__value_.__l.__data_;
  v32 = this[2].__r_.__value_.__l.__size_;
  while (v31 != (std::string::pointer)v32)
  {
    if (v31[23] < 0)
    {
      v34 = *(_QWORD *)v31;
      v33 = *((_QWORD *)v31 + 1);
    }
    else
    {
      v33 = v31[23];
      v34 = (uint64_t)v31;
    }
    if (v33 >= 1)
    {
      v35 = (_BYTE *)(v34 + v33);
      v36 = (void *)v34;
      do
      {
        v37 = memchr(v36, 42, v33);
        if (!v37)
          break;
        if (*v37 == 42)
        {
          if (v37 != v35 && &v37[-v34] != (_BYTE *)-1)
          {
            v112 = 0u;
            v113 = 0u;
            v110 = 0u;
            v111 = 0u;
            v108 = 0u;
            v109 = 0u;
            v106 = 0u;
            v107 = 0u;
            v104 = 0u;
            v105 = 0u;
            v102 = 0u;
            v103 = 0u;
            v100 = 0u;
            v101 = 0u;
            v99 = 0u;
            memset(__p, 0, sizeof(__p));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Illegal char '*' found in task type ", 36);
            v61 = v31[23];
            if (v61 >= 0)
              v62 = (uint64_t)v31;
            else
              v62 = *(_QWORD *)v31;
            if (v61 >= 0)
              v63 = v31[23];
            else
              v63 = *((_QWORD *)v31 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v62, v63);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          break;
        }
        v36 = v37 + 1;
        v33 = v35 - (_BYTE *)v36;
      }
      while (v35 - (_BYTE *)v36 >= 1);
    }
    v31 += 24;
  }
  v38 = (const std::string *)v95;
  std::string::basic_string[abi:ne180100]<0>(v93, "|");
  quasar::splitAndTrimNoEmpty(v38 + 2, (char *)v93, __p);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&this[3]);
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  this[3].__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[16];
  v97 = (void **)__p;
  memset(__p, 0, 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v97);
  if (v94 < 0)
    operator delete(v93[0]);
  v39 = this[3].__r_.__value_.__l.__data_;
  v40 = this[3].__r_.__value_.__l.__size_;
  while (v39 != (std::string::pointer)v40)
  {
    v41 = v39[23];
    if (v41 >= 0)
      v42 = v39[23];
    else
      v42 = *((_QWORD *)v39 + 1);
    if (v41 >= 0)
      v43 = (uint64_t)v39;
    else
      v43 = *(_QWORD *)v39;
    v44 = (_BYTE *)(v42 - 1);
    if (v42 >= 1)
    {
      v45 = (_BYTE *)(v43 + v42);
      v46 = (void *)v43;
      do
      {
        v47 = memchr(v46, 42, v42);
        if (!v47)
          break;
        if (*v47 == 42)
        {
          if (&v47[-v43] != v44 && v47 != v45 && &v47[-v43] != (_BYTE *)-1)
          {
            v112 = 0u;
            v113 = 0u;
            v110 = 0u;
            v111 = 0u;
            v108 = 0u;
            v109 = 0u;
            v106 = 0u;
            v107 = 0u;
            v104 = 0u;
            v105 = 0u;
            v102 = 0u;
            v103 = 0u;
            v100 = 0u;
            v101 = 0u;
            v99 = 0u;
            memset(__p, 0, sizeof(__p));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Illegal char '*' found in device type ", 38);
            v65 = v39[23];
            if (v65 >= 0)
              v66 = (uint64_t)v39;
            else
              v66 = *(_QWORD *)v39;
            if (v65 >= 0)
              v67 = v39[23];
            else
              v67 = *((_QWORD *)v39 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, v66, v67);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          break;
        }
        v46 = v47 + 1;
        v42 = v45 - (_BYTE *)v46;
      }
      while (v45 - (_BYTE *)v46 >= 1);
    }
    v39 += 24;
  }
  *(_WORD *)__p = 1;
  std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(v92, __p, &__p[2], 2uLL);
  *(_WORD *)__p = 1;
  std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(this[5].__r_.__value_.__r.__words, __p, &__p[2], 2uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "*");
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v90, (std::string *)__p, (__int128 *)&__p[24], 1uLL);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "*");
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v91, (std::string *)__p, (__int128 *)&__p[24], 1uLL);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "*");
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v89, (std::string *)__p, (__int128 *)&__p[24], 1uLL);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (0xAAAAAAAAAAAAAAABLL * ((v96 - v95) >> 3) >= 4)
  {
    quasar::parseBoolField(v95 + 72, __p);
    if (v92->__r_.__value_.__r.__words[0])
    {
      operator delete(v92->__r_.__value_.__l.__data_);
      v92->__r_.__value_.__r.__words[0] = 0;
      this[4].__r_.__value_.__l.__size_ = 0;
      this[4].__r_.__value_.__r.__words[2] = 0;
    }
    this[4].__r_.__value_.__r.__words[0] = *(_QWORD *)__p;
    v48 = *(_QWORD *)&__p[8];
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
    if (!v48)
    {
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v99 = 0u;
      memset(__p, 0, sizeof(__p));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"farField type must be '*', 'true', or 'false': ", 47);
      v81 = *(char *)(v95 + 95);
      if (v81 >= 0)
        v82 = v95 + 72;
      else
        v82 = *(_QWORD *)(v95 + 72);
      if (v81 >= 0)
        v83 = *(unsigned __int8 *)(v95 + 95);
      else
        v83 = *(_QWORD *)(v95 + 80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, v82, v83);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v96 - v95) >> 3) >= 5)
    {
      quasar::parseBoolField(v95 + 96, __p);
      if (v8->__r_.__value_.__r.__words[0])
      {
        operator delete(v8->__r_.__value_.__l.__data_);
        v8->__r_.__value_.__r.__words[0] = 0;
        this[5].__r_.__value_.__l.__size_ = 0;
        this[5].__r_.__value_.__r.__words[2] = 0;
      }
      this[5].__r_.__value_.__r.__words[0] = *(_QWORD *)__p;
      v49 = *(_QWORD *)&__p[8];
      *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      if (!v49)
      {
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v108 = 0u;
        v109 = 0u;
        v106 = 0u;
        v107 = 0u;
        v104 = 0u;
        v105 = 0u;
        v102 = 0u;
        v103 = 0u;
        v100 = 0u;
        v101 = 0u;
        v99 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"atypicalSpeech types must be '*', 'true', or 'false': ", 54);
        v86 = *(char *)(v95 + 119);
        if (v86 >= 0)
          v87 = v95 + 96;
        else
          v87 = *(_QWORD *)(v95 + 96);
        if (v86 >= 0)
          v88 = *(unsigned __int8 *)(v95 + 119);
        else
          v88 = *(_QWORD *)(v95 + 104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, v87, v88);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      v50 = (const std::string *)v95;
      if (0xAAAAAAAAAAAAAAABLL * ((v96 - v95) >> 3) >= 8)
      {
        std::string::basic_string[abi:ne180100]<0>(v93, "|");
        quasar::splitAndTrimNoEmpty(v50 + 5, (char *)v93, __p);
        std::vector<std::string>::__vdeallocate(v90);
        *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        this[6].__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[16];
        v97 = (void **)__p;
        memset(__p, 0, 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v97);
        if (v94 < 0)
          operator delete(v93[0]);
        v52 = this[6].__r_.__value_.__l.__data_;
        v51 = this[6].__r_.__value_.__l.__size_;
        while (v52 != (std::string::pointer)v51)
        {
          if (quasar::isInvalidPowerContext((uint64_t)v52))
          {
            v112 = 0u;
            v113 = 0u;
            v110 = 0u;
            v111 = 0u;
            v108 = 0u;
            v109 = 0u;
            v106 = 0u;
            v107 = 0u;
            v104 = 0u;
            v105 = 0u;
            v102 = 0u;
            v103 = 0u;
            v100 = 0u;
            v101 = 0u;
            v99 = 0u;
            memset(__p, 0, sizeof(__p));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"aneContext type must be '*', 'unconstrained', 'reduced', or 'avoid': ", 69);
            v69 = v52[23];
            if (v69 >= 0)
              v70 = (uint64_t)v52;
            else
              v70 = *(_QWORD *)v52;
            if (v69 >= 0)
              v71 = v52[23];
            else
              v71 = *((_QWORD *)v52 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, v70, v71);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          v52 += 24;
        }
        v53 = (const std::string *)v95;
        std::string::basic_string[abi:ne180100]<0>(v93, "|");
        quasar::splitAndTrimNoEmpty(v53 + 6, (char *)v93, __p);
        std::vector<std::string>::__vdeallocate(v91);
        *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        this[7].__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[16];
        v97 = (void **)__p;
        memset(__p, 0, 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v97);
        if (v94 < 0)
          operator delete(v93[0]);
        v55 = this[7].__r_.__value_.__l.__data_;
        v54 = this[7].__r_.__value_.__l.__size_;
        while (v55 != (std::string::pointer)v54)
        {
          if (quasar::isInvalidPowerContext((uint64_t)v55))
          {
            v112 = 0u;
            v113 = 0u;
            v110 = 0u;
            v111 = 0u;
            v108 = 0u;
            v109 = 0u;
            v106 = 0u;
            v107 = 0u;
            v104 = 0u;
            v105 = 0u;
            v102 = 0u;
            v103 = 0u;
            v100 = 0u;
            v101 = 0u;
            v99 = 0u;
            memset(__p, 0, sizeof(__p));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"cpuContext type must be '*', 'unconstrained', 'reduced', or 'avoid': ", 69);
            v73 = v55[23];
            if (v73 >= 0)
              v74 = (uint64_t)v55;
            else
              v74 = *(_QWORD *)v55;
            if (v73 >= 0)
              v75 = v55[23];
            else
              v75 = *((_QWORD *)v55 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, v74, v75);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          v55 += 24;
        }
        v56 = (const std::string *)v95;
        std::string::basic_string[abi:ne180100]<0>(v93, "|");
        quasar::splitAndTrimNoEmpty(v56 + 7, (char *)v93, __p);
        std::vector<std::string>::__vdeallocate(v89);
        *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        this[8].__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[16];
        v97 = (void **)__p;
        memset(__p, 0, 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v97);
        if (v94 < 0)
          operator delete(v93[0]);
        v58 = this[8].__r_.__value_.__l.__data_;
        v57 = this[8].__r_.__value_.__l.__size_;
        while (v58 != (std::string::pointer)v57)
        {
          if (quasar::isInvalidPowerContext((uint64_t)v58))
          {
            v112 = 0u;
            v113 = 0u;
            v110 = 0u;
            v111 = 0u;
            v108 = 0u;
            v109 = 0u;
            v106 = 0u;
            v107 = 0u;
            v104 = 0u;
            v105 = 0u;
            v102 = 0u;
            v103 = 0u;
            v100 = 0u;
            v101 = 0u;
            v99 = 0u;
            memset(__p, 0, sizeof(__p));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"gpuContext type must be '*', 'unconstrained', 'reduced', or 'avoid': ", 69);
            v77 = v58[23];
            if (v77 >= 0)
              v78 = (uint64_t)v58;
            else
              v78 = *(_QWORD *)v58;
            if (v77 >= 0)
              v79 = v58[23];
            else
              v79 = *((_QWORD *)v58 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, v78, v79);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          v58 += 24;
        }
      }
    }
  }
  *(_QWORD *)__p = &v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return this;
}

void sub_1ADA53834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void ***a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;
  void **v20;
  void **v21;
  void *v23;

  a16 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a19 = a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  a19 = a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  a19 = a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  if (*v21)
    operator delete(*v21);
  if (*a13)
    operator delete(*a13);
  a19 = a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  a19 = a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v19 + 32) = v23;
    operator delete(v23);
  }
  if (*(char *)(v19 + 23) < 0)
    operator delete(*(void **)v19);
  _Unwind_Resume(a1);
}

void sub_1ADA5383C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADA53900);
}

void sub_1ADA5384C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  a16 = (void **)&a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a16);
  JUMPOUT(0x1ADA53864);
}

void quasar::parseBoolField(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::string::size_type v3;
  char v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string::size_type size;
  int data;
  int v10;
  char v12;
  std::string v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return;
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a1, v3);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 23))
      return;
    v13 = *(std::string *)a1;
  }
  v4 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = (std::string *)((char *)&v13 + HIBYTE(v13.__r_.__value_.__r.__words[2]));
  else
    v5 = (std::string *)(v13.__r_.__value_.__r.__words[0] + v13.__r_.__value_.__l.__size_);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v13;
  else
    v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if (v6 != v5)
  {
    do
    {
      v6->__r_.__value_.__s.__data_[0] = __tolower(v6->__r_.__value_.__s.__data_[0]);
      v6 = (std::string *)((char *)v6 + 1);
    }
    while (v6 != v5);
    v4 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  if ((v4 & 0x80) == 0)
  {
    if (v4 != 1)
    {
      if (v4 != 4)
      {
        if (v4 == 5)
        {
          v7 = &v13;
LABEL_27:
          data = (int)v7->__r_.__value_.__l.__data_;
          v10 = v7->__r_.__value_.__s.__data_[4];
          if (data == 1936482662 && v10 == 101)
          {
            v12 = 0;
            std::vector<BOOL>::push_back((uint64_t)a2, &v12);
          }
          goto LABEL_37;
        }
        goto LABEL_37;
      }
      if (LODWORD(v13.__r_.__value_.__l.__data_) != 1702195828)
        goto LABEL_37;
LABEL_36:
      v12 = 1;
      std::vector<BOOL>::push_back((uint64_t)a2, &v12);
      goto LABEL_37;
    }
    if (v13.__r_.__value_.__s.__data_[0] != 42)
      goto LABEL_37;
LABEL_34:
    v12 = 1;
    std::vector<BOOL>::push_back((uint64_t)a2, &v12);
    v12 = 0;
    std::vector<BOOL>::push_back((uint64_t)a2, &v12);
    goto LABEL_37;
  }
  size = v13.__r_.__value_.__l.__size_;
  if (v13.__r_.__value_.__l.__size_ == 1 && *v13.__r_.__value_.__l.__data_ == 42)
    goto LABEL_34;
  if (v13.__r_.__value_.__l.__size_ == 4)
  {
    if (*(_DWORD *)v13.__r_.__value_.__l.__data_ == 1702195828)
      goto LABEL_36;
    size = v13.__r_.__value_.__l.__size_;
  }
  if (size == 5)
  {
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
    goto LABEL_27;
  }
LABEL_37:
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1ADA53AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void **v16;

  if (a16 < 0)
    operator delete(__p);
  if (*v16)
    operator delete(*v16);
  _Unwind_Resume(exception_object);
}

BOOL quasar::isInvalidPowerContext(uint64_t a1)
{
  int v2;
  _BYTE *v3;
  _BOOL8 v4;
  _BYTE v6[8];
  char *v7;

  quasar::RecogRequestFilter::getPowerContextOptions((uint64_t)v6);
  v2 = *(char *)(a1 + 23);
  if (v2 < 0)
  {
    if (*(_QWORD *)(a1 + 8) != 1)
    {
LABEL_8:
      v4 = &v7 == (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)a1);
      goto LABEL_9;
    }
    v3 = *(_BYTE **)a1;
  }
  else
  {
    v3 = (_BYTE *)a1;
    if (v2 != 1)
      goto LABEL_8;
  }
  if (*v3 != 42)
    goto LABEL_8;
  v4 = 0;
LABEL_9:
  std::__tree<std::string>::destroy((uint64_t)v6, v7);
  return v4;
}

void sub_1ADA53B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

BOOL quasar::RecogRequestFilter::matchesTask(uint64_t a1, unsigned __int8 **a2)
{
  return std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a2) != *(_QWORD *)(a1 + 56);
}

uint64_t quasar::RecogRequestFilter::matchesConfiguration(quasar::RecogRequestFilter *this, const quasar::SpeechRecognizerActiveConfiguration *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  const void **v12;
  const void **v13;
  char *v14;
  uint64_t result;

  if (*((_BYTE *)a2 + 24))
  {
    v4 = (unsigned int *)*((_QWORD *)this + 3);
    v5 = (unsigned int *)*((_QWORD *)this + 4);
    if (v4 == v5)
      return 0;
    while (1)
    {
      if (*((_QWORD *)a2 + 1))
      {
        v6 = *v4;
        v7 = (_DWORD *)((char *)a2 + 8);
        v8 = *((_QWORD *)a2 + 1);
        do
        {
          v9 = *(_DWORD *)(v8 + 28);
          v10 = v9 >= v6;
          if (v9 >= v6)
            v11 = (uint64_t *)v8;
          else
            v11 = (uint64_t *)(v8 + 8);
          if (v10)
            v7 = (_DWORD *)v8;
          v8 = *v11;
        }
        while (*v11);
        if (v7 != (_DWORD *)((char *)a2 + 8) && v6 >= v7[7])
          break;
      }
      if (++v4 == v5)
        return 0;
    }
  }
  if (*((_BYTE *)a2 + 56))
  {
    v12 = (const void **)*((_QWORD *)this + 6);
    v13 = (const void **)*((_QWORD *)this + 7);
    if (v12 != v13)
    {
      v14 = (char *)a2 + 40;
      while (v14 == (char *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a2 + 32, v12))
      {
        v12 += 3;
        if (v12 == v13)
          return 0;
      }
      goto LABEL_23;
    }
    return 0;
  }
LABEL_23:
  if (!*((_BYTE *)a2 + 88)
    || (result = quasar::matchesConfigurationCategoryWithWildcard((uint64_t *)this + 9, (uint64_t)a2 + 64), (_DWORD)result))
  {
    if (!*((_BYTE *)a2 + 120)
      || (result = quasar::matchesConfigurationCategory<BOOL>((uint64_t)this + 96, (uint64_t)a2 + 96), (_DWORD)result))
    {
      if (!*((_BYTE *)a2 + 152)
        || (result = quasar::matchesConfigurationCategory<BOOL>((uint64_t)this + 120, (uint64_t)a2 + 128), (_DWORD)result))
      {
        if (!*((_BYTE *)a2 + 184)
          || (result = quasar::matchesConfigurationCategoryWithWildcard((uint64_t *)this + 18, (uint64_t)a2 + 160),
              (_DWORD)result))
        {
          if (!*((_BYTE *)a2 + 216)
            || (result = quasar::matchesConfigurationCategoryWithWildcard((uint64_t *)this + 21, (uint64_t)a2 + 192),
                (_DWORD)result))
          {
            if (!*((_BYTE *)a2 + 248))
              return 1;
            result = quasar::matchesConfigurationCategoryWithWildcard((uint64_t *)this + 24, (uint64_t)a2 + 224);
            if ((_DWORD)result)
              return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t quasar::matchesConfigurationCategoryWithWildcard(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BOOL4 v10;
  uint64_t *v11;
  std::string::size_type v12;
  char v13;
  std::string *p_s1;
  std::string::size_type size;
  _QWORD *v16;
  std::string __s1;
  char v19;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
    return 0;
  v5 = (_QWORD *)(a2 + 8);
  v6 = a2 + 16;
  while (1)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      if (*(_BYTE *)(*(_QWORD *)v2 + *(_QWORD *)(v2 + 8) - 1) != 42)
      {
LABEL_16:
        if (v5 != (_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a2, (const void **)v2))return 1;
        goto LABEL_29;
      }
      v7 = *(_QWORD *)(v2 + 8);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v2 + 23);
      if (*(_BYTE *)(v2 + v7 - 1) != 42)
        goto LABEL_16;
    }
    std::string::basic_string(&__s1, (const std::string *)v2, 0, v7 - 1, (std::allocator<char> *)&v19);
    v8 = *v5;
    if (*v5)
    {
      v9 = v5;
      do
      {
        v10 = std::less<std::string>::operator()[abi:ne180100](v6, (const void **)(v8 + 32), (const void **)&__s1.__r_.__value_.__l.__data_);
        v11 = (uint64_t *)(v8 + 8);
        if (!v10)
        {
          v11 = (uint64_t *)v8;
          v9 = (_QWORD *)v8;
        }
        v8 = *v11;
      }
      while (*v11);
      if (v9 != v5)
      {
        v12 = *((char *)v9 + 55) < 0 ? v9[5] : *((unsigned __int8 *)v9 + 55);
        v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        {
          size = __s1.__r_.__value_.__l.__size_;
          if (v12 < __s1.__r_.__value_.__l.__size_)
            goto LABEL_28;
          p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (v12 < HIBYTE(__s1.__r_.__value_.__r.__words[2]))
            goto LABEL_29;
          p_s1 = &__s1;
          size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        v16 = v9 + 4;
        if ((*((_BYTE *)v9 + 55) & 0x80) != 0)
          v16 = (_QWORD *)*v16;
        if (!memcmp(p_s1, v16, size))
          break;
      }
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
LABEL_28:
      operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_29:
    v2 += 24;
    if (v2 == v3)
      return 0;
  }
  if (v13 < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return 1;
}

uint64_t quasar::matchesConfigurationCategory<BOOL>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  int v18;
  BOOL v19;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = v2 & 0x3F;
  if (v2 <= 0x3F && v3 == 0)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = *(_QWORD **)a1;
  v8 = *(_QWORD *)a1 + 8 * (v2 >> 6);
  v11 = *(_QWORD *)(a2 + 8);
  v9 = a2 + 8;
  v10 = v11;
  while (1)
  {
    if (v10)
    {
      v12 = (*v7 >> v6) & 1;
      v13 = v9;
      v14 = v10;
      do
      {
        v15 = *(unsigned __int8 *)(v14 + 25);
        v16 = v15 >= v12;
        if (v15 >= v12)
          v17 = (uint64_t *)v14;
        else
          v17 = (uint64_t *)(v14 + 8);
        if (v16)
          v13 = v14;
        v14 = *v17;
      }
      while (*v17);
      if (v13 != v9 && *(unsigned __int8 *)(v13 + 25) <= v12)
        break;
    }
    v18 = v6 + 1;
    v7 += v5 == 63;
    if (v5 == 63)
      v5 = 0;
    else
      v5 = v18;
    v19 = v7 == (_QWORD *)v8 && v3 == v5;
    v6 = v5;
    if (v19)
      return 0;
  }
  return 1;
}

uint64_t quasar::RecogRequestFilter::isMatch(uint64_t a1, __int32 a2, unsigned __int8 **a3, std::string *a4, int a5, int a6, std::string *a7, std::string *a8, std::string *__str)
{
  __int32 *v16;
  __int32 *v17;
  __int32 *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t result;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  int v28;
  unint64_t v29;
  int isMatchWithWildcard;
  int v31;

  v16 = *(__int32 **)(a1 + 32);
  v17 = wmemchr(*(__int32 **)(a1 + 24), a2, ((uint64_t)v16 - *(_QWORD *)(a1 + 24)) >> 2);
  if (v17)
    v18 = v17;
  else
    v18 = v16;
  if (v18 == *(__int32 **)(a1 + 32)
    || std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a3) == *(_QWORD *)(a1 + 56))
  {
    return 0;
  }
  v19 = *(_QWORD **)(a1 + 96);
  v20 = *(_QWORD *)(a1 + 104);
  v21 = a5
      ? std::__find_BOOL[abi:ne180100]<true,std::vector<BOOL>,true>(v19, 0, v20)
      : std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,true>(v19, 0, v20);
  if ((_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * (*(_QWORD *)(a1 + 104) >> 6)) == v21
    && (*(_DWORD *)(a1 + 104) & 0x3F) == v22)
  {
    return 0;
  }
  result = quasar::isMatchWithWildcard(a4, (uint64_t *)(a1 + 72), 1);
  if (!(_DWORD)result)
    return result;
  v25 = *(_QWORD **)(a1 + 120);
  v26 = *(_QWORD *)(a1 + 128);
  v27 = a6
      ? std::__find_BOOL[abi:ne180100]<true,std::vector<BOOL>,true>(v25, 0, v26)
      : std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,true>(v25, 0, v26);
  v29 = *(_QWORD *)(a1 + 128);
  if ((_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * (v29 >> 6)) == v27 && (v29 & 0x3F) == v28)
    return 0;
  isMatchWithWildcard = quasar::isMatchWithWildcard(a7, (uint64_t *)(a1 + 144), 0);
  result = 0;
  if (isMatchWithWildcard)
  {
    v31 = quasar::isMatchWithWildcard(a8, (uint64_t *)(a1 + 168), 0);
    result = 0;
    if (v31)
      return quasar::isMatchWithWildcard(__str, (uint64_t *)(a1 + 192), 0);
  }
  return result;
}

uint64_t quasar::RecogRequestFilter::noMatchingComponentErrorMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[11];
  char v42;
  uint64_t v43;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Could not find the recognizer components for the params samplingRate=", 69);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" task=", 6);
  v15 = *(char *)(a2 + 23);
  if (v15 >= 0)
    v16 = a2;
  else
    v16 = *(_QWORD *)a2;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" device=", 8);
  v20 = *(char *)(a3 + 23);
  if (v20 >= 0)
    v21 = a3;
  else
    v21 = *(_QWORD *)a3;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(a3 + 23);
  else
    v22 = *(_QWORD *)(a3 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" farField=", 10);
  v24 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" atypicalSpeech=", 16);
  v25 = (_QWORD *)std::ostream::operator<<();
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" aneContext=", 12);
  v27 = *(char *)(a6 + 23);
  if (v27 >= 0)
    v28 = a6;
  else
    v28 = *(_QWORD *)a6;
  if (v27 >= 0)
    v29 = *(unsigned __int8 *)(a6 + 23);
  else
    v29 = *(_QWORD *)(a6 + 8);
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" cpuContext=", 12);
  v32 = *(char *)(a7 + 23);
  if (v32 >= 0)
    v33 = a7;
  else
    v33 = *(_QWORD *)a7;
  if (v32 >= 0)
    v34 = *(unsigned __int8 *)(a7 + 23);
  else
    v34 = *(_QWORD *)(a7 + 8);
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" gpuContext=", 12);
  v37 = *(char *)(a8 + 23);
  if (v37 >= 0)
    v38 = a8;
  else
    v38 = *(_QWORD *)a8;
  if (v37 >= 0)
    v39 = *(unsigned __int8 *)(a8 + 23);
  else
    v39 = *(_QWORD *)(a8 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v38, v39);
  std::stringbuf::str();
  v41[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v41 + *(_QWORD *)(v41[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v41[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v42 < 0)
    operator delete((void *)v41[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v43);
}

void sub_1ADA54308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::RecogRequestFilter::validateFilters(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  char isMatch;
  char *v16;
  char **v17;
  BOOL v18;
  char *v19;
  char **v20;
  char *v21;
  char **v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char **v38;
  uint64_t *v39;
  unsigned int v40;
  unsigned __int8 **v41;
  int v42;
  int v43;
  void *v44[2];
  char v45;
  void *v46[2];
  unsigned __int8 v47;
  void *__p[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int16 v65;
  __int16 v66;
  char **v67;
  char *v68;

  quasar::RecogRequestFilter::getPowerContextOptions((uint64_t)&v67);
  v4 = (_QWORD *)a1[6];
  if (v4 == a1 + 7)
  {
    v28 = 1;
  }
  else
  {
    v5 = a1 + 10;
    v6 = &v68;
    v34 = a1 + 7;
    do
    {
      v7 = (_QWORD *)a1[9];
      if (v7 != v5)
      {
        v40 = *((_DWORD *)v4 + 7);
        v38 = v6;
        v39 = a2;
        v35 = v5;
        v36 = a1;
        do
        {
          v8 = 0;
          v32 = v7;
          v41 = (unsigned __int8 **)(v7 + 4);
          v66 = 1;
          do
          {
            v9 = 0;
            v33 = v8;
            v42 = *((unsigned __int8 *)&v66 + v8);
            v65 = 1;
            do
            {
              v10 = v67;
              if (v67 != v6)
              {
                v43 = *((unsigned __int8 *)&v65 + v9);
                v37 = v9;
                do
                {
                  v11 = v67;
                  if (v67 != v6)
                  {
                    do
                    {
                      v12 = v67;
                      if (v67 != v6)
                      {
                        while (2)
                        {
                          v14 = *a2;
                          v13 = a2[1];
                          while (1)
                          {
                            if (v14 == v13)
                            {
                              if (quasar::gLogLevel >= 1)
                              {
                                v63 = 0u;
                                v64 = 0u;
                                v61 = 0u;
                                v62 = 0u;
                                v59 = 0u;
                                v60 = 0u;
                                v57 = 0u;
                                v58 = 0u;
                                v55 = 0u;
                                v56 = 0u;
                                v53 = 0u;
                                v54 = 0u;
                                v51 = 0u;
                                v52 = 0u;
                                v49 = 0u;
                                v50 = 0u;
                                *(_OWORD *)__p = 0u;
                                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                                std::string::basic_string[abi:ne180100]<0>(v44, "*");
                                quasar::RecogRequestFilter::noMatchingComponentErrorMessage(v40, (uint64_t)v41, (uint64_t)v44, v42 != 0, v43 != 0, (uint64_t)(v10 + 4), (uint64_t)(v11 + 4), (uint64_t)(v12 + 4));
                                if ((v47 & 0x80u) == 0)
                                  v29 = v46;
                                else
                                  v29 = (void **)v46[0];
                                if ((v47 & 0x80u) == 0)
                                  v30 = v47;
                                else
                                  v30 = (uint64_t)v46[1];
                                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v29, v30);
                                if ((char)v47 < 0)
                                  operator delete(v46[0]);
                                if (v45 < 0)
                                  operator delete(v44[0]);
                                quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
                              }
                              v28 = 0;
                              goto LABEL_64;
                            }
                            std::string::basic_string[abi:ne180100]<0>(__p, "*");
                            isMatch = quasar::RecogRequestFilter::isMatch(v14, v40, v41, (std::string *)__p, v42 != 0, v43 != 0, (std::string *)(v10 + 4), (std::string *)(v11 + 4), (std::string *)(v12 + 4));
                            if (SBYTE7(v49) < 0)
                              operator delete(__p[0]);
                            if ((isMatch & 1) != 0)
                              break;
                            v14 += 216;
                          }
                          v16 = v12[1];
                          if (v16)
                          {
                            do
                            {
                              v17 = (char **)v16;
                              v16 = *(char **)v16;
                            }
                            while (v16);
                          }
                          else
                          {
                            do
                            {
                              v17 = (char **)v12[2];
                              v18 = *v17 == (char *)v12;
                              v12 = v17;
                            }
                            while (!v18);
                          }
                          v12 = v17;
                          v6 = v38;
                          a2 = v39;
                          if (v17 != v38)
                            continue;
                          break;
                        }
                      }
                      v19 = v11[1];
                      if (v19)
                      {
                        do
                        {
                          v20 = (char **)v19;
                          v19 = *(char **)v19;
                        }
                        while (v19);
                      }
                      else
                      {
                        do
                        {
                          v20 = (char **)v11[2];
                          v18 = *v20 == (char *)v11;
                          v11 = v20;
                        }
                        while (!v18);
                      }
                      v11 = v20;
                    }
                    while (v20 != v6);
                  }
                  v21 = v10[1];
                  if (v21)
                  {
                    do
                    {
                      v22 = (char **)v21;
                      v21 = *(char **)v21;
                    }
                    while (v21);
                  }
                  else
                  {
                    do
                    {
                      v22 = (char **)v10[2];
                      v18 = *v22 == (char *)v10;
                      v10 = v22;
                    }
                    while (!v18);
                  }
                  v10 = v22;
                  v5 = v35;
                  a1 = v36;
                  v9 = v37;
                }
                while (v22 != v6);
              }
              ++v9;
            }
            while (v9 != 2);
            v8 = v33 + 1;
          }
          while (v33 != 1);
          v23 = v32;
          v24 = (_QWORD *)v32[1];
          if (v24)
          {
            do
            {
              v25 = v24;
              v24 = (_QWORD *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v25 = (_QWORD *)v23[2];
              v18 = *v25 == (_QWORD)v23;
              v23 = v25;
            }
            while (!v18);
          }
          v7 = v25;
        }
        while (v25 != v5);
      }
      v26 = (_QWORD *)v4[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v4[2];
          v18 = *v27 == (_QWORD)v4;
          v4 = v27;
        }
        while (!v18);
      }
      v28 = 1;
      v4 = v27;
    }
    while (v27 != v34);
  }
LABEL_64:
  std::__tree<std::string>::destroy((uint64_t)&v67, v68);
  return v28;
}

void sub_1ADA546D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a32 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a33);
  std::__tree<std::string>::destroy(v38 - 112, *(char **)(v38 - 104));
  _Unwind_Resume(a1);
}

uint64_t quasar::collectRecogInfoFromSysConfigHelper@<X0>(quasar *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t PtreeOptional;
  quasar::PTree *v6;
  __int128 *v7;
  uint64_t i;
  unsigned __int8 *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  quasar::PTree *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const std::string *v20;
  __int128 *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  unsigned __int8 *v25;
  const std::string *v26;
  const std::string *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  __int128 *v32;
  __int128 v33;
  char v34;
  std::string __str;
  std::string v36;
  std::string v37;
  __int128 *v38;
  __int128 *v39;
  void *__p[2];
  _BYTE v41[264];
  __int128 *v42[3];
  _QWORD v43[4];
  int v44;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  memset(v43, 0, sizeof(v43));
  v44 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "associated-task-mapping");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p);
  v6 = (quasar::PTree *)PtreeOptional;
  if ((v41[7] & 0x80000000) != 0)
  {
    operator delete(__p[0]);
    if (!v6)
      goto LABEL_10;
  }
  else if (!PtreeOptional)
  {
    goto LABEL_10;
  }
  v7 = (__int128 *)quasar::PTree::begin(v6);
  for (i = quasar::PTree::end(v6); v7 != (__int128 *)i; v7 = (__int128 *)((char *)v7 + 88))
  {
    v42[0] = (__int128 *)quasar::PTree::getString((quasar::PTree *)((char *)v7 + 24));
    v9 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v43, (unsigned __int8 *)v42[0], (uint64_t)&std::piecewise_construct, v42);
    v10 = (uint64_t *)(v9 + 40);
    v11 = *((_QWORD *)v9 + 6);
    if (v11 >= *((_QWORD *)v9 + 7))
    {
      v12 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v10, v7);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v10, v7);
      v12 = v11 + 24;
    }
    *((_QWORD *)v9 + 6) = v12;
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "recognizers");
  v13 = quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p);
  v14 = (quasar::PTree *)v13;
  if ((v41[7] & 0x80000000) != 0)
  {
    operator delete(__p[0]);
    if (!v14)
      return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v43);
  }
  else if (!v13)
  {
    return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v43);
  }
  v15 = (__int128 *)quasar::PTree::begin(v14);
  v16 = quasar::PTree::end(v14);
  if (v15 != (__int128 *)v16)
  {
    v31 = v16;
    do
    {
      v17 = (uint64_t)v15 + 24;
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<true,0>((std::string *)__p, v15, (uint64_t)v15 + 24);
      v18 = a2[1];
      if (v18 >= a2[2])
      {
        v19 = std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>(a2, (__int128 *)__p);
      }
      else
      {
        std::pair<std::string,quasar::PTree>::pair[abi:ne180100](a2[1], (__int128 *)__p);
        v19 = v18 + 88;
        a2[1] = v18 + 88;
      }
      a2[1] = v19;
      quasar::PTree::~PTree((quasar::PTree *)&v41[8]);
      if ((v41[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "::");
      quasar::splitAndTrim((std::string *)v15, (char *)__p, (uint64_t *)v42);
      v32 = v15;
      if ((v41[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v20 = (const std::string *)v42[0];
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v42[1] - (char *)v42[0]) >> 3) <= 1)
      {
        memset(v41, 0, 256);
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Recognizer string malformed", 27);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "|");
      quasar::splitAndTrimNoEmpty(v20 + 1, (char *)__p, &v38);
      if ((v41[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v21 = v38;
      if (v39 != v38)
      {
        v22 = 0;
        do
        {
          v23 = (char *)v21 + 24 * v22;
          if (v23[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
          }
          else
          {
            v24 = *(_OWORD *)v23;
            v37.__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
            *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
          }
          if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v43, (unsigned __int8 *)&v37))
          {
            v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
            v25 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v43, (unsigned __int8 *)&v37, (uint64_t)&std::piecewise_construct, (__int128 **)&v36);
            v27 = (const std::string *)*((_QWORD *)v25 + 5);
            v26 = (const std::string *)*((_QWORD *)v25 + 6);
            while (v27 != v26)
            {
              memset(&v36, 0, sizeof(v36));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v36, v38, v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v38) >> 3));
              std::string::operator=((std::string *)(v36.__r_.__value_.__r.__words[0] + 24 * v22), v27);
              __p[0] = " | ";
              __p[1] = (void *)3;
              quasar::join<std::vector<std::string>>((uint64_t *)&v36, (uint64_t *)__p);
              std::string::operator=((std::string *)v42[0] + 1, &__str);
              __p[0] = " :: ";
              __p[1] = (void *)4;
              quasar::join<std::vector<std::string>>((uint64_t *)v42, (uint64_t *)__p);
              std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string&,quasar::PTree const&,0>((std::string *)__p, &v33, v17);
              v28 = a2[1];
              if (v28 >= a2[2])
              {
                v29 = std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>(a2, (__int128 *)__p);
              }
              else
              {
                std::pair<std::string,quasar::PTree>::pair[abi:ne180100](a2[1], (__int128 *)__p);
                v29 = v28 + 88;
                a2[1] = v28 + 88;
              }
              a2[1] = v29;
              quasar::PTree::~PTree((quasar::PTree *)&v41[8]);
              if ((v41[7] & 0x80000000) != 0)
                operator delete(__p[0]);
              if (v34 < 0)
                operator delete((void *)v33);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              __p[0] = &v36;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              ++v27;
            }
          }
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v37.__r_.__value_.__l.__data_);
          ++v22;
          v21 = v38;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v38) >> 3) > v22);
      }
      __p[0] = &v38;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = v42;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v15 = (__int128 *)((char *)v32 + 88);
    }
    while ((__int128 *)((char *)v32 + 88) != (__int128 *)v31);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v43);
}

void sub_1ADA54C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  uint64_t v27;

  std::pair<std::string,quasar::PTree>::~pair((uint64_t)&a27);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v27 - 144);
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100](&a27);
  _Unwind_Resume(a1);
}

void sub_1ADA54C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  uint64_t v27;

  a27 = (void **)(v27 - 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a27);
  JUMPOUT(0x1ADA54D4CLL);
}

void sub_1ADA54C7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a32 < 0)
    operator delete(__p);
  __p = (void *)(v32 - 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  JUMPOUT(0x1ADA54D4CLL);
}

void sub_1ADA54C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v27 - 144);
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100](&a27);
  _Unwind_Resume(a1);
}

void sub_1ADA54CA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,char *a36)
{
  a36 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  JUMPOUT(0x1ADA54D3CLL);
}

std::string *std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    this[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)((char *)this + 56), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  this[3].__r_.__value_.__s.__data_[8] = *(_BYTE *)(a3 + 56);
  return this;
}

void sub_1ADA54E38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(_QWORD *result, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  _QWORD *v7;
  void *v8;

  result[1] = 0;
  if (a4)
  {
    v7 = result;
    if (a4 > result[2] << 6)
    {
      v8 = (void *)*result;
      if (*v7)
      {
        operator delete(v8);
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
      }
      std::vector<BOOL>::__vallocate[abi:ne180100](v7, a4);
    }
    return std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(v7, a2, a3, a4);
  }
  return result;
}

_QWORD *std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(_QWORD *result, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = result[1];
  v5 = v4 + a4;
  result[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*result + 8 * v6) = 0;
  }
  if (a2 != a3)
  {
    v7 = v4 & 0x3F;
    v8 = (uint64_t *)(*result + 8 * (v4 >> 6));
    do
    {
      v9 = 1 << v7;
      if (*a2)
        v10 = *v8 | v9;
      else
        v10 = *v8 & ~v9;
      *v8 = v10;
      ++a2;
      v8 += v7 == 63;
      if (v7 == 63)
        v7 = 0;
      else
        ++v7;
    }
    while (a2 != a3);
  }
  return result;
}

_QWORD *std::__find_BOOL[abi:ne180100]<true,std::vector<BOOL>,true>(_QWORD *result, unsigned int a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if (!a2)
  {
LABEL_8:
    if (a3 >= 0x40)
    {
      do
      {
        if (*result)
          break;
        ++result;
        a3 -= 64;
      }
      while (a3 > 0x3F);
    }
    return result;
  }
  v3 = 64 - a2;
  if (v3 >= a3)
    v4 = a3;
  else
    v4 = 64 - a2;
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & *result) != 0)
    return result;
  if (v3 < a3)
  {
    a3 -= v4;
    ++result;
    goto LABEL_8;
  }
  v5 = a2 + a3;
  v6 = v5 - 63;
  if ((uint64_t)(v5 - 63) < 0)
    v6 = a2 + a3;
  v7 = v6 >> 6;
  v8 = v5 >> 6;
  if ((a3 & 0x8000000000000000) != 0)
    v8 = v7;
  result += v8;
  return result;
}

_QWORD *std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,true>(_QWORD *result, unsigned int a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if (!a2)
  {
LABEL_8:
    if (a3 >= 0x40)
    {
      do
      {
        if (*result != -1)
          break;
        ++result;
        a3 -= 64;
      }
      while (a3 > 0x3F);
    }
    return result;
  }
  v3 = 64 - a2;
  if (v3 >= a3)
    v4 = a3;
  else
    v4 = 64 - a2;
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~*result) != 0)
    return result;
  if (v3 < a3)
  {
    a3 -= v4;
    ++result;
    goto LABEL_8;
  }
  v5 = a2 + a3;
  v6 = v5 - 63;
  if ((uint64_t)(v5 - 63) < 0)
    v6 = a2 + a3;
  v7 = v6 >> 6;
  v8 = v5 >> 6;
  if ((a3 & 0x8000000000000000) != 0)
    v8 = v7;
  result += v8;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1ADA55480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1ADA55520(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void quasar::splitUnicodeRegex(char *a1@<X0>, const char *a2@<X1>, std::vector<std::string> *a3@<X8>)
{
  URegularExpression **v5;
  uint64_t i;
  uint64_t v7;
  std::string *end;
  uint64_t v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _BYTE v13[272];
  _BYTE v14[12];
  UErrorCode v15;
  void **v16;

  v15 = U_ZERO_ERROR;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v5 = (URegularExpression **)quasar::URegularExpressionWrapper::URegularExpressionWrapper((quasar::URegularExpressionWrapper *)v14, a2, &v15);
  if (v15 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    memset(v13, 0, sizeof(v13));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Could not make Unicode regex: ", 30);
    v11 = u_errorName(v15);
    v12 = strlen(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v13);
  }
  quasar::URegularExpressionWrapper::split(v5, a1, (std::vector<std::string> *)v13);
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v13[8] - *(_QWORD *)v13) >> 3));
  v7 = *(_QWORD *)&v13[8];
  for (i = *(_QWORD *)v13; i != v7; i += 24)
  {
    if (*(char *)(i + 23) < 0)
    {
      if (!*(_QWORD *)(i + 8))
        continue;
    }
    else if (!*(_BYTE *)(i + 23))
    {
      continue;
    }
    end = a3->__end_;
    if (end >= a3->__end_cap_.__value_)
    {
      v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, (__int128 *)i);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, (__int128 *)i);
      v9 = (uint64_t)&end[1];
    }
    a3->__end_ = (std::vector<std::string>::pointer)v9;
  }
  v16 = (void **)v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v16);
  quasar::URegularExpressionWrapper::~URegularExpressionWrapper((quasar::URegularExpressionWrapper *)v14);
}

void sub_1ADA55710(_Unwind_Exception *a1)
{
  uint64_t v1;

  quasar::URegularExpressionWrapper::~URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(v1 - 72));
  _Unwind_Resume(a1);
}

void quasar::trimUnicodeRegex(char *a1@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  URegularExpression **v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _OWORD v9[17];
  _BYTE v10[12];
  UErrorCode v11;

  v11 = U_ZERO_ERROR;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v5 = (URegularExpression **)quasar::URegularExpressionWrapper::URegularExpressionWrapper((quasar::URegularExpressionWrapper *)v10, a2, &v11);
  if (v11 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Could not make Unicode regex: ", 30);
    v7 = u_errorName(v11);
    v8 = strlen(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
  }
  quasar::URegularExpressionWrapper::trim(v5, a1, a3);
  quasar::URegularExpressionWrapper::~URegularExpressionWrapper((quasar::URegularExpressionWrapper *)v10);
}

void sub_1ADA55844(_Unwind_Exception *a1)
{
  uint64_t v1;

  quasar::URegularExpressionWrapper::~URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(v1 - 48));
  _Unwind_Resume(a1);
}

void quasar::splitUnicodeCharSet(char *a1@<X0>, char *a2@<X1>, std::vector<std::string> *a3@<X8>)
{
  void *__p[2];
  char v6;

  quasar::getRegexCharSet(a2, __p);
  quasar::splitUnicodeRegex(a1, (const char *)__p, a3);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1ADA558B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::trimUnicodeCharSet(char *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;
  __int128 v11;
  std::string::size_type v12;

  quasar::getRegexCharSet(a2, &v9);
  v5 = std::string::insert(&v9, 0, "(");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v10.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v10, ")+");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v12 = v7->__r_.__value_.__r.__words[2];
  v11 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  quasar::trimUnicodeRegex(a1, (const char *)&v11, a3);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)v11);
}

void sub_1ADA55994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  _Unwind_Resume(exception_object);
}

void quasar::replaceUnicodeRegex(const char *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  URegularExpression **v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  _OWORD v11[17];
  _BYTE v12[12];
  UErrorCode v13;

  v13 = U_ZERO_ERROR;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v7 = (URegularExpression **)quasar::URegularExpressionWrapper::URegularExpressionWrapper((quasar::URegularExpressionWrapper *)v12, a2, &v13);
  if (v13 < U_ILLEGAL_ARGUMENT_ERROR)
  {
    quasar::URegularExpressionWrapper::replaceAll(v7, a1, a3, a4);
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      memset(v11, 0, sizeof(v11));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Could not make Unicode regex: ", 30);
      v9 = u_errorName(v13);
      v10 = strlen(v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v11);
    }
    std::string::basic_string[abi:ne180100]<0>(a4, "");
  }
  quasar::URegularExpressionWrapper::~URegularExpressionWrapper((quasar::URegularExpressionWrapper *)v12);
}

void sub_1ADA55AEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  quasar::URegularExpressionWrapper::~URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(v1 - 48));
  _Unwind_Resume(a1);
}

void quasar::getWordBoundarySeparatedString(char *a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  quasar::getBoundarySeparatedString(a1, a2);
}

void quasar::getBoundarySeparatedString(char *a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  int v3;
  int v4;
  int v5;
  UChar *v6;
  std::vector<std::string>::pointer end;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  void *__p[2];
  std::string::size_type v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  std::__split_buffer<std::string> __v;
  int v22;
  UChar *v23;
  UChar *v24;
  std::vector<std::string> v25;

  memset(&v25, 0, sizeof(v25));
  if (a1[23] < 0)
    a1 = *(char **)a1;
  quasar::UnicodeCharacterVectorFromUTF8((quasar *)a1, &v23);
  v22 = 0;
  ubrk_open();
  v3 = ubrk_first();
  if (v3 != -1)
  {
    do
    {
      v4 = ubrk_next();
      v5 = v4;
      if (v4 > v3 && v4 < (unint64_t)(v24 - v23))
      {
        v6 = &v23[v4];
        if (*(v6 - 1))
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>(&v18, &v23[v3], (uint64_t)v6, v4 - (uint64_t)v3);
          quasar::UTF8StringFromUnicodeCharacterArray((UChar *)v18, (unint64_t)(v19 - (_BYTE *)v18) >> 1, __p);
          end = v25.__end_;
          if (v25.__end_ >= v25.__end_cap_.__value_)
          {
            v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v25.__end_ - (char *)v25.__begin_) >> 3);
            v10 = v9 + 1;
            if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v25.__end_cap_.__value_ - (char *)v25.__begin_) >> 3) > v10)
              v10 = 0x5555555555555556 * (((char *)v25.__end_cap_.__value_ - (char *)v25.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v25.__end_cap_.__value_ - (char *)v25.__begin_) >> 3) >= 0x555555555555555)
              v11 = 0xAAAAAAAAAAAAAAALL;
            else
              v11 = v10;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v25.__end_cap_;
            if (v11)
              v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v25.__end_cap_, v11);
            else
              v12 = 0;
            v13 = v12 + v9;
            __v.__first_ = v12;
            __v.__begin_ = v13;
            __v.__end_cap_.__value_ = &v12[v11];
            v14 = *(_OWORD *)__p;
            v13->__r_.__value_.__r.__words[2] = v17;
            *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
            __p[1] = 0;
            v17 = 0;
            __p[0] = 0;
            __v.__end_ = v13 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v25, &__v);
            v15 = v25.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
            v25.__end_ = v15;
            if (SHIBYTE(v17) < 0)
              operator delete(__p[0]);
          }
          else
          {
            v8 = *(_OWORD *)__p;
            v25.__end_->__r_.__value_.__r.__words[2] = v17;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
            v25.__end_ = end + 1;
          }
          if (v18)
          {
            v19 = v18;
            operator delete(v18);
          }
        }
      }
      v3 = v5;
    }
    while (v5 != -1);
  }
  ubrk_close();
  *a2 = v25;
  memset(&v25, 0, sizeof(v25));
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1ADA55E1C(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, void *a7, uint64_t a8, void *__pa, std::__split_buffer<std::wstring> *a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)(v10 - 136);
  if (v12)
  {
    *(_QWORD *)(v10 - 128) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(v10 - 136) = v10 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 136));
  _Unwind_Resume(__p);
}

void quasar::getSentenceBoundarySeparatedString(char *a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  quasar::getBoundarySeparatedString(a1, a2);
}

uint64_t quasar::isCJK(unsigned int a1)
{
  char v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;

  v2 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1AE15D100, (uint32x4_t)vaddq_s32(vdupq_n_s32(a1), (int32x4_t)xmmword_1AE15D0F0))));
  result = 1;
  if ((v2 & 1) == 0)
  {
    v4 = a1 & 0xFFFFFF00;
    v5 = a1 & 0xFFFFFFC0;
    v6 = a1 - 65381;
    v7 = (a1 & 0xFFFF0000) == 0x20000;
    if (v5 == 43072)
      v7 = 1;
    if (v4 == 4352)
      v7 = 1;
    return v6 < 0x78 || v7;
  }
  return result;
}

uint64_t quasar::trimUnicode@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  std::basic_string<char32_t> *v7;
  std::basic_string<char32_t>::size_type size;
  uint64_t v9;
  std::basic_string<char32_t>::size_type v11;
  std::basic_string<char32_t> *v12;
  char v13;
  std::basic_string<char32_t>::size_type v14;
  std::basic_string<char32_t>::size_type v15;
  std::basic_string<char32_t> *v16;
  uint64_t v17;
  UChar32 *v18;
  UChar32 *v19;
  std::basic_string<char32_t> *v20;
  std::basic_string<char32_t>::size_type v21;
  char *v22;
  std::basic_string<char32_t> __p[11];
  _OWORD v25[3];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_OWORD *)(v4 + 8) = xmmword_1AE1402C0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &unk_1E5D40240;
  memset(v25, 0, sizeof(v25));
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (int *)a1;
  else
    v6 = *(int **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v26 = v4;
  v35 = 0;
  v7 = __p;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v25, v6, (int *)((char *)v6 + v5), __p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::basic_string<char32_t> *)__p[0].__r_.__value_.__r.__words[0];
  size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p[0].__r_.__value_.__l.__size_;
  v9 = size;
  while (v9 * 4)
  {
    if (!u_isUWhiteSpace(v7->__r_.__value_.__s.__data_[--v9]))
    {
      v7 = (std::basic_string<char32_t> *)((char *)v7 + v9 * 4 + 4);
      break;
    }
  }
  v11 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = __p;
  else
    v12 = (std::basic_string<char32_t> *)__p[0].__r_.__value_.__r.__words[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = __p[0].__r_.__value_.__l.__size_;
  std::basic_string<char32_t>::erase(__p, ((char *)v7 - (char *)v12) >> 2, ((char *)v12 + 4 * v11 - (char *)v7) >> 2);
  v13 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  v15 = __p[0].__r_.__value_.__l.__size_;
  v14 = __p[0].__r_.__value_.__r.__words[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = __p;
  else
    v16 = (std::basic_string<char32_t> *)__p[0].__r_.__value_.__r.__words[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if (v15)
  {
    v17 = 4 * v15;
    v18 = (UChar32 *)v16;
    v19 = (UChar32 *)((char *)v16 + 4 * v15);
    while (u_isUWhiteSpace(*v18))
    {
      ++v18;
      v17 -= 4;
      if (!v17)
      {
        v18 = v19;
        break;
      }
    }
    v13 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    v14 = __p[0].__r_.__value_.__r.__words[0];
  }
  else
  {
    v18 = (UChar32 *)v16;
  }
  if (v13 >= 0)
    v20 = __p;
  else
    v20 = (std::basic_string<char32_t> *)v14;
  std::basic_string<char32_t>::erase(__p, ((char *)v16 - (char *)v20) >> 2, ((char *)v18 - (char *)v16) >> 2);
  v21 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = (char *)__p;
  else
    v22 = (char *)__p[0].__r_.__value_.__r.__words[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = __p[0].__r_.__value_.__l.__size_;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes((uint64_t)v25, v22, &v22[4 * v21], a2);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  return std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v25);
}

void sub_1ADA56150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  const char *v30;
  size_t v31;

  if (a2 == 1)
  {
    v28 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      v29 = v28;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v30 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v29 + 16))(v29);
      v31 = strlen(v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v30, v31);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v25, "");
    __cxa_end_catch();
    JUMPOUT(0x1ADA56114);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(v26 - 256);
  _Unwind_Resume(a1);
}

void sub_1ADA56250(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADA56248);
}

void quasar::splitAndTrimNoEmptyUnicode(uint64_t a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  std::basic_string<char32_t>::size_type size;
  char v8;
  std::basic_string<char32_t> *v9;
  uint64_t v10;
  char v11;
  int isUWhiteSpace;
  BOOL v13;
  std::vector<std::string>::pointer end;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  const std::string::value_type *p_v;
  std::string::size_type end_high;
  std::basic_string<char32_t> __p[11];
  std::vector<std::string> v23;
  std::__split_buffer<std::string> __v;
  UChar32 v25;
  _OWORD v26[3];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  memset(&v23, 0, sizeof(v23));
  v4 = operator new();
  *(_OWORD *)(v4 + 8) = xmmword_1AE1402C0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &unk_1E5D40240;
  memset(v26, 0, sizeof(v26));
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (int *)a1;
  else
    v6 = *(int **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v27 = v4;
  v36 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v26, v6, (int *)((char *)v6 + v5), __p);
  size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  v8 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = __p;
  else
    v9 = (std::basic_string<char32_t> *)__p[0].__r_.__value_.__r.__words[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p[0].__r_.__value_.__l.__size_;
  if (size)
  {
    v10 = 4 * size;
    v11 = 1;
    do
    {
      isUWhiteSpace = u_isUWhiteSpace(v9->__r_.__value_.__s.__data_[0]);
      v13 = isUWhiteSpace != 0;
      if (!isUWhiteSpace)
      {
        end = v23.__end_;
        if ((v11 & 1) != 0)
        {
          if (v23.__end_ >= v23.__end_cap_.__value_)
          {
            v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v23.__end_ - (char *)v23.__begin_) >> 3);
            v16 = v15 + 1;
            if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v23.__end_cap_.__value_ - (char *)v23.__begin_) >> 3) > v16)
              v16 = 0x5555555555555556 * (((char *)v23.__end_cap_.__value_ - (char *)v23.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v23.__end_cap_.__value_ - (char *)v23.__begin_) >> 3) >= 0x555555555555555)
              v17 = 0xAAAAAAAAAAAAAAALL;
            else
              v17 = v16;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v23.__end_cap_;
            if (v17)
              v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v23.__end_cap_, v17);
            else
              v18 = 0;
            v19 = v18 + v15;
            __v.__first_ = v18;
            __v.__begin_ = v19;
            __v.__end_cap_.__value_ = &v18[v17];
            v19->__r_.__value_.__r.__words[0] = 0;
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            __v.__end_ = v19 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v23, &__v);
            end = v23.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          }
          else
          {
            v23.__end_->__r_.__value_.__l.__data_ = 0;
            end->__r_.__value_.__l.__size_ = 0;
            end->__r_.__value_.__r.__words[2] = 0;
            ++end;
          }
          v23.__end_ = end;
        }
        v25 = v9->__r_.__value_.__s.__data_[0];
        std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes((uint64_t)v26, (char *)&v25, (char *)v26, (std::string *)&__v);
        if (SHIBYTE(__v.__end_) >= 0)
          p_v = (const std::string::value_type *)&__v;
        else
          p_v = (const std::string::value_type *)__v.__first_;
        if (SHIBYTE(__v.__end_) >= 0)
          end_high = HIBYTE(__v.__end_);
        else
          end_high = (std::string::size_type)__v.__begin_;
        std::string::append(end - 1, p_v, end_high);
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);
      }
      v9 = (std::basic_string<char32_t> *)((char *)v9 + 4);
      v11 = v13;
      v10 -= 4;
    }
    while (v10);
    v8 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  }
  *a2 = v23;
  memset(&v23, 0, sizeof(v23));
  if (v8 < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v26);
  __p[0].__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADA56544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 __p, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__split_buffer<std::wstring> *a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _QWORD *v38;
  void *v40;
  void *v41;
  const char *v42;
  size_t v43;

  if (a2 == 1)
  {
    v40 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      v41 = v40;
      a26 = 0u;
      a27 = 0u;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v42 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
      v43 = strlen(v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v42, v43);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
    *v38 = 0;
    v38[1] = 0;
    v38[2] = 0;
    __cxa_end_catch();
    JUMPOUT(0x1ADA564E4);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a38);
  *(_QWORD *)&__p = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1ADA56688(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADA56568);
}

std::string *quasar::joinAndAutoSpace@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  std::string::size_type v4;
  std::string::__raw *v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  std::string::size_type v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = result->__r_.__value_.__r.__words[0];
  size = result->__r_.__value_.__l.__size_;
  if (size != result->__r_.__value_.__r.__words[0])
  {
    v5 = (std::string::__raw *)result;
    v6 = 0;
    for (i = 0; 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(size - v4) >> 3) > i; ++i)
    {
      v8 = v4 + v6;
      if (*(char *)(v4 + v6 + 23) < 0)
      {
        if (*(_QWORD *)(v8 + 8))
        {
LABEL_7:
          if (quasar::needsSpaceBetween((uint64_t)a2, v8))
            std::string::append(a2, " ");
          v9 = v5->__words[0] + v6;
          v10 = *(char *)(v9 + 23);
          if (v10 >= 0)
            v11 = (const std::string::value_type *)(v5->__words[0] + v6);
          else
            v11 = *(const std::string::value_type **)v9;
          if (v10 >= 0)
            v12 = *(unsigned __int8 *)(v9 + 23);
          else
            v12 = *(_QWORD *)(v9 + 8);
          result = std::string::append(a2, v11, v12);
          v4 = v5->__words[0];
          size = v5->__words[1];
        }
      }
      else if (*(_BYTE *)(v4 + v6 + 23))
      {
        goto LABEL_7;
      }
      v6 += 24;
    }
  }
  return result;
}

void sub_1ADA56774(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL quasar::needsSpaceBetween(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int *v10;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v12;
  _BOOL8 v13;
  std::basic_string<char32_t> *p_p;
  std::basic_string<char32_t> __p;
  std::basic_string<char32_t> v17;
  _OWORD v18[3];
  _QWORD v19[3];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[32];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return 0;
  v6 = operator new();
  *(_OWORD *)(v6 + 8) = xmmword_1AE1402C0;
  *(_DWORD *)(v6 + 24) = 0;
  *(_QWORD *)v6 = &unk_1E5D40240;
  memset(v18, 0, sizeof(v18));
  v19[0] = v6;
  *(_OWORD *)&v19[1] = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  memset(v25, 0, sizeof(v25));
  v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (int *)a1;
  else
    v8 = *(int **)a1;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 8);
  v26 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v18, v8, (int *)((char *)v8 + v7), &v17);
  v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) == 0)
    v10 = (int *)a2;
  else
    v10 = *(int **)a2;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 8);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v18, v10, (int *)((char *)v10 + v9), &__p);
  size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  v12 = &v17;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v17.__r_.__value_.__l.__size_;
    v12 = (std::basic_string<char32_t> *)v17.__r_.__value_.__r.__words[0];
  }
  if (WebCore::isCharacterSmartReplaceExempt((WebCore *)v12->__r_.__value_.__s.__data_[size - 1], 1))
  {
    v13 = 0;
  }
  else
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
    v13 = !WebCore::isCharacterSmartReplaceExempt((WebCore *)p_p->__r_.__value_.__s.__data_[0], 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v18);
  return v13;
}

void sub_1ADA56A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1ADA56A70(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1ADA56A78);
  __clang_call_terminate(a1);
}

uint64_t quasar::toU32String@<X0>(uint64_t a1@<X0>, std::basic_string<char32_t> *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _OWORD v8[3];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_OWORD *)(v4 + 8) = xmmword_1AE1402C0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &unk_1E5D40240;
  memset(v8, 0, sizeof(v8));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (int *)a1;
  else
    v6 = *(int **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v9 = v4;
  v18 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v8, v6, (int *)((char *)v6 + v5), a2);
  return std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v8);
}

uint64_t quasar::toString@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _OWORD v8[3];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_OWORD *)(v4 + 8) = xmmword_1AE1402C0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &unk_1E5D40240;
  memset(v8, 0, sizeof(v8));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (char *)a1;
  else
    v6 = *(char **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v9 = v4;
  v18 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes((uint64_t)v8, v6, &v6[4 * v5], a2);
  return std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v8);
}

uint64_t quasar::USimpleSearch::USimpleSearch(uint64_t a1, uint64_t a2, _QWORD *a3, const void **a4, int a5, char a6)
{
  size_t v9;
  void **v10;
  const void *v11;
  _WORD *v12;
  int v13;
  _QWORD *v15;
  const char *v16;
  size_t v17;
  _OWORD v18[17];
  UErrorCode v19;
  void *v20[2];
  char v21;

  *(_BYTE *)a1 = a6;
  *(_QWORD *)(a1 + 8) = (uint64_t)(a3[1] - *a3) >> 1;
  *(_QWORD *)(a1 + 16) = 0;
  if (*((char *)a4 + 23) >= 0)
    v9 = *((unsigned __int8 *)a4 + 23);
  else
    v9 = (size_t)a4[1];
  v10 = v20;
  std::string::basic_string[abi:ne180100]((uint64_t)v20, v9 + 17);
  if (v21 < 0)
    v10 = (void **)v20[0];
  if (v9)
  {
    if (*((char *)a4 + 23) >= 0)
      v11 = a4;
    else
      v11 = *a4;
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "@collation=search");
  v19 = U_ZERO_ERROR;
  v12 = operator new(2uLL);
  *v12 = 32;
  *(_QWORD *)(a1 + 16) = usearch_open();
  if (v19 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    memset(v18, 0, sizeof(v18));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"USimpleSearch usearch_open failure:", 35);
    v16 = u_errorName(v19);
    v17 = strlen(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
  }
  usearch_getCollator();
  if (a5)
    v13 = 1;
  else
    v13 = 2;
  if (ucol_getStrength() != v13)
  {
    ucol_setStrength();
    usearch_reset();
  }
  usearch_setAttribute();
  usearch_setPattern();
  usearch_setText();
  operator delete(v12);
  if (v21 < 0)
    operator delete(v20[0]);
  return a1;
}

void sub_1ADA57214(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  if (*(char *)(v2 - 65) < 0)
    operator delete(*(void **)(v2 - 88));
  _Unwind_Resume(a1);
}

void quasar::USimpleSearch::~USimpleSearch(quasar::USimpleSearch *this)
{
  if (*((_QWORD *)this + 2))
    usearch_close();
}

uint64_t quasar::USimpleSearch::nextMatchRange@<X0>(quasar::USimpleSearch *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  int v6;
  char v7;
  _OWORD v8[17];
  int v9;

  v9 = 0;
  result = usearch_next();
  v5 = result;
  if ((_DWORD)result == -1)
  {
    v7 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    result = usearch_getMatchedLength();
    if (!(_DWORD)result)
    {
      memset(v8, 0, sizeof(v8));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "USimpleSearch usearch_getMatchedLength is 0 for a match");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
    }
    v6 = result;
    if (*(_BYTE *)this && *((_QWORD *)this + 1) > (unint64_t)(v5 + 1))
      result = usearch_setOffset();
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    v7 = 1;
  }
  *(_BYTE *)(a2 + 16) = v7;
  return result;
}

void sub_1ADA57454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

uint64_t quasar::USimpleSearch::getAllMatchRanges@<X0>(quasar::USimpleSearch *this@<X0>, void **a2@<X8>)
{
  uint64_t result;
  int v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  unsigned __int8 v19;
  __int128 v20;
  unsigned __int8 v21;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = quasar::USimpleSearch::nextMatchRange(this, (uint64_t)&v20);
  v5 = v21;
  if (v21)
  {
    while (1)
    {
      v7 = a2[1];
      v6 = (unint64_t)a2[2];
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((char *)v7 - (_BYTE *)*a2) >> 4;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v11 = v6 - (_QWORD)*a2;
        if (v11 >> 3 > v10)
          v10 = v11 >> 3;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
          v12 = 0xFFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a2 + 2), v12);
        else
          v13 = 0;
        v14 = &v13[16 * v9];
        *(_OWORD *)v14 = v20;
        v16 = (char *)*a2;
        v15 = (char *)a2[1];
        v17 = v14;
        if (v15 != *a2)
        {
          do
          {
            *((_OWORD *)v17 - 1) = *((_OWORD *)v15 - 1);
            v17 -= 16;
            v15 -= 16;
          }
          while (v15 != v16);
          v15 = (char *)*a2;
        }
        v8 = v14 + 16;
        *a2 = v17;
        a2[1] = v14 + 16;
        a2[2] = &v13[16 * v12];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v7 = v20;
        v8 = v7 + 1;
      }
      a2[1] = v8;
      result = quasar::USimpleSearch::nextMatchRange(this, (uint64_t)&v18);
      if (v5 != v19)
        break;
      v20 = v18;
      v5 = 1;
    }
  }
  return result;
}

void sub_1ADA575C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::UInsensitiveEquals()
{
  int v0;

  ucol_open();
  ucol_setStrength();
  v0 = ucol_strcoll();
  ucol_close();
  return v0 == 0;
}

uint64_t quasar::isLowerUnicode(uint64_t a1)
{
  uint64_t v1;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *p_p;
  _BOOL4 v4;
  uint64_t v5;
  int v6;
  int v7;
  std::basic_string<char32_t> __p;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  quasar::toU32String(a1, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
  v4 = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    v5 = 4 * size;
    while (!u_isupper(p_p->__r_.__value_.__s.__data_[0]))
    {
      v6 = u_istitle(p_p->__r_.__value_.__s.__data_[0]);
      if (v6 != 0 || v4)
      {
        if (v6)
          break;
      }
      else
      {
        v4 = u_islower(p_p->__r_.__value_.__s.__data_[0]) != 0;
      }
      p_p = (std::basic_string<char32_t> *)((char *)p_p + 4);
      v5 -= 4;
      if (!v5)
      {
        v7 = 1;
        goto LABEL_20;
      }
    }
    v7 = 0;
LABEL_20:
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      return v7 & v4;
  }
  else
  {
    v7 = 1;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      return v7 & v4;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  return v7 & v4;
}

void sub_1ADA577DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::isUpperUnicode(uint64_t a1)
{
  uint64_t v1;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *p_p;
  _BOOL4 v4;
  uint64_t v5;
  int v6;
  int v7;
  std::basic_string<char32_t> __p;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  quasar::toU32String(a1, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
  v4 = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    v5 = 4 * size;
    while (!u_islower(p_p->__r_.__value_.__s.__data_[0]))
    {
      v6 = u_istitle(p_p->__r_.__value_.__s.__data_[0]);
      if (v6 != 0 || v4)
      {
        if (v6)
          break;
      }
      else
      {
        v4 = u_isupper(p_p->__r_.__value_.__s.__data_[0]) != 0;
      }
      p_p = (std::basic_string<char32_t> *)((char *)p_p + 4);
      v5 -= 4;
      if (!v5)
      {
        v7 = 1;
        goto LABEL_20;
      }
    }
    v7 = 0;
LABEL_20:
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      return v7 & v4;
  }
  else
  {
    v7 = 1;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      return v7 & v4;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  return v7 & v4;
}

void sub_1ADA578E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::isTitleUnicode(uint64_t a1)
{
  uint64_t v1;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *p_p;
  int v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  int v9;
  std::basic_string<char32_t> __p;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  quasar::toU32String(a1, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
  v4 = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (!size)
  {
    v9 = 1;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_24;
    return v9 & v4;
  }
  v5 = 0;
  v6 = 4 * size;
  while (u_isupper(p_p->__r_.__value_.__s.__data_[0]) || u_istitle(p_p->__r_.__value_.__s.__data_[0]))
  {
    if (v5)
      goto LABEL_22;
    v5 = 1;
    v4 = 1;
LABEL_15:
    p_p = (std::basic_string<char32_t> *)((char *)p_p + 4);
    v6 -= 4;
    if (!v6)
    {
      v9 = 1;
      goto LABEL_23;
    }
  }
  v7 = u_islower(p_p->__r_.__value_.__s.__data_[0]);
  if (v5 || v7 == 0)
  {
    v4 |= v7 != 0;
    v5 = v7 != 0;
    goto LABEL_15;
  }
LABEL_22:
  v9 = 0;
LABEL_23:
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_24:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9 & v4;
}

void sub_1ADA57A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::keepFirstNCodePoints(uint64_t a1@<X0>, std::basic_string<char32_t>::size_type a2@<X1>, std::string *a3@<X8>)
{
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> v7;
  std::basic_string<char32_t> __str;
  char v9;

  quasar::toU32String(a1, &__str);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size <= a2)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    std::basic_string<char32_t>::basic_string(&v7, &__str, 0, a2, (std::allocator<char32_t> *)&v9);
    quasar::toString((uint64_t)&v7, a3);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1ADA57AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::keepLastNCodePoints(uint64_t a1@<X0>, std::basic_string<char32_t>::size_type a2@<X1>, std::string *a3@<X8>)
{
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> v7;
  std::basic_string<char32_t> __str;
  char v9;

  quasar::toU32String(a1, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    size = __str.__r_.__value_.__l.__size_;
  else
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if (size <= a2)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    std::basic_string<char32_t>::basic_string(&v7, &__str, size - a2, a2, (std::allocator<char32_t> *)&v9);
    quasar::toString((uint64_t)&v7, a3);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1ADA57BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t quasar::intersectionRange(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *a1;
  v3 = *a2;
  if (*a1 <= v3 && v3 < a1[1] + *a1)
    v4 = *a2;
  else
    v4 = 0;
  if (v3 > v2 || v2 >= a2[1] + *a2)
    return v4;
  else
    return *a1;
}

void quasar::tokenizeForWordBoundariesValidation(char *a1@<X0>, void **a2@<X8>)
{
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  uint64_t v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string::size_type v8;
  UChar32 *p_p;
  uint64_t v10;
  std::string::size_type v11;
  std::string::size_type v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  std::string __p;
  std::vector<std::string> v27;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  quasar::getBoundarySeparatedString(a1, &v27);
  begin = v27.__begin_;
  end = v27.__end_;
  if (v27.__begin_ != v27.__end_)
  {
    v5 = 0;
    do
    {
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
        size = begin->__r_.__value_.__l.__size_;
      else
        size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      quasar::trimUnicode((uint64_t)begin, &__p);
      v5 += size;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v7 = __p.__r_.__value_.__l.__size_;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v7)
        {
LABEL_10:
          quasar::toU32String((uint64_t)begin, (std::basic_string<char32_t> *)&__p);
          v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = (UChar32 *)&__p;
          else
            p_p = (UChar32 *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v8 = __p.__r_.__value_.__l.__size_;
          if (v8)
          {
            v10 = 4 * v8;
            while (u_ispunct(*p_p))
            {
              ++p_p;
              v10 -= 4;
              if (!v10)
                goto LABEL_37;
            }
            if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
              v11 = begin->__r_.__value_.__l.__size_;
            else
              v11 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
            v12 = v5 - v11;
            v14 = a2[1];
            v13 = (unint64_t)a2[2];
            if ((unint64_t)v14 >= v13)
            {
              v16 = ((char *)v14 - (_BYTE *)*a2) >> 4;
              v17 = v16 + 1;
              if ((unint64_t)(v16 + 1) >> 60)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v18 = v13 - (_QWORD)*a2;
              if (v18 >> 3 > v17)
                v17 = v18 >> 3;
              if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
                v19 = 0xFFFFFFFFFFFFFFFLL;
              else
                v19 = v17;
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a2 + 2), v19);
              v22 = &v20[16 * v16];
              *(_QWORD *)v22 = v12;
              *((_QWORD *)v22 + 1) = v11;
              v24 = (char *)*a2;
              v23 = (char *)a2[1];
              v25 = v22;
              if (v23 != *a2)
              {
                do
                {
                  *((_OWORD *)v25 - 1) = *((_OWORD *)v23 - 1);
                  v25 -= 16;
                  v23 -= 16;
                }
                while (v23 != v24);
                v23 = (char *)*a2;
              }
              v15 = v22 + 16;
              *a2 = v25;
              a2[1] = v22 + 16;
              a2[2] = &v20[16 * v21];
              if (v23)
                operator delete(v23);
            }
            else
            {
              *v14 = v12;
              v14[1] = v11;
              v15 = v14 + 2;
            }
            a2[1] = v15;
          }
LABEL_37:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      {
        goto LABEL_10;
      }
      ++begin;
    }
    while (begin != end);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1ADA57E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;
  void *v17;

  if (a14 < 0)
    operator delete(__p);
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::getRangesForSearchStringWithWordBoundariesValidation@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v10;
  int v11;
  char *v12;
  uint64_t v13;
  std::string::size_type *v14;
  std::string::size_type *v15;
  std::vector<std::string>::pointer end;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  uint64_t v25;
  _QWORD *v26;
  void **v27;
  unsigned int *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  uint64_t v37;
  std::vector<std::string>::pointer v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  std::string *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v48;
  std::vector<std::string>::pointer v49;
  std::vector<std::string>::pointer v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  int v55;
  char *v56;
  uint64_t v57;
  _BOOL4 v58;
  _BOOL4 v60;
  unint64_t v61;
  _OWORD *v62;
  _OWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  void **v73;
  unsigned int *v74;
  uint64_t v75;
  std::string v76;
  std::vector<std::string> v77;
  __int128 v78;
  unsigned int *v79;
  unsigned int *v80;
  _BYTE v81[24];
  std::vector<std::string> v82;
  void *__p;
  unint64_t *v84;
  void *v85;
  std::string::size_type *v86;
  _BYTE v87[32];
  _BYTE v88[32];
  std::__split_buffer<std::string> __v;
  std::string v90;

  v6 = *(char *)(result + 23);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(result + 23);
  else
    v7 = *(_QWORD *)(result + 8);
  if (!v7)
    goto LABEL_123;
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v10 = (std::string *)result;
    if (v6 < 0)
      result = *(_QWORD *)result;
    quasar::utf8::utf8ToUtf16((char *)result, v7, (uint64_t)v88);
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = (char *)a2;
    else
      v12 = *(char **)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    quasar::utf8::utf8ToUtf16(v12, v13, (uint64_t)v87);
    quasar::tokenizeForWordBoundariesValidation((char *)v10, &v85);
    v73 = a4;
    v75 = a3;
    quasar::tokenizeForWordBoundariesValidation((char *)a2, &__p);
    memset(&v82, 0, sizeof(v82));
    v14 = (std::string::size_type *)v85;
    v15 = v86;
    if (v85 != v86)
    {
      do
      {
        std::string::basic_string(&v90, v10, *v14, v14[1], (std::allocator<char> *)&__v);
        end = v82.__end_;
        if (v82.__end_ >= v82.__end_cap_.__value_)
        {
          v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v82.__end_ - (char *)v82.__begin_) >> 3);
          v19 = v18 + 1;
          if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v82.__end_cap_.__value_ - (char *)v82.__begin_) >> 3) > v19)
            v19 = 0x5555555555555556 * (((char *)v82.__end_cap_.__value_ - (char *)v82.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v82.__end_cap_.__value_ - (char *)v82.__begin_) >> 3) >= 0x555555555555555)
            v20 = 0xAAAAAAAAAAAAAAALL;
          else
            v20 = v19;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v82.__end_cap_;
          if (v20)
            v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v82.__end_cap_, v20);
          else
            v21 = 0;
          v22 = v21 + v18;
          __v.__first_ = v21;
          __v.__begin_ = v22;
          __v.__end_cap_.__value_ = &v21[v20];
          v23 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
          v22->__r_.__value_.__r.__words[2] = v90.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
          memset(&v90, 0, sizeof(v90));
          __v.__end_ = v22 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v82, &__v);
          v24 = v82.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v82.__end_ = v24;
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v90.__r_.__value_.__l.__data_);
        }
        else
        {
          v17 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
          v82.__end_->__r_.__value_.__r.__words[2] = v90.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v17;
          v82.__end_ = end + 1;
        }
        v14 += 2;
      }
      while (v14 != v15);
    }
    v25 = tl::expected<std::vector<unsigned short>,std::string>::value<std::vector<unsigned short>,(void *)0>((uint64_t)v88);
    v26 = (_QWORD *)tl::expected<std::vector<unsigned short>,std::string>::value<std::vector<unsigned short>,(void *)0>((uint64_t)v87);
    quasar::USimpleSearch::USimpleSearch((uint64_t)v81, v25, v26, (const void **)v75, 1, 1);
    v27 = v73;
    *v73 = 0;
    v73[1] = 0;
    v73[2] = 0;
    quasar::USimpleSearch::getAllMatchRanges((quasar::USimpleSearch *)v81, (void **)&v79);
    v28 = v79;
    v74 = v80;
    if (v79 != v80)
    {
      while (1)
      {
        *((_QWORD *)&v78 + 1) = 0;
        v29 = (uint64_t *)tl::expected<std::vector<unsigned short>,std::string>::value<std::vector<unsigned short>,(void *)0>((uint64_t)v87);
        quasar::pySlice<std::vector<unsigned short>>(v29, 0, *v28, (uint64_t)&v90);
        quasar::utf8::utf16ToUtf8((uint64_t)&v90, (uint64_t)&__v);
        v30 = tl::expected<std::string,std::string>::value<std::string,(void *)0>((uint64_t)&__v);
        v31 = *(unsigned __int8 *)(v30 + 23);
        if ((v31 & 0x80u) != 0)
          v31 = *(_QWORD *)(v30 + 8);
        *(_QWORD *)&v78 = v31;
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);
        if (v90.__r_.__value_.__r.__words[0])
        {
          v90.__r_.__value_.__l.__size_ = v90.__r_.__value_.__r.__words[0];
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        v32 = (uint64_t *)tl::expected<std::vector<unsigned short>,std::string>::value<std::vector<unsigned short>,(void *)0>((uint64_t)v87);
        quasar::pySlice<std::vector<unsigned short>>(v32, *v28, v28[2] + *v28, (uint64_t)&v90);
        quasar::utf8::utf16ToUtf8((uint64_t)&v90, (uint64_t)&__v);
        v33 = tl::expected<std::string,std::string>::value<std::string,(void *)0>((uint64_t)&__v);
        v34 = *(unsigned __int8 *)(v33 + 23);
        if ((v34 & 0x80u) != 0)
          v34 = *(_QWORD *)(v33 + 8);
        *((_QWORD *)&v78 + 1) = v34;
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);
        if (v90.__r_.__value_.__r.__words[0])
        {
          v90.__r_.__value_.__l.__size_ = v90.__r_.__value_.__r.__words[0];
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        memset(&v77, 0, sizeof(v77));
        v36 = (unint64_t *)__p;
        v35 = v84;
        if (__p == v84)
        {
          v48 = 0;
          begin = 0;
        }
        else
        {
          do
          {
            quasar::intersectionRange(v36, (unint64_t *)&v78);
            if (v37)
            {
              std::string::basic_string(&v90, (const std::string *)a2, *v36, v36[1], (std::allocator<char> *)&__v);
              v38 = v77.__end_;
              if (v77.__end_ >= v77.__end_cap_.__value_)
              {
                v40 = 0xAAAAAAAAAAAAAAABLL * (((char *)v77.__end_ - (char *)v77.__begin_) >> 3);
                v41 = v40 + 1;
                if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * (((char *)v77.__end_cap_.__value_ - (char *)v77.__begin_) >> 3) > v41)
                  v41 = 0x5555555555555556 * (((char *)v77.__end_cap_.__value_ - (char *)v77.__begin_) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v77.__end_cap_.__value_ - (char *)v77.__begin_) >> 3) >= 0x555555555555555)
                  v42 = 0xAAAAAAAAAAAAAAALL;
                else
                  v42 = v41;
                __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v77.__end_cap_;
                if (v42)
                  v43 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v77.__end_cap_, v42);
                else
                  v43 = 0;
                v44 = v43 + v40;
                __v.__first_ = v43;
                __v.__begin_ = v44;
                __v.__end_cap_.__value_ = &v43[v42];
                v45 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
                v44->__r_.__value_.__r.__words[2] = v90.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
                memset(&v90, 0, sizeof(v90));
                __v.__end_ = v44 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&v77, &__v);
                v46 = v77.__end_;
                std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
                v77.__end_ = v46;
                if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v90.__r_.__value_.__l.__data_);
              }
              else
              {
                v39 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
                v77.__end_->__r_.__value_.__r.__words[2] = v90.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
                v77.__end_ = v38 + 1;
              }
            }
            v36 += 2;
          }
          while (v36 != v35);
          begin = v77.__begin_;
          v48 = v77.__end_;
        }
        v50 = v82.__begin_;
        v49 = v82.__end_;
        if (*(char *)(v75 + 23) < 0)
          std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)v75, *(_QWORD *)(v75 + 8));
        else
          v76 = *(std::string *)v75;
        if ((char *)v49 - (char *)v50 == (char *)v48 - (char *)begin)
        {
          if (v50 == v49 || begin == v48)
          {
LABEL_85:
            v60 = v50 == v49 && begin == v48;
          }
          else
          {
            v51 = 0;
            while (1)
            {
              v52 = SHIBYTE(v50[v51].__r_.__value_.__r.__words[2]);
              v53 = v52 >= 0 ? (char *)&v50[v51] : (char *)v50[v51].__r_.__value_.__r.__words[0];
              v54 = v52 >= 0 ? HIBYTE(v50[v51].__r_.__value_.__r.__words[2]) : v50[v51].__r_.__value_.__l.__size_;
              quasar::utf8::utf8ToUtf16(v53, v54, (uint64_t)&__v);
              v55 = SHIBYTE(begin[v51].__r_.__value_.__r.__words[2]);
              v56 = v55 >= 0 ? (char *)&begin[v51] : (char *)begin[v51].__r_.__value_.__r.__words[0];
              v57 = v55 >= 0 ? HIBYTE(begin[v51].__r_.__value_.__r.__words[2]) : begin[v51].__r_.__value_.__l.__size_;
              quasar::utf8::utf8ToUtf16(v56, v57, (uint64_t)&v90);
              tl::expected<std::vector<unsigned short>,std::string>::value<std::vector<unsigned short>,(void *)0>((uint64_t)&__v);
              tl::expected<std::vector<unsigned short>,std::string>::value<std::vector<unsigned short>,(void *)0>((uint64_t)&v90);
              v58 = quasar::UInsensitiveEquals();
              tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&v90);
              tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&__v);
              if (!v58)
                break;
              if (&v50[++v51] == v49 || &begin[v51] == v48)
              {
                v50 = (std::vector<std::string>::pointer)((char *)v50 + v51 * 24);
                begin = (std::vector<std::string>::pointer)((char *)begin + v51 * 24);
                v27 = v73;
                goto LABEL_85;
              }
            }
            v60 = 0;
            v27 = v73;
          }
        }
        else
        {
          v60 = 0;
        }
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v76.__r_.__value_.__l.__data_);
          if (v60)
          {
LABEL_97:
            v62 = v27[1];
            v61 = (unint64_t)v27[2];
            if ((unint64_t)v62 >= v61)
            {
              v64 = ((char *)v62 - (_BYTE *)*v27) >> 4;
              v65 = v64 + 1;
              if ((unint64_t)(v64 + 1) >> 60)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v66 = v61 - (_QWORD)*v27;
              if (v66 >> 3 > v65)
                v65 = v66 >> 3;
              if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
                v67 = 0xFFFFFFFFFFFFFFFLL;
              else
                v67 = v65;
              if (v67)
                v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v73 + 2), v67);
              else
                v68 = 0;
              v69 = &v68[16 * v64];
              *(_OWORD *)v69 = v78;
              v71 = (char *)*v27;
              v70 = (char *)v27[1];
              v72 = v69;
              if (v70 != *v27)
              {
                do
                {
                  *((_OWORD *)v72 - 1) = *((_OWORD *)v70 - 1);
                  v72 -= 16;
                  v70 -= 16;
                }
                while (v70 != v71);
                v70 = (char *)*v27;
              }
              v63 = v69 + 16;
              *v27 = v72;
              v27[1] = v69 + 16;
              v27[2] = &v68[16 * v67];
              if (v70)
                operator delete(v70);
            }
            else
            {
              *v62 = v78;
              v63 = v62 + 1;
            }
            v27[1] = v63;
          }
        }
        else if (v60)
        {
          goto LABEL_97;
        }
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v77;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        v28 += 4;
        if (v28 == v74)
        {
          v28 = v79;
          break;
        }
      }
    }
    if (v28)
    {
      v80 = v28;
      operator delete(v28);
    }
    quasar::USimpleSearch::~USimpleSearch((quasar::USimpleSearch *)v81);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v82;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    if (__p)
    {
      v84 = (unint64_t *)__p;
      operator delete(__p);
    }
    if (v85)
    {
      v86 = (std::string::size_type *)v85;
      operator delete(v85);
    }
    tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)v87);
    return tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)v88);
  }
  else
  {
LABEL_123:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  return result;
}

void sub_1ADA585FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;
  void *v43;

  v43 = *(void **)v40;
  if (*(_QWORD *)v40)
  {
    *(_QWORD *)(v40 + 8) = v43;
    operator delete(v43);
  }
  quasar::USimpleSearch::~USimpleSearch((quasar::USimpleSearch *)&a28);
  *(_QWORD *)(v41 - 120) = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 120));
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&a40);
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base(v41 - 192);
  _Unwind_Resume(a1);
}

uint64_t tl::expected<std::vector<unsigned short>,std::string>::value<std::vector<unsigned short>,(void *)0>(uint64_t result)
{
  std::string v1;
  void *v2;
  std::string v3;

  if (!*(_BYTE *)(result + 24))
  {
    if (*(char *)(result + 23) < 0)
      std::string::__init_copy_ctor_external(&v1, *(const std::string::value_type **)result, *(_QWORD *)(result + 8));
    else
      v1 = *(std::string *)result;
    v2 = &unk_1E5D19030;
    v3 = v1;
    memset(&v1, 0, sizeof(v1));
    tl::detail::throw_exception<tl::bad_expected_access<std::string>>((uint64_t)&v2);
  }
  return result;
}

void sub_1ADA5881C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::exception a16)
{
  tl::bad_expected_access<std::string>::~bad_expected_access(&a16);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void quasar::pySlice<std::vector<unsigned short>>(uint64_t *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  __int32 v11;
  __int32 v12;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  _WORD *v18;
  _WORD *v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int16 v28;
  unsigned __int32 v29;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    v7 = v6 - v5;
    v8 = vdup_n_s32((unint64_t)(v6 - v5) >> 1);
    v9 = vmax_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(a3, a2)), (int8x8_t)v8), (int32x2_t)__PAIR64__(a3, a2)), 0);
    v10 = vmin_s32(v9, v8);
    v11 = v10.i32[1];
    v12 = v10.i32[0];
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    if (v10.i32[1] > v10.i32[0])
    {
      v29 = v9.i32[0];
      std::vector<unsigned short>::reserve((void **)a4, v10.i32[1] - v10.i32[0]);
      if ((int)(v7 >> 1) >= (uint64_t)v29)
        v14 = v29;
      else
        v14 = (int)(v7 >> 1);
      v15 = v11 + v14 - v12;
      do
      {
        v16 = *a1;
        if (v14 >= (a1[1] - *a1) >> 1)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        v18 = *(_WORD **)(a4 + 8);
        v17 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v18 >= v17)
        {
          v20 = *(_WORD **)a4;
          v21 = (uint64_t)v18 - *(_QWORD *)a4;
          if (v21 <= -3)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v22 = v21 >> 1;
          v23 = v17 - (_QWORD)v20;
          if (v23 <= (v21 >> 1) + 1)
            v24 = v22 + 1;
          else
            v24 = v23;
          if (v23 >= 0x7FFFFFFFFFFFFFFELL)
            v25 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25)
          {
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(a4 + 16, v25);
            v20 = *(_WORD **)a4;
            v18 = *(_WORD **)(a4 + 8);
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[2 * v22];
          *(_WORD *)v27 = *(_WORD *)(v16 + 2 * v14);
          v19 = v27 + 2;
          while (v18 != v20)
          {
            v28 = *--v18;
            *((_WORD *)v27 - 1) = v28;
            v27 -= 2;
          }
          *(_QWORD *)a4 = v27;
          *(_QWORD *)(a4 + 8) = v19;
          *(_QWORD *)(a4 + 16) = &v26[2 * v25];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v18 = *(_WORD *)(v16 + 2 * v14);
          v19 = v18 + 1;
        }
        *(_QWORD *)(a4 + 8) = v19;
        ++v14;
      }
      while (v15 != (_DWORD)v14);
    }
  }
}

void sub_1ADA589F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tl::expected<std::string,std::string>::value<std::string,(void *)0>(uint64_t result)
{
  std::string v1;
  void *v2;
  std::string v3;

  if (!*(_BYTE *)(result + 24))
  {
    if (*(char *)(result + 23) < 0)
      std::string::__init_copy_ctor_external(&v1, *(const std::string::value_type **)result, *(_QWORD *)(result + 8));
    else
      v1 = *(std::string *)result;
    v2 = &unk_1E5D19030;
    v3 = v1;
    memset(&v1, 0, sizeof(v1));
    tl::detail::throw_exception<tl::bad_expected_access<std::string>>((uint64_t)&v2);
  }
  return result;
}

{
  std::string v1;
  void *v2;
  std::string v3;

  if (!*(_BYTE *)(result + 24))
  {
    if (*(char *)(result + 23) < 0)
      std::string::__init_copy_ctor_external(&v1, *(const std::string::value_type **)result, *(_QWORD *)(result + 8));
    else
      v1 = *(std::string *)result;
    v2 = &unk_1E5D19030;
    v3 = v1;
    memset(&v1, 0, sizeof(v1));
    tl::detail::throw_exception<tl::bad_expected_access<std::string>>((uint64_t)&v2);
  }
  return result;
}

void sub_1ADA58A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::exception a16)
{
  tl::bad_expected_access<std::string>::~bad_expected_access(&a16);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<short>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADA58B18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void tl::detail::throw_exception<tl::bad_expected_access<std::string>>(uint64_t a1)
{
  char *exception;
  uint64_t v3;

  exception = (char *)__cxa_allocate_exception(0x20uLL);
  *(_QWORD *)exception = &unk_1E5D19030;
  v3 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(exception + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)exception + 3) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
}

void tl::bad_expected_access<std::string>::~bad_expected_access(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1E5D19030;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&unk_1E5D19030;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x1AF44D190);
}

const char *tl::bad_expected_access<std::string>::what()
{
  return "Bad expected access";
}

void std::vector<unsigned short>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    v9 = &v6[2 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *quasar::rescoring::operator<<(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Feature(", 8);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"type=", 5);
  v6 = *a2;
  if (v6 <= 0x15)
    v7 = quasar::rescoring::EnumNamesFeatureType(void)::names[v6];
  else
    v7 = "";
  v8 = strlen(v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"index=", 6);
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)")", 1);
  return a1;
}

_QWORD *quasar::rescoring::operator<<(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"TransformedFeature(", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"feature=[", 9);
  v5 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 4));
  v6 = *v5;
  v8 = (unsigned __int8 *)v5 + v6 + 4;
  v7 = *(unsigned int *)((char *)v5 + v6);
  if ((_DWORD)v7)
  {
    v9 = 8 * v7;
    do
    {
      v10 = quasar::rescoring::operator<<(a1, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
      v8 += 8;
      v9 -= 8;
    }
    while (v9);
  }
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"], ", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"transformation=[", 16);
  v12 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 6));
  v13 = *v12;
  v14 = (unsigned __int8 *)v12 + v13 + 4;
  v15 = *(unsigned int *)((char *)v12 + v13);
  if ((_DWORD)v15)
  {
    do
    {
      v16 = *v14;
      v17 = "";
      if (v16 <= 0xD)
        v17 = quasar::rescoring::EnumNamesFeatureTransformation(void)::names[v16];
      v18 = strlen(v17);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
      ++v14;
      --v15;
    }
    while (v15);
  }
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"], ", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"index=", 6);
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
  return a1;
}

{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"FeatureWeight(", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"weight=", 7);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"feature=[", 9);
  v7 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 4));
  v8 = (unsigned int *)((char *)v7 + *v7);
  v11 = *v8;
  v9 = v8 + 1;
  v10 = v11;
  if (v11)
  {
    v12 = 4 * v10;
    v13 = v9;
    do
    {
      v14 = *v13++;
      v15 = quasar::rescoring::operator<<(a1, (int *)((char *)v9 + v14));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
      v9 = v13;
      v12 -= 4;
    }
    while (v12);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"])", 2);
  return a1;
}

uint64_t quasar::rescoring::AdapterModel::getFeaturizer(quasar::rescoring::AdapterModel *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::CreateVectorOfStructs<quasar::rescoring::Feature>(flatbuffers_2_0_6::FlatBufferBuilder *a1, const unsigned __int8 *a2, uint64_t a3)
{
  flatbuffers_2_0_6::FlatBufferBuilder::StartVector(a1, 2 * (a3 & 0x1FFFFFFFFFFFFFFFLL), 4uLL);
  if (a3)
    flatbuffers_2_0_6::vector_downward::push(a1, a2, 8 * a3);
  *((_BYTE *)a1 + 78) = 0;
  return flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(a1, a3);
}

_QWORD *quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::fromBuilder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  size_t v4;
  unsigned int *v5;
  _QWORD *result;

  v3 = *(void **)(a1 + 56);
  v4 = *(unsigned int *)(a1 + 40);
  v5 = (unsigned int *)operator new();
  result = std::string::basic_string[abi:ne180100](v5, v3, v4);
  *(_QWORD *)a2 = &unk_1E5D3C8B8;
  *(_QWORD *)(a2 + 8) = v5;
  *(_WORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  if (*((char *)v5 + 23) < 0)
    v5 = *(unsigned int **)v5;
  *(_QWORD *)(a2 + 32) = (char *)v5 + *v5;
  *(_QWORD *)a2 = &unk_1E5D3C9A8;
  return result;
}

void sub_1ADA5913C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

_QWORD *quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::~unique_string_flatbuf_ptr(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1E5D3C8B8;
  v4 = a1[1];
  v2 = a1 + 1;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)v2, v3);
  return a1;
}

void quasar::rescoring::NullOpAdapterModel(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  __int16 v5;
  int v6;
  _DWORD *v7;
  int v8;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18[4];
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  void *v30;
  uint64_t v31[4];

  v21 = 0;
  v22 = xmmword_1AE14B6F0;
  v23 = 0;
  v24 = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 1;
  v28 = 256;
  v29 = 0;
  v19 = 21;
  v20 = 0;
  v4 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVectorOfStructs<quasar::rescoring::Feature>((flatbuffers_2_0_6::FlatBufferBuilder *)&v20, (const unsigned __int8 *)&v19, 1);
  BYTE14(v26) = 1;
  v5 = v24;
  flatbuffers_2_0_6::FlatBufferBuilder::AddElement<int>((char *)&v20, 8, 0, 0);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)&v20, 6, 0);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)&v20, 4, v4);
  v6 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable((flatbuffers_2_0_6::FlatBufferBuilder *)&v20, v5);
  v7 = operator new(4uLL);
  *v7 = v6;
  v8 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>((flatbuffers_2_0_6::FlatBufferBuilder *)&v20, (uint64_t)v7, 1);
  BYTE14(v26) = 1;
  LOWORD(v6) = v24;
  flatbuffers_2_0_6::FlatBufferBuilder::AddElement<double>((char *)&v20, 8, 0.0, 0.0);
  v9 = flatbuffers_2_0_6::FlatBufferBuilder::PushElement<double>((flatbuffers_2_0_6::vector_downward *)&v20, 1.0);
  flatbuffers_2_0_6::FlatBufferBuilder::TrackField((char *)&v20, 6, v9);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)&v20, 4, v8);
  v10 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable((flatbuffers_2_0_6::FlatBufferBuilder *)&v20, v6);
  v11 = operator new(4uLL);
  *v11 = v10;
  v12 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>((flatbuffers_2_0_6::FlatBufferBuilder *)&v20, (uint64_t)v11, 1);
  BYTE14(v26) = 1;
  LOWORD(v10) = v24;
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)&v20, 4, v12);
  v13 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable((flatbuffers_2_0_6::FlatBufferBuilder *)&v20, v10);
  flatbuffers_2_0_6::FlatBufferBuilder::Finish((flatbuffers_2_0_6::FlatBufferBuilder *)&v20, v13, 0, 0);
  operator delete(v11);
  operator delete(v7);
  quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::fromBuilder((uint64_t)&v20, (uint64_t)&v17);
  v14 = (_QWORD *)operator new();
  quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::unique_string_flatbuf_ptr(&v30, (uint64_t)&v17);
  quasar::rescoring::LinearAdapterModel::LinearAdapterModel(v14, a1, (uint64_t)&v30);
  v15 = v31[0];
  v30 = &unk_1E5D3C8B8;
  v31[0] = 0;
  if (v15)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)v31, v15);
  *a2 = v14;
  v16 = v18[0];
  v17 = &unk_1E5D3C8B8;
  v18[0] = 0;
  if (v16)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)v18, v16);
  flatbuffers_2_0_6::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers_2_0_6::FlatBufferBuilder *)&v20);
}

void sub_1ADA593EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v6 = *(_QWORD *)(v4 - 80);
  *(_QWORD *)(v4 - 88) = &unk_1E5D3C8B8;
  *(_QWORD *)(v4 - 80) = 0;
  if (v6)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100](v3 + 8, v6);
  MEMORY[0x1AF44D190](v2, 0x10E1C40B3755DEALL);
  v7 = v8;
  v8 = 0;
  if (v7)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)va, v7);
  flatbuffers_2_0_6::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers_2_0_6::FlatBufferBuilder *)va1);
  _Unwind_Resume(a1);
}

uint64_t quasar::rescoring::LoadLinearAdapterModelFromPath@<X0>(_QWORD *a1@<X0>, kaldi::quasar::Vocab *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  char v20;
  void *v21;
  uint64_t v22[4];
  void *__p[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[10];
  void *v32;
  uint64_t v33[4];
  _QWORD v34[2];
  _BYTE v35[408];
  _QWORD v36[20];

  v36[19] = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x1E0DE4FA8];
  v7 = MEMORY[0x1E0DE4FA8] + 64;
  v8 = (_QWORD *)MEMORY[0x1E0DE4F40];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  v36[0] = MEMORY[0x1E0DE4FA8] + 64;
  v34[0] = v9;
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v9 - 24)) = v10;
  v34[1] = 0;
  v11 = (std::ios_base *)((char *)v34 + *(_QWORD *)(v34[0] - 24));
  std::ios_base::init(v11, v35);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v34[0] = v6 + 24;
  v36[0] = v7;
  MEMORY[0x1AF44CA64](v35);
  kaldi::quasar::Vocab::OOvWord(a2, (std::string *)__p);
  std::ifstream::open();
  if (SBYTE7(v24) < 0)
    operator delete(__p[0]);
  if (*(_DWORD *)&v35[*(_QWORD *)(v34[0] - 24) + 16])
  {
    v30 = 0u;
    memset(v31, 0, 144);
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to load adapter model at ", 32);
    v18 = quasar::filesystem::operator<<(v17, (uint64_t)a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)".", 1);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
  std::ostream::operator<<();
  std::stringbuf::str();
  quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::fromString((uint64_t)&v19, (uint64_t)&v21);
  v12 = (_QWORD *)operator new();
  quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::unique_string_flatbuf_ptr(&v32, (uint64_t)&v21);
  quasar::rescoring::LinearAdapterModel::LinearAdapterModel(v12, a1, (uint64_t)&v32);
  v13 = v33[0];
  v32 = &unk_1E5D3C8B8;
  v33[0] = 0;
  if (v13)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)v33, v13);
  *a3 = v12;
  v14 = v22[0];
  v21 = &unk_1E5D3C8B8;
  v22[0] = 0;
  if (v14)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)v22, v14);
  if (v20 < 0)
    operator delete(v19);
  __p[0] = *(void **)MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v24 = v15;
  *((_QWORD *)&v24 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v29) < 0)
    operator delete(*((void **)&v28 + 1));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](v31);
  v34[0] = *v8;
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = v8[3];
  MEMORY[0x1AF44CA70](v35);
  std::istream::~istream();
  return MEMORY[0x1AF44D094](v36);
}

void sub_1ADA59790(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1ADA59874()
{
  uint64_t v0;

  std::istream::~istream();
  MEMORY[0x1AF44D094](v0);
  JUMPOUT(0x1ADA5986CLL);
}

void quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::fromString(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;

  v4 = (std::string *)operator new();
  v5 = v4;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)a2 = &unk_1E5D3C8B8;
  *(_QWORD *)(a2 + 8) = v5;
  *(_WORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
    v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 32) = (char *)v5 + LODWORD(v5->__r_.__value_.__l.__data_);
  *(_QWORD *)a2 = &unk_1E5D3C9A8;
}

void sub_1ADA59944(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

_QWORD *quasar::rescoring::AdapterModelMultiplexer::AdapterModelMultiplexer(_QWORD *result, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *result = *a3;
  v3 = a3 + 1;
  v4 = a3[1];
  result[1] = v4;
  v5 = result + 1;
  v6 = a3[2];
  result[2] = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *a3 = v3;
    *v3 = 0;
    a3[2] = 0;
  }
  else
  {
    *result = v5;
  }
  v7 = *a2;
  *a2 = 0;
  result[3] = v7;
  return result;
}

uint64_t quasar::rescoring::AdapterModelMultiplexer::getModel(uint64_t a1, int *a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  if (!a2)
    return *(_QWORD *)(a1 + 24);
  v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 < 5u)
    return *(_QWORD *)(a1 + 24);
  v4 = v3[2];
  if (!v4)
    return *(_QWORD *)(a1 + 24);
  v5 = (unsigned int *)((char *)a2 + v4 + *(unsigned int *)((char *)a2 + v4));
  v6 = *v5;
  v10[0] = v5 + 1;
  v10[1] = v6;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1, (uint64_t)v10);
  if (a1 + 8 == v7)
    v8 = a1 + 24;
  else
    v8 = v7 + 56;
  return *(_QWORD *)v8;
}

char *flatbuffers_2_0_6::FlatBufferBuilder::AddElement<double>(char *this, uint64_t a2, double a3, double a4)
{
  char *v5;
  unsigned int v6;

  v5 = this;
  if (a3 != a4 || this[88])
  {
    v6 = flatbuffers_2_0_6::FlatBufferBuilder::PushElement<double>((flatbuffers_2_0_6::vector_downward *)this, a3);
    return flatbuffers_2_0_6::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return this;
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::PushElement<double>(flatbuffers_2_0_6::vector_downward *this, double a2)
{
  double v5;

  if (*((_QWORD *)this + 10) <= 7uLL)
    *((_QWORD *)this + 10) = 8;
  flatbuffers_2_0_6::vector_downward::fill((char *)this, -*((_DWORD *)this + 10) & 7);
  v5 = a2;
  flatbuffers_2_0_6::vector_downward::push_small<double>(this, &v5);
  return *((unsigned int *)this + 10);
}

double flatbuffers_2_0_6::vector_downward::push_small<double>(flatbuffers_2_0_6::vector_downward *this, double *a2)
{
  uint64_t v4;
  double result;

  v4 = *((_QWORD *)this + 7);
  if ((unint64_t)(v4 - *((_QWORD *)this + 8)) <= 7)
  {
    flatbuffers_2_0_6::vector_downward::reallocate(this, 8uLL);
    v4 = *((_QWORD *)this + 7);
  }
  result = *a2;
  *(double *)(v4 - 8) = *a2;
  *((_QWORD *)this + 7) = v4 - 8;
  *((_DWORD *)this + 10) += 8;
  return result;
}

_QWORD *quasar::tennessee::generic_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc,std::string,std::unique_ptr<std::string>>::~generic_flatbuf_ptr(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1E5D3C8B8;
  v4 = a1[1];
  v2 = a1 + 1;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)v2, v3);
  return a1;
}

void quasar::tennessee::generic_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc,std::string,std::unique_ptr<std::string>>::~generic_flatbuf_ptr(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D3C8B8;
  v3 = a1[1];
  v1 = a1 + 1;
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)v1, v2);
  JUMPOUT(0x1AF44D190);
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureWeight>,quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>(flatbuffers_2_0_6::FlatBufferBuilder *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  double v13;
  int v14;
  int v15;
  _BYTE *v16;
  void *v17;
  uint64_t v18;
  void *__p;
  _BYTE *v21;
  _QWORD v22[3];

  std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureWeight>>::vector(&__p, a2);
  if (a2)
  {
    v6 = 0;
    do
    {
      v7 = *a3;
      v8 = *(double **)(*(_QWORD *)a3[1] + 8 * v6);
      v9 = a3[2];
      v22[0] = *a3;
      v22[1] = v8;
      v22[2] = v9;
      v10 = *((_QWORD *)v8 + 1) - *(_QWORD *)v8;
      if (v10)
        v11 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>,quasar::rescoring::CreateFeatureWeight(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::FeatureWeightT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,quasar::rescoring::CreateFeatureWeight(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::FeatureWeightT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},quasar::rescoring::CreateFeatureWeight(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::FeatureWeightT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>((flatbuffers_2_0_6::FlatBufferBuilder *)v7, v10 >> 3, (uint64_t)v22);
      else
        v11 = 0;
      v13 = v8[3];
      v12 = v8[4];
      *(_BYTE *)(v7 + 78) = 1;
      v14 = *(_DWORD *)(v7 + 40);
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<double>((char *)v7, 8, v12, 0.0);
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<double>((char *)v7, 6, v13, 0.0);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v7, 4, v11);
      v15 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable((flatbuffers_2_0_6::FlatBufferBuilder *)v7, v14);
      v16 = __p;
      *((_DWORD *)__p + v6++) = v15;
    }
    while (a2 != v6);
  }
  else
  {
    v16 = __p;
  }
  if (v21 == v16)
    v17 = &flatbuffers_2_0_6::data<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureWeight>,std::allocator<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureWeight>>>(std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureWeight>> const&)::t;
  else
    v17 = v16;
  v18 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>(a1, (uint64_t)v17, (v21 - v16) >> 2);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  return v18;
}

void sub_1ADA59D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureWeight>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1ADA59D90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>,quasar::rescoring::CreateFeatureWeight(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::FeatureWeightT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,quasar::rescoring::CreateFeatureWeight(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::FeatureWeightT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},quasar::rescoring::CreateFeatureWeight(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::FeatureWeightT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>(flatbuffers_2_0_6::FlatBufferBuilder *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  flatbuffers_2_0_6::FlatBufferBuilder *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  void *__p;
  _BYTE *v22;

  std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>>::vector(&__p, a2);
  if (a2)
  {
    v6 = 0;
    do
    {
      v7 = *(flatbuffers_2_0_6::FlatBufferBuilder **)a3;
      v8 = *(_QWORD *)(**(_QWORD **)(a3 + 8) + 8 * v6);
      v9 = *(_QWORD *)(v8 + 8) - *(_QWORD *)v8;
      if (v9)
        v10 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVectorOfStructs<quasar::rescoring::Feature>(*(flatbuffers_2_0_6::FlatBufferBuilder **)a3, *(const unsigned __int8 **)v8, v9 >> 3);
      else
        v10 = 0;
      v11 = *(_QWORD *)(v8 + 24);
      v12 = *(_QWORD *)(v8 + 32);
      if (v12 == v11)
        v13 = 0;
      else
        v13 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVectorScalarCast<signed char,quasar::rescoring::FeatureTransformation>((uint64_t)v7, v11, v12 - v11);
      v14 = *(_DWORD *)(v8 + 48);
      *((_BYTE *)v7 + 78) = 1;
      v15 = *((_DWORD *)v7 + 10);
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<int>((char *)v7, 8, v14, 0);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v7, 6, v13);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v7, 4, v10);
      v16 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable(v7, v15);
      v17 = __p;
      *((_DWORD *)__p + v6++) = v16;
    }
    while (a2 != v6);
  }
  else
  {
    v17 = __p;
  }
  if (v22 == v17)
    v18 = &flatbuffers_2_0_6::data<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>,std::allocator<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>>>(std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>> const&)::t;
  else
    v18 = v17;
  v19 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>(a1, (uint64_t)v18, (v22 - v17) >> 2);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  return v19;
}

void sub_1ADA59EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1ADA59F70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::CreateVectorScalarCast<signed char,quasar::rescoring::FeatureTransformation>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v10;

  flatbuffers_2_0_6::FlatBufferBuilder::StartVector((flatbuffers_2_0_6::FlatBufferBuilder *)a1, a3, 1uLL);
  if (a3)
  {
    v6 = a2 - 1;
    v7 = a3;
    do
    {
      v8 = *(_BYTE *)(v6 + v7);
      if (!*(_QWORD *)(a1 + 80))
        *(_QWORD *)(a1 + 80) = 1;
      --v7;
      v10 = v8;
      flatbuffers_2_0_6::vector_downward::push_small<signed char>((char *)a1, &v10);
    }
    while (v7);
  }
  *(_BYTE *)(a1 + 78) = 0;
  return flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>((flatbuffers_2_0_6::vector_downward *)a1, a3);
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::Finish(flatbuffers_2_0_6::FlatBufferBuilder *this, int a2, const char *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;

  *((_QWORD *)this + 8) = *((_QWORD *)this + 6);
  v8 = -4;
  v9 = -8;
  if (!a4)
    v9 = -4;
  if (!a3)
    v8 = 0;
  flatbuffers_2_0_6::vector_downward::fill((char *)this, (v9 + v8 - *((unsigned int *)this + 10)) & (*((_QWORD *)this + 10) - 1));
  if (a3)
    flatbuffers_2_0_6::vector_downward::push(this, (const unsigned __int8 *)a3, 4uLL);
  v10 = flatbuffers_2_0_6::FlatBufferBuilder::ReferTo(this, a2);
  result = flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(this, v10);
  if (a4)
    result = flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(this, *((_DWORD *)this + 10));
  *((_BYTE *)this + 79) = 1;
  return result;
}

uint64_t quasar::tennessee::generic_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc,std::string,std::unique_ptr<std::string>>::generic_flatbuf_ptr(uint64_t result, unsigned int **a2, unsigned int a3)
{
  unsigned int *v3;
  int *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  char *v7;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)result = &unk_1E5D3C8B8;
  *(_QWORD *)(result + 8) = v3;
  *(_WORD *)(result + 16) = a3;
  if (!a3)
  {
    *(_QWORD *)(result + 24) = 0;
    if (*((char *)v3 + 23) < 0)
      v3 = *(unsigned int **)v3;
    goto LABEL_10;
  }
  if (*((char *)v3 + 23) < 0)
    v3 = *(unsigned int **)v3;
  v4 = (int *)((char *)v3 + *v3);
  *(_QWORD *)(result + 24) = v4;
  v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 > a3)
  {
    v6 = *(unsigned __int16 *)((char *)v5 + a3);
    if (v6)
    {
      v3 = (unsigned int *)((char *)v4 + v6);
LABEL_10:
      v7 = (char *)v3 + *v3;
      goto LABEL_11;
    }
  }
  v7 = 0;
LABEL_11:
  *(_QWORD *)(result + 32) = v7;
  return result;
}

void quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::~unique_string_flatbuf_ptr(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D3C8B8;
  v3 = a1[1];
  v1 = a1 + 1;
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)v1, v2);
  JUMPOUT(0x1AF44D190);
}

_QWORD *quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::unique_string_flatbuf_ptr(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v7;

  v4 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7 = v4;
  quasar::tennessee::generic_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc,std::string,std::unique_ptr<std::string>>::generic_flatbuf_ptr((uint64_t)a1, &v7, *(unsigned __int16 *)(a2 + 16));
  *a1 = &unk_1E5D3C9A8;
  v5 = v7;
  v7 = 0;
  if (v5)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)&v7, (uint64_t)v5);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return a1;
}

void sub_1ADA5A20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::rescoring::LinearAdapterModel::LinearAdapterModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *a1 = &unk_1E5D3C270;
  v4 = a2[1];
  a1[1] = *a2;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *a1 = &unk_1E5D3C2D8;
  quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::unique_string_flatbuf_ptr(a1 + 3, a3);
  return a1;
}

void sub_1ADA5A2A8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *v1 = v4 + 16;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void quasar::rescoring::LinearAdapterModel::~LinearAdapterModel(quasar::rescoring::LinearAdapterModel *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &unk_1E5D3C2D8;
  *((_QWORD *)this + 3) = &unk_1E5D3C8B8;
  v4 = *((_QWORD *)this + 4);
  v2 = (_QWORD *)((char *)this + 32);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)v2, v3);
  *(_QWORD *)this = &unk_1E5D3C270;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &unk_1E5D3C2D8;
  *((_QWORD *)this + 3) = &unk_1E5D3C8B8;
  v4 = *((_QWORD *)this + 4);
  v2 = (_QWORD *)((char *)this + 32);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)v2, v3);
  *(_QWORD *)this = &unk_1E5D3C270;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1AF44D190);
}

float quasar::rescoring::LinearAdapterModel::scoreHypothesis(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  double v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  double v36;
  double v37;
  double v38;
  float v39;
  uint64_t v40;
  float v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;

  if (quasar::gLogLevel >= 6)
  {
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Scoring hypothesis ", 19);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" of ", 4);
    v10 = (unsigned __int16 *)((char *)a2 - *a2);
    if (*v10 < 5u)
    {
      v11 = 0;
    }
    else
    {
      v11 = v10[2];
      if (v11)
        v11 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v11);
    }
    v12 = v11 + 4;
    v13 = strlen((const char *)(v11 + 4));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v12, v13);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v49);
  }
  v14 = *(int **)(a1 + 56);
  v15 = *(unsigned __int16 *)((char *)v14 - *v14 + 4);
  v16 = *(unsigned int *)((char *)v14 + v15);
  v17 = (unsigned int *)((char *)v14 + v15 + v16);
  v18 = *v17;
  if ((_DWORD)v18)
  {
    v19 = 0;
    v20 = 4 * v18;
    v21 = (char *)v14 + v15 + v16;
    v22 = 0.0;
    while (1)
    {
      v23 = *(unsigned int *)&v21[v19 + 4];
      v24 = (int *)((char *)&v17[v19 / 4] + v23);
      v25 = v23 - v24[1];
      v26 = (char *)&v17[v19 / 4] + v25;
      if (*((unsigned __int16 *)v26 + 2) >= 7u)
      {
        v27 = *((unsigned __int16 *)v26 + 5);
        if (v27)
        {
          v28 = v23 + v27;
          v29 = &v17[v19 / 4];
          if (*(double *)((char *)&v17[v19 / 4 + 1] + v28) != 0.0)
            break;
        }
      }
LABEL_25:
      v19 += 4;
      if (v20 == v19)
        goto LABEL_28;
    }
    v30 = v23 + *(unsigned __int16 *)((char *)v29 + v25 + 8);
    v31 = (*(float (**)(_QWORD, int *, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2, a3, a4, (uint64_t)&v17[v19 / 4 + 1] + v30 + *(unsigned int *)((char *)v29 + v30 + 4));
    v32 = v31;
    v33 = v23 - v24[1];
    v34 = &v21[v19 + v33];
    v35 = *((unsigned __int16 *)v34 + 2);
    if (v35 < 9)
    {
      v37 = (float)(v31 + 0.0);
      v38 = 0.0;
      if (v35 < 7)
      {
LABEL_22:
        v41 = v37 * v38;
        if (quasar::gLogLevel >= 6)
        {
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v49 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Hypothesis ", 11);
          v42 = (_QWORD *)std::ostream::operator<<();
          v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" ", 1);
          v44 = quasar::rescoring::operator<<(v43, v24 + 1);
          v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"; ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"featureValue=", 13);
          v46 = (_QWORD *)std::ostream::operator<<();
          v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" ", 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"shiftedAndWeightedFeatureValue=", 31);
          std::ostream::operator<<();
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v49);
        }
        v22 = v22 + v41;
        goto LABEL_25;
      }
    }
    else
    {
      if (*((_WORD *)v34 + 6))
        v36 = *(double *)&v21[v19 + 4 + v23 + *((unsigned __int16 *)v34 + 6)];
      else
        v36 = 0.0;
      v39 = v36 + v32;
      v37 = v39;
    }
    v40 = *(unsigned __int16 *)&v21[v19 + 10 + v33];
    if (v40)
      v38 = *(double *)&v21[v19 + 4 + v23 + v40];
    else
      v38 = 0.0;
    goto LABEL_22;
  }
  v22 = 0.0;
LABEL_28:
  if (quasar::gLogLevel > 5)
  {
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Score: ", 7);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v49);
  }
  return v22;
}

void sub_1ADA5A780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::rescoring::LinearAdapterModel::serialize(uint64_t a1, _QWORD *a2)
{
  int v3;
  __int16 v4;
  int v5;
  void **v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[3];

  v16 = 0;
  v17 = 0;
  v18 = 0;
  quasar::rescoring::LinearRescoringModelDesc::UnPackTo(*(int **)(a1 + 56), &v16);
  v6 = 0;
  v7 = 0;
  v8 = xmmword_1AE14B6F0;
  v9 = 0;
  v10 = 0;
  v11 = 0u;
  v12 = 0u;
  v13 = 1;
  v14 = 256;
  v15 = 0;
  v19[0] = (uint64_t)&v6;
  v19[1] = (uint64_t)&v16;
  v19[2] = 0;
  if (v17 == v16)
  {
    v4 = 0;
    v3 = 0;
  }
  else
  {
    v3 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureWeight>,quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>((flatbuffers_2_0_6::FlatBufferBuilder *)&v6, (v17 - v16) >> 3, v19);
    v4 = v10;
  }
  BYTE14(v12) = 1;
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)&v6, 4, v3);
  v5 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable((flatbuffers_2_0_6::FlatBufferBuilder *)&v6, v4);
  flatbuffers_2_0_6::FlatBufferBuilder::Finish((flatbuffers_2_0_6::FlatBufferBuilder *)&v6, v5, 0, 0);
  quasar::tennessee::Serialize((uint64_t)&v6, a2);
  flatbuffers_2_0_6::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers_2_0_6::FlatBufferBuilder *)&v6);
  v6 = (void **)&v16;
  std::vector<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_1ADA5A8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 - 80);
  std::vector<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void quasar::rescoring::LinearRescoringModelDesc::UnPackTo(int *a1, _QWORD *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  int *v10;
  uint64_t v11;
  void **v12;
  void ***v13;
  void **v14;

  v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 >= 5u)
  {
    v3 = v2[2];
    if (v3)
    {
      v5 = (int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3));
      std::vector<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::resize((uint64_t)a2, *v5);
      if (*v5)
      {
        v6 = 0;
        v7 = 0;
        v8 = v5 + 1;
        do
        {
          v9 = *(uint64_t **)(*a2 + v6);
          if (v9)
          {
            quasar::rescoring::FeatureWeight::UnPackTo((int *)((char *)v8 + *v8), v9);
          }
          else
          {
            v10 = (int *)((char *)v8 + *v8);
            v11 = operator new();
            *(_OWORD *)v11 = 0u;
            *(_OWORD *)(v11 + 16) = 0u;
            *(_QWORD *)(v11 + 32) = 0;
            v14 = (void **)v11;
            quasar::rescoring::FeatureWeight::UnPackTo(v10, (uint64_t *)v11);
            v12 = v14;
            v14 = 0;
            std::unique_ptr<quasar::rescoring::FeatureWeightT>::reset[abi:ne180100](&v14, 0);
            v13 = (void ***)(*a2 + v6);
            v14 = 0;
            std::unique_ptr<quasar::rescoring::FeatureWeightT>::reset[abi:ne180100](v13, v12);
            std::unique_ptr<quasar::rescoring::FeatureWeightT>::reset[abi:ne180100](&v14, 0);
          }
          ++v7;
          v6 += 8;
          ++v8;
        }
        while (v7 < *v5);
      }
    }
  }
}

void sub_1ADA5AA10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<quasar::rescoring::FeatureWeightT>::reset[abi:ne180100]((void ***)va, 0);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::resize(uint64_t a1, unint64_t a2)
{
  void ***v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(void ****)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (void ***)v5)
        std::unique_ptr<quasar::rescoring::FeatureWeightT>::reset[abi:ne180100](--v3, 0);
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::__append((char **)a1, a2 - v4);
  }
}

void quasar::rescoring::FeatureWeight::UnPackTo(int *a1, uint64_t *a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u)
  {
    v5 = v4[2];
    if (v5)
    {
      v6 = (int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
      std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::resize(a2, *v6);
      if (*v6)
      {
        v7 = 0;
        v8 = 0;
        v9 = v6 + 1;
        do
        {
          v10 = *(_QWORD *)(*a2 + v7);
          if (v10)
          {
            quasar::rescoring::TransformedFeature::UnPackTo((int *)((char *)v9 + *v9), v10);
          }
          else
          {
            v11 = (int *)((char *)v9 + *v9);
            v12 = operator new();
            *(_OWORD *)v12 = 0u;
            *(_OWORD *)(v12 + 16) = 0u;
            *(_OWORD *)(v12 + 32) = 0u;
            *(_QWORD *)(v12 + 48) = 0;
            quasar::rescoring::TransformedFeature::UnPackTo(v11, v12);
            v13 = (uint64_t *)(*a2 + v7);
            v21 = 0;
            v14 = *v13;
            *v13 = v12;
            if (v14)
              std::default_delete<quasar::rescoring::TransformedFeatureT>::operator()[abi:ne180100]((uint64_t)v13, v14);
            v15 = v21;
            v21 = 0;
            if (v15)
              std::default_delete<quasar::rescoring::TransformedFeatureT>::operator()[abi:ne180100]((uint64_t)&v21, v15);
          }
          ++v8;
          v7 += 8;
          ++v9;
        }
        while (v8 < *v6);
      }
    }
  }
  v16 = (unsigned __int16 *)((char *)a1 - *a1);
  v17 = *v16;
  if (v17 <= 6)
  {
    a2[3] = 0;
    v18 = 0;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    if (v16[3])
      v19 = *(_QWORD *)((char *)a1 + v16[3]);
    a2[3] = v19;
    if (v17 >= 9)
    {
      v20 = v16[4];
      if (v20)
        v18 = *(_QWORD *)((char *)a1 + v20);
    }
  }
  a2[4] = v18;
}

void sub_1ADA5AC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  std::default_delete<quasar::rescoring::TransformedFeatureT>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    v24 = v4;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    v23 = v16;
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    *((_QWORD *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v17 = (char *)*((_QWORD *)&v22 + 1);
      v16 = v23;
    }
    v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v16;
    v23 = v20;
    v21 = v19;
    std::__split_buffer<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::~__split_buffer((uint64_t)&v21);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<quasar::rescoring::FeatureWeightT>::reset[abi:ne180100]((void ***)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (uint64_t *)(*a1 + 8 * a2));
  }
  else
  {
    std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__append(a1, a2 - v2);
  }
}

void quasar::rescoring::TransformedFeature::UnPackTo(int *a1, uint64_t a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  char v17;
  unsigned __int16 *v18;
  uint64_t v19;

  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u)
  {
    v5 = v4[2];
    if (v4[2])
    {
      v6 = (char *)a1 + v5;
      v7 = *(unsigned int *)((char *)a1 + v5);
      std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(a2, *(unsigned int *)((char *)a1 + v5 + v7));
      if (*(_DWORD *)&v6[v7])
      {
        v8 = 0;
        do
        {
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = *(_QWORD *)((char *)&a1[2 * v8 + 1] + v5 + v7);
          ++v8;
        }
        while (v8 < *(unsigned int *)&v6[v7]);
      }
    }
  }
  v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 7u)
  {
    v10 = v9[3];
    if (v10)
    {
      v11 = (int *)((char *)a1 + v10 + *(unsigned int *)((char *)a1 + v10));
      v12 = *(_QWORD *)(a2 + 24);
      v13 = *v11;
      v14 = *(_QWORD *)(a2 + 32) - v12;
      if (v13 <= v14)
      {
        if (v13 < v14)
          *(_QWORD *)(a2 + 32) = v12 + v13;
      }
      else
      {
        std::vector<quasar::rescoring::FeatureTransformation>::__append(a2 + 24, v13 - v14);
        LODWORD(v13) = *v11;
      }
      if ((_DWORD)v13)
      {
        v15 = (char *)(v11 + 1);
        v16 = *(_BYTE **)(a2 + 24);
        v13 = v13;
        do
        {
          v17 = *v15++;
          *v16++ = v17;
          --v13;
        }
        while (v13);
      }
    }
  }
  v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 9u)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    v19 = v18[4];
    if (v19)
      LODWORD(v19) = *(int *)((char *)a1 + v19);
  }
  *(_DWORD *)(a2 + 48) = v19;
}

void std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - *a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[8 * v10];
    v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_1ADA5B01C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *v1;
    *v1 = 0;
    if (v3)
      std::default_delete<quasar::rescoring::TransformedFeatureT>::operator()[abi:ne180100]((uint64_t)v1, v3);
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v5 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
      std::default_delete<quasar::rescoring::TransformedFeatureT>::operator()[abi:ne180100](i - 8, v5);
  }
}

void std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        std::default_delete<quasar::rescoring::TransformedFeatureT>::operator()[abi:ne180100]((uint64_t)v5, v6);
    }
    while (v5-- != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<quasar::rescoring::FeatureTransformation>::__append(uint64_t a1, size_t a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2);
      v5 += a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD *)a1;
    v7 = &v5[-*(_QWORD *)a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = operator new(v10);
    else
      v11 = 0;
    v12 = &v7[(_QWORD)v11];
    v13 = (char *)v11 + v10;
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (v5 != (char *)v6);
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = &v12[a2];
    *(_QWORD *)(a1 + 16) = v13;
    if (v6)
      operator delete((void *)v6);
  }
}

void std::default_delete<quasar::rescoring::TransformedFeatureT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = *(void **)(a2 + 24);
    if (v3)
    {
      *(_QWORD *)(a2 + 32) = v3;
      operator delete(v3);
    }
    v4 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1AF44D190);
  }
}

void ***std::unique_ptr<quasar::rescoring::FeatureWeightT>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x1AF44D190](v2, 0x1020C4084B17629);
  }
  return result;
}

void std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t *)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void ***v2;
  void ***v4;
  void *v5;

  v1 = *a1;
  v2 = (void ***)**a1;
  if (v2)
  {
    v4 = (void ***)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<quasar::rescoring::FeatureWeightT>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void quasar::TranslationTokenInternal::strippedText(std::string *__str@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  std::string *v3;
  unsigned __int8 *v4;
  std::string *v5;
  std::string *v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    v3 = (std::string *)__str->__r_.__value_.__r.__words[0];
    size = __str->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    v3 = __str;
  }
  if (size >= 3)
    size = 3;
  if (!size)
    goto LABEL_20;
  v4 = (unsigned __int8 *)v3 + size;
  v5 = v3;
  v6 = (std::string *)v4;
  do
  {
    if (v5->__r_.__value_.__s.__data_[0] == 226)
    {
      v7 = 1u;
      while (v7 != 3)
      {
        if ((unsigned __int8 *)((char *)v5 + v7) == v4)
          goto LABEL_17;
        v8 = v5->__r_.__value_.__s.__data_[v7];
        v9 = asc_1AE25DB62[v7++];
        if (v8 != v9)
          goto LABEL_9;
      }
      v6 = v5;
    }
LABEL_9:
    v5 = (std::string *)((char *)v5 + 1);
  }
  while (v5 != (std::string *)v4);
LABEL_17:
  if (v6 != (std::string *)v4 && v6 == v3)
  {
    std::string::basic_string(a2, __str, 3uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v10);
  }
  else
  {
LABEL_20:
    if (SHIBYTE(__str[3].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(a2, __str[3].__r_.__value_.__l.__data_, __str[3].__r_.__value_.__l.__size_);
    else
      *a2 = __str[3];
  }
}

void sub_1ADA5B7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::join<std::vector<float>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<float>>((uint64_t)v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADA5B8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::joinToStream<std::vector<float>>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = (_QWORD *)result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      v3 += 4;
      result = std::ostream::operator<<();
      v7 = 0;
    }
    while (v3 != v4);
  }
  return result;
}

kaldi::nnet1::RecurrentBaseComponent *kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::RecurrentBaseComponent *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)this = off_1E5D2E5C8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 4));
  *((_QWORD *)this + 4) = &unk_1E5D2C5B0;
  *((_DWORD *)this + 10) = *(_DWORD *)(a3 + 40);
  v6 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v6 - 24)) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  v7 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)(a3 + 71);
  *(_OWORD *)((char *)this + 56) = v7;
  *((_QWORD *)this + 6) = &off_1E5D305B8;
  *(_QWORD *)&v7 = *(_QWORD *)(a3 + 96);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = &unk_1E5D305D8;
  *((_QWORD *)this + 12) = v7;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 13, *(_QWORD *)(a3 + 104), *(_QWORD *)(a3 + 112), (uint64_t)(*(_QWORD *)(a3 + 112) - *(_QWORD *)(a3 + 104)) >> 5);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 16, *(_QWORD *)(a3 + 128), *(_QWORD *)(a3 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 136) - *(_QWORD *)(a3 + 128)) >> 4));
  *((_QWORD *)this + 19) = *(_QWORD *)(a3 + 152);
  return this;
}

void sub_1ADA5BA6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  kaldi::nnet1::HistoricalComponent *v2;
  kaldi::nnet1::RecurrentNnetTrainOptions *v3;
  va_list va;

  va_start(va, a2);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions(v3);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v2);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::NewCuSubOrVec<float>@<X0>(_QWORD *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = (_QWORD *)operator new();
  v7 = result;
  if (a2)
  {
    v8 = a1[1];
    v9 = a1[3];
    result[2] = a1[2];
    result[3] = v9;
    *result = &unk_1E5D29D70;
    result[1] = v8;
  }
  else
  {
    result = (_QWORD *)kaldi::CuVector<float>::CuVector(result, a1);
  }
  *a3 = v7;
  return result;
}

void sub_1ADA5BB20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 536);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 536);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 560);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 560);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 608);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 608);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 208))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 584);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 208))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 584);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 224))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 632);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 224))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 632);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) == 1)
    v4 = 0;
  else
    v4 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(_BYTE *)(a1 + 208))
  {
    v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v4);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v8);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v4);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50[35];

  v4 = a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *(_QWORD *)(a1 + 848) = off_1E5D32508;
  v5 = *(_QWORD *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 872), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3);
  *(_QWORD *)(a1 + 848) = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 896) = &off_1E5D2D150;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1E5D14D98, a2);
  *(_QWORD *)(a1 + 160) = &unk_1E5D2BC18;
  *(_QWORD *)(a1 + 168) = &unk_1E5D2BC40;
  *(_QWORD *)a1 = &off_1E5D2BA88;
  *(_QWORD *)(a1 + 848) = &off_1E5D2BD78;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  v7 = *(_BYTE *)(a2 + 240);
  v8 = *(_BYTE *)(a2 + 241);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 240) = v7;
  *(_BYTE *)(a1 + 241) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 4));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 4));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368), *(_QWORD *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 4));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 392), *(_QWORD *)(a2 + 392), *(_QWORD *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 4));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 416), *(_QWORD *)(a2 + 416), *(_QWORD *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 4));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 440), *(_QWORD *)(a2 + 440), *(_QWORD *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 2);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 504), *(const void **)(a2 + 504), *(_QWORD *)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 2);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a2 + 592) - *(_QWORD *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 608), (uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 632), (uint64_t)(*(_QWORD *)(a2 + 640) - *(_QWORD *)(a2 + 632)) >> 3);
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 656), *(_QWORD *)(a2 + 656), *(_QWORD *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 4));
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 680), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 688) - *(_QWORD *)(a2 + 680)) >> 4));
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 704), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 712) - *(_QWORD *)(a2 + 704)) >> 4));
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 728), *(_QWORD *)(a2 + 728), *(_QWORD *)(a2 + 736), (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 5);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 752), *(_QWORD *)(a2 + 752), *(_QWORD *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 4));
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v50);
  }
  v9 = *(_QWORD *)(a2 + 184);
  if (v9)
  {
    v10 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v10, v9);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v10);
  }
  v11 = *(_QWORD *)(a2 + 192);
  if (v11)
  {
    v12 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v12, v11);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v12);
  }
  v13 = *(_QWORD **)(a2 + 200);
  if (v13)
  {
    kaldi::NewCuSubOrVec<float>(v13, 0, v50);
    v14 = v50[0];
    v50[0] = 0;
    v15 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v14;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      v16 = v50[0];
      v50[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    }
  }
  v17 = *(_QWORD *)(a2 + 216);
  if (v17)
  {
    kaldi::NewCuSubOrMat<float>(v17, 0, v50);
    v18 = v50[0];
    v50[0] = 0;
    v19 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v18;
    if (v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      v20 = v50[0];
      v50[0] = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
    }
  }
  v21 = *(_QWORD *)(a2 + 232);
  if (v21)
  {
    v22 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v22, v21);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v22);
  }
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    v23 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 536) + 8 * v23))
      {
        v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v24, 0, v50);
        v25 = *(_QWORD *)(a1 + 536);
        v26 = v50[0];
        v50[0] = 0;
        v27 = *(_QWORD *)(v25 + 8 * v23);
        *(_QWORD *)(v25 + 8 * v23) = v26;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
        v28 = v50[0];
        v50[0] = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 560) + 8 * v23))
      {
        v29 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v29, 0, v50);
        v30 = *(_QWORD *)(a1 + 560);
        v31 = v50[0];
        v50[0] = 0;
        v32 = *(_QWORD *)(v30 + 8 * v23);
        *(_QWORD *)(v30 + 8 * v23) = v31;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
        v33 = v50[0];
        v50[0] = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 608) + 8 * v23))
      {
        v34 = (_QWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v23);
        kaldi::NewCuSubOrVec<float>(v34, 0, v50);
        v35 = *(_QWORD *)(a1 + 608);
        v36 = v50[0];
        v50[0] = 0;
        v37 = *(_QWORD *)(v35 + 8 * v23);
        *(_QWORD *)(v35 + 8 * v23) = v36;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        v38 = v50[0];
        v50[0] = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      }
      if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(*(_QWORD *)(a2 + 584) + 8 * v23))
      {
        v39 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v39, 0, v50);
        v40 = *(_QWORD *)(a1 + 584);
        v41 = v50[0];
        v50[0] = 0;
        v42 = *(_QWORD *)(v40 + 8 * v23);
        *(_QWORD *)(v40 + 8 * v23) = v41;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
        v43 = v50[0];
        v50[0] = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
      }
      if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(*(_QWORD *)(a2 + 632) + 8 * v23))
      {
        v44 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v44, 0, v50);
        v45 = *(_QWORD *)(a1 + 632);
        v46 = v50[0];
        v50[0] = 0;
        v47 = *(_QWORD *)(v45 + 8 * v23);
        *(_QWORD *)(v45 + 8 * v23) = v46;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
        v48 = v50[0];
        v50[0] = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
      }
      ++v23;
    }
    while (v23 < (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
  }
  if (*(_QWORD *)(a2 + 784) != *(_QWORD *)(a2 + 776))
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  return a1;
}

void sub_1ADA5C7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,quasar::Bitmap *a22,quasar::Bitmap *a23,void **a24,void **a25,void **a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,void **a30)
{
  _QWORD *v30;
  void **v31;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  v33 = *a14;
  if (*a14)
  {
    v30[64] = v33;
    operator delete(v33);
  }
  v34 = *a15;
  if (*a15)
  {
    v30[61] = v34;
    operator delete(v34);
  }
  a30 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a27, 0);
  v35 = v30[27];
  v30[27] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  v36 = v30[25];
  v30[25] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a29, 0);
  quasar::Bitmap::~Bitmap(a22);
  quasar::Bitmap::~Bitmap(a23);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v30, (uint64_t *)&off_1E5D14D98);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v30 + 106));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) == 1)
    v4 = 0;
  else
    v4 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(_BYTE *)(a1 + 208))
  {
    v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v4);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v8);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v4);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50[35];

  v4 = a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *(_QWORD *)(a1 + 848) = off_1E5D32508;
  v5 = *(_QWORD *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 872), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3);
  *(_QWORD *)(a1 + 848) = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 896) = &off_1E5D2D150;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1E5D14DB8, a2);
  *(_QWORD *)(a1 + 160) = &unk_1E5D2C038;
  *(_QWORD *)(a1 + 168) = &unk_1E5D2C060;
  *(_QWORD *)a1 = &off_1E5D2BEA8;
  *(_QWORD *)(a1 + 848) = &off_1E5D2C198;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  v7 = *(_BYTE *)(a2 + 240);
  v8 = *(_BYTE *)(a2 + 241);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 240) = v7;
  *(_BYTE *)(a1 + 241) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 4));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 4));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368), *(_QWORD *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 4));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 392), *(_QWORD *)(a2 + 392), *(_QWORD *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 4));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 416), *(_QWORD *)(a2 + 416), *(_QWORD *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 4));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 440), *(_QWORD *)(a2 + 440), *(_QWORD *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 2);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 504), *(const void **)(a2 + 504), *(_QWORD *)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 2);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a2 + 592) - *(_QWORD *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 608), (uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 632), (uint64_t)(*(_QWORD *)(a2 + 640) - *(_QWORD *)(a2 + 632)) >> 3);
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 656), *(_QWORD *)(a2 + 656), *(_QWORD *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 4));
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 680), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 688) - *(_QWORD *)(a2 + 680)) >> 4));
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 704), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 712) - *(_QWORD *)(a2 + 704)) >> 4));
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 728), *(_QWORD *)(a2 + 728), *(_QWORD *)(a2 + 736), (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 5);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 752), *(_QWORD *)(a2 + 752), *(_QWORD *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 4));
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v50);
  }
  v9 = *(_QWORD *)(a2 + 184);
  if (v9)
  {
    v10 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v10, v9);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v10);
  }
  v11 = *(_QWORD *)(a2 + 192);
  if (v11)
  {
    v12 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v12, v11);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v12);
  }
  v13 = *(_QWORD **)(a2 + 200);
  if (v13)
  {
    kaldi::NewCuSubOrVec<float>(v13, 0, v50);
    v14 = v50[0];
    v50[0] = 0;
    v15 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v14;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      v16 = v50[0];
      v50[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    }
  }
  v17 = *(_QWORD *)(a2 + 216);
  if (v17)
  {
    kaldi::NewCuSubOrMat<float>(v17, 0, v50);
    v18 = v50[0];
    v50[0] = 0;
    v19 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v18;
    if (v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      v20 = v50[0];
      v50[0] = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
    }
  }
  v21 = *(_QWORD *)(a2 + 232);
  if (v21)
  {
    v22 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v22, v21);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v22);
  }
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    v23 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 536) + 8 * v23))
      {
        v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v24, 0, v50);
        v25 = *(_QWORD *)(a1 + 536);
        v26 = v50[0];
        v50[0] = 0;
        v27 = *(_QWORD *)(v25 + 8 * v23);
        *(_QWORD *)(v25 + 8 * v23) = v26;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
        v28 = v50[0];
        v50[0] = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 560) + 8 * v23))
      {
        v29 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v29, 0, v50);
        v30 = *(_QWORD *)(a1 + 560);
        v31 = v50[0];
        v50[0] = 0;
        v32 = *(_QWORD *)(v30 + 8 * v23);
        *(_QWORD *)(v30 + 8 * v23) = v31;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
        v33 = v50[0];
        v50[0] = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 608) + 8 * v23))
      {
        v34 = (_QWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v23);
        kaldi::NewCuSubOrVec<float>(v34, 0, v50);
        v35 = *(_QWORD *)(a1 + 608);
        v36 = v50[0];
        v50[0] = 0;
        v37 = *(_QWORD *)(v35 + 8 * v23);
        *(_QWORD *)(v35 + 8 * v23) = v36;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        v38 = v50[0];
        v50[0] = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      }
      if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(*(_QWORD *)(a2 + 584) + 8 * v23))
      {
        v39 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v39, 0, v50);
        v40 = *(_QWORD *)(a1 + 584);
        v41 = v50[0];
        v50[0] = 0;
        v42 = *(_QWORD *)(v40 + 8 * v23);
        *(_QWORD *)(v40 + 8 * v23) = v41;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
        v43 = v50[0];
        v50[0] = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
      }
      if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(*(_QWORD *)(a2 + 632) + 8 * v23))
      {
        v44 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v44, 0, v50);
        v45 = *(_QWORD *)(a1 + 632);
        v46 = v50[0];
        v50[0] = 0;
        v47 = *(_QWORD *)(v45 + 8 * v23);
        *(_QWORD *)(v45 + 8 * v23) = v46;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
        v48 = v50[0];
        v50[0] = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
      }
      ++v23;
    }
    while (v23 < (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
  }
  if (*(_QWORD *)(a2 + 784) != *(_QWORD *)(a2 + 776))
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  return a1;
}

void sub_1ADA5D3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,quasar::Bitmap *a22,quasar::Bitmap *a23,void **a24,void **a25,void **a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,void **a30)
{
  _QWORD *v30;
  void **v31;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  v33 = *a14;
  if (*a14)
  {
    v30[64] = v33;
    operator delete(v33);
  }
  v34 = *a15;
  if (*a15)
  {
    v30[61] = v34;
    operator delete(v34);
  }
  a30 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a27, 0);
  v35 = v30[27];
  v30[27] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  v36 = v30[25];
  v30[25] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a29, 0);
  quasar::Bitmap::~Bitmap(a22);
  quasar::Bitmap::~Bitmap(a23);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v30, (uint64_t *)&off_1E5D14DB8);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v30 + 106));
  _Unwind_Resume(a1);
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 896) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 904) = xmmword_1AE13F660;
  *(_QWORD *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(_BYTE *)(a1 + 934) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &unk_1E5D2C5B0;
  *(_DWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D305B8;
  *(_QWORD *)(a1 + 88) = &unk_1E5D305D8;
  *(_QWORD *)(a1 + 96) = 0x100000001;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)a1 = &off_1E5D2B668;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 848) = &off_1E5D2B958;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = &unk_1E5D2B7F8;
  *(_QWORD *)(a1 + 168) = &unk_1E5D2B820;
  *(_DWORD *)(a1 + 176) = a3;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0x3DCCCCCD3F800000;
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 513) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) == 1)
    v4 = 0;
  else
    v4 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  v5 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  v7 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(_BYTE *)(a1 + 208))
  {
    v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v4);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v8);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v4);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v56;
  uint64_t v57[35];

  v4 = a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *(_QWORD *)(a1 + 848) = off_1E5D32508;
  v5 = *(_QWORD *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 872), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3);
  *(_QWORD *)(a1 + 848) = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 896) = &off_1E5D2D150;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1E5D14D78, a2);
  *(_QWORD *)(a1 + 160) = &unk_1E5D2B7F8;
  *(_QWORD *)(a1 + 168) = &unk_1E5D2B820;
  *(_QWORD *)a1 = &off_1E5D2B668;
  *(_QWORD *)(a1 + 848) = &off_1E5D2B958;
  v7 = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  v56 = (uint64_t *)(a1 + 184);
  *(_DWORD *)(a1 + 176) = v7;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  LOBYTE(v7) = *(_BYTE *)(a2 + 240);
  v8 = *(_BYTE *)(a2 + 241);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 240) = v7;
  *(_BYTE *)(a1 + 241) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 4));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 4));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368), *(_QWORD *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 4));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 392), *(_QWORD *)(a2 + 392), *(_QWORD *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 4));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 416), *(_QWORD *)(a2 + 416), *(_QWORD *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 4));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 440), *(_QWORD *)(a2 + 440), *(_QWORD *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 2);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 504), *(const void **)(a2 + 504), *(_QWORD *)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 2);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a2 + 592) - *(_QWORD *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 608), (uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 632), (uint64_t)(*(_QWORD *)(a2 + 640) - *(_QWORD *)(a2 + 632)) >> 3);
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 656), *(_QWORD *)(a2 + 656), *(_QWORD *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 4));
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 680), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 688) - *(_QWORD *)(a2 + 680)) >> 4));
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 704), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 712) - *(_QWORD *)(a2 + 704)) >> 4));
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 728), *(_QWORD *)(a2 + 728), *(_QWORD *)(a2 + 736), (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 5);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 752), *(_QWORD *)(a2 + 752), *(_QWORD *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 4));
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v57);
  }
  v9 = *(_QWORD *)(a2 + 184);
  if (v9)
  {
    kaldi::NewCuSubOrMat<float>(v9, 0, v57);
    v10 = v57[0];
    v57[0] = 0;
    v11 = *v56;
    *v56 = v10;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      v12 = v57[0];
      v57[0] = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    }
  }
  v13 = *(_QWORD *)(a2 + 192);
  if (v13)
  {
    kaldi::NewCuSubOrMat<float>(v13, 0, v57);
    v14 = v57[0];
    v57[0] = 0;
    v15 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v14;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      v16 = v57[0];
      v57[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    }
  }
  v17 = *(_QWORD **)(a2 + 200);
  if (v17)
  {
    kaldi::NewCuSubOrVec<float>(v17, 0, v57);
    v18 = v57[0];
    v57[0] = 0;
    v19 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v18;
    if (v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      v20 = v57[0];
      v57[0] = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    }
  }
  v21 = *(_QWORD *)(a2 + 216);
  if (v21)
  {
    kaldi::NewCuSubOrMat<float>(v21, 0, v57);
    v22 = v57[0];
    v57[0] = 0;
    v23 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v22;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
      v24 = v57[0];
      v57[0] = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
    }
  }
  v25 = *(_QWORD *)(a2 + 232);
  if (v25)
  {
    kaldi::NewCuSubOrMat<float>(v25, 0, v57);
    v26 = v57[0];
    v57[0] = 0;
    v27 = *(_QWORD *)(a1 + 232);
    *(_QWORD *)(a1 + 232) = v26;
    if (v27)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
      v28 = v57[0];
      v57[0] = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
    }
  }
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    v29 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 536) + 8 * v29))
      {
        v30 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v29);
        kaldi::NewCuSubOrMat<float>(v30, 0, v57);
        v31 = *(_QWORD *)(a1 + 536);
        v32 = v57[0];
        v57[0] = 0;
        v33 = *(_QWORD *)(v31 + 8 * v29);
        *(_QWORD *)(v31 + 8 * v29) = v32;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
        v34 = v57[0];
        v57[0] = 0;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 560) + 8 * v29))
      {
        v35 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v29);
        kaldi::NewCuSubOrMat<float>(v35, 0, v57);
        v36 = *(_QWORD *)(a1 + 560);
        v37 = v57[0];
        v57[0] = 0;
        v38 = *(_QWORD *)(v36 + 8 * v29);
        *(_QWORD *)(v36 + 8 * v29) = v37;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
        v39 = v57[0];
        v57[0] = 0;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 608) + 8 * v29))
      {
        v40 = (_QWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v29);
        kaldi::NewCuSubOrVec<float>(v40, 0, v57);
        v41 = *(_QWORD *)(a1 + 608);
        v42 = v57[0];
        v57[0] = 0;
        v43 = *(_QWORD *)(v41 + 8 * v29);
        *(_QWORD *)(v41 + 8 * v29) = v42;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
        v44 = v57[0];
        v57[0] = 0;
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
      }
      if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(*(_QWORD *)(a2 + 584) + 8 * v29))
      {
        v45 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v29);
        kaldi::NewCuSubOrMat<float>(v45, 0, v57);
        v46 = *(_QWORD *)(a1 + 584);
        v47 = v57[0];
        v57[0] = 0;
        v48 = *(_QWORD *)(v46 + 8 * v29);
        *(_QWORD *)(v46 + 8 * v29) = v47;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
        v49 = v57[0];
        v57[0] = 0;
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
      }
      if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(*(_QWORD *)(a2 + 632) + 8 * v29))
      {
        v50 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v29);
        kaldi::NewCuSubOrMat<float>(v50, 0, v57);
        v51 = *(_QWORD *)(a1 + 632);
        v52 = v57[0];
        v57[0] = 0;
        v53 = *(_QWORD *)(v51 + 8 * v29);
        *(_QWORD *)(v51 + 8 * v29) = v52;
        if (v53)
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
        v54 = v57[0];
        v57[0] = 0;
        if (v54)
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
      }
      ++v29;
    }
    while (v29 < (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
  }
  if (*(_QWORD *)(a2 + 784) != *(_QWORD *)(a2 + 776))
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  return a1;
}

void sub_1ADA5E188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,quasar::Bitmap *a24,quasar::Bitmap *a25,uint64_t a26,uint64_t *a27,uint64_t a28)
{
  _QWORD *v28;
  void **v29;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v29);
  a28 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  v31 = *a15;
  if (*a15)
  {
    v28[64] = v31;
    operator delete(v31);
  }
  v32 = *a16;
  if (*a16)
  {
    v28[61] = v32;
    operator delete(v32);
  }
  a28 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a22;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  v33 = v28[29];
  v28[29] = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
  v34 = v28[27];
  v28[27] = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
  v35 = v28[25];
  v28[25] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
  v36 = v28[24];
  v28[24] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
  v37 = *a27;
  *a27 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
  quasar::Bitmap::~Bitmap(a24);
  quasar::Bitmap::~Bitmap(a25);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v28, (uint64_t *)&off_1E5D14D78);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v28 + 106));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  quasar::Bitmap *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = a2[3];
  *(_QWORD *)(a1 + 160) = &unk_1E5D2B7F8;
  v5 = a1 + 160;
  *(_QWORD *)(a1 + 168) = &unk_1E5D2B820;
  v6 = (quasar::Bitmap *)(a1 + 168);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  v14 = (void **)(v5 + 592);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 568);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 544);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 520);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 496);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 472);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 448);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 424);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 400);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 376);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v7 = *(void **)(v5 + 344);
  if (v7)
  {
    *(_QWORD *)(a1 + 512) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 480);
  if (v8)
  {
    *(_QWORD *)(a1 + 488) = v8;
    operator delete(v8);
  }
  v14 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v9 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v10 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  v11 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  v12 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v13 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  quasar::Bitmap::~Bitmap(v6);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v5);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  uint64_t v2;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void `non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(a1 - 168);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(_QWORD *a1)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
  JUMPOUT(0x1AF44D190);
}

char *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::LstmComponent((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1ADA5E820(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Copy(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Copy((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

char *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent<kaldi::CuMatrixBase<float>>((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1ADA5E8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(a1 - 160);
}

char *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent<kaldi::CuMatrixBase<float>>((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1ADA5E918(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(a1 - 168);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v6;
  void **v7;
  void *v10;
  BOOL v19;
  float *v20;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  int *v26;
  BOOL v32;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  void *v39;
  void *v40;
  int v41;
  BOOL v44;
  std::string *v45;
  int inited;
  float v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  _QWORD *v68;
  void **v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[16];
  uint64_t v78;
  void *__p;
  void *v80;
  void **v81[34];
  void *v82[3];
  std::string v83;
  std::string v84;
  float v85;
  int v86;
  int v87;
  float v88;
  int v89;
  int v90;
  unsigned int v91;

  v6 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v90 = -1;
  v91 = v6;
  v88 = 2.0;
  *(float *)&v89 = -2.0;
  *(float *)&v86 = -2.0;
  v87 = 1036831949;
  v85 = 2.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v84);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v83);
  memset(v82, 0, sizeof(v82));
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_170;
    kaldi::ReadToken(a2, 0, (uint64_t)v82);
    if ((SHIBYTE(v82[2]) & 0x80000000) == 0)
      break;
    v10 = v82[1];
    if (v82[1] == (void *)10)
    {
      if (*(_QWORD *)v82[0] == 0x6C6C65436D754E3CLL && *((_WORD *)v82[0] + 4) == 15987)
      {
LABEL_86:
        v26 = (int *)&v91;
LABEL_159:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v26);
        goto LABEL_168;
      }
      if (*(_QWORD *)v82[0] == 0x61654D736169423CLL && *((_WORD *)v82[0] + 4) == 15982)
      {
LABEL_145:
        v20 = (float *)&v89;
        goto LABEL_156;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)11)
    {
      if (*(_QWORD *)v82[0] == 0x6E6152736169423CLL && *(_QWORD *)((char *)v82[0] + 3) == 0x3E65676E61527361)
      {
LABEL_121:
        v20 = &v88;
        goto LABEL_156;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)20)
    {
      if (*(_QWORD *)v82[0] == 0x47746567726F463CLL
        && *((_QWORD *)v82[0] + 1) == 0x4D73616942657461
        && *((_DWORD *)v82[0] + 4) == 1047421285)
      {
LABEL_95:
        v20 = (float *)&v86;
LABEL_156:
        kaldi::ReadBasicType<float>(a2, 0, v20);
        goto LABEL_168;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)21)
    {
      if (*(_QWORD *)v82[0] == 0x47746567726F463CLL
        && *((_QWORD *)v82[0] + 1) == 0x5273616942657461
        && *(_QWORD *)((char *)v82[0] + 13) == 0x3E65676E61527361)
      {
LABEL_146:
        v20 = &v85;
        goto LABEL_156;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)13)
    {
      if (*(_QWORD *)v82[0] == 0x74536D617261503CLL && *(_QWORD *)((char *)v82[0] + 5) == 0x3E7665646474536DLL)
      {
LABEL_109:
        v20 = (float *)&v87;
        goto LABEL_156;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)15)
    {
      v19 = *(_QWORD *)v82[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v82[0] + 7) == 0x3E66656F43657461;
      v20 = (float *)(a1 + 464);
      if (v19)
        goto LABEL_156;
      v10 = v82[1];
    }
    if (v10 == (void *)25)
    {
      v23 = *(_QWORD *)v82[0] == 0x7463656A6F72503CLL
         && *((_QWORD *)v82[0] + 1) == 0x6E7261654C6E6F69
         && *((_QWORD *)v82[0] + 2) == 0x66656F4365746152
         && *((_BYTE *)v82[0] + 24) == 62;
      v20 = (float *)(a1 + 468);
      if (v23)
        goto LABEL_156;
      v10 = v82[1];
    }
    if (v10 == (void *)9)
    {
      v24 = *(_QWORD *)v82[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v82[0] + 8) == 62;
      v20 = (float *)(a1 + 472);
      if (v24)
        goto LABEL_156;
      v10 = v82[1];
      if (v82[1] == (void *)9)
      {
        v25 = *(_QWORD *)v82[0] == 0x6461724778614D3CLL && *((_BYTE *)v82[0] + 8) == 62;
        v20 = (float *)(a1 + 152);
        if (v25)
          goto LABEL_156;
        if ((HIBYTE(v82[2]) & 0x80) == 0)
          goto LABEL_155;
      }
    }
    if (v10 != (void *)18)
      goto LABEL_155;
    v7 = (void **)v82[0];
LABEL_148:
    v39 = *v7;
    v40 = v7[1];
    v41 = *((unsigned __int16 *)v7 + 8);
    if (v39 != (void *)0x6E6569646172473CLL || v40 != (void *)0x7079546D726F4E74 || v41 != 15973)
      goto LABEL_155;
    v45 = &v83;
LABEL_167:
    kaldi::ReadToken(a2, 0, (uint64_t)v45);
LABEL_168:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v7 = v82;
  switch(HIBYTE(v82[2]))
  {
    case 9:
      goto LABEL_134;
    case 0xA:
      if (v82[0] == (void *)0x6C6C65436D754E3CLL && LOWORD(v82[1]) == 15987)
        goto LABEL_86;
      if (v82[0] != (void *)0x61654D736169423CLL || LOWORD(v82[1]) != 15982)
        goto LABEL_133;
      goto LABEL_145;
    case 0xB:
      if (v82[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v82 + 3) == (void *)0x3E65676E61527361)
        goto LABEL_121;
      goto LABEL_133;
    case 0xD:
LABEL_104:
      if (v82[0] == (void *)0x74536D617261503CLL && *(void **)((char *)v82 + 5) == (void *)0x3E7665646474536DLL)
        goto LABEL_109;
      goto LABEL_133;
    case 0xF:
LABEL_110:
      v32 = v82[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v82 + 7) == (void *)0x3E66656F43657461;
      v20 = (float *)(a1 + 464);
      if (v32)
        goto LABEL_156;
      goto LABEL_133;
    case 0x12:
      goto LABEL_148;
    case 0x14:
      if (v82[0] != (void *)0x47746567726F463CLL
        || v82[1] != (void *)0x4D73616942657461
        || LODWORD(v82[2]) != 1047421285)
      {
        v7 = v82;
        switch(HIBYTE(v82[2]))
        {
          case 9:
            goto LABEL_134;
          case 0xD:
            goto LABEL_104;
          case 0xF:
            goto LABEL_110;
          case 0x12:
            goto LABEL_148;
          default:
            goto LABEL_155;
        }
      }
      goto LABEL_95;
    case 0x15:
      if (v82[0] != (void *)0x47746567726F463CLL
        || v82[1] != (void *)0x5273616942657461
        || *(void **)((char *)&v82[1] + 5) != (void *)0x3E65676E61527361)
      {
        v7 = v82;
        switch(HIBYTE(v82[2]))
        {
          case 9:
            goto LABEL_134;
          case 0xD:
            goto LABEL_104;
          case 0xF:
            goto LABEL_110;
          case 0x12:
            goto LABEL_148;
          default:
            goto LABEL_155;
        }
      }
      goto LABEL_146;
    case 0x19:
      v36 = v82[0] == (void *)0x7463656A6F72503CLL
         && v82[1] == (void *)0x6E7261654C6E6F69
         && v82[2] == (void *)0x66656F4365746152
         && v83.__r_.__value_.__s.__data_[0] == 62;
      v20 = (float *)(a1 + 468);
      if (v36)
        goto LABEL_156;
      if (HIBYTE(v82[2]) == 18)
      {
        v7 = v82;
        goto LABEL_148;
      }
LABEL_133:
      if (HIBYTE(v82[2]) == 9)
      {
LABEL_134:
        v37 = v82[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v82[1]) == 62;
        v20 = (float *)(a1 + 472);
        if (v37)
          goto LABEL_156;
        if (HIBYTE(v82[2]) == 9)
        {
          v38 = v82[0] == (void *)0x6461724778614D3CLL && LOBYTE(v82[1]) == 62;
          v20 = (float *)(a1 + 152);
          if (v38)
            goto LABEL_156;
        }
      }
LABEL_155:
      v44 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<MaxCell>");
      v20 = (float *)(a1 + 476);
      if (v44)
        goto LABEL_156;
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<RandomSeed>"))
      {
        v26 = &v90;
        goto LABEL_159;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<NoPeep>"))
      {
        *(_BYTE *)(a1 + 208) = 0;
        goto LABEL_168;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<OutputCellValues>"))
      {
        *(_BYTE *)(a1 + 209) = 1;
        goto LABEL_168;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<InitTransformType>"))
      {
        v45 = &v84;
        goto LABEL_167;
      }
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "</Component>"))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v81);
        v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Invalid token ", 14);
        if (SHIBYTE(v82[2]) >= 0)
          v69 = v82;
        else
          v69 = (void **)v82[0];
        if (SHIBYTE(v82[2]) >= 0)
          v70 = HIBYTE(v82[2]);
        else
          v70 = (uint64_t)v82[1];
        v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)". Allowed tokens: ", 18);
        v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v81);
      }
LABEL_170:
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateParams((uint64_t *)a1, v91);
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v84);
      *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v83);
      if (v90 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v90);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v77, a3);
      v47 = *(float *)&v87;
      v48 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
      kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(a3, (kaldi::GaussRandomNumber *)v77, inited, v48, v47);
      v49 = *(float *)&v87;
      v50 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
      kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(a3, (kaldi::GaussRandomNumber *)v77, inited, v50, v49);
      v51 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16);
      v75 = 0;
      v76 = 0;
      v74 = 0;
      kaldi::Vector<float>::Resize((void **)&v74, v51, 0);
      if ((int)v75 >= 1)
      {
        v52 = 0;
        do
        {
          v53 = *(float *)&v89;
          v54 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
          v55 = v53 + (v54 + -0.5) * v88;
          v56 = (int)v75;
          v74[v52++] = v55;
        }
        while (v52 < v56);
      }
      if ((int)v91 >= 1)
      {
        v57 = v91;
        v58 = &v74[v91];
        do
        {
          v59 = *(float *)&v86;
          v60 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
          v61 = v59 + (v60 + -0.5) * v85;
          *v58++ = v61;
          --v57;
        }
        while (v57);
      }
      if (!*(_QWORD *)(a1 + 200))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v81);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"bias_ thought to be initialized here", 36);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v81);
      }
      v62 = operator new();
      kaldi::CuVector<float>::CuVector(v62, &v74, 0);
      v63 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v62;
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
      if (*(_BYTE *)(a1 + 208))
      {
        v64 = *(float *)&v87;
        v65 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(a3, (kaldi::GaussRandomNumber *)v77, inited, v65, v64);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v66 = *(float *)&v87;
        v67 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
        kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(a3, (kaldi::GaussRandomNumber *)v77, inited, v67, v66);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
      kaldi::Vector<float>::Destroy((uint64_t)&v74);
      if (__p)
      {
        v80 = __p;
        operator delete(__p);
      }
      v81[0] = (void **)&v78;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v81);
      if (SHIBYTE(v82[2]) < 0)
        operator delete(v82[0]);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_155;
  }
}

void sub_1ADA5F3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)va1);
  if (*(char *)(v5 - 185) < 0)
    operator delete(*(void **)(v5 - 208));
  if (*(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  if (*(char *)(v5 - 137) < 0)
    operator delete(*(void **)(v5 - 160));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateParams(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int32x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int32x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x2_t *v18;
  uint64_t v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *__p[2];
  unsigned __int8 v26;
  _QWORD v27[35];

  *((_DWORD *)a1 + 44) = a2;
  v3 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  if (*(_DWORD *)(v3 + 12) > a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"# LSTM cells (", 14);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)") should not be less than output dim (", 38);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, ").");
    goto LABEL_37;
  }
  if (a1[23])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "input_weights_ thought to be un-initialized here");
    goto LABEL_37;
  }
  v4 = (4 * a2);
  v5 = (int32x2_t *)operator new();
  kaldi::CuMatrix<float>::CuMatrix(v5, v4, *(unsigned int *)(v3 + 8), 0, 0, 0);
  v6 = a1[23];
  a1[23] = (uint64_t)v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if (a1[24])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "recurrent_weights_ thought to be un-initialized here");
    goto LABEL_37;
  }
  v7 = (4 * *((_DWORD *)a1 + 44));
  v8 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v9 = (int32x2_t *)operator new();
  kaldi::CuMatrix<float>::CuMatrix(v9, v7, *(unsigned int *)(v8 + 12), 0, 0, 0);
  v10 = a1[24];
  a1[24] = (uint64_t)v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  if (a1[25])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "bias_ thought to be un-initialized here");
    goto LABEL_37;
  }
  v11 = (4 * *((_DWORD *)a1 + 44));
  v12 = (_QWORD *)operator new();
  v12[2] = 0;
  v12[3] = 0;
  *v12 = &unk_1E5D341C8;
  v12[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v12, v11, 0);
  v13 = a1[25];
  a1[25] = (uint64_t)v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  if (*((_BYTE *)a1 + 208))
  {
    if (a1[27])
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "peephole_weights_ thought to be un-initialized here");
      goto LABEL_37;
    }
    v14 = (int32x2_t *)operator new();
    kaldi::CuMatrix<float>::CuMatrix(v14, 3, *((unsigned int *)a1 + 44), 0, 0, 0);
    v15 = a1[27];
    a1[27] = (uint64_t)v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  }
  v16 = *a1;
  if (*((_DWORD *)a1 + 44) == *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 12))
  {
    *((_BYTE *)a1 + 224) = 0;
    goto LABEL_20;
  }
  *((_BYTE *)a1 + 224) = 1;
  if (a1[29])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "projection_weights_ thought to be un-initialized here");
LABEL_37:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  v17 = (uint64_t)a1 + *(_QWORD *)(v16 - 24);
  v18 = (int32x2_t *)operator new();
  kaldi::CuMatrix<float>::CuMatrix(v18, *(unsigned int *)(v17 + 12), *((unsigned int *)a1 + 44), 0, 0, 0);
  v19 = a1[29];
  a1[29] = (uint64_t)v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
LABEL_20:
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v27, 2);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Allocated memory for the parameters: ", 37);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 264))(__p, a1);
    if ((v26 & 0x80u) == 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if ((v26 & 0x80u) == 0)
      v22 = v26;
    else
      v22 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    if ((char)v26 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v27);
  }
}

void sub_1ADA5F8B0()
{
  JUMPOUT(0x1ADA5F8D8);
}

void sub_1ADA5F8C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, uint64_t a4, float a5)
{
  uint64_t v10;
  uint64_t i;
  float v12;
  float v13;
  int v15[4];
  int v16;

  kaldi::Matrix<float>::Matrix((uint64_t)v15, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 0, 0);
  v10 = 0;
LABEL_2:
  if (v10 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v15))
  {
    for (i = 0; ; ++i)
    {
      if (i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v15))
      {
        ++v10;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0);
          v12 = v13 * a5;
        }
        else
        {
          if (a3 != 1)
            continue;
          v12 = (kaldi::UniformRandomNumber::RandUniform(a1, 0) + -0.5) * (float)(a5 + a5);
        }
      }
      else if (v10 == i)
      {
        v12 = 1.0;
      }
      else
      {
        v12 = 0.0;
      }
      *(float *)(*(_QWORD *)v15 + 4 * (int)v10 * v16 + 4 * i) = v12;
    }
  }
  kaldi::CuMatrixBase<float>::CopyFromMat(a4, v15, 111);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v15);
}

void sub_1ADA5FA28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitData(_QWORD *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitData((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2, a3);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  float *v11;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v19;
  BOOL v22;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  __int128 *v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int32x2_t *v40;
  uint64_t v41;
  void (***v42)(_QWORD, uint64_t *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  int32x2_t *v45;
  uint64_t v46;
  void (***v47)(_QWORD, uint64_t *, uint64_t, uint64_t);
  int32x2_t *v48;
  uint64_t v49;
  void (***v50)(_QWORD, uint64_t *, uint64_t, uint64_t);
  _QWORD *v51;
  uint64_t v52;
  void (***v53)(_QWORD, uint64_t *, uint64_t);
  uint64_t v54;
  int32x2_t *v55;
  uint64_t v56;
  void (***v57)(_QWORD, uint64_t *, uint64_t, uint64_t);
  uint64_t v58;
  _QWORD *v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *__p[2];
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char v70;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v68 = 0uLL;
    v69 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v68);
    if ((SHIBYTE(v69) & 0x80000000) == 0)
    {
      switch(HIBYTE(v69))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((_QWORD)v68 != 0x6C6C65436D754E3CLL || WORD4(v68) != 15987)
            goto LABEL_156;
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_156;
        case 0xF:
          v24 = (_QWORD)v68 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v68 + 7) == 0x3E66656F43657461;
          v11 = (float *)(a1 + 464);
          if (v24)
            goto LABEL_127;
          if (HIBYTE(v69) != 8)
            goto LABEL_84;
          goto LABEL_97;
        case 0x12:
          if ((_QWORD)v68 == 0x4374757074754F3CLL
            && *((_QWORD *)&v68 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v69 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v69) == 9)
            goto LABEL_119;
          if (HIBYTE(v69) != 18)
            goto LABEL_156;
          v22 = (_QWORD)v68 == 0x6E6569646172473CLL && *((_QWORD *)&v68 + 1) == 0x7079546D726F4E74;
          if (!v22 || (unsigned __int16)v69 != 15973)
            goto LABEL_156;
          goto LABEL_133;
        default:
          if (HIBYTE(v69) != 25)
            goto LABEL_156;
          v19 = (_QWORD)v68 == 0x7463656A6F72503CLL
             && *((_QWORD *)&v68 + 1) == 0x6E7261654C6E6F69
             && v69 == 0x66656F4365746152
             && v70 == 62;
          v11 = (float *)(a1 + 468);
          if (v19)
            goto LABEL_127;
LABEL_84:
          if (HIBYTE(v69) != 9)
            goto LABEL_156;
LABEL_85:
          v25 = (_QWORD)v68 == 0x6D726F4E78614D3CLL && BYTE8(v68) == 62;
          v11 = (float *)(a1 + 472);
          if (v25)
            goto LABEL_127;
          if (HIBYTE(v69) == 8)
            goto LABEL_97;
          if (HIBYTE(v69) != 9)
            goto LABEL_156;
          v26 = (_QWORD)v68 == 0x6C6C654378614D3CLL && BYTE8(v68) == 62;
          v11 = (float *)(a1 + 476);
          if (!v26)
            goto LABEL_119;
          goto LABEL_127;
      }
    }
    v8 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1) == 10
      && (*(_QWORD *)v68 == 0x6C6C65436D754E3CLL ? (v9 = *(unsigned __int16 *)(v68 + 8) == 15987) : (v9 = 0), v9))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176);
    }
    else
    {
      if (*((_QWORD *)&v68 + 1) == 15)
      {
        v10 = *(_QWORD *)v68 == 0x61526E7261654C3CLL && *(_QWORD *)(v68 + 7) == 0x3E66656F43657461;
        v11 = (float *)(a1 + 464);
        if (v10)
          goto LABEL_127;
        v8 = *((_QWORD *)&v68 + 1);
      }
      if (v8 == 25)
      {
        v14 = *(_QWORD *)v68 == 0x7463656A6F72503CLL
           && *(_QWORD *)(v68 + 8) == 0x6E7261654C6E6F69
           && *(_QWORD *)(v68 + 16) == 0x66656F4365746152
           && *(_BYTE *)(v68 + 24) == 62;
        v11 = (float *)(a1 + 468);
        if (v14)
          goto LABEL_127;
        v8 = *((_QWORD *)&v68 + 1);
      }
      if (v8 != 9)
        goto LABEL_47;
      v15 = *(_QWORD *)v68 == 0x6D726F4E78614D3CLL && *(_BYTE *)(v68 + 8) == 62;
      v11 = (float *)(a1 + 472);
      if (v15)
        goto LABEL_127;
      v8 = *((_QWORD *)&v68 + 1);
      if (*((_QWORD *)&v68 + 1) != 9)
        goto LABEL_47;
      v16 = *(_QWORD *)v68 == 0x6C6C654378614D3CLL && *(_BYTE *)(v68 + 8) == 62;
      v11 = (float *)(a1 + 476);
      if (v16)
        goto LABEL_127;
      if ((v69 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v69) == 9)
          goto LABEL_119;
        if (HIBYTE(v69) != 8)
          goto LABEL_156;
LABEL_97:
        if ((_QWORD)v68 != 0x3E706565506F4E3CLL)
        {
          if ((v69 & 0x8000000000000000) == 0)
            goto LABEL_156;
LABEL_100:
          v8 = *((_QWORD *)&v68 + 1);
          if (v8 != 18)
            goto LABEL_120;
LABEL_101:
          if (*(_QWORD *)v68 == 0x4374757074754F3CLL
            && *(_QWORD *)(v68 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v68 + 16) == 15987)
          {
LABEL_132:
            *(_BYTE *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          v8 = *((_QWORD *)&v68 + 1);
          if (*((_QWORD *)&v68 + 1) != 18)
            goto LABEL_120;
          if (*(_QWORD *)v68 == 0x6E6569646172473CLL
            && *(_QWORD *)(v68 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v68 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            v67 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v67) < 0)
              operator delete(__p[0]);
            goto LABEL_128;
          }
          if ((v69 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v69) != 9)
              goto LABEL_156;
LABEL_119:
            v31 = &v68;
          }
          else
          {
LABEL_120:
            if (v8 != 9)
              goto LABEL_156;
            v31 = (__int128 *)v68;
          }
          v32 = *(_QWORD *)v31;
          v33 = *((unsigned __int8 *)v31 + 8);
          v34 = v32 == 0x6461724778614D3CLL && v33 == 62;
          v11 = (float *)(a1 + 152);
          if (!v34)
          {
LABEL_156:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v69 >= 0)
              v61 = &v68;
            else
              v61 = (__int128 *)v68;
            if (v69 >= 0)
              v62 = HIBYTE(v69);
            else
              v62 = *((_QWORD *)&v68 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v11);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v8 != 8)
          goto LABEL_101;
        if (*(_QWORD *)v68 != 0x3E706565506F4E3CLL)
          goto LABEL_100;
      }
      *(_BYTE *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v69) < 0)
      operator delete((void *)v68);
  }
  v35 = *(_DWORD *)(a1 + 176);
  v36 = *(_QWORD *)a1;
  v37 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  if (v35 < v37)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
    v63 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)") should not be less than output dim (", 38);
    v64 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v64, ").");
    goto LABEL_169;
  }
  *(_BYTE *)(a1 + 224) = v35 > v37;
  if (*(_QWORD *)(a1 + 184))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    goto LABEL_169;
  }
  v38 = (4 * v35);
  v39 = a1 + *(_QWORD *)(v36 - 24);
  v40 = (int32x2_t *)operator new();
  kaldi::CuMatrix<float>::CuMatrix(v40, v38, *(unsigned int *)(v39 + 8), 0, 0, 0);
  v41 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v40;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
  v42 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t))kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  (**v42)(v42, a2, a3, a4);
  if (*(_QWORD *)(a1 + 192))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "recurrent_weights_ thougth to be un-initialized here");
    goto LABEL_169;
  }
  v43 = (4 * *(_DWORD *)(a1 + 176));
  v44 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v45 = (int32x2_t *)operator new();
  kaldi::CuMatrix<float>::CuMatrix(v45, v43, *(unsigned int *)(v44 + 12), 0, 0, 0);
  v46 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v45;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
  v47 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t))kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  (**v47)(v47, a2, a3, a4);
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_QWORD *)(a1 + 216))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "peephole_weights_ thougth to be un-initialized here");
      goto LABEL_169;
    }
    v48 = (int32x2_t *)operator new();
    kaldi::CuMatrix<float>::CuMatrix(v48, 3, *(unsigned int *)(a1 + 176), 0, 0, 0);
    v49 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v48;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
    v50 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t))kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    (**v50)(v50, a2, a3, a4);
  }
  if (*(_QWORD *)(a1 + 200))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "bias_ thougth to be un-initialized here");
    goto LABEL_169;
  }
  v51 = (_QWORD *)operator new();
  v51[2] = 0;
  v51[3] = 0;
  *v51 = &unk_1E5D341C8;
  v51[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v51, 1, 0);
  v52 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v51;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
  v53 = (void (***)(_QWORD, uint64_t *, uint64_t))kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  (**v53)(v53, a2, a3);
  if (*(_BYTE *)(a1 + 224))
  {
    if (!*(_QWORD *)(a1 + 232))
    {
      v54 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v55 = (int32x2_t *)operator new();
      kaldi::CuMatrix<float>::CuMatrix(v55, *(unsigned int *)(v54 + 12), *(unsigned int *)(a1 + 176), 0, 0, 0);
      v56 = *(_QWORD *)(a1 + 232);
      *(_QWORD *)(a1 + 232) = v55;
      if (v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
      v57 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t))kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      (**v57)(v57, a2, a3, a4);
      goto LABEL_155;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "projection_weights_ thougth to be un-initialized here");
LABEL_169:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
LABEL_155:
  v58 = *(_QWORD *)a1;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16) = 0;
  return (*(uint64_t (**)(uint64_t))(v58 + 128))(a1);
}

void sub_1ADA60640()
{
  JUMPOUT(0x1ADA60648);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  std::string __p;

  kaldi::WriteToken(a2, a3, "<NumCells>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<ProjectionLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxCell>");
  result = kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  if (!*(_BYTE *)(a1 + 208))
    result = kaldi::WriteToken(a2, a3, "<NoPeep>");
  if (*(_BYTE *)(a1 + 209))
    return kaldi::WriteToken(a2, a3, "<OutputCellValues>");
  return result;
}

void sub_1ADA607F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteData(_BYTE *a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 128))(a1);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 192))(a1, a2, a3);
  v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  kaldi::CuMatrixBase<float>::Write(v8, a2, a3, a4);
  v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  kaldi::CuMatrixBase<float>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3);
  if (a1[224])
  {
    v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v12, a2, a3, a4);
  }
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteData((_BYTE *)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20);
  v3 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 16) * v2;
  v4 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20);
  v5 = v3 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 16) * v4;
  v6 = (v5 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16));
  if (*(_BYTE *)(a1 + 208))
  {
    v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20);
    v6 = (v6
                      + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 16)
                      * v7);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v8 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20);
    return (v6
                        + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 16)
                        * v8);
  }
  return v6;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams((uint64_t)a1 + *(_QWORD *)(*a1 - 192));
}

const void **kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams(_BYTE *a1, void **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  const void **v17;
  const void **result;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  v6 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v5;
  v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  v8 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16) * v7;
  v24 = 0;
  v25 = 0;
  v23 = (char *)*a2;
  LODWORD(v24) = v6;
  v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v23, v9);
  v24 = 0;
  v25 = 0;
  v10 = v8 + v6;
  v23 = (char *)*a2 + 4 * v6;
  LODWORD(v24) = v8;
  v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v23, v11);
  if (a1[208])
  {
    v12 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    v13 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v12;
    v24 = 0;
    v25 = 0;
    v14 = v13 + v10;
    v23 = (char *)*a2 + 4 * v10;
    LODWORD(v24) = v13;
    v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v23, v15);
    v10 = v14;
  }
  v16 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  v24 = 0;
  v25 = 0;
  v23 = (char *)*a2 + 4 * v10;
  LODWORD(v24) = v16;
  v17 = (const void **)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  result = kaldi::CuVectorBase<float>::CopyToVec<float>(v17, (uint64_t)&v23);
  if (a1[224])
  {
    v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v10;
    v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
    v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16)
        * v20;
    v24 = 0;
    v25 = 0;
    v23 = (char *)*a2 + 4 * v19;
    LODWORD(v24) = v21;
    v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
    return (const void **)kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v23, v22);
  }
  return result;
}

const void **`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams(_QWORD *a1, void **a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams((_BYTE *)a1 + *(_QWORD *)(*a1 - 200), a2);
}

void **kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams(_BYTE *a1, char **a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  void *v14;
  int v15;
  void **result;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  v4 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  v5 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v4;
  v6 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16) * v6;
  v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  v22 = 0;
  v23 = 0;
  v21 = *a2;
  LODWORD(v22) = v5;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v8, &v21);
  v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  v22 = 0;
  v23 = 0;
  v10 = v7 + v5;
  v21 = &(*a2)[4 * v5];
  LODWORD(v22) = v7;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v9, &v21);
  if (a1[208])
  {
    v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    v12 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v11;
    v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    v22 = 0;
    v23 = 0;
    v21 = &(*a2)[4 * v10];
    LODWORD(v22) = v12;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v13, &v21);
    v10 += v12;
  }
  v14 = (void *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  v15 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  v22 = 0;
  v23 = 0;
  v21 = &(*a2)[4 * v10];
  LODWORD(v22) = v15;
  result = (void **)kaldi::CuVectorBase<float>::CopyFromVec<float>(v14, (uint64_t)&v21);
  if (a1[224])
  {
    v17 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v10;
    v18 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
    v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16)
        * v18;
    v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
    v22 = 0;
    v23 = 0;
    v21 = &(*a2)[4 * v17];
    LODWORD(v22) = v19;
    return kaldi::CuMatrixBase<float>::CopyRowsFromVec(v20, &v21);
  }
  return result;
}

void **`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams(_QWORD *a1, char **a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams((_BYTE *)a1 + *(_QWORD *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  v3 = kaldi::CuMatrixBase<float>::Sum(v2);
  v4 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  v5 = v3 + kaldi::CuMatrixBase<float>::Sum(v4);
  if (*(_BYTE *)(a1 + 208))
  {
    v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    v5 = v5 + kaldi::CuMatrixBase<float>::Sum(v6);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v7 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    v5 = v5 + kaldi::CuMatrixBase<float>::Sum(v7);
  }
  v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  return v5 + kaldi::CuVectorBase<float>::Sum(v8);
}

float `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams((uint64_t)a1 + *(_QWORD *)(*a1 - 224));
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[4];
  int32x2_t v20[6];

  v4 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20);
  v5 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuMatrix<float>::CuMatrix(v20, v4, *(unsigned int *)(v5 + 16), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
  v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMat(v6, (uint64_t)v20, 111, a2, 1.0);
  v7 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20);
  v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuMatrix<float>::Resize(v20, v7, *(unsigned int *)(v8 + 16), 1, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
  v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuMatrixBase<float>::AddMat(v9, (uint64_t)v20, 111, a2, 1.0);
  if (*(_BYTE *)(a1 + 208))
  {
    v10 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20);
    v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::CuMatrix<float>::Resize(v20, v10, *(unsigned int *)(v11 + 16), 1, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v12, (uint64_t)v20, 111, a2, 1.0);
  }
  v13 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16);
  v19[0] = &unk_1E5D341C8;
  memset(&v19[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v19, v13, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v19);
  v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuVectorBase<float>::AddVec(v14, (uint64_t)v19, a2, 1.0);
  if (*(_BYTE *)(a1 + 224))
  {
    v15 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20);
    v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuMatrix<float>::Resize(v20, v15, *(unsigned int *)(v16 + 16), 1, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v17, (uint64_t)v20, 111, a2, 1.0);
  }
  v19[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v19);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v20);
}

void sub_1ADA61190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams(_QWORD *a1, float a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams((uint64_t)a1 + *(_QWORD *)(*a1 - 232), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient(_BYTE *a1, uint64_t a2, uint64_t a3, void **a4)
{
  const void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  const void **v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  v8 = (const void *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 136))(a1);
  if (v8)
  else
    v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 336))(v9, a2, a3, 0, 0);
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize(a4, v10, 0);
  v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  v12 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v11;
  v13 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  v14 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16);
  v34 = 0;
  v35 = 0;
  v33 = *a4;
  LODWORD(v34) = v12;
  v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v30, v15, 111);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v33, (uint64_t)&v30);
  v16 = v14 * v13;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v30);
  v31 = 0;
  v32 = 0;
  v17 = v16 + v12;
  v30 = (uint64_t)*a4 + 4 * v12;
  LODWORD(v31) = v16;
  v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v30, v18);
  if (a1[208])
  {
    v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v19;
    v31 = 0;
    v32 = 0;
    v21 = v20 + v17;
    v30 = (uint64_t)*a4 + 4 * v17;
    LODWORD(v31) = v20;
    v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v30, v22);
    v17 = v21;
  }
  v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  v31 = 0;
  v32 = 0;
  v30 = (uint64_t)*a4 + 4 * v17;
  LODWORD(v31) = v23;
  v24 = (const void **)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v24, (uint64_t)&v30);
  if (a1[224])
  {
    v25 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v17;
    v26 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
    v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16)
        * v26;
    v31 = 0;
    v32 = 0;
    v30 = (uint64_t)*a4 + 4 * v25;
    LODWORD(v31) = v27;
    v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v30, v28);
  }
  return (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 8))(v9);
}

void sub_1ADA61420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient((_BYTE *)a1 + *(_QWORD *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(_QWORD *a1, int a2)
{
  float *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;

  v2 = (float *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if (!*((_BYTE *)v2 + 84))
    return v2[14];
  v3 = a1[63];
  v4 = a1[64] - v3;
  if (!v4)
    return NAN;
  v5 = v4 >> 2;
  if ((int)v5 <= a2)
    return NAN;
  v6 = v5 - 1;
  if (a2 >= 0)
    v6 = a2;
  return *(float *)(v3 + 4 * v6);
}

float `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(_QWORD *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  unsigned __int8 v37;
  void *v38[2];
  unsigned __int8 v39;
  void *v40[2];
  unsigned __int8 v41;
  void *v42[2];
  unsigned __int8 v43;
  _QWORD v44[11];
  char v45;
  uint64_t v46;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v44);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 192))(a1, v44, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Input weights:", 16);
  v3 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<float>(v3);
  if ((v43 & 0x80u) == 0)
    v4 = v42;
  else
    v4 = (void **)v42[0];
  if ((v43 & 0x80u) == 0)
    v5 = v43;
  else
    v5 = (uint64_t)v42[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<float>(v8);
  if ((v41 & 0x80u) == 0)
    v9 = v40;
  else
    v9 = (void **)v40[0];
  if ((v41 & 0x80u) == 0)
    v10 = v41;
  else
    v10 = (uint64_t)v40[1];
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13);
  if ((v39 & 0x80u) == 0)
    v14 = v38;
  else
    v14 = (void **)v38[0];
  if ((v39 & 0x80u) == 0)
    v15 = v39;
  else
    v15 = (uint64_t)v38[1];
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n Forget gate bias:", 19);
  v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  v19 = *(int *)(a1 + 176);
  v34 = 0;
  v20 = *(_QWORD *)(v18 + 8) + 4 * v19;
  v32 = &unk_1E5D29D70;
  v33 = v20;
  LODWORD(v34) = v19;
  v35 = *(_QWORD *)(v18 + 24);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)&v32);
  if ((v37 & 0x80u) == 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  if ((v37 & 0x80u) == 0)
    v22 = v37;
  else
    v22 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v21, v22);
  if ((char)v37 < 0)
    operator delete(__p[0]);
  if ((char)v39 < 0)
    operator delete(v38[0]);
  if ((char)v41 < 0)
    operator delete(v40[0]);
  if ((char)v43 < 0)
    operator delete(v42[0]);
  if (*(_BYTE *)(a1 + 208))
  {
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Peephole weights:", 19);
    v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v24);
    v25 = v34 >= 0 ? &v32 : (void **)v32;
    v26 = v34 >= 0 ? HIBYTE(v34) : v33;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Projection weights:", 21);
    v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v28);
    v29 = v34 >= 0 ? &v32 : (void **)v32;
    v30 = v34 >= 0 ? HIBYTE(v34) : v33;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
  }
  std::stringbuf::str();
  v44[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v44[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v45 < 0)
    operator delete((void *)v44[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v46);
}

void sub_1ADA61AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info((uint64_t)a1 + *(_QWORD *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  void **v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  void **v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  uint64_t v41;
  void **v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  uint64_t v48;
  std::string *v49;
  std::string::size_type size;
  std::string *v51;
  __int128 v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  uint64_t v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  void *__p[2];
  unsigned __int8 v69;
  void *v70[2];
  unsigned __int8 v71;
  void *v72[2];
  unsigned __int8 v73;
  void *v74[2];
  unsigned __int8 v75;
  void *v76[2];
  unsigned __int8 v77;
  void *v78[2];
  unsigned __int8 v79;
  void *v80[2];
  unsigned __int8 v81;
  void *v82[2];
  unsigned __int8 v83;
  void *v84[2];
  unsigned __int8 v85;
  void *v86[2];
  unsigned __int8 v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  __int128 v98;
  int64_t v99;
  int v100;
  std::string v101;

  if (*(_BYTE *)(a1 + 528))
  {
    memset(&v101, 0, sizeof(v101));
    v100 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v88, "\n For batch ");
        kaldi::quasar::to_string<int>();
        if ((v87 & 0x80u) == 0)
          v3 = v86;
        else
          v3 = (void **)v86[0];
        if ((v87 & 0x80u) == 0)
          v4 = v87;
        else
          v4 = (std::string::size_type)v86[1];
        v5 = std::string::append(&v88, (const std::string::value_type *)v3, v4);
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v84, ": ");
        if ((v85 & 0x80u) == 0)
          v7 = v84;
        else
          v7 = (void **)v84[0];
        if ((v85 & 0x80u) == 0)
          v8 = v85;
        else
          v8 = (std::string::size_type)v84[1];
        v9 = std::string::append(&v89, (const std::string::value_type *)v7, v8);
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Number of cells : ");
        if ((v83 & 0x80u) == 0)
          v11 = v82;
        else
          v11 = (void **)v82[0];
        if ((v83 & 0x80u) == 0)
          v12 = v83;
        else
          v12 = (std::string::size_type)v82[1];
        v13 = std::string::append(&v90, (const std::string::value_type *)v11, v12);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::quasar::to_string<int>();
        if ((v81 & 0x80u) == 0)
          v15 = v80;
        else
          v15 = (void **)v80[0];
        if ((v81 & 0x80u) == 0)
          v16 = v81;
        else
          v16 = (std::string::size_type)v80[1];
        v17 = std::string::append(&v91, (const std::string::value_type *)v15, v16);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Input weights gradient: ");
        if ((v79 & 0x80u) == 0)
          v19 = v78;
        else
          v19 = (void **)v78[0];
        if ((v79 & 0x80u) == 0)
          v20 = v79;
        else
          v20 = (std::string::size_type)v78[1];
        v21 = std::string::append(&v92, (const std::string::value_type *)v19, v20);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v77 & 0x80u) == 0)
          v24 = v76;
        else
          v24 = (void **)v76[0];
        if ((v77 & 0x80u) == 0)
          v25 = v77;
        else
          v25 = (std::string::size_type)v76[1];
        v26 = std::string::append(&v93, (const std::string::value_type *)v24, v25);
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Recurrent weights gradient: ");
        if ((v75 & 0x80u) == 0)
          v28 = v74;
        else
          v28 = (void **)v74[0];
        if ((v75 & 0x80u) == 0)
          v29 = v75;
        else
          v29 = (std::string::size_type)v74[1];
        v30 = std::string::append(&v94, (const std::string::value_type *)v28, v29);
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v73 & 0x80u) == 0)
          v33 = v72;
        else
          v33 = (void **)v72[0];
        if ((v73 & 0x80u) == 0)
          v34 = v73;
        else
          v34 = (std::string::size_type)v72[1];
        v35 = std::string::append(&v95, (const std::string::value_type *)v33, v34);
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v70, "\n  Bias gradient: ");
        if ((v71 & 0x80u) == 0)
          v37 = v70;
        else
          v37 = (void **)v70[0];
        if ((v71 & 0x80u) == 0)
          v38 = v71;
        else
          v38 = (std::string::size_type)v70[1];
        v39 = std::string::append(&v96, (const std::string::value_type *)v37, v38);
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        v41 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v41);
        if ((v69 & 0x80u) == 0)
          v42 = __p;
        else
          v42 = (void **)__p[0];
        if ((v69 & 0x80u) == 0)
          v43 = v69;
        else
          v43 = (std::string::size_type)__p[1];
        v44 = std::string::append(&v97, (const std::string::value_type *)v42, v43);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v99 = v44->__r_.__value_.__r.__words[2];
        v98 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (v99 >= 0)
          v46 = (const std::string::value_type *)&v98;
        else
          v46 = (const std::string::value_type *)v98;
        if (v99 >= 0)
          v47 = HIBYTE(v99);
        else
          v47 = *((_QWORD *)&v98 + 1);
        std::string::append(&v101, v46, v47);
        if (SHIBYTE(v99) < 0)
          operator delete((void *)v98);
        if ((char)v69 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if ((char)v71 < 0)
          operator delete(v70[0]);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((char)v73 < 0)
          operator delete(v72[0]);
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        if ((char)v75 < 0)
          operator delete(v74[0]);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        if ((char)v77 < 0)
          operator delete(v76[0]);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        if ((char)v79 < 0)
          operator delete(v78[0]);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if ((char)v81 < 0)
          operator delete(v80[0]);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        if ((char)v83 < 0)
          operator delete(v82[0]);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        if ((char)v85 < 0)
          operator delete(v84[0]);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if ((char)v87 < 0)
          operator delete(v86[0]);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (*(_BYTE *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v97, "\n  Peephole weights gradient: ");
          v48 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v100);
          kaldi::nnet1::MomentStatistics<float>(v48);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v49 = &v96;
          else
            v49 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            size = v96.__r_.__value_.__l.__size_;
          v51 = std::string::append(&v97, (const std::string::value_type *)v49, size);
          v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v99 = v51->__r_.__value_.__r.__words[2];
          v98 = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          if (v99 >= 0)
            v53 = (const std::string::value_type *)&v98;
          else
            v53 = (const std::string::value_type *)v98;
          if (v99 >= 0)
            v54 = HIBYTE(v99);
          else
            v54 = *((_QWORD *)&v98 + 1);
          std::string::append(&v101, v53, v54);
          if (SHIBYTE(v99) < 0)
            operator delete((void *)v98);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
        }
        if (*(_BYTE *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v97, "\n  Projection weights gradient: ");
          v55 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v100);
          kaldi::nnet1::MomentStatistics<float>(v55);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v56 = &v96;
          else
            v56 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v57 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            v57 = v96.__r_.__value_.__l.__size_;
          v58 = std::string::append(&v97, (const std::string::value_type *)v56, v57);
          v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v99 = v58->__r_.__value_.__r.__words[2];
          v98 = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          if (v99 >= 0)
            v60 = (const std::string::value_type *)&v98;
          else
            v60 = (const std::string::value_type *)v98;
          if (v99 >= 0)
            v61 = HIBYTE(v99);
          else
            v61 = *((_QWORD *)&v98 + 1);
          std::string::append(&v101, v60, v61);
          if (SHIBYTE(v99) < 0)
            operator delete((void *)v98);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
        }
        ++v100;
      }
      while (v100 < *(_DWORD *)(a1 + 80));
    }
    v62 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v98, "\n");
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v101;
    else
      v63 = (std::string *)v101.__r_.__value_.__r.__words[0];
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    else
      v64 = v101.__r_.__value_.__l.__size_;
    v65 = std::string::insert(v62, 0, (const std::string::value_type *)v63, v64);
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v65->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v99) < 0)
      operator delete((void *)v98);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_1ADA622C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoGradient(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoGradient((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  void **v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  void **v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type size;
  std::string *v47;
  __int128 v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  void *__p[2];
  unsigned __int8 v57;
  void *v58[2];
  unsigned __int8 v59;
  void *v60[2];
  unsigned __int8 v61;
  void *v62[2];
  unsigned __int8 v63;
  void *v64[2];
  unsigned __int8 v65;
  void *v66[2];
  unsigned __int8 v67;
  void *v68[2];
  unsigned __int8 v69;
  void *v70[2];
  unsigned __int8 v71;
  void *v72[2];
  unsigned __int8 v73;
  void *v74[2];
  unsigned __int8 v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  __int128 v86;
  int64_t v87;
  int v88;
  std::string v89;

  memset(&v89, 0, sizeof(v89));
  v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v75 & 0x80u) == 0)
        v3 = v74;
      else
        v3 = (void **)v74[0];
      if ((v75 & 0x80u) == 0)
        v4 = v75;
      else
        v4 = (std::string::size_type)v74[1];
      v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0)
        v7 = v72;
      else
        v7 = (void **)v72[0];
      if ((v73 & 0x80u) == 0)
        v8 = v73;
      else
        v8 = (std::string::size_type)v72[1];
      v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0)
        v11 = v70;
      else
        v11 = (void **)v70[0];
      if ((v71 & 0x80u) == 0)
        v12 = v71;
      else
        v12 = (std::string::size_type)v70[1];
      v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0)
        v15 = v68;
      else
        v15 = (void **)v68[0];
      if ((v69 & 0x80u) == 0)
        v16 = v69;
      else
        v16 = (std::string::size_type)v68[1];
      v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0)
        v19 = v66;
      else
        v19 = (void **)v66[0];
      if ((v67 & 0x80u) == 0)
        v20 = v67;
      else
        v20 = (std::string::size_type)v66[1];
      v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0)
        v23 = v64;
      else
        v23 = (void **)v64[0];
      if ((v65 & 0x80u) == 0)
        v24 = v65;
      else
        v24 = (std::string::size_type)v64[1];
      v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0)
        v27 = v62;
      else
        v27 = (void **)v62[0];
      if ((v63 & 0x80u) == 0)
        v28 = v63;
      else
        v28 = (std::string::size_type)v62[1];
      v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0)
        v31 = v60;
      else
        v31 = (void **)v60[0];
      if ((v61 & 0x80u) == 0)
        v32 = v61;
      else
        v32 = (std::string::size_type)v60[1];
      v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0)
        v35 = v58;
      else
        v35 = (void **)v58[0];
      if ((v59 & 0x80u) == 0)
        v36 = v59;
      else
        v36 = (std::string::size_type)v58[1];
      v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0)
        v39 = __p;
      else
        v39 = (void **)__p[0];
      if ((v57 & 0x80u) == 0)
        v40 = v57;
      else
        v40 = (std::string::size_type)__p[1];
      v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v87 = v41->__r_.__value_.__r.__words[2];
      v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0)
        v43 = (const std::string::value_type *)&v86;
      else
        v43 = (const std::string::value_type *)v86;
      if (v87 >= 0)
        v44 = HIBYTE(v87);
      else
        v44 = *((_QWORD *)&v86 + 1);
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0)
        operator delete((void *)v86);
      if ((char)v57 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      if ((char)v59 < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      if ((char)v63 < 0)
        operator delete(v62[0]);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if ((char)v65 < 0)
        operator delete(v64[0]);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      if ((char)v67 < 0)
        operator delete(v66[0]);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if ((char)v69 < 0)
        operator delete(v68[0]);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if ((char)v71 < 0)
        operator delete(v70[0]);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if ((char)v73 < 0)
        operator delete(v72[0]);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if ((char)v75 < 0)
        operator delete(v74[0]);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &v84;
        else
          v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        else
          size = v84.__r_.__value_.__l.__size_;
        v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v87 = v47->__r_.__value_.__r.__words[2];
        v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0)
          v49 = (const std::string::value_type *)&v86;
        else
          v49 = (const std::string::value_type *)v86;
        if (v87 >= 0)
          v50 = HIBYTE(v87);
        else
          v50 = *((_QWORD *)&v86 + 1);
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0)
          operator delete((void *)v86);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v89;
  else
    v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  else
    v53 = v89.__r_.__value_.__l.__size_;
  v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0)
    operator delete((void *)v86);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
}

void sub_1ADA62B90(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1ADA62D9C()
{
  JUMPOUT(0x1ADA62CC4);
}

void sub_1ADA62DA4()
{
  JUMPOUT(0x1ADA62CD4);
}

void sub_1ADA62DAC()
{
  JUMPOUT(0x1ADA62CE4);
}

void sub_1ADA62DB4()
{
  JUMPOUT(0x1ADA62CF4);
}

void sub_1ADA62DBC()
{
  JUMPOUT(0x1ADA62D04);
}

void sub_1ADA62DC4()
{
  JUMPOUT(0x1ADA62D14);
}

void sub_1ADA62DCC()
{
  JUMPOUT(0x1ADA62D24);
}

void sub_1ADA62DD4()
{
  JUMPOUT(0x1ADA62D34);
}

void sub_1ADA62DDC()
{
  JUMPOUT(0x1ADA62D44);
}

void sub_1ADA62DE4()
{
  JUMPOUT(0x1ADA62D54);
}

void sub_1ADA62DEC()
{
  JUMPOUT(0x1ADA62D64);
}

void sub_1ADA62DF4()
{
  JUMPOUT(0x1ADA62D74);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoPropagate(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoPropagate((uint64_t)a1 + *(_QWORD *)(*a1 - 96), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type size;
  std::string *v39;
  __int128 v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  void *__p[2];
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  void *v52[2];
  unsigned __int8 v53;
  void *v54[2];
  unsigned __int8 v55;
  void *v56[2];
  unsigned __int8 v57;
  void *v58[2];
  unsigned __int8 v59;
  void *v60[2];
  unsigned __int8 v61;
  void *v62[2];
  unsigned __int8 v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  __int128 v72;
  int64_t v73;
  int v74;
  std::string v75;

  memset(&v75, 0, sizeof(v75));
  v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v63 & 0x80u) == 0)
        v3 = v62;
      else
        v3 = (void **)v62[0];
      if ((v63 & 0x80u) == 0)
        v4 = v63;
      else
        v4 = (std::string::size_type)v62[1];
      v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0)
        v7 = v60;
      else
        v7 = (void **)v60[0];
      if ((v61 & 0x80u) == 0)
        v8 = v61;
      else
        v8 = (std::string::size_type)v60[1];
      v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0)
        v11 = v58;
      else
        v11 = (void **)v58[0];
      if ((v59 & 0x80u) == 0)
        v12 = v59;
      else
        v12 = (std::string::size_type)v58[1];
      v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0)
        v15 = v56;
      else
        v15 = (void **)v56[0];
      if ((v57 & 0x80u) == 0)
        v16 = v57;
      else
        v16 = (std::string::size_type)v56[1];
      v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0)
        v19 = v54;
      else
        v19 = (void **)v54[0];
      if ((v55 & 0x80u) == 0)
        v20 = v55;
      else
        v20 = (std::string::size_type)v54[1];
      v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0)
        v23 = v52;
      else
        v23 = (void **)v52[0];
      if ((v53 & 0x80u) == 0)
        v24 = v53;
      else
        v24 = (std::string::size_type)v52[1];
      v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0)
        v27 = v50;
      else
        v27 = (void **)v50[0];
      if ((v51 & 0x80u) == 0)
        v28 = v51;
      else
        v28 = (std::string::size_type)v50[1];
      v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      if ((v49 & 0x80u) == 0)
        v32 = v49;
      else
        v32 = (std::string::size_type)__p[1];
      v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v73 = v33->__r_.__value_.__r.__words[2];
      v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0)
        v35 = (const std::string::value_type *)&v72;
      else
        v35 = (const std::string::value_type *)v72;
      if (v73 >= 0)
        v36 = HIBYTE(v73);
      else
        v36 = *((_QWORD *)&v72 + 1);
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0)
        operator delete((void *)v72);
      if ((char)v49 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if ((char)v51 < 0)
        operator delete(v50[0]);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if ((char)v53 < 0)
        operator delete(v52[0]);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if ((char)v55 < 0)
        operator delete(v54[0]);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if ((char)v57 < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if ((char)v59 < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if ((char)v63 < 0)
        operator delete(v62[0]);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v70;
        else
          v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        else
          size = v70.__r_.__value_.__l.__size_;
        v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v73 = v39->__r_.__value_.__r.__words[2];
        v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0)
          v41 = (const std::string::value_type *)&v72;
        else
          v41 = (const std::string::value_type *)v72;
        if (v73 >= 0)
          v42 = HIBYTE(v73);
        else
          v42 = *((_QWORD *)&v72 + 1);
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0)
          operator delete((void *)v72);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v75;
  else
    v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  else
    v45 = v75.__r_.__value_.__l.__size_;
  v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0)
    operator delete((void *)v72);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
}

void sub_1ADA63370(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1ADA6353C()
{
  JUMPOUT(0x1ADA634A4);
}

void sub_1ADA63544()
{
  JUMPOUT(0x1ADA634B4);
}

void sub_1ADA6354C()
{
  JUMPOUT(0x1ADA634C4);
}

void sub_1ADA63554()
{
  JUMPOUT(0x1ADA634D4);
}

void sub_1ADA6355C()
{
  JUMPOUT(0x1ADA634E4);
}

void sub_1ADA63564()
{
  JUMPOUT(0x1ADA634F4);
}

void sub_1ADA6356C()
{
  JUMPOUT(0x1ADA63504);
}

void sub_1ADA63574()
{
  JUMPOUT(0x1ADA63514);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoBackPropagate(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoBackPropagate((uint64_t)a1 + *(_QWORD *)(*a1 - 104), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  float v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  __int128 v130;
  __int128 v131;
  void *v132;
  __int128 v133;
  __int128 v134;
  void *v135;
  __int128 v136;
  __int128 v137;
  void *v138;
  __int128 v139;
  __int128 v140;
  void *v141;
  __int128 v142;
  __int128 v143;
  void *v144;
  __int128 v145;
  __int128 v146;
  void *v147;
  __int128 v148;
  __int128 v149;
  void *v150;
  __int128 v151;
  __int128 v152;
  void *v153;
  __int128 v154;
  __int128 v155;
  void *v156;
  __int128 v157;
  __int128 v158;

  v8 = *(unsigned int *)(a2 + 20);
  v9 = *(unsigned int *)(a1 + 96);
  v125 = ((int)v8 / (int)v9);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v156, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v156, (uint64_t)"Running forward propagation for batch size = ", 45);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v156);
  }
  v13 = *(_QWORD *)(a3 + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(a1, a4, v8, v13);
  v14 = *(_QWORD *)(a1 + 104);
  v121 = (int *)a3;
  v122 = a4;
  if (*(_QWORD *)(a1 + 112) == v14 || *(int *)(v14 + 32 * a4 + 16) < 1)
  {
    v123 = 0;
  }
  else
  {
    v15 = (int32x2_t *)(*(_QWORD *)(a1 + 128) + 48 * a4);
    v15[4] = (int32x2_t)v13;
    v123 = 1;
    kaldi::CuMatrix<float>::Resize(v15, v9, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 16), 1, 0);
  }
  v128 = a4;
  v16 = *(_QWORD *)(a1 + 248) + 48 * a4;
  v126 = *(_QWORD *)(a1 + 344) + 48 * a4;
  v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMatMat(v16, a2, CblasNoTrans, v17, CblasTrans, 1.0, 0.0);
  v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuMatrixBase<float>::AddVecToRows(v16, v18, 1.0, 1.0);
  if ((int)v125 >= 1)
  {
    v19 = 0;
    v20 = 0;
    v124 = a1 + 12;
    v21 = -(uint64_t)(int)v9;
    while (1)
    {
      v127 = v21;
      v22 = *(_DWORD *)(v16 + 24);
      v23 = *(_QWORD *)(v16 + 8) + 4 * (int)(v22 * v19);
      v24 = *(_DWORD *)(v16 + 28) - v22 * v19;
      v25 = *(_QWORD *)(v16 + 32);
      DWORD2(v157) = *(_DWORD *)(a1 + 176);
      HIDWORD(v157) = v9;
      *(_QWORD *)&v158 = __PAIR64__(v24, v22);
      *((_QWORD *)&v158 + 1) = v25;
      *(_QWORD *)&v157 = v23;
      v156 = &unk_1E5D29D40;
      v26 = *(_DWORD *)(v16 + 24);
      v27 = *(_QWORD *)(v16 + 8) + 4 * (int)(v26 * v19) + 4 * DWORD2(v157);
      v28 = *(_DWORD *)(v16 + 28) - DWORD2(v157) - v26 * v19;
      v29 = *(_QWORD *)(v16 + 32);
      *((_QWORD *)&v154 + 1) = __PAIR64__(v9, DWORD2(v157));
      *(_QWORD *)&v155 = __PAIR64__(v28, v26);
      *((_QWORD *)&v155 + 1) = v29;
      v153 = &unk_1E5D29D40;
      *(_QWORD *)&v154 = v27;
      v30 = *(_DWORD *)(v16 + 24);
      v31 = *(_QWORD *)(v16 + 8) + 4 * (int)(v30 * v19) + 4 * (3 * DWORD2(v157));
      LODWORD(v27) = *(_DWORD *)(v16 + 28) - v30 * v19 - 3 * DWORD2(v157);
      v32 = *(_QWORD *)(v16 + 32);
      *((_QWORD *)&v151 + 1) = __PAIR64__(v9, DWORD2(v157));
      *(_QWORD *)&v152 = __PAIR64__(v27, v30);
      *((_QWORD *)&v152 + 1) = v32;
      v150 = &unk_1E5D29D40;
      *(_QWORD *)&v151 = v31;
      v33 = *(_QWORD *)(a1 + 272) + 48 * (int)v128;
      LODWORD(v31) = *(_DWORD *)(v33 + 16);
      LODWORD(v32) = *(_DWORD *)(v33 + 24);
      v34 = *(_QWORD *)(v33 + 8) + 4 * (int)(v32 * v19);
      v35 = *(_DWORD *)(v33 + 28) - v32 * v19;
      v36 = *(_QWORD *)(v33 + 32);
      *((_QWORD *)&v148 + 1) = __PAIR64__(v9, v31);
      *(_QWORD *)&v149 = __PAIR64__(v35, v32);
      *((_QWORD *)&v149 + 1) = v36;
      v147 = &unk_1E5D29D40;
      *(_QWORD *)&v148 = v34;
      v145 = 0u;
      v146 = 0u;
      v144 = &unk_1E5D29D40;
      v142 = 0u;
      v143 = 0u;
      v141 = &unk_1E5D29D40;
      if (!v20)
        break;
      if (!v123)
      {
        v73 = *(_DWORD *)(v126 + 16);
        v74 = *(_DWORD *)(v126 + 24);
        v75 = *(_DWORD *)(v126 + 28) - v74 * (v19 - v9);
        v76 = *(_QWORD *)(v126 + 32);
        *(_QWORD *)&v145 = *(_QWORD *)(v126 + 8) + 4 * (int)(v74 * (v19 - v9));
        *((_QWORD *)&v145 + 1) = __PAIR64__(v9, v73);
        *(_QWORD *)&v146 = __PAIR64__(v75, v74);
        *((_QWORD *)&v146 + 1) = v76;
        v138 = &unk_1E5D29D40;
        v139 = 0uLL;
        v140 = 0uLL;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
        v77 = *(_QWORD *)(a1 + 272) + 48 * (int)v128;
        v78 = *(_DWORD *)(v77 + 16);
        v79 = *(_DWORD *)(v77 + 24);
        v68 = *(_QWORD *)(v77 + 8) + 4 * (int)(v79 * (v19 - v9));
        v80 = *(_DWORD *)(v77 + 28) - v79 * (v19 - v9);
        v72 = *(_QWORD *)(v77 + 32);
        *((_QWORD *)&v139 + 1) = __PAIR64__(v9, v78);
        *(_QWORD *)&v140 = __PAIR64__(v80, v79);
        *((_QWORD *)&v140 + 1) = v72;
        *(_QWORD *)&v142 = v68;
        *((_QWORD *)&v142 + 1) = __PAIR64__(v9, v78);
        *(_QWORD *)&v143 = __PAIR64__(v80, v79);
        goto LABEL_14;
      }
      kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(a1 + 128) + 48 * (int)v128);
      v37 = *(_QWORD *)(a1 + 128) + 48 * v128;
      v38 = *(_QWORD *)(v37 + 8);
      v39 = *(_DWORD *)(v37 + 20);
      v40 = *(_DWORD *)(v37 + 24);
      v41 = *(_DWORD *)(v37 + 28);
      v42 = *(_QWORD *)(v37 + 32);
      DWORD2(v139) = *(_DWORD *)(a1 + 176);
      *(_QWORD *)&v142 = v38;
      *((_QWORD *)&v142 + 1) = __PAIR64__(v39, DWORD2(v139));
      *(_QWORD *)&v143 = __PAIR64__(v41, v40);
      *((_QWORD *)&v143 + 1) = v42;
      v138 = &unk_1E5D29D40;
      v139 = 0u;
      v140 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
      v43 = *(_QWORD *)(a1 + 272) + 48 * v128;
      v44 = *(_DWORD *)(v43 + 16);
      v45 = *(_DWORD *)(v43 + 24);
      v46 = *(_QWORD *)(v43 + 8) + 4 * (int)(v45 * (v19 - v9));
      v47 = *(_DWORD *)(v43 + 28) - v45 * (v19 - v9);
      v48 = *(_QWORD *)(v43 + 32);
      *((_QWORD *)&v139 + 1) = __PAIR64__(v9, v44);
      *(_QWORD *)&v140 = __PAIR64__(v47, v45);
      *((_QWORD *)&v140 + 1) = v48;
      v138 = &unk_1E5D29D40;
      *(_QWORD *)&v139 = v46;
      v49 = *(_QWORD *)(a1 + 104) + 32 * v128;
      *((_QWORD *)&v136 + 1) = 0;
      v135 = &unk_1E5D29D70;
      *(_QWORD *)&v136 = *(_QWORD *)(v49 + 8) + 4 * v19;
      DWORD2(v136) = v9;
      *(_QWORD *)&v137 = *(_QWORD *)(v49 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v141, (uint64_t)&v138, (uint64_t)&v135, 1);
      v138 = &unk_1E5D29D40;
      v139 = 0u;
      v140 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
      v50 = *(_QWORD *)(a1 + 128) + 48 * (int)v128;
      v51 = *(unsigned int *)(a1 + 176);
      v52 = *(_DWORD *)(v50 + 20);
      v53 = *(_DWORD *)(v50 + 24);
      v54 = *(_QWORD *)(v50 + 8) + 4 * v51;
      LODWORD(v51) = *(_DWORD *)(v50 + 28) - v51;
      v55 = *(_QWORD *)(v50 + 32);
      DWORD2(v139) = *(_DWORD *)(v124 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      *(_QWORD *)&v145 = v54;
      *((_QWORD *)&v145 + 1) = __PAIR64__(v52, DWORD2(v139));
      *(_QWORD *)&v146 = __PAIR64__(v51, v53);
      *((_QWORD *)&v146 + 1) = v55;
      v138 = &unk_1E5D29D40;
      v139 = 0u;
      v140 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
      v56 = *(_DWORD *)(v126 + 24);
      v57 = *(_QWORD *)(v126 + 8) + 4 * (int)(v56 * (v19 - v9));
      v58 = *(_DWORD *)(v126 + 28) - v56 * (v19 - v9);
      v59 = *(_QWORD *)(v126 + 32);
      DWORD2(v139) = *(_DWORD *)(v126 + 16);
      HIDWORD(v139) = v9;
      *(_QWORD *)&v140 = __PAIR64__(v58, v56);
      *((_QWORD *)&v140 + 1) = v59;
      v138 = &unk_1E5D29D40;
      *(_QWORD *)&v139 = v57;
      v60 = *(_QWORD *)(a1 + 104) + 32 * v128;
      *((_QWORD *)&v136 + 1) = 0;
      v135 = &unk_1E5D29D70;
      *(_QWORD *)&v136 = *(_QWORD *)(v60 + 8) + 4 * v19;
      DWORD2(v136) = v9;
      *(_QWORD *)&v137 = *(_QWORD *)(v60 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v144, (uint64_t)&v138, (uint64_t)&v135, 1);
      v138 = &unk_1E5D29D40;
LABEL_15:
      v139 = 0u;
      v140 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
      v81 = *(_DWORD *)(v16 + 24);
      v82 = *(_QWORD *)(v16 + 8) + 4 * (int)(v81 * v19);
      v83 = *(_DWORD *)(v16 + 28) - v81 * v19;
      v84 = *(_QWORD *)(v16 + 32);
      DWORD2(v139) = *(_DWORD *)(v16 + 16);
      HIDWORD(v139) = v9;
      *(_QWORD *)&v140 = __PAIR64__(v83, v81);
      *((_QWORD *)&v140 + 1) = v84;
      v138 = &unk_1E5D29D40;
      *(_QWORD *)&v139 = v82;
      v85 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v138, (uint64_t)&v144, CblasNoTrans, v85, CblasTrans, 1.0, 1.0);
      v138 = &unk_1E5D29D40;
      v139 = 0u;
      v140 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
      if (*(_BYTE *)(a1 + 208))
      {
        v86 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        v87 = *(_QWORD *)(v86 + 8);
        v88 = *(_DWORD *)(v86 + 16);
        v89 = *(_QWORD *)(v86 + 32);
        v138 = &unk_1E5D29D70;
        *(_QWORD *)&v139 = v87;
        *(_QWORD *)&v140 = v89;
        *((_QWORD *)&v139 + 1) = v88;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v156, (uint64_t)&v141, 111, (uint64_t)&v138, 1.0, 1.0);
        v90 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        v91 = *(_QWORD *)(v90 + 8) + 4 * *(int *)(v90 + 24);
        v92 = *(_DWORD *)(v90 + 16);
        v93 = *(_QWORD *)(v90 + 32);
        v138 = &unk_1E5D29D70;
        *(_QWORD *)&v139 = v91;
        *(_QWORD *)&v140 = v93;
        *((_QWORD *)&v139 + 1) = v92;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v153, (uint64_t)&v141, 111, (uint64_t)&v138, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v156, (uint64_t)&v156);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v153, (uint64_t)&v153);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v150);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v147, (uint64_t)&v156, 111, (uint64_t)&v150, 111, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v147, (uint64_t)&v153, 111, (uint64_t)&v141, 111, 1.0, 1.0);
      v94 = *(float *)(a1 + 476);
      if (v94 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v147, v94);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v147, -*(float *)(a1 + 476));
      }
      v95 = *(_DWORD *)(a1 + 176);
      v96 = *(_DWORD *)(v16 + 24);
      v97 = *(_QWORD *)(v16 + 8) + 4 * (int)(v96 * v19) + 8 * v95;
      v98 = *(_DWORD *)(v16 + 28) - (v96 * v19 + 2 * v95);
      v99 = *(_QWORD *)(v16 + 32);
      *((_QWORD *)&v139 + 1) = __PAIR64__(v9, v95);
      *(_QWORD *)&v140 = __PAIR64__(v98, v96);
      *((_QWORD *)&v140 + 1) = v99;
      v138 = &unk_1E5D29D40;
      *(_QWORD *)&v139 = v97;
      if (*(_BYTE *)(a1 + 208))
      {
        v100 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        v101 = *(_QWORD *)(v100 + 8) + 8 * *(int *)(v100 + 24);
        v102 = *(_DWORD *)(v100 + 16);
        v103 = *(_QWORD *)(v100 + 32);
        v135 = &unk_1E5D29D70;
        *(_QWORD *)&v136 = v101;
        *(_QWORD *)&v137 = v103;
        *((_QWORD *)&v136 + 1) = v102;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v138, (uint64_t)&v147, 111, (uint64_t)&v135, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v138, (uint64_t)&v138);
      v104 = *(_QWORD *)(a1 + 296) + 48 * (int)v128;
      v105 = *(_DWORD *)(v104 + 16);
      v106 = *(_DWORD *)(v104 + 24);
      v107 = *(_QWORD *)(v104 + 8) + 4 * (int)(v106 * v19);
      v108 = *(_DWORD *)(v104 + 28) - v106 * v19;
      v109 = *(_QWORD *)(v104 + 32);
      *((_QWORD *)&v136 + 1) = __PAIR64__(v9, v105);
      *(_QWORD *)&v137 = __PAIR64__(v108, v106);
      *((_QWORD *)&v137 + 1) = v109;
      v135 = &unk_1E5D29D40;
      *(_QWORD *)&v136 = v107;
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v135, (uint64_t)&v147);
      v110 = *(_QWORD *)(a1 + 320) + 48 * (int)v128;
      v111 = *(_DWORD *)(v110 + 16);
      v112 = *(_DWORD *)(v110 + 24);
      v113 = *(_QWORD *)(v110 + 8) + 4 * (int)(v112 * v19);
      v114 = *(_DWORD *)(v110 + 28) - v112 * v19;
      v115 = *(_QWORD *)(v110 + 32);
      *((_QWORD *)&v133 + 1) = __PAIR64__(v9, v111);
      *(_QWORD *)&v134 = __PAIR64__(v114, v112);
      *((_QWORD *)&v134 + 1) = v115;
      v132 = &unk_1E5D29D40;
      *(_QWORD *)&v133 = v113;
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v132, (uint64_t)&v138, 111, (uint64_t)&v135, 111, 1.0, 0.0);
      v116 = *(_DWORD *)(v126 + 24);
      v117 = *(_QWORD *)(v126 + 8) + 4 * (int)(v116 * v19);
      v118 = *(_DWORD *)(v126 + 28) - v116 * v19;
      v119 = *(_QWORD *)(v126 + 32);
      if (*(_BYTE *)(a1 + 224))
      {
        DWORD2(v130) = *(_DWORD *)(v126 + 16);
        HIDWORD(v130) = v9;
        *(_QWORD *)&v131 = __PAIR64__(v118, v116);
        *((_QWORD *)&v131 + 1) = v119;
        v129 = &unk_1E5D29D40;
        *(_QWORD *)&v130 = v117;
        v120 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
        kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v129, (uint64_t)&v132, CblasNoTrans, v120, CblasTrans, 1.0, 0.0);
      }
      else
      {
        DWORD2(v130) = *(_DWORD *)(v126 + 16);
        HIDWORD(v130) = v9;
        *(_QWORD *)&v131 = __PAIR64__(v118, v116);
        *((_QWORD *)&v131 + 1) = v119;
        v129 = &unk_1E5D29D40;
        *(_QWORD *)&v130 = v117;
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v129, (uint64_t)&v132, 111);
      }
      v129 = &unk_1E5D29D40;
      v130 = 0u;
      v131 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v129);
      v132 = &unk_1E5D29D40;
      v133 = 0u;
      v134 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v132);
      v135 = &unk_1E5D29D40;
      v136 = 0u;
      v137 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v135);
      v138 = &unk_1E5D29D40;
      v139 = 0u;
      v140 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
      v141 = &unk_1E5D29D40;
      v142 = 0u;
      v143 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      v144 = &unk_1E5D29D40;
      v145 = 0u;
      v146 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v144);
      v147 = &unk_1E5D29D40;
      v148 = 0u;
      v149 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v147);
      v150 = &unk_1E5D29D40;
      v151 = 0u;
      v152 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v150);
      v153 = &unk_1E5D29D40;
      v154 = 0u;
      v155 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v153);
      v156 = &unk_1E5D29D40;
      v157 = 0u;
      v158 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v156);
      ++v20;
      v19 += v9;
      v21 = v127 + (int)v9;
      if (v125 == v20)
        goto LABEL_25;
    }
    v61 = *(_QWORD *)(a1 + 8) + 48 * v128;
    v62 = *(_DWORD *)(v61 + 20);
    v63 = *(_DWORD *)(v61 + 24);
    v64 = *(_QWORD *)(v61 + 8) + 4 * DWORD2(v157);
    v65 = *(_DWORD *)(v61 + 28) - DWORD2(v157);
    v66 = *(_QWORD *)(v61 + 32);
    DWORD2(v139) = *(_DWORD *)(v124 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    *(_QWORD *)&v145 = v64;
    *((_QWORD *)&v145 + 1) = __PAIR64__(v62, DWORD2(v139));
    *(_QWORD *)&v146 = __PAIR64__(v65, v63);
    *((_QWORD *)&v146 + 1) = v66;
    v138 = &unk_1E5D29D40;
    v139 = 0uLL;
    v140 = 0uLL;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
    v67 = *(_QWORD *)(a1 + 8) + 48 * v128;
    v68 = *(_QWORD *)(v67 + 8);
    v69 = *(_DWORD *)(v67 + 20);
    v70 = *(_DWORD *)(v67 + 24);
    v71 = *(_DWORD *)(v67 + 28);
    v72 = *(_QWORD *)(v67 + 32);
    DWORD2(v139) = *(_DWORD *)(a1 + 176);
    HIDWORD(v139) = v69;
    *(_QWORD *)&v140 = __PAIR64__(v71, v70);
    *((_QWORD *)&v140 + 1) = v72;
    *(_QWORD *)&v142 = v68;
    *((_QWORD *)&v142 + 1) = __PAIR64__(v69, DWORD2(v139));
    *(_QWORD *)&v143 = __PAIR64__(v71, v70);
LABEL_14:
    *((_QWORD *)&v143 + 1) = v72;
    v138 = &unk_1E5D29D40;
    *(_QWORD *)&v139 = v68;
    goto LABEL_15;
  }
LABEL_25:
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v121, v126, 111);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(a1, v122);
}

void sub_1ADA641EC(_Unwind_Exception *a1)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 248) + 48 * a2), a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 272) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 296) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 320) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 344) + 48 * a2), a3, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), 0, 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_1ADA64534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  _QWORD v28[4];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v27, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v27);
  }
  v4 = *(_QWORD *)(a1 + 272) + 48 * a2;
  v5 = *(_DWORD *)(a1 + 96);
  v6 = *(_DWORD *)(v4 + 20) - v5;
  v7 = *(_QWORD *)(a1 + 8) + 48 * a2;
  v8 = *(_DWORD *)(a1 + 176);
  v9 = *(_DWORD *)(v7 + 28);
  v10 = *(_QWORD *)(v7 + 32);
  v28[0] = *(_QWORD *)(v7 + 8);
  LODWORD(v28[1]) = v8;
  *(_QWORD *)((char *)&v28[1] + 4) = *(_QWORD *)(v7 + 20);
  HIDWORD(v28[2]) = v9;
  v28[3] = v10;
  v27 = &unk_1E5D29D40;
  LODWORD(v7) = *(_DWORD *)(v4 + 16);
  v11 = *(_DWORD *)(v4 + 24);
  v12 = *(_QWORD *)(v4 + 8) + 4 * (int)(v11 * v6);
  v13 = *(_DWORD *)(v4 + 28) - v11 * v6;
  v14 = *(_QWORD *)(v4 + 32);
  *((_QWORD *)&v25 + 1) = __PAIR64__(v5, v7);
  *(_QWORD *)&v26 = __PAIR64__(v13, v11);
  *((_QWORD *)&v26 + 1) = v14;
  v24 = &unk_1E5D29D40;
  *(_QWORD *)&v25 = v12;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v27, (uint64_t)&v24, 111);
  v24 = &unk_1E5D29D40;
  v25 = 0u;
  v26 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v24);
  v27 = &unk_1E5D29D40;
  memset(v28, 0, sizeof(v28));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v27);
  v15 = *(_QWORD *)(a1 + 8) + 48 * a2;
  v16 = *(int *)(a1 + 176);
  v17 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v18 = *(_QWORD *)(v15 + 8) + 4 * v16;
  LODWORD(v16) = *(_DWORD *)(v15 + 28) - v16;
  v19 = *(_QWORD *)(v15 + 32);
  v28[0] = v18;
  LODWORD(v28[1]) = v17;
  *(_QWORD *)((char *)&v28[1] + 4) = *(_QWORD *)(v15 + 20);
  HIDWORD(v28[2]) = v16;
  v28[3] = v19;
  v27 = &unk_1E5D29D40;
  v20 = *(_QWORD *)(a1 + 344) + 48 * a2;
  v21 = *(_DWORD *)(v20 + 16);
  LODWORD(v18) = *(_DWORD *)(v20 + 24);
  v22 = *(_QWORD *)(v20 + 8) + 4 * (int)(v18 * v6);
  LODWORD(v19) = *(_DWORD *)(v20 + 28) - v18 * v6;
  v23 = *(_QWORD *)(v20 + 32);
  *((_QWORD *)&v25 + 1) = __PAIR64__(*(_DWORD *)(a1 + 96), v21);
  *(_QWORD *)&v26 = __PAIR64__(v19, v18);
  *((_QWORD *)&v26 + 1) = v23;
  v24 = &unk_1E5D29D40;
  *(_QWORD *)&v25 = v22;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v27, (uint64_t)&v24, 111);
  v24 = &unk_1E5D29D40;
  v25 = 0u;
  v26 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v24);
  v27 = &unk_1E5D29D40;
  memset(v28, 0, sizeof(v28));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v27);
}

void sub_1ADA64770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v18;

  v18 = v15 + 16;
  a9 = v18;
  *v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  a14 = v18;
  *v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  _QWORD v53[4];
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[4];
  _QWORD v58[4];
  _QWORD v59[4];
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v6 = a3[3];
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(a1, 0, 1, v6);
  v7 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) != v7 && *(int *)(v7 + 16) >= 1)
  {
    v8 = *(int32x2_t **)(a1 + 128);
    v8[4] = (int32x2_t)v6;
    kaldi::CuMatrix<float>::Resize(v8, 1, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 16), 1, 0);
  }
  v9 = *(_QWORD *)(a1 + 248);
  v65 = 0;
  v66 = 0;
  v63 = &unk_1E5D29D70;
  v64 = 0;
  v64 = *(_QWORD *)(v9 + 8);
  LODWORD(v65) = *(_DWORD *)(v9 + 16);
  v66 = *(_QWORD *)(v9 + 32);
  v10 = *(_QWORD *)(a1 + 344);
  v61 = 0;
  v11 = *(_QWORD *)(v10 + 8);
  v60[0] = &unk_1E5D29D70;
  v60[1] = v11;
  LODWORD(v61) = *(_DWORD *)(v10 + 16);
  v62 = *(_QWORD *)(v10 + 32);
  v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v63, v12, CblasNoTrans, a2, 1.0, 0.0);
  v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)&v63, v13, 1.0, 1.0);
  v14 = *(int *)(a1 + 176);
  v59[0] = &unk_1E5D29D70;
  v59[1] = v64;
  v59[3] = v66;
  v59[2] = v14;
  v58[0] = &unk_1E5D29D70;
  v58[1] = v64 + 4 * v14;
  v58[3] = v66;
  v58[2] = v14;
  v57[0] = &unk_1E5D29D70;
  v57[1] = v64 + 12 * (_DWORD)v14;
  v57[3] = v66;
  v57[2] = v14;
  v15 = *(_QWORD *)(a1 + 272);
  v55 = 0;
  v16 = *(_QWORD *)(v15 + 8);
  v54[0] = &unk_1E5D29D70;
  v54[1] = v16;
  LODWORD(v55) = *(_DWORD *)(v15 + 16);
  v56 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(v17 + 32);
  LODWORD(v16) = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v19 = *(_QWORD *)(v17 + 8) + 4 * v14;
  v53[0] = &unk_1E5D29D70;
  v53[1] = v19;
  v53[3] = v18;
  v53[2] = v16;
  v20 = *(_QWORD *)(v17 + 8);
  v52[0] = &unk_1E5D29D70;
  v52[1] = v20;
  v52[3] = v18;
  v52[2] = v14;
  v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v63, v21, CblasNoTrans, (uint64_t)v53, 1.0, 1.0);
  if (*(_BYTE *)(a1 + 208))
  {
    v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    v23 = *(_QWORD *)(v22 + 8);
    v24 = *(_DWORD *)(v22 + 16);
    v25 = *(_QWORD *)(v22 + 32);
    v48 = &unk_1E5D29D70;
    v49 = v23;
    v51 = v25;
    v50 = v24;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v59, (uint64_t)v52, (uint64_t)&v48, 1.0, 1.0);
    v26 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    v27 = *(_QWORD *)(v26 + 8) + 4 * *(int *)(v26 + 24);
    v28 = *(_DWORD *)(v26 + 16);
    v29 = *(_QWORD *)(v26 + 32);
    v48 = &unk_1E5D29D70;
    v49 = v27;
    v51 = v29;
    v50 = v28;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v58, (uint64_t)v52, (uint64_t)&v48, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)v59, (uint64_t)v59);
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)v58, (uint64_t)v58);
  kaldi::CuVectorBase<float>::ApplyTanh((uint64_t)v57);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v54, (uint64_t)v59, (uint64_t)v57, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v54, (uint64_t)v52, (uint64_t)v58, 1.0, 1.0);
  v30 = *(float *)(a1 + 476);
  if (v30 > 0.0)
  {
    kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)v54, v30);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v54, -*(float *)(a1 + 476));
  }
  v31 = *(int *)(a1 + 176);
  v48 = &unk_1E5D29D70;
  v49 = v64 + 8 * v31;
  v51 = v66;
  v50 = v31;
  if (*(_BYTE *)(a1 + 208))
  {
    v32 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    v33 = *(_QWORD *)(v32 + 8) + 8 * *(int *)(v32 + 24);
    v34 = *(_DWORD *)(v32 + 16);
    v35 = *(_QWORD *)(v32 + 32);
    v44 = &unk_1E5D29D70;
    v45 = v33;
    v47 = v35;
    v46 = v34;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v48, (uint64_t)v54, (uint64_t)&v44, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v48, (uint64_t)&v48);
  v36 = *(_QWORD *)(a1 + 296);
  v46 = 0;
  v37 = *(_QWORD *)(v36 + 8);
  v44 = &unk_1E5D29D70;
  v45 = v37;
  LODWORD(v46) = *(_DWORD *)(v36 + 16);
  v47 = *(_QWORD *)(v36 + 32);
  kaldi::CuVectorBase<float>::Tanh((uint64_t)&v44, (uint64_t)v54);
  v38 = *(_QWORD *)(a1 + 320);
  v42 = 0;
  v39 = *(_QWORD *)(v38 + 8);
  v41[0] = &unk_1E5D29D70;
  v41[1] = v39;
  LODWORD(v42) = *(_DWORD *)(v38 + 16);
  v43 = *(_QWORD *)(v38 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v41, (uint64_t)&v48, (uint64_t)&v44, 1.0, 0.0);
  if (*(_BYTE *)(a1 + 224))
  {
    v40 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuVectorBase<float>::AddMatVec((uint64_t)v60, v40, CblasNoTrans, (uint64_t)v41, 1.0, 0.0);
  }
  else
  {
    kaldi::CuVectorBase<float>::CopyFromVec(v60, (uint64_t)v41);
  }
  kaldi::CuVectorBase<float>::CopyFromVec(a3, (uint64_t)v60);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(a1, 0);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 136), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc()
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc();
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc();
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int32x2_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  _QWORD v133[2];
  uint64_t v134;
  uint64_t v135;
  _QWORD v136[5];
  _QWORD v137[5];
  void *v138;
  _QWORD v139[4];
  void *v140;
  _QWORD v141[4];
  void *v142;
  _QWORD v143[4];
  void *v144;
  _QWORD v145[4];
  void *v146;
  __int128 v147;
  __int128 v148;
  void *v149;
  __int128 v150;
  __int128 v151;
  void *v152;
  __int128 v153;
  __int128 v154;
  void *v155;
  _QWORD v156[4];
  _QWORD v157[5];
  _QWORD v158[5];
  _QWORD v159[5];
  _QWORD v160[5];
  _QWORD v161[5];
  _QWORD v162[5];
  _QWORD v163[5];
  _QWORD v164[36];

  v9 = *(unsigned int *)(a2 + 20);
  v10 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  v11 = ((int)v9 / (int)v10);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v164, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"Running backward propagation for batch size = ", 46);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", which contains ", 17);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" frames each from ", 18);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v164);
  }
  if (a5)
    v15 = a5;
  else
    v15 = a4;
  v16 = *(_QWORD *)(v15 + 32);
  v130 = v9;
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateBackwardBuffers(a1, a6, v9, v16);
  v17 = a6;
  v18 = 3 * a6;
  v19 = *(_QWORD *)(a1 + 248) + 16 * v18;
  v20 = *(_QWORD *)(a1 + 440) + 16 * v18;
  v124 = (int *)(*(_QWORD *)(a1 + 368) + 16 * v18);
  v128 = *(_QWORD *)(a1 + 416);
  v129 = v17;
  v21 = *(_QWORD *)(a1 + 104);
  v123 = a5;
  if (*(_QWORD *)(a1 + 112) == v21 || *(int *)(v21 + 32 * v17 + 16) < 1)
  {
    v127 = 0;
    v22 = a1;
  }
  else
  {
    v22 = a1;
    v23 = (int32x2_t *)(*(_QWORD *)(a1 + 128) + 48 * (int)v17);
    v23[4] = (int32x2_t)v16;
    v127 = 1;
    kaldi::CuMatrix<float>::Resize(v23, v10, *(unsigned int *)(v20 + 16), 1, 0);
  }
  v24 = v11;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v124, a4, 111);
  v25 = *(int *)(v22 + 176);
  v26 = *(_DWORD *)(v19 + 28);
  v27 = *(_QWORD *)(v19 + 32);
  v164[1] = *(_QWORD *)(v19 + 8);
  LODWORD(v164[2]) = v25;
  *(_QWORD *)((char *)&v164[2] + 4) = *(_QWORD *)(v19 + 20);
  HIDWORD(v164[3]) = v26;
  v164[4] = v27;
  v164[0] = &unk_1E5D29D40;
  v28 = *(_DWORD *)(v19 + 28) - v25;
  v29 = *(_QWORD *)(v19 + 32);
  v163[1] = *(_QWORD *)(v19 + 8) + 4 * v25;
  LODWORD(v163[2]) = v25;
  *(_QWORD *)((char *)&v163[2] + 4) = *(_QWORD *)(v19 + 20);
  HIDWORD(v163[3]) = v28;
  v163[4] = v29;
  v163[0] = &unk_1E5D29D40;
  v30 = *(_DWORD *)(v19 + 28) - 2 * v25;
  v31 = *(_QWORD *)(v19 + 32);
  v162[1] = *(_QWORD *)(v19 + 8) + 8 * v25;
  LODWORD(v162[2]) = v25;
  *(_QWORD *)((char *)&v162[2] + 4) = *(_QWORD *)(v19 + 20);
  HIDWORD(v162[3]) = v30;
  v162[4] = v31;
  v162[0] = &unk_1E5D29D40;
  LODWORD(v31) = *(_DWORD *)(v19 + 28) - 3 * v25;
  v32 = *(_QWORD *)(v19 + 32);
  v161[1] = *(_QWORD *)(v19 + 8) + 4 * (3 * v25);
  LODWORD(v161[2]) = v25;
  *(_QWORD *)((char *)&v161[2] + 4) = *(_QWORD *)(v19 + 20);
  HIDWORD(v161[3]) = v31;
  v161[4] = v32;
  v161[0] = &unk_1E5D29D40;
  LODWORD(v31) = *(_DWORD *)(v20 + 28);
  v33 = *(_QWORD *)(v20 + 32);
  v160[1] = *(_QWORD *)(v20 + 8);
  LODWORD(v160[2]) = v25;
  *(_QWORD *)((char *)&v160[2] + 4) = *(_QWORD *)(v20 + 20);
  HIDWORD(v160[3]) = v31;
  v160[4] = v33;
  v160[0] = &unk_1E5D29D40;
  LODWORD(v31) = *(_DWORD *)(v20 + 28) - v25;
  v34 = *(_QWORD *)(v20 + 32);
  v159[1] = *(_QWORD *)(v20 + 8) + 4 * v25;
  LODWORD(v159[2]) = v25;
  *(_QWORD *)((char *)&v159[2] + 4) = *(_QWORD *)(v20 + 20);
  HIDWORD(v159[3]) = v31;
  v159[4] = v34;
  v159[0] = &unk_1E5D29D40;
  LODWORD(v31) = *(_DWORD *)(v20 + 28) - 2 * v25;
  v35 = *(_QWORD *)(v20 + 32);
  v158[1] = *(_QWORD *)(v20 + 8) + 8 * v25;
  LODWORD(v158[2]) = v25;
  *(_QWORD *)((char *)&v158[2] + 4) = *(_QWORD *)(v20 + 20);
  HIDWORD(v158[3]) = v31;
  v158[4] = v35;
  v158[0] = &unk_1E5D29D40;
  v36 = *(_DWORD *)(v20 + 28) - 3 * v25;
  v37 = *(_QWORD *)(v20 + 32);
  v157[1] = *(_QWORD *)(v20 + 8) + 4 * (3 * v25);
  LODWORD(v157[2]) = v25;
  v125 = v20;
  *(_QWORD *)((char *)&v157[2] + 4) = *(_QWORD *)(v20 + 20);
  HIDWORD(v157[3]) = v36;
  v157[4] = v37;
  v157[0] = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)v160, (uint64_t)v164, (uint64_t)v161);
  LODWORD(v156[1]) = v159[2];
  HIDWORD(v156[1]) = v130 - v10;
  LODWORD(v156[2]) = v159[3];
  HIDWORD(v156[2]) = HIDWORD(v159[3]) - LODWORD(v159[3]) * v10;
  v156[3] = v159[4];
  v156[0] = v159[1] + 4 * LODWORD(v159[3]) * (int)v10;
  v155 = &unk_1E5D29D40;
  DWORD2(v153) = v163[2];
  HIDWORD(v153) = v130 - v10;
  LODWORD(v154) = v163[3];
  DWORD1(v154) = HIDWORD(v163[3]) - LODWORD(v163[3]) * v10;
  *((_QWORD *)&v154 + 1) = v163[4];
  *(_QWORD *)&v153 = v163[1] + 4 * LODWORD(v163[3]) * (int)v10;
  v152 = &unk_1E5D29D40;
  v38 = *(_QWORD *)(a1 + 272) + 48 * (int)v129;
  v39 = *(_DWORD *)(v38 + 16);
  v40 = *(_QWORD *)(v38 + 32);
  *(_QWORD *)&v150 = *(_QWORD *)(v38 + 8);
  DWORD2(v150) = v39;
  HIDWORD(v150) = v130 - v10;
  *(_QWORD *)&v151 = *(_QWORD *)(v38 + 24);
  *((_QWORD *)&v151 + 1) = v40;
  v149 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v155, (uint64_t)&v152, (uint64_t)&v149);
  v149 = &unk_1E5D29D40;
  v150 = 0u;
  v151 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
  v152 = &unk_1E5D29D40;
  v153 = 0u;
  v154 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
  v155 = &unk_1E5D29D40;
  memset(v156, 0, sizeof(v156));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v155);
  v156[1] = __PAIR64__(v10, v159[2]);
  v156[2] = v159[3];
  v156[3] = v159[4];
  v156[0] = v159[1];
  v155 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v155);
  v155 = &unk_1E5D29D40;
  memset(v156, 0, sizeof(v156));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v155);
  if (v127)
  {
    v41 = *(_QWORD *)(a1 + 128) + 48 * (int)v129;
    v42 = *(_DWORD *)(a1 + 176);
    v43 = *(_DWORD *)(v41 + 28);
    v44 = *(_QWORD *)(v41 + 32);
    v156[0] = *(_QWORD *)(v41 + 8);
    LODWORD(v156[1]) = v42;
    *(_QWORD *)((char *)&v156[1] + 4) = *(_QWORD *)(v41 + 20);
    HIDWORD(v156[2]) = v43;
    v156[3] = v44;
    v155 = &unk_1E5D29D40;
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v155);
    v45 = 0;
    v46 = v11 - 1;
    do
    {
      v47 = LODWORD(v159[3]) * (v10 + v45);
      *((_QWORD *)&v153 + 1) = __PAIR64__(v10, v159[2]);
      LODWORD(v154) = v159[3];
      DWORD1(v154) = HIDWORD(v159[3]) - v47;
      *((_QWORD *)&v154 + 1) = v159[4];
      *(_QWORD *)&v153 = v159[1] + 4 * v47;
      v152 = &unk_1E5D29D40;
      v48 = *(_QWORD *)(a1 + 104) + 32 * v129;
      *((_QWORD *)&v150 + 1) = 0;
      v149 = &unk_1E5D29D70;
      *(_QWORD *)&v150 = *(_QWORD *)(v48 + 8) + 4 * (v10 + v45);
      DWORD2(v150) = v10;
      *(_QWORD *)&v151 = *(_QWORD *)(v48 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v152, (uint64_t)&v155, (uint64_t)&v149, 0);
      v152 = &unk_1E5D29D40;
      v153 = 0u;
      v154 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
      v45 += v10;
      --v46;
    }
    while (v46);
    v155 = &unk_1E5D29D40;
    memset(v156, 0, sizeof(v156));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v155);
  }
  v49 = v129;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)v158, (uint64_t)v162, *(_QWORD *)(a1 + 296) + 48 * (int)v129);
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)v157, (uint64_t)v161, (uint64_t)v164);
  v50 = v128 + 16 * v18;
  kaldi::CuMatrixBase<float>::DiffTanh(v50, *(_QWORD *)(a1 + 296) + 48 * (int)v129, (uint64_t)v162);
  v51 = 0;
  v131 = (v24 - 1);
  v126 = v10 * (v24 - 1);
  v52 = v124;
  do
  {
    v53 = v126 + v51;
    v54 = v52[6];
    v55 = *((_QWORD *)v52 + 1) + 4 * v54 * (v126 + v51);
    v56 = v52[7] - v54 * (v126 + v51);
    v57 = *((_QWORD *)v52 + 4);
    LODWORD(v156[1]) = v52[4];
    HIDWORD(v156[1]) = v10;
    v156[2] = __PAIR64__(v56, v54);
    v156[3] = v57;
    v156[0] = v55;
    v155 = &unk_1E5D29D40;
    v58 = *(_QWORD *)(a1 + 392) + 48 * v49;
    LODWORD(v55) = *(_DWORD *)(v58 + 16);
    v59 = *(_DWORD *)(v58 + 24);
    v60 = v59 * (v126 + v51);
    v61 = *(_QWORD *)(v58 + 8) + 4 * v60;
    LODWORD(v57) = *(_DWORD *)(v58 + 28) - v60;
    v62 = *(_QWORD *)(v58 + 32);
    *((_QWORD *)&v153 + 1) = __PAIR64__(v10, v55);
    *(_QWORD *)&v154 = __PAIR64__(v57, v59);
    *((_QWORD *)&v154 + 1) = v62;
    *(_QWORD *)&v153 = v61;
    v152 = &unk_1E5D29D40;
    if (*(_BYTE *)(a1 + 224))
    {
      v63 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v152, (uint64_t)&v155, CblasNoTrans, v63, CblasNoTrans, 1.0, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v152, (uint64_t)&v155, 111);
    }
    *((_QWORD *)&v150 + 1) = __PAIR64__(v10, v158[2]);
    LODWORD(v151) = v158[3];
    DWORD1(v151) = HIDWORD(v158[3]) - LODWORD(v158[3]) * v53;
    *((_QWORD *)&v151 + 1) = v158[4];
    *(_QWORD *)&v150 = v158[1] + 4 * (int)(LODWORD(v158[3]) * v53);
    v149 = &unk_1E5D29D40;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v149, (uint64_t)&v152);
    v64 = *(_DWORD *)(v50 + 24);
    v65 = *(_QWORD *)(v50 + 8) + 4 * (int)(v64 * v53);
    v66 = *(_DWORD *)(v50 + 28) - v64 * v53;
    v67 = *(_QWORD *)(v50 + 32);
    DWORD2(v147) = *(_DWORD *)(v50 + 16);
    HIDWORD(v147) = v10;
    *(_QWORD *)&v148 = __PAIR64__(v66, v64);
    *((_QWORD *)&v148 + 1) = v67;
    *(_QWORD *)&v147 = v65;
    v146 = &unk_1E5D29D40;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v146, (uint64_t)&v152);
    v68 = a1;
    if (*(_BYTE *)(a1 + 208))
    {
      v69 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      v70 = *(_QWORD *)(v69 + 8) + 8 * *(int *)(v69 + 24);
      v71 = *(_DWORD *)(v69 + 16);
      v72 = *(_QWORD *)(v69 + 32);
      v144 = &unk_1E5D29D70;
      v145[0] = v70;
      v145[2] = v72;
      v145[1] = v71;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v146, (uint64_t)&v149, 111, (uint64_t)&v144, 1.0, 1.0);
    }
    if (v131 < v24 - 1)
    {
      v73 = (v10 * v24 + v51);
      v74 = *(_DWORD *)(v50 + 24);
      v75 = *(_QWORD *)(v50 + 8) + 4 * (int)(v74 * v73);
      v76 = *(_DWORD *)(v50 + 28) - v74 * v73;
      v77 = *(_QWORD *)(v50 + 32);
      LODWORD(v145[1]) = *(_DWORD *)(v50 + 16);
      HIDWORD(v145[1]) = v10;
      v145[2] = __PAIR64__(v76, v74);
      v145[3] = v77;
      v144 = &unk_1E5D29D40;
      v145[0] = v75;
      v143[1] = __PAIR64__(v10, v163[2]);
      LODWORD(v143[2]) = v163[3];
      HIDWORD(v143[2]) = HIDWORD(v163[3]) - LODWORD(v163[3]) * v73;
      v143[3] = v163[4];
      v142 = &unk_1E5D29D40;
      v143[0] = v163[1] + 4 * LODWORD(v163[3]) * (int)v73;
      if (v127)
      {
        v78 = *(_QWORD *)(a1 + 128) + 48 * (int)v129;
        v79 = *(_DWORD *)(a1 + 176);
        v80 = *(_DWORD *)(v78 + 28);
        v81 = *(_QWORD *)(v78 + 32);
        v141[0] = *(_QWORD *)(v78 + 8);
        LODWORD(v141[1]) = v79;
        *(_QWORD *)((char *)&v141[1] + 4) = *(_QWORD *)(v78 + 20);
        HIDWORD(v141[2]) = v80;
        v141[3] = v81;
        v140 = &unk_1E5D29D40;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v140);
        v82 = *(_QWORD *)(a1 + 104) + 32 * v129;
        v139[1] = 0;
        v138 = &unk_1E5D29D70;
        v139[0] = *(_QWORD *)(v82 + 8) + 4 * v73;
        LODWORD(v139[1]) = v10;
        v139[2] = *(_QWORD *)(v82 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v140, (uint64_t)&v144, (uint64_t)&v138, 1);
        *(_OWORD *)&v145[1] = *(_OWORD *)&v141[1];
        v145[0] = v141[0];
        v145[3] = v141[3];
        v83 = *(_QWORD *)(a1 + 128) + 48 * (int)v129;
        v84 = *(int *)(a1 + 176);
        v85 = *(_DWORD *)(v83 + 28) - v84;
        v86 = *(_QWORD *)(v83 + 32);
        v139[0] = *(_QWORD *)(v83 + 8) + 4 * v84;
        LODWORD(v139[1]) = v84;
        *(_QWORD *)((char *)&v139[1] + 4) = *(_QWORD *)(v83 + 20);
        HIDWORD(v139[2]) = v85;
        v139[3] = v86;
        v138 = &unk_1E5D29D40;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v138);
        v87 = *(_QWORD *)(a1 + 104) + 32 * v129;
        v137[2] = 0;
        v137[0] = &unk_1E5D29D70;
        v137[1] = *(_QWORD *)(v87 + 8) + 4 * v73;
        LODWORD(v137[2]) = v10;
        v137[3] = *(_QWORD *)(v87 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v138, (uint64_t)&v142, (uint64_t)v137, 1);
        v143[0] = v139[0];
        *(_OWORD *)&v143[1] = *(_OWORD *)&v139[1];
        v143[3] = v139[3];
        v138 = &unk_1E5D29D40;
        memset(v139, 0, sizeof(v139));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
        v140 = &unk_1E5D29D40;
        memset(v141, 0, sizeof(v141));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v140);
        v68 = a1;
      }
      if (*(_BYTE *)(v68 + 208))
      {
        v141[1] = __PAIR64__(v10, v159[2]);
        LODWORD(v141[2]) = v159[3];
        HIDWORD(v141[2]) = HIDWORD(v159[3]) - LODWORD(v159[3]) * v73;
        v141[3] = v159[4];
        v140 = &unk_1E5D29D40;
        v141[0] = v159[1] + 4 * LODWORD(v159[3]) * (int)v73;
        v139[1] = __PAIR64__(v10, v160[2]);
        LODWORD(v139[2]) = v160[3];
        HIDWORD(v139[2]) = HIDWORD(v160[3]) - LODWORD(v160[3]) * v73;
        v139[3] = v160[4];
        v138 = &unk_1E5D29D40;
        v139[0] = v160[1] + 4 * LODWORD(v160[3]) * (int)v73;
        if (v127)
        {
          v88 = *(_QWORD *)(v68 + 128) + 48 * (int)v129;
          v89 = *(int *)(v68 + 176);
          v90 = *(_DWORD *)(v88 + 28) - 2 * v89;
          v91 = *(_QWORD *)(v88 + 32);
          v137[1] = *(_QWORD *)(v88 + 8) + 8 * v89;
          LODWORD(v137[2]) = v89;
          *(_QWORD *)((char *)&v137[2] + 4) = *(_QWORD *)(v88 + 20);
          HIDWORD(v137[3]) = v90;
          v137[4] = v91;
          v137[0] = &unk_1E5D29D40;
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v137);
          v92 = *(_QWORD *)(v68 + 104) + 32 * v129;
          v136[2] = 0;
          v136[0] = &unk_1E5D29D70;
          v136[1] = *(_QWORD *)(v92 + 8) + 4 * v73;
          LODWORD(v136[2]) = v10;
          v136[3] = *(_QWORD *)(v92 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v137, (uint64_t)&v140, (uint64_t)v136, 1);
          *(_OWORD *)&v141[1] = *(_OWORD *)&v137[2];
          v141[0] = v137[1];
          v141[3] = v137[4];
          v93 = *(_QWORD *)(v68 + 128) + 48 * (int)v129;
          v94 = *(_DWORD *)(v68 + 176);
          v95 = *(_DWORD *)(v93 + 28) - 3 * v94;
          v96 = *(_QWORD *)(v93 + 32);
          v136[1] = *(_QWORD *)(v93 + 8) + 12 * v94;
          LODWORD(v136[2]) = v94;
          *(_QWORD *)((char *)&v136[2] + 4) = *(_QWORD *)(v93 + 20);
          HIDWORD(v136[3]) = v95;
          v136[4] = v96;
          v136[0] = &unk_1E5D29D40;
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v136);
          v97 = *(_QWORD *)(v68 + 104) + 32 * v129;
          v134 = 0;
          v133[0] = &unk_1E5D29D70;
          v133[1] = *(_QWORD *)(v97 + 8) + 4 * v73;
          LODWORD(v134) = v10;
          v135 = *(_QWORD *)(v97 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v136, (uint64_t)&v138, (uint64_t)v133, 1);
          v139[0] = v136[1];
          *(_OWORD *)&v139[1] = *(_OWORD *)&v136[2];
          v139[3] = v136[4];
          v136[0] = &unk_1E5D29D40;
          memset(&v136[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v136);
          v137[0] = &unk_1E5D29D40;
          memset(&v137[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v137);
          v68 = a1;
        }
        v98 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(v68);
        v99 = *(_QWORD *)(v98 + 8) + 4 * *(int *)(v98 + 24);
        v100 = *(_DWORD *)(v98 + 16);
        v101 = *(_QWORD *)(v98 + 32);
        v137[0] = &unk_1E5D29D70;
        v137[1] = v99;
        v137[3] = v101;
        v137[2] = v100;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v146, (uint64_t)&v140, 111, (uint64_t)v137, 1.0, 1.0);
        v102 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        v103 = *(_QWORD *)(v102 + 8);
        v104 = *(_DWORD *)(v102 + 16);
        v105 = *(_QWORD *)(v102 + 32);
        v137[0] = &unk_1E5D29D70;
        v137[1] = v103;
        v137[3] = v105;
        v137[2] = v104;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v146, (uint64_t)&v138, 111, (uint64_t)v137, 1.0, 1.0);
        v138 = &unk_1E5D29D40;
        memset(v139, 0, sizeof(v139));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
        v140 = &unk_1E5D29D40;
        memset(v141, 0, sizeof(v141));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v140);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v146, (uint64_t)&v144, 111, (uint64_t)&v142, 111, 1.0, 1.0);
      v142 = &unk_1E5D29D40;
      memset(v143, 0, sizeof(v143));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v142);
      v144 = &unk_1E5D29D40;
      memset(v145, 0, sizeof(v145));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v144);
    }
    v145[1] = __PAIR64__(v10, v160[2]);
    LODWORD(v145[2]) = v160[3];
    HIDWORD(v145[2]) = HIDWORD(v160[3]) - LODWORD(v160[3]) * v53;
    v145[3] = v160[4];
    v144 = &unk_1E5D29D40;
    v145[0] = v160[1] + 4 * (int)(LODWORD(v160[3]) * v53);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v144, (uint64_t)&v146);
    v144 = &unk_1E5D29D40;
    memset(v145, 0, sizeof(v145));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v144);
    v145[1] = __PAIR64__(v10, v157[2]);
    LODWORD(v145[2]) = v157[3];
    HIDWORD(v145[2]) = HIDWORD(v157[3]) - LODWORD(v157[3]) * v53;
    v145[3] = v157[4];
    v144 = &unk_1E5D29D40;
    v145[0] = v157[1] + 4 * (int)(LODWORD(v157[3]) * v53);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v144, (uint64_t)&v146);
    v144 = &unk_1E5D29D40;
    memset(v145, 0, sizeof(v145));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v144);
    v49 = v129;
    if (v131 >= 1)
    {
      v145[1] = __PAIR64__(v10, v159[2]);
      LODWORD(v145[2]) = v159[3];
      HIDWORD(v145[2]) = HIDWORD(v159[3]) - LODWORD(v159[3]) * v53;
      v145[3] = v159[4];
      v144 = &unk_1E5D29D40;
      v145[0] = v159[1] + 4 * (int)(LODWORD(v159[3]) * v53);
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v144, (uint64_t)&v146);
      v144 = &unk_1E5D29D40;
      memset(v145, 0, sizeof(v145));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v144);
      v106 = *(_DWORD *)(v125 + 16);
      v107 = *(_DWORD *)(v125 + 24);
      v108 = *(_QWORD *)(v125 + 8) + 4 * (int)(v107 * v53);
      v109 = *(_DWORD *)(v125 + 28) - v107 * v53;
      v110 = *(_QWORD *)(v125 + 32);
      v145[1] = __PAIR64__(v10, v106);
      v145[2] = __PAIR64__(v109, v107);
      v145[3] = v110;
      v144 = &unk_1E5D29D40;
      v145[0] = v108;
      if (v127)
      {
        v111 = *(_QWORD *)(a1 + 128) + 48 * (int)v129;
        v112 = *(_DWORD *)(v111 + 28);
        v113 = *(_QWORD *)(v111 + 32);
        v143[0] = *(_QWORD *)(v111 + 8);
        LODWORD(v143[1]) = v106;
        *(_QWORD *)((char *)&v143[1] + 4) = *(_QWORD *)(v111 + 20);
        HIDWORD(v143[2]) = v112;
        v143[3] = v113;
        v142 = &unk_1E5D29D40;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v142);
        v114 = *(_QWORD *)(a1 + 104) + 32 * v129;
        v141[1] = 0;
        v140 = &unk_1E5D29D70;
        v141[0] = *(_QWORD *)(v114 + 8) + 4 * v53;
        LODWORD(v141[1]) = v10;
        v141[2] = *(_QWORD *)(v114 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v142, (uint64_t)&v144, (uint64_t)&v140, 1);
        *(_OWORD *)&v145[1] = *(_OWORD *)&v143[1];
        v145[0] = v143[0];
        v145[3] = v143[3];
        v142 = &unk_1E5D29D40;
        memset(v143, 0, sizeof(v143));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v142);
        v52 = v124;
      }
      v115 = v52[6];
      v116 = v115 * (v10 * (v24 - 2) + v51);
      v117 = *((_QWORD *)v52 + 1) + 4 * v116;
      v118 = v52[7] - v116;
      v119 = *((_QWORD *)v52 + 4);
      LODWORD(v143[1]) = v52[4];
      HIDWORD(v143[1]) = v10;
      v143[2] = __PAIR64__(v118, v115);
      v143[3] = v119;
      v142 = &unk_1E5D29D40;
      v143[0] = v117;
      v120 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v142, (uint64_t)&v144, CblasNoTrans, v120, CblasNoTrans, 1.0, 1.0);
      v142 = &unk_1E5D29D40;
      memset(v143, 0, sizeof(v143));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v142);
      v144 = &unk_1E5D29D40;
      memset(v145, 0, sizeof(v145));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v144);
      v49 = v129;
    }
    v146 = &unk_1E5D29D40;
    v147 = 0u;
    v148 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v146);
    v149 = &unk_1E5D29D40;
    v150 = 0u;
    v151 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
    v152 = &unk_1E5D29D40;
    v153 = 0u;
    v154 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
    v155 = &unk_1E5D29D40;
    memset(v156, 0, sizeof(v156));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v155);
    v51 -= v10;
  }
  while (v131-- > 0);
  if (v123)
  {
    v122 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMatMat(v123, v125, CblasNoTrans, v122, CblasNoTrans, 1.0, 0.0);
  }
  v157[0] = &unk_1E5D29D40;
  memset(&v157[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v157);
  v158[0] = &unk_1E5D29D40;
  memset(&v158[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v158);
  v159[0] = &unk_1E5D29D40;
  memset(&v159[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v159);
  v160[0] = &unk_1E5D29D40;
  memset(&v160[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v160);
  v161[0] = &unk_1E5D29D40;
  memset(&v161[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v161);
  v162[0] = &unk_1E5D29D40;
  memset(&v162[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v162);
  v163[0] = &unk_1E5D29D40;
  memset(&v163[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v163);
  v164[0] = &unk_1E5D29D40;
  memset(&v164[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v164);
}

void sub_1ADA65FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, _OWORD *a11, _OWORD *a12, _OWORD *a13, _OWORD *a14, _OWORD *a15, _OWORD *a16, _OWORD *a17)
{
  _OWORD *v17;

  STACK[0x280] = (unint64_t)&unk_1E5D29D40;
  *v17 = 0u;
  v17[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x280]);
  STACK[0x2A8] = (unint64_t)&unk_1E5D29D40;
  *a14 = 0u;
  a14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x2A8]);
  STACK[0x2D0] = (unint64_t)&unk_1E5D29D40;
  *a15 = 0u;
  a15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x2D0]);
  STACK[0x2F8] = (unint64_t)&unk_1E5D29D40;
  *a16 = 0u;
  a16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x2F8]);
  STACK[0x320] = (unint64_t)&unk_1E5D29D40;
  *a17 = 0u;
  a17[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x320]);
  STACK[0x348] = (unint64_t)&unk_1E5D29D40;
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x348]);
  STACK[0x370] = (unint64_t)&unk_1E5D29D40;
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x370]);
  STACK[0x398] = (unint64_t)&unk_1E5D29D40;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x398]);
  STACK[0x3C0] = (unint64_t)&unk_1E5D29D40;
  *a13 = 0u;
  a13[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

void sub_1ADA663A4()
{
  JUMPOUT(0x1ADA662B4);
}

uint64_t *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers(uint64_t *result)
{
  uint64_t *v1;

  if (!*((_BYTE *)result + 241))
  {
    v1 = result;
    std::vector<kaldi::CuMatrix<float>>::resize(result + 46, *((int *)result + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 49, *((int *)v1 + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 52, *((int *)v1 + 20));
    result = std::vector<kaldi::CuMatrix<float>>::resize(v1 + 55, *((int *)v1 + 20));
    *((_BYTE *)v1 + 241) = 1;
  }
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 368) + 48 * a2), a3, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 392) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 416) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 440) + 48 * a2), a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_1ADA66560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[5];
  _QWORD v59[5];
  _QWORD v60[36];

  v9 = *(_DWORD *)(a1 + 96);
  v10 = *(_DWORD *)(a2 + 20);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v60, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Accumulating gradients for batch id = ", 38);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v60);
  }
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  v47 = *(_QWORD *)(a1 + 272);
  v14 = *(_QWORD *)(a1 + 440) + 48 * a5;
  v15 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 480) + 4 * a5) = v10;
  v16 = *(int *)(a1 + 176);
  v17 = *(_DWORD *)(v14 + 28);
  v18 = *(_QWORD *)(v14 + 32);
  v60[1] = *(_QWORD *)(v14 + 8);
  LODWORD(v60[2]) = v16;
  *(_QWORD *)((char *)&v60[2] + 4) = *(_QWORD *)(v14 + 20);
  HIDWORD(v60[3]) = v17;
  v60[4] = v18;
  v60[0] = &unk_1E5D29D40;
  LODWORD(v18) = *(_DWORD *)(v14 + 28) - v16;
  v19 = *(_QWORD *)(v14 + 32);
  v59[1] = *(_QWORD *)(v14 + 8) + 4 * v16;
  LODWORD(v59[2]) = v16;
  *(_QWORD *)((char *)&v59[2] + 4) = *(_QWORD *)(v14 + 20);
  HIDWORD(v59[3]) = v18;
  v59[4] = v19;
  v59[0] = &unk_1E5D29D40;
  LODWORD(v18) = *(_DWORD *)(v14 + 28) - 2 * v16;
  v20 = *(_QWORD *)(v14 + 32);
  v58[1] = *(_QWORD *)(v14 + 8) + 8 * v16;
  LODWORD(v58[2]) = v16;
  *(_QWORD *)((char *)&v58[2] + 4) = *(_QWORD *)(v14 + 20);
  HIDWORD(v58[3]) = v18;
  v58[4] = v20;
  v58[0] = &unk_1E5D29D40;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a5) + 32) = a4;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a5) + 32) = a4;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a5) + 24) = a4;
  if (*(_BYTE *)(a1 + 208))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a5) + 32) = a4;
  if (*(_BYTE *)(a1 + 224))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a5) + 32) = a4;
  v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a5);
  kaldi::CuMatrixBase<float>::AddMatMat(v21, v14, CblasTrans, a2, CblasNoTrans, 1.0, v15);
  v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a5);
  v23 = v10 - v9;
  v24 = *(_DWORD *)(v14 + 24);
  v25 = *(_QWORD *)(v14 + 8) + 4 * (int)(v24 * v9);
  v26 = *(_DWORD *)(v14 + 28) - v24 * v9;
  v27 = *(_QWORD *)(v14 + 32);
  DWORD2(v56) = *(_DWORD *)(v14 + 16);
  HIDWORD(v56) = v23;
  *(_QWORD *)&v57 = __PAIR64__(v26, v24);
  *((_QWORD *)&v57 + 1) = v27;
  v55 = &unk_1E5D29D40;
  *(_QWORD *)&v56 = v25;
  v28 = *(_QWORD *)(a1 + 344) + 48 * a5;
  LODWORD(v25) = *(_DWORD *)(v28 + 16);
  v29 = *(_QWORD *)(v28 + 32);
  *(_QWORD *)&v53 = *(_QWORD *)(v28 + 8);
  *((_QWORD *)&v53 + 1) = __PAIR64__(v23, v25);
  *(_QWORD *)&v54 = *(_QWORD *)(v28 + 24);
  *((_QWORD *)&v54 + 1) = v29;
  v52 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::AddMatMat(v22, (uint64_t)&v55, CblasTrans, (uint64_t)&v52, CblasNoTrans, 1.0, v15);
  v52 = &unk_1E5D29D40;
  v53 = 0u;
  v54 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
  v55 = &unk_1E5D29D40;
  v56 = 0u;
  v57 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
  v30 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a5);
  kaldi::CuVectorBase<float>::AddRowSumMat(v30, v14, 1.0, v15);
  if (*(_BYTE *)(a1 + 208))
  {
    v31 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a5);
    v32 = v47 + 48 * a5;
    v33 = *(_QWORD *)(v31 + 8);
    v34 = *(_DWORD *)(v31 + 16);
    v35 = *(_QWORD *)(v31 + 32);
    v48 = &unk_1E5D29D70;
    v49 = v33;
    v51 = v35;
    v50 = v34;
    *((_QWORD *)&v56 + 1) = __PAIR64__(v23, v60[2]);
    LODWORD(v57) = v60[3];
    DWORD1(v57) = HIDWORD(v60[3]) - LODWORD(v60[3]) * v9;
    *((_QWORD *)&v57 + 1) = v60[4];
    v55 = &unk_1E5D29D40;
    *(_QWORD *)&v56 = v60[1] + 4 * LODWORD(v60[3]) * v9;
    LODWORD(v33) = *(_DWORD *)(v32 + 16);
    v36 = *(_QWORD *)(v32 + 32);
    *(_QWORD *)&v53 = *(_QWORD *)(v32 + 8);
    *((_QWORD *)&v53 + 1) = __PAIR64__(v23, v33);
    *(_QWORD *)&v54 = *(_QWORD *)(v32 + 24);
    *((_QWORD *)&v54 + 1) = v36;
    v52 = &unk_1E5D29D40;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v48, (uint64_t)&v55, 112, (uint64_t)&v52, 111, 1.0, v15);
    v52 = &unk_1E5D29D40;
    v53 = 0u;
    v54 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
    v55 = &unk_1E5D29D40;
    v56 = 0u;
    v57 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
    v37 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a5);
    v38 = *(_QWORD *)(v37 + 8) + 4 * *(int *)(v37 + 24);
    v39 = *(_DWORD *)(v37 + 16);
    v40 = *(_QWORD *)(v37 + 32);
    v48 = &unk_1E5D29D70;
    v49 = v38;
    v51 = v40;
    v50 = v39;
    *((_QWORD *)&v56 + 1) = __PAIR64__(v23, v59[2]);
    LODWORD(v57) = v59[3];
    DWORD1(v57) = HIDWORD(v59[3]) - LODWORD(v59[3]) * v9;
    *((_QWORD *)&v57 + 1) = v59[4];
    v55 = &unk_1E5D29D40;
    *(_QWORD *)&v56 = v59[1] + 4 * LODWORD(v59[3]) * v9;
    LODWORD(v38) = *(_DWORD *)(v32 + 16);
    v41 = *(_QWORD *)(v32 + 32);
    *(_QWORD *)&v53 = *(_QWORD *)(v32 + 8);
    *((_QWORD *)&v53 + 1) = __PAIR64__(v23, v38);
    *(_QWORD *)&v54 = *(_QWORD *)(v32 + 24);
    *((_QWORD *)&v54 + 1) = v41;
    v52 = &unk_1E5D29D40;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v48, (uint64_t)&v55, 112, (uint64_t)&v52, 111, 1.0, v15);
    v52 = &unk_1E5D29D40;
    v53 = 0u;
    v54 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
    v55 = &unk_1E5D29D40;
    v56 = 0u;
    v57 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
    v42 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a5);
    v43 = *(_QWORD *)(v42 + 8) + 8 * *(int *)(v42 + 24);
    v44 = *(_DWORD *)(v42 + 16);
    v45 = *(_QWORD *)(v42 + 32);
    v55 = &unk_1E5D29D70;
    *(_QWORD *)&v56 = v43;
    *(_QWORD *)&v57 = v45;
    *((_QWORD *)&v56 + 1) = v44;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v55, (uint64_t)v58, 112, v32, 111, 1.0, v15);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v46 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a5);
    kaldi::CuMatrixBase<float>::AddMatMat(v46, *(_QWORD *)(a1 + 368) + 48 * a5, CblasTrans, *(_QWORD *)(a1 + 320) + 48 * a5, CblasNoTrans, 1.0, v15);
  }
  v58[0] = &unk_1E5D29D40;
  memset(&v58[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v58);
  v59[0] = &unk_1E5D29D40;
  memset(&v59[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v59);
  v60[0] = &unk_1E5D29D40;
  memset(&v60[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v60);
}

void sub_1ADA66B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, _OWORD *a11, _OWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  a27 = &unk_1E5D29D40;
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a27);
  a32 = &unk_1E5D29D40;
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a32);
  a37 = &unk_1E5D29D40;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a37);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t *v9;
  uint64_t v10;
  int32x2_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t i;
  int32x2_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t j;
  int32x2_t *v22;
  uint64_t v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  void *__p[2];
  unsigned __int8 v30;
  _QWORD v31[36];

  if (*(_BYTE *)(a1 + 528))
    return;
  v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1)
    v3 = (v2 + 1);
  else
    v3 = 1;
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "input_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_QWORD *)(a1 + 568) != *(_QWORD *)(a1 + 560))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_QWORD *)(a1 + 616) != *(_QWORD *)(a1 + 608))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "bias_gradient_.size() == 0");
    goto LABEL_58;
  }
  v27 = *(_DWORD *)(a1 + 156);
  if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(a1 + 592) != *(_QWORD *)(a1 + 584))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "peephole_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(a1 + 640) != *(_QWORD *)(a1 + 632))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "projection_weights_gradient_.size() == 0");
LABEL_58:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
  }
  v4 = (_QWORD *)(a1 + 560);
  v5 = (_QWORD *)(a1 + 608);
  v28 = (_QWORD *)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 536, (int)v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 560, (int)v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 608, (int)v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), (int)v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), (int)v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), (int)v3);
  v6 = a1 + 12;
  if ((int)v3 >= 1)
  {
    v7 = 0;
    v8 = a1 + 8;
    do
    {
      v9 = (int32x2_t *)operator new();
      kaldi::CuMatrix<float>::CuMatrix(v9, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v8 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 0, 0, 0);
      v10 = *(_QWORD *)(*v28 + 8 * v7);
      *(_QWORD *)(*v28 + 8 * v7) = v9;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      v11 = (int32x2_t *)operator new();
      kaldi::CuMatrix<float>::CuMatrix(v11, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 0, 0, 0);
      v12 = *(_QWORD *)(*v4 + 8 * v7);
      *(_QWORD *)(*v4 + 8 * v7) = v11;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v13 = (_QWORD *)operator new();
      v14 = (4 * *(_DWORD *)(a1 + 176));
      v13[2] = 0;
      v13[3] = 0;
      *v13 = &unk_1E5D341C8;
      v13[1] = 0;
      kaldi::CuVector<float>::Resize((uint64_t)v13, v14, 0);
      v15 = *(_QWORD *)(*v5 + 8 * v7);
      *(_QWORD *)(*v5 + 8 * v7) = v13;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      if ((v27 & 0xFFFFFFFE) == 2)
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 656) + 48 * v7), (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v8 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 1, 0);
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 680) + 48 * v7), (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 1, 0);
        kaldi::CuVector<float>::Resize(*(_QWORD *)(a1 + 728) + 32 * v7, (4 * *(_DWORD *)(a1 + 176)), 1);
        if (*(_DWORD *)(a1 + 156) == 3)
        {
          kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 656) + 48 * v7, 1.0);
          kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 680) + 48 * v7, 1.0);
          kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 728) + 32 * v7, 1.0);
        }
      }
      ++v7;
    }
    while (v7 != v3);
  }
  if (*(_BYTE *)(a1 + 208))
  {
    v16 = (_QWORD *)(a1 + 584);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 584, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), (int)v3);
    if ((int)v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        v18 = (int32x2_t *)operator new();
        kaldi::CuMatrix<float>::CuMatrix(v18, 3, *(unsigned int *)(a1 + 176), 0, 0, 0);
        v19 = *(_QWORD *)(*v16 + 8 * i);
        *(_QWORD *)(*v16 + 8 * i) = v18;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        if ((v27 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 704) + 48 * i), 3, *(unsigned int *)(a1 + 176), 1, 0);
          if (*(_DWORD *)(a1 + 156) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 704) + 48 * i, 1.0);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v20 = (_QWORD *)(a1 + 632);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 632, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), (int)v3);
    if ((int)v3 >= 1)
    {
      for (j = 0; j != v3; ++j)
      {
        v22 = (int32x2_t *)operator new();
        kaldi::CuMatrix<float>::CuMatrix(v22, *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(unsigned int *)(a1 + 176), 0, 0, 0);
        v23 = *(_QWORD *)(*v20 + 8 * j);
        *(_QWORD *)(*v20 + 8 * j) = v22;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
        if ((v27 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 752) + 48 * j), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(unsigned int *)(a1 + 176), 1, 0);
          if (*(_DWORD *)(a1 + 156) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 752) + 48 * j, 1.0);
        }
      }
    }
  }
  *(_BYTE *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31, 2);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 272))(__p, a1);
    if ((v30 & 0x80u) == 0)
      v25 = __p;
    else
      v25 = (void **)__p[0];
    if ((v30 & 0x80u) == 0)
      v26 = v30;
    else
      v26 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    if ((char)v30 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31);
  }
}

void sub_1ADA67338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AccumGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 248), a2, a3, a4, a5);
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(a1 + 104);
  v6 = (_QWORD *)(a1 + 104);
  if (v5 == *(_QWORD *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    v5 = *(_QWORD *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v5 + 32 * a3, *(unsigned int *)(a2 + 16), 1);
  return kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)(*v6 + 32 * a3), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(a1, a2);
  *((_WORD *)a1 + 120) = 0;
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(_QWORD *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent *v2;

  v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(_QWORD *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetHistoryState(uint64_t a1, int32x2_t *a2, unsigned int a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 1, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, *(_QWORD *)(a1 + 8) + 48 * a3, 111);
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetHistoryState(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v13[4];

  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 16), 1);
  v8 = *(_QWORD *)(a1 + 8) + 48 * a4;
  v9 = *(_QWORD *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  v10 = *(_DWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 32);
  v13[0] = &unk_1E5D29D70;
  v13[1] = v9;
  v13[3] = v11;
  v13[2] = v10;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v13);
}

int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetHistoryState(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)(a1[1] + 48 * a3), a2, 111);
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetHistoryState(_QWORD *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  v8 = a1[1] + 48 * a4;
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  v11 = *(_QWORD *)(v8 + 32);
  v13[0] = &unk_1E5D29D70;
  v13[1] = v10;
  v13[3] = v11;
  v13[2] = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ResetHistoryState(_QWORD *a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v19;
  _QWORD v20[35];
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  *(_QWORD *)(a1[1] + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    v8 = 0;
    do
    {
      if (((*(_QWORD *)(*a2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      {
        v9 = a1[1] + 48 * a4;
        v10 = *(_QWORD *)(v9 + 8) + 4 * *(_DWORD *)(v9 + 24) * (int)v8;
        v11 = *(_DWORD *)(v9 + 16);
        v12 = *(_QWORD *)(v9 + 32);
        v20[0] = &unk_1E5D29D70;
        v20[1] = v10;
        v20[3] = v12;
        v20[2] = v11;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v20);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          v13 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
        }
      }
      ++v8;
    }
    while (a2[1] > v8);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20, 3);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v19 & 0x80u) == 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    if ((v19 & 0x80u) == 0)
      v16 = v19;
    else
      v16 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    if ((char)v19 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20);
  }
  v21[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v23);
}

void sub_1ADA67828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ResetHistoryState(_QWORD *a1)
{
  uint64_t i;

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  for (i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(_BYTE *)(result + 528) = 0;
  return result;
}

_QWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(_QWORD *result, int a2, float a3)
{
  float *v3;

  v3 = (float *)((char *)result + *(_QWORD *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((_BYTE *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3)
{
  float v4;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a3;
  v6 = *(_DWORD *)(a1 + 156);
  if (v6 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(_BYTE *)(a1 + 84))
        v4 = (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * a2) * a3;
      v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v13, v4);
      v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v14, v4);
      v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v15, v4);
      if (*(_BYTE *)(a1 + 208))
      {
        v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v16, v4);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v17, v4);
      }
    }
  }
  else if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v8, *(_QWORD *)(a1 + 656) + 48 * a2, v4);
      v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, *(_QWORD *)(a1 + 680) + 48 * a2, v4);
      v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(_QWORD *)(a1 + 728) + 32 * a2, v4);
      if (*(_BYTE *)(a1 + 208))
      {
        v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(_QWORD *)(a1 + 704) + 48 * a2, v4);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(_QWORD *)(a1 + 752) + 48 * a2, v4);
      }
    }
  }
  else if (a3 > 0.0 && v6 == 2)
  {
    v19 = a2;
    if (*(_BYTE *)(a1 + 84))
      v4 = (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * a2) * a3;
    v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v20, (int *)(*(_QWORD *)(a1 + 656) + 48 * v19), v4);
    v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v21, (int *)(*(_QWORD *)(a1 + 680) + 48 * v19), v4);
    v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v22, (_QWORD *)(*(_QWORD *)(a1 + 728) + 32 * v19), v4);
    if (*(_BYTE *)(a1 + 208))
    {
      v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v23, (int *)(*(_QWORD *)(a1 + 704) + 48 * v19), v4);
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v24, (int *)(*(_QWORD *)(a1 + 752) + 48 * v19), v4);
    }
  }
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(_QWORD *a1, unsigned int a2, float a3)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 264), a2, a3);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  *a3 = result;
  if (*(_QWORD *)(a1 + 544) == *(_QWORD *)(a1 + 536) || *(_QWORD *)(a1 + 568) == *(_QWORD *)(a1 + 560))
  {
    v15 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) == 1)
    v7 = 0;
  else
    v7 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v7);
  v9 = kaldi::CuMatrixBase<float>::CountZeros(v8);
  v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v7);
  v11 = kaldi::CuMatrixBase<float>::CountZeros(v10) + v9;
  v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v7);
  result = kaldi::CuVectorBase<float>::CountZeros(v12);
  *a2 = v11 + result;
  if (*(_BYTE *)(a1 + 208))
  {
    v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v7);
    result = kaldi::CuMatrixBase<float>::CountZeros(v13);
    *a2 += result;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v7);
    result = kaldi::CuMatrixBase<float>::CountZeros(v14);
    v15 = *a2 + result;
LABEL_11:
    *a2 = v15;
  }
  return result;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(_QWORD *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr((uint64_t)a1 + *(_QWORD *)(*a1 - 56), a2, a3);
}

int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetInternalMemory(uint64_t a1, int *a2, int a3)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(_QWORD *)(a1 + 272) + 48 * a3, 111);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(uint64_t a1, int a2, float a3)
{
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;

  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  v7 = -a3;
  v8 = -(float)(a3 * *(float *)(a1 + 464));
  v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
  kaldi::CuMatrixBase<float>::AddMat(v6, v9, 111, v8, 1.0);
  v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  v11 = -(float)(a3 * *(float *)(a1 + 464));
  v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
  kaldi::CuMatrixBase<float>::AddMat(v10, v12, 111, v11, 1.0);
  v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  v14 = -(float)(a3 * *(float *)(a1 + 464));
  v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
  kaldi::CuVectorBase<float>::AddVec(v13, v15, v14, 1.0);
  if (*(_BYTE *)(a1 + 208))
  {
    v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    v17 = *(float *)(a1 + 464) * v7;
    v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
    kaldi::CuMatrixBase<float>::AddMat(v16, v18, 111, v17, 1.0);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    v20 = *(float *)(a1 + 468) * v7;
    v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
    kaldi::CuMatrixBase<float>::AddMat(v19, v21, 111, v20, 1.0);
  }
}

void sub_1ADA681C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)va1);
  v5 = v3 + 16;
  *v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureBuffers(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 240))
  {
    v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 8) + v3), *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 480), v2);
    *(_BYTE *)(a1 + 240) = 1;
  }
}

void std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 8 * a2;
      while (v3 != (_QWORD *)v5)
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      }
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__append((char **)a1, a2 - v4);
  }
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Check(uint64_t a1)
{
  float result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v20[34];

  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Input weights #rows = ", 22);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"; expecting ", 12);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 16) != *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Input weights #columns = ", 25);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"; expecting ", 12);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, " (same as input dim)");
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Recurrent weights #rows = ", 26);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; expecting ", 12);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 16) != *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Recurrent weights #columns = ", 29);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; expecting ", 12);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; expecting ", 12);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; expecting ", 12);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20) == *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12))
    {
      if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 16) == *(_DWORD *)(a1 + 176))
        goto LABEL_12;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Projection weights #columns = ", 30);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"; expecting ", 12);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Projection weights #rows = ", 27);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_1ADA68964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 896) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 904) = xmmword_1AE13F660;
  *(_QWORD *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(_BYTE *)(a1 + 934) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &unk_1E5D2C5B0;
  *(_DWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D305B8;
  *(_QWORD *)(a1 + 88) = &unk_1E5D305D8;
  *(_QWORD *)(a1 + 96) = 0x100000001;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)a1 = &off_1E5D2BA88;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 848) = &off_1E5D2BD78;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = &unk_1E5D2BC18;
  *(_QWORD *)(a1 + 168) = &unk_1E5D2BC40;
  *(_DWORD *)(a1 + 176) = a3;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0x3DCCCCCD3F800000;
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 513) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 536);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 536);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 560);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 560);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 608);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 608);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 208))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 584);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 208))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 584);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 224))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 632);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 224))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 632);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[35];

  v4 = a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *(_QWORD *)(a1 + 848) = off_1E5D32508;
  v5 = *(_QWORD *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 872), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3);
  *(_QWORD *)(a1 + 848) = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 896) = &off_1E5D2D150;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1E5D14D98, a2);
  *(_QWORD *)(a1 + 160) = &unk_1E5D2BC18;
  *(_QWORD *)(a1 + 168) = &unk_1E5D2BC40;
  *(_QWORD *)a1 = &off_1E5D2BA88;
  *(_QWORD *)(a1 + 848) = &off_1E5D2BD78;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  v7 = *(_BYTE *)(a2 + 240);
  v8 = *(_BYTE *)(a2 + 241);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 240) = v7;
  *(_BYTE *)(a1 + 241) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 4));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 4));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368), *(_QWORD *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 4));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 392), *(_QWORD *)(a2 + 392), *(_QWORD *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 4));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 416), *(_QWORD *)(a2 + 416), *(_QWORD *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 4));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 440), *(_QWORD *)(a2 + 440), *(_QWORD *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 2);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 504), *(const void **)(a2 + 504), *(_QWORD *)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 2);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a2 + 592) - *(_QWORD *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 608), (uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 632), (uint64_t)(*(_QWORD *)(a2 + 640) - *(_QWORD *)(a2 + 632)) >> 3);
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 656), *(_QWORD *)(a2 + 656), *(_QWORD *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 4));
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 680), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 688) - *(_QWORD *)(a2 + 680)) >> 4));
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 704), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 712) - *(_QWORD *)(a2 + 704)) >> 4));
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 728), *(_QWORD *)(a2 + 728), *(_QWORD *)(a2 + 736), (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 5);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 752), *(_QWORD *)(a2 + 752), *(_QWORD *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 4));
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v56);
  }
  v9 = *(int **)(a2 + 184);
  if (v9)
  {
    kaldi::NewCuSubOrMat<signed char>(v9, v56);
    v10 = v56[0];
    v56[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v10);
    v11 = v56[0];
    v56[0] = 0;
    if (v11)
    {
      v12 = kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v11);
      MEMORY[0x1AF44D190](v12, 0x10D0C4068EB0291);
    }
  }
  v13 = *(int **)(a2 + 192);
  if (v13)
  {
    kaldi::NewCuSubOrMat<signed char>(v13, v56);
    v14 = v56[0];
    v56[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v14);
    v15 = v56[0];
    v56[0] = 0;
    if (v15)
    {
      v16 = kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v15);
      MEMORY[0x1AF44D190](v16, 0x10D0C4068EB0291);
    }
  }
  v17 = *(_QWORD **)(a2 + 200);
  if (v17)
  {
    kaldi::NewCuSubOrVec<float>(v17, 0, v56);
    v18 = v56[0];
    v56[0] = 0;
    v19 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v18;
    if (v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      v20 = v56[0];
      v56[0] = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    }
  }
  v21 = *(_QWORD *)(a2 + 216);
  if (v21)
  {
    kaldi::NewCuSubOrMat<float>(v21, 0, v56);
    v22 = v56[0];
    v56[0] = 0;
    v23 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v22;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
      v24 = v56[0];
      v56[0] = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
    }
  }
  v25 = *(int **)(a2 + 232);
  if (v25)
  {
    kaldi::NewCuSubOrMat<signed char>(v25, v56);
    v26 = v56[0];
    v56[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v26);
    v27 = v56[0];
    v56[0] = 0;
    if (v27)
    {
      v28 = kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v27);
      MEMORY[0x1AF44D190](v28, 0x10D0C4068EB0291);
    }
  }
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    v29 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 536) + 8 * v29))
      {
        v30 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a2, v29);
        kaldi::NewCuSubOrMat<float>(v30, 0, v56);
        v31 = *(_QWORD *)(a1 + 536);
        v32 = v56[0];
        v56[0] = 0;
        v33 = *(_QWORD *)(v31 + 8 * v29);
        *(_QWORD *)(v31 + 8 * v29) = v32;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
        v34 = v56[0];
        v56[0] = 0;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 560) + 8 * v29))
      {
        v35 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a2, v29);
        kaldi::NewCuSubOrMat<float>(v35, 0, v56);
        v36 = *(_QWORD *)(a1 + 560);
        v37 = v56[0];
        v56[0] = 0;
        v38 = *(_QWORD *)(v36 + 8 * v29);
        *(_QWORD *)(v36 + 8 * v29) = v37;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
        v39 = v56[0];
        v56[0] = 0;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 608) + 8 * v29))
      {
        v40 = (_QWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a2, v29);
        kaldi::NewCuSubOrVec<float>(v40, 0, v56);
        v41 = *(_QWORD *)(a1 + 608);
        v42 = v56[0];
        v56[0] = 0;
        v43 = *(_QWORD *)(v41 + 8 * v29);
        *(_QWORD *)(v41 + 8 * v29) = v42;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
        v44 = v56[0];
        v56[0] = 0;
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
      }
      if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(*(_QWORD *)(a2 + 584) + 8 * v29))
      {
        v45 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a2, v29);
        kaldi::NewCuSubOrMat<float>(v45, 0, v56);
        v46 = *(_QWORD *)(a1 + 584);
        v47 = v56[0];
        v56[0] = 0;
        v48 = *(_QWORD *)(v46 + 8 * v29);
        *(_QWORD *)(v46 + 8 * v29) = v47;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
        v49 = v56[0];
        v56[0] = 0;
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
      }
      if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(*(_QWORD *)(a2 + 632) + 8 * v29))
      {
        v50 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a2, v29);
        kaldi::NewCuSubOrMat<float>(v50, 0, v56);
        v51 = *(_QWORD *)(a1 + 632);
        v52 = v56[0];
        v56[0] = 0;
        v53 = *(_QWORD *)(v51 + 8 * v29);
        *(_QWORD *)(v51 + 8 * v29) = v52;
        if (v53)
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
        v54 = v56[0];
        v56[0] = 0;
        if (v54)
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
      }
      ++v29;
    }
    while (v29 < (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
  }
  if (*(_QWORD *)(a2 + 784) != *(_QWORD *)(a2 + 776))
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  return a1;
}

void sub_1ADA696D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,quasar::Bitmap *a24,quasar::Bitmap *a25,uint64_t a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t a30)
{
  _QWORD *v30;
  void **v31;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  v33 = *a15;
  if (*a15)
  {
    v30[64] = v33;
    operator delete(v33);
  }
  v34 = *a16;
  if (*a16)
  {
    v30[61] = v34;
    operator delete(v34);
  }
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a22;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a27, 0);
  v35 = v30[27];
  v30[27] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  v36 = v30[25];
  v30[25] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a29, 0);
  quasar::Bitmap::~Bitmap(a24);
  quasar::Bitmap::~Bitmap(a25);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v30, (uint64_t *)&off_1E5D14D98);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v30 + 106));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  quasar::Bitmap *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = a2[3];
  *(_QWORD *)(a1 + 160) = &unk_1E5D2BC18;
  v5 = a1 + 160;
  *(_QWORD *)(a1 + 168) = &unk_1E5D2BC40;
  v6 = (quasar::Bitmap *)(a1 + 168);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  v11 = (void **)(v5 + 592);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 568);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 544);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 520);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 496);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 472);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 448);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 424);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 400);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 376);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v7 = *(void **)(v5 + 344);
  if (v7)
  {
    *(_QWORD *)(a1 + 512) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 480);
  if (v8)
  {
    *(_QWORD *)(a1 + 488) = v8;
    operator delete(v8);
  }
  v11 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), 0);
  v9 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v10 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  quasar::Bitmap::~Bitmap(v6);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v5);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  uint64_t v2;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void `non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(a1 - 168);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(_QWORD *a1)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
  JUMPOUT(0x1AF44D190);
}

char *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1ADA69D24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Copy(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Copy((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

char *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1ADA69DA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(a1 - 160);
}

char *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent<kaldi::QuantizedMatrix<signed char>>((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1ADA69E1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50[35];

  v4 = a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *(_QWORD *)(a1 + 848) = off_1E5D32508;
  v5 = *(_QWORD *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 872), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3);
  *(_QWORD *)(a1 + 848) = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 896) = &off_1E5D2D150;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1E5D14DB8, a2);
  *(_QWORD *)(a1 + 160) = &unk_1E5D2C038;
  *(_QWORD *)(a1 + 168) = &unk_1E5D2C060;
  *(_QWORD *)a1 = &off_1E5D2BEA8;
  *(_QWORD *)(a1 + 848) = &off_1E5D2C198;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  v7 = *(_BYTE *)(a2 + 240);
  v8 = *(_BYTE *)(a2 + 241);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 240) = v7;
  *(_BYTE *)(a1 + 241) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 4));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 4));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368), *(_QWORD *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 4));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 392), *(_QWORD *)(a2 + 392), *(_QWORD *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 4));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 416), *(_QWORD *)(a2 + 416), *(_QWORD *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 4));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 440), *(_QWORD *)(a2 + 440), *(_QWORD *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 2);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 504), *(const void **)(a2 + 504), *(_QWORD *)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 2);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a2 + 592) - *(_QWORD *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 608), (uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 632), (uint64_t)(*(_QWORD *)(a2 + 640) - *(_QWORD *)(a2 + 632)) >> 3);
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 656), *(_QWORD *)(a2 + 656), *(_QWORD *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 4));
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 680), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 688) - *(_QWORD *)(a2 + 680)) >> 4));
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 704), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 712) - *(_QWORD *)(a2 + 704)) >> 4));
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 728), *(_QWORD *)(a2 + 728), *(_QWORD *)(a2 + 736), (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 5);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 752), *(_QWORD *)(a2 + 752), *(_QWORD *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 4));
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v50);
  }
  v9 = *(int **)(a2 + 184);
  if (v9)
  {
    v10 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(v10, v9);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v10);
  }
  v11 = *(int **)(a2 + 192);
  if (v11)
  {
    v12 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(v12, v11);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v12);
  }
  v13 = *(_QWORD **)(a2 + 200);
  if (v13)
  {
    kaldi::NewCuSubOrVec<float>(v13, 0, v50);
    v14 = v50[0];
    v50[0] = 0;
    v15 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v14;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      v16 = v50[0];
      v50[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    }
  }
  v17 = *(_QWORD *)(a2 + 216);
  if (v17)
  {
    kaldi::NewCuSubOrMat<float>(v17, 0, v50);
    v18 = v50[0];
    v50[0] = 0;
    v19 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v18;
    if (v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      v20 = v50[0];
      v50[0] = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
    }
  }
  v21 = *(int **)(a2 + 232);
  if (v21)
  {
    v22 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(v22, v21);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v22);
  }
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    v23 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 536) + 8 * v23))
      {
        v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v24, 0, v50);
        v25 = *(_QWORD *)(a1 + 536);
        v26 = v50[0];
        v50[0] = 0;
        v27 = *(_QWORD *)(v25 + 8 * v23);
        *(_QWORD *)(v25 + 8 * v23) = v26;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
        v28 = v50[0];
        v50[0] = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 560) + 8 * v23))
      {
        v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v29, 0, v50);
        v30 = *(_QWORD *)(a1 + 560);
        v31 = v50[0];
        v50[0] = 0;
        v32 = *(_QWORD *)(v30 + 8 * v23);
        *(_QWORD *)(v30 + 8 * v23) = v31;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
        v33 = v50[0];
        v50[0] = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 608) + 8 * v23))
      {
        v34 = (_QWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a2, v23);
        kaldi::NewCuSubOrVec<float>(v34, 0, v50);
        v35 = *(_QWORD *)(a1 + 608);
        v36 = v50[0];
        v50[0] = 0;
        v37 = *(_QWORD *)(v35 + 8 * v23);
        *(_QWORD *)(v35 + 8 * v23) = v36;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        v38 = v50[0];
        v50[0] = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      }
      if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(*(_QWORD *)(a2 + 584) + 8 * v23))
      {
        v39 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v39, 0, v50);
        v40 = *(_QWORD *)(a1 + 584);
        v41 = v50[0];
        v50[0] = 0;
        v42 = *(_QWORD *)(v40 + 8 * v23);
        *(_QWORD *)(v40 + 8 * v23) = v41;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
        v43 = v50[0];
        v50[0] = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
      }
      if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(*(_QWORD *)(a2 + 632) + 8 * v23))
      {
        v44 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v44, 0, v50);
        v45 = *(_QWORD *)(a1 + 632);
        v46 = v50[0];
        v50[0] = 0;
        v47 = *(_QWORD *)(v45 + 8 * v23);
        *(_QWORD *)(v45 + 8 * v23) = v46;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
        v48 = v50[0];
        v50[0] = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
      }
      ++v23;
    }
    while (v23 < (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
  }
  if (*(_QWORD *)(a2 + 784) != *(_QWORD *)(a2 + 776))
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  return a1;
}

void sub_1ADA6A6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,quasar::Bitmap *a22,quasar::Bitmap *a23,void **a24,void **a25,void **a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,void **a30)
{
  _QWORD *v30;
  void **v31;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  v33 = *a14;
  if (*a14)
  {
    v30[64] = v33;
    operator delete(v33);
  }
  v34 = *a15;
  if (*a15)
  {
    v30[61] = v34;
    operator delete(v34);
  }
  a30 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a27, 0);
  v35 = v30[27];
  v30[27] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  v36 = v30[25];
  v30[25] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a29, 0);
  quasar::Bitmap::~Bitmap(a22);
  quasar::Bitmap::~Bitmap(a23);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v30, (uint64_t *)&off_1E5D14DB8);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v30 + 106));
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(a1 - 168);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v6;
  void **v7;
  void *v10;
  BOOL v19;
  float *v20;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  int *v26;
  BOOL v32;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  void *v39;
  void *v40;
  int v41;
  BOOL v44;
  std::string *v45;
  int inited;
  float v47;
  kaldi::quasar::Vocab *v48;
  float v49;
  kaldi::quasar::Vocab *v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  float v66;
  kaldi::quasar::Vocab *v67;
  _QWORD *v68;
  void **v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[16];
  uint64_t v78;
  void *__p;
  void *v80;
  void **v81[34];
  void *v82[3];
  std::string v83;
  std::string v84;
  float v85;
  int v86;
  int v87;
  float v88;
  int v89;
  int v90;
  unsigned int v91;

  v6 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v90 = -1;
  v91 = v6;
  v88 = 2.0;
  *(float *)&v89 = -2.0;
  *(float *)&v86 = -2.0;
  v87 = 1036831949;
  v85 = 2.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v84);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v83);
  memset(v82, 0, sizeof(v82));
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_170;
    kaldi::ReadToken(a2, 0, (uint64_t)v82);
    if ((SHIBYTE(v82[2]) & 0x80000000) == 0)
      break;
    v10 = v82[1];
    if (v82[1] == (void *)10)
    {
      if (*(_QWORD *)v82[0] == 0x6C6C65436D754E3CLL && *((_WORD *)v82[0] + 4) == 15987)
      {
LABEL_86:
        v26 = (int *)&v91;
LABEL_159:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v26);
        goto LABEL_168;
      }
      if (*(_QWORD *)v82[0] == 0x61654D736169423CLL && *((_WORD *)v82[0] + 4) == 15982)
      {
LABEL_145:
        v20 = (float *)&v89;
        goto LABEL_156;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)11)
    {
      if (*(_QWORD *)v82[0] == 0x6E6152736169423CLL && *(_QWORD *)((char *)v82[0] + 3) == 0x3E65676E61527361)
      {
LABEL_121:
        v20 = &v88;
        goto LABEL_156;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)20)
    {
      if (*(_QWORD *)v82[0] == 0x47746567726F463CLL
        && *((_QWORD *)v82[0] + 1) == 0x4D73616942657461
        && *((_DWORD *)v82[0] + 4) == 1047421285)
      {
LABEL_95:
        v20 = (float *)&v86;
LABEL_156:
        kaldi::ReadBasicType<float>(a2, 0, v20);
        goto LABEL_168;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)21)
    {
      if (*(_QWORD *)v82[0] == 0x47746567726F463CLL
        && *((_QWORD *)v82[0] + 1) == 0x5273616942657461
        && *(_QWORD *)((char *)v82[0] + 13) == 0x3E65676E61527361)
      {
LABEL_146:
        v20 = &v85;
        goto LABEL_156;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)13)
    {
      if (*(_QWORD *)v82[0] == 0x74536D617261503CLL && *(_QWORD *)((char *)v82[0] + 5) == 0x3E7665646474536DLL)
      {
LABEL_109:
        v20 = (float *)&v87;
        goto LABEL_156;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)15)
    {
      v19 = *(_QWORD *)v82[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v82[0] + 7) == 0x3E66656F43657461;
      v20 = (float *)(a1 + 464);
      if (v19)
        goto LABEL_156;
      v10 = v82[1];
    }
    if (v10 == (void *)25)
    {
      v23 = *(_QWORD *)v82[0] == 0x7463656A6F72503CLL
         && *((_QWORD *)v82[0] + 1) == 0x6E7261654C6E6F69
         && *((_QWORD *)v82[0] + 2) == 0x66656F4365746152
         && *((_BYTE *)v82[0] + 24) == 62;
      v20 = (float *)(a1 + 468);
      if (v23)
        goto LABEL_156;
      v10 = v82[1];
    }
    if (v10 == (void *)9)
    {
      v24 = *(_QWORD *)v82[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v82[0] + 8) == 62;
      v20 = (float *)(a1 + 472);
      if (v24)
        goto LABEL_156;
      v10 = v82[1];
      if (v82[1] == (void *)9)
      {
        v25 = *(_QWORD *)v82[0] == 0x6461724778614D3CLL && *((_BYTE *)v82[0] + 8) == 62;
        v20 = (float *)(a1 + 152);
        if (v25)
          goto LABEL_156;
        if ((HIBYTE(v82[2]) & 0x80) == 0)
          goto LABEL_155;
      }
    }
    if (v10 != (void *)18)
      goto LABEL_155;
    v7 = (void **)v82[0];
LABEL_148:
    v39 = *v7;
    v40 = v7[1];
    v41 = *((unsigned __int16 *)v7 + 8);
    if (v39 != (void *)0x6E6569646172473CLL || v40 != (void *)0x7079546D726F4E74 || v41 != 15973)
      goto LABEL_155;
    v45 = &v83;
LABEL_167:
    kaldi::ReadToken(a2, 0, (uint64_t)v45);
LABEL_168:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v7 = v82;
  switch(HIBYTE(v82[2]))
  {
    case 9:
      goto LABEL_134;
    case 0xA:
      if (v82[0] == (void *)0x6C6C65436D754E3CLL && LOWORD(v82[1]) == 15987)
        goto LABEL_86;
      if (v82[0] != (void *)0x61654D736169423CLL || LOWORD(v82[1]) != 15982)
        goto LABEL_133;
      goto LABEL_145;
    case 0xB:
      if (v82[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v82 + 3) == (void *)0x3E65676E61527361)
        goto LABEL_121;
      goto LABEL_133;
    case 0xD:
LABEL_104:
      if (v82[0] == (void *)0x74536D617261503CLL && *(void **)((char *)v82 + 5) == (void *)0x3E7665646474536DLL)
        goto LABEL_109;
      goto LABEL_133;
    case 0xF:
LABEL_110:
      v32 = v82[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v82 + 7) == (void *)0x3E66656F43657461;
      v20 = (float *)(a1 + 464);
      if (v32)
        goto LABEL_156;
      goto LABEL_133;
    case 0x12:
      goto LABEL_148;
    case 0x14:
      if (v82[0] != (void *)0x47746567726F463CLL
        || v82[1] != (void *)0x4D73616942657461
        || LODWORD(v82[2]) != 1047421285)
      {
        v7 = v82;
        switch(HIBYTE(v82[2]))
        {
          case 9:
            goto LABEL_134;
          case 0xD:
            goto LABEL_104;
          case 0xF:
            goto LABEL_110;
          case 0x12:
            goto LABEL_148;
          default:
            goto LABEL_155;
        }
      }
      goto LABEL_95;
    case 0x15:
      if (v82[0] != (void *)0x47746567726F463CLL
        || v82[1] != (void *)0x5273616942657461
        || *(void **)((char *)&v82[1] + 5) != (void *)0x3E65676E61527361)
      {
        v7 = v82;
        switch(HIBYTE(v82[2]))
        {
          case 9:
            goto LABEL_134;
          case 0xD:
            goto LABEL_104;
          case 0xF:
            goto LABEL_110;
          case 0x12:
            goto LABEL_148;
          default:
            goto LABEL_155;
        }
      }
      goto LABEL_146;
    case 0x19:
      v36 = v82[0] == (void *)0x7463656A6F72503CLL
         && v82[1] == (void *)0x6E7261654C6E6F69
         && v82[2] == (void *)0x66656F4365746152
         && v83.__r_.__value_.__s.__data_[0] == 62;
      v20 = (float *)(a1 + 468);
      if (v36)
        goto LABEL_156;
      if (HIBYTE(v82[2]) == 18)
      {
        v7 = v82;
        goto LABEL_148;
      }
LABEL_133:
      if (HIBYTE(v82[2]) == 9)
      {
LABEL_134:
        v37 = v82[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v82[1]) == 62;
        v20 = (float *)(a1 + 472);
        if (v37)
          goto LABEL_156;
        if (HIBYTE(v82[2]) == 9)
        {
          v38 = v82[0] == (void *)0x6461724778614D3CLL && LOBYTE(v82[1]) == 62;
          v20 = (float *)(a1 + 152);
          if (v38)
            goto LABEL_156;
        }
      }
LABEL_155:
      v44 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<MaxCell>");
      v20 = (float *)(a1 + 476);
      if (v44)
        goto LABEL_156;
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<RandomSeed>"))
      {
        v26 = &v90;
        goto LABEL_159;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<NoPeep>"))
      {
        *(_BYTE *)(a1 + 208) = 0;
        goto LABEL_168;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<OutputCellValues>"))
      {
        *(_BYTE *)(a1 + 209) = 1;
        goto LABEL_168;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<InitTransformType>"))
      {
        v45 = &v84;
        goto LABEL_167;
      }
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "</Component>"))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v81);
        v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Invalid token ", 14);
        if (SHIBYTE(v82[2]) >= 0)
          v69 = v82;
        else
          v69 = (void **)v82[0];
        if (SHIBYTE(v82[2]) >= 0)
          v70 = HIBYTE(v82[2]);
        else
          v70 = (uint64_t)v82[1];
        v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)". Allowed tokens: ", 18);
        v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v81);
      }
LABEL_170:
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateParams((uint64_t *)a1, v91);
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v84);
      *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v83);
      if (v90 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v90);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v77, a3);
      v47 = *(float *)&v87;
      v48 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
      kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<signed char>>(a3, (kaldi::GaussRandomNumber *)v77, inited, v48, v47);
      v49 = *(float *)&v87;
      v50 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
      kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<signed char>>(a3, (kaldi::GaussRandomNumber *)v77, inited, v50, v49);
      v51 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1) + 16);
      v75 = 0;
      v76 = 0;
      v74 = 0;
      kaldi::Vector<float>::Resize((void **)&v74, v51, 0);
      if ((int)v75 >= 1)
      {
        v52 = 0;
        do
        {
          v53 = *(float *)&v89;
          v54 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
          v55 = v53 + (v54 + -0.5) * v88;
          v56 = (int)v75;
          v74[v52++] = v55;
        }
        while (v52 < v56);
      }
      if ((int)v91 >= 1)
      {
        v57 = v91;
        v58 = &v74[v91];
        do
        {
          v59 = *(float *)&v86;
          v60 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
          v61 = v59 + (v60 + -0.5) * v85;
          *v58++ = v61;
          --v57;
        }
        while (v57);
      }
      if (!*(_QWORD *)(a1 + 200))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v81);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"bias_ thought to be initialized here", 36);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v81);
      }
      v62 = operator new();
      kaldi::CuVector<float>::CuVector(v62, &v74, 0);
      v63 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v62;
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
      if (*(_BYTE *)(a1 + 208))
      {
        v64 = *(float *)&v87;
        v65 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(a3, (kaldi::GaussRandomNumber *)v77, inited, v65, v64);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v66 = *(float *)&v87;
        v67 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
        kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<signed char>>(a3, (kaldi::GaussRandomNumber *)v77, inited, v67, v66);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
      kaldi::Vector<float>::Destroy((uint64_t)&v74);
      if (__p)
      {
        v80 = __p;
        operator delete(__p);
      }
      v81[0] = (void **)&v78;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v81);
      if (SHIBYTE(v82[2]) < 0)
        operator delete(v82[0]);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_155;
  }
}

void sub_1ADA6B434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)va1);
  if (*(char *)(v5 - 185) < 0)
    operator delete(*(void **)(v5 - 208));
  if (*(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  if (*(char *)(v5 - 137) < 0)
    operator delete(*(void **)(v5 - 160));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateParams(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void **v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *__p[2];
  unsigned __int8 v24;
  _QWORD v25[35];

  *((_DWORD *)a1 + 44) = a2;
  v3 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  if (*(_DWORD *)(v3 + 12) > a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"# LSTM cells (", 14);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)") should not be less than output dim (", 38);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, ").");
    goto LABEL_32;
  }
  if (a1[23])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "input_weights_ thought to be un-initialized here");
    goto LABEL_32;
  }
  v4 = (4 * a2);
  v5 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v5, v4, *(unsigned int *)(v3 + 8));
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a1 + 23, v5);
  if (a1[24])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "recurrent_weights_ thought to be un-initialized here");
    goto LABEL_32;
  }
  v6 = (4 * *((_DWORD *)a1 + 44));
  v7 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v8 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v8, v6, *(unsigned int *)(v7 + 12));
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a1 + 24, v8);
  if (a1[25])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "bias_ thought to be un-initialized here");
    goto LABEL_32;
  }
  v9 = (4 * *((_DWORD *)a1 + 44));
  v10 = (_QWORD *)operator new();
  v10[2] = 0;
  v10[3] = 0;
  *v10 = &unk_1E5D341C8;
  v10[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v10, v9, 0);
  v11 = a1[25];
  a1[25] = (uint64_t)v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  if (*((_BYTE *)a1 + 208))
  {
    if (a1[27])
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "peephole_weights_ thought to be un-initialized here");
      goto LABEL_32;
    }
    v12 = (int32x2_t *)operator new();
    kaldi::CuMatrix<float>::CuMatrix(v12, 3, *((unsigned int *)a1 + 44), 0, 0, 0);
    v13 = a1[27];
    a1[27] = (uint64_t)v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  }
  v14 = *a1;
  if (*((_DWORD *)a1 + 44) == *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 12))
  {
    *((_BYTE *)a1 + 224) = 0;
    goto LABEL_15;
  }
  v15 = a1[29];
  *((_BYTE *)a1 + 224) = 1;
  if (v15)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "projection_weights_ thought to be un-initialized here");
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  v16 = (uint64_t)a1 + *(_QWORD *)(v14 - 24);
  v17 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v17, *(unsigned int *)(v16 + 12), *((unsigned int *)a1 + 44));
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a1 + 29, v17);
LABEL_15:
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v25, 2);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Allocated memory for the parameters: ", 37);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 264))(__p, a1);
    if ((v24 & 0x80u) == 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if ((v24 & 0x80u) == 0)
      v20 = v24;
    else
      v20 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
    if ((char)v24 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v25);
  }
}

void sub_1ADA6B8D0()
{
  JUMPOUT(0x1ADA6B8E0);
}

void sub_1ADA6B8EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<signed char>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, kaldi::quasar::Vocab *this, float a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  float v14;
  float v15;
  _QWORD v17[2];
  int v18;

  v10 = kaldi::quasar::Vocab::VocabSize(this);
  v11 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)this);
  kaldi::Matrix<float>::Matrix((uint64_t)v17, v10, v11, 0, 0);
  v12 = 0;
LABEL_2:
  if (v12 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v17))
  {
    for (i = 0; ; ++i)
    {
      if (i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v17))
      {
        ++v12;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0);
          v14 = v15 * a5;
        }
        else
        {
          if (a3 != 1)
            continue;
          v14 = (kaldi::UniformRandomNumber::RandUniform(a1, 0) + -0.5) * (float)(a5 + a5);
        }
      }
      else if (v12 == i)
      {
        v14 = 1.0;
      }
      else
      {
        v14 = 0.0;
      }
      *(float *)(v17[0] + 4 * (int)v12 * v18 + 4 * i) = v14;
    }
  }
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat((uint64_t)this, (uint64_t)v17);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v17);
}

void sub_1ADA6BA64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitData(_QWORD *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitData((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2, a3);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  float *v11;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v19;
  BOOL v22;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  __int128 *v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float *v46;
  int32x2_t *v47;
  uint64_t v48;
  void (***v49)(_QWORD, uint64_t *, uint64_t, uint64_t);
  _QWORD *v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  _QWORD *v58;
  __int128 *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  void *__p[2];
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char v68;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v66 = 0uLL;
    v67 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v66);
    if ((SHIBYTE(v67) & 0x80000000) == 0)
    {
      switch(HIBYTE(v67))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((_QWORD)v66 != 0x6C6C65436D754E3CLL || WORD4(v66) != 15987)
            goto LABEL_150;
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_150;
        case 0xF:
          v24 = (_QWORD)v66 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v66 + 7) == 0x3E66656F43657461;
          v11 = (float *)(a1 + 464);
          if (v24)
            goto LABEL_127;
          if (HIBYTE(v67) != 8)
            goto LABEL_84;
          goto LABEL_97;
        case 0x12:
          if ((_QWORD)v66 == 0x4374757074754F3CLL
            && *((_QWORD *)&v66 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v67 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v67) == 9)
            goto LABEL_119;
          if (HIBYTE(v67) != 18)
            goto LABEL_150;
          v22 = (_QWORD)v66 == 0x6E6569646172473CLL && *((_QWORD *)&v66 + 1) == 0x7079546D726F4E74;
          if (!v22 || (unsigned __int16)v67 != 15973)
            goto LABEL_150;
          goto LABEL_133;
        default:
          if (HIBYTE(v67) != 25)
            goto LABEL_150;
          v19 = (_QWORD)v66 == 0x7463656A6F72503CLL
             && *((_QWORD *)&v66 + 1) == 0x6E7261654C6E6F69
             && v67 == 0x66656F4365746152
             && v68 == 62;
          v11 = (float *)(a1 + 468);
          if (v19)
            goto LABEL_127;
LABEL_84:
          if (HIBYTE(v67) != 9)
            goto LABEL_150;
LABEL_85:
          v25 = (_QWORD)v66 == 0x6D726F4E78614D3CLL && BYTE8(v66) == 62;
          v11 = (float *)(a1 + 472);
          if (v25)
            goto LABEL_127;
          if (HIBYTE(v67) == 8)
            goto LABEL_97;
          if (HIBYTE(v67) != 9)
            goto LABEL_150;
          v26 = (_QWORD)v66 == 0x6C6C654378614D3CLL && BYTE8(v66) == 62;
          v11 = (float *)(a1 + 476);
          if (!v26)
            goto LABEL_119;
          goto LABEL_127;
      }
    }
    v8 = *((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1) == 10
      && (*(_QWORD *)v66 == 0x6C6C65436D754E3CLL ? (v9 = *(unsigned __int16 *)(v66 + 8) == 15987) : (v9 = 0), v9))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176);
    }
    else
    {
      if (*((_QWORD *)&v66 + 1) == 15)
      {
        v10 = *(_QWORD *)v66 == 0x61526E7261654C3CLL && *(_QWORD *)(v66 + 7) == 0x3E66656F43657461;
        v11 = (float *)(a1 + 464);
        if (v10)
          goto LABEL_127;
        v8 = *((_QWORD *)&v66 + 1);
      }
      if (v8 == 25)
      {
        v14 = *(_QWORD *)v66 == 0x7463656A6F72503CLL
           && *(_QWORD *)(v66 + 8) == 0x6E7261654C6E6F69
           && *(_QWORD *)(v66 + 16) == 0x66656F4365746152
           && *(_BYTE *)(v66 + 24) == 62;
        v11 = (float *)(a1 + 468);
        if (v14)
          goto LABEL_127;
        v8 = *((_QWORD *)&v66 + 1);
      }
      if (v8 != 9)
        goto LABEL_47;
      v15 = *(_QWORD *)v66 == 0x6D726F4E78614D3CLL && *(_BYTE *)(v66 + 8) == 62;
      v11 = (float *)(a1 + 472);
      if (v15)
        goto LABEL_127;
      v8 = *((_QWORD *)&v66 + 1);
      if (*((_QWORD *)&v66 + 1) != 9)
        goto LABEL_47;
      v16 = *(_QWORD *)v66 == 0x6C6C654378614D3CLL && *(_BYTE *)(v66 + 8) == 62;
      v11 = (float *)(a1 + 476);
      if (v16)
        goto LABEL_127;
      if ((v67 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v67) == 9)
          goto LABEL_119;
        if (HIBYTE(v67) != 8)
          goto LABEL_150;
LABEL_97:
        if ((_QWORD)v66 != 0x3E706565506F4E3CLL)
        {
          if ((v67 & 0x8000000000000000) == 0)
            goto LABEL_150;
LABEL_100:
          v8 = *((_QWORD *)&v66 + 1);
          if (v8 != 18)
            goto LABEL_120;
LABEL_101:
          if (*(_QWORD *)v66 == 0x4374757074754F3CLL
            && *(_QWORD *)(v66 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v66 + 16) == 15987)
          {
LABEL_132:
            *(_BYTE *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          v8 = *((_QWORD *)&v66 + 1);
          if (*((_QWORD *)&v66 + 1) != 18)
            goto LABEL_120;
          if (*(_QWORD *)v66 == 0x6E6569646172473CLL
            && *(_QWORD *)(v66 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v66 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            v65 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v65) < 0)
              operator delete(__p[0]);
            goto LABEL_128;
          }
          if ((v67 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v67) != 9)
              goto LABEL_150;
LABEL_119:
            v31 = &v66;
          }
          else
          {
LABEL_120:
            if (v8 != 9)
              goto LABEL_150;
            v31 = (__int128 *)v66;
          }
          v32 = *(_QWORD *)v31;
          v33 = *((unsigned __int8 *)v31 + 8);
          v34 = v32 == 0x6461724778614D3CLL && v33 == 62;
          v11 = (float *)(a1 + 152);
          if (!v34)
          {
LABEL_150:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v67 >= 0)
              v59 = &v66;
            else
              v59 = (__int128 *)v66;
            if (v67 >= 0)
              v60 = HIBYTE(v67);
            else
              v60 = *((_QWORD *)&v66 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v11);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v8 != 8)
          goto LABEL_101;
        if (*(_QWORD *)v66 != 0x3E706565506F4E3CLL)
          goto LABEL_100;
      }
      *(_BYTE *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v67) < 0)
      operator delete((void *)v66);
  }
  v35 = *(_DWORD *)(a1 + 176);
  v36 = *(_QWORD *)a1;
  v37 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  if (v35 < v37)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
    v61 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)") should not be less than output dim (", 38);
    v62 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v62, ").");
    goto LABEL_163;
  }
  v38 = *(_QWORD *)(a1 + 184);
  *(_BYTE *)(a1 + 224) = v35 > v37;
  if (v38)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    goto LABEL_163;
  }
  v39 = (4 * v35);
  v40 = a1 + *(_QWORD *)(v36 - 24);
  v41 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v41, v39, *(unsigned int *)(v40 + 8));
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v41);
  v42 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::QuantizedMatrix<signed char>::Read(v42, a2, a3, a4);
  if (*(_QWORD *)(a1 + 192))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "recurrent_weights_ thougth to be un-initialized here");
    goto LABEL_163;
  }
  v43 = (4 * *(_DWORD *)(a1 + 176));
  v44 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v45 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v45, v43, *(unsigned int *)(v44 + 12));
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v45);
  v46 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  kaldi::QuantizedMatrix<signed char>::Read(v46, a2, a3, a4);
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_QWORD *)(a1 + 216))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "peephole_weights_ thougth to be un-initialized here");
      goto LABEL_163;
    }
    v47 = (int32x2_t *)operator new();
    kaldi::CuMatrix<float>::CuMatrix(v47, 3, *(unsigned int *)(a1 + 176), 0, 0, 0);
    v48 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v47;
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
    v49 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t))kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
    (**v49)(v49, a2, a3, a4);
  }
  if (*(_QWORD *)(a1 + 200))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "bias_ thougth to be un-initialized here");
    goto LABEL_163;
  }
  v50 = (_QWORD *)operator new();
  v50[2] = 0;
  v50[3] = 0;
  *v50 = &unk_1E5D341C8;
  v50[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v50, 1, 0);
  v51 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v50;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
  v52 = (void (***)(_QWORD, uint64_t *, uint64_t))kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  (**v52)(v52, a2, a3);
  if (*(_BYTE *)(a1 + 224))
  {
    if (!*(_QWORD *)(a1 + 232))
    {
      v53 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v54 = operator new();
      kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v54, *(unsigned int *)(v53 + 12), *(unsigned int *)(a1 + 176));
      std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v54);
      v55 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrix<signed char>::Read(v55, a2, a3, a4);
      goto LABEL_149;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "projection_weights_ thougth to be un-initialized here");
LABEL_163:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
LABEL_149:
  v56 = *(_QWORD *)a1;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16) = 0;
  return (*(uint64_t (**)(uint64_t))(v56 + 128))(a1);
}

void sub_1ADA6C640()
{
  JUMPOUT(0x1ADA6C648);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  std::string __p;

  kaldi::WriteToken(a2, a3, "<NumCells>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<ProjectionLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxCell>");
  result = kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  if (!*(_BYTE *)(a1 + 208))
    result = kaldi::WriteToken(a2, a3, "<NoPeep>");
  if (*(_BYTE *)(a1 + 209))
    return kaldi::WriteToken(a2, a3, "<OutputCellValues>");
  return result;
}

void sub_1ADA6C7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(_BYTE *a1, _QWORD *a2, uint64_t a3, int a4)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;

  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 128))(a1);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 192))(a1, a2, a3);
  v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<signed char>::Write(v8, a2, a3, a4);
  v9 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<signed char>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3);
  if (a1[224])
  {
    v12 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    kaldi::QuantizedMatrix<signed char>::Write(v12, a2, a3, a4);
  }
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteData((_BYTE *)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1)
{
  kaldi::quasar::Vocab *v2;
  int v3;
  uint64_t v4;
  int v5;
  kaldi::quasar::Vocab *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  kaldi::quasar::Vocab *v12;
  int v13;
  uint64_t v14;

  v2 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  v3 = kaldi::quasar::Vocab::VocabSize(v2);
  v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4) * v3;
  v6 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  v7 = kaldi::quasar::Vocab::VocabSize(v6);
  v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  v9 = v5 + kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  v10 = (v9 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1) + 16));
  if (*(_BYTE *)(a1 + 208))
  {
    v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 20);
    v10 = (v10
                       + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1)
                                   + 16)
                       * v11);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v12 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    v13 = kaldi::quasar::Vocab::VocabSize(v12);
    v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    return v10 + kaldi::QuantizedMatrixBase<short>::NumCols(v14) * v13;
  }
  return v10;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams((uint64_t)a1 + *(_QWORD *)(*a1 - 192));
}

const void **kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(_BYTE *a1, void **a2)
{
  uint64_t v4;
  kaldi::quasar::Vocab *v5;
  int v6;
  uint64_t v7;
  int v8;
  kaldi::quasar::Vocab *v9;
  int v10;
  uint64_t v11;
  int v12;
  float *v13;
  int v14;
  float *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  const void **v21;
  const void **result;
  int v23;
  kaldi::quasar::Vocab *v24;
  int v25;
  uint64_t v26;
  int v27;
  float *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  v6 = kaldi::quasar::Vocab::VocabSize(v5);
  v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  v8 = kaldi::QuantizedMatrixBase<short>::NumCols(v7) * v6;
  v9 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  v10 = kaldi::quasar::Vocab::VocabSize(v9);
  v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  v30 = 0;
  v31 = 0;
  v12 = kaldi::QuantizedMatrixBase<short>::NumCols(v11) * v10;
  v29 = (char *)*a2;
  LODWORD(v30) = v8;
  v13 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v29, v13);
  v30 = 0;
  v31 = 0;
  v14 = v12 + v8;
  v29 = (char *)*a2 + 4 * v8;
  LODWORD(v30) = v12;
  v15 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v29, v15);
  if (a1[208])
  {
    v16 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    v17 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v16;
    v30 = 0;
    v31 = 0;
    v18 = v17 + v14;
    v29 = (char *)*a2 + 4 * v14;
    LODWORD(v30) = v17;
    v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v29, v19);
    v14 = v18;
  }
  v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  v30 = 0;
  v31 = 0;
  v29 = (char *)*a2 + 4 * v14;
  LODWORD(v30) = v20;
  v21 = (const void **)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  result = kaldi::CuVectorBase<float>::CopyToVec<float>(v21, (uint64_t)&v29);
  if (a1[224])
  {
    v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v14;
    v24 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    v25 = kaldi::quasar::Vocab::VocabSize(v24);
    v26 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    v27 = kaldi::QuantizedMatrixBase<short>::NumCols(v26);
    v30 = 0;
    v31 = 0;
    v29 = (char *)*a2 + 4 * v23;
    v30 = (v27 * v25);
    v28 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    return (const void **)kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v29, v28);
  }
  return result;
}

const void **`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(_QWORD *a1, void **a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetParams((_BYTE *)a1 + *(_QWORD *)(*a1 - 200), a2);
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(_BYTE *a1, char **a2)
{
  kaldi::quasar::Vocab *v4;
  int v5;
  uint64_t v6;
  int v7;
  kaldi::quasar::Vocab *v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  void *v18;
  int v19;
  void *result;
  int v21;
  kaldi::quasar::Vocab *v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  v4 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  v5 = kaldi::quasar::Vocab::VocabSize(v4);
  v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  v7 = kaldi::QuantizedMatrixBase<short>::NumCols(v6) * v5;
  v8 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  v9 = kaldi::quasar::Vocab::VocabSize(v8);
  v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  v11 = kaldi::QuantizedMatrixBase<short>::NumCols(v10) * v9;
  v12 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  v28 = 0;
  v29 = 0;
  v27 = *a2;
  LODWORD(v28) = v7;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v12, &v27);
  v13 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  v28 = 0;
  v29 = 0;
  v14 = v11 + v7;
  v27 = &(*a2)[4 * v7];
  LODWORD(v28) = v11;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v13, &v27);
  if (a1[208])
  {
    v15 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    v16 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v15;
    v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    v28 = 0;
    v29 = 0;
    v27 = &(*a2)[4 * v14];
    LODWORD(v28) = v16;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v17, &v27);
    v14 += v16;
  }
  v18 = (void *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  v28 = 0;
  v29 = 0;
  v27 = &(*a2)[4 * v14];
  LODWORD(v28) = v19;
  result = kaldi::CuVectorBase<float>::CopyFromVec<float>(v18, (uint64_t)&v27);
  if (a1[224])
  {
    v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v14;
    v22 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    v23 = kaldi::quasar::Vocab::VocabSize(v22);
    v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    v25 = kaldi::QuantizedMatrixBase<short>::NumCols(v24) * v23;
    v26 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    v28 = 0;
    v29 = 0;
    v27 = &(*a2)[4 * v21];
    LODWORD(v28) = v25;
    return (void *)kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v26, &v27);
  }
  return result;
}

void *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(_QWORD *a1, char **a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams((_BYTE *)a1 + *(_QWORD *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1)
{
  int *v2;
  float v3;
  int *v4;
  float v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;

  v2 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  v3 = kaldi::QuantizedMatrixBase<signed char>::Sum(v2);
  v4 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  v5 = v3 + kaldi::QuantizedMatrixBase<signed char>::Sum(v4);
  if (*(_BYTE *)(a1 + 208))
  {
    v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
    v5 = v5 + kaldi::CuMatrixBase<float>::Sum(v6);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v7 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    v5 = v5 + kaldi::QuantizedMatrixBase<signed char>::Sum(v7);
  }
  v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  return v5 + kaldi::CuVectorBase<float>::Sum(v8);
}

float `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams((uint64_t)a1 + *(_QWORD *)(*a1 - 224));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1)
{
  kaldi::quasar::Vocab *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t v6[6];

  v2 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  v3 = kaldi::quasar::Vocab::VocabSize(v2);
  v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4);
  kaldi::CuMatrix<float>::CuMatrix(v6, v3, v5, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v6);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

void sub_1ADA6D03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  kaldi::quasar::Vocab *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a4);
  v5 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  v6 = kaldi::quasar::Vocab::VocabSize(v5);
  v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  v8 = kaldi::QuantizedMatrixBase<short>::NumCols(v7);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)va, v6, v8, 1, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)va);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

uint64_t sub_1ADA6D094()
{
  uint64_t v0;
  float v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  kaldi::quasar::Vocab *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  int32x2_t v13[14];

  if (*(_BYTE *)(v0 + 208))
  {
    v2 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0) + 20);
    v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    kaldi::CuMatrix<float>::Resize(v13, v2, *(unsigned int *)(v3 + 16), 1, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v13);
    v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    kaldi::CuMatrixBase<float>::AddMat(v4, (uint64_t)v13, 111, v1, 1.0);
  }
  v5 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(v0) + 16);
  v12[0] = &unk_1E5D341C8;
  memset(&v12[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v12, v5, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v12);
  v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(v0);
  kaldi::CuVectorBase<float>::AddVec(v6, (uint64_t)v12, v1, 1.0);
  if (*(_BYTE *)(v0 + 224))
  {
    v7 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    v8 = kaldi::quasar::Vocab::VocabSize(v7);
    v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    v10 = kaldi::QuantizedMatrixBase<short>::NumCols(v9);
    kaldi::CuMatrix<float>::Resize(v13, v8, v10, 1, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v13);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    kaldi::QuantizedMatrixBase<signed char>::AddMat();
  }
  v12[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v12);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v13);
}

void sub_1ADA6D1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(_QWORD *a1)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams((uint64_t)a1 + *(_QWORD *)(*a1 - 232));
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(_BYTE *a1, uint64_t a2, uint64_t a3, void **a4)
{
  const void *v8;
  void *v9;
  uint64_t v10;
  kaldi::quasar::Vocab *v11;
  int v12;
  uint64_t v13;
  int v14;
  kaldi::quasar::Vocab *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  const void **v28;
  int v29;
  kaldi::quasar::Vocab *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;

  v8 = (const void *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 136))(a1);
  if (v8)
  else
    v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 336))(v9, a2, a3, 0, 0);
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize(a4, v10, 0);
  v11 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  v12 = kaldi::quasar::Vocab::VocabSize(v11);
  v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  v14 = kaldi::QuantizedMatrixBase<short>::NumCols(v13) * v12;
  v15 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  v16 = kaldi::quasar::Vocab::VocabSize(v15);
  v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  v18 = kaldi::QuantizedMatrixBase<short>::NumCols(v17);
  v40 = 0;
  v41 = 0;
  v39 = *a4;
  LODWORD(v40) = v14;
  v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v36, v19, 111);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v39, (uint64_t)&v36);
  v20 = v18 * v16;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v36);
  v37 = 0;
  v38 = 0;
  v21 = v20 + v14;
  v36 = (uint64_t)*a4 + 4 * v14;
  LODWORD(v37) = v20;
  v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v36, v22);
  if (a1[208])
  {
    v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    v24 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v23;
    v37 = 0;
    v38 = 0;
    v25 = v24 + v21;
    v36 = (uint64_t)*a4 + 4 * v21;
    LODWORD(v37) = v24;
    v26 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v36, v26);
    v21 = v25;
  }
  v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  v37 = 0;
  v38 = 0;
  v36 = (uint64_t)*a4 + 4 * v21;
  LODWORD(v37) = v27;
  v28 = (const void **)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v28, (uint64_t)&v36);
  if (a1[224])
  {
    v29 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v21;
    v30 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    v31 = kaldi::quasar::Vocab::VocabSize(v30);
    v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    v33 = kaldi::QuantizedMatrixBase<short>::NumCols(v32);
    v37 = 0;
    v38 = 0;
    v36 = (uint64_t)*a4 + 4 * v29;
    v37 = (v33 * v31);
    v34 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v36, v34);
  }
  return (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 8))(v9);
}

void sub_1ADA6D46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient((_BYTE *)a1 + *(_QWORD *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(_QWORD *a1, int a2)
{
  float *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;

  v2 = (float *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if (!*((_BYTE *)v2 + 84))
    return v2[14];
  v3 = a1[63];
  v4 = a1[64] - v3;
  if (!v4)
    return NAN;
  v5 = v4 >> 2;
  if ((int)v5 <= a2)
    return NAN;
  v6 = v5 - 1;
  if (a2 >= 0)
    v6 = a2;
  return *(float *)(v3 + 4 * v6);
}

float `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(_QWORD *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info(uint64_t a1)
{
  _QWORD *v2;
  kaldi::quasar::Vocab *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  kaldi::quasar::Vocab *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  kaldi::quasar::Vocab *v28;
  void **v29;
  uint64_t v30;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  unsigned __int8 v37;
  void *v38[2];
  unsigned __int8 v39;
  void *v40[2];
  unsigned __int8 v41;
  void *v42[2];
  unsigned __int8 v43;
  _QWORD v44[11];
  char v45;
  uint64_t v46;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v44);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 192))(a1, v44, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Input weights:", 16);
  v3 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<signed char>(v3);
  if ((v43 & 0x80u) == 0)
    v4 = v42;
  else
    v4 = (void **)v42[0];
  if ((v43 & 0x80u) == 0)
    v5 = v43;
  else
    v5 = (uint64_t)v42[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  v8 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<signed char>(v8);
  if ((v41 & 0x80u) == 0)
    v9 = v40;
  else
    v9 = (void **)v40[0];
  if ((v41 & 0x80u) == 0)
    v10 = v41;
  else
    v10 = (uint64_t)v40[1];
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13);
  if ((v39 & 0x80u) == 0)
    v14 = v38;
  else
    v14 = (void **)v38[0];
  if ((v39 & 0x80u) == 0)
    v15 = v39;
  else
    v15 = (uint64_t)v38[1];
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n Forget gate bias:", 19);
  v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  v19 = *(int *)(a1 + 176);
  v34 = 0;
  v20 = *(_QWORD *)(v18 + 8) + 4 * v19;
  v32 = &unk_1E5D29D70;
  v33 = v20;
  LODWORD(v34) = v19;
  v35 = *(_QWORD *)(v18 + 24);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)&v32);
  if ((v37 & 0x80u) == 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  if ((v37 & 0x80u) == 0)
    v22 = v37;
  else
    v22 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v21, v22);
  if ((char)v37 < 0)
    operator delete(__p[0]);
  if ((char)v39 < 0)
    operator delete(v38[0]);
  if ((char)v41 < 0)
    operator delete(v40[0]);
  if ((char)v43 < 0)
    operator delete(v42[0]);
  if (*(_BYTE *)(a1 + 208))
  {
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Peephole weights:", 19);
    v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v24);
    v25 = v34 >= 0 ? &v32 : (void **)v32;
    v26 = v34 >= 0 ? HIBYTE(v34) : v33;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Projection weights:", 21);
    v28 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<signed char>(v28);
    v29 = v34 >= 0 ? &v32 : (void **)v32;
    v30 = v34 >= 0 ? HIBYTE(v34) : v33;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
  }
  std::stringbuf::str();
  v44[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v44[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v45 < 0)
    operator delete((void *)v44[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v46);
}

void sub_1ADA6DB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info((uint64_t)a1 + *(_QWORD *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  void **v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  void **v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  uint64_t v41;
  void **v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  uint64_t v48;
  std::string *v49;
  std::string::size_type size;
  std::string *v51;
  __int128 v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  uint64_t v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  void *__p[2];
  unsigned __int8 v69;
  void *v70[2];
  unsigned __int8 v71;
  void *v72[2];
  unsigned __int8 v73;
  void *v74[2];
  unsigned __int8 v75;
  void *v76[2];
  unsigned __int8 v77;
  void *v78[2];
  unsigned __int8 v79;
  void *v80[2];
  unsigned __int8 v81;
  void *v82[2];
  unsigned __int8 v83;
  void *v84[2];
  unsigned __int8 v85;
  void *v86[2];
  unsigned __int8 v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  __int128 v98;
  int64_t v99;
  int v100;
  std::string v101;

  if (*(_BYTE *)(a1 + 528))
  {
    memset(&v101, 0, sizeof(v101));
    v100 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v88, "\n For batch ");
        kaldi::quasar::to_string<int>();
        if ((v87 & 0x80u) == 0)
          v3 = v86;
        else
          v3 = (void **)v86[0];
        if ((v87 & 0x80u) == 0)
          v4 = v87;
        else
          v4 = (std::string::size_type)v86[1];
        v5 = std::string::append(&v88, (const std::string::value_type *)v3, v4);
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v84, ": ");
        if ((v85 & 0x80u) == 0)
          v7 = v84;
        else
          v7 = (void **)v84[0];
        if ((v85 & 0x80u) == 0)
          v8 = v85;
        else
          v8 = (std::string::size_type)v84[1];
        v9 = std::string::append(&v89, (const std::string::value_type *)v7, v8);
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Number of cells : ");
        if ((v83 & 0x80u) == 0)
          v11 = v82;
        else
          v11 = (void **)v82[0];
        if ((v83 & 0x80u) == 0)
          v12 = v83;
        else
          v12 = (std::string::size_type)v82[1];
        v13 = std::string::append(&v90, (const std::string::value_type *)v11, v12);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::quasar::to_string<int>();
        if ((v81 & 0x80u) == 0)
          v15 = v80;
        else
          v15 = (void **)v80[0];
        if ((v81 & 0x80u) == 0)
          v16 = v81;
        else
          v16 = (std::string::size_type)v80[1];
        v17 = std::string::append(&v91, (const std::string::value_type *)v15, v16);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Input weights gradient: ");
        if ((v79 & 0x80u) == 0)
          v19 = v78;
        else
          v19 = (void **)v78[0];
        if ((v79 & 0x80u) == 0)
          v20 = v79;
        else
          v20 = (std::string::size_type)v78[1];
        v21 = std::string::append(&v92, (const std::string::value_type *)v19, v20);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v77 & 0x80u) == 0)
          v24 = v76;
        else
          v24 = (void **)v76[0];
        if ((v77 & 0x80u) == 0)
          v25 = v77;
        else
          v25 = (std::string::size_type)v76[1];
        v26 = std::string::append(&v93, (const std::string::value_type *)v24, v25);
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Recurrent weights gradient: ");
        if ((v75 & 0x80u) == 0)
          v28 = v74;
        else
          v28 = (void **)v74[0];
        if ((v75 & 0x80u) == 0)
          v29 = v75;
        else
          v29 = (std::string::size_type)v74[1];
        v30 = std::string::append(&v94, (const std::string::value_type *)v28, v29);
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v73 & 0x80u) == 0)
          v33 = v72;
        else
          v33 = (void **)v72[0];
        if ((v73 & 0x80u) == 0)
          v34 = v73;
        else
          v34 = (std::string::size_type)v72[1];
        v35 = std::string::append(&v95, (const std::string::value_type *)v33, v34);
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v70, "\n  Bias gradient: ");
        if ((v71 & 0x80u) == 0)
          v37 = v70;
        else
          v37 = (void **)v70[0];
        if ((v71 & 0x80u) == 0)
          v38 = v71;
        else
          v38 = (std::string::size_type)v70[1];
        v39 = std::string::append(&v96, (const std::string::value_type *)v37, v38);
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        v41 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v41);
        if ((v69 & 0x80u) == 0)
          v42 = __p;
        else
          v42 = (void **)__p[0];
        if ((v69 & 0x80u) == 0)
          v43 = v69;
        else
          v43 = (std::string::size_type)__p[1];
        v44 = std::string::append(&v97, (const std::string::value_type *)v42, v43);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v99 = v44->__r_.__value_.__r.__words[2];
        v98 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (v99 >= 0)
          v46 = (const std::string::value_type *)&v98;
        else
          v46 = (const std::string::value_type *)v98;
        if (v99 >= 0)
          v47 = HIBYTE(v99);
        else
          v47 = *((_QWORD *)&v98 + 1);
        std::string::append(&v101, v46, v47);
        if (SHIBYTE(v99) < 0)
          operator delete((void *)v98);
        if ((char)v69 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if ((char)v71 < 0)
          operator delete(v70[0]);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((char)v73 < 0)
          operator delete(v72[0]);
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        if ((char)v75 < 0)
          operator delete(v74[0]);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        if ((char)v77 < 0)
          operator delete(v76[0]);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        if ((char)v79 < 0)
          operator delete(v78[0]);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if ((char)v81 < 0)
          operator delete(v80[0]);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        if ((char)v83 < 0)
          operator delete(v82[0]);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        if ((char)v85 < 0)
          operator delete(v84[0]);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if ((char)v87 < 0)
          operator delete(v86[0]);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (*(_BYTE *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v97, "\n  Peephole weights gradient: ");
          v48 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v100);
          kaldi::nnet1::MomentStatistics<float>(v48);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v49 = &v96;
          else
            v49 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            size = v96.__r_.__value_.__l.__size_;
          v51 = std::string::append(&v97, (const std::string::value_type *)v49, size);
          v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v99 = v51->__r_.__value_.__r.__words[2];
          v98 = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          if (v99 >= 0)
            v53 = (const std::string::value_type *)&v98;
          else
            v53 = (const std::string::value_type *)v98;
          if (v99 >= 0)
            v54 = HIBYTE(v99);
          else
            v54 = *((_QWORD *)&v98 + 1);
          std::string::append(&v101, v53, v54);
          if (SHIBYTE(v99) < 0)
            operator delete((void *)v98);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
        }
        if (*(_BYTE *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v97, "\n  Projection weights gradient: ");
          v55 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v100);
          kaldi::nnet1::MomentStatistics<float>(v55);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v56 = &v96;
          else
            v56 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v57 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            v57 = v96.__r_.__value_.__l.__size_;
          v58 = std::string::append(&v97, (const std::string::value_type *)v56, v57);
          v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v99 = v58->__r_.__value_.__r.__words[2];
          v98 = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          if (v99 >= 0)
            v60 = (const std::string::value_type *)&v98;
          else
            v60 = (const std::string::value_type *)v98;
          if (v99 >= 0)
            v61 = HIBYTE(v99);
          else
            v61 = *((_QWORD *)&v98 + 1);
          std::string::append(&v101, v60, v61);
          if (SHIBYTE(v99) < 0)
            operator delete((void *)v98);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
        }
        ++v100;
      }
      while (v100 < *(_DWORD *)(a1 + 80));
    }
    v62 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v98, "\n");
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v101;
    else
      v63 = (std::string *)v101.__r_.__value_.__r.__words[0];
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    else
      v64 = v101.__r_.__value_.__l.__size_;
    v65 = std::string::insert(v62, 0, (const std::string::value_type *)v63, v64);
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v65->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v99) < 0)
      operator delete((void *)v98);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_1ADA6E30C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  void **v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  void **v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type size;
  std::string *v47;
  __int128 v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  void *__p[2];
  unsigned __int8 v57;
  void *v58[2];
  unsigned __int8 v59;
  void *v60[2];
  unsigned __int8 v61;
  void *v62[2];
  unsigned __int8 v63;
  void *v64[2];
  unsigned __int8 v65;
  void *v66[2];
  unsigned __int8 v67;
  void *v68[2];
  unsigned __int8 v69;
  void *v70[2];
  unsigned __int8 v71;
  void *v72[2];
  unsigned __int8 v73;
  void *v74[2];
  unsigned __int8 v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  __int128 v86;
  int64_t v87;
  int v88;
  std::string v89;

  memset(&v89, 0, sizeof(v89));
  v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v75 & 0x80u) == 0)
        v3 = v74;
      else
        v3 = (void **)v74[0];
      if ((v75 & 0x80u) == 0)
        v4 = v75;
      else
        v4 = (std::string::size_type)v74[1];
      v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0)
        v7 = v72;
      else
        v7 = (void **)v72[0];
      if ((v73 & 0x80u) == 0)
        v8 = v73;
      else
        v8 = (std::string::size_type)v72[1];
      v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0)
        v11 = v70;
      else
        v11 = (void **)v70[0];
      if ((v71 & 0x80u) == 0)
        v12 = v71;
      else
        v12 = (std::string::size_type)v70[1];
      v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0)
        v15 = v68;
      else
        v15 = (void **)v68[0];
      if ((v69 & 0x80u) == 0)
        v16 = v69;
      else
        v16 = (std::string::size_type)v68[1];
      v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0)
        v19 = v66;
      else
        v19 = (void **)v66[0];
      if ((v67 & 0x80u) == 0)
        v20 = v67;
      else
        v20 = (std::string::size_type)v66[1];
      v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0)
        v23 = v64;
      else
        v23 = (void **)v64[0];
      if ((v65 & 0x80u) == 0)
        v24 = v65;
      else
        v24 = (std::string::size_type)v64[1];
      v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0)
        v27 = v62;
      else
        v27 = (void **)v62[0];
      if ((v63 & 0x80u) == 0)
        v28 = v63;
      else
        v28 = (std::string::size_type)v62[1];
      v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0)
        v31 = v60;
      else
        v31 = (void **)v60[0];
      if ((v61 & 0x80u) == 0)
        v32 = v61;
      else
        v32 = (std::string::size_type)v60[1];
      v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0)
        v35 = v58;
      else
        v35 = (void **)v58[0];
      if ((v59 & 0x80u) == 0)
        v36 = v59;
      else
        v36 = (std::string::size_type)v58[1];
      v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0)
        v39 = __p;
      else
        v39 = (void **)__p[0];
      if ((v57 & 0x80u) == 0)
        v40 = v57;
      else
        v40 = (std::string::size_type)__p[1];
      v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v87 = v41->__r_.__value_.__r.__words[2];
      v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0)
        v43 = (const std::string::value_type *)&v86;
      else
        v43 = (const std::string::value_type *)v86;
      if (v87 >= 0)
        v44 = HIBYTE(v87);
      else
        v44 = *((_QWORD *)&v86 + 1);
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0)
        operator delete((void *)v86);
      if ((char)v57 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      if ((char)v59 < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      if ((char)v63 < 0)
        operator delete(v62[0]);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if ((char)v65 < 0)
        operator delete(v64[0]);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      if ((char)v67 < 0)
        operator delete(v66[0]);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if ((char)v69 < 0)
        operator delete(v68[0]);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if ((char)v71 < 0)
        operator delete(v70[0]);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if ((char)v73 < 0)
        operator delete(v72[0]);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if ((char)v75 < 0)
        operator delete(v74[0]);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &v84;
        else
          v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        else
          size = v84.__r_.__value_.__l.__size_;
        v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v87 = v47->__r_.__value_.__r.__words[2];
        v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0)
          v49 = (const std::string::value_type *)&v86;
        else
          v49 = (const std::string::value_type *)v86;
        if (v87 >= 0)
          v50 = HIBYTE(v87);
        else
          v50 = *((_QWORD *)&v86 + 1);
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0)
          operator delete((void *)v86);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v89;
  else
    v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  else
    v53 = v89.__r_.__value_.__l.__size_;
  v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0)
    operator delete((void *)v86);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
}

void sub_1ADA6EBDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1ADA6EDE8()
{
  JUMPOUT(0x1ADA6ED10);
}

void sub_1ADA6EDF0()
{
  JUMPOUT(0x1ADA6ED20);
}

void sub_1ADA6EDF8()
{
  JUMPOUT(0x1ADA6ED30);
}

void sub_1ADA6EE00()
{
  JUMPOUT(0x1ADA6ED40);
}

void sub_1ADA6EE08()
{
  JUMPOUT(0x1ADA6ED50);
}

void sub_1ADA6EE10()
{
  JUMPOUT(0x1ADA6ED60);
}

void sub_1ADA6EE18()
{
  JUMPOUT(0x1ADA6ED70);
}

void sub_1ADA6EE20()
{
  JUMPOUT(0x1ADA6ED80);
}

void sub_1ADA6EE28()
{
  JUMPOUT(0x1ADA6ED90);
}

void sub_1ADA6EE30()
{
  JUMPOUT(0x1ADA6EDA0);
}

void sub_1ADA6EE38()
{
  JUMPOUT(0x1ADA6EDB0);
}

void sub_1ADA6EE40()
{
  JUMPOUT(0x1ADA6EDC0);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoPropagate(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoPropagate((uint64_t)a1 + *(_QWORD *)(*a1 - 96), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type size;
  std::string *v39;
  __int128 v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  void *__p[2];
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  void *v52[2];
  unsigned __int8 v53;
  void *v54[2];
  unsigned __int8 v55;
  void *v56[2];
  unsigned __int8 v57;
  void *v58[2];
  unsigned __int8 v59;
  void *v60[2];
  unsigned __int8 v61;
  void *v62[2];
  unsigned __int8 v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  __int128 v72;
  int64_t v73;
  int v74;
  std::string v75;

  memset(&v75, 0, sizeof(v75));
  v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v63 & 0x80u) == 0)
        v3 = v62;
      else
        v3 = (void **)v62[0];
      if ((v63 & 0x80u) == 0)
        v4 = v63;
      else
        v4 = (std::string::size_type)v62[1];
      v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0)
        v7 = v60;
      else
        v7 = (void **)v60[0];
      if ((v61 & 0x80u) == 0)
        v8 = v61;
      else
        v8 = (std::string::size_type)v60[1];
      v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0)
        v11 = v58;
      else
        v11 = (void **)v58[0];
      if ((v59 & 0x80u) == 0)
        v12 = v59;
      else
        v12 = (std::string::size_type)v58[1];
      v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0)
        v15 = v56;
      else
        v15 = (void **)v56[0];
      if ((v57 & 0x80u) == 0)
        v16 = v57;
      else
        v16 = (std::string::size_type)v56[1];
      v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0)
        v19 = v54;
      else
        v19 = (void **)v54[0];
      if ((v55 & 0x80u) == 0)
        v20 = v55;
      else
        v20 = (std::string::size_type)v54[1];
      v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0)
        v23 = v52;
      else
        v23 = (void **)v52[0];
      if ((v53 & 0x80u) == 0)
        v24 = v53;
      else
        v24 = (std::string::size_type)v52[1];
      v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0)
        v27 = v50;
      else
        v27 = (void **)v50[0];
      if ((v51 & 0x80u) == 0)
        v28 = v51;
      else
        v28 = (std::string::size_type)v50[1];
      v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      if ((v49 & 0x80u) == 0)
        v32 = v49;
      else
        v32 = (std::string::size_type)__p[1];
      v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v73 = v33->__r_.__value_.__r.__words[2];
      v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0)
        v35 = (const std::string::value_type *)&v72;
      else
        v35 = (const std::string::value_type *)v72;
      if (v73 >= 0)
        v36 = HIBYTE(v73);
      else
        v36 = *((_QWORD *)&v72 + 1);
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0)
        operator delete((void *)v72);
      if ((char)v49 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if ((char)v51 < 0)
        operator delete(v50[0]);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if ((char)v53 < 0)
        operator delete(v52[0]);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if ((char)v55 < 0)
        operator delete(v54[0]);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if ((char)v57 < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if ((char)v59 < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if ((char)v63 < 0)
        operator delete(v62[0]);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v70;
        else
          v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        else
          size = v70.__r_.__value_.__l.__size_;
        v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v73 = v39->__r_.__value_.__r.__words[2];
        v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0)
          v41 = (const std::string::value_type *)&v72;
        else
          v41 = (const std::string::value_type *)v72;
        if (v73 >= 0)
          v42 = HIBYTE(v73);
        else
          v42 = *((_QWORD *)&v72 + 1);
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0)
          operator delete((void *)v72);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v75;
  else
    v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  else
    v45 = v75.__r_.__value_.__l.__size_;
  v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0)
    operator delete((void *)v72);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
}

void sub_1ADA6F3BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1ADA6F588()
{
  JUMPOUT(0x1ADA6F4F0);
}

void sub_1ADA6F590()
{
  JUMPOUT(0x1ADA6F500);
}

void sub_1ADA6F598()
{
  JUMPOUT(0x1ADA6F510);
}

void sub_1ADA6F5A0()
{
  JUMPOUT(0x1ADA6F520);
}

void sub_1ADA6F5A8()
{
  JUMPOUT(0x1ADA6F530);
}

void sub_1ADA6F5B0()
{
  JUMPOUT(0x1ADA6F540);
}

void sub_1ADA6F5B8()
{
  JUMPOUT(0x1ADA6F550);
}

void sub_1ADA6F5C0()
{
  JUMPOUT(0x1ADA6F560);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoBackPropagate(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoBackPropagate((uint64_t)a1 + *(_QWORD *)(*a1 - 104), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t *v15;
  uint64_t v16;
  kaldi::quasar::Vocab *v17;
  double v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  kaldi::quasar::Vocab *v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  float v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  kaldi::quasar::Vocab *v122;
  double v123;
  int *v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  __int128 v133;
  __int128 v134;
  void *v135;
  __int128 v136;
  __int128 v137;
  void *v138;
  __int128 v139;
  __int128 v140;
  void *v141;
  __int128 v142;
  __int128 v143;
  void *v144;
  __int128 v145;
  __int128 v146;
  void *v147;
  __int128 v148;
  __int128 v149;
  void *v150;
  __int128 v151;
  __int128 v152;
  void *v153;
  __int128 v154;
  __int128 v155;
  void *v156;
  __int128 v157;
  __int128 v158;
  void *v159;
  __int128 v160;
  __int128 v161;

  v8 = *(unsigned int *)(a2 + 20);
  v9 = *(unsigned int *)(a1 + 96);
  v128 = ((int)v8 / (int)v9);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v159, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v159, (uint64_t)"Running forward propagation for batch size = ", 45);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v159);
  }
  v13 = *(_QWORD *)(a3 + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers(a1, a4, v8, v13);
  v14 = *(_QWORD *)(a1 + 104);
  v124 = (int *)a3;
  v125 = a4;
  if (*(_QWORD *)(a1 + 112) == v14 || *(int *)(v14 + 32 * a4 + 16) < 1)
  {
    v126 = 0;
  }
  else
  {
    v15 = (int32x2_t *)(*(_QWORD *)(a1 + 128) + 48 * a4);
    v15[4] = (int32x2_t)v13;
    v126 = 1;
    kaldi::CuMatrix<float>::Resize(v15, v9, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 16), 1, 0);
  }
  v131 = a4;
  v16 = *(_QWORD *)(a1 + 248) + 48 * a4;
  v129 = *(_QWORD *)(a1 + 344) + 48 * a4;
  v17 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  LODWORD(v18) = 1.0;
  kaldi::CuMatrixBase<float>::AddMatMat<signed char>(v16, a2, 111, v17, 112, v18, 0.0);
  v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  kaldi::CuMatrixBase<float>::AddVecToRows(v16, v19, 1.0, 1.0);
  if ((int)v128 >= 1)
  {
    v20 = 0;
    v21 = 0;
    v127 = a1 + 12;
    v22 = -(uint64_t)(int)v9;
    while (1)
    {
      v130 = v22;
      v23 = *(_DWORD *)(v16 + 24);
      v24 = *(_QWORD *)(v16 + 8) + 4 * (int)(v23 * v20);
      v25 = *(_DWORD *)(v16 + 28) - v23 * v20;
      v26 = *(_QWORD *)(v16 + 32);
      DWORD2(v160) = *(_DWORD *)(a1 + 176);
      HIDWORD(v160) = v9;
      *(_QWORD *)&v161 = __PAIR64__(v25, v23);
      *((_QWORD *)&v161 + 1) = v26;
      *(_QWORD *)&v160 = v24;
      v159 = &unk_1E5D29D40;
      v27 = *(_DWORD *)(v16 + 24);
      v28 = *(_QWORD *)(v16 + 8) + 4 * (int)(v27 * v20) + 4 * DWORD2(v160);
      v29 = *(_DWORD *)(v16 + 28) - DWORD2(v160) - v27 * v20;
      v30 = *(_QWORD *)(v16 + 32);
      *((_QWORD *)&v157 + 1) = __PAIR64__(v9, DWORD2(v160));
      *(_QWORD *)&v158 = __PAIR64__(v29, v27);
      *((_QWORD *)&v158 + 1) = v30;
      v156 = &unk_1E5D29D40;
      *(_QWORD *)&v157 = v28;
      v31 = *(_DWORD *)(v16 + 24);
      v32 = *(_QWORD *)(v16 + 8) + 4 * (int)(v31 * v20) + 4 * (3 * DWORD2(v160));
      LODWORD(v28) = *(_DWORD *)(v16 + 28) - v31 * v20 - 3 * DWORD2(v160);
      v33 = *(_QWORD *)(v16 + 32);
      *((_QWORD *)&v154 + 1) = __PAIR64__(v9, DWORD2(v160));
      *(_QWORD *)&v155 = __PAIR64__(v28, v31);
      *((_QWORD *)&v155 + 1) = v33;
      v153 = &unk_1E5D29D40;
      *(_QWORD *)&v154 = v32;
      v34 = *(_QWORD *)(a1 + 272) + 48 * (int)v131;
      LODWORD(v32) = *(_DWORD *)(v34 + 16);
      LODWORD(v33) = *(_DWORD *)(v34 + 24);
      v35 = *(_QWORD *)(v34 + 8) + 4 * (int)(v33 * v20);
      v36 = *(_DWORD *)(v34 + 28) - v33 * v20;
      v37 = *(_QWORD *)(v34 + 32);
      *((_QWORD *)&v151 + 1) = __PAIR64__(v9, v32);
      *(_QWORD *)&v152 = __PAIR64__(v36, v33);
      *((_QWORD *)&v152 + 1) = v37;
      v150 = &unk_1E5D29D40;
      *(_QWORD *)&v151 = v35;
      v148 = 0u;
      v149 = 0u;
      v147 = &unk_1E5D29D40;
      v145 = 0u;
      v146 = 0u;
      v144 = &unk_1E5D29D40;
      if (!v21)
        break;
      if (!v126)
      {
        v74 = *(_DWORD *)(v129 + 16);
        v75 = *(_DWORD *)(v129 + 24);
        v76 = *(_DWORD *)(v129 + 28) - v75 * (v20 - v9);
        v77 = *(_QWORD *)(v129 + 32);
        *(_QWORD *)&v148 = *(_QWORD *)(v129 + 8) + 4 * (int)(v75 * (v20 - v9));
        *((_QWORD *)&v148 + 1) = __PAIR64__(v9, v74);
        *(_QWORD *)&v149 = __PAIR64__(v76, v75);
        *((_QWORD *)&v149 + 1) = v77;
        v141 = &unk_1E5D29D40;
        v142 = 0uLL;
        v143 = 0uLL;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
        v78 = *(_QWORD *)(a1 + 272) + 48 * (int)v131;
        v79 = *(_DWORD *)(v78 + 16);
        v80 = *(_DWORD *)(v78 + 24);
        v69 = *(_QWORD *)(v78 + 8) + 4 * (int)(v80 * (v20 - v9));
        v81 = *(_DWORD *)(v78 + 28) - v80 * (v20 - v9);
        v73 = *(_QWORD *)(v78 + 32);
        *((_QWORD *)&v142 + 1) = __PAIR64__(v9, v79);
        *(_QWORD *)&v143 = __PAIR64__(v81, v80);
        *((_QWORD *)&v143 + 1) = v73;
        *(_QWORD *)&v145 = v69;
        *((_QWORD *)&v145 + 1) = __PAIR64__(v9, v79);
        *(_QWORD *)&v146 = __PAIR64__(v81, v80);
        goto LABEL_14;
      }
      kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(a1 + 128) + 48 * (int)v131);
      v38 = *(_QWORD *)(a1 + 128) + 48 * v131;
      v39 = *(_QWORD *)(v38 + 8);
      v40 = *(_DWORD *)(v38 + 20);
      v41 = *(_DWORD *)(v38 + 24);
      v42 = *(_DWORD *)(v38 + 28);
      v43 = *(_QWORD *)(v38 + 32);
      DWORD2(v142) = *(_DWORD *)(a1 + 176);
      *(_QWORD *)&v145 = v39;
      *((_QWORD *)&v145 + 1) = __PAIR64__(v40, DWORD2(v142));
      *(_QWORD *)&v146 = __PAIR64__(v42, v41);
      *((_QWORD *)&v146 + 1) = v43;
      v141 = &unk_1E5D29D40;
      v142 = 0u;
      v143 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      v44 = *(_QWORD *)(a1 + 272) + 48 * v131;
      v45 = *(_DWORD *)(v44 + 16);
      v46 = *(_DWORD *)(v44 + 24);
      v47 = *(_QWORD *)(v44 + 8) + 4 * (int)(v46 * (v20 - v9));
      v48 = *(_DWORD *)(v44 + 28) - v46 * (v20 - v9);
      v49 = *(_QWORD *)(v44 + 32);
      *((_QWORD *)&v142 + 1) = __PAIR64__(v9, v45);
      *(_QWORD *)&v143 = __PAIR64__(v48, v46);
      *((_QWORD *)&v143 + 1) = v49;
      v141 = &unk_1E5D29D40;
      *(_QWORD *)&v142 = v47;
      v50 = *(_QWORD *)(a1 + 104) + 32 * v131;
      *((_QWORD *)&v139 + 1) = 0;
      v138 = &unk_1E5D29D70;
      *(_QWORD *)&v139 = *(_QWORD *)(v50 + 8) + 4 * v20;
      DWORD2(v139) = v9;
      *(_QWORD *)&v140 = *(_QWORD *)(v50 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v144, (uint64_t)&v141, (uint64_t)&v138, 1);
      v141 = &unk_1E5D29D40;
      v142 = 0u;
      v143 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      v51 = *(_QWORD *)(a1 + 128) + 48 * (int)v131;
      v52 = *(unsigned int *)(a1 + 176);
      v53 = *(_DWORD *)(v51 + 20);
      v54 = *(_DWORD *)(v51 + 24);
      v55 = *(_QWORD *)(v51 + 8) + 4 * v52;
      LODWORD(v52) = *(_DWORD *)(v51 + 28) - v52;
      v56 = *(_QWORD *)(v51 + 32);
      DWORD2(v142) = *(_DWORD *)(v127 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      *(_QWORD *)&v148 = v55;
      *((_QWORD *)&v148 + 1) = __PAIR64__(v53, DWORD2(v142));
      *(_QWORD *)&v149 = __PAIR64__(v52, v54);
      *((_QWORD *)&v149 + 1) = v56;
      v141 = &unk_1E5D29D40;
      v142 = 0u;
      v143 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      v57 = *(_DWORD *)(v129 + 24);
      v58 = *(_QWORD *)(v129 + 8) + 4 * (int)(v57 * (v20 - v9));
      v59 = *(_DWORD *)(v129 + 28) - v57 * (v20 - v9);
      v60 = *(_QWORD *)(v129 + 32);
      DWORD2(v142) = *(_DWORD *)(v129 + 16);
      HIDWORD(v142) = v9;
      *(_QWORD *)&v143 = __PAIR64__(v59, v57);
      *((_QWORD *)&v143 + 1) = v60;
      v141 = &unk_1E5D29D40;
      *(_QWORD *)&v142 = v58;
      v61 = *(_QWORD *)(a1 + 104) + 32 * v131;
      *((_QWORD *)&v139 + 1) = 0;
      v138 = &unk_1E5D29D70;
      *(_QWORD *)&v139 = *(_QWORD *)(v61 + 8) + 4 * v20;
      DWORD2(v139) = v9;
      *(_QWORD *)&v140 = *(_QWORD *)(v61 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v147, (uint64_t)&v141, (uint64_t)&v138, 1);
      v141 = &unk_1E5D29D40;
LABEL_15:
      v142 = 0u;
      v143 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      v82 = *(_DWORD *)(v16 + 24);
      v83 = *(_QWORD *)(v16 + 8) + 4 * (int)(v82 * v20);
      v84 = *(_DWORD *)(v16 + 28) - v82 * v20;
      v85 = *(_QWORD *)(v16 + 32);
      DWORD2(v142) = *(_DWORD *)(v16 + 16);
      HIDWORD(v142) = v9;
      *(_QWORD *)&v143 = __PAIR64__(v84, v82);
      *((_QWORD *)&v143 + 1) = v85;
      v141 = &unk_1E5D29D40;
      *(_QWORD *)&v142 = v83;
      v86 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
      LODWORD(v87) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v141, (uint64_t)&v147, 111, v86, 112, v87, 1.0);
      v141 = &unk_1E5D29D40;
      v142 = 0u;
      v143 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      if (*(_BYTE *)(a1 + 208))
      {
        v88 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        v89 = *(_QWORD *)(v88 + 8);
        v90 = *(_DWORD *)(v88 + 16);
        v91 = *(_QWORD *)(v88 + 32);
        v141 = &unk_1E5D29D70;
        *(_QWORD *)&v142 = v89;
        *(_QWORD *)&v143 = v91;
        *((_QWORD *)&v142 + 1) = v90;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v159, (uint64_t)&v144, 111, (uint64_t)&v141, 1.0, 1.0);
        v92 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        v93 = *(_QWORD *)(v92 + 8) + 4 * *(int *)(v92 + 24);
        v94 = *(_DWORD *)(v92 + 16);
        v95 = *(_QWORD *)(v92 + 32);
        v141 = &unk_1E5D29D70;
        *(_QWORD *)&v142 = v93;
        *(_QWORD *)&v143 = v95;
        *((_QWORD *)&v142 + 1) = v94;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v156, (uint64_t)&v144, 111, (uint64_t)&v141, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v159, (uint64_t)&v159);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v156, (uint64_t)&v156);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v153);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v150, (uint64_t)&v159, 111, (uint64_t)&v153, 111, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v150, (uint64_t)&v156, 111, (uint64_t)&v144, 111, 1.0, 1.0);
      v96 = *(float *)(a1 + 476);
      if (v96 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v150, v96);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v150, -*(float *)(a1 + 476));
      }
      v97 = *(_DWORD *)(a1 + 176);
      v98 = *(_DWORD *)(v16 + 24);
      v99 = *(_QWORD *)(v16 + 8) + 4 * (int)(v98 * v20) + 8 * v97;
      v100 = *(_DWORD *)(v16 + 28) - (v98 * v20 + 2 * v97);
      v101 = *(_QWORD *)(v16 + 32);
      *((_QWORD *)&v142 + 1) = __PAIR64__(v9, v97);
      *(_QWORD *)&v143 = __PAIR64__(v100, v98);
      *((_QWORD *)&v143 + 1) = v101;
      v141 = &unk_1E5D29D40;
      *(_QWORD *)&v142 = v99;
      if (*(_BYTE *)(a1 + 208))
      {
        v102 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        v103 = *(_QWORD *)(v102 + 8) + 8 * *(int *)(v102 + 24);
        v104 = *(_DWORD *)(v102 + 16);
        v105 = *(_QWORD *)(v102 + 32);
        v138 = &unk_1E5D29D70;
        *(_QWORD *)&v139 = v103;
        *(_QWORD *)&v140 = v105;
        *((_QWORD *)&v139 + 1) = v104;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v141, (uint64_t)&v150, 111, (uint64_t)&v138, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v141, (uint64_t)&v141);
      v106 = *(_QWORD *)(a1 + 296) + 48 * (int)v131;
      v107 = *(_DWORD *)(v106 + 16);
      v108 = *(_DWORD *)(v106 + 24);
      v109 = *(_QWORD *)(v106 + 8) + 4 * (int)(v108 * v20);
      v110 = *(_DWORD *)(v106 + 28) - v108 * v20;
      v111 = *(_QWORD *)(v106 + 32);
      *((_QWORD *)&v139 + 1) = __PAIR64__(v9, v107);
      *(_QWORD *)&v140 = __PAIR64__(v110, v108);
      *((_QWORD *)&v140 + 1) = v111;
      v138 = &unk_1E5D29D40;
      *(_QWORD *)&v139 = v109;
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v138, (uint64_t)&v150);
      v112 = *(_QWORD *)(a1 + 320) + 48 * (int)v131;
      v113 = *(_DWORD *)(v112 + 16);
      v114 = *(_DWORD *)(v112 + 24);
      v115 = *(_QWORD *)(v112 + 8) + 4 * (int)(v114 * v20);
      v116 = *(_DWORD *)(v112 + 28) - v114 * v20;
      v117 = *(_QWORD *)(v112 + 32);
      *((_QWORD *)&v136 + 1) = __PAIR64__(v9, v113);
      *(_QWORD *)&v137 = __PAIR64__(v116, v114);
      *((_QWORD *)&v137 + 1) = v117;
      v135 = &unk_1E5D29D40;
      *(_QWORD *)&v136 = v115;
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v135, (uint64_t)&v141, 111, (uint64_t)&v138, 111, 1.0, 0.0);
      v118 = *(_DWORD *)(v129 + 24);
      v119 = *(_QWORD *)(v129 + 8) + 4 * (int)(v118 * v20);
      v120 = *(_DWORD *)(v129 + 28) - v118 * v20;
      v121 = *(_QWORD *)(v129 + 32);
      if (*(_BYTE *)(a1 + 224))
      {
        DWORD2(v133) = *(_DWORD *)(v129 + 16);
        HIDWORD(v133) = v9;
        *(_QWORD *)&v134 = __PAIR64__(v120, v118);
        *((_QWORD *)&v134 + 1) = v121;
        v132 = &unk_1E5D29D40;
        *(_QWORD *)&v133 = v119;
        v122 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
        LODWORD(v123) = 1.0;
        kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v132, (uint64_t)&v135, 111, v122, 112, v123, 0.0);
      }
      else
      {
        DWORD2(v133) = *(_DWORD *)(v129 + 16);
        HIDWORD(v133) = v9;
        *(_QWORD *)&v134 = __PAIR64__(v120, v118);
        *((_QWORD *)&v134 + 1) = v121;
        v132 = &unk_1E5D29D40;
        *(_QWORD *)&v133 = v119;
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v132, (uint64_t)&v135, 111);
      }
      v132 = &unk_1E5D29D40;
      v133 = 0u;
      v134 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v132);
      v135 = &unk_1E5D29D40;
      v136 = 0u;
      v137 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v135);
      v138 = &unk_1E5D29D40;
      v139 = 0u;
      v140 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
      v141 = &unk_1E5D29D40;
      v142 = 0u;
      v143 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      v144 = &unk_1E5D29D40;
      v145 = 0u;
      v146 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v144);
      v147 = &unk_1E5D29D40;
      v148 = 0u;
      v149 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v147);
      v150 = &unk_1E5D29D40;
      v151 = 0u;
      v152 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v150);
      v153 = &unk_1E5D29D40;
      v154 = 0u;
      v155 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v153);
      v156 = &unk_1E5D29D40;
      v157 = 0u;
      v158 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v156);
      v159 = &unk_1E5D29D40;
      v160 = 0u;
      v161 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v159);
      ++v21;
      v20 += v9;
      v22 = v130 + (int)v9;
      if (v128 == v21)
        goto LABEL_25;
    }
    v62 = *(_QWORD *)(a1 + 8) + 48 * v131;
    v63 = *(_DWORD *)(v62 + 20);
    v64 = *(_DWORD *)(v62 + 24);
    v65 = *(_QWORD *)(v62 + 8) + 4 * DWORD2(v160);
    v66 = *(_DWORD *)(v62 + 28) - DWORD2(v160);
    v67 = *(_QWORD *)(v62 + 32);
    DWORD2(v142) = *(_DWORD *)(v127 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    *(_QWORD *)&v148 = v65;
    *((_QWORD *)&v148 + 1) = __PAIR64__(v63, DWORD2(v142));
    *(_QWORD *)&v149 = __PAIR64__(v66, v64);
    *((_QWORD *)&v149 + 1) = v67;
    v141 = &unk_1E5D29D40;
    v142 = 0uLL;
    v143 = 0uLL;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
    v68 = *(_QWORD *)(a1 + 8) + 48 * v131;
    v69 = *(_QWORD *)(v68 + 8);
    v70 = *(_DWORD *)(v68 + 20);
    v71 = *(_DWORD *)(v68 + 24);
    v72 = *(_DWORD *)(v68 + 28);
    v73 = *(_QWORD *)(v68 + 32);
    DWORD2(v142) = *(_DWORD *)(a1 + 176);
    HIDWORD(v142) = v70;
    *(_QWORD *)&v143 = __PAIR64__(v72, v71);
    *((_QWORD *)&v143 + 1) = v73;
    *(_QWORD *)&v145 = v69;
    *((_QWORD *)&v145 + 1) = __PAIR64__(v70, DWORD2(v142));
    *(_QWORD *)&v146 = __PAIR64__(v72, v71);
LABEL_14:
    *((_QWORD *)&v146 + 1) = v73;
    v141 = &unk_1E5D29D40;
    *(_QWORD *)&v142 = v69;
    goto LABEL_15;
  }
LABEL_25:
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v124, v129, 111);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SaveLastState(a1, v125);
}

void sub_1ADA70238(_Unwind_Exception *a1)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 248) + 48 * a2), a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 272) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 296) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 320) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 344) + 48 * a2), a3, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), 0, 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_1ADA70580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SaveLastState(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  _QWORD v28[4];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v27, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v27);
  }
  v4 = *(_QWORD *)(a1 + 272) + 48 * a2;
  v5 = *(_DWORD *)(a1 + 96);
  v6 = *(_DWORD *)(v4 + 20) - v5;
  v7 = *(_QWORD *)(a1 + 8) + 48 * a2;
  v8 = *(_DWORD *)(a1 + 176);
  v9 = *(_DWORD *)(v7 + 28);
  v10 = *(_QWORD *)(v7 + 32);
  v28[0] = *(_QWORD *)(v7 + 8);
  LODWORD(v28[1]) = v8;
  *(_QWORD *)((char *)&v28[1] + 4) = *(_QWORD *)(v7 + 20);
  HIDWORD(v28[2]) = v9;
  v28[3] = v10;
  v27 = &unk_1E5D29D40;
  LODWORD(v7) = *(_DWORD *)(v4 + 16);
  v11 = *(_DWORD *)(v4 + 24);
  v12 = *(_QWORD *)(v4 + 8) + 4 * (int)(v11 * v6);
  v13 = *(_DWORD *)(v4 + 28) - v11 * v6;
  v14 = *(_QWORD *)(v4 + 32);
  *((_QWORD *)&v25 + 1) = __PAIR64__(v5, v7);
  *(_QWORD *)&v26 = __PAIR64__(v13, v11);
  *((_QWORD *)&v26 + 1) = v14;
  v24 = &unk_1E5D29D40;
  *(_QWORD *)&v25 = v12;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v27, (uint64_t)&v24, 111);
  v24 = &unk_1E5D29D40;
  v25 = 0u;
  v26 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v24);
  v27 = &unk_1E5D29D40;
  memset(v28, 0, sizeof(v28));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v27);
  v15 = *(_QWORD *)(a1 + 8) + 48 * a2;
  v16 = *(int *)(a1 + 176);
  v17 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v18 = *(_QWORD *)(v15 + 8) + 4 * v16;
  LODWORD(v16) = *(_DWORD *)(v15 + 28) - v16;
  v19 = *(_QWORD *)(v15 + 32);
  v28[0] = v18;
  LODWORD(v28[1]) = v17;
  *(_QWORD *)((char *)&v28[1] + 4) = *(_QWORD *)(v15 + 20);
  HIDWORD(v28[2]) = v16;
  v28[3] = v19;
  v27 = &unk_1E5D29D40;
  v20 = *(_QWORD *)(a1 + 344) + 48 * a2;
  v21 = *(_DWORD *)(v20 + 16);
  LODWORD(v18) = *(_DWORD *)(v20 + 24);
  v22 = *(_QWORD *)(v20 + 8) + 4 * (int)(v18 * v6);
  LODWORD(v19) = *(_DWORD *)(v20 + 28) - v18 * v6;
  v23 = *(_QWORD *)(v20 + 32);
  *((_QWORD *)&v25 + 1) = __PAIR64__(*(_DWORD *)(a1 + 96), v21);
  *(_QWORD *)&v26 = __PAIR64__(v19, v18);
  *((_QWORD *)&v26 + 1) = v23;
  v24 = &unk_1E5D29D40;
  *(_QWORD *)&v25 = v22;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v27, (uint64_t)&v24, 111);
  v24 = &unk_1E5D29D40;
  v25 = 0u;
  v26 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v24);
  v27 = &unk_1E5D29D40;
  memset(v28, 0, sizeof(v28));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v27);
}

void sub_1ADA707BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v18;

  v18 = v15 + 16;
  a9 = v18;
  *v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  a14 = v18;
  *v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int32x2_t *v7;

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  v5 = *(_QWORD *)(a3 + 24);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers((uint64_t)a1, 0, 1, v5);
  v6 = a1[13];
  if (a1[14] != v6 && *(int *)(v6 + 16) >= 1)
  {
    v7 = (int32x2_t *)a1[16];
    v7[4] = (int32x2_t)v5;
    kaldi::CuMatrix<float>::Resize(v7, 1, *(unsigned int *)(a1[1] + 16), 1, 0);
  }
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  kaldi::CuVectorBase<float>::AddMatVec<signed char>();
}

void sub_1ADA70930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(v0);
  kaldi::CuVectorBase<float>::AddVec(v2 - 80, v3, 1.0, 1.0);
  v4 = *(int *)(v0 + 176);
  v5 = *(_QWORD *)(v2 - 72);
  v6 = *(_QWORD *)(v2 - 56);
  *(_QWORD *)(v2 - 144) = v1;
  *(_QWORD *)(v2 - 136) = v5;
  *(_QWORD *)(v2 - 128) = 0;
  *(_QWORD *)(v2 - 120) = v6;
  *(_DWORD *)(v2 - 128) = v4;
  *(_QWORD *)(v2 - 176) = v1;
  *(_QWORD *)(v2 - 168) = v5 + 4 * v4;
  *(_QWORD *)(v2 - 160) = 0;
  *(_QWORD *)(v2 - 152) = v6;
  *(_DWORD *)(v2 - 160) = v4;
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v0);
  kaldi::CuVectorBase<float>::AddMatVec<signed char>();
}

void sub_1ADA70A04()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  _BYTE v36[64];
  _BYTE v37[32];
  _BYTE v38[224];

  if (*(_BYTE *)(v0 + 208))
  {
    v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(_DWORD *)(v4 + 16);
    v7 = *(_QWORD *)(v4 + 32);
    v31 = v2 + 16;
    v32 = v5;
    v34 = 0;
    v35 = v7;
    v33 = v6;
    kaldi::CuVectorBase<float>::AddVecVec(v3 - 144, (uint64_t)v36, (uint64_t)&v31, 1.0, 1.0);
    v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    v9 = *(_QWORD *)(v8 + 8) + 4 * *(int *)(v8 + 24);
    v10 = *(_DWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 32);
    v31 = v2 + 16;
    v32 = v9;
    v34 = 0;
    v35 = v11;
    v33 = v10;
    kaldi::CuVectorBase<float>::AddVecVec(v3 - 176, (uint64_t)v36, (uint64_t)&v31, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid(v3 - 144, v3 - 144);
  kaldi::CuVectorBase<float>::Sigmoid(v3 - 176, v3 - 176);
  kaldi::CuVectorBase<float>::ApplyTanh((uint64_t)v38);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v37, v3 - 144, (uint64_t)v38, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v37, (uint64_t)v36, v3 - 176, 1.0, 1.0);
  v12 = *(float *)(v0 + 476);
  if (v12 > 0.0)
  {
    kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)v37, v12);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v37, -*(float *)(v0 + 476));
  }
  v13 = *(int *)(v0 + 176);
  v14 = *(_QWORD *)(v3 - 56);
  v15 = *(_QWORD *)(v3 - 72) + 8 * v13;
  v31 = v2 + 16;
  v32 = v15;
  v34 = 0;
  v35 = v14;
  v33 = v13;
  if (*(_BYTE *)(v0 + 208))
  {
    v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    v17 = *(_QWORD *)(v16 + 8) + 8 * *(int *)(v16 + 24);
    v18 = *(_DWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 32);
    v27 = v2 + 16;
    v28 = v17;
    v30 = v19;
    v29 = v18;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v31, (uint64_t)v37, (uint64_t)&v27, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v31, (uint64_t)&v31);
  v20 = *(_QWORD *)(v0 + 296);
  v29 = 0;
  v21 = *(_QWORD *)(v20 + 8);
  v27 = v2 + 16;
  v28 = v21;
  LODWORD(v29) = *(_DWORD *)(v20 + 16);
  v30 = *(_QWORD *)(v20 + 32);
  kaldi::CuVectorBase<float>::Tanh((uint64_t)&v27, (uint64_t)v37);
  v22 = *(_QWORD *)(v0 + 320);
  v25 = 0;
  v23 = *(_QWORD *)(v22 + 8);
  v24[0] = v2 + 16;
  v24[1] = v23;
  LODWORD(v25) = *(_DWORD *)(v22 + 16);
  v26 = *(_QWORD *)(v22 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v24, (uint64_t)&v31, (uint64_t)&v27, 1.0, 0.0);
  if (*(_BYTE *)(v0 + 224))
  {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    kaldi::CuVectorBase<float>::AddMatVec<signed char>();
  }
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)(v3 - 112), (uint64_t)v24);
  kaldi::CuVectorBase<float>::CopyFromVec(v1, v3 - 112);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SaveLastState(v0, 0);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 136)), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc()
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc();
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc();
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int32x2_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  kaldi::quasar::Vocab *v63;
  double v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  kaldi::quasar::Vocab *v121;
  double v122;
  kaldi::quasar::Vocab *v124;
  double v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  _QWORD v136[2];
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[5];
  _QWORD v140[5];
  void *v141;
  _QWORD v142[4];
  void *v143;
  _QWORD v144[4];
  void *v145;
  _QWORD v146[4];
  void *v147;
  _QWORD v148[4];
  void *v149;
  __int128 v150;
  __int128 v151;
  void *v152;
  __int128 v153;
  __int128 v154;
  void *v155;
  __int128 v156;
  __int128 v157;
  void *v158;
  _QWORD v159[4];
  _QWORD v160[5];
  _QWORD v161[5];
  _QWORD v162[5];
  _QWORD v163[5];
  _QWORD v164[5];
  _QWORD v165[5];
  _QWORD v166[5];
  _QWORD v167[36];

  v9 = *(unsigned int *)(a2 + 20);
  v10 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  v11 = ((int)v9 / (int)v10);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v167, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)"Running backward propagation for batch size = ", 46);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", which contains ", 17);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" frames each from ", 18);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v167);
  }
  if (a5)
    v15 = a5;
  else
    v15 = a4;
  v16 = *(_QWORD *)(v15 + 32);
  v133 = v9;
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateBackwardBuffers(a1, a6, v9, v16);
  v17 = a6;
  v18 = 3 * a6;
  v19 = *(_QWORD *)(a1 + 248) + 16 * v18;
  v20 = *(_QWORD *)(a1 + 440) + 16 * v18;
  v127 = (int *)(*(_QWORD *)(a1 + 368) + 16 * v18);
  v131 = *(_QWORD *)(a1 + 416);
  v132 = v17;
  v21 = *(_QWORD *)(a1 + 104);
  v126 = a5;
  if (*(_QWORD *)(a1 + 112) == v21 || *(int *)(v21 + 32 * v17 + 16) < 1)
  {
    v130 = 0;
    v22 = a1;
  }
  else
  {
    v22 = a1;
    v23 = (int32x2_t *)(*(_QWORD *)(a1 + 128) + 48 * (int)v17);
    v23[4] = (int32x2_t)v16;
    v130 = 1;
    kaldi::CuMatrix<float>::Resize(v23, v10, *(unsigned int *)(v20 + 16), 1, 0);
  }
  v24 = v11;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v127, a4, 111);
  v25 = *(int *)(v22 + 176);
  v26 = *(_DWORD *)(v19 + 28);
  v27 = *(_QWORD *)(v19 + 32);
  v167[1] = *(_QWORD *)(v19 + 8);
  LODWORD(v167[2]) = v25;
  *(_QWORD *)((char *)&v167[2] + 4) = *(_QWORD *)(v19 + 20);
  HIDWORD(v167[3]) = v26;
  v167[4] = v27;
  v167[0] = &unk_1E5D29D40;
  v28 = *(_DWORD *)(v19 + 28) - v25;
  v29 = *(_QWORD *)(v19 + 32);
  v166[1] = *(_QWORD *)(v19 + 8) + 4 * v25;
  LODWORD(v166[2]) = v25;
  *(_QWORD *)((char *)&v166[2] + 4) = *(_QWORD *)(v19 + 20);
  HIDWORD(v166[3]) = v28;
  v166[4] = v29;
  v166[0] = &unk_1E5D29D40;
  v30 = *(_DWORD *)(v19 + 28) - 2 * v25;
  v31 = *(_QWORD *)(v19 + 32);
  v165[1] = *(_QWORD *)(v19 + 8) + 8 * v25;
  LODWORD(v165[2]) = v25;
  *(_QWORD *)((char *)&v165[2] + 4) = *(_QWORD *)(v19 + 20);
  HIDWORD(v165[3]) = v30;
  v165[4] = v31;
  v165[0] = &unk_1E5D29D40;
  LODWORD(v31) = *(_DWORD *)(v19 + 28) - 3 * v25;
  v32 = *(_QWORD *)(v19 + 32);
  v164[1] = *(_QWORD *)(v19 + 8) + 4 * (3 * v25);
  LODWORD(v164[2]) = v25;
  *(_QWORD *)((char *)&v164[2] + 4) = *(_QWORD *)(v19 + 20);
  HIDWORD(v164[3]) = v31;
  v164[4] = v32;
  v164[0] = &unk_1E5D29D40;
  LODWORD(v31) = *(_DWORD *)(v20 + 28);
  v33 = *(_QWORD *)(v20 + 32);
  v163[1] = *(_QWORD *)(v20 + 8);
  LODWORD(v163[2]) = v25;
  *(_QWORD *)((char *)&v163[2] + 4) = *(_QWORD *)(v20 + 20);
  HIDWORD(v163[3]) = v31;
  v163[4] = v33;
  v163[0] = &unk_1E5D29D40;
  LODWORD(v31) = *(_DWORD *)(v20 + 28) - v25;
  v34 = *(_QWORD *)(v20 + 32);
  v162[1] = *(_QWORD *)(v20 + 8) + 4 * v25;
  LODWORD(v162[2]) = v25;
  *(_QWORD *)((char *)&v162[2] + 4) = *(_QWORD *)(v20 + 20);
  HIDWORD(v162[3]) = v31;
  v162[4] = v34;
  v162[0] = &unk_1E5D29D40;
  LODWORD(v31) = *(_DWORD *)(v20 + 28) - 2 * v25;
  v35 = *(_QWORD *)(v20 + 32);
  v161[1] = *(_QWORD *)(v20 + 8) + 8 * v25;
  LODWORD(v161[2]) = v25;
  *(_QWORD *)((char *)&v161[2] + 4) = *(_QWORD *)(v20 + 20);
  HIDWORD(v161[3]) = v31;
  v161[4] = v35;
  v161[0] = &unk_1E5D29D40;
  v36 = *(_DWORD *)(v20 + 28) - 3 * v25;
  v37 = *(_QWORD *)(v20 + 32);
  v160[1] = *(_QWORD *)(v20 + 8) + 4 * (3 * v25);
  LODWORD(v160[2]) = v25;
  v128 = v20;
  *(_QWORD *)((char *)&v160[2] + 4) = *(_QWORD *)(v20 + 20);
  HIDWORD(v160[3]) = v36;
  v160[4] = v37;
  v160[0] = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)v163, (uint64_t)v167, (uint64_t)v164);
  LODWORD(v159[1]) = v162[2];
  HIDWORD(v159[1]) = v133 - v10;
  LODWORD(v159[2]) = v162[3];
  HIDWORD(v159[2]) = HIDWORD(v162[3]) - LODWORD(v162[3]) * v10;
  v159[3] = v162[4];
  v159[0] = v162[1] + 4 * LODWORD(v162[3]) * (int)v10;
  v158 = &unk_1E5D29D40;
  DWORD2(v156) = v166[2];
  HIDWORD(v156) = v133 - v10;
  LODWORD(v157) = v166[3];
  DWORD1(v157) = HIDWORD(v166[3]) - LODWORD(v166[3]) * v10;
  *((_QWORD *)&v157 + 1) = v166[4];
  *(_QWORD *)&v156 = v166[1] + 4 * LODWORD(v166[3]) * (int)v10;
  v155 = &unk_1E5D29D40;
  v38 = *(_QWORD *)(a1 + 272) + 48 * (int)v132;
  v39 = *(_DWORD *)(v38 + 16);
  v40 = *(_QWORD *)(v38 + 32);
  *(_QWORD *)&v153 = *(_QWORD *)(v38 + 8);
  DWORD2(v153) = v39;
  HIDWORD(v153) = v133 - v10;
  *(_QWORD *)&v154 = *(_QWORD *)(v38 + 24);
  *((_QWORD *)&v154 + 1) = v40;
  v152 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v158, (uint64_t)&v155, (uint64_t)&v152);
  v152 = &unk_1E5D29D40;
  v153 = 0u;
  v154 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
  v155 = &unk_1E5D29D40;
  v156 = 0u;
  v157 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v155);
  v158 = &unk_1E5D29D40;
  memset(v159, 0, sizeof(v159));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v158);
  v159[1] = __PAIR64__(v10, v162[2]);
  v159[2] = v162[3];
  v159[3] = v162[4];
  v159[0] = v162[1];
  v158 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v158);
  v158 = &unk_1E5D29D40;
  memset(v159, 0, sizeof(v159));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v158);
  if (v130)
  {
    v41 = *(_QWORD *)(a1 + 128) + 48 * (int)v132;
    v42 = *(_DWORD *)(a1 + 176);
    v43 = *(_DWORD *)(v41 + 28);
    v44 = *(_QWORD *)(v41 + 32);
    v159[0] = *(_QWORD *)(v41 + 8);
    LODWORD(v159[1]) = v42;
    *(_QWORD *)((char *)&v159[1] + 4) = *(_QWORD *)(v41 + 20);
    HIDWORD(v159[2]) = v43;
    v159[3] = v44;
    v158 = &unk_1E5D29D40;
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v158);
    v45 = 0;
    v46 = v11 - 1;
    do
    {
      v47 = LODWORD(v162[3]) * (v10 + v45);
      *((_QWORD *)&v156 + 1) = __PAIR64__(v10, v162[2]);
      LODWORD(v157) = v162[3];
      DWORD1(v157) = HIDWORD(v162[3]) - v47;
      *((_QWORD *)&v157 + 1) = v162[4];
      *(_QWORD *)&v156 = v162[1] + 4 * v47;
      v155 = &unk_1E5D29D40;
      v48 = *(_QWORD *)(a1 + 104) + 32 * v132;
      *((_QWORD *)&v153 + 1) = 0;
      v152 = &unk_1E5D29D70;
      *(_QWORD *)&v153 = *(_QWORD *)(v48 + 8) + 4 * (v10 + v45);
      DWORD2(v153) = v10;
      *(_QWORD *)&v154 = *(_QWORD *)(v48 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v155, (uint64_t)&v158, (uint64_t)&v152, 0);
      v155 = &unk_1E5D29D40;
      v156 = 0u;
      v157 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v155);
      v45 += v10;
      --v46;
    }
    while (v46);
    v158 = &unk_1E5D29D40;
    memset(v159, 0, sizeof(v159));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v158);
  }
  v49 = v132;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)v161, (uint64_t)v165, *(_QWORD *)(a1 + 296) + 48 * (int)v132);
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)v160, (uint64_t)v164, (uint64_t)v167);
  v50 = v131 + 16 * v18;
  kaldi::CuMatrixBase<float>::DiffTanh(v50, *(_QWORD *)(a1 + 296) + 48 * (int)v132, (uint64_t)v165);
  v51 = 0;
  v134 = (v24 - 1);
  v129 = v10 * (v24 - 1);
  v52 = v127;
  do
  {
    v53 = v129 + v51;
    v54 = v52[6];
    v55 = *((_QWORD *)v52 + 1) + 4 * v54 * (v129 + v51);
    v56 = v52[7] - v54 * (v129 + v51);
    v57 = *((_QWORD *)v52 + 4);
    LODWORD(v159[1]) = v52[4];
    HIDWORD(v159[1]) = v10;
    v159[2] = __PAIR64__(v56, v54);
    v159[3] = v57;
    v159[0] = v55;
    v158 = &unk_1E5D29D40;
    v58 = *(_QWORD *)(a1 + 392) + 48 * v49;
    LODWORD(v55) = *(_DWORD *)(v58 + 16);
    v59 = *(_DWORD *)(v58 + 24);
    v60 = v59 * (v129 + v51);
    v61 = *(_QWORD *)(v58 + 8) + 4 * v60;
    LODWORD(v57) = *(_DWORD *)(v58 + 28) - v60;
    v62 = *(_QWORD *)(v58 + 32);
    *((_QWORD *)&v156 + 1) = __PAIR64__(v10, v55);
    *(_QWORD *)&v157 = __PAIR64__(v57, v59);
    *((_QWORD *)&v157 + 1) = v62;
    *(_QWORD *)&v156 = v61;
    v155 = &unk_1E5D29D40;
    if (*(_BYTE *)(a1 + 224))
    {
      v63 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      LODWORD(v64) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v155, (uint64_t)&v158, 111, v63, 111, v64, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v155, (uint64_t)&v158, 111);
    }
    *((_QWORD *)&v153 + 1) = __PAIR64__(v10, v161[2]);
    LODWORD(v154) = v161[3];
    DWORD1(v154) = HIDWORD(v161[3]) - LODWORD(v161[3]) * v53;
    *((_QWORD *)&v154 + 1) = v161[4];
    *(_QWORD *)&v153 = v161[1] + 4 * (int)(LODWORD(v161[3]) * v53);
    v152 = &unk_1E5D29D40;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v152, (uint64_t)&v155);
    v65 = *(_DWORD *)(v50 + 24);
    v66 = *(_QWORD *)(v50 + 8) + 4 * (int)(v65 * v53);
    v67 = *(_DWORD *)(v50 + 28) - v65 * v53;
    v68 = *(_QWORD *)(v50 + 32);
    DWORD2(v150) = *(_DWORD *)(v50 + 16);
    HIDWORD(v150) = v10;
    *(_QWORD *)&v151 = __PAIR64__(v67, v65);
    *((_QWORD *)&v151 + 1) = v68;
    *(_QWORD *)&v150 = v66;
    v149 = &unk_1E5D29D40;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v149, (uint64_t)&v155);
    v69 = a1;
    if (*(_BYTE *)(a1 + 208))
    {
      v70 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
      v71 = *(_QWORD *)(v70 + 8) + 8 * *(int *)(v70 + 24);
      v72 = *(_DWORD *)(v70 + 16);
      v73 = *(_QWORD *)(v70 + 32);
      v147 = &unk_1E5D29D70;
      v148[0] = v71;
      v148[2] = v73;
      v148[1] = v72;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v149, (uint64_t)&v152, 111, (uint64_t)&v147, 1.0, 1.0);
    }
    if (v134 < v24 - 1)
    {
      v74 = (v10 * v24 + v51);
      v75 = *(_DWORD *)(v50 + 24);
      v76 = *(_QWORD *)(v50 + 8) + 4 * (int)(v75 * v74);
      v77 = *(_DWORD *)(v50 + 28) - v75 * v74;
      v78 = *(_QWORD *)(v50 + 32);
      LODWORD(v148[1]) = *(_DWORD *)(v50 + 16);
      HIDWORD(v148[1]) = v10;
      v148[2] = __PAIR64__(v77, v75);
      v148[3] = v78;
      v147 = &unk_1E5D29D40;
      v148[0] = v76;
      v146[1] = __PAIR64__(v10, v166[2]);
      LODWORD(v146[2]) = v166[3];
      HIDWORD(v146[2]) = HIDWORD(v166[3]) - LODWORD(v166[3]) * v74;
      v146[3] = v166[4];
      v145 = &unk_1E5D29D40;
      v146[0] = v166[1] + 4 * LODWORD(v166[3]) * (int)v74;
      if (v130)
      {
        v79 = *(_QWORD *)(a1 + 128) + 48 * (int)v132;
        v80 = *(_DWORD *)(a1 + 176);
        v81 = *(_DWORD *)(v79 + 28);
        v82 = *(_QWORD *)(v79 + 32);
        v144[0] = *(_QWORD *)(v79 + 8);
        LODWORD(v144[1]) = v80;
        *(_QWORD *)((char *)&v144[1] + 4) = *(_QWORD *)(v79 + 20);
        HIDWORD(v144[2]) = v81;
        v144[3] = v82;
        v143 = &unk_1E5D29D40;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v143);
        v83 = *(_QWORD *)(a1 + 104) + 32 * v132;
        v142[1] = 0;
        v141 = &unk_1E5D29D70;
        v142[0] = *(_QWORD *)(v83 + 8) + 4 * v74;
        LODWORD(v142[1]) = v10;
        v142[2] = *(_QWORD *)(v83 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v143, (uint64_t)&v147, (uint64_t)&v141, 1);
        *(_OWORD *)&v148[1] = *(_OWORD *)&v144[1];
        v148[0] = v144[0];
        v148[3] = v144[3];
        v84 = *(_QWORD *)(a1 + 128) + 48 * (int)v132;
        v85 = *(int *)(a1 + 176);
        v86 = *(_DWORD *)(v84 + 28) - v85;
        v87 = *(_QWORD *)(v84 + 32);
        v142[0] = *(_QWORD *)(v84 + 8) + 4 * v85;
        LODWORD(v142[1]) = v85;
        *(_QWORD *)((char *)&v142[1] + 4) = *(_QWORD *)(v84 + 20);
        HIDWORD(v142[2]) = v86;
        v142[3] = v87;
        v141 = &unk_1E5D29D40;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v141);
        v88 = *(_QWORD *)(a1 + 104) + 32 * v132;
        v140[2] = 0;
        v140[0] = &unk_1E5D29D70;
        v140[1] = *(_QWORD *)(v88 + 8) + 4 * v74;
        LODWORD(v140[2]) = v10;
        v140[3] = *(_QWORD *)(v88 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v141, (uint64_t)&v145, (uint64_t)v140, 1);
        v146[0] = v142[0];
        *(_OWORD *)&v146[1] = *(_OWORD *)&v142[1];
        v146[3] = v142[3];
        v141 = &unk_1E5D29D40;
        memset(v142, 0, sizeof(v142));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
        v143 = &unk_1E5D29D40;
        memset(v144, 0, sizeof(v144));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
        v69 = a1;
      }
      if (*(_BYTE *)(v69 + 208))
      {
        v144[1] = __PAIR64__(v10, v162[2]);
        LODWORD(v144[2]) = v162[3];
        HIDWORD(v144[2]) = HIDWORD(v162[3]) - LODWORD(v162[3]) * v74;
        v144[3] = v162[4];
        v143 = &unk_1E5D29D40;
        v144[0] = v162[1] + 4 * LODWORD(v162[3]) * (int)v74;
        v142[1] = __PAIR64__(v10, v163[2]);
        LODWORD(v142[2]) = v163[3];
        HIDWORD(v142[2]) = HIDWORD(v163[3]) - LODWORD(v163[3]) * v74;
        v142[3] = v163[4];
        v141 = &unk_1E5D29D40;
        v142[0] = v163[1] + 4 * LODWORD(v163[3]) * (int)v74;
        if (v130)
        {
          v89 = *(_QWORD *)(v69 + 128) + 48 * (int)v132;
          v90 = *(int *)(v69 + 176);
          v91 = *(_DWORD *)(v89 + 28) - 2 * v90;
          v92 = *(_QWORD *)(v89 + 32);
          v140[1] = *(_QWORD *)(v89 + 8) + 8 * v90;
          LODWORD(v140[2]) = v90;
          *(_QWORD *)((char *)&v140[2] + 4) = *(_QWORD *)(v89 + 20);
          HIDWORD(v140[3]) = v91;
          v140[4] = v92;
          v140[0] = &unk_1E5D29D40;
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v140);
          v93 = *(_QWORD *)(v69 + 104) + 32 * v132;
          v139[2] = 0;
          v139[0] = &unk_1E5D29D70;
          v139[1] = *(_QWORD *)(v93 + 8) + 4 * v74;
          LODWORD(v139[2]) = v10;
          v139[3] = *(_QWORD *)(v93 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v140, (uint64_t)&v143, (uint64_t)v139, 1);
          *(_OWORD *)&v144[1] = *(_OWORD *)&v140[2];
          v144[0] = v140[1];
          v144[3] = v140[4];
          v94 = *(_QWORD *)(v69 + 128) + 48 * (int)v132;
          v95 = *(_DWORD *)(v69 + 176);
          v96 = *(_DWORD *)(v94 + 28) - 3 * v95;
          v97 = *(_QWORD *)(v94 + 32);
          v139[1] = *(_QWORD *)(v94 + 8) + 12 * v95;
          LODWORD(v139[2]) = v95;
          *(_QWORD *)((char *)&v139[2] + 4) = *(_QWORD *)(v94 + 20);
          HIDWORD(v139[3]) = v96;
          v139[4] = v97;
          v139[0] = &unk_1E5D29D40;
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v139);
          v98 = *(_QWORD *)(v69 + 104) + 32 * v132;
          v137 = 0;
          v136[0] = &unk_1E5D29D70;
          v136[1] = *(_QWORD *)(v98 + 8) + 4 * v74;
          LODWORD(v137) = v10;
          v138 = *(_QWORD *)(v98 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v139, (uint64_t)&v141, (uint64_t)v136, 1);
          v142[0] = v139[1];
          *(_OWORD *)&v142[1] = *(_OWORD *)&v139[2];
          v142[3] = v139[4];
          v139[0] = &unk_1E5D29D40;
          memset(&v139[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v139);
          v140[0] = &unk_1E5D29D40;
          memset(&v140[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v140);
          v69 = a1;
        }
        v99 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v69);
        v100 = *(_QWORD *)(v99 + 8) + 4 * *(int *)(v99 + 24);
        v101 = *(_DWORD *)(v99 + 16);
        v102 = *(_QWORD *)(v99 + 32);
        v140[0] = &unk_1E5D29D70;
        v140[1] = v100;
        v140[3] = v102;
        v140[2] = v101;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v149, (uint64_t)&v143, 111, (uint64_t)v140, 1.0, 1.0);
        v103 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        v104 = *(_QWORD *)(v103 + 8);
        v105 = *(_DWORD *)(v103 + 16);
        v106 = *(_QWORD *)(v103 + 32);
        v140[0] = &unk_1E5D29D70;
        v140[1] = v104;
        v140[3] = v106;
        v140[2] = v105;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v149, (uint64_t)&v141, 111, (uint64_t)v140, 1.0, 1.0);
        v141 = &unk_1E5D29D40;
        memset(v142, 0, sizeof(v142));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
        v143 = &unk_1E5D29D40;
        memset(v144, 0, sizeof(v144));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v149, (uint64_t)&v147, 111, (uint64_t)&v145, 111, 1.0, 1.0);
      v145 = &unk_1E5D29D40;
      memset(v146, 0, sizeof(v146));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v145);
      v147 = &unk_1E5D29D40;
      memset(v148, 0, sizeof(v148));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v147);
    }
    v148[1] = __PAIR64__(v10, v163[2]);
    LODWORD(v148[2]) = v163[3];
    HIDWORD(v148[2]) = HIDWORD(v163[3]) - LODWORD(v163[3]) * v53;
    v148[3] = v163[4];
    v147 = &unk_1E5D29D40;
    v148[0] = v163[1] + 4 * (int)(LODWORD(v163[3]) * v53);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v147, (uint64_t)&v149);
    v147 = &unk_1E5D29D40;
    memset(v148, 0, sizeof(v148));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v147);
    v148[1] = __PAIR64__(v10, v160[2]);
    LODWORD(v148[2]) = v160[3];
    HIDWORD(v148[2]) = HIDWORD(v160[3]) - LODWORD(v160[3]) * v53;
    v148[3] = v160[4];
    v147 = &unk_1E5D29D40;
    v148[0] = v160[1] + 4 * (int)(LODWORD(v160[3]) * v53);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v147, (uint64_t)&v149);
    v147 = &unk_1E5D29D40;
    memset(v148, 0, sizeof(v148));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v147);
    v49 = v132;
    if (v134 >= 1)
    {
      v148[1] = __PAIR64__(v10, v162[2]);
      LODWORD(v148[2]) = v162[3];
      HIDWORD(v148[2]) = HIDWORD(v162[3]) - LODWORD(v162[3]) * v53;
      v148[3] = v162[4];
      v147 = &unk_1E5D29D40;
      v148[0] = v162[1] + 4 * (int)(LODWORD(v162[3]) * v53);
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v147, (uint64_t)&v149);
      v147 = &unk_1E5D29D40;
      memset(v148, 0, sizeof(v148));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v147);
      v107 = *(_DWORD *)(v128 + 16);
      v108 = *(_DWORD *)(v128 + 24);
      v109 = *(_QWORD *)(v128 + 8) + 4 * (int)(v108 * v53);
      v110 = *(_DWORD *)(v128 + 28) - v108 * v53;
      v111 = *(_QWORD *)(v128 + 32);
      v148[1] = __PAIR64__(v10, v107);
      v148[2] = __PAIR64__(v110, v108);
      v148[3] = v111;
      v147 = &unk_1E5D29D40;
      v148[0] = v109;
      if (v130)
      {
        v112 = *(_QWORD *)(a1 + 128) + 48 * (int)v132;
        v113 = *(_DWORD *)(v112 + 28);
        v114 = *(_QWORD *)(v112 + 32);
        v146[0] = *(_QWORD *)(v112 + 8);
        LODWORD(v146[1]) = v107;
        *(_QWORD *)((char *)&v146[1] + 4) = *(_QWORD *)(v112 + 20);
        HIDWORD(v146[2]) = v113;
        v146[3] = v114;
        v145 = &unk_1E5D29D40;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v145);
        v115 = *(_QWORD *)(a1 + 104) + 32 * v132;
        v144[1] = 0;
        v143 = &unk_1E5D29D70;
        v144[0] = *(_QWORD *)(v115 + 8) + 4 * v53;
        LODWORD(v144[1]) = v10;
        v144[2] = *(_QWORD *)(v115 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v145, (uint64_t)&v147, (uint64_t)&v143, 1);
        *(_OWORD *)&v148[1] = *(_OWORD *)&v146[1];
        v148[0] = v146[0];
        v148[3] = v146[3];
        v145 = &unk_1E5D29D40;
        memset(v146, 0, sizeof(v146));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v145);
        v52 = v127;
      }
      v116 = v52[6];
      v117 = v116 * (v10 * (v24 - 2) + v51);
      v118 = *((_QWORD *)v52 + 1) + 4 * v117;
      v119 = v52[7] - v117;
      v120 = *((_QWORD *)v52 + 4);
      LODWORD(v146[1]) = v52[4];
      HIDWORD(v146[1]) = v10;
      v146[2] = __PAIR64__(v119, v116);
      v146[3] = v120;
      v145 = &unk_1E5D29D40;
      v146[0] = v118;
      v121 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
      LODWORD(v122) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v145, (uint64_t)&v147, 111, v121, 111, v122, 1.0);
      v145 = &unk_1E5D29D40;
      memset(v146, 0, sizeof(v146));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v145);
      v147 = &unk_1E5D29D40;
      memset(v148, 0, sizeof(v148));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v147);
      v49 = v132;
    }
    v149 = &unk_1E5D29D40;
    v150 = 0u;
    v151 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
    v152 = &unk_1E5D29D40;
    v153 = 0u;
    v154 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
    v155 = &unk_1E5D29D40;
    v156 = 0u;
    v157 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v155);
    v158 = &unk_1E5D29D40;
    memset(v159, 0, sizeof(v159));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v158);
    v51 -= v10;
  }
  while (v134-- > 0);
  if (v126)
  {
    v124 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    LODWORD(v125) = 1.0;
    kaldi::CuMatrixBase<float>::AddMatMat<signed char>(v126, v128, 111, v124, 111, v125, 0.0);
  }
  v160[0] = &unk_1E5D29D40;
  memset(&v160[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v160);
  v161[0] = &unk_1E5D29D40;
  memset(&v161[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v161);
  v162[0] = &unk_1E5D29D40;
  memset(&v162[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v162);
  v163[0] = &unk_1E5D29D40;
  memset(&v163[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v163);
  v164[0] = &unk_1E5D29D40;
  memset(&v164[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v164);
  v165[0] = &unk_1E5D29D40;
  memset(&v165[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v165);
  v166[0] = &unk_1E5D29D40;
  memset(&v166[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v166);
  v167[0] = &unk_1E5D29D40;
  memset(&v167[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v167);
}

void sub_1ADA72028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, _OWORD *a11, _OWORD *a12, _OWORD *a13, _OWORD *a14, _OWORD *a15, _OWORD *a16, _OWORD *a17)
{
  _OWORD *v17;

  STACK[0x280] = (unint64_t)&unk_1E5D29D40;
  *v17 = 0u;
  v17[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x280]);
  STACK[0x2A8] = (unint64_t)&unk_1E5D29D40;
  *a14 = 0u;
  a14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x2A8]);
  STACK[0x2D0] = (unint64_t)&unk_1E5D29D40;
  *a15 = 0u;
  a15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x2D0]);
  STACK[0x2F8] = (unint64_t)&unk_1E5D29D40;
  *a16 = 0u;
  a16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x2F8]);
  STACK[0x320] = (unint64_t)&unk_1E5D29D40;
  *a17 = 0u;
  a17[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x320]);
  STACK[0x348] = (unint64_t)&unk_1E5D29D40;
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x348]);
  STACK[0x370] = (unint64_t)&unk_1E5D29D40;
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x370]);
  STACK[0x398] = (unint64_t)&unk_1E5D29D40;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x398]);
  STACK[0x3C0] = (unint64_t)&unk_1E5D29D40;
  *a13 = 0u;
  a13[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

void sub_1ADA723F0()
{
  JUMPOUT(0x1ADA72300);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 368) + 48 * a2), a3, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 392) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 416) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 440) + 48 * a2), a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_1ADA72550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[5];
  _QWORD v59[5];
  _QWORD v60[36];

  v9 = *(_DWORD *)(a1 + 96);
  v10 = *(_DWORD *)(a2 + 20);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v60, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Accumulating gradients for batch id = ", 38);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v60);
  }
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  v47 = *(_QWORD *)(a1 + 272);
  v14 = *(_QWORD *)(a1 + 440) + 48 * a5;
  v15 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 480) + 4 * a5) = v10;
  v16 = *(int *)(a1 + 176);
  v17 = *(_DWORD *)(v14 + 28);
  v18 = *(_QWORD *)(v14 + 32);
  v60[1] = *(_QWORD *)(v14 + 8);
  LODWORD(v60[2]) = v16;
  *(_QWORD *)((char *)&v60[2] + 4) = *(_QWORD *)(v14 + 20);
  HIDWORD(v60[3]) = v17;
  v60[4] = v18;
  v60[0] = &unk_1E5D29D40;
  LODWORD(v18) = *(_DWORD *)(v14 + 28) - v16;
  v19 = *(_QWORD *)(v14 + 32);
  v59[1] = *(_QWORD *)(v14 + 8) + 4 * v16;
  LODWORD(v59[2]) = v16;
  *(_QWORD *)((char *)&v59[2] + 4) = *(_QWORD *)(v14 + 20);
  HIDWORD(v59[3]) = v18;
  v59[4] = v19;
  v59[0] = &unk_1E5D29D40;
  LODWORD(v18) = *(_DWORD *)(v14 + 28) - 2 * v16;
  v20 = *(_QWORD *)(v14 + 32);
  v58[1] = *(_QWORD *)(v14 + 8) + 8 * v16;
  LODWORD(v58[2]) = v16;
  *(_QWORD *)((char *)&v58[2] + 4) = *(_QWORD *)(v14 + 20);
  HIDWORD(v58[3]) = v18;
  v58[4] = v20;
  v58[0] = &unk_1E5D29D40;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a5) + 32) = a4;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a5) + 32) = a4;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a5) + 24) = a4;
  if (*(_BYTE *)(a1 + 208))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a5) + 32) = a4;
  if (*(_BYTE *)(a1 + 224))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a5) + 32) = a4;
  v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a5);
  kaldi::CuMatrixBase<float>::AddMatMat(v21, v14, CblasTrans, a2, CblasNoTrans, 1.0, v15);
  v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a5);
  v23 = v10 - v9;
  v24 = *(_DWORD *)(v14 + 24);
  v25 = *(_QWORD *)(v14 + 8) + 4 * (int)(v24 * v9);
  v26 = *(_DWORD *)(v14 + 28) - v24 * v9;
  v27 = *(_QWORD *)(v14 + 32);
  DWORD2(v56) = *(_DWORD *)(v14 + 16);
  HIDWORD(v56) = v23;
  *(_QWORD *)&v57 = __PAIR64__(v26, v24);
  *((_QWORD *)&v57 + 1) = v27;
  v55 = &unk_1E5D29D40;
  *(_QWORD *)&v56 = v25;
  v28 = *(_QWORD *)(a1 + 344) + 48 * a5;
  LODWORD(v25) = *(_DWORD *)(v28 + 16);
  v29 = *(_QWORD *)(v28 + 32);
  *(_QWORD *)&v53 = *(_QWORD *)(v28 + 8);
  *((_QWORD *)&v53 + 1) = __PAIR64__(v23, v25);
  *(_QWORD *)&v54 = *(_QWORD *)(v28 + 24);
  *((_QWORD *)&v54 + 1) = v29;
  v52 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::AddMatMat(v22, (uint64_t)&v55, CblasTrans, (uint64_t)&v52, CblasNoTrans, 1.0, v15);
  v52 = &unk_1E5D29D40;
  v53 = 0u;
  v54 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
  v55 = &unk_1E5D29D40;
  v56 = 0u;
  v57 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
  v30 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a5);
  kaldi::CuVectorBase<float>::AddRowSumMat(v30, v14, 1.0, v15);
  if (*(_BYTE *)(a1 + 208))
  {
    v31 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a5);
    v32 = v47 + 48 * a5;
    v33 = *(_QWORD *)(v31 + 8);
    v34 = *(_DWORD *)(v31 + 16);
    v35 = *(_QWORD *)(v31 + 32);
    v48 = &unk_1E5D29D70;
    v49 = v33;
    v51 = v35;
    v50 = v34;
    *((_QWORD *)&v56 + 1) = __PAIR64__(v23, v60[2]);
    LODWORD(v57) = v60[3];
    DWORD1(v57) = HIDWORD(v60[3]) - LODWORD(v60[3]) * v9;
    *((_QWORD *)&v57 + 1) = v60[4];
    v55 = &unk_1E5D29D40;
    *(_QWORD *)&v56 = v60[1] + 4 * LODWORD(v60[3]) * v9;
    LODWORD(v33) = *(_DWORD *)(v32 + 16);
    v36 = *(_QWORD *)(v32 + 32);
    *(_QWORD *)&v53 = *(_QWORD *)(v32 + 8);
    *((_QWORD *)&v53 + 1) = __PAIR64__(v23, v33);
    *(_QWORD *)&v54 = *(_QWORD *)(v32 + 24);
    *((_QWORD *)&v54 + 1) = v36;
    v52 = &unk_1E5D29D40;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v48, (uint64_t)&v55, 112, (uint64_t)&v52, 111, 1.0, v15);
    v52 = &unk_1E5D29D40;
    v53 = 0u;
    v54 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
    v55 = &unk_1E5D29D40;
    v56 = 0u;
    v57 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
    v37 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a5);
    v38 = *(_QWORD *)(v37 + 8) + 4 * *(int *)(v37 + 24);
    v39 = *(_DWORD *)(v37 + 16);
    v40 = *(_QWORD *)(v37 + 32);
    v48 = &unk_1E5D29D70;
    v49 = v38;
    v51 = v40;
    v50 = v39;
    *((_QWORD *)&v56 + 1) = __PAIR64__(v23, v59[2]);
    LODWORD(v57) = v59[3];
    DWORD1(v57) = HIDWORD(v59[3]) - LODWORD(v59[3]) * v9;
    *((_QWORD *)&v57 + 1) = v59[4];
    v55 = &unk_1E5D29D40;
    *(_QWORD *)&v56 = v59[1] + 4 * LODWORD(v59[3]) * v9;
    LODWORD(v38) = *(_DWORD *)(v32 + 16);
    v41 = *(_QWORD *)(v32 + 32);
    *(_QWORD *)&v53 = *(_QWORD *)(v32 + 8);
    *((_QWORD *)&v53 + 1) = __PAIR64__(v23, v38);
    *(_QWORD *)&v54 = *(_QWORD *)(v32 + 24);
    *((_QWORD *)&v54 + 1) = v41;
    v52 = &unk_1E5D29D40;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v48, (uint64_t)&v55, 112, (uint64_t)&v52, 111, 1.0, v15);
    v52 = &unk_1E5D29D40;
    v53 = 0u;
    v54 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
    v55 = &unk_1E5D29D40;
    v56 = 0u;
    v57 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
    v42 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a5);
    v43 = *(_QWORD *)(v42 + 8) + 8 * *(int *)(v42 + 24);
    v44 = *(_DWORD *)(v42 + 16);
    v45 = *(_QWORD *)(v42 + 32);
    v55 = &unk_1E5D29D70;
    *(_QWORD *)&v56 = v43;
    *(_QWORD *)&v57 = v45;
    *((_QWORD *)&v56 + 1) = v44;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v55, (uint64_t)v58, 112, v32, 111, 1.0, v15);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v46 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a5);
    kaldi::CuMatrixBase<float>::AddMatMat(v46, *(_QWORD *)(a1 + 368) + 48 * a5, CblasTrans, *(_QWORD *)(a1 + 320) + 48 * a5, CblasNoTrans, 1.0, v15);
  }
  v58[0] = &unk_1E5D29D40;
  memset(&v58[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v58);
  v59[0] = &unk_1E5D29D40;
  memset(&v59[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v59);
  v60[0] = &unk_1E5D29D40;
  memset(&v60[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v60);
}

void sub_1ADA72B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, _OWORD *a11, _OWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  a27 = &unk_1E5D29D40;
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a27);
  a32 = &unk_1E5D29D40;
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a32);
  a37 = &unk_1E5D29D40;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a37);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t *v9;
  uint64_t v10;
  int32x2_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t i;
  int32x2_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t j;
  int32x2_t *v22;
  uint64_t v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  void *__p[2];
  unsigned __int8 v30;
  _QWORD v31[36];

  if (*(_BYTE *)(a1 + 528))
    return;
  v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1)
    v3 = (v2 + 1);
  else
    v3 = 1;
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "input_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_QWORD *)(a1 + 568) != *(_QWORD *)(a1 + 560))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_QWORD *)(a1 + 616) != *(_QWORD *)(a1 + 608))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "bias_gradient_.size() == 0");
    goto LABEL_58;
  }
  v27 = *(_DWORD *)(a1 + 156);
  if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(a1 + 592) != *(_QWORD *)(a1 + 584))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "peephole_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(a1 + 640) != *(_QWORD *)(a1 + 632))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "projection_weights_gradient_.size() == 0");
LABEL_58:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
  }
  v4 = (_QWORD *)(a1 + 560);
  v5 = (_QWORD *)(a1 + 608);
  v28 = (_QWORD *)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 536, (int)v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 560, (int)v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 608, (int)v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), (int)v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), (int)v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), (int)v3);
  v6 = a1 + 12;
  if ((int)v3 >= 1)
  {
    v7 = 0;
    v8 = a1 + 8;
    do
    {
      v9 = (int32x2_t *)operator new();
      kaldi::CuMatrix<float>::CuMatrix(v9, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v8 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 0, 0, 0);
      v10 = *(_QWORD *)(*v28 + 8 * v7);
      *(_QWORD *)(*v28 + 8 * v7) = v9;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      v11 = (int32x2_t *)operator new();
      kaldi::CuMatrix<float>::CuMatrix(v11, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 0, 0, 0);
      v12 = *(_QWORD *)(*v4 + 8 * v7);
      *(_QWORD *)(*v4 + 8 * v7) = v11;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v13 = (_QWORD *)operator new();
      v14 = (4 * *(_DWORD *)(a1 + 176));
      v13[2] = 0;
      v13[3] = 0;
      *v13 = &unk_1E5D341C8;
      v13[1] = 0;
      kaldi::CuVector<float>::Resize((uint64_t)v13, v14, 0);
      v15 = *(_QWORD *)(*v5 + 8 * v7);
      *(_QWORD *)(*v5 + 8 * v7) = v13;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      if ((v27 & 0xFFFFFFFE) == 2)
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 656) + 48 * v7), (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v8 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 1, 0);
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 680) + 48 * v7), (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 1, 0);
        kaldi::CuVector<float>::Resize(*(_QWORD *)(a1 + 728) + 32 * v7, (4 * *(_DWORD *)(a1 + 176)), 1);
        if (*(_DWORD *)(a1 + 156) == 3)
        {
          kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 656) + 48 * v7, 1.0);
          kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 680) + 48 * v7, 1.0);
          kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 728) + 32 * v7, 1.0);
        }
      }
      ++v7;
    }
    while (v7 != v3);
  }
  if (*(_BYTE *)(a1 + 208))
  {
    v16 = (_QWORD *)(a1 + 584);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 584, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), (int)v3);
    if ((int)v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        v18 = (int32x2_t *)operator new();
        kaldi::CuMatrix<float>::CuMatrix(v18, 3, *(unsigned int *)(a1 + 176), 0, 0, 0);
        v19 = *(_QWORD *)(*v16 + 8 * i);
        *(_QWORD *)(*v16 + 8 * i) = v18;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        if ((v27 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 704) + 48 * i), 3, *(unsigned int *)(a1 + 176), 1, 0);
          if (*(_DWORD *)(a1 + 156) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 704) + 48 * i, 1.0);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v20 = (_QWORD *)(a1 + 632);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 632, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), (int)v3);
    if ((int)v3 >= 1)
    {
      for (j = 0; j != v3; ++j)
      {
        v22 = (int32x2_t *)operator new();
        kaldi::CuMatrix<float>::CuMatrix(v22, *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(unsigned int *)(a1 + 176), 0, 0, 0);
        v23 = *(_QWORD *)(*v20 + 8 * j);
        *(_QWORD *)(*v20 + 8 * j) = v22;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
        if ((v27 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 752) + 48 * j), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(unsigned int *)(a1 + 176), 1, 0);
          if (*(_DWORD *)(a1 + 156) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 752) + 48 * j, 1.0);
        }
      }
    }
  }
  *(_BYTE *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31, 2);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 272))(__p, a1);
    if ((v30 & 0x80u) == 0)
      v25 = __p;
    else
      v25 = (void **)__p[0];
    if ((v30 & 0x80u) == 0)
      v26 = v30;
    else
      v26 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    if ((char)v30 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31);
  }
}

void sub_1ADA73328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 248), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights();
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(a1 + 104);
  v6 = (_QWORD *)(a1 + 104);
  if (v5 == *(_QWORD *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    v5 = *(_QWORD *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v5 + 32 * a3, *(unsigned int *)(a2 + 16), 1);
  return kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)(*v6 + 32 * a3), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(a1, a2);
  *((_WORD *)a1 + 120) = 0;
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetTrainOptions(_QWORD *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent *v2;

  v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(_QWORD *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetHistoryState(uint64_t a1, int32x2_t *a2, unsigned int a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 1, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, *(_QWORD *)(a1 + 8) + 48 * a3, 111);
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetHistoryState(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v13[4];

  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 16), 1);
  v8 = *(_QWORD *)(a1 + 8) + 48 * a4;
  v9 = *(_QWORD *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  v10 = *(_DWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 32);
  v13[0] = &unk_1E5D29D70;
  v13[1] = v9;
  v13[3] = v11;
  v13[2] = v10;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v13);
}

int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetHistoryState(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)(a1[1] + 48 * a3), a2, 111);
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetHistoryState(_QWORD *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  v8 = a1[1] + 48 * a4;
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  v11 = *(_QWORD *)(v8 + 32);
  v13[0] = &unk_1E5D29D70;
  v13[1] = v10;
  v13[3] = v11;
  v13[2] = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ResetHistoryState(_QWORD *a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v19;
  _QWORD v20[35];
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  *(_QWORD *)(a1[1] + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    v8 = 0;
    do
    {
      if (((*(_QWORD *)(*a2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      {
        v9 = a1[1] + 48 * a4;
        v10 = *(_QWORD *)(v9 + 8) + 4 * *(_DWORD *)(v9 + 24) * (int)v8;
        v11 = *(_DWORD *)(v9 + 16);
        v12 = *(_QWORD *)(v9 + 32);
        v20[0] = &unk_1E5D29D70;
        v20[1] = v10;
        v20[3] = v12;
        v20[2] = v11;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v20);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          v13 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
        }
      }
      ++v8;
    }
    while (a2[1] > v8);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20, 3);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v19 & 0x80u) == 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    if ((v19 & 0x80u) == 0)
      v16 = v19;
    else
      v16 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    if ((char)v19 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20);
  }
  v21[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v23);
}

void sub_1ADA7386C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ResetHistoryState(_QWORD *a1)
{
  uint64_t i;

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  for (i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(_BYTE *)(result + 528) = 0;
  return result;
}

_QWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(_QWORD *result, int a2, float a3)
{
  float *v3;

  v3 = (float *)((char *)result + *(_QWORD *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((_BYTE *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3)
{
  float v4;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a3;
  v6 = *(_DWORD *)(a1 + 156);
  if (v6 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(_BYTE *)(a1 + 84))
        v4 = (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * a2) * a3;
      v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v13, v4);
      v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v14, v4);
      v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v15, v4);
      if (*(_BYTE *)(a1 + 208))
      {
        v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v16, v4);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v17, v4);
      }
    }
  }
  else if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v8, *(_QWORD *)(a1 + 656) + 48 * a2, v4);
      v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, *(_QWORD *)(a1 + 680) + 48 * a2, v4);
      v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(_QWORD *)(a1 + 728) + 32 * a2, v4);
      if (*(_BYTE *)(a1 + 208))
      {
        v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(_QWORD *)(a1 + 704) + 48 * a2, v4);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(_QWORD *)(a1 + 752) + 48 * a2, v4);
      }
    }
  }
  else if (a3 > 0.0 && v6 == 2)
  {
    v19 = a2;
    if (*(_BYTE *)(a1 + 84))
      v4 = (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * a2) * a3;
    v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v20, (int *)(*(_QWORD *)(a1 + 656) + 48 * v19), v4);
    v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v21, (int *)(*(_QWORD *)(a1 + 680) + 48 * v19), v4);
    v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v22, (_QWORD *)(*(_QWORD *)(a1 + 728) + 32 * v19), v4);
    if (*(_BYTE *)(a1 + 208))
    {
      v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v23, (int *)(*(_QWORD *)(a1 + 704) + 48 * v19), v4);
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v24, (int *)(*(_QWORD *)(a1 + 752) + 48 * v19), v4);
    }
  }
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(_QWORD *a1, unsigned int a2, float a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 264), a2, a3);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  *a3 = result;
  if (*(_QWORD *)(a1 + 544) == *(_QWORD *)(a1 + 536) || *(_QWORD *)(a1 + 568) == *(_QWORD *)(a1 + 560))
  {
    v15 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) == 1)
    v7 = 0;
  else
    v7 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v7);
  v9 = kaldi::CuMatrixBase<float>::CountZeros(v8);
  v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v7);
  v11 = kaldi::CuMatrixBase<float>::CountZeros(v10) + v9;
  v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v7);
  result = kaldi::CuVectorBase<float>::CountZeros(v12);
  *a2 = v11 + result;
  if (*(_BYTE *)(a1 + 208))
  {
    v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v7);
    result = kaldi::CuMatrixBase<float>::CountZeros(v13);
    *a2 += result;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v7);
    result = kaldi::CuMatrixBase<float>::CountZeros(v14);
    v15 = *a2 + result;
LABEL_11:
    *a2 = v15;
  }
  return result;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(_QWORD *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr((uint64_t)a1 + *(_QWORD *)(*a1 - 56), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs();
}

int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetInternalMemory(uint64_t a1, int *a2, int a3)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(_QWORD *)(a1 + 272) + 48 * a3, 111);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::EnsureBuffers(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 240))
  {
    v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 8) + v3), *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 480), v2);
    *(_BYTE *)(a1 + 240) = 1;
  }
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Check(uint64_t a1)
{
  kaldi::quasar::Vocab *v2;
  uint64_t v3;
  kaldi::quasar::Vocab *v4;
  uint64_t v5;
  kaldi::quasar::Vocab *v6;
  uint64_t v7;
  float result;
  kaldi::quasar::Vocab *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  kaldi::quasar::Vocab *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  kaldi::quasar::Vocab *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD v32[34];

  v2 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  if (kaldi::quasar::Vocab::VocabSize(v2) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #rows = ", 22);
    v9 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::quasar::Vocab::VocabSize(v9);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; expecting ", 12);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v3) != *(_DWORD *)(a1
                                                                                 + *(_QWORD *)(*(_QWORD *)a1 - 24)
                                                                                 + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #columns = ", 25);
    v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v12);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " (same as input dim)");
    goto LABEL_28;
  }
  v4 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  if (kaldi::quasar::Vocab::VocabSize(v4) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #rows = ", 26);
    v15 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
    kaldi::quasar::Vocab::VocabSize(v15);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v5) != *(_DWORD *)(a1
                                                                                 + *(_QWORD *)(*(_QWORD *)a1 - 24)
                                                                                 + 12))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #columns = ", 29);
    v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v18);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"; expecting ", 12);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
      v24 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"; expecting ", 12);
      v25 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1) + 16) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"; expecting ", 12);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v6 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    if (kaldi::quasar::Vocab::VocabSize(v6) == *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12))
    {
      v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      if (kaldi::QuantizedMatrixBase<short>::NumCols(v7) == *(_DWORD *)(a1 + 176))
        goto LABEL_12;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #columns = ", 30);
      v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumCols(v29);
      v30 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"; expecting ", 12);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #rows = ", 27);
      v26 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::quasar::Vocab::VocabSize(v26);
      v27 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"; expecting ", 12);
      v28 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_1ADA74424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 896) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 904) = xmmword_1AE13F660;
  *(_QWORD *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(_BYTE *)(a1 + 934) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &unk_1E5D2C5B0;
  *(_DWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D305B8;
  *(_QWORD *)(a1 + 88) = &unk_1E5D305D8;
  *(_QWORD *)(a1 + 96) = 0x100000001;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)a1 = &off_1E5D2BEA8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 848) = &off_1E5D2C198;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = &unk_1E5D2C038;
  *(_QWORD *)(a1 + 168) = &unk_1E5D2C060;
  *(_DWORD *)(a1 + 176) = a3;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0x3DCCCCCD3F800000;
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 513) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 536);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 536);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 560);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 560);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 608);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 608);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 208))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 584);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 208))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 584);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 224))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 632);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 224))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 632);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[35];

  v4 = a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *(_QWORD *)(a1 + 848) = off_1E5D32508;
  v5 = *(_QWORD *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 872), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3);
  *(_QWORD *)(a1 + 848) = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 896) = &off_1E5D2D150;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1E5D14DB8, a2);
  *(_QWORD *)(a1 + 160) = &unk_1E5D2C038;
  *(_QWORD *)(a1 + 168) = &unk_1E5D2C060;
  *(_QWORD *)a1 = &off_1E5D2BEA8;
  *(_QWORD *)(a1 + 848) = &off_1E5D2C198;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  v7 = *(_BYTE *)(a2 + 240);
  v8 = *(_BYTE *)(a2 + 241);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 240) = v7;
  *(_BYTE *)(a1 + 241) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 4));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 4));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368), *(_QWORD *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 4));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 392), *(_QWORD *)(a2 + 392), *(_QWORD *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 4));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 416), *(_QWORD *)(a2 + 416), *(_QWORD *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 4));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 440), *(_QWORD *)(a2 + 440), *(_QWORD *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 2);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 504), *(const void **)(a2 + 504), *(_QWORD *)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 2);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a2 + 592) - *(_QWORD *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 608), (uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 632), (uint64_t)(*(_QWORD *)(a2 + 640) - *(_QWORD *)(a2 + 632)) >> 3);
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 656), *(_QWORD *)(a2 + 656), *(_QWORD *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 4));
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 680), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 688) - *(_QWORD *)(a2 + 680)) >> 4));
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 704), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 712) - *(_QWORD *)(a2 + 704)) >> 4));
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 728), *(_QWORD *)(a2 + 728), *(_QWORD *)(a2 + 736), (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 5);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 752), *(_QWORD *)(a2 + 752), *(_QWORD *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 4));
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v56);
  }
  v9 = *(int **)(a2 + 184);
  if (v9)
  {
    kaldi::NewCuSubOrMat<short>(v9, v56);
    v10 = v56[0];
    v56[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v10);
    v11 = v56[0];
    v56[0] = 0;
    if (v11)
    {
      v12 = kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v11);
      MEMORY[0x1AF44D190](v12, 0x10D0C4068EB0291);
    }
  }
  v13 = *(int **)(a2 + 192);
  if (v13)
  {
    kaldi::NewCuSubOrMat<short>(v13, v56);
    v14 = v56[0];
    v56[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v14);
    v15 = v56[0];
    v56[0] = 0;
    if (v15)
    {
      v16 = kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v15);
      MEMORY[0x1AF44D190](v16, 0x10D0C4068EB0291);
    }
  }
  v17 = *(_QWORD **)(a2 + 200);
  if (v17)
  {
    kaldi::NewCuSubOrVec<float>(v17, 0, v56);
    v18 = v56[0];
    v56[0] = 0;
    v19 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v18;
    if (v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      v20 = v56[0];
      v56[0] = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    }
  }
  v21 = *(_QWORD *)(a2 + 216);
  if (v21)
  {
    kaldi::NewCuSubOrMat<float>(v21, 0, v56);
    v22 = v56[0];
    v56[0] = 0;
    v23 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v22;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
      v24 = v56[0];
      v56[0] = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
    }
  }
  v25 = *(int **)(a2 + 232);
  if (v25)
  {
    kaldi::NewCuSubOrMat<short>(v25, v56);
    v26 = v56[0];
    v56[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v26);
    v27 = v56[0];
    v56[0] = 0;
    if (v27)
    {
      v28 = kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v27);
      MEMORY[0x1AF44D190](v28, 0x10D0C4068EB0291);
    }
  }
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    v29 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 536) + 8 * v29))
      {
        v30 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a2, v29);
        kaldi::NewCuSubOrMat<float>(v30, 0, v56);
        v31 = *(_QWORD *)(a1 + 536);
        v32 = v56[0];
        v56[0] = 0;
        v33 = *(_QWORD *)(v31 + 8 * v29);
        *(_QWORD *)(v31 + 8 * v29) = v32;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
        v34 = v56[0];
        v56[0] = 0;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 560) + 8 * v29))
      {
        v35 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a2, v29);
        kaldi::NewCuSubOrMat<float>(v35, 0, v56);
        v36 = *(_QWORD *)(a1 + 560);
        v37 = v56[0];
        v56[0] = 0;
        v38 = *(_QWORD *)(v36 + 8 * v29);
        *(_QWORD *)(v36 + 8 * v29) = v37;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
        v39 = v56[0];
        v56[0] = 0;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 608) + 8 * v29))
      {
        v40 = (_QWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a2, v29);
        kaldi::NewCuSubOrVec<float>(v40, 0, v56);
        v41 = *(_QWORD *)(a1 + 608);
        v42 = v56[0];
        v56[0] = 0;
        v43 = *(_QWORD *)(v41 + 8 * v29);
        *(_QWORD *)(v41 + 8 * v29) = v42;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
        v44 = v56[0];
        v56[0] = 0;
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
      }
      if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(*(_QWORD *)(a2 + 584) + 8 * v29))
      {
        v45 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a2, v29);
        kaldi::NewCuSubOrMat<float>(v45, 0, v56);
        v46 = *(_QWORD *)(a1 + 584);
        v47 = v56[0];
        v56[0] = 0;
        v48 = *(_QWORD *)(v46 + 8 * v29);
        *(_QWORD *)(v46 + 8 * v29) = v47;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
        v49 = v56[0];
        v56[0] = 0;
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
      }
      if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(*(_QWORD *)(a2 + 632) + 8 * v29))
      {
        v50 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a2, v29);
        kaldi::NewCuSubOrMat<float>(v50, 0, v56);
        v51 = *(_QWORD *)(a1 + 632);
        v52 = v56[0];
        v56[0] = 0;
        v53 = *(_QWORD *)(v51 + 8 * v29);
        *(_QWORD *)(v51 + 8 * v29) = v52;
        if (v53)
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
        v54 = v56[0];
        v56[0] = 0;
        if (v54)
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
      }
      ++v29;
    }
    while (v29 < (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
  }
  if (*(_QWORD *)(a2 + 784) != *(_QWORD *)(a2 + 776))
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  return a1;
}

void sub_1ADA75198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,quasar::Bitmap *a24,quasar::Bitmap *a25,uint64_t a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t a30)
{
  _QWORD *v30;
  void **v31;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  v33 = *a15;
  if (*a15)
  {
    v30[64] = v33;
    operator delete(v33);
  }
  v34 = *a16;
  if (*a16)
  {
    v30[61] = v34;
    operator delete(v34);
  }
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a22;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a27, 0);
  v35 = v30[27];
  v30[27] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  v36 = v30[25];
  v30[25] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a29, 0);
  quasar::Bitmap::~Bitmap(a24);
  quasar::Bitmap::~Bitmap(a25);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v30, (uint64_t *)&off_1E5D14DB8);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v30 + 106));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  quasar::Bitmap *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = a2[3];
  *(_QWORD *)(a1 + 160) = &unk_1E5D2C038;
  v5 = a1 + 160;
  *(_QWORD *)(a1 + 168) = &unk_1E5D2C060;
  v6 = (quasar::Bitmap *)(a1 + 168);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  v11 = (void **)(v5 + 592);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 568);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 544);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 520);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 496);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 472);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 448);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 424);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 400);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 376);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v7 = *(void **)(v5 + 344);
  if (v7)
  {
    *(_QWORD *)(a1 + 512) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 480);
  if (v8)
  {
    *(_QWORD *)(a1 + 488) = v8;
    operator delete(v8);
  }
  v11 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), 0);
  v9 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v10 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  quasar::Bitmap::~Bitmap(v6);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v5);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  uint64_t v2;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void `non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(a1 - 168);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(_QWORD *a1)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
  JUMPOUT(0x1AF44D190);
}

char *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1ADA757E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Copy(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Copy((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

char *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent<kaldi::QuantizedMatrix<short>>((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1ADA75864(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50[35];

  v4 = a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *(_QWORD *)(a1 + 848) = off_1E5D32508;
  v5 = *(_QWORD *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 872), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3);
  *(_QWORD *)(a1 + 848) = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 896) = &off_1E5D2D150;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1E5D14D98, a2);
  *(_QWORD *)(a1 + 160) = &unk_1E5D2BC18;
  *(_QWORD *)(a1 + 168) = &unk_1E5D2BC40;
  *(_QWORD *)a1 = &off_1E5D2BA88;
  *(_QWORD *)(a1 + 848) = &off_1E5D2BD78;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  v7 = *(_BYTE *)(a2 + 240);
  v8 = *(_BYTE *)(a2 + 241);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 240) = v7;
  *(_BYTE *)(a1 + 241) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 4));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 4));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368), *(_QWORD *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 4));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 392), *(_QWORD *)(a2 + 392), *(_QWORD *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 4));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 416), *(_QWORD *)(a2 + 416), *(_QWORD *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 4));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 440), *(_QWORD *)(a2 + 440), *(_QWORD *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 2);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 504), *(const void **)(a2 + 504), *(_QWORD *)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 2);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a2 + 592) - *(_QWORD *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 608), (uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 632), (uint64_t)(*(_QWORD *)(a2 + 640) - *(_QWORD *)(a2 + 632)) >> 3);
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 656), *(_QWORD *)(a2 + 656), *(_QWORD *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 4));
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 680), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 688) - *(_QWORD *)(a2 + 680)) >> 4));
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 704), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 712) - *(_QWORD *)(a2 + 704)) >> 4));
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 728), *(_QWORD *)(a2 + 728), *(_QWORD *)(a2 + 736), (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 5);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 752), *(_QWORD *)(a2 + 752), *(_QWORD *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 4));
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v50);
  }
  v9 = *(int **)(a2 + 184);
  if (v9)
  {
    v10 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(v10, v9);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v10);
  }
  v11 = *(int **)(a2 + 192);
  if (v11)
  {
    v12 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(v12, v11);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v12);
  }
  v13 = *(_QWORD **)(a2 + 200);
  if (v13)
  {
    kaldi::NewCuSubOrVec<float>(v13, 0, v50);
    v14 = v50[0];
    v50[0] = 0;
    v15 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v14;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      v16 = v50[0];
      v50[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    }
  }
  v17 = *(_QWORD *)(a2 + 216);
  if (v17)
  {
    kaldi::NewCuSubOrMat<float>(v17, 0, v50);
    v18 = v50[0];
    v50[0] = 0;
    v19 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v18;
    if (v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      v20 = v50[0];
      v50[0] = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
    }
  }
  v21 = *(int **)(a2 + 232);
  if (v21)
  {
    v22 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(v22, v21);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v22);
  }
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    v23 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 536) + 8 * v23))
      {
        v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v24, 0, v50);
        v25 = *(_QWORD *)(a1 + 536);
        v26 = v50[0];
        v50[0] = 0;
        v27 = *(_QWORD *)(v25 + 8 * v23);
        *(_QWORD *)(v25 + 8 * v23) = v26;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
        v28 = v50[0];
        v50[0] = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 560) + 8 * v23))
      {
        v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v29, 0, v50);
        v30 = *(_QWORD *)(a1 + 560);
        v31 = v50[0];
        v50[0] = 0;
        v32 = *(_QWORD *)(v30 + 8 * v23);
        *(_QWORD *)(v30 + 8 * v23) = v31;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
        v33 = v50[0];
        v50[0] = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 608) + 8 * v23))
      {
        v34 = (_QWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a2, v23);
        kaldi::NewCuSubOrVec<float>(v34, 0, v50);
        v35 = *(_QWORD *)(a1 + 608);
        v36 = v50[0];
        v50[0] = 0;
        v37 = *(_QWORD *)(v35 + 8 * v23);
        *(_QWORD *)(v35 + 8 * v23) = v36;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        v38 = v50[0];
        v50[0] = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      }
      if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(*(_QWORD *)(a2 + 584) + 8 * v23))
      {
        v39 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v39, 0, v50);
        v40 = *(_QWORD *)(a1 + 584);
        v41 = v50[0];
        v50[0] = 0;
        v42 = *(_QWORD *)(v40 + 8 * v23);
        *(_QWORD *)(v40 + 8 * v23) = v41;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
        v43 = v50[0];
        v50[0] = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
      }
      if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(*(_QWORD *)(a2 + 632) + 8 * v23))
      {
        v44 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a2, v23);
        kaldi::NewCuSubOrMat<float>(v44, 0, v50);
        v45 = *(_QWORD *)(a1 + 632);
        v46 = v50[0];
        v50[0] = 0;
        v47 = *(_QWORD *)(v45 + 8 * v23);
        *(_QWORD *)(v45 + 8 * v23) = v46;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
        v48 = v50[0];
        v50[0] = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
      }
      ++v23;
    }
    while (v23 < (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
  }
  if (*(_QWORD *)(a2 + 784) != *(_QWORD *)(a2 + 776))
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  return a1;
}

void sub_1ADA760F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,quasar::Bitmap *a22,quasar::Bitmap *a23,void **a24,void **a25,void **a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,void **a30)
{
  _QWORD *v30;
  void **v31;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  v33 = *a14;
  if (*a14)
  {
    v30[64] = v33;
    operator delete(v33);
  }
  v34 = *a15;
  if (*a15)
  {
    v30[61] = v34;
    operator delete(v34);
  }
  a30 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a27, 0);
  v35 = v30[27];
  v30[27] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  v36 = v30[25];
  v30[25] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a29, 0);
  quasar::Bitmap::~Bitmap(a22);
  quasar::Bitmap::~Bitmap(a23);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v30, (uint64_t *)&off_1E5D14D98);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v30 + 106));
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(a1 - 160);
}

char *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1ADA76424(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(a1 - 168);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v6;
  void **v7;
  void *v10;
  BOOL v19;
  float *v20;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  int *v26;
  BOOL v32;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  void *v39;
  void *v40;
  int v41;
  BOOL v44;
  std::string *v45;
  int inited;
  float v47;
  kaldi::quasar::Vocab *v48;
  float v49;
  kaldi::quasar::Vocab *v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  float v66;
  kaldi::quasar::Vocab *v67;
  _QWORD *v68;
  void **v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[16];
  uint64_t v78;
  void *__p;
  void *v80;
  void **v81[34];
  void *v82[3];
  std::string v83;
  std::string v84;
  float v85;
  int v86;
  int v87;
  float v88;
  int v89;
  int v90;
  unsigned int v91;

  v6 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v90 = -1;
  v91 = v6;
  v88 = 2.0;
  *(float *)&v89 = -2.0;
  *(float *)&v86 = -2.0;
  v87 = 1036831949;
  v85 = 2.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v84);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v83);
  memset(v82, 0, sizeof(v82));
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_170;
    kaldi::ReadToken(a2, 0, (uint64_t)v82);
    if ((SHIBYTE(v82[2]) & 0x80000000) == 0)
      break;
    v10 = v82[1];
    if (v82[1] == (void *)10)
    {
      if (*(_QWORD *)v82[0] == 0x6C6C65436D754E3CLL && *((_WORD *)v82[0] + 4) == 15987)
      {
LABEL_86:
        v26 = (int *)&v91;
LABEL_159:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v26);
        goto LABEL_168;
      }
      if (*(_QWORD *)v82[0] == 0x61654D736169423CLL && *((_WORD *)v82[0] + 4) == 15982)
      {
LABEL_145:
        v20 = (float *)&v89;
        goto LABEL_156;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)11)
    {
      if (*(_QWORD *)v82[0] == 0x6E6152736169423CLL && *(_QWORD *)((char *)v82[0] + 3) == 0x3E65676E61527361)
      {
LABEL_121:
        v20 = &v88;
        goto LABEL_156;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)20)
    {
      if (*(_QWORD *)v82[0] == 0x47746567726F463CLL
        && *((_QWORD *)v82[0] + 1) == 0x4D73616942657461
        && *((_DWORD *)v82[0] + 4) == 1047421285)
      {
LABEL_95:
        v20 = (float *)&v86;
LABEL_156:
        kaldi::ReadBasicType<float>(a2, 0, v20);
        goto LABEL_168;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)21)
    {
      if (*(_QWORD *)v82[0] == 0x47746567726F463CLL
        && *((_QWORD *)v82[0] + 1) == 0x5273616942657461
        && *(_QWORD *)((char *)v82[0] + 13) == 0x3E65676E61527361)
      {
LABEL_146:
        v20 = &v85;
        goto LABEL_156;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)13)
    {
      if (*(_QWORD *)v82[0] == 0x74536D617261503CLL && *(_QWORD *)((char *)v82[0] + 5) == 0x3E7665646474536DLL)
      {
LABEL_109:
        v20 = (float *)&v87;
        goto LABEL_156;
      }
      v10 = v82[1];
    }
    if (v10 == (void *)15)
    {
      v19 = *(_QWORD *)v82[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v82[0] + 7) == 0x3E66656F43657461;
      v20 = (float *)(a1 + 464);
      if (v19)
        goto LABEL_156;
      v10 = v82[1];
    }
    if (v10 == (void *)25)
    {
      v23 = *(_QWORD *)v82[0] == 0x7463656A6F72503CLL
         && *((_QWORD *)v82[0] + 1) == 0x6E7261654C6E6F69
         && *((_QWORD *)v82[0] + 2) == 0x66656F4365746152
         && *((_BYTE *)v82[0] + 24) == 62;
      v20 = (float *)(a1 + 468);
      if (v23)
        goto LABEL_156;
      v10 = v82[1];
    }
    if (v10 == (void *)9)
    {
      v24 = *(_QWORD *)v82[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v82[0] + 8) == 62;
      v20 = (float *)(a1 + 472);
      if (v24)
        goto LABEL_156;
      v10 = v82[1];
      if (v82[1] == (void *)9)
      {
        v25 = *(_QWORD *)v82[0] == 0x6461724778614D3CLL && *((_BYTE *)v82[0] + 8) == 62;
        v20 = (float *)(a1 + 152);
        if (v25)
          goto LABEL_156;
        if ((HIBYTE(v82[2]) & 0x80) == 0)
          goto LABEL_155;
      }
    }
    if (v10 != (void *)18)
      goto LABEL_155;
    v7 = (void **)v82[0];
LABEL_148:
    v39 = *v7;
    v40 = v7[1];
    v41 = *((unsigned __int16 *)v7 + 8);
    if (v39 != (void *)0x6E6569646172473CLL || v40 != (void *)0x7079546D726F4E74 || v41 != 15973)
      goto LABEL_155;
    v45 = &v83;
LABEL_167:
    kaldi::ReadToken(a2, 0, (uint64_t)v45);
LABEL_168:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v7 = v82;
  switch(HIBYTE(v82[2]))
  {
    case 9:
      goto LABEL_134;
    case 0xA:
      if (v82[0] == (void *)0x6C6C65436D754E3CLL && LOWORD(v82[1]) == 15987)
        goto LABEL_86;
      if (v82[0] != (void *)0x61654D736169423CLL || LOWORD(v82[1]) != 15982)
        goto LABEL_133;
      goto LABEL_145;
    case 0xB:
      if (v82[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v82 + 3) == (void *)0x3E65676E61527361)
        goto LABEL_121;
      goto LABEL_133;
    case 0xD:
LABEL_104:
      if (v82[0] == (void *)0x74536D617261503CLL && *(void **)((char *)v82 + 5) == (void *)0x3E7665646474536DLL)
        goto LABEL_109;
      goto LABEL_133;
    case 0xF:
LABEL_110:
      v32 = v82[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v82 + 7) == (void *)0x3E66656F43657461;
      v20 = (float *)(a1 + 464);
      if (v32)
        goto LABEL_156;
      goto LABEL_133;
    case 0x12:
      goto LABEL_148;
    case 0x14:
      if (v82[0] != (void *)0x47746567726F463CLL
        || v82[1] != (void *)0x4D73616942657461
        || LODWORD(v82[2]) != 1047421285)
      {
        v7 = v82;
        switch(HIBYTE(v82[2]))
        {
          case 9:
            goto LABEL_134;
          case 0xD:
            goto LABEL_104;
          case 0xF:
            goto LABEL_110;
          case 0x12:
            goto LABEL_148;
          default:
            goto LABEL_155;
        }
      }
      goto LABEL_95;
    case 0x15:
      if (v82[0] != (void *)0x47746567726F463CLL
        || v82[1] != (void *)0x5273616942657461
        || *(void **)((char *)&v82[1] + 5) != (void *)0x3E65676E61527361)
      {
        v7 = v82;
        switch(HIBYTE(v82[2]))
        {
          case 9:
            goto LABEL_134;
          case 0xD:
            goto LABEL_104;
          case 0xF:
            goto LABEL_110;
          case 0x12:
            goto LABEL_148;
          default:
            goto LABEL_155;
        }
      }
      goto LABEL_146;
    case 0x19:
      v36 = v82[0] == (void *)0x7463656A6F72503CLL
         && v82[1] == (void *)0x6E7261654C6E6F69
         && v82[2] == (void *)0x66656F4365746152
         && v83.__r_.__value_.__s.__data_[0] == 62;
      v20 = (float *)(a1 + 468);
      if (v36)
        goto LABEL_156;
      if (HIBYTE(v82[2]) == 18)
      {
        v7 = v82;
        goto LABEL_148;
      }
LABEL_133:
      if (HIBYTE(v82[2]) == 9)
      {
LABEL_134:
        v37 = v82[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v82[1]) == 62;
        v20 = (float *)(a1 + 472);
        if (v37)
          goto LABEL_156;
        if (HIBYTE(v82[2]) == 9)
        {
          v38 = v82[0] == (void *)0x6461724778614D3CLL && LOBYTE(v82[1]) == 62;
          v20 = (float *)(a1 + 152);
          if (v38)
            goto LABEL_156;
        }
      }
LABEL_155:
      v44 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<MaxCell>");
      v20 = (float *)(a1 + 476);
      if (v44)
        goto LABEL_156;
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<RandomSeed>"))
      {
        v26 = &v90;
        goto LABEL_159;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<NoPeep>"))
      {
        *(_BYTE *)(a1 + 208) = 0;
        goto LABEL_168;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<OutputCellValues>"))
      {
        *(_BYTE *)(a1 + 209) = 1;
        goto LABEL_168;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "<InitTransformType>"))
      {
        v45 = &v84;
        goto LABEL_167;
      }
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v82, "</Component>"))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v81);
        v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Invalid token ", 14);
        if (SHIBYTE(v82[2]) >= 0)
          v69 = v82;
        else
          v69 = (void **)v82[0];
        if (SHIBYTE(v82[2]) >= 0)
          v70 = HIBYTE(v82[2]);
        else
          v70 = (uint64_t)v82[1];
        v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)". Allowed tokens: ", 18);
        v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v81);
      }
LABEL_170:
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateParams((uint64_t *)a1, v91);
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v84);
      *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v83);
      if (v90 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v90);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v77, a3);
      v47 = *(float *)&v87;
      v48 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
      kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<short>>(a3, (kaldi::GaussRandomNumber *)v77, inited, v48, v47);
      v49 = *(float *)&v87;
      v50 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
      kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<short>>(a3, (kaldi::GaussRandomNumber *)v77, inited, v50, v49);
      v51 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1) + 16);
      v75 = 0;
      v76 = 0;
      v74 = 0;
      kaldi::Vector<float>::Resize((void **)&v74, v51, 0);
      if ((int)v75 >= 1)
      {
        v52 = 0;
        do
        {
          v53 = *(float *)&v89;
          v54 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
          v55 = v53 + (v54 + -0.5) * v88;
          v56 = (int)v75;
          v74[v52++] = v55;
        }
        while (v52 < v56);
      }
      if ((int)v91 >= 1)
      {
        v57 = v91;
        v58 = &v74[v91];
        do
        {
          v59 = *(float *)&v86;
          v60 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
          v61 = v59 + (v60 + -0.5) * v85;
          *v58++ = v61;
          --v57;
        }
        while (v57);
      }
      if (!*(_QWORD *)(a1 + 200))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v81);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"bias_ thought to be initialized here", 36);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v81);
      }
      v62 = operator new();
      kaldi::CuVector<float>::CuVector(v62, &v74, 0);
      v63 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v62;
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
      if (*(_BYTE *)(a1 + 208))
      {
        v64 = *(float *)&v87;
        v65 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(a3, (kaldi::GaussRandomNumber *)v77, inited, v65, v64);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v66 = *(float *)&v87;
        v67 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
        kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<short>>(a3, (kaldi::GaussRandomNumber *)v77, inited, v67, v66);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
      kaldi::Vector<float>::Destroy((uint64_t)&v74);
      if (__p)
      {
        v80 = __p;
        operator delete(__p);
      }
      v81[0] = (void **)&v78;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v81);
      if (SHIBYTE(v82[2]) < 0)
        operator delete(v82[0]);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_155;
  }
}

void sub_1ADA76EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)va1);
  if (*(char *)(v5 - 185) < 0)
    operator delete(*(void **)(v5 - 208));
  if (*(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  if (*(char *)(v5 - 137) < 0)
    operator delete(*(void **)(v5 - 160));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateParams(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void **v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *__p[2];
  unsigned __int8 v24;
  _QWORD v25[35];

  *((_DWORD *)a1 + 44) = a2;
  v3 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  if (*(_DWORD *)(v3 + 12) > a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"# LSTM cells (", 14);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)") should not be less than output dim (", 38);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, ").");
    goto LABEL_32;
  }
  if (a1[23])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "input_weights_ thought to be un-initialized here");
    goto LABEL_32;
  }
  v4 = (4 * a2);
  v5 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v5, v4, *(unsigned int *)(v3 + 8));
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a1 + 23, v5);
  if (a1[24])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "recurrent_weights_ thought to be un-initialized here");
    goto LABEL_32;
  }
  v6 = (4 * *((_DWORD *)a1 + 44));
  v7 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v8 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v8, v6, *(unsigned int *)(v7 + 12));
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a1 + 24, v8);
  if (a1[25])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "bias_ thought to be un-initialized here");
    goto LABEL_32;
  }
  v9 = (4 * *((_DWORD *)a1 + 44));
  v10 = (_QWORD *)operator new();
  v10[2] = 0;
  v10[3] = 0;
  *v10 = &unk_1E5D341C8;
  v10[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v10, v9, 0);
  v11 = a1[25];
  a1[25] = (uint64_t)v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  if (*((_BYTE *)a1 + 208))
  {
    if (a1[27])
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "peephole_weights_ thought to be un-initialized here");
      goto LABEL_32;
    }
    v12 = (int32x2_t *)operator new();
    kaldi::CuMatrix<float>::CuMatrix(v12, 3, *((unsigned int *)a1 + 44), 0, 0, 0);
    v13 = a1[27];
    a1[27] = (uint64_t)v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  }
  v14 = *a1;
  if (*((_DWORD *)a1 + 44) == *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 12))
  {
    *((_BYTE *)a1 + 224) = 0;
    goto LABEL_15;
  }
  v15 = a1[29];
  *((_BYTE *)a1 + 224) = 1;
  if (v15)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "projection_weights_ thought to be un-initialized here");
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  v16 = (uint64_t)a1 + *(_QWORD *)(v14 - 24);
  v17 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v17, *(unsigned int *)(v16 + 12), *((unsigned int *)a1 + 44));
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a1 + 29, v17);
LABEL_15:
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v25, 2);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Allocated memory for the parameters: ", 37);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 264))(__p, a1);
    if ((v24 & 0x80u) == 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if ((v24 & 0x80u) == 0)
      v20 = v24;
    else
      v20 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
    if ((char)v24 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v25);
  }
}

void sub_1ADA77390()
{
  JUMPOUT(0x1ADA773A0);
}

void sub_1ADA773AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<short>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, kaldi::quasar::Vocab *this, float a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  float v14;
  float v15;
  _QWORD v17[2];
  int v18;

  v10 = kaldi::quasar::Vocab::VocabSize(this);
  v11 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)this);
  kaldi::Matrix<float>::Matrix((uint64_t)v17, v10, v11, 0, 0);
  v12 = 0;
LABEL_2:
  if (v12 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v17))
  {
    for (i = 0; ; ++i)
    {
      if (i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v17))
      {
        ++v12;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0);
          v14 = v15 * a5;
        }
        else
        {
          if (a3 != 1)
            continue;
          v14 = (kaldi::UniformRandomNumber::RandUniform(a1, 0) + -0.5) * (float)(a5 + a5);
        }
      }
      else if (v12 == i)
      {
        v14 = 1.0;
      }
      else
      {
        v14 = 0.0;
      }
      *(float *)(v17[0] + 4 * (int)v12 * v18 + 4 * i) = v14;
    }
  }
  kaldi::QuantizedMatrixBase<short>::CopyFromMat((uint64_t)this, (uint64_t)v17);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v17);
}

void sub_1ADA77524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitData(_QWORD *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitData((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2, a3);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  float *v11;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v19;
  BOOL v22;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  __int128 *v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float *v46;
  int32x2_t *v47;
  uint64_t v48;
  void (***v49)(_QWORD, uint64_t *, uint64_t, uint64_t);
  _QWORD *v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  _QWORD *v58;
  __int128 *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  void *__p[2];
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char v68;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v66 = 0uLL;
    v67 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v66);
    if ((SHIBYTE(v67) & 0x80000000) == 0)
    {
      switch(HIBYTE(v67))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((_QWORD)v66 != 0x6C6C65436D754E3CLL || WORD4(v66) != 15987)
            goto LABEL_150;
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_150;
        case 0xF:
          v24 = (_QWORD)v66 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v66 + 7) == 0x3E66656F43657461;
          v11 = (float *)(a1 + 464);
          if (v24)
            goto LABEL_127;
          if (HIBYTE(v67) != 8)
            goto LABEL_84;
          goto LABEL_97;
        case 0x12:
          if ((_QWORD)v66 == 0x4374757074754F3CLL
            && *((_QWORD *)&v66 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v67 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v67) == 9)
            goto LABEL_119;
          if (HIBYTE(v67) != 18)
            goto LABEL_150;
          v22 = (_QWORD)v66 == 0x6E6569646172473CLL && *((_QWORD *)&v66 + 1) == 0x7079546D726F4E74;
          if (!v22 || (unsigned __int16)v67 != 15973)
            goto LABEL_150;
          goto LABEL_133;
        default:
          if (HIBYTE(v67) != 25)
            goto LABEL_150;
          v19 = (_QWORD)v66 == 0x7463656A6F72503CLL
             && *((_QWORD *)&v66 + 1) == 0x6E7261654C6E6F69
             && v67 == 0x66656F4365746152
             && v68 == 62;
          v11 = (float *)(a1 + 468);
          if (v19)
            goto LABEL_127;
LABEL_84:
          if (HIBYTE(v67) != 9)
            goto LABEL_150;
LABEL_85:
          v25 = (_QWORD)v66 == 0x6D726F4E78614D3CLL && BYTE8(v66) == 62;
          v11 = (float *)(a1 + 472);
          if (v25)
            goto LABEL_127;
          if (HIBYTE(v67) == 8)
            goto LABEL_97;
          if (HIBYTE(v67) != 9)
            goto LABEL_150;
          v26 = (_QWORD)v66 == 0x6C6C654378614D3CLL && BYTE8(v66) == 62;
          v11 = (float *)(a1 + 476);
          if (!v26)
            goto LABEL_119;
          goto LABEL_127;
      }
    }
    v8 = *((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1) == 10
      && (*(_QWORD *)v66 == 0x6C6C65436D754E3CLL ? (v9 = *(unsigned __int16 *)(v66 + 8) == 15987) : (v9 = 0), v9))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176);
    }
    else
    {
      if (*((_QWORD *)&v66 + 1) == 15)
      {
        v10 = *(_QWORD *)v66 == 0x61526E7261654C3CLL && *(_QWORD *)(v66 + 7) == 0x3E66656F43657461;
        v11 = (float *)(a1 + 464);
        if (v10)
          goto LABEL_127;
        v8 = *((_QWORD *)&v66 + 1);
      }
      if (v8 == 25)
      {
        v14 = *(_QWORD *)v66 == 0x7463656A6F72503CLL
           && *(_QWORD *)(v66 + 8) == 0x6E7261654C6E6F69
           && *(_QWORD *)(v66 + 16) == 0x66656F4365746152
           && *(_BYTE *)(v66 + 24) == 62;
        v11 = (float *)(a1 + 468);
        if (v14)
          goto LABEL_127;
        v8 = *((_QWORD *)&v66 + 1);
      }
      if (v8 != 9)
        goto LABEL_47;
      v15 = *(_QWORD *)v66 == 0x6D726F4E78614D3CLL && *(_BYTE *)(v66 + 8) == 62;
      v11 = (float *)(a1 + 472);
      if (v15)
        goto LABEL_127;
      v8 = *((_QWORD *)&v66 + 1);
      if (*((_QWORD *)&v66 + 1) != 9)
        goto LABEL_47;
      v16 = *(_QWORD *)v66 == 0x6C6C654378614D3CLL && *(_BYTE *)(v66 + 8) == 62;
      v11 = (float *)(a1 + 476);
      if (v16)
        goto LABEL_127;
      if ((v67 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v67) == 9)
          goto LABEL_119;
        if (HIBYTE(v67) != 8)
          goto LABEL_150;
LABEL_97:
        if ((_QWORD)v66 != 0x3E706565506F4E3CLL)
        {
          if ((v67 & 0x8000000000000000) == 0)
            goto LABEL_150;
LABEL_100:
          v8 = *((_QWORD *)&v66 + 1);
          if (v8 != 18)
            goto LABEL_120;
LABEL_101:
          if (*(_QWORD *)v66 == 0x4374757074754F3CLL
            && *(_QWORD *)(v66 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v66 + 16) == 15987)
          {
LABEL_132:
            *(_BYTE *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          v8 = *((_QWORD *)&v66 + 1);
          if (*((_QWORD *)&v66 + 1) != 18)
            goto LABEL_120;
          if (*(_QWORD *)v66 == 0x6E6569646172473CLL
            && *(_QWORD *)(v66 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v66 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            v65 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v65) < 0)
              operator delete(__p[0]);
            goto LABEL_128;
          }
          if ((v67 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v67) != 9)
              goto LABEL_150;
LABEL_119:
            v31 = &v66;
          }
          else
          {
LABEL_120:
            if (v8 != 9)
              goto LABEL_150;
            v31 = (__int128 *)v66;
          }
          v32 = *(_QWORD *)v31;
          v33 = *((unsigned __int8 *)v31 + 8);
          v34 = v32 == 0x6461724778614D3CLL && v33 == 62;
          v11 = (float *)(a1 + 152);
          if (!v34)
          {
LABEL_150:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v67 >= 0)
              v59 = &v66;
            else
              v59 = (__int128 *)v66;
            if (v67 >= 0)
              v60 = HIBYTE(v67);
            else
              v60 = *((_QWORD *)&v66 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v11);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v8 != 8)
          goto LABEL_101;
        if (*(_QWORD *)v66 != 0x3E706565506F4E3CLL)
          goto LABEL_100;
      }
      *(_BYTE *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v67) < 0)
      operator delete((void *)v66);
  }
  v35 = *(_DWORD *)(a1 + 176);
  v36 = *(_QWORD *)a1;
  v37 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  if (v35 < v37)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
    v61 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)") should not be less than output dim (", 38);
    v62 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v62, ").");
    goto LABEL_163;
  }
  v38 = *(_QWORD *)(a1 + 184);
  *(_BYTE *)(a1 + 224) = v35 > v37;
  if (v38)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    goto LABEL_163;
  }
  v39 = (4 * v35);
  v40 = a1 + *(_QWORD *)(v36 - 24);
  v41 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v41, v39, *(unsigned int *)(v40 + 8));
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v41);
  v42 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::QuantizedMatrix<short>::Read(v42, a2, a3, a4);
  if (*(_QWORD *)(a1 + 192))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "recurrent_weights_ thougth to be un-initialized here");
    goto LABEL_163;
  }
  v43 = (4 * *(_DWORD *)(a1 + 176));
  v44 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v45 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v45, v43, *(unsigned int *)(v44 + 12));
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v45);
  v46 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  kaldi::QuantizedMatrix<short>::Read(v46, a2, a3, a4);
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_QWORD *)(a1 + 216))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "peephole_weights_ thougth to be un-initialized here");
      goto LABEL_163;
    }
    v47 = (int32x2_t *)operator new();
    kaldi::CuMatrix<float>::CuMatrix(v47, 3, *(unsigned int *)(a1 + 176), 0, 0, 0);
    v48 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v47;
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
    v49 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t))kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
    (**v49)(v49, a2, a3, a4);
  }
  if (*(_QWORD *)(a1 + 200))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "bias_ thougth to be un-initialized here");
    goto LABEL_163;
  }
  v50 = (_QWORD *)operator new();
  v50[2] = 0;
  v50[3] = 0;
  *v50 = &unk_1E5D341C8;
  v50[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v50, 1, 0);
  v51 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v50;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
  v52 = (void (***)(_QWORD, uint64_t *, uint64_t))kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  (**v52)(v52, a2, a3);
  if (*(_BYTE *)(a1 + 224))
  {
    if (!*(_QWORD *)(a1 + 232))
    {
      v53 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v54 = operator new();
      kaldi::QuantizedMatrix<short>::QuantizedMatrix(v54, *(unsigned int *)(v53 + 12), *(unsigned int *)(a1 + 176));
      std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v54);
      v55 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrix<short>::Read(v55, a2, a3, a4);
      goto LABEL_149;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "projection_weights_ thougth to be un-initialized here");
LABEL_163:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
LABEL_149:
  v56 = *(_QWORD *)a1;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16) = 0;
  return (*(uint64_t (**)(uint64_t))(v56 + 128))(a1);
}

void sub_1ADA78100()
{
  JUMPOUT(0x1ADA78108);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  std::string __p;

  kaldi::WriteToken(a2, a3, "<NumCells>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<ProjectionLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxCell>");
  result = kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  if (!*(_BYTE *)(a1 + 208))
    result = kaldi::WriteToken(a2, a3, "<NoPeep>");
  if (*(_BYTE *)(a1 + 209))
    return kaldi::WriteToken(a2, a3, "<OutputCellValues>");
  return result;
}

void sub_1ADA782B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteData(_BYTE *a1, _QWORD *a2, uint64_t a3, int a4)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;

  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 128))(a1);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 192))(a1, a2, a3);
  v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<short>::Write(v8, a2, a3, a4);
  v9 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<short>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3);
  if (a1[224])
  {
    v12 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    kaldi::QuantizedMatrix<short>::Write(v12, a2, a3, a4);
  }
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteData((_BYTE *)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1)
{
  kaldi::quasar::Vocab *v2;
  int v3;
  uint64_t v4;
  int v5;
  kaldi::quasar::Vocab *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  kaldi::quasar::Vocab *v12;
  int v13;
  uint64_t v14;

  v2 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  v3 = kaldi::quasar::Vocab::VocabSize(v2);
  v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4) * v3;
  v6 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  v7 = kaldi::quasar::Vocab::VocabSize(v6);
  v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  v9 = v5 + kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  v10 = (v9 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1) + 16));
  if (*(_BYTE *)(a1 + 208))
  {
    v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 20);
    v10 = (v10
                       + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 16)
                       * v11);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v12 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    v13 = kaldi::quasar::Vocab::VocabSize(v12);
    v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    return v10 + kaldi::QuantizedMatrixBase<short>::NumCols(v14) * v13;
  }
  return v10;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams((uint64_t)a1 + *(_QWORD *)(*a1 - 192));
}

const void **kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetParams(_BYTE *a1, void **a2)
{
  uint64_t v4;
  kaldi::quasar::Vocab *v5;
  int v6;
  uint64_t v7;
  int v8;
  kaldi::quasar::Vocab *v9;
  int v10;
  uint64_t v11;
  int v12;
  float *v13;
  int v14;
  float *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  const void **v21;
  const void **result;
  int v23;
  kaldi::quasar::Vocab *v24;
  int v25;
  uint64_t v26;
  int v27;
  float *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  v6 = kaldi::quasar::Vocab::VocabSize(v5);
  v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  v8 = kaldi::QuantizedMatrixBase<short>::NumCols(v7) * v6;
  v9 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  v10 = kaldi::quasar::Vocab::VocabSize(v9);
  v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  v30 = 0;
  v31 = 0;
  v12 = kaldi::QuantizedMatrixBase<short>::NumCols(v11) * v10;
  v29 = (char *)*a2;
  LODWORD(v30) = v8;
  v13 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v29, v13);
  v30 = 0;
  v31 = 0;
  v14 = v12 + v8;
  v29 = (char *)*a2 + 4 * v8;
  LODWORD(v30) = v12;
  v15 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v29, v15);
  if (a1[208])
  {
    v16 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    v17 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v16;
    v30 = 0;
    v31 = 0;
    v18 = v17 + v14;
    v29 = (char *)*a2 + 4 * v14;
    LODWORD(v30) = v17;
    v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v29, v19);
    v14 = v18;
  }
  v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  v30 = 0;
  v31 = 0;
  v29 = (char *)*a2 + 4 * v14;
  LODWORD(v30) = v20;
  v21 = (const void **)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  result = kaldi::CuVectorBase<float>::CopyToVec<float>(v21, (uint64_t)&v29);
  if (a1[224])
  {
    v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v14;
    v24 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    v25 = kaldi::quasar::Vocab::VocabSize(v24);
    v26 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    v27 = kaldi::QuantizedMatrixBase<short>::NumCols(v26);
    v30 = 0;
    v31 = 0;
    v29 = (char *)*a2 + 4 * v23;
    v30 = (v27 * v25);
    v28 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    return (const void **)kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v29, v28);
  }
  return result;
}

const void **`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetParams(_QWORD *a1, void **a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetParams((_BYTE *)a1 + *(_QWORD *)(*a1 - 200), a2);
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams(_BYTE *a1, char **a2)
{
  kaldi::quasar::Vocab *v4;
  int v5;
  uint64_t v6;
  int v7;
  kaldi::quasar::Vocab *v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  void *v18;
  int v19;
  void *result;
  int v21;
  kaldi::quasar::Vocab *v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  v4 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  v5 = kaldi::quasar::Vocab::VocabSize(v4);
  v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  v7 = kaldi::QuantizedMatrixBase<short>::NumCols(v6) * v5;
  v8 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  v9 = kaldi::quasar::Vocab::VocabSize(v8);
  v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  v11 = kaldi::QuantizedMatrixBase<short>::NumCols(v10) * v9;
  v12 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  v28 = 0;
  v29 = 0;
  v27 = *a2;
  LODWORD(v28) = v7;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v12, &v27);
  v13 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  v28 = 0;
  v29 = 0;
  v14 = v11 + v7;
  v27 = &(*a2)[4 * v7];
  LODWORD(v28) = v11;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v13, &v27);
  if (a1[208])
  {
    v15 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    v16 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v15;
    v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    v28 = 0;
    v29 = 0;
    v27 = &(*a2)[4 * v14];
    LODWORD(v28) = v16;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v17, &v27);
    v14 += v16;
  }
  v18 = (void *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  v28 = 0;
  v29 = 0;
  v27 = &(*a2)[4 * v14];
  LODWORD(v28) = v19;
  result = kaldi::CuVectorBase<float>::CopyFromVec<float>(v18, (uint64_t)&v27);
  if (a1[224])
  {
    v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v14;
    v22 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    v23 = kaldi::quasar::Vocab::VocabSize(v22);
    v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    v25 = kaldi::QuantizedMatrixBase<short>::NumCols(v24) * v23;
    v26 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    v28 = 0;
    v29 = 0;
    v27 = &(*a2)[4 * v21];
    LODWORD(v28) = v25;
    return (void *)kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v26, &v27);
  }
  return result;
}

void *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams(_QWORD *a1, char **a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams((_BYTE *)a1 + *(_QWORD *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1)
{
  int *v2;
  float v3;
  int *v4;
  float v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;

  v2 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  v3 = kaldi::QuantizedMatrixBase<short>::Sum(v2);
  v4 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  v5 = v3 + kaldi::QuantizedMatrixBase<short>::Sum(v4);
  if (*(_BYTE *)(a1 + 208))
  {
    v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
    v5 = v5 + kaldi::CuMatrixBase<float>::Sum(v6);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v7 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    v5 = v5 + kaldi::QuantizedMatrixBase<short>::Sum(v7);
  }
  v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  return v5 + kaldi::CuVectorBase<float>::Sum(v8);
}

float `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams((uint64_t)a1 + *(_QWORD *)(*a1 - 224));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1)
{
  kaldi::quasar::Vocab *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t v6[6];

  v2 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  v3 = kaldi::quasar::Vocab::VocabSize(v2);
  v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4);
  kaldi::CuMatrix<float>::CuMatrix(v6, v3, v5, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v6);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

void sub_1ADA78AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  kaldi::quasar::Vocab *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a4);
  v5 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  v6 = kaldi::quasar::Vocab::VocabSize(v5);
  v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  v8 = kaldi::QuantizedMatrixBase<short>::NumCols(v7);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)va, v6, v8, 1, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)va);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

uint64_t sub_1ADA78B54()
{
  uint64_t v0;
  float v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  kaldi::quasar::Vocab *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  int32x2_t v13[14];

  if (*(_BYTE *)(v0 + 208))
  {
    v2 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0) + 20);
    v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    kaldi::CuMatrix<float>::Resize(v13, v2, *(unsigned int *)(v3 + 16), 1, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v13);
    v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    kaldi::CuMatrixBase<float>::AddMat(v4, (uint64_t)v13, 111, v1, 1.0);
  }
  v5 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(v0) + 16);
  v12[0] = &unk_1E5D341C8;
  memset(&v12[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v12, v5, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v12);
  v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(v0);
  kaldi::CuVectorBase<float>::AddVec(v6, (uint64_t)v12, v1, 1.0);
  if (*(_BYTE *)(v0 + 224))
  {
    v7 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    v8 = kaldi::quasar::Vocab::VocabSize(v7);
    v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    v10 = kaldi::QuantizedMatrixBase<short>::NumCols(v9);
    kaldi::CuMatrix<float>::Resize(v13, v8, v10, 1, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v13);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    kaldi::QuantizedMatrixBase<short>::AddMat();
  }
  v12[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v12);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v13);
}

void sub_1ADA78C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(_QWORD *a1)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PerturbParams((uint64_t)a1 + *(_QWORD *)(*a1 - 232));
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient(_BYTE *a1, uint64_t a2, uint64_t a3, void **a4)
{
  const void *v8;
  void *v9;
  uint64_t v10;
  kaldi::quasar::Vocab *v11;
  int v12;
  uint64_t v13;
  int v14;
  kaldi::quasar::Vocab *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  const void **v28;
  int v29;
  kaldi::quasar::Vocab *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;

  v8 = (const void *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 136))(a1);
  if (v8)
  else
    v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 336))(v9, a2, a3, 0, 0);
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize(a4, v10, 0);
  v11 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  v12 = kaldi::quasar::Vocab::VocabSize(v11);
  v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  v14 = kaldi::QuantizedMatrixBase<short>::NumCols(v13) * v12;
  v15 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  v16 = kaldi::quasar::Vocab::VocabSize(v15);
  v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  v18 = kaldi::QuantizedMatrixBase<short>::NumCols(v17);
  v40 = 0;
  v41 = 0;
  v39 = *a4;
  LODWORD(v40) = v14;
  v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v36, v19, 111);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v39, (uint64_t)&v36);
  v20 = v18 * v16;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v36);
  v37 = 0;
  v38 = 0;
  v21 = v20 + v14;
  v36 = (uint64_t)*a4 + 4 * v14;
  LODWORD(v37) = v20;
  v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v36, v22);
  if (a1[208])
  {
    v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    v24 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v23;
    v37 = 0;
    v38 = 0;
    v25 = v24 + v21;
    v36 = (uint64_t)*a4 + 4 * v21;
    LODWORD(v37) = v24;
    v26 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v36, v26);
    v21 = v25;
  }
  v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  v37 = 0;
  v38 = 0;
  v36 = (uint64_t)*a4 + 4 * v21;
  LODWORD(v37) = v27;
  v28 = (const void **)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v28, (uint64_t)&v36);
  if (a1[224])
  {
    v29 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v21;
    v30 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    v31 = kaldi::quasar::Vocab::VocabSize(v30);
    v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    v33 = kaldi::QuantizedMatrixBase<short>::NumCols(v32);
    v37 = 0;
    v38 = 0;
    v36 = (uint64_t)*a4 + 4 * v29;
    v37 = (v33 * v31);
    v34 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v36, v34);
  }
  return (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 8))(v9);
}

void sub_1ADA78F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient((_BYTE *)a1 + *(_QWORD *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(_QWORD *a1, int a2)
{
  float *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;

  v2 = (float *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if (!*((_BYTE *)v2 + 84))
    return v2[14];
  v3 = a1[63];
  v4 = a1[64] - v3;
  if (!v4)
    return NAN;
  v5 = v4 >> 2;
  if ((int)v5 <= a2)
    return NAN;
  v6 = v5 - 1;
  if (a2 >= 0)
    v6 = a2;
  return *(float *)(v3 + 4 * v6);
}

float `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(_QWORD *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info(uint64_t a1)
{
  _QWORD *v2;
  kaldi::quasar::Vocab *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  kaldi::quasar::Vocab *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  kaldi::quasar::Vocab *v28;
  void **v29;
  uint64_t v30;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  unsigned __int8 v37;
  void *v38[2];
  unsigned __int8 v39;
  void *v40[2];
  unsigned __int8 v41;
  void *v42[2];
  unsigned __int8 v43;
  _QWORD v44[11];
  char v45;
  uint64_t v46;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v44);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 192))(a1, v44, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Input weights:", 16);
  v3 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<short>(v3);
  if ((v43 & 0x80u) == 0)
    v4 = v42;
  else
    v4 = (void **)v42[0];
  if ((v43 & 0x80u) == 0)
    v5 = v43;
  else
    v5 = (uint64_t)v42[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  v8 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<short>(v8);
  if ((v41 & 0x80u) == 0)
    v9 = v40;
  else
    v9 = (void **)v40[0];
  if ((v41 & 0x80u) == 0)
    v10 = v41;
  else
    v10 = (uint64_t)v40[1];
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13);
  if ((v39 & 0x80u) == 0)
    v14 = v38;
  else
    v14 = (void **)v38[0];
  if ((v39 & 0x80u) == 0)
    v15 = v39;
  else
    v15 = (uint64_t)v38[1];
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n Forget gate bias:", 19);
  v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  v19 = *(int *)(a1 + 176);
  v34 = 0;
  v20 = *(_QWORD *)(v18 + 8) + 4 * v19;
  v32 = &unk_1E5D29D70;
  v33 = v20;
  LODWORD(v34) = v19;
  v35 = *(_QWORD *)(v18 + 24);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)&v32);
  if ((v37 & 0x80u) == 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  if ((v37 & 0x80u) == 0)
    v22 = v37;
  else
    v22 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v21, v22);
  if ((char)v37 < 0)
    operator delete(__p[0]);
  if ((char)v39 < 0)
    operator delete(v38[0]);
  if ((char)v41 < 0)
    operator delete(v40[0]);
  if ((char)v43 < 0)
    operator delete(v42[0]);
  if (*(_BYTE *)(a1 + 208))
  {
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Peephole weights:", 19);
    v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v24);
    v25 = v34 >= 0 ? &v32 : (void **)v32;
    v26 = v34 >= 0 ? HIBYTE(v34) : v33;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Projection weights:", 21);
    v28 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<short>(v28);
    v29 = v34 >= 0 ? &v32 : (void **)v32;
    v30 = v34 >= 0 ? HIBYTE(v34) : v33;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
  }
  std::stringbuf::str();
  v44[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v44[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v45 < 0)
    operator delete((void *)v44[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v46);
}

void sub_1ADA795F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info((uint64_t)a1 + *(_QWORD *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  void **v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  void **v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  uint64_t v41;
  void **v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  uint64_t v48;
  std::string *v49;
  std::string::size_type size;
  std::string *v51;
  __int128 v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  uint64_t v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  void *__p[2];
  unsigned __int8 v69;
  void *v70[2];
  unsigned __int8 v71;
  void *v72[2];
  unsigned __int8 v73;
  void *v74[2];
  unsigned __int8 v75;
  void *v76[2];
  unsigned __int8 v77;
  void *v78[2];
  unsigned __int8 v79;
  void *v80[2];
  unsigned __int8 v81;
  void *v82[2];
  unsigned __int8 v83;
  void *v84[2];
  unsigned __int8 v85;
  void *v86[2];
  unsigned __int8 v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  __int128 v98;
  int64_t v99;
  int v100;
  std::string v101;

  if (*(_BYTE *)(a1 + 528))
  {
    memset(&v101, 0, sizeof(v101));
    v100 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v88, "\n For batch ");
        kaldi::quasar::to_string<int>();
        if ((v87 & 0x80u) == 0)
          v3 = v86;
        else
          v3 = (void **)v86[0];
        if ((v87 & 0x80u) == 0)
          v4 = v87;
        else
          v4 = (std::string::size_type)v86[1];
        v5 = std::string::append(&v88, (const std::string::value_type *)v3, v4);
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v84, ": ");
        if ((v85 & 0x80u) == 0)
          v7 = v84;
        else
          v7 = (void **)v84[0];
        if ((v85 & 0x80u) == 0)
          v8 = v85;
        else
          v8 = (std::string::size_type)v84[1];
        v9 = std::string::append(&v89, (const std::string::value_type *)v7, v8);
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Number of cells : ");
        if ((v83 & 0x80u) == 0)
          v11 = v82;
        else
          v11 = (void **)v82[0];
        if ((v83 & 0x80u) == 0)
          v12 = v83;
        else
          v12 = (std::string::size_type)v82[1];
        v13 = std::string::append(&v90, (const std::string::value_type *)v11, v12);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::quasar::to_string<int>();
        if ((v81 & 0x80u) == 0)
          v15 = v80;
        else
          v15 = (void **)v80[0];
        if ((v81 & 0x80u) == 0)
          v16 = v81;
        else
          v16 = (std::string::size_type)v80[1];
        v17 = std::string::append(&v91, (const std::string::value_type *)v15, v16);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Input weights gradient: ");
        if ((v79 & 0x80u) == 0)
          v19 = v78;
        else
          v19 = (void **)v78[0];
        if ((v79 & 0x80u) == 0)
          v20 = v79;
        else
          v20 = (std::string::size_type)v78[1];
        v21 = std::string::append(&v92, (const std::string::value_type *)v19, v20);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v77 & 0x80u) == 0)
          v24 = v76;
        else
          v24 = (void **)v76[0];
        if ((v77 & 0x80u) == 0)
          v25 = v77;
        else
          v25 = (std::string::size_type)v76[1];
        v26 = std::string::append(&v93, (const std::string::value_type *)v24, v25);
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Recurrent weights gradient: ");
        if ((v75 & 0x80u) == 0)
          v28 = v74;
        else
          v28 = (void **)v74[0];
        if ((v75 & 0x80u) == 0)
          v29 = v75;
        else
          v29 = (std::string::size_type)v74[1];
        v30 = std::string::append(&v94, (const std::string::value_type *)v28, v29);
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v73 & 0x80u) == 0)
          v33 = v72;
        else
          v33 = (void **)v72[0];
        if ((v73 & 0x80u) == 0)
          v34 = v73;
        else
          v34 = (std::string::size_type)v72[1];
        v35 = std::string::append(&v95, (const std::string::value_type *)v33, v34);
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v70, "\n  Bias gradient: ");
        if ((v71 & 0x80u) == 0)
          v37 = v70;
        else
          v37 = (void **)v70[0];
        if ((v71 & 0x80u) == 0)
          v38 = v71;
        else
          v38 = (std::string::size_type)v70[1];
        v39 = std::string::append(&v96, (const std::string::value_type *)v37, v38);
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        v41 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v41);
        if ((v69 & 0x80u) == 0)
          v42 = __p;
        else
          v42 = (void **)__p[0];
        if ((v69 & 0x80u) == 0)
          v43 = v69;
        else
          v43 = (std::string::size_type)__p[1];
        v44 = std::string::append(&v97, (const std::string::value_type *)v42, v43);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v99 = v44->__r_.__value_.__r.__words[2];
        v98 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (v99 >= 0)
          v46 = (const std::string::value_type *)&v98;
        else
          v46 = (const std::string::value_type *)v98;
        if (v99 >= 0)
          v47 = HIBYTE(v99);
        else
          v47 = *((_QWORD *)&v98 + 1);
        std::string::append(&v101, v46, v47);
        if (SHIBYTE(v99) < 0)
          operator delete((void *)v98);
        if ((char)v69 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if ((char)v71 < 0)
          operator delete(v70[0]);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((char)v73 < 0)
          operator delete(v72[0]);
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        if ((char)v75 < 0)
          operator delete(v74[0]);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        if ((char)v77 < 0)
          operator delete(v76[0]);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        if ((char)v79 < 0)
          operator delete(v78[0]);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if ((char)v81 < 0)
          operator delete(v80[0]);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        if ((char)v83 < 0)
          operator delete(v82[0]);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        if ((char)v85 < 0)
          operator delete(v84[0]);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if ((char)v87 < 0)
          operator delete(v86[0]);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (*(_BYTE *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v97, "\n  Peephole weights gradient: ");
          v48 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v100);
          kaldi::nnet1::MomentStatistics<float>(v48);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v49 = &v96;
          else
            v49 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            size = v96.__r_.__value_.__l.__size_;
          v51 = std::string::append(&v97, (const std::string::value_type *)v49, size);
          v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v99 = v51->__r_.__value_.__r.__words[2];
          v98 = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          if (v99 >= 0)
            v53 = (const std::string::value_type *)&v98;
          else
            v53 = (const std::string::value_type *)v98;
          if (v99 >= 0)
            v54 = HIBYTE(v99);
          else
            v54 = *((_QWORD *)&v98 + 1);
          std::string::append(&v101, v53, v54);
          if (SHIBYTE(v99) < 0)
            operator delete((void *)v98);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
        }
        if (*(_BYTE *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v97, "\n  Projection weights gradient: ");
          v55 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v100);
          kaldi::nnet1::MomentStatistics<float>(v55);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v56 = &v96;
          else
            v56 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v57 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            v57 = v96.__r_.__value_.__l.__size_;
          v58 = std::string::append(&v97, (const std::string::value_type *)v56, v57);
          v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v99 = v58->__r_.__value_.__r.__words[2];
          v98 = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          if (v99 >= 0)
            v60 = (const std::string::value_type *)&v98;
          else
            v60 = (const std::string::value_type *)v98;
          if (v99 >= 0)
            v61 = HIBYTE(v99);
          else
            v61 = *((_QWORD *)&v98 + 1);
          std::string::append(&v101, v60, v61);
          if (SHIBYTE(v99) < 0)
            operator delete((void *)v98);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
        }
        ++v100;
      }
      while (v100 < *(_DWORD *)(a1 + 80));
    }
    v62 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v98, "\n");
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v101;
    else
      v63 = (std::string *)v101.__r_.__value_.__r.__words[0];
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    else
      v64 = v101.__r_.__value_.__l.__size_;
    v65 = std::string::insert(v62, 0, (const std::string::value_type *)v63, v64);
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v65->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v99) < 0)
      operator delete((void *)v98);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_1ADA79DCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoGradient((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  void **v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  void **v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type size;
  std::string *v47;
  __int128 v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  void *__p[2];
  unsigned __int8 v57;
  void *v58[2];
  unsigned __int8 v59;
  void *v60[2];
  unsigned __int8 v61;
  void *v62[2];
  unsigned __int8 v63;
  void *v64[2];
  unsigned __int8 v65;
  void *v66[2];
  unsigned __int8 v67;
  void *v68[2];
  unsigned __int8 v69;
  void *v70[2];
  unsigned __int8 v71;
  void *v72[2];
  unsigned __int8 v73;
  void *v74[2];
  unsigned __int8 v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  __int128 v86;
  int64_t v87;
  int v88;
  std::string v89;

  memset(&v89, 0, sizeof(v89));
  v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v75 & 0x80u) == 0)
        v3 = v74;
      else
        v3 = (void **)v74[0];
      if ((v75 & 0x80u) == 0)
        v4 = v75;
      else
        v4 = (std::string::size_type)v74[1];
      v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0)
        v7 = v72;
      else
        v7 = (void **)v72[0];
      if ((v73 & 0x80u) == 0)
        v8 = v73;
      else
        v8 = (std::string::size_type)v72[1];
      v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0)
        v11 = v70;
      else
        v11 = (void **)v70[0];
      if ((v71 & 0x80u) == 0)
        v12 = v71;
      else
        v12 = (std::string::size_type)v70[1];
      v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0)
        v15 = v68;
      else
        v15 = (void **)v68[0];
      if ((v69 & 0x80u) == 0)
        v16 = v69;
      else
        v16 = (std::string::size_type)v68[1];
      v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0)
        v19 = v66;
      else
        v19 = (void **)v66[0];
      if ((v67 & 0x80u) == 0)
        v20 = v67;
      else
        v20 = (std::string::size_type)v66[1];
      v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0)
        v23 = v64;
      else
        v23 = (void **)v64[0];
      if ((v65 & 0x80u) == 0)
        v24 = v65;
      else
        v24 = (std::string::size_type)v64[1];
      v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0)
        v27 = v62;
      else
        v27 = (void **)v62[0];
      if ((v63 & 0x80u) == 0)
        v28 = v63;
      else
        v28 = (std::string::size_type)v62[1];
      v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0)
        v31 = v60;
      else
        v31 = (void **)v60[0];
      if ((v61 & 0x80u) == 0)
        v32 = v61;
      else
        v32 = (std::string::size_type)v60[1];
      v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0)
        v35 = v58;
      else
        v35 = (void **)v58[0];
      if ((v59 & 0x80u) == 0)
        v36 = v59;
      else
        v36 = (std::string::size_type)v58[1];
      v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0)
        v39 = __p;
      else
        v39 = (void **)__p[0];
      if ((v57 & 0x80u) == 0)
        v40 = v57;
      else
        v40 = (std::string::size_type)__p[1];
      v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v87 = v41->__r_.__value_.__r.__words[2];
      v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0)
        v43 = (const std::string::value_type *)&v86;
      else
        v43 = (const std::string::value_type *)v86;
      if (v87 >= 0)
        v44 = HIBYTE(v87);
      else
        v44 = *((_QWORD *)&v86 + 1);
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0)
        operator delete((void *)v86);
      if ((char)v57 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      if ((char)v59 < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      if ((char)v63 < 0)
        operator delete(v62[0]);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if ((char)v65 < 0)
        operator delete(v64[0]);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      if ((char)v67 < 0)
        operator delete(v66[0]);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if ((char)v69 < 0)
        operator delete(v68[0]);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if ((char)v71 < 0)
        operator delete(v70[0]);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if ((char)v73 < 0)
        operator delete(v72[0]);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if ((char)v75 < 0)
        operator delete(v74[0]);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &v84;
        else
          v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        else
          size = v84.__r_.__value_.__l.__size_;
        v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v87 = v47->__r_.__value_.__r.__words[2];
        v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0)
          v49 = (const std::string::value_type *)&v86;
        else
          v49 = (const std::string::value_type *)v86;
        if (v87 >= 0)
          v50 = HIBYTE(v87);
        else
          v50 = *((_QWORD *)&v86 + 1);
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0)
          operator delete((void *)v86);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v89;
  else
    v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  else
    v53 = v89.__r_.__value_.__l.__size_;
  v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0)
    operator delete((void *)v86);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
}

void sub_1ADA7A69C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1ADA7A8A8()
{
  JUMPOUT(0x1ADA7A7D0);
}

void sub_1ADA7A8B0()
{
  JUMPOUT(0x1ADA7A7E0);
}

void sub_1ADA7A8B8()
{
  JUMPOUT(0x1ADA7A7F0);
}

void sub_1ADA7A8C0()
{
  JUMPOUT(0x1ADA7A800);
}

void sub_1ADA7A8C8()
{
  JUMPOUT(0x1ADA7A810);
}

void sub_1ADA7A8D0()
{
  JUMPOUT(0x1ADA7A820);
}

void sub_1ADA7A8D8()
{
  JUMPOUT(0x1ADA7A830);
}

void sub_1ADA7A8E0()
{
  JUMPOUT(0x1ADA7A840);
}

void sub_1ADA7A8E8()
{
  JUMPOUT(0x1ADA7A850);
}

void sub_1ADA7A8F0()
{
  JUMPOUT(0x1ADA7A860);
}

void sub_1ADA7A8F8()
{
  JUMPOUT(0x1ADA7A870);
}

void sub_1ADA7A900()
{
  JUMPOUT(0x1ADA7A880);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoPropagate(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoPropagate((uint64_t)a1 + *(_QWORD *)(*a1 - 96), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type size;
  std::string *v39;
  __int128 v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  void *__p[2];
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  void *v52[2];
  unsigned __int8 v53;
  void *v54[2];
  unsigned __int8 v55;
  void *v56[2];
  unsigned __int8 v57;
  void *v58[2];
  unsigned __int8 v59;
  void *v60[2];
  unsigned __int8 v61;
  void *v62[2];
  unsigned __int8 v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  __int128 v72;
  int64_t v73;
  int v74;
  std::string v75;

  memset(&v75, 0, sizeof(v75));
  v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v63 & 0x80u) == 0)
        v3 = v62;
      else
        v3 = (void **)v62[0];
      if ((v63 & 0x80u) == 0)
        v4 = v63;
      else
        v4 = (std::string::size_type)v62[1];
      v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0)
        v7 = v60;
      else
        v7 = (void **)v60[0];
      if ((v61 & 0x80u) == 0)
        v8 = v61;
      else
        v8 = (std::string::size_type)v60[1];
      v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0)
        v11 = v58;
      else
        v11 = (void **)v58[0];
      if ((v59 & 0x80u) == 0)
        v12 = v59;
      else
        v12 = (std::string::size_type)v58[1];
      v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0)
        v15 = v56;
      else
        v15 = (void **)v56[0];
      if ((v57 & 0x80u) == 0)
        v16 = v57;
      else
        v16 = (std::string::size_type)v56[1];
      v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0)
        v19 = v54;
      else
        v19 = (void **)v54[0];
      if ((v55 & 0x80u) == 0)
        v20 = v55;
      else
        v20 = (std::string::size_type)v54[1];
      v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0)
        v23 = v52;
      else
        v23 = (void **)v52[0];
      if ((v53 & 0x80u) == 0)
        v24 = v53;
      else
        v24 = (std::string::size_type)v52[1];
      v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0)
        v27 = v50;
      else
        v27 = (void **)v50[0];
      if ((v51 & 0x80u) == 0)
        v28 = v51;
      else
        v28 = (std::string::size_type)v50[1];
      v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      if ((v49 & 0x80u) == 0)
        v32 = v49;
      else
        v32 = (std::string::size_type)__p[1];
      v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v73 = v33->__r_.__value_.__r.__words[2];
      v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0)
        v35 = (const std::string::value_type *)&v72;
      else
        v35 = (const std::string::value_type *)v72;
      if (v73 >= 0)
        v36 = HIBYTE(v73);
      else
        v36 = *((_QWORD *)&v72 + 1);
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0)
        operator delete((void *)v72);
      if ((char)v49 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if ((char)v51 < 0)
        operator delete(v50[0]);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if ((char)v53 < 0)
        operator delete(v52[0]);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if ((char)v55 < 0)
        operator delete(v54[0]);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if ((char)v57 < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if ((char)v59 < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if ((char)v63 < 0)
        operator delete(v62[0]);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v70;
        else
          v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        else
          size = v70.__r_.__value_.__l.__size_;
        v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v73 = v39->__r_.__value_.__r.__words[2];
        v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0)
          v41 = (const std::string::value_type *)&v72;
        else
          v41 = (const std::string::value_type *)v72;
        if (v73 >= 0)
          v42 = HIBYTE(v73);
        else
          v42 = *((_QWORD *)&v72 + 1);
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0)
          operator delete((void *)v72);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v75;
  else
    v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  else
    v45 = v75.__r_.__value_.__l.__size_;
  v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0)
    operator delete((void *)v72);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
}

void sub_1ADA7AE7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1ADA7B048()
{
  JUMPOUT(0x1ADA7AFB0);
}

void sub_1ADA7B050()
{
  JUMPOUT(0x1ADA7AFC0);
}

void sub_1ADA7B058()
{
  JUMPOUT(0x1ADA7AFD0);
}

void sub_1ADA7B060()
{
  JUMPOUT(0x1ADA7AFE0);
}

void sub_1ADA7B068()
{
  JUMPOUT(0x1ADA7AFF0);
}

void sub_1ADA7B070()
{
  JUMPOUT(0x1ADA7B000);
}

void sub_1ADA7B078()
{
  JUMPOUT(0x1ADA7B010);
}

void sub_1ADA7B080()
{
  JUMPOUT(0x1ADA7B020);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoBackPropagate(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoBackPropagate((uint64_t)a1 + *(_QWORD *)(*a1 - 104), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t *v15;
  uint64_t v16;
  kaldi::quasar::Vocab *v17;
  double v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  kaldi::quasar::Vocab *v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  float v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  kaldi::quasar::Vocab *v122;
  double v123;
  int *v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  __int128 v133;
  __int128 v134;
  void *v135;
  __int128 v136;
  __int128 v137;
  void *v138;
  __int128 v139;
  __int128 v140;
  void *v141;
  __int128 v142;
  __int128 v143;
  void *v144;
  __int128 v145;
  __int128 v146;
  void *v147;
  __int128 v148;
  __int128 v149;
  void *v150;
  __int128 v151;
  __int128 v152;
  void *v153;
  __int128 v154;
  __int128 v155;
  void *v156;
  __int128 v157;
  __int128 v158;
  void *v159;
  __int128 v160;
  __int128 v161;

  v8 = *(unsigned int *)(a2 + 20);
  v9 = *(unsigned int *)(a1 + 96);
  v128 = ((int)v8 / (int)v9);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v159, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v159, (uint64_t)"Running forward propagation for batch size = ", 45);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v159);
  }
  v13 = *(_QWORD *)(a3 + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers(a1, a4, v8, v13);
  v14 = *(_QWORD *)(a1 + 104);
  v124 = (int *)a3;
  v125 = a4;
  if (*(_QWORD *)(a1 + 112) == v14 || *(int *)(v14 + 32 * a4 + 16) < 1)
  {
    v126 = 0;
  }
  else
  {
    v15 = (int32x2_t *)(*(_QWORD *)(a1 + 128) + 48 * a4);
    v15[4] = (int32x2_t)v13;
    v126 = 1;
    kaldi::CuMatrix<float>::Resize(v15, v9, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 16), 1, 0);
  }
  v131 = a4;
  v16 = *(_QWORD *)(a1 + 248) + 48 * a4;
  v129 = *(_QWORD *)(a1 + 344) + 48 * a4;
  v17 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  LODWORD(v18) = 1.0;
  kaldi::CuMatrixBase<float>::AddMatMat<short>(v16, a2, 111, v17, 112, v18, 0.0);
  v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  kaldi::CuMatrixBase<float>::AddVecToRows(v16, v19, 1.0, 1.0);
  if ((int)v128 >= 1)
  {
    v20 = 0;
    v21 = 0;
    v127 = a1 + 12;
    v22 = -(uint64_t)(int)v9;
    while (1)
    {
      v130 = v22;
      v23 = *(_DWORD *)(v16 + 24);
      v24 = *(_QWORD *)(v16 + 8) + 4 * (int)(v23 * v20);
      v25 = *(_DWORD *)(v16 + 28) - v23 * v20;
      v26 = *(_QWORD *)(v16 + 32);
      DWORD2(v160) = *(_DWORD *)(a1 + 176);
      HIDWORD(v160) = v9;
      *(_QWORD *)&v161 = __PAIR64__(v25, v23);
      *((_QWORD *)&v161 + 1) = v26;
      *(_QWORD *)&v160 = v24;
      v159 = &unk_1E5D29D40;
      v27 = *(_DWORD *)(v16 + 24);
      v28 = *(_QWORD *)(v16 + 8) + 4 * (int)(v27 * v20) + 4 * DWORD2(v160);
      v29 = *(_DWORD *)(v16 + 28) - DWORD2(v160) - v27 * v20;
      v30 = *(_QWORD *)(v16 + 32);
      *((_QWORD *)&v157 + 1) = __PAIR64__(v9, DWORD2(v160));
      *(_QWORD *)&v158 = __PAIR64__(v29, v27);
      *((_QWORD *)&v158 + 1) = v30;
      v156 = &unk_1E5D29D40;
      *(_QWORD *)&v157 = v28;
      v31 = *(_DWORD *)(v16 + 24);
      v32 = *(_QWORD *)(v16 + 8) + 4 * (int)(v31 * v20) + 4 * (3 * DWORD2(v160));
      LODWORD(v28) = *(_DWORD *)(v16 + 28) - v31 * v20 - 3 * DWORD2(v160);
      v33 = *(_QWORD *)(v16 + 32);
      *((_QWORD *)&v154 + 1) = __PAIR64__(v9, DWORD2(v160));
      *(_QWORD *)&v155 = __PAIR64__(v28, v31);
      *((_QWORD *)&v155 + 1) = v33;
      v153 = &unk_1E5D29D40;
      *(_QWORD *)&v154 = v32;
      v34 = *(_QWORD *)(a1 + 272) + 48 * (int)v131;
      LODWORD(v32) = *(_DWORD *)(v34 + 16);
      LODWORD(v33) = *(_DWORD *)(v34 + 24);
      v35 = *(_QWORD *)(v34 + 8) + 4 * (int)(v33 * v20);
      v36 = *(_DWORD *)(v34 + 28) - v33 * v20;
      v37 = *(_QWORD *)(v34 + 32);
      *((_QWORD *)&v151 + 1) = __PAIR64__(v9, v32);
      *(_QWORD *)&v152 = __PAIR64__(v36, v33);
      *((_QWORD *)&v152 + 1) = v37;
      v150 = &unk_1E5D29D40;
      *(_QWORD *)&v151 = v35;
      v148 = 0u;
      v149 = 0u;
      v147 = &unk_1E5D29D40;
      v145 = 0u;
      v146 = 0u;
      v144 = &unk_1E5D29D40;
      if (!v21)
        break;
      if (!v126)
      {
        v74 = *(_DWORD *)(v129 + 16);
        v75 = *(_DWORD *)(v129 + 24);
        v76 = *(_DWORD *)(v129 + 28) - v75 * (v20 - v9);
        v77 = *(_QWORD *)(v129 + 32);
        *(_QWORD *)&v148 = *(_QWORD *)(v129 + 8) + 4 * (int)(v75 * (v20 - v9));
        *((_QWORD *)&v148 + 1) = __PAIR64__(v9, v74);
        *(_QWORD *)&v149 = __PAIR64__(v76, v75);
        *((_QWORD *)&v149 + 1) = v77;
        v141 = &unk_1E5D29D40;
        v142 = 0uLL;
        v143 = 0uLL;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
        v78 = *(_QWORD *)(a1 + 272) + 48 * (int)v131;
        v79 = *(_DWORD *)(v78 + 16);
        v80 = *(_DWORD *)(v78 + 24);
        v69 = *(_QWORD *)(v78 + 8) + 4 * (int)(v80 * (v20 - v9));
        v81 = *(_DWORD *)(v78 + 28) - v80 * (v20 - v9);
        v73 = *(_QWORD *)(v78 + 32);
        *((_QWORD *)&v142 + 1) = __PAIR64__(v9, v79);
        *(_QWORD *)&v143 = __PAIR64__(v81, v80);
        *((_QWORD *)&v143 + 1) = v73;
        *(_QWORD *)&v145 = v69;
        *((_QWORD *)&v145 + 1) = __PAIR64__(v9, v79);
        *(_QWORD *)&v146 = __PAIR64__(v81, v80);
        goto LABEL_14;
      }
      kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(a1 + 128) + 48 * (int)v131);
      v38 = *(_QWORD *)(a1 + 128) + 48 * v131;
      v39 = *(_QWORD *)(v38 + 8);
      v40 = *(_DWORD *)(v38 + 20);
      v41 = *(_DWORD *)(v38 + 24);
      v42 = *(_DWORD *)(v38 + 28);
      v43 = *(_QWORD *)(v38 + 32);
      DWORD2(v142) = *(_DWORD *)(a1 + 176);
      *(_QWORD *)&v145 = v39;
      *((_QWORD *)&v145 + 1) = __PAIR64__(v40, DWORD2(v142));
      *(_QWORD *)&v146 = __PAIR64__(v42, v41);
      *((_QWORD *)&v146 + 1) = v43;
      v141 = &unk_1E5D29D40;
      v142 = 0u;
      v143 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      v44 = *(_QWORD *)(a1 + 272) + 48 * v131;
      v45 = *(_DWORD *)(v44 + 16);
      v46 = *(_DWORD *)(v44 + 24);
      v47 = *(_QWORD *)(v44 + 8) + 4 * (int)(v46 * (v20 - v9));
      v48 = *(_DWORD *)(v44 + 28) - v46 * (v20 - v9);
      v49 = *(_QWORD *)(v44 + 32);
      *((_QWORD *)&v142 + 1) = __PAIR64__(v9, v45);
      *(_QWORD *)&v143 = __PAIR64__(v48, v46);
      *((_QWORD *)&v143 + 1) = v49;
      v141 = &unk_1E5D29D40;
      *(_QWORD *)&v142 = v47;
      v50 = *(_QWORD *)(a1 + 104) + 32 * v131;
      *((_QWORD *)&v139 + 1) = 0;
      v138 = &unk_1E5D29D70;
      *(_QWORD *)&v139 = *(_QWORD *)(v50 + 8) + 4 * v20;
      DWORD2(v139) = v9;
      *(_QWORD *)&v140 = *(_QWORD *)(v50 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v144, (uint64_t)&v141, (uint64_t)&v138, 1);
      v141 = &unk_1E5D29D40;
      v142 = 0u;
      v143 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      v51 = *(_QWORD *)(a1 + 128) + 48 * (int)v131;
      v52 = *(unsigned int *)(a1 + 176);
      v53 = *(_DWORD *)(v51 + 20);
      v54 = *(_DWORD *)(v51 + 24);
      v55 = *(_QWORD *)(v51 + 8) + 4 * v52;
      LODWORD(v52) = *(_DWORD *)(v51 + 28) - v52;
      v56 = *(_QWORD *)(v51 + 32);
      DWORD2(v142) = *(_DWORD *)(v127 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      *(_QWORD *)&v148 = v55;
      *((_QWORD *)&v148 + 1) = __PAIR64__(v53, DWORD2(v142));
      *(_QWORD *)&v149 = __PAIR64__(v52, v54);
      *((_QWORD *)&v149 + 1) = v56;
      v141 = &unk_1E5D29D40;
      v142 = 0u;
      v143 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      v57 = *(_DWORD *)(v129 + 24);
      v58 = *(_QWORD *)(v129 + 8) + 4 * (int)(v57 * (v20 - v9));
      v59 = *(_DWORD *)(v129 + 28) - v57 * (v20 - v9);
      v60 = *(_QWORD *)(v129 + 32);
      DWORD2(v142) = *(_DWORD *)(v129 + 16);
      HIDWORD(v142) = v9;
      *(_QWORD *)&v143 = __PAIR64__(v59, v57);
      *((_QWORD *)&v143 + 1) = v60;
      v141 = &unk_1E5D29D40;
      *(_QWORD *)&v142 = v58;
      v61 = *(_QWORD *)(a1 + 104) + 32 * v131;
      *((_QWORD *)&v139 + 1) = 0;
      v138 = &unk_1E5D29D70;
      *(_QWORD *)&v139 = *(_QWORD *)(v61 + 8) + 4 * v20;
      DWORD2(v139) = v9;
      *(_QWORD *)&v140 = *(_QWORD *)(v61 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v147, (uint64_t)&v141, (uint64_t)&v138, 1);
      v141 = &unk_1E5D29D40;
LABEL_15:
      v142 = 0u;
      v143 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      v82 = *(_DWORD *)(v16 + 24);
      v83 = *(_QWORD *)(v16 + 8) + 4 * (int)(v82 * v20);
      v84 = *(_DWORD *)(v16 + 28) - v82 * v20;
      v85 = *(_QWORD *)(v16 + 32);
      DWORD2(v142) = *(_DWORD *)(v16 + 16);
      HIDWORD(v142) = v9;
      *(_QWORD *)&v143 = __PAIR64__(v84, v82);
      *((_QWORD *)&v143 + 1) = v85;
      v141 = &unk_1E5D29D40;
      *(_QWORD *)&v142 = v83;
      v86 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
      LODWORD(v87) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v141, (uint64_t)&v147, 111, v86, 112, v87, 1.0);
      v141 = &unk_1E5D29D40;
      v142 = 0u;
      v143 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      if (*(_BYTE *)(a1 + 208))
      {
        v88 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        v89 = *(_QWORD *)(v88 + 8);
        v90 = *(_DWORD *)(v88 + 16);
        v91 = *(_QWORD *)(v88 + 32);
        v141 = &unk_1E5D29D70;
        *(_QWORD *)&v142 = v89;
        *(_QWORD *)&v143 = v91;
        *((_QWORD *)&v142 + 1) = v90;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v159, (uint64_t)&v144, 111, (uint64_t)&v141, 1.0, 1.0);
        v92 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        v93 = *(_QWORD *)(v92 + 8) + 4 * *(int *)(v92 + 24);
        v94 = *(_DWORD *)(v92 + 16);
        v95 = *(_QWORD *)(v92 + 32);
        v141 = &unk_1E5D29D70;
        *(_QWORD *)&v142 = v93;
        *(_QWORD *)&v143 = v95;
        *((_QWORD *)&v142 + 1) = v94;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v156, (uint64_t)&v144, 111, (uint64_t)&v141, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v159, (uint64_t)&v159);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v156, (uint64_t)&v156);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v153);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v150, (uint64_t)&v159, 111, (uint64_t)&v153, 111, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v150, (uint64_t)&v156, 111, (uint64_t)&v144, 111, 1.0, 1.0);
      v96 = *(float *)(a1 + 476);
      if (v96 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v150, v96);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v150, -*(float *)(a1 + 476));
      }
      v97 = *(_DWORD *)(a1 + 176);
      v98 = *(_DWORD *)(v16 + 24);
      v99 = *(_QWORD *)(v16 + 8) + 4 * (int)(v98 * v20) + 8 * v97;
      v100 = *(_DWORD *)(v16 + 28) - (v98 * v20 + 2 * v97);
      v101 = *(_QWORD *)(v16 + 32);
      *((_QWORD *)&v142 + 1) = __PAIR64__(v9, v97);
      *(_QWORD *)&v143 = __PAIR64__(v100, v98);
      *((_QWORD *)&v143 + 1) = v101;
      v141 = &unk_1E5D29D40;
      *(_QWORD *)&v142 = v99;
      if (*(_BYTE *)(a1 + 208))
      {
        v102 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        v103 = *(_QWORD *)(v102 + 8) + 8 * *(int *)(v102 + 24);
        v104 = *(_DWORD *)(v102 + 16);
        v105 = *(_QWORD *)(v102 + 32);
        v138 = &unk_1E5D29D70;
        *(_QWORD *)&v139 = v103;
        *(_QWORD *)&v140 = v105;
        *((_QWORD *)&v139 + 1) = v104;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v141, (uint64_t)&v150, 111, (uint64_t)&v138, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v141, (uint64_t)&v141);
      v106 = *(_QWORD *)(a1 + 296) + 48 * (int)v131;
      v107 = *(_DWORD *)(v106 + 16);
      v108 = *(_DWORD *)(v106 + 24);
      v109 = *(_QWORD *)(v106 + 8) + 4 * (int)(v108 * v20);
      v110 = *(_DWORD *)(v106 + 28) - v108 * v20;
      v111 = *(_QWORD *)(v106 + 32);
      *((_QWORD *)&v139 + 1) = __PAIR64__(v9, v107);
      *(_QWORD *)&v140 = __PAIR64__(v110, v108);
      *((_QWORD *)&v140 + 1) = v111;
      v138 = &unk_1E5D29D40;
      *(_QWORD *)&v139 = v109;
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v138, (uint64_t)&v150);
      v112 = *(_QWORD *)(a1 + 320) + 48 * (int)v131;
      v113 = *(_DWORD *)(v112 + 16);
      v114 = *(_DWORD *)(v112 + 24);
      v115 = *(_QWORD *)(v112 + 8) + 4 * (int)(v114 * v20);
      v116 = *(_DWORD *)(v112 + 28) - v114 * v20;
      v117 = *(_QWORD *)(v112 + 32);
      *((_QWORD *)&v136 + 1) = __PAIR64__(v9, v113);
      *(_QWORD *)&v137 = __PAIR64__(v116, v114);
      *((_QWORD *)&v137 + 1) = v117;
      v135 = &unk_1E5D29D40;
      *(_QWORD *)&v136 = v115;
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v135, (uint64_t)&v141, 111, (uint64_t)&v138, 111, 1.0, 0.0);
      v118 = *(_DWORD *)(v129 + 24);
      v119 = *(_QWORD *)(v129 + 8) + 4 * (int)(v118 * v20);
      v120 = *(_DWORD *)(v129 + 28) - v118 * v20;
      v121 = *(_QWORD *)(v129 + 32);
      if (*(_BYTE *)(a1 + 224))
      {
        DWORD2(v133) = *(_DWORD *)(v129 + 16);
        HIDWORD(v133) = v9;
        *(_QWORD *)&v134 = __PAIR64__(v120, v118);
        *((_QWORD *)&v134 + 1) = v121;
        v132 = &unk_1E5D29D40;
        *(_QWORD *)&v133 = v119;
        v122 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
        LODWORD(v123) = 1.0;
        kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v132, (uint64_t)&v135, 111, v122, 112, v123, 0.0);
      }
      else
      {
        DWORD2(v133) = *(_DWORD *)(v129 + 16);
        HIDWORD(v133) = v9;
        *(_QWORD *)&v134 = __PAIR64__(v120, v118);
        *((_QWORD *)&v134 + 1) = v121;
        v132 = &unk_1E5D29D40;
        *(_QWORD *)&v133 = v119;
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v132, (uint64_t)&v135, 111);
      }
      v132 = &unk_1E5D29D40;
      v133 = 0u;
      v134 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v132);
      v135 = &unk_1E5D29D40;
      v136 = 0u;
      v137 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v135);
      v138 = &unk_1E5D29D40;
      v139 = 0u;
      v140 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
      v141 = &unk_1E5D29D40;
      v142 = 0u;
      v143 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      v144 = &unk_1E5D29D40;
      v145 = 0u;
      v146 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v144);
      v147 = &unk_1E5D29D40;
      v148 = 0u;
      v149 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v147);
      v150 = &unk_1E5D29D40;
      v151 = 0u;
      v152 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v150);
      v153 = &unk_1E5D29D40;
      v154 = 0u;
      v155 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v153);
      v156 = &unk_1E5D29D40;
      v157 = 0u;
      v158 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v156);
      v159 = &unk_1E5D29D40;
      v160 = 0u;
      v161 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v159);
      ++v21;
      v20 += v9;
      v22 = v130 + (int)v9;
      if (v128 == v21)
        goto LABEL_25;
    }
    v62 = *(_QWORD *)(a1 + 8) + 48 * v131;
    v63 = *(_DWORD *)(v62 + 20);
    v64 = *(_DWORD *)(v62 + 24);
    v65 = *(_QWORD *)(v62 + 8) + 4 * DWORD2(v160);
    v66 = *(_DWORD *)(v62 + 28) - DWORD2(v160);
    v67 = *(_QWORD *)(v62 + 32);
    DWORD2(v142) = *(_DWORD *)(v127 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    *(_QWORD *)&v148 = v65;
    *((_QWORD *)&v148 + 1) = __PAIR64__(v63, DWORD2(v142));
    *(_QWORD *)&v149 = __PAIR64__(v66, v64);
    *((_QWORD *)&v149 + 1) = v67;
    v141 = &unk_1E5D29D40;
    v142 = 0uLL;
    v143 = 0uLL;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
    v68 = *(_QWORD *)(a1 + 8) + 48 * v131;
    v69 = *(_QWORD *)(v68 + 8);
    v70 = *(_DWORD *)(v68 + 20);
    v71 = *(_DWORD *)(v68 + 24);
    v72 = *(_DWORD *)(v68 + 28);
    v73 = *(_QWORD *)(v68 + 32);
    DWORD2(v142) = *(_DWORD *)(a1 + 176);
    HIDWORD(v142) = v70;
    *(_QWORD *)&v143 = __PAIR64__(v72, v71);
    *((_QWORD *)&v143 + 1) = v73;
    *(_QWORD *)&v145 = v69;
    *((_QWORD *)&v145 + 1) = __PAIR64__(v70, DWORD2(v142));
    *(_QWORD *)&v146 = __PAIR64__(v72, v71);
LABEL_14:
    *((_QWORD *)&v146 + 1) = v73;
    v141 = &unk_1E5D29D40;
    *(_QWORD *)&v142 = v69;
    goto LABEL_15;
  }
LABEL_25:
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v124, v129, 111);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SaveLastState(a1, v125);
}

void sub_1ADA7BCF8(_Unwind_Exception *a1)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 248) + 48 * a2), a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 272) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 296) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 320) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 344) + 48 * a2), a3, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), 0, 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_1ADA7C040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SaveLastState(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  _QWORD v28[4];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v27, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v27);
  }
  v4 = *(_QWORD *)(a1 + 272) + 48 * a2;
  v5 = *(_DWORD *)(a1 + 96);
  v6 = *(_DWORD *)(v4 + 20) - v5;
  v7 = *(_QWORD *)(a1 + 8) + 48 * a2;
  v8 = *(_DWORD *)(a1 + 176);
  v9 = *(_DWORD *)(v7 + 28);
  v10 = *(_QWORD *)(v7 + 32);
  v28[0] = *(_QWORD *)(v7 + 8);
  LODWORD(v28[1]) = v8;
  *(_QWORD *)((char *)&v28[1] + 4) = *(_QWORD *)(v7 + 20);
  HIDWORD(v28[2]) = v9;
  v28[3] = v10;
  v27 = &unk_1E5D29D40;
  LODWORD(v7) = *(_DWORD *)(v4 + 16);
  v11 = *(_DWORD *)(v4 + 24);
  v12 = *(_QWORD *)(v4 + 8) + 4 * (int)(v11 * v6);
  v13 = *(_DWORD *)(v4 + 28) - v11 * v6;
  v14 = *(_QWORD *)(v4 + 32);
  *((_QWORD *)&v25 + 1) = __PAIR64__(v5, v7);
  *(_QWORD *)&v26 = __PAIR64__(v13, v11);
  *((_QWORD *)&v26 + 1) = v14;
  v24 = &unk_1E5D29D40;
  *(_QWORD *)&v25 = v12;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v27, (uint64_t)&v24, 111);
  v24 = &unk_1E5D29D40;
  v25 = 0u;
  v26 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v24);
  v27 = &unk_1E5D29D40;
  memset(v28, 0, sizeof(v28));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v27);
  v15 = *(_QWORD *)(a1 + 8) + 48 * a2;
  v16 = *(int *)(a1 + 176);
  v17 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v18 = *(_QWORD *)(v15 + 8) + 4 * v16;
  LODWORD(v16) = *(_DWORD *)(v15 + 28) - v16;
  v19 = *(_QWORD *)(v15 + 32);
  v28[0] = v18;
  LODWORD(v28[1]) = v17;
  *(_QWORD *)((char *)&v28[1] + 4) = *(_QWORD *)(v15 + 20);
  HIDWORD(v28[2]) = v16;
  v28[3] = v19;
  v27 = &unk_1E5D29D40;
  v20 = *(_QWORD *)(a1 + 344) + 48 * a2;
  v21 = *(_DWORD *)(v20 + 16);
  LODWORD(v18) = *(_DWORD *)(v20 + 24);
  v22 = *(_QWORD *)(v20 + 8) + 4 * (int)(v18 * v6);
  LODWORD(v19) = *(_DWORD *)(v20 + 28) - v18 * v6;
  v23 = *(_QWORD *)(v20 + 32);
  *((_QWORD *)&v25 + 1) = __PAIR64__(*(_DWORD *)(a1 + 96), v21);
  *(_QWORD *)&v26 = __PAIR64__(v19, v18);
  *((_QWORD *)&v26 + 1) = v23;
  v24 = &unk_1E5D29D40;
  *(_QWORD *)&v25 = v22;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v27, (uint64_t)&v24, 111);
  v24 = &unk_1E5D29D40;
  v25 = 0u;
  v26 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v24);
  v27 = &unk_1E5D29D40;
  memset(v28, 0, sizeof(v28));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v27);
}

void sub_1ADA7C27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v18;

  v18 = v15 + 16;
  a9 = v18;
  *v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  a14 = v18;
  *v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int32x2_t *v7;

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  v5 = *(_QWORD *)(a3 + 24);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers((uint64_t)a1, 0, 1, v5);
  v6 = a1[13];
  if (a1[14] != v6 && *(int *)(v6 + 16) >= 1)
  {
    v7 = (int32x2_t *)a1[16];
    v7[4] = (int32x2_t)v5;
    kaldi::CuMatrix<float>::Resize(v7, 1, *(unsigned int *)(a1[1] + 16), 1, 0);
  }
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  kaldi::CuVectorBase<float>::AddMatVec<short>();
}

void sub_1ADA7C3F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(v0);
  kaldi::CuVectorBase<float>::AddVec(v2 - 80, v3, 1.0, 1.0);
  v4 = *(int *)(v0 + 176);
  v5 = *(_QWORD *)(v2 - 72);
  v6 = *(_QWORD *)(v2 - 56);
  *(_QWORD *)(v2 - 144) = v1;
  *(_QWORD *)(v2 - 136) = v5;
  *(_QWORD *)(v2 - 128) = 0;
  *(_QWORD *)(v2 - 120) = v6;
  *(_DWORD *)(v2 - 128) = v4;
  *(_QWORD *)(v2 - 176) = v1;
  *(_QWORD *)(v2 - 168) = v5 + 4 * v4;
  *(_QWORD *)(v2 - 160) = 0;
  *(_QWORD *)(v2 - 152) = v6;
  *(_DWORD *)(v2 - 160) = v4;
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v0);
  kaldi::CuVectorBase<float>::AddMatVec<short>();
}

void sub_1ADA7C4C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  _BYTE v36[64];
  _BYTE v37[32];
  _BYTE v38[224];

  if (*(_BYTE *)(v0 + 208))
  {
    v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(_DWORD *)(v4 + 16);
    v7 = *(_QWORD *)(v4 + 32);
    v31 = v2 + 16;
    v32 = v5;
    v34 = 0;
    v35 = v7;
    v33 = v6;
    kaldi::CuVectorBase<float>::AddVecVec(v3 - 144, (uint64_t)v36, (uint64_t)&v31, 1.0, 1.0);
    v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    v9 = *(_QWORD *)(v8 + 8) + 4 * *(int *)(v8 + 24);
    v10 = *(_DWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 32);
    v31 = v2 + 16;
    v32 = v9;
    v34 = 0;
    v35 = v11;
    v33 = v10;
    kaldi::CuVectorBase<float>::AddVecVec(v3 - 176, (uint64_t)v36, (uint64_t)&v31, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid(v3 - 144, v3 - 144);
  kaldi::CuVectorBase<float>::Sigmoid(v3 - 176, v3 - 176);
  kaldi::CuVectorBase<float>::ApplyTanh((uint64_t)v38);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v37, v3 - 144, (uint64_t)v38, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v37, (uint64_t)v36, v3 - 176, 1.0, 1.0);
  v12 = *(float *)(v0 + 476);
  if (v12 > 0.0)
  {
    kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)v37, v12);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v37, -*(float *)(v0 + 476));
  }
  v13 = *(int *)(v0 + 176);
  v14 = *(_QWORD *)(v3 - 56);
  v15 = *(_QWORD *)(v3 - 72) + 8 * v13;
  v31 = v2 + 16;
  v32 = v15;
  v34 = 0;
  v35 = v14;
  v33 = v13;
  if (*(_BYTE *)(v0 + 208))
  {
    v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    v17 = *(_QWORD *)(v16 + 8) + 8 * *(int *)(v16 + 24);
    v18 = *(_DWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 32);
    v27 = v2 + 16;
    v28 = v17;
    v30 = v19;
    v29 = v18;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v31, (uint64_t)v37, (uint64_t)&v27, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v31, (uint64_t)&v31);
  v20 = *(_QWORD *)(v0 + 296);
  v29 = 0;
  v21 = *(_QWORD *)(v20 + 8);
  v27 = v2 + 16;
  v28 = v21;
  LODWORD(v29) = *(_DWORD *)(v20 + 16);
  v30 = *(_QWORD *)(v20 + 32);
  kaldi::CuVectorBase<float>::Tanh((uint64_t)&v27, (uint64_t)v37);
  v22 = *(_QWORD *)(v0 + 320);
  v25 = 0;
  v23 = *(_QWORD *)(v22 + 8);
  v24[0] = v2 + 16;
  v24[1] = v23;
  LODWORD(v25) = *(_DWORD *)(v22 + 16);
  v26 = *(_QWORD *)(v22 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v24, (uint64_t)&v31, (uint64_t)&v27, 1.0, 0.0);
  if (*(_BYTE *)(v0 + 224))
  {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    kaldi::CuVectorBase<float>::AddMatVec<short>();
  }
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)(v3 - 112), (uint64_t)v24);
  kaldi::CuVectorBase<float>::CopyFromVec(v1, v3 - 112);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SaveLastState(v0, 0);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 136)), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc()
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc();
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc();
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int32x2_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  kaldi::quasar::Vocab *v63;
  double v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  kaldi::quasar::Vocab *v121;
  double v122;
  kaldi::quasar::Vocab *v124;
  double v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  _QWORD v136[2];
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[5];
  _QWORD v140[5];
  void *v141;
  _QWORD v142[4];
  void *v143;
  _QWORD v144[4];
  void *v145;
  _QWORD v146[4];
  void *v147;
  _QWORD v148[4];
  void *v149;
  __int128 v150;
  __int128 v151;
  void *v152;
  __int128 v153;
  __int128 v154;
  void *v155;
  __int128 v156;
  __int128 v157;
  void *v158;
  _QWORD v159[4];
  _QWORD v160[5];
  _QWORD v161[5];
  _QWORD v162[5];
  _QWORD v163[5];
  _QWORD v164[5];
  _QWORD v165[5];
  _QWORD v166[5];
  _QWORD v167[36];

  v9 = *(unsigned int *)(a2 + 20);
  v10 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  v11 = ((int)v9 / (int)v10);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v167, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)"Running backward propagation for batch size = ", 46);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", which contains ", 17);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" frames each from ", 18);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v167);
  }
  if (a5)
    v15 = a5;
  else
    v15 = a4;
  v16 = *(_QWORD *)(v15 + 32);
  v133 = v9;
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateBackwardBuffers(a1, a6, v9, v16);
  v17 = a6;
  v18 = 3 * a6;
  v19 = *(_QWORD *)(a1 + 248) + 16 * v18;
  v20 = *(_QWORD *)(a1 + 440) + 16 * v18;
  v127 = (int *)(*(_QWORD *)(a1 + 368) + 16 * v18);
  v131 = *(_QWORD *)(a1 + 416);
  v132 = v17;
  v21 = *(_QWORD *)(a1 + 104);
  v126 = a5;
  if (*(_QWORD *)(a1 + 112) == v21 || *(int *)(v21 + 32 * v17 + 16) < 1)
  {
    v130 = 0;
    v22 = a1;
  }
  else
  {
    v22 = a1;
    v23 = (int32x2_t *)(*(_QWORD *)(a1 + 128) + 48 * (int)v17);
    v23[4] = (int32x2_t)v16;
    v130 = 1;
    kaldi::CuMatrix<float>::Resize(v23, v10, *(unsigned int *)(v20 + 16), 1, 0);
  }
  v24 = v11;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v127, a4, 111);
  v25 = *(int *)(v22 + 176);
  v26 = *(_DWORD *)(v19 + 28);
  v27 = *(_QWORD *)(v19 + 32);
  v167[1] = *(_QWORD *)(v19 + 8);
  LODWORD(v167[2]) = v25;
  *(_QWORD *)((char *)&v167[2] + 4) = *(_QWORD *)(v19 + 20);
  HIDWORD(v167[3]) = v26;
  v167[4] = v27;
  v167[0] = &unk_1E5D29D40;
  v28 = *(_DWORD *)(v19 + 28) - v25;
  v29 = *(_QWORD *)(v19 + 32);
  v166[1] = *(_QWORD *)(v19 + 8) + 4 * v25;
  LODWORD(v166[2]) = v25;
  *(_QWORD *)((char *)&v166[2] + 4) = *(_QWORD *)(v19 + 20);
  HIDWORD(v166[3]) = v28;
  v166[4] = v29;
  v166[0] = &unk_1E5D29D40;
  v30 = *(_DWORD *)(v19 + 28) - 2 * v25;
  v31 = *(_QWORD *)(v19 + 32);
  v165[1] = *(_QWORD *)(v19 + 8) + 8 * v25;
  LODWORD(v165[2]) = v25;
  *(_QWORD *)((char *)&v165[2] + 4) = *(_QWORD *)(v19 + 20);
  HIDWORD(v165[3]) = v30;
  v165[4] = v31;
  v165[0] = &unk_1E5D29D40;
  LODWORD(v31) = *(_DWORD *)(v19 + 28) - 3 * v25;
  v32 = *(_QWORD *)(v19 + 32);
  v164[1] = *(_QWORD *)(v19 + 8) + 4 * (3 * v25);
  LODWORD(v164[2]) = v25;
  *(_QWORD *)((char *)&v164[2] + 4) = *(_QWORD *)(v19 + 20);
  HIDWORD(v164[3]) = v31;
  v164[4] = v32;
  v164[0] = &unk_1E5D29D40;
  LODWORD(v31) = *(_DWORD *)(v20 + 28);
  v33 = *(_QWORD *)(v20 + 32);
  v163[1] = *(_QWORD *)(v20 + 8);
  LODWORD(v163[2]) = v25;
  *(_QWORD *)((char *)&v163[2] + 4) = *(_QWORD *)(v20 + 20);
  HIDWORD(v163[3]) = v31;
  v163[4] = v33;
  v163[0] = &unk_1E5D29D40;
  LODWORD(v31) = *(_DWORD *)(v20 + 28) - v25;
  v34 = *(_QWORD *)(v20 + 32);
  v162[1] = *(_QWORD *)(v20 + 8) + 4 * v25;
  LODWORD(v162[2]) = v25;
  *(_QWORD *)((char *)&v162[2] + 4) = *(_QWORD *)(v20 + 20);
  HIDWORD(v162[3]) = v31;
  v162[4] = v34;
  v162[0] = &unk_1E5D29D40;
  LODWORD(v31) = *(_DWORD *)(v20 + 28) - 2 * v25;
  v35 = *(_QWORD *)(v20 + 32);
  v161[1] = *(_QWORD *)(v20 + 8) + 8 * v25;
  LODWORD(v161[2]) = v25;
  *(_QWORD *)((char *)&v161[2] + 4) = *(_QWORD *)(v20 + 20);
  HIDWORD(v161[3]) = v31;
  v161[4] = v35;
  v161[0] = &unk_1E5D29D40;
  v36 = *(_DWORD *)(v20 + 28) - 3 * v25;
  v37 = *(_QWORD *)(v20 + 32);
  v160[1] = *(_QWORD *)(v20 + 8) + 4 * (3 * v25);
  LODWORD(v160[2]) = v25;
  v128 = v20;
  *(_QWORD *)((char *)&v160[2] + 4) = *(_QWORD *)(v20 + 20);
  HIDWORD(v160[3]) = v36;
  v160[4] = v37;
  v160[0] = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)v163, (uint64_t)v167, (uint64_t)v164);
  LODWORD(v159[1]) = v162[2];
  HIDWORD(v159[1]) = v133 - v10;
  LODWORD(v159[2]) = v162[3];
  HIDWORD(v159[2]) = HIDWORD(v162[3]) - LODWORD(v162[3]) * v10;
  v159[3] = v162[4];
  v159[0] = v162[1] + 4 * LODWORD(v162[3]) * (int)v10;
  v158 = &unk_1E5D29D40;
  DWORD2(v156) = v166[2];
  HIDWORD(v156) = v133 - v10;
  LODWORD(v157) = v166[3];
  DWORD1(v157) = HIDWORD(v166[3]) - LODWORD(v166[3]) * v10;
  *((_QWORD *)&v157 + 1) = v166[4];
  *(_QWORD *)&v156 = v166[1] + 4 * LODWORD(v166[3]) * (int)v10;
  v155 = &unk_1E5D29D40;
  v38 = *(_QWORD *)(a1 + 272) + 48 * (int)v132;
  v39 = *(_DWORD *)(v38 + 16);
  v40 = *(_QWORD *)(v38 + 32);
  *(_QWORD *)&v153 = *(_QWORD *)(v38 + 8);
  DWORD2(v153) = v39;
  HIDWORD(v153) = v133 - v10;
  *(_QWORD *)&v154 = *(_QWORD *)(v38 + 24);
  *((_QWORD *)&v154 + 1) = v40;
  v152 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v158, (uint64_t)&v155, (uint64_t)&v152);
  v152 = &unk_1E5D29D40;
  v153 = 0u;
  v154 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
  v155 = &unk_1E5D29D40;
  v156 = 0u;
  v157 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v155);
  v158 = &unk_1E5D29D40;
  memset(v159, 0, sizeof(v159));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v158);
  v159[1] = __PAIR64__(v10, v162[2]);
  v159[2] = v162[3];
  v159[3] = v162[4];
  v159[0] = v162[1];
  v158 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v158);
  v158 = &unk_1E5D29D40;
  memset(v159, 0, sizeof(v159));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v158);
  if (v130)
  {
    v41 = *(_QWORD *)(a1 + 128) + 48 * (int)v132;
    v42 = *(_DWORD *)(a1 + 176);
    v43 = *(_DWORD *)(v41 + 28);
    v44 = *(_QWORD *)(v41 + 32);
    v159[0] = *(_QWORD *)(v41 + 8);
    LODWORD(v159[1]) = v42;
    *(_QWORD *)((char *)&v159[1] + 4) = *(_QWORD *)(v41 + 20);
    HIDWORD(v159[2]) = v43;
    v159[3] = v44;
    v158 = &unk_1E5D29D40;
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v158);
    v45 = 0;
    v46 = v11 - 1;
    do
    {
      v47 = LODWORD(v162[3]) * (v10 + v45);
      *((_QWORD *)&v156 + 1) = __PAIR64__(v10, v162[2]);
      LODWORD(v157) = v162[3];
      DWORD1(v157) = HIDWORD(v162[3]) - v47;
      *((_QWORD *)&v157 + 1) = v162[4];
      *(_QWORD *)&v156 = v162[1] + 4 * v47;
      v155 = &unk_1E5D29D40;
      v48 = *(_QWORD *)(a1 + 104) + 32 * v132;
      *((_QWORD *)&v153 + 1) = 0;
      v152 = &unk_1E5D29D70;
      *(_QWORD *)&v153 = *(_QWORD *)(v48 + 8) + 4 * (v10 + v45);
      DWORD2(v153) = v10;
      *(_QWORD *)&v154 = *(_QWORD *)(v48 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v155, (uint64_t)&v158, (uint64_t)&v152, 0);
      v155 = &unk_1E5D29D40;
      v156 = 0u;
      v157 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v155);
      v45 += v10;
      --v46;
    }
    while (v46);
    v158 = &unk_1E5D29D40;
    memset(v159, 0, sizeof(v159));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v158);
  }
  v49 = v132;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)v161, (uint64_t)v165, *(_QWORD *)(a1 + 296) + 48 * (int)v132);
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)v160, (uint64_t)v164, (uint64_t)v167);
  v50 = v131 + 16 * v18;
  kaldi::CuMatrixBase<float>::DiffTanh(v50, *(_QWORD *)(a1 + 296) + 48 * (int)v132, (uint64_t)v165);
  v51 = 0;
  v134 = (v24 - 1);
  v129 = v10 * (v24 - 1);
  v52 = v127;
  do
  {
    v53 = v129 + v51;
    v54 = v52[6];
    v55 = *((_QWORD *)v52 + 1) + 4 * v54 * (v129 + v51);
    v56 = v52[7] - v54 * (v129 + v51);
    v57 = *((_QWORD *)v52 + 4);
    LODWORD(v159[1]) = v52[4];
    HIDWORD(v159[1]) = v10;
    v159[2] = __PAIR64__(v56, v54);
    v159[3] = v57;
    v159[0] = v55;
    v158 = &unk_1E5D29D40;
    v58 = *(_QWORD *)(a1 + 392) + 48 * v49;
    LODWORD(v55) = *(_DWORD *)(v58 + 16);
    v59 = *(_DWORD *)(v58 + 24);
    v60 = v59 * (v129 + v51);
    v61 = *(_QWORD *)(v58 + 8) + 4 * v60;
    LODWORD(v57) = *(_DWORD *)(v58 + 28) - v60;
    v62 = *(_QWORD *)(v58 + 32);
    *((_QWORD *)&v156 + 1) = __PAIR64__(v10, v55);
    *(_QWORD *)&v157 = __PAIR64__(v57, v59);
    *((_QWORD *)&v157 + 1) = v62;
    *(_QWORD *)&v156 = v61;
    v155 = &unk_1E5D29D40;
    if (*(_BYTE *)(a1 + 224))
    {
      v63 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      LODWORD(v64) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v155, (uint64_t)&v158, 111, v63, 111, v64, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v155, (uint64_t)&v158, 111);
    }
    *((_QWORD *)&v153 + 1) = __PAIR64__(v10, v161[2]);
    LODWORD(v154) = v161[3];
    DWORD1(v154) = HIDWORD(v161[3]) - LODWORD(v161[3]) * v53;
    *((_QWORD *)&v154 + 1) = v161[4];
    *(_QWORD *)&v153 = v161[1] + 4 * (int)(LODWORD(v161[3]) * v53);
    v152 = &unk_1E5D29D40;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v152, (uint64_t)&v155);
    v65 = *(_DWORD *)(v50 + 24);
    v66 = *(_QWORD *)(v50 + 8) + 4 * (int)(v65 * v53);
    v67 = *(_DWORD *)(v50 + 28) - v65 * v53;
    v68 = *(_QWORD *)(v50 + 32);
    DWORD2(v150) = *(_DWORD *)(v50 + 16);
    HIDWORD(v150) = v10;
    *(_QWORD *)&v151 = __PAIR64__(v67, v65);
    *((_QWORD *)&v151 + 1) = v68;
    *(_QWORD *)&v150 = v66;
    v149 = &unk_1E5D29D40;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v149, (uint64_t)&v155);
    v69 = a1;
    if (*(_BYTE *)(a1 + 208))
    {
      v70 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
      v71 = *(_QWORD *)(v70 + 8) + 8 * *(int *)(v70 + 24);
      v72 = *(_DWORD *)(v70 + 16);
      v73 = *(_QWORD *)(v70 + 32);
      v147 = &unk_1E5D29D70;
      v148[0] = v71;
      v148[2] = v73;
      v148[1] = v72;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v149, (uint64_t)&v152, 111, (uint64_t)&v147, 1.0, 1.0);
    }
    if (v134 < v24 - 1)
    {
      v74 = (v10 * v24 + v51);
      v75 = *(_DWORD *)(v50 + 24);
      v76 = *(_QWORD *)(v50 + 8) + 4 * (int)(v75 * v74);
      v77 = *(_DWORD *)(v50 + 28) - v75 * v74;
      v78 = *(_QWORD *)(v50 + 32);
      LODWORD(v148[1]) = *(_DWORD *)(v50 + 16);
      HIDWORD(v148[1]) = v10;
      v148[2] = __PAIR64__(v77, v75);
      v148[3] = v78;
      v147 = &unk_1E5D29D40;
      v148[0] = v76;
      v146[1] = __PAIR64__(v10, v166[2]);
      LODWORD(v146[2]) = v166[3];
      HIDWORD(v146[2]) = HIDWORD(v166[3]) - LODWORD(v166[3]) * v74;
      v146[3] = v166[4];
      v145 = &unk_1E5D29D40;
      v146[0] = v166[1] + 4 * LODWORD(v166[3]) * (int)v74;
      if (v130)
      {
        v79 = *(_QWORD *)(a1 + 128) + 48 * (int)v132;
        v80 = *(_DWORD *)(a1 + 176);
        v81 = *(_DWORD *)(v79 + 28);
        v82 = *(_QWORD *)(v79 + 32);
        v144[0] = *(_QWORD *)(v79 + 8);
        LODWORD(v144[1]) = v80;
        *(_QWORD *)((char *)&v144[1] + 4) = *(_QWORD *)(v79 + 20);
        HIDWORD(v144[2]) = v81;
        v144[3] = v82;
        v143 = &unk_1E5D29D40;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v143);
        v83 = *(_QWORD *)(a1 + 104) + 32 * v132;
        v142[1] = 0;
        v141 = &unk_1E5D29D70;
        v142[0] = *(_QWORD *)(v83 + 8) + 4 * v74;
        LODWORD(v142[1]) = v10;
        v142[2] = *(_QWORD *)(v83 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v143, (uint64_t)&v147, (uint64_t)&v141, 1);
        *(_OWORD *)&v148[1] = *(_OWORD *)&v144[1];
        v148[0] = v144[0];
        v148[3] = v144[3];
        v84 = *(_QWORD *)(a1 + 128) + 48 * (int)v132;
        v85 = *(int *)(a1 + 176);
        v86 = *(_DWORD *)(v84 + 28) - v85;
        v87 = *(_QWORD *)(v84 + 32);
        v142[0] = *(_QWORD *)(v84 + 8) + 4 * v85;
        LODWORD(v142[1]) = v85;
        *(_QWORD *)((char *)&v142[1] + 4) = *(_QWORD *)(v84 + 20);
        HIDWORD(v142[2]) = v86;
        v142[3] = v87;
        v141 = &unk_1E5D29D40;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v141);
        v88 = *(_QWORD *)(a1 + 104) + 32 * v132;
        v140[2] = 0;
        v140[0] = &unk_1E5D29D70;
        v140[1] = *(_QWORD *)(v88 + 8) + 4 * v74;
        LODWORD(v140[2]) = v10;
        v140[3] = *(_QWORD *)(v88 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v141, (uint64_t)&v145, (uint64_t)v140, 1);
        v146[0] = v142[0];
        *(_OWORD *)&v146[1] = *(_OWORD *)&v142[1];
        v146[3] = v142[3];
        v141 = &unk_1E5D29D40;
        memset(v142, 0, sizeof(v142));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
        v143 = &unk_1E5D29D40;
        memset(v144, 0, sizeof(v144));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
        v69 = a1;
      }
      if (*(_BYTE *)(v69 + 208))
      {
        v144[1] = __PAIR64__(v10, v162[2]);
        LODWORD(v144[2]) = v162[3];
        HIDWORD(v144[2]) = HIDWORD(v162[3]) - LODWORD(v162[3]) * v74;
        v144[3] = v162[4];
        v143 = &unk_1E5D29D40;
        v144[0] = v162[1] + 4 * LODWORD(v162[3]) * (int)v74;
        v142[1] = __PAIR64__(v10, v163[2]);
        LODWORD(v142[2]) = v163[3];
        HIDWORD(v142[2]) = HIDWORD(v163[3]) - LODWORD(v163[3]) * v74;
        v142[3] = v163[4];
        v141 = &unk_1E5D29D40;
        v142[0] = v163[1] + 4 * LODWORD(v163[3]) * (int)v74;
        if (v130)
        {
          v89 = *(_QWORD *)(v69 + 128) + 48 * (int)v132;
          v90 = *(int *)(v69 + 176);
          v91 = *(_DWORD *)(v89 + 28) - 2 * v90;
          v92 = *(_QWORD *)(v89 + 32);
          v140[1] = *(_QWORD *)(v89 + 8) + 8 * v90;
          LODWORD(v140[2]) = v90;
          *(_QWORD *)((char *)&v140[2] + 4) = *(_QWORD *)(v89 + 20);
          HIDWORD(v140[3]) = v91;
          v140[4] = v92;
          v140[0] = &unk_1E5D29D40;
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v140);
          v93 = *(_QWORD *)(v69 + 104) + 32 * v132;
          v139[2] = 0;
          v139[0] = &unk_1E5D29D70;
          v139[1] = *(_QWORD *)(v93 + 8) + 4 * v74;
          LODWORD(v139[2]) = v10;
          v139[3] = *(_QWORD *)(v93 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v140, (uint64_t)&v143, (uint64_t)v139, 1);
          *(_OWORD *)&v144[1] = *(_OWORD *)&v140[2];
          v144[0] = v140[1];
          v144[3] = v140[4];
          v94 = *(_QWORD *)(v69 + 128) + 48 * (int)v132;
          v95 = *(_DWORD *)(v69 + 176);
          v96 = *(_DWORD *)(v94 + 28) - 3 * v95;
          v97 = *(_QWORD *)(v94 + 32);
          v139[1] = *(_QWORD *)(v94 + 8) + 12 * v95;
          LODWORD(v139[2]) = v95;
          *(_QWORD *)((char *)&v139[2] + 4) = *(_QWORD *)(v94 + 20);
          HIDWORD(v139[3]) = v96;
          v139[4] = v97;
          v139[0] = &unk_1E5D29D40;
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v139);
          v98 = *(_QWORD *)(v69 + 104) + 32 * v132;
          v137 = 0;
          v136[0] = &unk_1E5D29D70;
          v136[1] = *(_QWORD *)(v98 + 8) + 4 * v74;
          LODWORD(v137) = v10;
          v138 = *(_QWORD *)(v98 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v139, (uint64_t)&v141, (uint64_t)v136, 1);
          v142[0] = v139[1];
          *(_OWORD *)&v142[1] = *(_OWORD *)&v139[2];
          v142[3] = v139[4];
          v139[0] = &unk_1E5D29D40;
          memset(&v139[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v139);
          v140[0] = &unk_1E5D29D40;
          memset(&v140[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v140);
          v69 = a1;
        }
        v99 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v69);
        v100 = *(_QWORD *)(v99 + 8) + 4 * *(int *)(v99 + 24);
        v101 = *(_DWORD *)(v99 + 16);
        v102 = *(_QWORD *)(v99 + 32);
        v140[0] = &unk_1E5D29D70;
        v140[1] = v100;
        v140[3] = v102;
        v140[2] = v101;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v149, (uint64_t)&v143, 111, (uint64_t)v140, 1.0, 1.0);
        v103 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        v104 = *(_QWORD *)(v103 + 8);
        v105 = *(_DWORD *)(v103 + 16);
        v106 = *(_QWORD *)(v103 + 32);
        v140[0] = &unk_1E5D29D70;
        v140[1] = v104;
        v140[3] = v106;
        v140[2] = v105;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v149, (uint64_t)&v141, 111, (uint64_t)v140, 1.0, 1.0);
        v141 = &unk_1E5D29D40;
        memset(v142, 0, sizeof(v142));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
        v143 = &unk_1E5D29D40;
        memset(v144, 0, sizeof(v144));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v149, (uint64_t)&v147, 111, (uint64_t)&v145, 111, 1.0, 1.0);
      v145 = &unk_1E5D29D40;
      memset(v146, 0, sizeof(v146));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v145);
      v147 = &unk_1E5D29D40;
      memset(v148, 0, sizeof(v148));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v147);
    }
    v148[1] = __PAIR64__(v10, v163[2]);
    LODWORD(v148[2]) = v163[3];
    HIDWORD(v148[2]) = HIDWORD(v163[3]) - LODWORD(v163[3]) * v53;
    v148[3] = v163[4];
    v147 = &unk_1E5D29D40;
    v148[0] = v163[1] + 4 * (int)(LODWORD(v163[3]) * v53);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v147, (uint64_t)&v149);
    v147 = &unk_1E5D29D40;
    memset(v148, 0, sizeof(v148));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v147);
    v148[1] = __PAIR64__(v10, v160[2]);
    LODWORD(v148[2]) = v160[3];
    HIDWORD(v148[2]) = HIDWORD(v160[3]) - LODWORD(v160[3]) * v53;
    v148[3] = v160[4];
    v147 = &unk_1E5D29D40;
    v148[0] = v160[1] + 4 * (int)(LODWORD(v160[3]) * v53);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v147, (uint64_t)&v149);
    v147 = &unk_1E5D29D40;
    memset(v148, 0, sizeof(v148));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v147);
    v49 = v132;
    if (v134 >= 1)
    {
      v148[1] = __PAIR64__(v10, v162[2]);
      LODWORD(v148[2]) = v162[3];
      HIDWORD(v148[2]) = HIDWORD(v162[3]) - LODWORD(v162[3]) * v53;
      v148[3] = v162[4];
      v147 = &unk_1E5D29D40;
      v148[0] = v162[1] + 4 * (int)(LODWORD(v162[3]) * v53);
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v147, (uint64_t)&v149);
      v147 = &unk_1E5D29D40;
      memset(v148, 0, sizeof(v148));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v147);
      v107 = *(_DWORD *)(v128 + 16);
      v108 = *(_DWORD *)(v128 + 24);
      v109 = *(_QWORD *)(v128 + 8) + 4 * (int)(v108 * v53);
      v110 = *(_DWORD *)(v128 + 28) - v108 * v53;
      v111 = *(_QWORD *)(v128 + 32);
      v148[1] = __PAIR64__(v10, v107);
      v148[2] = __PAIR64__(v110, v108);
      v148[3] = v111;
      v147 = &unk_1E5D29D40;
      v148[0] = v109;
      if (v130)
      {
        v112 = *(_QWORD *)(a1 + 128) + 48 * (int)v132;
        v113 = *(_DWORD *)(v112 + 28);
        v114 = *(_QWORD *)(v112 + 32);
        v146[0] = *(_QWORD *)(v112 + 8);
        LODWORD(v146[1]) = v107;
        *(_QWORD *)((char *)&v146[1] + 4) = *(_QWORD *)(v112 + 20);
        HIDWORD(v146[2]) = v113;
        v146[3] = v114;
        v145 = &unk_1E5D29D40;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v145);
        v115 = *(_QWORD *)(a1 + 104) + 32 * v132;
        v144[1] = 0;
        v143 = &unk_1E5D29D70;
        v144[0] = *(_QWORD *)(v115 + 8) + 4 * v53;
        LODWORD(v144[1]) = v10;
        v144[2] = *(_QWORD *)(v115 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v145, (uint64_t)&v147, (uint64_t)&v143, 1);
        *(_OWORD *)&v148[1] = *(_OWORD *)&v146[1];
        v148[0] = v146[0];
        v148[3] = v146[3];
        v145 = &unk_1E5D29D40;
        memset(v146, 0, sizeof(v146));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v145);
        v52 = v127;
      }
      v116 = v52[6];
      v117 = v116 * (v10 * (v24 - 2) + v51);
      v118 = *((_QWORD *)v52 + 1) + 4 * v117;
      v119 = v52[7] - v117;
      v120 = *((_QWORD *)v52 + 4);
      LODWORD(v146[1]) = v52[4];
      HIDWORD(v146[1]) = v10;
      v146[2] = __PAIR64__(v119, v116);
      v146[3] = v120;
      v145 = &unk_1E5D29D40;
      v146[0] = v118;
      v121 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
      LODWORD(v122) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v145, (uint64_t)&v147, 111, v121, 111, v122, 1.0);
      v145 = &unk_1E5D29D40;
      memset(v146, 0, sizeof(v146));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v145);
      v147 = &unk_1E5D29D40;
      memset(v148, 0, sizeof(v148));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v147);
      v49 = v132;
    }
    v149 = &unk_1E5D29D40;
    v150 = 0u;
    v151 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
    v152 = &unk_1E5D29D40;
    v153 = 0u;
    v154 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
    v155 = &unk_1E5D29D40;
    v156 = 0u;
    v157 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v155);
    v158 = &unk_1E5D29D40;
    memset(v159, 0, sizeof(v159));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v158);
    v51 -= v10;
  }
  while (v134-- > 0);
  if (v126)
  {
    v124 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    LODWORD(v125) = 1.0;
    kaldi::CuMatrixBase<float>::AddMatMat<short>(v126, v128, 111, v124, 111, v125, 0.0);
  }
  v160[0] = &unk_1E5D29D40;
  memset(&v160[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v160);
  v161[0] = &unk_1E5D29D40;
  memset(&v161[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v161);
  v162[0] = &unk_1E5D29D40;
  memset(&v162[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v162);
  v163[0] = &unk_1E5D29D40;
  memset(&v163[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v163);
  v164[0] = &unk_1E5D29D40;
  memset(&v164[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v164);
  v165[0] = &unk_1E5D29D40;
  memset(&v165[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v165);
  v166[0] = &unk_1E5D29D40;
  memset(&v166[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v166);
  v167[0] = &unk_1E5D29D40;
  memset(&v167[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v167);
}

void sub_1ADA7DAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, _OWORD *a11, _OWORD *a12, _OWORD *a13, _OWORD *a14, _OWORD *a15, _OWORD *a16, _OWORD *a17)
{
  _OWORD *v17;

  STACK[0x280] = (unint64_t)&unk_1E5D29D40;
  *v17 = 0u;
  v17[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x280]);
  STACK[0x2A8] = (unint64_t)&unk_1E5D29D40;
  *a14 = 0u;
  a14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x2A8]);
  STACK[0x2D0] = (unint64_t)&unk_1E5D29D40;
  *a15 = 0u;
  a15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x2D0]);
  STACK[0x2F8] = (unint64_t)&unk_1E5D29D40;
  *a16 = 0u;
  a16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x2F8]);
  STACK[0x320] = (unint64_t)&unk_1E5D29D40;
  *a17 = 0u;
  a17[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x320]);
  STACK[0x348] = (unint64_t)&unk_1E5D29D40;
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x348]);
  STACK[0x370] = (unint64_t)&unk_1E5D29D40;
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x370]);
  STACK[0x398] = (unint64_t)&unk_1E5D29D40;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x398]);
  STACK[0x3C0] = (unint64_t)&unk_1E5D29D40;
  *a13 = 0u;
  a13[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

void sub_1ADA7DEB0()
{
  JUMPOUT(0x1ADA7DDC0);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 368) + 48 * a2), a3, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 392) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 416) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 440) + 48 * a2), a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_1ADA7E010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[5];
  _QWORD v59[5];
  _QWORD v60[36];

  v9 = *(_DWORD *)(a1 + 96);
  v10 = *(_DWORD *)(a2 + 20);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v60, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Accumulating gradients for batch id = ", 38);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v60);
  }
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  v47 = *(_QWORD *)(a1 + 272);
  v14 = *(_QWORD *)(a1 + 440) + 48 * a5;
  v15 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 480) + 4 * a5) = v10;
  v16 = *(int *)(a1 + 176);
  v17 = *(_DWORD *)(v14 + 28);
  v18 = *(_QWORD *)(v14 + 32);
  v60[1] = *(_QWORD *)(v14 + 8);
  LODWORD(v60[2]) = v16;
  *(_QWORD *)((char *)&v60[2] + 4) = *(_QWORD *)(v14 + 20);
  HIDWORD(v60[3]) = v17;
  v60[4] = v18;
  v60[0] = &unk_1E5D29D40;
  LODWORD(v18) = *(_DWORD *)(v14 + 28) - v16;
  v19 = *(_QWORD *)(v14 + 32);
  v59[1] = *(_QWORD *)(v14 + 8) + 4 * v16;
  LODWORD(v59[2]) = v16;
  *(_QWORD *)((char *)&v59[2] + 4) = *(_QWORD *)(v14 + 20);
  HIDWORD(v59[3]) = v18;
  v59[4] = v19;
  v59[0] = &unk_1E5D29D40;
  LODWORD(v18) = *(_DWORD *)(v14 + 28) - 2 * v16;
  v20 = *(_QWORD *)(v14 + 32);
  v58[1] = *(_QWORD *)(v14 + 8) + 8 * v16;
  LODWORD(v58[2]) = v16;
  *(_QWORD *)((char *)&v58[2] + 4) = *(_QWORD *)(v14 + 20);
  HIDWORD(v58[3]) = v18;
  v58[4] = v20;
  v58[0] = &unk_1E5D29D40;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a5) + 32) = a4;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a5) + 32) = a4;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a5) + 24) = a4;
  if (*(_BYTE *)(a1 + 208))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a5) + 32) = a4;
  if (*(_BYTE *)(a1 + 224))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a5) + 32) = a4;
  v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a5);
  kaldi::CuMatrixBase<float>::AddMatMat(v21, v14, CblasTrans, a2, CblasNoTrans, 1.0, v15);
  v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a5);
  v23 = v10 - v9;
  v24 = *(_DWORD *)(v14 + 24);
  v25 = *(_QWORD *)(v14 + 8) + 4 * (int)(v24 * v9);
  v26 = *(_DWORD *)(v14 + 28) - v24 * v9;
  v27 = *(_QWORD *)(v14 + 32);
  DWORD2(v56) = *(_DWORD *)(v14 + 16);
  HIDWORD(v56) = v23;
  *(_QWORD *)&v57 = __PAIR64__(v26, v24);
  *((_QWORD *)&v57 + 1) = v27;
  v55 = &unk_1E5D29D40;
  *(_QWORD *)&v56 = v25;
  v28 = *(_QWORD *)(a1 + 344) + 48 * a5;
  LODWORD(v25) = *(_DWORD *)(v28 + 16);
  v29 = *(_QWORD *)(v28 + 32);
  *(_QWORD *)&v53 = *(_QWORD *)(v28 + 8);
  *((_QWORD *)&v53 + 1) = __PAIR64__(v23, v25);
  *(_QWORD *)&v54 = *(_QWORD *)(v28 + 24);
  *((_QWORD *)&v54 + 1) = v29;
  v52 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::AddMatMat(v22, (uint64_t)&v55, CblasTrans, (uint64_t)&v52, CblasNoTrans, 1.0, v15);
  v52 = &unk_1E5D29D40;
  v53 = 0u;
  v54 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
  v55 = &unk_1E5D29D40;
  v56 = 0u;
  v57 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
  v30 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a5);
  kaldi::CuVectorBase<float>::AddRowSumMat(v30, v14, 1.0, v15);
  if (*(_BYTE *)(a1 + 208))
  {
    v31 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a5);
    v32 = v47 + 48 * a5;
    v33 = *(_QWORD *)(v31 + 8);
    v34 = *(_DWORD *)(v31 + 16);
    v35 = *(_QWORD *)(v31 + 32);
    v48 = &unk_1E5D29D70;
    v49 = v33;
    v51 = v35;
    v50 = v34;
    *((_QWORD *)&v56 + 1) = __PAIR64__(v23, v60[2]);
    LODWORD(v57) = v60[3];
    DWORD1(v57) = HIDWORD(v60[3]) - LODWORD(v60[3]) * v9;
    *((_QWORD *)&v57 + 1) = v60[4];
    v55 = &unk_1E5D29D40;
    *(_QWORD *)&v56 = v60[1] + 4 * LODWORD(v60[3]) * v9;
    LODWORD(v33) = *(_DWORD *)(v32 + 16);
    v36 = *(_QWORD *)(v32 + 32);
    *(_QWORD *)&v53 = *(_QWORD *)(v32 + 8);
    *((_QWORD *)&v53 + 1) = __PAIR64__(v23, v33);
    *(_QWORD *)&v54 = *(_QWORD *)(v32 + 24);
    *((_QWORD *)&v54 + 1) = v36;
    v52 = &unk_1E5D29D40;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v48, (uint64_t)&v55, 112, (uint64_t)&v52, 111, 1.0, v15);
    v52 = &unk_1E5D29D40;
    v53 = 0u;
    v54 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
    v55 = &unk_1E5D29D40;
    v56 = 0u;
    v57 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
    v37 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a5);
    v38 = *(_QWORD *)(v37 + 8) + 4 * *(int *)(v37 + 24);
    v39 = *(_DWORD *)(v37 + 16);
    v40 = *(_QWORD *)(v37 + 32);
    v48 = &unk_1E5D29D70;
    v49 = v38;
    v51 = v40;
    v50 = v39;
    *((_QWORD *)&v56 + 1) = __PAIR64__(v23, v59[2]);
    LODWORD(v57) = v59[3];
    DWORD1(v57) = HIDWORD(v59[3]) - LODWORD(v59[3]) * v9;
    *((_QWORD *)&v57 + 1) = v59[4];
    v55 = &unk_1E5D29D40;
    *(_QWORD *)&v56 = v59[1] + 4 * LODWORD(v59[3]) * v9;
    LODWORD(v38) = *(_DWORD *)(v32 + 16);
    v41 = *(_QWORD *)(v32 + 32);
    *(_QWORD *)&v53 = *(_QWORD *)(v32 + 8);
    *((_QWORD *)&v53 + 1) = __PAIR64__(v23, v38);
    *(_QWORD *)&v54 = *(_QWORD *)(v32 + 24);
    *((_QWORD *)&v54 + 1) = v41;
    v52 = &unk_1E5D29D40;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v48, (uint64_t)&v55, 112, (uint64_t)&v52, 111, 1.0, v15);
    v52 = &unk_1E5D29D40;
    v53 = 0u;
    v54 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
    v55 = &unk_1E5D29D40;
    v56 = 0u;
    v57 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
    v42 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a5);
    v43 = *(_QWORD *)(v42 + 8) + 8 * *(int *)(v42 + 24);
    v44 = *(_DWORD *)(v42 + 16);
    v45 = *(_QWORD *)(v42 + 32);
    v55 = &unk_1E5D29D70;
    *(_QWORD *)&v56 = v43;
    *(_QWORD *)&v57 = v45;
    *((_QWORD *)&v56 + 1) = v44;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v55, (uint64_t)v58, 112, v32, 111, 1.0, v15);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v46 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a5);
    kaldi::CuMatrixBase<float>::AddMatMat(v46, *(_QWORD *)(a1 + 368) + 48 * a5, CblasTrans, *(_QWORD *)(a1 + 320) + 48 * a5, CblasNoTrans, 1.0, v15);
  }
  v58[0] = &unk_1E5D29D40;
  memset(&v58[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v58);
  v59[0] = &unk_1E5D29D40;
  memset(&v59[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v59);
  v60[0] = &unk_1E5D29D40;
  memset(&v60[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v60);
}

void sub_1ADA7E638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, _OWORD *a11, _OWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  a27 = &unk_1E5D29D40;
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a27);
  a32 = &unk_1E5D29D40;
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a32);
  a37 = &unk_1E5D29D40;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a37);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t *v9;
  uint64_t v10;
  int32x2_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t i;
  int32x2_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t j;
  int32x2_t *v22;
  uint64_t v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  void *__p[2];
  unsigned __int8 v30;
  _QWORD v31[36];

  if (*(_BYTE *)(a1 + 528))
    return;
  v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1)
    v3 = (v2 + 1);
  else
    v3 = 1;
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "input_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_QWORD *)(a1 + 568) != *(_QWORD *)(a1 + 560))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_QWORD *)(a1 + 616) != *(_QWORD *)(a1 + 608))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "bias_gradient_.size() == 0");
    goto LABEL_58;
  }
  v27 = *(_DWORD *)(a1 + 156);
  if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(a1 + 592) != *(_QWORD *)(a1 + 584))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "peephole_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(a1 + 640) != *(_QWORD *)(a1 + 632))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "projection_weights_gradient_.size() == 0");
LABEL_58:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
  }
  v4 = (_QWORD *)(a1 + 560);
  v5 = (_QWORD *)(a1 + 608);
  v28 = (_QWORD *)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 536, (int)v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 560, (int)v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 608, (int)v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), (int)v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), (int)v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), (int)v3);
  v6 = a1 + 12;
  if ((int)v3 >= 1)
  {
    v7 = 0;
    v8 = a1 + 8;
    do
    {
      v9 = (int32x2_t *)operator new();
      kaldi::CuMatrix<float>::CuMatrix(v9, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v8 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 0, 0, 0);
      v10 = *(_QWORD *)(*v28 + 8 * v7);
      *(_QWORD *)(*v28 + 8 * v7) = v9;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      v11 = (int32x2_t *)operator new();
      kaldi::CuMatrix<float>::CuMatrix(v11, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 0, 0, 0);
      v12 = *(_QWORD *)(*v4 + 8 * v7);
      *(_QWORD *)(*v4 + 8 * v7) = v11;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v13 = (_QWORD *)operator new();
      v14 = (4 * *(_DWORD *)(a1 + 176));
      v13[2] = 0;
      v13[3] = 0;
      *v13 = &unk_1E5D341C8;
      v13[1] = 0;
      kaldi::CuVector<float>::Resize((uint64_t)v13, v14, 0);
      v15 = *(_QWORD *)(*v5 + 8 * v7);
      *(_QWORD *)(*v5 + 8 * v7) = v13;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      if ((v27 & 0xFFFFFFFE) == 2)
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 656) + 48 * v7), (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v8 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 1, 0);
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 680) + 48 * v7), (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 1, 0);
        kaldi::CuVector<float>::Resize(*(_QWORD *)(a1 + 728) + 32 * v7, (4 * *(_DWORD *)(a1 + 176)), 1);
        if (*(_DWORD *)(a1 + 156) == 3)
        {
          kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 656) + 48 * v7, 1.0);
          kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 680) + 48 * v7, 1.0);
          kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 728) + 32 * v7, 1.0);
        }
      }
      ++v7;
    }
    while (v7 != v3);
  }
  if (*(_BYTE *)(a1 + 208))
  {
    v16 = (_QWORD *)(a1 + 584);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 584, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), (int)v3);
    if ((int)v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        v18 = (int32x2_t *)operator new();
        kaldi::CuMatrix<float>::CuMatrix(v18, 3, *(unsigned int *)(a1 + 176), 0, 0, 0);
        v19 = *(_QWORD *)(*v16 + 8 * i);
        *(_QWORD *)(*v16 + 8 * i) = v18;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        if ((v27 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 704) + 48 * i), 3, *(unsigned int *)(a1 + 176), 1, 0);
          if (*(_DWORD *)(a1 + 156) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 704) + 48 * i, 1.0);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v20 = (_QWORD *)(a1 + 632);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 632, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), (int)v3);
    if ((int)v3 >= 1)
    {
      for (j = 0; j != v3; ++j)
      {
        v22 = (int32x2_t *)operator new();
        kaldi::CuMatrix<float>::CuMatrix(v22, *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(unsigned int *)(a1 + 176), 0, 0, 0);
        v23 = *(_QWORD *)(*v20 + 8 * j);
        *(_QWORD *)(*v20 + 8 * j) = v22;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
        if ((v27 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 752) + 48 * j), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(unsigned int *)(a1 + 176), 1, 0);
          if (*(_DWORD *)(a1 + 156) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 752) + 48 * j, 1.0);
        }
      }
    }
  }
  *(_BYTE *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31, 2);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 272))(__p, a1);
    if ((v30 & 0x80u) == 0)
      v25 = __p;
    else
      v25 = (void **)__p[0];
    if ((v30 & 0x80u) == 0)
      v26 = v30;
    else
      v26 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    if ((char)v30 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31);
  }
}

void sub_1ADA7EDE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AccumGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 248), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights();
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(a1 + 104);
  v6 = (_QWORD *)(a1 + 104);
  if (v5 == *(_QWORD *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    v5 = *(_QWORD *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v5 + 32 * a3, *(unsigned int *)(a2 + 16), 1);
  return kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)(*v6 + 32 * a3), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(a1, a2);
  *((_WORD *)a1 + 120) = 0;
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetTrainOptions(_QWORD *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent *v2;

  v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(_QWORD *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetHistoryState(uint64_t a1, int32x2_t *a2, unsigned int a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 1, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, *(_QWORD *)(a1 + 8) + 48 * a3, 111);
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetHistoryState(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v13[4];

  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 16), 1);
  v8 = *(_QWORD *)(a1 + 8) + 48 * a4;
  v9 = *(_QWORD *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  v10 = *(_DWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 32);
  v13[0] = &unk_1E5D29D70;
  v13[1] = v9;
  v13[3] = v11;
  v13[2] = v10;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v13);
}

int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetHistoryState(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)(a1[1] + 48 * a3), a2, 111);
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetHistoryState(_QWORD *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  v8 = a1[1] + 48 * a4;
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  v11 = *(_QWORD *)(v8 + 32);
  v13[0] = &unk_1E5D29D70;
  v13[1] = v10;
  v13[3] = v11;
  v13[2] = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ResetHistoryState(_QWORD *a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v19;
  _QWORD v20[35];
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  *(_QWORD *)(a1[1] + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    v8 = 0;
    do
    {
      if (((*(_QWORD *)(*a2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      {
        v9 = a1[1] + 48 * a4;
        v10 = *(_QWORD *)(v9 + 8) + 4 * *(_DWORD *)(v9 + 24) * (int)v8;
        v11 = *(_DWORD *)(v9 + 16);
        v12 = *(_QWORD *)(v9 + 32);
        v20[0] = &unk_1E5D29D70;
        v20[1] = v10;
        v20[3] = v12;
        v20[2] = v11;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v20);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          v13 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
        }
      }
      ++v8;
    }
    while (a2[1] > v8);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20, 3);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v19 & 0x80u) == 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    if ((v19 & 0x80u) == 0)
      v16 = v19;
    else
      v16 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    if ((char)v19 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20);
  }
  v21[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v23);
}

void sub_1ADA7F32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ResetHistoryState(_QWORD *a1)
{
  uint64_t i;

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  for (i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(_BYTE *)(result + 528) = 0;
  return result;
}

_QWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(_QWORD *result, int a2, float a3)
{
  float *v3;

  v3 = (float *)((char *)result + *(_QWORD *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((_BYTE *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3)
{
  float v4;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a3;
  v6 = *(_DWORD *)(a1 + 156);
  if (v6 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(_BYTE *)(a1 + 84))
        v4 = (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * a2) * a3;
      v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v13, v4);
      v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v14, v4);
      v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v15, v4);
      if (*(_BYTE *)(a1 + 208))
      {
        v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v16, v4);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v17, v4);
      }
    }
  }
  else if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v8, *(_QWORD *)(a1 + 656) + 48 * a2, v4);
      v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, *(_QWORD *)(a1 + 680) + 48 * a2, v4);
      v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(_QWORD *)(a1 + 728) + 32 * a2, v4);
      if (*(_BYTE *)(a1 + 208))
      {
        v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(_QWORD *)(a1 + 704) + 48 * a2, v4);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(_QWORD *)(a1 + 752) + 48 * a2, v4);
      }
    }
  }
  else if (a3 > 0.0 && v6 == 2)
  {
    v19 = a2;
    if (*(_BYTE *)(a1 + 84))
      v4 = (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * a2) * a3;
    v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v20, (int *)(*(_QWORD *)(a1 + 656) + 48 * v19), v4);
    v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v21, (int *)(*(_QWORD *)(a1 + 680) + 48 * v19), v4);
    v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v22, (_QWORD *)(*(_QWORD *)(a1 + 728) + 32 * v19), v4);
    if (*(_BYTE *)(a1 + 208))
    {
      v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v23, (int *)(*(_QWORD *)(a1 + 704) + 48 * v19), v4);
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v24, (int *)(*(_QWORD *)(a1 + 752) + 48 * v19), v4);
    }
  }
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(_QWORD *a1, unsigned int a2, float a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 264), a2, a3);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  *a3 = result;
  if (*(_QWORD *)(a1 + 544) == *(_QWORD *)(a1 + 536) || *(_QWORD *)(a1 + 568) == *(_QWORD *)(a1 + 560))
  {
    v15 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) == 1)
    v7 = 0;
  else
    v7 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v7);
  v9 = kaldi::CuMatrixBase<float>::CountZeros(v8);
  v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v7);
  v11 = kaldi::CuMatrixBase<float>::CountZeros(v10) + v9;
  v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v7);
  result = kaldi::CuVectorBase<float>::CountZeros(v12);
  *a2 = v11 + result;
  if (*(_BYTE *)(a1 + 208))
  {
    v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v7);
    result = kaldi::CuMatrixBase<float>::CountZeros(v13);
    *a2 += result;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v7);
    result = kaldi::CuMatrixBase<float>::CountZeros(v14);
    v15 = *a2 + result;
LABEL_11:
    *a2 = v15;
  }
  return result;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(_QWORD *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr((uint64_t)a1 + *(_QWORD *)(*a1 - 56), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs();
}

int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetInternalMemory(uint64_t a1, int *a2, int a3)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(_QWORD *)(a1 + 272) + 48 * a3, 111);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::EnsureBuffers(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 240))
  {
    v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 8) + v3), *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 480), v2);
    *(_BYTE *)(a1 + 240) = 1;
  }
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Check(uint64_t a1)
{
  kaldi::quasar::Vocab *v2;
  uint64_t v3;
  kaldi::quasar::Vocab *v4;
  uint64_t v5;
  kaldi::quasar::Vocab *v6;
  uint64_t v7;
  float result;
  kaldi::quasar::Vocab *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  kaldi::quasar::Vocab *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  kaldi::quasar::Vocab *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD v32[34];

  v2 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  if (kaldi::quasar::Vocab::VocabSize(v2) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #rows = ", 22);
    v9 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::quasar::Vocab::VocabSize(v9);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; expecting ", 12);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v3) != *(_DWORD *)(a1
                                                                                 + *(_QWORD *)(*(_QWORD *)a1 - 24)
                                                                                 + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #columns = ", 25);
    v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v12);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " (same as input dim)");
    goto LABEL_28;
  }
  v4 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  if (kaldi::quasar::Vocab::VocabSize(v4) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #rows = ", 26);
    v15 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
    kaldi::quasar::Vocab::VocabSize(v15);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v5) != *(_DWORD *)(a1
                                                                                 + *(_QWORD *)(*(_QWORD *)a1 - 24)
                                                                                 + 12))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #columns = ", 29);
    v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v18);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"; expecting ", 12);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
      v24 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"; expecting ", 12);
      v25 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1) + 16) != 4
                                                                                               * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"; expecting ", 12);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v6 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    if (kaldi::quasar::Vocab::VocabSize(v6) == *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12))
    {
      v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      if (kaldi::QuantizedMatrixBase<short>::NumCols(v7) == *(_DWORD *)(a1 + 176))
        goto LABEL_12;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #columns = ", 30);
      v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumCols(v29);
      v30 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"; expecting ", 12);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #rows = ", 27);
      v26 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::quasar::Vocab::VocabSize(v26);
      v27 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"; expecting ", 12);
      v28 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_1ADA7FEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 274;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 274;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::IsUpdatable()
{
  return 0;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::IsUpdatable()
{
  return 0;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 275;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 275;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 276;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 276;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  int *v35;
  int v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  _QWORD v68[34];

  v6 = *(float *)(a1 + 64);
  v7 = *(float *)(a1 + 68);
  v8 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v9 = *(float *)(v8 + 72);
  v10 = *(_DWORD *)(v8 + 76);
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 32) = a2;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 32) = a2;
  if (*(_BYTE *)(a1 + 208))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 32) = a2;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 24) = a2;
  if (*(_BYTE *)(a1 + 224))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 32) = a2;
  if (a3 >= 0)
    v11 = a3;
  else
    v11 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  if (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) == 1)
    v12 = 0;
  else
    v12 = v11;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v12) + 32) = a2;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v12) + 32) = a2;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v12) + 24) = a2;
  v13 = v12;
  *(_QWORD *)(*(_QWORD *)(a1 + 656) + 48 * v12 + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 680) + 48 * v12 + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 728) + 32 * v12 + 24) = a2;
  if (*(_BYTE *)(a1 + 208))
  {
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v12) + 32) = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 704) + 48 * v12 + 32) = a2;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v12) + 32) = a2;
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v12) + 32) = a2;
  }
  v14 = a1 + 80;
  if (v12 == *(_DWORD *)(a1 + 80))
  {
    v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v12);
    kaldi::CuMatrixBase<float>::SetZero(v15);
    v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v12);
    kaldi::CuMatrixBase<float>::SetZero(v16);
    v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v12);
    kaldi::CuVectorBase<float>::SetZero(v17);
    if (*(_BYTE *)(a1 + 208))
    {
      v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v12);
      kaldi::CuMatrixBase<float>::SetZero(v18);
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v12);
      kaldi::CuMatrixBase<float>::SetZero(v19);
    }
    v20 = *(_QWORD *)a1;
    if (*(int *)(v14 + *(_QWORD *)(*(_QWORD *)a1 - 24)) >= 1)
    {
      v21 = 0;
      do
      {
        v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v13);
        v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v21);
        kaldi::CuMatrixBase<float>::AddMat(v22, v23, 111, 1.0, 1.0);
        v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v13);
        v25 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v21);
        kaldi::CuMatrixBase<float>::AddMat(v24, v25, 111, 1.0, 1.0);
        v26 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v13);
        v27 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v21);
        kaldi::CuVectorBase<float>::AddVec(v26, v27, 1.0, 1.0);
        if (*(_BYTE *)(a1 + 208))
        {
          v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v13);
          v29 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v21);
          kaldi::CuMatrixBase<float>::AddMat(v28, v29, 111, 1.0, 1.0);
        }
        if (*(_BYTE *)(a1 + 224))
        {
          v30 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v13);
          v31 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v21);
          kaldi::CuMatrixBase<float>::AddMat(v30, v31, 111, 1.0, 1.0);
        }
        ++v21;
        v20 = *(_QWORD *)a1;
      }
      while (v21 < *(_DWORD *)(v14 + *(_QWORD *)(*(_QWORD *)a1 - 24)));
    }
    v32 = *(int **)(a1 + 480);
    v32[v13] = 0;
    if ((int)v13 >= 1)
    {
      v33 = 0;
      v34 = v13;
      v35 = v32;
      do
      {
        v36 = *v35++;
        v33 += v36;
        v32[v13] = v33;
        --v34;
      }
      while (v34);
    }
  }
  else
  {
    v20 = *(_QWORD *)a1;
  }
  v37 = a1 + *(_QWORD *)(v20 - 24);
  v38 = *(float *)(v37 + 56);
  if (*(_BYTE *)(v37 + 84))
    v38 = v38 / (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * v13);
  v39 = *(_QWORD *)(a1 + 504);
  if (v13 >= (*(_QWORD *)(a1 + 512) - v39) >> 2)
  {
    LODWORD(v68[0]) = 2143289344;
    std::vector<float>::resize(a1 + 504, (int)v13 + 1, v68);
    v39 = *(_QWORD *)(a1 + 504);
  }
  *(float *)(v39 + 4 * v13) = v38;
  if (*(float *)(a1 + 152) >= 0.0)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 360))(a1, v13);
  if (v6 != 0.0)
  {
    v40 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    v41 = -(float)(v38 * v6);
    v42 = v41 * (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * v13);
    v43 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v40, v43, 111, v42, 1.0);
    v44 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    v45 = v41 * (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * v13);
    v46 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v44, v46, 111, v45, 1.0);
    v47 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    v48 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    kaldi::CuVectorBase<float>::AddVec(v47, v48, v41, 1.0);
    if (*(_BYTE *)(a1 + 208))
    {
      v49 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      v50 = v41 * (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * v13);
      v51 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      kaldi::CuMatrixBase<float>::AddMat(v49, v51, 111, v50, 1.0);
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v52 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      v53 = v41 * (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * v13);
      v54 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMat(v52, v54, 111, v53, 1.0);
    }
  }
  if (v7 != 0.0)
  {
    v55 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    v56 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v13);
    kaldi::cu::RegularizeL1<float>(v55, v56, (float)(v7 * v38) * (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * v13), v38);
    v57 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    v58 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v13);
    kaldi::cu::RegularizeL1<float>(v57, v58, (float)(v7 * v38) * (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * v13), v38);
    if (*(_BYTE *)(a1 + 224))
    {
      v59 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      v60 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v13);
      kaldi::cu::RegularizeL1<float>(v59, v60, (float)(v7 * v38) * (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * v13), v38);
    }
  }
  if (v9 > 0.0)
  {
    if (*(int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v68, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v68);
    }
    if (*(_QWORD *)(a1 + 784) == *(_QWORD *)(a1 + 776))
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 776), v10, v9);
  }
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(a1, v13, v38);
  if (*(float *)(a1 + 472) > 0.0)
  {
    v61 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm(v61, 1, *(float *)(a1 + 472));
    v62 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm(v62, 1, *(float *)(a1 + 472));
    v63 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    kaldi::CuVectorBase<float>::ApplyMaxNorm(v63, *(float *)(a1 + 472));
    if (*(_BYTE *)(a1 + 208))
    {
      v64 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      kaldi::CuMatrixBase<float>::ApplyMaxNorm(v64, 1, *(float *)(a1 + 472));
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v65 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::ApplyMaxNorm(v65, 1, *(float *)(a1 + 472));
    }
  }
  v66 = *(_BYTE **)(a1 + 480);
  if ((_DWORD)v13 == *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80))
  {
    v67 = *(_BYTE **)(a1 + 488);
    if (v66 != v67)
      bzero(v66, ((v67 - v66 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v66[4 * v13] = 0;
  }
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(_QWORD *a1, uint64_t a2, int a3)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::UpdateWeights((uint64_t)a1 + *(_QWORD *)(*a1 - 272), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void *v8;
  uint64_t v9;
  void *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  uint64_t v30;
  void *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  void *v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v74, "Weights are already vectorized");
    goto LABEL_68;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Performing  vectorization of lstm component", 43);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v74);
  }
  kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 184), a2, (uint64_t *)&v74);
  v8 = v74;
  v74 = 0;
  v9 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v10 = v74;
    v74 = 0;
    if (v10)
      (*(void (**)(void *))(*(_QWORD *)v10 + 24))(v10);
  }
  v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20);
  v12 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 16) * v11;
  v13 = *(_QWORD *)(a3 + 8);
  v74 = &unk_1E5D29D70;
  v75 = v13;
  v77 = *(_QWORD *)(a3 + 24);
  v76 = v12;
  kaldi::CuVectorBase<float>::Set((uint64_t)&v74, *(float *)(a1 + 464));
  v14 = *(_DWORD *)(a3 + 16) - v12;
  *(_QWORD *)(a3 + 8) += 4 * v12;
  *(_DWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 192), a2, (uint64_t *)&v74);
  v15 = v74;
  v74 = 0;
  v16 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    v17 = v74;
    v74 = 0;
    if (v17)
      (*(void (**)(void *))(*(_QWORD *)v17 + 24))(v17);
  }
  v18 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20);
  v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 16) * v18;
  v20 = *(_QWORD *)(a3 + 8);
  v74 = &unk_1E5D29D70;
  v75 = v20;
  v77 = *(_QWORD *)(a3 + 24);
  v76 = v19;
  kaldi::CuVectorBase<float>::Set((uint64_t)&v74, *(float *)(a1 + 464));
  v21 = *(_DWORD *)(a3 + 16) - v19;
  *(_QWORD *)(a3 + 8) += 4 * v19;
  *(_DWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 200), a2, &v74);
  v22 = v74;
  v74 = 0;
  v23 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v22;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    v24 = v74;
    v74 = 0;
    if (v24)
      (*(void (**)(void *))(*(_QWORD *)v24 + 16))(v24);
  }
  v25 = *(_DWORD *)(*(_QWORD *)(a1 + 200) + 16);
  v26 = *(_QWORD *)(a3 + 8);
  v74 = &unk_1E5D29D70;
  v75 = v26;
  v77 = *(_QWORD *)(a3 + 24);
  v76 = v25;
  kaldi::CuVectorBase<float>::Set((uint64_t)&v74, *(float *)(a1 + 464));
  v27 = *(int *)(*(_QWORD *)(a1 + 200) + 16);
  v28 = *(_DWORD *)(a3 + 16) - v27;
  *(_QWORD *)(a3 + 8) += 4 * v27;
  *(_DWORD *)(a3 + 16) = v28;
  *(_QWORD *)(a3 + 24) = 0;
  if (*(_BYTE *)(a1 + 208))
  {
    kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 216), a2, (uint64_t *)&v74);
    v29 = v74;
    v74 = 0;
    v30 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v29;
    if (v30)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
      v31 = v74;
      v74 = 0;
      if (v31)
        (*(void (**)(void *))(*(_QWORD *)v31 + 24))(v31);
    }
    v32 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20);
    v33 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 16) * v32;
    v34 = *(_QWORD *)(a3 + 8);
    v74 = &unk_1E5D29D70;
    v75 = v34;
    v77 = *(_QWORD *)(a3 + 24);
    v76 = v33;
    kaldi::CuVectorBase<float>::Set((uint64_t)&v74, *(float *)(a1 + 464));
    v35 = *(_DWORD *)(a3 + 16) - v33;
    *(_QWORD *)(a3 + 8) += 4 * v33;
    *(_DWORD *)(a3 + 16) = v35;
    *(_QWORD *)(a3 + 24) = 0;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 232), a2, (uint64_t *)&v74);
    v36 = v74;
    v74 = 0;
    v37 = *(_QWORD *)(a1 + 232);
    *(_QWORD *)(a1 + 232) = v36;
    if (v37)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
      v38 = v74;
      v74 = 0;
      if (v38)
        (*(void (**)(void *))(*(_QWORD *)v38 + 24))(v38);
    }
    v39 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20);
    v40 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 16) * v39;
    v41 = *(_QWORD *)(a3 + 8);
    v74 = &unk_1E5D29D70;
    v75 = v41;
    v77 = *(_QWORD *)(a3 + 24);
    v76 = v40;
    kaldi::CuVectorBase<float>::Set((uint64_t)&v74, *(float *)(a1 + 468));
    v42 = *(_DWORD *)(a3 + 16) - v40;
    *(_QWORD *)(a3 + 8) += 4 * v40;
    *(_DWORD *)(a3 + 16) = v42;
    *(_QWORD *)(a3 + 24) = 0;
  }
  if (*(_BYTE *)(a1 + 528))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v74, "gradients_valid_ is thought to be false here");
    goto LABEL_68;
  }
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  if (a4[1] != *a4)
  {
    v43 = 0;
    while (1)
    {
      v44 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 536) + 8 * v43) + 20);
      if (v44 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20)
        || (v45 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 536) + 8 * v43) + 16),
            v45 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 16)))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v74, "input_weights_gradient_[ic]->NumRows() == InputWeights().NumRows() && input_weights_gradient_[ic]->NumCols() == InputWeights().NumCols()");
        goto LABEL_68;
      }
      v46 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * v43) + 20);
      if (v46 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20)
        || (v47 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * v43) + 16),
            v47 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 16)))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v74, "recurrent_weights_gradient_[ic]->NumRows() == RecurrentWeights().NumRows() && recurrent_weights_gradient_[ic]->NumCols() == RecurrentWeights().NumCols()");
        goto LABEL_68;
      }
      v48 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * v43) + 16);
      if (v48 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16))
        break;
      if (*(_BYTE *)(a1 + 208))
      {
        v49 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 584) + 8 * v43) + 20);
        if (v49 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20)
          || (v50 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 584) + 8 * v43) + 16),
              v50 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 16)))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(&v74, "peephole_weights_gradient_[ic]->NumRows() == PeepholeWeights().NumRows() && peephole_weights_gradient_[ic]->NumCols() == PeepholeWeights().NumCols()");
          goto LABEL_68;
        }
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v51 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 632) + 8 * v43) + 20);
        if (v51 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20)
          || (v52 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 632) + 8 * v43) + 16),
              v52 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 16)))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(&v74, "projection_weights_gradient_[ic]->NumRows() == ProjectionWeights().NumRows() && projection_weights_gradient_[ic]->NumCols() == ProjectionWeights().NumCols()");
          goto LABEL_68;
        }
      }
      v53 = *a4 + 32 * v43;
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 536) + 8 * v43), v53, (uint64_t *)&v74);
      v54 = *(_QWORD *)(a1 + 536);
      v55 = v74;
      v74 = 0;
      v56 = *(_QWORD *)(v54 + 8 * v43);
      *(_QWORD *)(v54 + 8 * v43) = v55;
      if (v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
      v57 = v74;
      v74 = 0;
      if (v57)
        (*(void (**)(void *))(*(_QWORD *)v57 + 24))(v57);
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 560) + 8 * v43), v53, (uint64_t *)&v74);
      v58 = *(_QWORD *)(a1 + 560);
      v59 = v74;
      v74 = 0;
      v60 = *(_QWORD *)(v58 + 8 * v43);
      *(_QWORD *)(v58 + 8 * v43) = v59;
      if (v60)
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
      v61 = v74;
      v74 = 0;
      if (v61)
        (*(void (**)(void *))(*(_QWORD *)v61 + 24))(v61);
      kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 608) + 8 * v43), v53, &v74);
      v62 = *(_QWORD *)(a1 + 608);
      v63 = v74;
      v74 = 0;
      v64 = *(_QWORD *)(v62 + 8 * v43);
      *(_QWORD *)(v62 + 8 * v43) = v63;
      if (v64)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 16))(v64);
      v65 = v74;
      v74 = 0;
      if (v65)
        (*(void (**)(void *))(*(_QWORD *)v65 + 16))(v65);
      if (*(_BYTE *)(a1 + 208))
      {
        kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v43), v53, (uint64_t *)&v74);
        v66 = *(_QWORD *)(a1 + 584);
        v67 = v74;
        v74 = 0;
        v68 = *(_QWORD *)(v66 + 8 * v43);
        *(_QWORD *)(v66 + 8 * v43) = v67;
        if (v68)
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68);
        v69 = v74;
        v74 = 0;
        if (v69)
          (*(void (**)(void *))(*(_QWORD *)v69 + 24))(v69);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 632) + 8 * v43), v53, (uint64_t *)&v74);
        v70 = *(_QWORD *)(a1 + 632);
        v71 = v74;
        v74 = 0;
        v72 = *(_QWORD *)(v70 + 8 * v43);
        *(_QWORD *)(v70 + 8 * v43) = v71;
        if (v72)
          (*(void (**)(uint64_t))(*(_QWORD *)v72 + 24))(v72);
        v73 = v74;
        v74 = 0;
        if (v73)
          (*(void (**)(void *))(*(_QWORD *)v73 + 24))(v73);
      }
      if (++v43 >= (unint64_t)((uint64_t)(a4[1] - *a4) >> 5))
        goto LABEL_60;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v74, "bias_gradient_[ic]->Dim() == Bias().Dim()");
LABEL_68:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v74);
  }
LABEL_60:
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Done vectorization of lstm component", 36);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v74);
  }
}

void sub_1ADA80EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)operator new();
  kaldi::CuSubVector<float>::CuSubVector(v6, *a1, a2);
  *a3 = v6;
  result = *a1;
  *a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_1ADA80F70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs((uint64_t)a1 + *(_QWORD *)(*a1 - 64), a2, a3, a4);
}

_QWORD *std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,kaldi::CuVector<float>*,kaldi::CuVector<float>*,kaldi::CuVector<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADA81008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,kaldi::CuVector<float>*,kaldi::CuVector<float>*,kaldi::CuVector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = (_QWORD *)(a4 + v7);
      v8[2] = 0;
      v8[3] = 0;
      *v8 = &unk_1E5D341C8;
      v8[1] = 0;
      v8[3] = *(_QWORD *)(a2 + v7 + 24);
      kaldi::CuVector<float>::Resize(a4 + v7, *(unsigned int *)(a2 + v7 + 16), 1);
      kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)(a4 + v7), a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADA810C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 32;
    do
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + v2) + 8))(v4 + v2);
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1ADA8115C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *kaldi::CuSubVector<float>::CuSubVector(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v11;
  _QWORD v12[34];

  a1[2] = 0;
  a1[3] = 0;
  *a1 = &unk_1E5D29D70;
  a1[1] = 0;
  v5 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a3 + 16) < v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Insufficient storage area: ", 27);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" needed: ", 9);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  v7 = *(_QWORD *)(a3 + 24);
  a1[1] = *(_QWORD *)(a3 + 8);
  *((_DWORD *)a1 + 4) = v5;
  a1[3] = v7;
  kaldi::CuVectorBase<float>::CopyFromVec(a1, a2);
  v8 = *(int *)(a2 + 16);
  v9 = *(_DWORD *)(a3 + 16) - v8;
  *(_QWORD *)(a3 + 8) += 4 * v8;
  *(_DWORD *)(a3 + 16) = v9;
  *(_QWORD *)(a3 + 24) = 0;
  return a1;
}

void std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    v24 = v4;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    v23 = v16;
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    *((_QWORD *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v17 = (char *)*((_QWORD *)&v22 + 1);
      v16 = v23;
    }
    v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v16;
    v23 = v20;
    v21 = v19;
    std::__split_buffer<std::unique_ptr<kaldi::CuVectorBase<float>>>::~__split_buffer((uint64_t)&v21);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<kaldi::CuVectorBase<float>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t quasar::Decodable::Decodable(uint64_t a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *(_QWORD *)a1 = &unk_1E5D3BD68;
  v3 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  return a1;
}

uint64_t quasar::Decodable::init(quasar::Decodable *this, std::string *a2)
{
  size_t v4;
  void **v5;
  char *v6;
  uint64_t ModelLoader;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *__p[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if (*((_DWORD *)this + 26))
  {
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameters for ", 15);
    v12 = *((_QWORD *)this + 1);
    v11 = (char *)this + 8;
    v10 = v12;
    v13 = v11[23];
    if (v13 >= 0)
      v14 = (uint64_t)v11;
    else
      v14 = v10;
    if (v13 >= 0)
      v15 = v11[23];
    else
      v15 = *((_QWORD *)v11 + 1);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, " have already been registered.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (*((char *)this + 31) >= 0)
    v4 = *((unsigned __int8 *)this + 31);
  else
    v4 = *((_QWORD *)this + 2);
  v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 1);
  if (SBYTE7(v18) < 0)
    v5 = (void **)__p[0];
  if (v4)
  {
    if (*((char *)this + 31) >= 0)
      v6 = (char *)this + 8;
    else
      v6 = (char *)*((_QWORD *)this + 1);
    memmove(v5, v6, v4);
  }
  *(_WORD *)((char *)v5 + v4) = 46;
  quasar::SystemConfig::setPrefix(a2, (const std::string *)__p);
  if (SBYTE7(v18) < 0)
    operator delete(__p[0]);
  (**(void (***)(quasar::Decodable *, std::string *))this)(this, a2);
  quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)this + 8, 0, 0);
  *((_DWORD *)this + 26) = 1;
  ModelLoader = quasar::SystemConfig::getModelLoader((quasar::SystemConfig *)a2);
  return (*(uint64_t (**)(quasar::Decodable *, uint64_t))(*(_QWORD *)this + 8))(this, ModelLoader);
}

void sub_1ADA8165C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::Decodable::~Decodable(void **this)
{
  *this = &unk_1E5D3BD68;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  kaldi::Vector<float>::Destroy((uint64_t)(this + 7));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t quasar::Decodable::createDecodable(quasar::Decodable *this, kaldi::OnlineFeatureMatrix *a2)
{
  _QWORD *v3;
  int v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _OWORD v9[17];

  if (*((_DWORD *)this + 26) != 1)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Must first call init() for ", 27);
    v4 = *((char *)this + 31);
    if (v4 >= 0)
      v5 = (char *)this + 8;
    else
      v5 = (char *)*((_QWORD *)this + 1);
    if (v4 >= 0)
      v6 = *((unsigned __int8 *)this + 31);
    else
      v6 = *((_QWORD *)this + 2);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " before calling createDecodable().");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
  }
  return (*(uint64_t (**)(quasar::Decodable *, kaldi::OnlineFeatureMatrix *))(*(_QWORD *)this + 16))(this, a2);
}

void quasar::Decodable::createDecodable(std::string *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  std::string *v6;
  std::string::size_type size;
  std::string::size_type v8;
  _BYTE *v9;
  uint64_t v11;
  BOOL v19;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v29;
  unint64_t *v30;
  uint64_t v31;
  int v32;
  unint64_t *v34;
  void *exception;
  std::string *v36;
  __int128 v37;
  int v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  _BYTE v49[32];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;

  if (quasar::gLogLevel >= 5)
  {
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    memset(v49, 0, sizeof(v49));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Building Decodable ", 19);
    v5 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v5 >= 0)
      v6 = this;
    else
      v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v5 >= 0)
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    else
      size = this->__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, size);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v49);
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v49, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)v49 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
    *(_QWORD *)&v49[16] = *((_QWORD *)&this->__r_.__value_.__l + 2);
  }
  v8 = std::string::rfind(this, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v8 != -1)
  {
    std::string::basic_string(&v48, this, v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v47);
    if ((v49[23] & 0x80000000) != 0)
      operator delete(*(void **)v49);
    *(std::string *)v49 = v48;
  }
  *a2 = 0;
  a2[1] = 0;
  if ((v49[23] & 0x80) == 0)
  {
    v9 = v49;
    switch(v49[23])
    {
      case 5:
        goto LABEL_92;
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xB:
      case 0xC:
        goto LABEL_119;
      case 0xA:
        goto LABEL_106;
      case 0xD:
        if (*(_QWORD *)v49 != 0x732D78697274616DLL || *(_QWORD *)&v49[5] != 0x64656C6163732D78)
          goto LABEL_119;
        goto LABEL_74;
      case 0xE:
        if (*(_QWORD *)v49 == 0x696C6E6F2D637463 && *(_QWORD *)&v49[6] == 0x64776B2D656E696CLL)
          goto LABEL_97;
        if (v49[23] == 10)
        {
          v9 = v49;
          goto LABEL_106;
        }
        if (v49[23] != 5)
          goto LABEL_119;
LABEL_92:
        if (*(_DWORD *)v49 != 1835890020 || v49[4] != 121)
        {
LABEL_119:
          exception = __cxa_allocate_exception(0x20uLL);
          std::operator+<char>();
          v36 = std::string::append(&v45, "\" in \"");
          v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          v46.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          v38 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
          if (v38 >= 0)
            v39 = this;
          else
            v39 = (std::string *)this->__r_.__value_.__r.__words[0];
          if (v38 >= 0)
            v40 = HIBYTE(this->__r_.__value_.__r.__words[2]);
          else
            v40 = this->__r_.__value_.__l.__size_;
          v41 = std::string::append(&v46, (const std::string::value_type *)v39, v40);
          v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v47.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          v43 = std::string::append(&v47, "\"");
          v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v48.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          quasar::PTree::Error::Error(exception, &v48);
        }
        goto LABEL_97;
      default:
        if (v49[23] != 20)
        {
          if (v49[23] != 23)
            goto LABEL_119;
          v19 = *(_QWORD *)v49 == 0x732D78697274616DLL && *(_QWORD *)&v49[8] == 0x616D2D64656C6163;
          if (!v19 || *(_QWORD *)&v49[15] != 0x6D742D6465707061)
            goto LABEL_119;
          goto LABEL_70;
        }
        if (*(_QWORD *)v49 != 0x732D78697274616DLL
          || *(_QWORD *)&v49[8] != 0x616D2D64656C6163
          || *(_DWORD *)&v49[16] != 1684369520)
        {
          goto LABEL_119;
        }
        break;
    }
    goto LABEL_101;
  }
  v11 = *(_QWORD *)&v49[8];
  if (*(_QWORD *)&v49[8] == 13
    && **(_QWORD **)v49 == 0x732D78697274616DLL
    && *(_QWORD *)(*(_QWORD *)v49 + 5) == 0x64656C6163732D78)
  {
LABEL_74:
    std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableMatrixScaledDecodable,std::allocator<quasar::OnlineDecodableMatrixScaledDecodable>,std::string const&,void>((__int128 *)this, &v48);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v48);
    v21 = (std::__shared_weak_count *)v48.__r_.__value_.__l.__size_;
    if (!v48.__r_.__value_.__l.__size_)
      goto LABEL_116;
    v24 = (unint64_t *)(v48.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v24);
    while (__stlxr(v23 - 1, v24));
    goto LABEL_114;
  }
  if (*(_QWORD *)&v49[8] == 20)
  {
    if (**(_QWORD **)v49 == 0x732D78697274616DLL
      && *(_QWORD *)(*(_QWORD *)v49 + 8) == 0x616D2D64656C6163
      && *(_DWORD *)(*(_QWORD *)v49 + 16) == 1684369520)
    {
LABEL_101:
      std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableMatrixScaledMappedDecodable,std::allocator<quasar::OnlineDecodableMatrixScaledMappedDecodable>,std::string const&,void>((__int128 *)this, &v48);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v48);
      v21 = (std::__shared_weak_count *)v48.__r_.__value_.__l.__size_;
      if (!v48.__r_.__value_.__l.__size_)
        goto LABEL_116;
      v30 = (unint64_t *)(v48.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v30);
      while (__stlxr(v23 - 1, v30));
      goto LABEL_114;
    }
    v11 = *(_QWORD *)&v49[8];
  }
  if (v11 == 23)
  {
    if (**(_QWORD **)v49 == 0x732D78697274616DLL
      && *(_QWORD *)(*(_QWORD *)v49 + 8) == 0x616D2D64656C6163
      && *(_QWORD *)(*(_QWORD *)v49 + 15) == 0x6D742D6465707061)
    {
LABEL_70:
      std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableMatrixScaledMappedTmDecodable,std::allocator<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>,std::string const&,void>((__int128 *)this, &v48);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v48);
      v21 = (std::__shared_weak_count *)v48.__r_.__value_.__l.__size_;
      if (!v48.__r_.__value_.__l.__size_)
        goto LABEL_116;
      v22 = (unint64_t *)(v48.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      goto LABEL_114;
    }
    v11 = *(_QWORD *)&v49[8];
  }
  if (v11 == 14)
  {
    if (**(_QWORD **)v49 == 0x696C6E6F2D637463 && *(_QWORD *)(*(_QWORD *)v49 + 6) == 0x64776B2D656E696CLL)
      goto LABEL_97;
    v11 = *(_QWORD *)&v49[8];
  }
  if (v11 == 5)
  {
    if (**(_DWORD **)v49 != 1835890020 || *(_BYTE *)(*(_QWORD *)v49 + 4) != 121)
    {
      v11 = *(_QWORD *)&v49[8];
      goto LABEL_58;
    }
LABEL_97:
    std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableIdenticalMatrixDecodable,std::allocator<quasar::OnlineDecodableIdenticalMatrixDecodable>,std::string const&,void>((__int128 *)this, &v48);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v48);
    v21 = (std::__shared_weak_count *)v48.__r_.__value_.__l.__size_;
    if (!v48.__r_.__value_.__l.__size_)
      goto LABEL_116;
    v29 = (unint64_t *)(v48.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v29);
    while (__stlxr(v23 - 1, v29));
    goto LABEL_114;
  }
LABEL_58:
  if (v11 != 10)
    goto LABEL_119;
  v9 = *(_BYTE **)v49;
LABEL_106:
  v31 = *(_QWORD *)v9;
  v32 = *((unsigned __int16 *)v9 + 4);
  if (v31 != 0x616C2D3174656E6ELL || v32 != 31098)
    goto LABEL_119;
  std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableNnet1LazyDecodable,std::allocator<quasar::OnlineDecodableNnet1LazyDecodable>,std::string const&,void>((__int128 *)this, &v48);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v48);
  v21 = (std::__shared_weak_count *)v48.__r_.__value_.__l.__size_;
  if (v48.__r_.__value_.__l.__size_)
  {
    v34 = (unint64_t *)(v48.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v34);
    while (__stlxr(v23 - 1, v34));
LABEL_114:
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
LABEL_116:
  if ((v49[23] & 0x80000000) != 0)
    operator delete(*(void **)v49);
}

void sub_1ADA81DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void *v43;
  int v44;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v44 & 1) == 0)
    {
LABEL_12:
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v42);
      if (a42 < 0)
        operator delete(a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v43);
  goto LABEL_12;
}

float quasar::Decodable::getAmScale(quasar::Decodable *this)
{
  return *((float *)this + 12);
}

uint64_t std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableMatrixScaledDecodable,std::allocator<quasar::OnlineDecodableMatrixScaledDecodable>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0xB8uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableMatrixScaledDecodable>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1ADA81F28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableMatrixScaledDecodable>,0>(uint64_t a1, __int128 *a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E5D44DA0;
  *(_QWORD *)(a1 + 8) = 0;
  quasar::Decodable::Decodable(a1 + 24, a2);
  *(_QWORD *)(a1 + 24) = &unk_1E5D3B3B0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return a1;
}

void sub_1ADA81F94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledDecodable>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

uint64_t quasar::OnlineDecodableMatrixScaledDecodable::registerParams(quasar::OnlineDecodableMatrixScaledDecodable *this, quasar::SystemConfig *a2)
{
  char *v4;
  _DWORD *v5;
  char *v6;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "am-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Acoustic model (transition model) filename (only used for lattice stuff)");
  v4 = (char *)this + 80;
  (*(void (**)(quasar::SystemConfig *, void **, char *, void **))(*(_QWORD *)a2 + 40))(a2, v10, (char *)this + 80, __p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(v10, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic likelihoods");
  v5 = (_DWORD *)((char *)this + 48);
  (*(void (**)(quasar::SystemConfig *, void **, char *, void **))(*(_QWORD *)a2 + 24))(a2, v10, (char *)this + 48, __p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(v10, "tid2pdf-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Text file of ints representing PDF IDs for transition IDs 0, 1, 2, ... ");
  v6 = (char *)this + 112;
  (*(void (**)(quasar::SystemConfig *, void **, char *, void **))(*(_QWORD *)a2 + 40))(a2, v10, v6, __p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  MEMORY[0x1AF44C914](v4, "");
  *v5 = 1036831949;
  return MEMORY[0x1AF44C914](v6, "");
}

void sub_1ADA8217C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineDecodableMatrixScaledDecodable::finishInit(quasar::OnlineDecodableMatrixScaledDecodable *this, quasar::ModelLoader *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  _OWORD v7[17];
  __int128 v8;
  _OWORD v9[25];
  _QWORD v10[21];

  v10[20] = *MEMORY[0x1E0C80C00];
  quasar::ModelLoader::readTransitionModel((uint64_t)a2, (unsigned __int8 *)this + 80, 1, (uint64_t *)&v8);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 32, &v8);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    memset(v9, 0, 256);
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Read transModel", 15);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v8);
  }
  std::ifstream::basic_ifstream(&v8);
  kaldi::ReadIntegerVector<int>(&v8, 0, (std::vector<int> *)((char *)this + 136), 0, 0, 0, 0);
  if (quasar::gLogLevel >= 5)
  {
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Using TID2PDF file", 18);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v7);
  }
  *(_QWORD *)&v8 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)&v9[-1] + *(_QWORD *)(v8 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v9);
  std::istream::~istream();
  return MEMORY[0x1AF44D094](v10);
}

void sub_1ADA82398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  std::ifstream::~ifstream(&a43);
  _Unwind_Resume(a1);
}

void quasar::OnlineDecodableMatrixScaledDecodable::createDecodableImpl(quasar::OnlineDecodableMatrixScaledDecodable *this@<X0>, kaldi::OnlineFeatureMatrix *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _OWORD v7[17];

  v6 = operator new();
  kaldi::OnlineDecodableMatrixScaled::OnlineDecodableMatrixScaled(v6, (uint64_t)this + 136, (uint64_t)a2, *((float *)this + 12));
  std::shared_ptr<kaldi::DecodableInterface>::shared_ptr[abi:ne180100]<kaldi::OnlineDecodableMatrixScaled,void>(a3, v6);
  if (quasar::gLogLevel >= 5)
  {
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Created OnlineDecodableMatrixScaled decodable", 45);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v7);
  }
}

void sub_1ADA824AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void quasar::OnlineDecodableMatrixScaledDecodable::~OnlineDecodableMatrixScaledDecodable(quasar::OnlineDecodableMatrixScaledDecodable *this)
{
  void *v2;

  *(_QWORD *)this = &unk_1E5D3B3B0;
  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
  {
    *((_QWORD *)this + 18) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  quasar::Decodable::~Decodable((void **)this);
}

{
  void *v2;

  *(_QWORD *)this = &unk_1E5D3B3B0;
  v2 = (void *)*((_QWORD *)this + 17);
  if (v2)
  {
    *((_QWORD *)this + 18) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  quasar::Decodable::~Decodable((void **)this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineDecodableMatrixScaled::OnlineDecodableMatrixScaled(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  *(_QWORD *)a1 = &off_1E5D2ACD0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 8), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(float *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

void sub_1ADA82624(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<kaldi::DecodableInterface>::shared_ptr[abi:ne180100]<kaldi::OnlineDecodableMatrixScaled,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D45CB8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADA82690(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 96))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<kaldi::OnlineDecodableMatrixScaled *,std::shared_ptr<kaldi::DecodableInterface>::__shared_ptr_default_delete<kaldi::DecodableInterface,kaldi::OnlineDecodableMatrixScaled>,std::allocator<kaldi::OnlineDecodableMatrixScaled>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<kaldi::OnlineDecodableMatrixScaled *,std::shared_ptr<kaldi::DecodableInterface>::__shared_ptr_default_delete<kaldi::DecodableInterface,kaldi::OnlineDecodableMatrixScaled>,std::allocator<kaldi::OnlineDecodableMatrixScaled>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::OnlineDecodableMatrixScaled *,std::shared_ptr<kaldi::DecodableInterface>::__shared_ptr_default_delete<kaldi::DecodableInterface,kaldi::OnlineDecodableMatrixScaled>,std::allocator<kaldi::OnlineDecodableMatrixScaled>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableMatrixScaledMappedDecodable,std::allocator<quasar::OnlineDecodableMatrixScaledMappedDecodable>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0xC8uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableMatrixScaledMappedDecodable>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1ADA82774(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableMatrixScaledMappedDecodable>,0>(uint64_t a1, __int128 *a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E5D44E80;
  *(_QWORD *)(a1 + 8) = 0;
  quasar::Decodable::Decodable(a1 + 24, a2);
  *(_QWORD *)(a1 + 24) = &unk_1E5D3B738;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 2139095040;
  *(_BYTE *)(a1 + 192) = 0;
  return a1;
}

void sub_1ADA827F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44E80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedDecodable>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

uint64_t quasar::OnlineDecodableMatrixScaledMappedDecodable::registerParams(quasar::OnlineDecodableMatrixScaledMappedDecodable *this, quasar::SystemConfig *a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t result;
  std::string v7;
  void *__p[2];
  std::string::size_type v9;

  std::operator+<char>();
  v4 = std::string::append(&v7, "\"");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v9 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 4, 0, (uint64_t)__p);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "am-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Acoustic model (transition model) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 80, (uint64_t)&v7, 1, 4, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Scaling factor for acoustic likelihoods");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 48, (uint64_t)&v7, 0, 4, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ilabel-score-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "The ilabel score file for dynamic T.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 112, (uint64_t)&v7, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "internal-lm-substraction");
  std::string::basic_string[abi:ne180100]<0>(&v7, "When this value is true, the decoder will substract internal lm score from am model.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 160, (uint64_t)&v7, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cost-cutoff");
  std::string::basic_string[abi:ne180100]<0>(&v7, "The cost cutoff for the am neg loglikelihood. It is applied before am scaling.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 164, (uint64_t)&v7, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "skip-pdf-size-check");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Skip pdf size check when the decodable is just a placeholder");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 168, (uint64_t)&v7, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  MEMORY[0x1AF44C914]((char *)this + 80, "");
  result = MEMORY[0x1AF44C914]((char *)this + 112, "");
  *((_DWORD *)this + 12) = 1036831949;
  return result;
}

void sub_1ADA82BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1ADA82C20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    JUMPOUT(0x1ADA82C14);
  JUMPOUT(0x1ADA82C18);
}

void quasar::OnlineDecodableMatrixScaledMappedDecodable::finishInit(quasar::OnlineDecodableMatrixScaledMappedDecodable *this, quasar::ModelLoader *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  __int128 v7[17];

  quasar::ModelLoader::readTransitionModel((uint64_t)a2, (unsigned __int8 *)this + 80, 1, (uint64_t *)v7);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 32, v7);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v7[0] + 1);
  if (*((_QWORD *)&v7[0] + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v7[0] + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Read transModel", 15);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v7);
  }
  if (*((char *)this + 135) < 0)
  {
    if (!*((_QWORD *)this + 15))
      return;
    goto LABEL_12;
  }
  if (*((_BYTE *)this + 135))
  {
LABEL_12:
    *(_QWORD *)&v7[0] = 0;
    kaldi::Input::OpenInternal(v7, (uint64_t)this + 112, 0, 0);
    v6 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v7);
    kaldi::Vector<float>::Read((uint64_t)this + 136, v6, 0, 0);
    kaldi::Input::Close((kaldi::Input *)v7);
    kaldi::Input::~Input((kaldi::Input *)v7);
  }
}

void sub_1ADA82D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

double quasar::OnlineDecodableMatrixScaledMappedDecodable::createDecodableImpl@<D0>(quasar::OnlineDecodableMatrixScaledMappedDecodable *this@<X0>, kaldi::OnlineFeatureMatrix *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  double result;
  _OWORD v6[17];
  double v7[3];

  v4 = *((_QWORD *)this + 4);
  *(_QWORD *)&v6[0] = a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineDecodableMatrixScaledMapped,std::allocator<kaldi::OnlineDecodableMatrixScaledMapped>,kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,BOOL &,float &,kaldi::Vector<float> &,BOOL &,void>(v4, (float *)this + 12, (kaldi::OnlineFeatureMatrix **)v6, (char *)this + 160, (float *)this + 41, (uint64_t)this + 136, (char *)this + 168, v7);
  if (quasar::gLogLevel >= 5)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Created OnlineDecodableMatrixScaledMapped decodable", 51);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v6);
  }
  result = v7[0];
  *a3 = *(_OWORD *)v7;
  return result;
}

void sub_1ADA82E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v9 - 48);
  _Unwind_Resume(a1);
}

void quasar::OnlineDecodableMatrixScaledMappedDecodable::~OnlineDecodableMatrixScaledMappedDecodable(void **this)
{
  *this = &unk_1E5D3B738;
  kaldi::Vector<float>::Destroy((uint64_t)(this + 17));
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  quasar::Decodable::~Decodable(this);
}

{
  *this = &unk_1E5D3B738;
  kaldi::Vector<float>::Destroy((uint64_t)(this + 17));
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  quasar::Decodable::~Decodable(this);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineDecodableMatrixScaledMapped,std::allocator<kaldi::OnlineDecodableMatrixScaledMapped>,kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,BOOL &,float &,kaldi::Vector<float> &,BOOL &,void>@<X0>(uint64_t a1@<X1>, float *a2@<X2>, kaldi::OnlineFeatureMatrix **a3@<X3>, char *a4@<X4>, float *a5@<X5>, uint64_t a6@<X6>, char *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMapped>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,BOOL &,float &,kaldi::Vector<float> &,BOOL &,std::allocator<kaldi::OnlineDecodableMatrixScaledMapped>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1ADA82FC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMapped>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,BOOL &,float &,kaldi::Vector<float> &,BOOL &,std::allocator<kaldi::OnlineDecodableMatrixScaledMapped>,0>(_QWORD *a1, uint64_t a2, float *a3, kaldi::OnlineFeatureMatrix **a4, char *a5, float *a6, uint64_t a7, char *a8)
{
  char v10;

  a1[2] = 0;
  *a1 = &unk_1E5D41B18;
  a1[1] = 0;
  std::allocator<kaldi::OnlineDecodableMatrixScaledMapped>::construct[abi:ne180100]<kaldi::OnlineDecodableMatrixScaledMapped,kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,BOOL &,float &,kaldi::Vector<float> &,BOOL &>((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1ADA83044(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMapped>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41B18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMapped>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41B18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMapped>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

void std::allocator<kaldi::OnlineDecodableMatrixScaledMapped>::construct[abi:ne180100]<kaldi::OnlineDecodableMatrixScaledMapped,kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,BOOL &,float &,kaldi::Vector<float> &,BOOL &>(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, kaldi::OnlineFeatureMatrix **a5, char *a6, float *a7, uint64_t a8, char *a9)
{
  float v12;
  kaldi::OnlineFeatureMatrix *v13;
  char v14;
  float v15;
  void *v16[3];

  v12 = *a4;
  v13 = *a5;
  v14 = *a6;
  v15 = *a7;
  memset(v16, 0, sizeof(v16));
  kaldi::Vector<float>::Resize(v16, *(unsigned int *)(a8 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v16, (const void **)a8);
  kaldi::OnlineDecodableMatrixScaledMapped::OnlineDecodableMatrixScaledMapped(a2, a3, v13, v14, (uint64_t)v16, *a9, v12, v15);
  kaldi::Vector<float>::Destroy((uint64_t)v16);
}

void sub_1ADA8315C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineDecodableMatrixScaledMapped::OnlineDecodableMatrixScaledMapped(uint64_t a1, uint64_t a2, kaldi::OnlineFeatureMatrix *a3, char a4, uint64_t a5, char a6, float a7, float a8)
{
  uint64_t v13;
  int v14;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD v18[34];

  *(_QWORD *)a1 = &off_1E5D2AF08;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(float *)(a1 + 24) = a7;
  *(_BYTE *)(a1 + 28) = a4;
  *(float *)(a1 + 32) = a8;
  *(_QWORD *)(a1 + 40) = 0;
  v13 = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  kaldi::Vector<float>::Resize((void **)(a1 + 40), *(unsigned int *)(a5 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec(v13, (const void **)a5);
  v14 = *((_DWORD *)a3 + 6);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 64) = v14;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 124) = -1;
  *(_BYTE *)(a1 + 128) = kaldi::OnlineFeatureMatrix::HasSilencePosterior(a3);
  *(_BYTE *)(a1 + 129) = kaldi::OnlineFeatureMatrix::HasEndpointerScore(a3);
  if ((a6 & 1) == 0 && *((_DWORD *)a3 + 6) < *(_DWORD *)(a2 + 240))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"OnlineDecodableMatrixScaledMapped: mismatch, matrix has ", 56);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" rows but transition-model has ", 31);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" pdf-ids.", 9);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  return a1;
}

void sub_1ADA832C0(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  uint64_t v2;
  uint64_t v3;

  kaldi::Vector<float>::Destroy(v3 + 24);
  kaldi::Vector<float>::Destroy(v3);
  kaldi::Vector<float>::Destroy(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableMatrixScaledMappedTmDecodable,std::allocator<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x88uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADA83348(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44EB8;
  a1[1] = 0;
  quasar::Decodable::Decodable((uint64_t)(a1 + 3), a2);
  a1[3] = &unk_1E5D3B770;
  return a1;
}

void sub_1ADA833A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

uint64_t quasar::OnlineDecodableMatrixScaledMappedTmDecodable::registerParams(quasar::OnlineDecodableMatrixScaledMappedTmDecodable *this, quasar::SystemConfig *a2)
{
  std::string *v4;
  __int128 v5;
  char *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t result;
  std::string v10;
  void *__p[2];
  std::string::size_type v12;

  std::operator+<char>();
  v4 = std::string::append(&v10, "\"");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 6, 0, (uint64_t)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "am-file");
  std::string::basic_string[abi:ne180100]<0>(&v10, "Acoustic model (transition model) filename");
  v6 = (char *)this + 80;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 80, (uint64_t)&v10, 1, 6, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(&v10, "Scaling factor for acoustic likelihoods");
  v7 = (_DWORD *)((char *)this + 48);
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 48, (uint64_t)&v10, 0, 6, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "tm-weight");
  std::string::basic_string[abi:ne180100]<0>(&v10, "Weight factor for tm likelihoods");
  v8 = (_DWORD *)((char *)this + 108);
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)v8, (uint64_t)&v10, 0, 6, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  result = MEMORY[0x1AF44C914](v6, "");
  *v7 = 1036831949;
  *v8 = 1065353216;
  return result;
}

void sub_1ADA83624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineDecodableMatrixScaledMappedTmDecodable::finishInit(quasar::OnlineDecodableMatrixScaledMappedTmDecodable *this, quasar::ModelLoader *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6[17];

  quasar::ModelLoader::readTransitionModel((uint64_t)a2, (unsigned __int8 *)this + 80, 1, (uint64_t *)v6);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 32, v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6[0] + 1);
  if (*((_QWORD *)&v6[0] + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6[0] + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Read transModel", 15);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v6);
  }
}

void sub_1ADA83774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

double quasar::OnlineDecodableMatrixScaledMappedTmDecodable::createDecodableImpl@<D0>(quasar::OnlineDecodableMatrixScaledMappedTmDecodable *this@<X0>, kaldi::OnlineFeatureMatrix *a2@<X1>, _OWORD *a3@<X8>)
{
  const kaldi::TransitionModel *v4;
  double result;
  _OWORD v6[17];
  double v7[3];

  v4 = (const kaldi::TransitionModel *)*((_QWORD *)this + 4);
  *(_QWORD *)&v6[0] = a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineDecodableMatrixScaledMappedTm,std::allocator<kaldi::OnlineDecodableMatrixScaledMappedTm>,kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,float &,void>(v4, (float *)this + 12, (kaldi::OnlineFeatureMatrix **)v6, (float *)this + 27, v7);
  if (quasar::gLogLevel >= 5)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Created OnlineDecodableMatrixScaledMappedTm decodable", 53);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v6);
  }
  result = v7[0];
  *a3 = *(_OWORD *)v7;
  return result;
}

void sub_1ADA83838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v9 - 48);
  _Unwind_Resume(a1);
}

void quasar::OnlineDecodableMatrixScaledMappedTmDecodable::~OnlineDecodableMatrixScaledMappedTmDecodable(void **this)
{
  quasar::Decodable::~Decodable(this);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineDecodableMatrixScaledMappedTm,std::allocator<kaldi::OnlineDecodableMatrixScaledMappedTm>,kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,float &,void>@<X0>(const kaldi::TransitionModel *a1@<X1>, float *a2@<X2>, kaldi::OnlineFeatureMatrix **a3@<X3>, float *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMappedTm>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,float &,std::allocator<kaldi::OnlineDecodableMatrixScaledMappedTm>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADA838E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMappedTm>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,float &,std::allocator<kaldi::OnlineDecodableMatrixScaledMappedTm>,0>(_QWORD *a1, const kaldi::TransitionModel *a2, float *a3, kaldi::OnlineFeatureMatrix **a4, float *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41B50;
  a1[1] = 0;
  kaldi::OnlineDecodableMatrixScaledMappedTm::OnlineDecodableMatrixScaledMappedTm((kaldi::OnlineDecodableMatrixScaledMappedTm *)(a1 + 3), a2, *a3, *a4, *a5);
  return a1;
}

void sub_1ADA83940(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMappedTm>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41B50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMappedTm>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41B50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMappedTm>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

kaldi::OnlineDecodableMatrixScaledMappedTm *kaldi::OnlineDecodableMatrixScaledMappedTm::OnlineDecodableMatrixScaledMappedTm(kaldi::OnlineDecodableMatrixScaledMappedTm *this, const kaldi::TransitionModel *a2, float a3, kaldi::OnlineFeatureMatrix *a4, float a5)
{
  _QWORD v9[3];

  memset(v9, 0, sizeof(v9));
  kaldi::OnlineDecodableMatrixScaledMapped::OnlineDecodableMatrixScaledMapped((uint64_t)this, (uint64_t)a2, a4, 0, (uint64_t)v9, 0, a3, INFINITY);
  kaldi::Vector<float>::Destroy((uint64_t)v9);
  *(_QWORD *)this = &unk_1E5D2B020;
  *((float *)this + 33) = a5;
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 60);
  return this;
}

void sub_1ADA83A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableIdenticalMatrixDecodable,std::allocator<quasar::OnlineDecodableIdenticalMatrixDecodable>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x88uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineDecodableIdenticalMatrixDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableIdenticalMatrixDecodable>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADA83A88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineDecodableIdenticalMatrixDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableIdenticalMatrixDecodable>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44E48;
  a1[1] = 0;
  quasar::Decodable::Decodable((uint64_t)(a1 + 3), a2);
  a1[3] = &unk_1E5D3B620;
  return a1;
}

void sub_1ADA83AE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableIdenticalMatrixDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableIdenticalMatrixDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44E48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDecodableIdenticalMatrixDecodable>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

void quasar::OnlineDecodableIdenticalMatrixDecodable::createDecodableImpl(kaldi::OnlineFeatureMatrix *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _OWORD v6[17];

  v5 = operator new();
  *(_QWORD *)v5 = &off_1E5D2ADD0;
  *(_QWORD *)(v5 + 8) = a1;
  *(_DWORD *)(v5 + 16) = *((_DWORD *)a1 + 6);
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  std::shared_ptr<kaldi::DecodableInterface>::shared_ptr[abi:ne180100]<kaldi::OnlineDecodableIdenticalMatrix,void>(a2, v5);
  if (quasar::gLogLevel >= 5)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Created OnlineDecodableIdenticalMatrix decodable", 48);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v6);
  }
}

void sub_1ADA83C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void quasar::OnlineDecodableIdenticalMatrixDecodable::~OnlineDecodableIdenticalMatrixDecodable(void **this)
{
  quasar::Decodable::~Decodable(this);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::shared_ptr<kaldi::DecodableInterface>::shared_ptr[abi:ne180100]<kaldi::OnlineDecodableIdenticalMatrix,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D45CF0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADA83CD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 96))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<kaldi::OnlineDecodableIdenticalMatrix *,std::shared_ptr<kaldi::DecodableInterface>::__shared_ptr_default_delete<kaldi::DecodableInterface,kaldi::OnlineDecodableIdenticalMatrix>,std::allocator<kaldi::OnlineDecodableIdenticalMatrix>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<kaldi::OnlineDecodableIdenticalMatrix *,std::shared_ptr<kaldi::DecodableInterface>::__shared_ptr_default_delete<kaldi::DecodableInterface,kaldi::OnlineDecodableIdenticalMatrix>,std::allocator<kaldi::OnlineDecodableIdenticalMatrix>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::OnlineDecodableIdenticalMatrix *,std::shared_ptr<kaldi::DecodableInterface>::__shared_ptr_default_delete<kaldi::DecodableInterface,kaldi::OnlineDecodableIdenticalMatrix>,std::allocator<kaldi::OnlineDecodableIdenticalMatrix>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableNnet1LazyDecodable,std::allocator<quasar::OnlineDecodableNnet1LazyDecodable>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x388uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineDecodableNnet1LazyDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableNnet1LazyDecodable>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADA83DB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineDecodableNnet1LazyDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableNnet1LazyDecodable>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44BE0;
  a1[1] = 0;
  quasar::OnlineDecodableNnet1LazyDecodable::OnlineDecodableNnet1LazyDecodable((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADA83E00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableNnet1LazyDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableNnet1LazyDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDecodableNnet1LazyDecodable>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

uint64_t quasar::OnlineDecodableNnet1LazyDecodable::OnlineDecodableNnet1LazyDecodable(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::Decodable::Decodable(a1, a2);
  *(_QWORD *)v3 = &unk_1E5D3AE78;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_QWORD *)(v3 + 176) = 0;
  *(_OWORD *)(v3 + 280) = 0u;
  *(_OWORD *)(v3 + 296) = 0u;
  *(_OWORD *)(v3 + 312) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 328), "");
  *(_QWORD *)(a1 + 352) = 0x2EDBE6FF3F800000;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 360), "");
  *(_QWORD *)(a1 + 384) = 0x2EDBE6FF3F800000;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 424));
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  return a1;
}

void sub_1ADA83F5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 + 408);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4);
  if (*(char *)(v1 + 383) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 351) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 327) < 0)
    operator delete(*(void **)(v1 + 304));
  if (*(char *)(v1 + 303) < 0)
    operator delete(*v8);
  if (*(char *)(v1 + 255) < 0)
    operator delete(*v7);
  if (*(char *)(v1 + 223) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 183) < 0)
    operator delete(*(void **)(v1 + 160));
  if (*(char *)(v1 + 159) < 0)
    operator delete(*(void **)(v1 + 136));
  if (*(char *)(v1 + 135) < 0)
    operator delete(*v5);
  quasar::Decodable::~Decodable((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineDecodableNnet1LazyDecodable::registerParams(quasar::OnlineDecodableNnet1LazyDecodable *this, quasar::SystemConfig *a2)
{
  std::string *v4;
  __int128 v5;
  std::string v7;
  void *__p[2];
  std::string::size_type v9;

  std::operator+<char>();
  v4 = std::string::append(&v7, "\"");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v9 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 13, 0, (uint64_t)__p);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  kaldi::nnet1::PdfPriorOptions::Register((uint64_t)this + 328, (uint64_t)a2);
  kaldi::nnet1::PdfPriorOptions::Register((uint64_t)this + 360, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "am-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Acoustic model (transition model) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 112, (uint64_t)&v7, 1, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Scaling factor for acoustic likelihoods");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 48, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "class-frame-counts-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "File containing vector with frame-counts of pdfs to compute log-priors. This is the same as class-frame-counts, but allows paths that are relative to the json config file (class-frame-counts requires absolute paths). If class-frame-counts is also specified, this param will override it.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 328, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Map model into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 188, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Name of nnet model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 136, (uint64_t)&v7, 1, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "File for feature transform in front of nnet's main network (in nnet format)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 160, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "skip-frames");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Number of frames to be skipped in nnet computation.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 184, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "use-gpu-id");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Unused, kaldi is compiled w/o CUDA");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 192, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "silence-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Name of nnet model file for computing silence posteriors");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 200, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "compute-sil-model-posteriors-from-realign-model");
  std::string::basic_string[abi:ne180100]<0>(&v7, "True if penultimate activations from realign model are the input to the silence model, otherwise use the penultimate activations from the main acoustic model");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 224, (uint64_t)&v7, 0, 60, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "workspace-size-kb");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Workspace size in Kilo Bytes");
  quasar::SystemConfig::Register<long long>((uint64_t)a2, (const void **)__p, (uint64_t)this + 864, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "realign-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Name of nnet model file for computing posteriors for later realignment of 1st/2nd pass lattices");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 232, (uint64_t)&v7, 0, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "realign-class-frame-counts-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "File containing vector with frame counts of pdfs to compute log-priors. This is the same as class-frame-counts, but allows paths that are relative to the json config file (class-frame-counts requires absolute paths). If class-frame-counts is also specified, this param will override it.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 360, (uint64_t)&v7, 0, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "compute-realign-model-posteriors-from-penultimate");
  std::string::basic_string[abi:ne180100]<0>(&v7, "True if penultimate activations from main acoustic model are the input to the realignment model, otherwise use the same features as the main acoustic model as input");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 256, (uint64_t)&v7, 0, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "skip-blanks-threshold");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Threshold for skipping frames with a CTC trained acoustic model, applied to posterior probability of the blank symbol");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 260, (uint64_t)&v7, 0, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "blank-pdf-id");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Pdf-id of blank symbol of CTC trained acoustic model, used in combination with skip-blanks-threshold");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 264, (uint64_t)&v7, 0, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "skip-across-batch");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Make skip-frames deterministic by skipping across batches instead of within batches (default: false).");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 872, (uint64_t)&v7, 0, 77, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "blank-penalty");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Penalty for blanks with a CTC trained acoustic model when silence posterior is higher than a threshold");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 268, (uint64_t)&v7, 0, 239, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "blank-penalty-silence-threshold");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Threshold of silence posterior when the blank penalty is appled to blanks");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 272, (uint64_t)&v7, 0, 239, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sil-phone-csl-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "File containing colon-separated list of silence phones.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 304, (uint64_t)&v7, 0, 239, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  MEMORY[0x1AF44C914]((char *)this + 112, "");
  *((_DWORD *)this + 12) = 1036831949;
  *((_BYTE *)this + 188) = 0;
  MEMORY[0x1AF44C914]((char *)this + 136, "");
  MEMORY[0x1AF44C914]((char *)this + 160, "");
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 48) = -2;
  MEMORY[0x1AF44C914]((char *)this + 200, "");
  MEMORY[0x1AF44C914]((char *)this + 232, "");
  *((_QWORD *)this + 108) = 0;
  *((_BYTE *)this + 872) = 0;
  MEMORY[0x1AF44C914]((char *)this + 232, "");
  *((_BYTE *)this + 256) = 0;
  *((_BYTE *)this + 224) = 0;
  *(_QWORD *)((char *)this + 260) = 0;
  *(_QWORD *)((char *)this + 268) = 0x3F80000000000000;
  MEMORY[0x1AF44C914]((char *)this + 280, "");
  return MEMORY[0x1AF44C914]((char *)this + 304, "");
}

void sub_1ADA84A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1ADA84AF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    JUMPOUT(0x1ADA84AECLL);
  JUMPOUT(0x1ADA84AF0);
}

void quasar::OnlineDecodableNnet1LazyDecodable::finishInit(quasar::OnlineDecodableNnet1LazyDecodable *this, quasar::ModelLoader *a2)
{
  unsigned __int8 v4;
  const void **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  int v33;
  char *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int8 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  int v47;
  char *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  std::__shared_weak_count *v51;
  unsigned __int8 *v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void *v71[2];
  char v72;
  int v73;
  unsigned __int8 *v74;
  std::__shared_weak_count *v75;

  v4 = *((_BYTE *)this + 188);
  v74 = 0;
  v75 = 0;
  quasar::ModelLoader::readNeuralNetwork(a2, (uint64_t)this + 136, v4, 1u, 1, &v74, (uint64_t *)&v54);
  v5 = (const void **)((char *)this + 800);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 800, &v54);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v75;
  if (v75)
  {
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (char *)this + 160;
  if (*((_BYTE *)this + 188))
  {
    if ((*((_BYTE *)this + 183) & 0x80) != 0)
    {
      if (!*((_QWORD *)this + 21))
        goto LABEL_26;
    }
    else if (!*((_BYTE *)this + 183))
    {
      goto LABEL_26;
    }
    fst::FstReadOptions::FstReadOptions(v71, v12, 0, 0, 0);
    v73 = 2;
    kaldi::nnet1::Nnet::ReadMapped((uint64_t)this + 424, (uint64_t)v71);
    if (quasar::gLogLevel >= 5)
    {
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v54 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Read mapped nnetTransf", 22);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v54);
    }
    if (v72 < 0)
      operator delete(v71[0]);
  }
  else
  {
    if ((*((_BYTE *)this + 183) & 0x80) != 0)
    {
      if (!*((_QWORD *)this + 21))
        goto LABEL_26;
    }
    else if (!*((_BYTE *)this + 183))
    {
      goto LABEL_26;
    }
    kaldi::nnet1::Nnet::Read((uint64_t)this + 424, (uint64_t)v12);
    if (quasar::gLogLevel >= 5)
    {
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v54 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Read nnetTransf", 15);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v54);
    }
  }
LABEL_26:
  if (*((uint64_t *)this + 108) >= 1)
  {
    if (*v5)
    {
      if (v13)
      {
        v14 = *((_QWORD *)this + 101);
        *(_QWORD *)&v54 = v13;
        *((_QWORD *)&v54 + 1) = v14;
        if (v14)
        {
          v15 = (unint64_t *)(v14 + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        kaldi::nnet1::Nnet::SetWorkspaceSize((kaldi::nnet1::Nnet *)(v13 + 8), *((_QWORD *)this + 108) << 10);
        v17 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v18 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
    }
  }
  if (*((char *)this + 351) < 0)
  {
    if (!*((_QWORD *)this + 42))
      goto LABEL_48;
  }
  else if (!*((_BYTE *)this + 351))
  {
    goto LABEL_48;
  }
  std::allocate_shared[abi:ne180100]<kaldi::nnet1::PdfPrior,std::allocator<kaldi::nnet1::PdfPrior>,kaldi::nnet1::PdfPriorOptions &,void>(&v54);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 392, &v54);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v54 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Read pdfPrior", 13);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v54);
  }
LABEL_48:
  quasar::ModelLoader::readTransitionModel((uint64_t)a2, (unsigned __int8 *)this + 112, 0, (uint64_t *)&v54);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 32, &v54);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v54 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Read transModel", 15);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v54);
  }
  if (*((char *)this + 223) < 0)
  {
    if (!*((_QWORD *)this + 26))
      goto LABEL_77;
  }
  else if (!*((_BYTE *)this + 223))
  {
    goto LABEL_77;
  }
  v52 = 0;
  v53 = 0;
  quasar::ModelLoader::readNeuralNetwork(a2, (uint64_t)this + 200, 0, 0, 1, &v52, (uint64_t *)&v54);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 816, &v54);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v53;
  if (v53)
  {
    v30 = (unint64_t *)&v53->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v54 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Read model file for computing silence posteriors=", 49);
    v33 = *((char *)this + 223);
    if (v33 >= 0)
      v34 = (char *)this + 200;
    else
      v34 = (char *)*((_QWORD *)this + 25);
    if (v33 >= 0)
      v35 = *((unsigned __int8 *)this + 223);
    else
      v35 = *((_QWORD *)this + 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, v35);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v54);
  }
LABEL_77:
  if (*((char *)this + 255) < 0)
  {
    if (!*((_QWORD *)this + 30))
      return;
  }
  else if (!*((_BYTE *)this + 255))
  {
    return;
  }
  std::allocate_shared[abi:ne180100]<kaldi::nnet1::PdfPrior,std::allocator<kaldi::nnet1::PdfPrior>,kaldi::nnet1::PdfPriorOptions &,void>(&v54);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 408, &v54);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = *((_BYTE *)this + 188);
  v50 = 0;
  v51 = 0;
  quasar::ModelLoader::readNeuralNetwork(a2, (uint64_t)this + 232, v39, 1u, 1, &v50, (uint64_t *)&v54);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 832, &v54);
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v51;
  if (v51)
  {
    v44 = (unint64_t *)&v51->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v54 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Read model file for computing realignment posteriors=", 53);
    v47 = *((char *)this + 255);
    if (v47 >= 0)
      v48 = (char *)this + 232;
    else
      v48 = (char *)*((_QWORD *)this + 29);
    if (v47 >= 0)
      v49 = *((unsigned __int8 *)this + 255);
    else
      v49 = *((_QWORD *)this + 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v48, v49);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v54);
  }
}

void sub_1ADA85200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineDecodableNnet1LazyDecodable::createDecodableImpl(quasar::OnlineDecodableNnet1LazyDecodable *this@<X0>, kaldi::OnlineFeatureMatrix *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  kaldi::Input *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  std::locale::__imp *locale;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::locale v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  kaldi::OnlineFeatureMatrix *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = 0;
  if ((*((char *)this + 223) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 223))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*((_QWORD *)this + 26))
LABEL_3:
    v42 = *((_QWORD *)this + 102);
LABEL_4:
  v40 = 0;
  v41 = 0;
  if ((*((char *)this + 255) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 255))
      goto LABEL_7;
    goto LABEL_6;
  }
  if (*((_QWORD *)this + 30))
  {
LABEL_6:
    v6 = *((_QWORD *)this + 104);
    v40 = *((_QWORD *)this + 51);
    v41 = v6;
  }
LABEL_7:
  v39 = 0;
  if ((*((char *)this + 183) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 183))
      goto LABEL_10;
    goto LABEL_9;
  }
  if (*((_QWORD *)this + 21))
LABEL_9:
    v39 = (uint64_t)this + 424;
LABEL_10:
  if ((*((char *)this + 327) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 327))
      goto LABEL_21;
    goto LABEL_20;
  }
  if (*((_QWORD *)this + 39))
  {
LABEL_20:
    LOBYTE(v37) = 0;
    v7 = (kaldi::Input *)kaldi::Input::Input(&v38, (char *)this + 304, &v37);
    v8 = (_QWORD *)kaldi::Input::Stream(v7);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
    v9 = std::locale::use_facet(v19, MEMORY[0x1E0DE4A90]);
    v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(v19);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (uint64_t)this + 280, v10);
    kaldi::Input::~Input((kaldi::Input *)&v38);
  }
LABEL_21:
  v11 = *((_QWORD *)this + 4);
  v38 = *((_QWORD *)this + 100);
  v12 = *((_QWORD *)this + 49);
  v36 = a2;
  v37 = v12;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineDecodableNnet1Lazy,std::allocator<kaldi::OnlineDecodableNnet1Lazy>,kaldi::TransitionModel &,kaldi::nnet1::Nnet *&,kaldi::InferenceNetItf *,kaldi::nnet1::PdfPrior *,kaldi::OnlineFeatureMatrix *,int &,float &,int &,BOOL &,BOOL &,float &,kaldi::InferenceNetItf *&,kaldi::nnet1::PdfPrior *&,kaldi::InferenceNetItf *&,BOOL &,float &,float &,std::string &,void>(v11, &v39, &v38, &v37, (uint64_t *)&v36, (int *)this + 46, (float *)this + 65, v19, (int *)this + 66, (unsigned __int8 *)this + 256, (unsigned __int8 *)this + 224, (float *)this + 12, &v42, &v40, &v41, (unsigned __int8 *)this + 872, (float *)this + 67, (float *)this + 68, (uint64_t)this + 280);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 848, (__int128 *)v19);
  locale = v19[1].__locale_;
  if (v19[1].__locale_)
  {
    v14 = (unint64_t *)((char *)v19[1].__locale_ + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)&v19[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Created OnlineDecodableNnet1LazyDecodable decodable", 51);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v19);
  }
  v16 = *((_QWORD *)this + 107);
  *a3 = *((_QWORD *)this + 106);
  a3[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
}

void sub_1ADA85520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a21);
  _Unwind_Resume(a1);
}

void quasar::OnlineDecodableNnet1LazyDecodable::~OnlineDecodableNnet1LazyDecodable(void **this)
{
  quasar::OnlineDecodableNnet1LazyDecodable::~OnlineDecodableNnet1LazyDecodable(this);
  JUMPOUT(0x1AF44D190);
}

{
  *this = &unk_1E5D3AE78;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 106));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 104));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 102));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 100));
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(this + 53));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 51));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 49));
  if (*((char *)this + 383) < 0)
    operator delete(this[45]);
  if (*((char *)this + 351) < 0)
    operator delete(this[41]);
  if (*((char *)this + 327) < 0)
    operator delete(this[38]);
  if (*((char *)this + 303) < 0)
    operator delete(this[35]);
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  quasar::Decodable::~Decodable(this);
}

void kaldi::nnet1::PdfPriorOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "class-frame-counts");
  std::string::basic_string[abi:ne180100]<0>(__p, "Vector with frame-counts of pdfs to compute log-priors. (priors are typically subtracted from log-posteriors or pre-softmax activations)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "prior-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor to be applied on pdf-log-priors");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 24, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "prior-cutoff");
  std::string::basic_string[abi:ne180100]<0>(__p, "Classes with priors lower than cutoff will have 0 likelihood");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 28, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADA856B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::nnet1::PdfPrior,std::allocator<kaldi::nnet1::PdfPrior>,kaldi::nnet1::PdfPriorOptions &,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<kaldi::nnet1::PdfPrior>::__shared_ptr_emplace[abi:ne180100]<kaldi::nnet1::PdfPriorOptions &,std::allocator<kaldi::nnet1::PdfPrior>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADA85740(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::nnet1::PdfPrior>::__shared_ptr_emplace[abi:ne180100]<kaldi::nnet1::PdfPriorOptions &,std::allocator<kaldi::nnet1::PdfPrior>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41CA0;
  a1[1] = 0;
  kaldi::nnet1::PdfPrior::PdfPrior(a1 + 3);
  return a1;
}

void sub_1ADA8578C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::nnet1::PdfPrior>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41CA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::nnet1::PdfPrior>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41CA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::nnet1::PdfPrior>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy(a1 + 32);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineDecodableNnet1Lazy,std::allocator<kaldi::OnlineDecodableNnet1Lazy>,kaldi::TransitionModel &,kaldi::nnet1::Nnet *&,kaldi::InferenceNetItf *,kaldi::nnet1::PdfPrior *,kaldi::OnlineFeatureMatrix *,int &,float &,int &,BOOL &,BOOL &,float &,kaldi::InferenceNetItf *&,kaldi::nnet1::PdfPrior *&,kaldi::InferenceNetItf *&,BOOL &,float &,float &,std::string &,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X5>, int *a6@<X6>, float *a7@<X7>, _QWORD *a8@<X8>, int *a9, unsigned __int8 *a10, unsigned __int8 *a11, float *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, unsigned __int8 *a16, float *a17, float *a18, uint64_t a19)
{
  _QWORD *v27;
  _QWORD *result;

  v27 = operator new(0x298uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineDecodableNnet1Lazy>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel &,kaldi::nnet1::Nnet *&,kaldi::InferenceNetItf *,kaldi::nnet1::PdfPrior *,kaldi::OnlineFeatureMatrix *,int &,float &,int &,BOOL &,BOOL &,float &,kaldi::InferenceNetItf *&,kaldi::nnet1::PdfPrior *&,kaldi::InferenceNetItf *&,BOOL &,float &,float &,std::string &,std::allocator<kaldi::OnlineDecodableNnet1Lazy>,0>(v27, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
  *a8 = v27 + 3;
  a8[1] = v27;
  return result;
}

void sub_1ADA858F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineDecodableNnet1Lazy>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel &,kaldi::nnet1::Nnet *&,kaldi::InferenceNetItf *,kaldi::nnet1::PdfPrior *,kaldi::OnlineFeatureMatrix *,int &,float &,int &,BOOL &,BOOL &,float &,kaldi::InferenceNetItf *&,kaldi::nnet1::PdfPrior *&,kaldi::InferenceNetItf *&,BOOL &,float &,float &,std::string &,std::allocator<kaldi::OnlineDecodableNnet1Lazy>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int *a7, float *a8, int *a9, unsigned __int8 *a10, unsigned __int8 *a11, float *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, unsigned __int8 *a16, float *a17, float *a18, uint64_t a19)
{
  char v21;

  a1[2] = 0;
  *a1 = &unk_1E5D41A70;
  a1[1] = 0;
  std::allocator<kaldi::OnlineDecodableNnet1Lazy>::construct[abi:ne180100]<kaldi::OnlineDecodableNnet1Lazy,kaldi::TransitionModel &,kaldi::nnet1::Nnet *&,kaldi::InferenceNetItf *,kaldi::nnet1::PdfPrior *,kaldi::OnlineFeatureMatrix *,int &,float &,int &,BOOL &,BOOL &,float &,kaldi::InferenceNetItf *&,kaldi::nnet1::PdfPrior *&,kaldi::InferenceNetItf *&,BOOL &,float &,float &,std::string &>((uint64_t)&v21, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
    a19);
  return a1;
}

void sub_1ADA8599C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineDecodableNnet1Lazy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41A70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineDecodableNnet1Lazy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41A70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineDecodableNnet1Lazy>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 88))(a1 + 24);
}

void std::allocator<kaldi::OnlineDecodableNnet1Lazy>::construct[abi:ne180100]<kaldi::OnlineDecodableNnet1Lazy,kaldi::TransitionModel &,kaldi::nnet1::Nnet *&,kaldi::InferenceNetItf *,kaldi::nnet1::PdfPrior *,kaldi::OnlineFeatureMatrix *,int &,float &,int &,BOOL &,BOOL &,float &,kaldi::InferenceNetItf *&,kaldi::nnet1::PdfPrior *&,kaldi::InferenceNetItf *&,BOOL &,float &,float &,std::string &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, float *a9, int *a10, unsigned __int8 *a11, unsigned __int8 *a12, float *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, unsigned __int8 *a17, float *a18, float *a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  float v26;
  int v27;
  int v28;
  int v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  std::string v44;

  v20 = a2;
  v21 = *a4;
  v22 = *a5;
  v23 = *a6;
  v24 = *a7;
  v25 = *a8;
  v26 = *a9;
  v27 = *a10;
  v28 = *a11;
  v29 = *a12;
  v30 = *a13;
  v31 = *a14;
  v32 = *a15;
  v33 = *a16;
  v34 = *a17;
  v35 = *a18;
  v36 = *a19;
  if (*(char *)(a20 + 23) < 0)
  {
    v42 = a3;
    v37 = v22;
    v40 = v23;
    v38 = v24;
    v41 = v25;
    v39 = *a10;
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a20, *(_QWORD *)(a20 + 8));
    v27 = v39;
    v25 = v41;
    v24 = v38;
    v23 = v40;
    v22 = v37;
    a3 = v42;
    v20 = a2;
  }
  else
  {
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)a20;
    v44.__r_.__value_.__r.__words[2] = *(_QWORD *)(a20 + 16);
  }
  kaldi::OnlineDecodableNnet1Lazy::OnlineDecodableNnet1Lazy(v20, a3, v21, v22, v23, v24, v25, v27, v26, v30, v35, v36, v28 != 0, v29 != 0, v31, v32, v33, v34 != 0, (uint64_t)&v44);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
}

void sub_1ADA85B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::OnlineDecodableNnet1Lazy::OnlineDecodableNnet1Lazy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, float a9, float a10, float a11, float a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  __n128 v23;
  _QWORD *v24;
  uint64_t v25;
  kaldi::nnet1::Nnet *v26;
  int v27;
  uint64_t Component;
  const void *v29;
  _QWORD *v30;
  _QWORD *v31;
  kaldi::nnet1::Nnet *v32;
  int v33;
  uint64_t v34;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD v40[2];
  __int16 v41;
  void *v42;
  void *__p;
  _BYTE *v44;

  *(_QWORD *)a1 = &off_1E5D2AB10;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 48) = a7 + 1;
  *(float *)(a1 + 52) = a10;
  *(float *)(a1 + 56) = a9;
  *(_DWORD *)(a1 + 60) = a8;
  *(_BYTE *)(a1 + 64) = a13;
  *(_BYTE *)(a1 + 65) = a14;
  *(_QWORD *)(a1 + 68) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 76) = -1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  kaldi::Matrix<float>::Matrix(a1 + 144);
  *(_QWORD *)(a1 + 192) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 184) = a18;
  *(_DWORD *)(a1 + 188) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = &unk_1E5D34170;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = &unk_1E5D34170;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = &unk_1E5D341C8;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  kaldi::Matrix<float>::Matrix(a1 + 368);
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = a15;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_QWORD *)(a1 + 440) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = a16;
  *(_QWORD *)(a1 + 496) = a17;
  *(_DWORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(float *)(a1 + 560) = a11;
  *(float *)(a1 + 564) = a12;
  v23.n128_f64[0] = kaldi::SilencePhoneSet::SilencePhoneSet((kaldi::SilencePhoneSet *)(a1 + 568));
  if (a7 >= 5 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Skipping ", 9);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" frames may not give you good results.", 38);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v40);
  }
  (*(void (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24), v23);
  v25 = *(_QWORD *)(a1 + 496);
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 152))(v25);
  if (*(_BYTE *)(a1 + 65))
  {
    if (*(_BYTE *)(a1 + 64))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Parameters realign_model_input_is_penultimate_ and sil_model_input_is_realign_penultimate_ cannot both be true at the same time.", 128);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
    }
    if (!*(_QWORD *)(a1 + 496))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Realignment model (nnet_realign) must be set in order to pass its penultimate activations to the silence model.", 111);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
    }
  }
  if (*(_BYTE *)(a1 + 184))
  {
    if (*(_DWORD *)(a1 + 48) == 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"skip_across_batch cannot be set if you aren't frame skipping", 60);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
    }
    if (*(float *)(a1 + 56) != 0.0 || *(_QWORD *)(a1 + 496))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"skip_across_batch does not work with skip_blanks_threshold or nnet_realign", 74);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
    }
  }
  v26 = *(kaldi::nnet1::Nnet **)(a1 + 16);
  if (v26 && (int)((*((_QWORD *)v26 + 1) - *(_QWORD *)v26) >> 3) >= 1)
  {
    v27 = 0;
    do
    {
      Component = kaldi::nnet1::Nnet::GetComponent(v26, v27);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)Component + 24))(Component) == 1026)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"nnet transformation contains splicing, which is not ", 52);
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"supported by OnlineDecodableNnet1Lazy. Use a separate splice ", 61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"operation to perform splicing.", 30);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
      }
      ++v27;
      v26 = *(kaldi::nnet1::Nnet **)(a1 + 16);
    }
    while (v27 < (int)((*((_QWORD *)v26 + 1) - *(_QWORD *)v26) >> 3));
  }
  v29 = *(const void **)(a1 + 24);
  if (v29)
  {
    if (v30)
    {
      v31 = v30;
      v32 = (kaldi::nnet1::Nnet *)(v30 + 1);
      if ((int)((v30[2] - v30[1]) >> 3) >= 1)
      {
        v33 = 0;
        do
        {
          v34 = kaldi::nnet1::Nnet::GetComponent(v32, v33);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34) == 1026)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
            v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"nnet contains splicing, which is not supported by ", 50);
            v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"OnlineDecodableNnet1Lazy. Use a separate splice operation to ", 61);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"perform splicing.", 17);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
          }
          ++v33;
        }
        while (v33 < (int)((v31[2] - v31[1]) >> 3));
      }
    }
  }
  kaldi::SilencePhoneSet::SilencePhoneSet(v40, a19);
  *(_DWORD *)(a1 + 568) = v40[0];
  *(_QWORD *)(a1 + 576) = v40[1];
  *(_WORD *)(a1 + 584) = v41;
  std::vector<BOOL>::operator=((void **)(a1 + 592), (uint64_t)&v42);
  if ((_QWORD *)(a1 + 568) != v40)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 616), (char *)__p, (uint64_t)v44, (v44 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  if (v42)
    operator delete(v42);
  return a1;
}

void sub_1ADA860D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11)
{
  quasar::Bitmap *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void **v16;
  kaldi::SilencePhoneSet *v17;
  void *v19;
  void *v20;

  kaldi::SilencePhoneSet::~SilencePhoneSet(v17);
  std::deque<kaldi::CuMatrix<float>>::~deque[abi:ne180100]((_QWORD *)v11 + 64);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v11 + 440);
  v19 = (void *)*((_QWORD *)v11 + 51);
  if (v19)
    operator delete(v19);
  kaldi::Matrix<float>::~Matrix(a9);
  kaldi::CuVector<float>::~CuVector(v15);
  kaldi::CuMatrix<float>::~CuMatrix(v14);
  kaldi::CuMatrix<float>::~CuMatrix(v13);
  kaldi::CuMatrix<float>::~CuMatrix(v12);
  kaldi::Matrix<float>::~Matrix(a10);
  v20 = *v16;
  if (*v16)
  {
    *((_QWORD *)v11 + 16) = v20;
    operator delete(v20);
  }
  if (*a11)
    operator delete(*a11);
  quasar::Bitmap::~Bitmap(v11);
  _Unwind_Resume(a1);
}

uint64_t std::deque<kaldi::CuMatrix<float>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x55];
    v7 = (unint64_t)v2[(a1[5] + v5) / 0x55] + 48 * ((a1[5] + v5) % 0x55);
    if ((char *)*v6 + 48 * (v5 % 0x55) != (void *)v7)
    {
      v8 = (char *)*v6 + 48 * (v5 % 0x55);
      do
      {
        v9 = *(_QWORD *)v8;
        v8 += 48;
        (*(void (**)(void))(v9 + 16))();
        if (v8 - (_BYTE *)*v6 == 4080)
        {
          v10 = (char *)v6[1];
          ++v6;
          v8 = v10;
        }
      }
      while (v8 != (char *)v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 42;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_17;
    v13 = 85;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void quasar::GlobalPDecTranslatorFactory::~GlobalPDecTranslatorFactory(quasar::GlobalPDecTranslatorFactory *this)
{
  *(_QWORD *)this = &off_1E5D39F28;
  std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::destroy((uint64_t)this + 1664, *((_QWORD **)this + 209));
  std::__list_imp<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>>::clear((uint64_t *)this + 205);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1624);
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>>>::~__hash_table((uint64_t)this + 1584);
  std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::destroy((uint64_t)this + 1560, *((_QWORD **)this + 196));
  quasar::SystemConfig::~SystemConfig((quasar::GlobalPDecTranslatorFactory *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

{
  quasar::GlobalPDecTranslatorFactory::~GlobalPDecTranslatorFactory(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::GlobalPDecTranslatorFactory::GlobalPDecTranslatorFactory(uint64_t a1, const quasar::SystemConfig *a2, int a3, char a4, int a5, uint64_t *a6)
{
  uint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  __int128 v24[17];

  *(_QWORD *)a1 = &off_1E5D39F28;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 8), a2, 1, 1);
  *(_DWORD *)(a1 + 1552) = a3;
  *(_BYTE *)(a1 + 1556) = a4;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_QWORD *)(a1 + 1560) = a1 + 1568;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_DWORD *)(a1 + 1616) = 1065353216;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_QWORD *)(a1 + 1640) = a1 + 1640;
  *(_QWORD *)(a1 + 1648) = a1 + 1640;
  *(_QWORD *)(a1 + 1656) = 0;
  *(_QWORD *)(a1 + 1680) = 0;
  *(_QWORD *)(a1 + 1672) = 0;
  *(_QWORD *)(a1 + 1664) = a1 + 1672;
  v11 = *a6;
  if (a5)
  {
    if (v11 && quasar::gLogLevel >= 1)
    {
      memset(v24, 0, sizeof(v24));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Cannot specify both factoryLocalModelSharing and context", 56);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v24);
    }
    v12 = (char *)operator new(0x38uLL);
    *((_QWORD *)v12 + 2) = 0;
    *(_QWORD *)v12 = &unk_1E5D42C28;
    *((_QWORD *)v12 + 1) = 0;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_QWORD *)&v24[0] = v12 + 24;
    *((_QWORD *)&v24[0] + 1) = v12;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 1624, v24);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v24[0] + 1);
    if (*((_QWORD *)&v24[0] + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v24[0] + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = *(_QWORD *)(a1 + 1624);
    v17 = (std::__shared_weak_count *)operator new(0x30uLL);
    v17->__shared_weak_owners_ = 0;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFD20;
    v17->__shared_owners_ = 0;
    v17[1].__shared_weak_owners_ = 0;
    v17[1].__shared_owners_ = 0;
    v17[1].__vftable = (std::__shared_weak_count_vtbl *)&v17[1].__shared_owners_;
    v22 = &v17[1].__vftable;
    v23 = v17;
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v16 + 16), (uint64_t *)&v22);
    v18 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else if (v11)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 1624), a6);
  }
  return a1;
}

void sub_1ADA86650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  quasar::Bitmap *v5;
  quasar::SystemConfig *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD **v9;
  _QWORD **v10;
  va_list va;

  va_start(va, a5);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::destroy((uint64_t)v5 + 1664, *v10);
  std::__list_imp<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>>::clear(v8);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v7);
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>>>::~__hash_table((uint64_t)v5 + 1584);
  std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::destroy((uint64_t)v5 + 1560, *v9);
  quasar::SystemConfig::~SystemConfig(v6);
  quasar::Bitmap::~Bitmap(v5);
  _Unwind_Resume(a1);
}

void quasar::GlobalPDecTranslatorFactory::createTranslator(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t **v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  __n128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  std::string v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  _BYTE v34[32];
  __int128 v35;
  void *__p[2];
  _OWORD v37[13];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) != 0)
  {
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_EEC2B8ne180100IJLm0ELm1ELm2EEJS8_S8_S8_EJEJEJRKS8_SC_SC_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(&v29, a2, a3, a4);
    v10 = (uint64_t **)(a1 + 1664);
    v11 = std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::find<std::tuple<std::string,std::string,std::string>>(a1 + 1664, (uint64_t)&v29);
    if ((_QWORD *)(a1 + 1672) == v11)
    {
      v17 = *(_QWORD *)(a1 + 1656);
      if (v17 && v17 == *(_DWORD *)(a1 + 1552))
      {
        std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__erase_unique<std::tuple<std::string,std::string,std::string>>((uint64_t **)(a1 + 1664), *(_QWORD *)(a1 + 1640) + 16);
        std::list<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>>::pop_back((uint64_t **)(a1 + 1640));
      }
      *(_QWORD *)v34 = a1 + 1560;
      v26 = 0;
      v27 = a1 + 1584;
      std::allocate_shared[abi:ne180100]<quasar::PDecTranslator,std::allocator<quasar::PDecTranslator>,quasar::SystemConfig &,std::string const&,std::string const&,std::string const&,std::map<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>> *,std::unordered_map<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>> *,decltype(nullptr),BOOL &,std::shared_ptr<quasar::ContextProvider> &,void>((quasar::SystemConfig *)(a1 + 8), (uint64_t)a4, (uint64_t)a2, (uint64_t)a3, (uint64_t *)v34, &v27, (uint64_t)&v26, &v28, (unsigned __int8 *)(a1 + 1556), (uint64_t *)(a1 + 1624));
      if (*(_DWORD *)(a1 + 1552))
      {
        v18 = *(uint64_t **)(a1 + 1648);
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::string,std::string,std::string>::__tuple_impl((std::string *)v34, (__int128 *)&v29);
        *(_OWORD *)((char *)v37 + 8) = v28;
        if (*((_QWORD *)&v28 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v21 = std::list<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>>::insert(a1 + 1640, v18, (uint64_t)v34);
        v22 = *(std::__shared_weak_count **)&v37[1];
        if (*(_QWORD *)&v37[1])
        {
          v23 = (unint64_t *)(*(_QWORD *)&v37[1] + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v21);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (SBYTE7(v37[0]) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v35) < 0)
          operator delete(*(void **)&v34[24]);
        if ((v34[23] & 0x80000000) != 0)
          operator delete(*(void **)v34);
        v25 = *(_QWORD *)(a1 + 1648);
        *(_QWORD *)v34 = &v29;
        std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__emplace_unique_key_args<std::tuple<std::string,std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,std::string> const&>,std::tuple<>>(v10, (uint64_t)&v29, (uint64_t)&std::piecewise_construct, (__int128 **)v34)[13] = v25;
      }
      *(_OWORD *)a5 = v28;
    }
    else
    {
      v12 = (uint64_t *)v11[13];
      v13 = *(uint64_t **)(a1 + 1648);
      if (v13 != v12)
      {
        std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 1640, v13, a1 + 1640, v12);
        *(_QWORD *)v34 = &v29;
        std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__emplace_unique_key_args<std::tuple<std::string,std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,std::string> const&>,std::tuple<>>((uint64_t **)(a1 + 1664), (uint64_t)&v29, (uint64_t)&std::piecewise_construct, (__int128 **)v34)[13] = (uint64_t)v12;
      }
      v14 = v12[12];
      *(_QWORD *)a5 = v12[11];
      *(_QWORD *)(a5 + 8) = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
    }
    if (v33 < 0)
      operator delete(v32);
    if (v31 < 0)
      operator delete(v30);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      *(_OWORD *)__p = 0u;
      memset(v37, 0, sizeof(v37));
      v35 = 0u;
      memset(v34, 0, sizeof(v34));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Given task and language pair combination is not supported", 57);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v34);
    }
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
  }
}

void sub_1ADA869C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  quasar::corrective_reranking::OverridesConfig::~OverridesConfig((void **)va1);
  _Unwind_Resume(a1);
}

void std::list<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>>::pop_back(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = **a1;
  *(_QWORD *)(v2 + 8) = (*a1)[1];
  *(_QWORD *)v1[1] = v2;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__destroy_at[abi:ne180100]<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,0>((uint64_t)(v1 + 2));
  operator delete(v1);
}

__n128 std::list<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>>::insert(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *v6;
  __n128 result;
  uint64_t v8;

  v6 = (char *)operator new(0x68uLL);
  *((_OWORD *)v6 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v6 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *((_QWORD *)v6 + 10) = *(_QWORD *)(a3 + 64);
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  result = *(__n128 *)(a3 + 72);
  *(__n128 *)(v6 + 88) = result;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v8 = *a2;
  *(_QWORD *)(v8 + 8) = v6;
  *(_QWORD *)v6 = v8;
  *a2 = (uint64_t)v6;
  *((_QWORD *)v6 + 1) = a2;
  ++*(_QWORD *)(a1 + 16);
  return result;
}

uint64_t std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>::~pair(uint64_t a1)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 72);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *quasar::GlobalPDecTranslatorFactory::engineType@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, quasar::PDecTranslator::ENGINE_TYPE);
}

BOOL quasar::GlobalPDecTranslatorFactory::isLanguagePairSupported(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  quasar::SystemConfig *v7;
  uint64_t TranslationModelInfo;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _BOOL4 IsLanguagePairSupported;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;

  v6 = *(unsigned __int8 *)(a4 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a4 + 8);
  v7 = (quasar::SystemConfig *)(a1 + 8);
  if (v6)
    return quasar::PDecTranslator::IsLanguagePairSupported((quasar::SystemConfig *)(a1 + 8), a4, a2, a3);
  TranslationModelInfo = quasar::SystemConfig::getTranslationModelInfo((quasar::SystemConfig *)(a1 + 8));
  v10 = *(_QWORD **)(TranslationModelInfo + 24);
  v11 = (_QWORD *)(TranslationModelInfo + 32);
  v12 = 1;
  if (v10 != (_QWORD *)(TranslationModelInfo + 32))
  {
    do
    {
      IsLanguagePairSupported = quasar::PDecTranslator::IsLanguagePairSupported(v7, (uint64_t)(v10 + 4), a2, a3);
      v14 = (_QWORD *)v10[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v10[2];
          v16 = *v15 == (_QWORD)v10;
          v10 = v15;
        }
        while (!v16);
      }
      v12 = v12 & IsLanguagePairSupported;
      v10 = v15;
    }
    while (v15 != v11);
  }
  return v12;
}

uint64_t quasar::GlobalPDecTranslatorFactory::isCompileRequired(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t isCompileRequired;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  quasar::SystemConfig *v15;
  uint64_t TranslationModelInfo;
  _QWORD *v17;
  _QWORD *v18;
  std::string *size;
  __int128 *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *p_size;
  std::string *v29;
  std::string *v30;
  void **p_data;
  void **v32;
  void **v33;
  void **v34;
  _BYTE v35[8];
  std::__shared_weak_count *v36;
  void ***v37;
  std::__shared_weak_count *v38;
  std::string v39;
  void *v40;
  char v41;
  void *__p;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int8 *)(a4 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a4 + 8);
  if (v7)
  {
    if (quasar::gLogLevel >= 6)
    {
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v44 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Checking compilation status for specific task / source / target", 63);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v44);
    }
    quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)&v44, (const quasar::SystemConfig *)(a1 + 8), 1, 1);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    v39.__r_.__value_.__s.__data_[8] = 0;
    v32 = (void **)operator new(0x608uLL);
    v33 = v32;
    v34 = v32 + 193;
    v33 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SystemConfig>,quasar::SystemConfig const*,quasar::SystemConfig const*,quasar::SystemConfig*>((uint64_t)&v34, (uint64_t)&v44, (uint64_t)&v61, (uint64_t)v32);
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_EEC2B8ne180100IJLm0ELm1ELm2EEJS8_S8_S8_EJEJEJRKS8_SC_SC_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(&v39, (__int128 *)a4, (__int128 *)a2, (__int128 *)a3);
    v29 = 0;
    v30 = 0;
    p_data = 0;
    v37 = (void ***)&v29;
    LOBYTE(v38) = 0;
    v29 = (std::string *)operator new(0x48uLL);
    v30 = v29;
    p_data = (void **)&v29[3].__r_.__value_.__l.__data_;
    v30 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<std::string,std::string,std::string>>,std::tuple<std::string,std::string,std::string> const*,std::tuple<std::string,std::string,std::string> const*,std::tuple<std::string,std::string,std::string>*>((uint64_t)&p_data, (__int128 *)&v39, &v44, v29);
    quasar::TranslatorCompiler::TranslatorCompiler(v35, &v32, &v29);
    v37 = (void ***)&v29;
    std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    if (v43 < 0)
      operator delete(__p);
    if (v41 < 0)
      operator delete(v40);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    std::vector<quasar::SystemConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
    quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&v44);
    isCompileRequired = quasar::TranslatorCompiler::isCompileRequired((quasar::TranslatorCompiler *)v35);
    v10 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      goto LABEL_46;
    }
  }
  else
  {
    v13 = *(unsigned __int8 *)(a2 + 23);
    if ((v13 & 0x80u) != 0)
      v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_41;
    v14 = *(unsigned __int8 *)(a3 + 23);
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a3 + 8);
    if (v14)
    {
      if (quasar::gLogLevel >= 6)
      {
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v44 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Checking compilation status for specific source / target", 56);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v44);
      }
      memset(&v39, 0, sizeof(v39));
      v15 = (quasar::SystemConfig *)(a1 + 8);
      TranslationModelInfo = quasar::SystemConfig::getTranslationModelInfo(v15);
      v17 = *(_QWORD **)(TranslationModelInfo + 24);
      v18 = (_QWORD *)(TranslationModelInfo + 32);
      if (v17 != (_QWORD *)(TranslationModelInfo + 32))
      {
        size = (std::string *)v39.__r_.__value_.__l.__size_;
        do
        {
          v20 = (__int128 *)(v17 + 4);
          if ((unint64_t)size >= v39.__r_.__value_.__r.__words[2])
          {
            size = (std::string *)std::vector<std::tuple<std::string,std::string,std::string>>::__emplace_back_slow_path<std::string const&,std::string const&,std::string const&>((uint64_t *)&v39, v20, (__int128 *)a2, (__int128 *)a3);
          }
          else
          {
            _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_EEC2B8ne180100IJLm0ELm1ELm2EEJS8_S8_S8_EJEJEJRKS8_SC_SC_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(size, v20, (__int128 *)a2, (__int128 *)a3);
            size += 3;
          }
          v39.__r_.__value_.__l.__size_ = (std::string::size_type)size;
          v21 = (_QWORD *)v17[1];
          if (v21)
          {
            do
            {
              v22 = v21;
              v21 = (_QWORD *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              v22 = (_QWORD *)v17[2];
              v23 = *v22 == (_QWORD)v17;
              v17 = v22;
            }
            while (!v23);
          }
          v17 = v22;
        }
        while (v22 != v18);
      }
      quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)&v44, v15, 1, 1);
      v32 = 0;
      v33 = 0;
      v34 = 0;
      LOBYTE(v30) = 0;
      v32 = (void **)operator new(0x608uLL);
      v33 = v32;
      v34 = v32 + 193;
      v33 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SystemConfig>,quasar::SystemConfig const*,quasar::SystemConfig const*,quasar::SystemConfig*>((uint64_t)&v34, (uint64_t)&v44, (uint64_t)&v61, (uint64_t)v32);
      quasar::TranslatorCompiler::TranslatorCompiler(&v37, &v32, &v39);
      v29 = (std::string *)&v32;
      std::vector<quasar::SystemConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&v44);
      isCompileRequired = quasar::TranslatorCompiler::isCompileRequired((quasar::TranslatorCompiler *)&v37);
      v24 = v38;
      if (v38)
      {
        v25 = (unint64_t *)&v38->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      *(_QWORD *)&v44 = &v39;
      std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
    }
    else
    {
LABEL_41:
      if (quasar::gLogLevel >= 6)
      {
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v44 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Checking compilation status for all models", 42);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v44);
      }
      quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)&v44, (const quasar::SystemConfig *)(a1 + 8), 1, 1);
      memset(&v39, 0, sizeof(v39));
      v32 = (void **)&v39;
      LOBYTE(v33) = 0;
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x608uLL);
      v39.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
      v39.__r_.__value_.__r.__words[2] = v39.__r_.__value_.__r.__words[0] + 1544;
      v39.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SystemConfig>,quasar::SystemConfig const*,quasar::SystemConfig const*,quasar::SystemConfig*>((uint64_t)&v39.__r_.__value_.__r.__words[2], (uint64_t)&v44, (uint64_t)&v61, (uint64_t)v39.__r_.__value_.__l.__data_);
      quasar::TranslatorCompiler::TranslatorCompiler(&v29);
      v32 = (void **)&v39;
      std::vector<quasar::SystemConfig>::__destroy_vector::operator()[abi:ne180100](&v32);
      quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&v44);
      isCompileRequired = quasar::TranslatorCompiler::isCompileRequired((quasar::TranslatorCompiler *)&v29);
      v10 = (std::__shared_weak_count *)v30;
      if (v30)
      {
        p_size = &v30->__r_.__value_.__l.__size_;
        do
          v12 = __ldaxr(p_size);
        while (__stlxr(v12 - 1, p_size));
LABEL_46:
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  return isCompileRequired;
}

void sub_1ADA871BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a29);
  _Unwind_Resume(a1);
}

void quasar::GlobalPDecTranslatorFactory::preload(_DWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t TranslationModelInfo;
  _QWORD *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  int v18;
  _QWORD *v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  const void *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  BOOL v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  std::string v61;
  void *v62;
  char v63;

  TranslationModelInfo = quasar::SystemConfig::getTranslationModelInfo((quasar::SystemConfig *)(a1 + 2));
  if (a4[2])
    v9 = a4;
  else
    v9 = (_QWORD *)(TranslationModelInfo + 24);
  v10 = (unsigned __int8 *)*v9;
  v41 = (unsigned __int8 *)(v9 + 1);
  if ((_QWORD *)*v9 == v9 + 1)
    return;
  v11 = 0;
  v40 = (_QWORD *)(TranslationModelInfo + 72);
  do
  {
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v40, v10 + 32);
    if (!v12)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v14 = *((_QWORD *)v12 + 5);
    v13 = *((_QWORD *)v12 + 6);
    while (v14 != v13)
    {
      v15 = *(_QWORD *)(a3 + 16);
      if (v15
        && (std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v61, (__int128 *)v14, (__int128 *)(v14 + 24)), !std::__tree<std::pair<std::string,std::string>>::__count_unique<std::pair<std::string,std::string>>(a3, (const void **)&v61.__r_.__value_.__l.__data_)))
      {
        LOBYTE(v17) = 0;
      }
      else
      {
        v16 = *(_QWORD *)(a2 + 16);
        v17 = v16 == 0;
        if (v16 && std::__tree<std::string>::__count_unique<std::string>(a2, (const void **)v14))
          v17 = std::__tree<std::string>::__count_unique<std::string>(a2, (const void **)(v14 + 24)) != 0;
        if (!v15)
        {
          if (!v17)
            goto LABEL_50;
LABEL_23:
          v18 = a1[388];
          if ((v18 & 0x80000000) == 0 && v11 >= v18)
          {
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v44 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(&v44, "Trying to preload more Translators than available cache size!");
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v44);
          }
          if (quasar::gLogLevel >= 6)
          {
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v44 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
            v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Preloading translator for task '", 32);
            v20 = v10[55];
            if ((v20 & 0x80u) == 0)
              v21 = (uint64_t)(v10 + 32);
            else
              v21 = *((_QWORD *)v10 + 4);
            if ((v20 & 0x80u) == 0)
              v22 = v10[55];
            else
              v22 = *((_QWORD *)v10 + 5);
            v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
            v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"', language pair '", 18);
            v25 = *(char *)(v14 + 23);
            if (v25 >= 0)
              v26 = (const void *)v14;
            else
              v26 = *(const void **)v14;
            if (v25 >= 0)
              v27 = *(unsigned __int8 *)(v14 + 23);
            else
              v27 = *(_QWORD *)(v14 + 8);
            v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v26, v27);
            v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"-", 1);
            v30 = *(char *)(v14 + 47);
            if (v30 >= 0)
              v31 = v14 + 24;
            else
              v31 = *(_QWORD *)(v14 + 24);
            if (v30 >= 0)
              v32 = *(unsigned __int8 *)(v14 + 47);
            else
              v32 = *(_QWORD *)(v14 + 32);
            v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"'", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v44);
          }
          ++v11;
          (*(void (**)(uint64_t *__return_ptr, _DWORD *, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(&v42, a1, v14, v14 + 24, (_QWORD *)v10 + 4);
          v34 = v43;
          if (v43)
          {
            p_shared_owners = (unint64_t *)&v43->__shared_owners_;
            do
              v36 = __ldaxr(p_shared_owners);
            while (__stlxr(v36 - 1, p_shared_owners));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          goto LABEL_50;
        }
      }
      if (v63 < 0)
        operator delete(v62);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if (v17)
        goto LABEL_23;
LABEL_50:
      v14 += 48;
    }
    v37 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
    if (v37)
    {
      do
      {
        v38 = v37;
        v37 = *(unsigned __int8 **)v37;
      }
      while (v37);
    }
    else
    {
      do
      {
        v38 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
        v39 = *(_QWORD *)v38 == (_QWORD)v10;
        v10 = v38;
      }
      while (!v39);
    }
    v10 = v38;
  }
  while (v38 != v41);
}

void sub_1ADA8761C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

void sub_1ADA8762C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::pair<std::string,std::string>::~pair(v1 - 136);
  _Unwind_Resume(a1);
}

void std::__list_imp<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,0>(uint64_t a1)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 72);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::string *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::string,std::string,std::string>::__tuple_impl(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1ADA877D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_EEC2B8ne180100IJLm0ELm1ELm2EEJS8_S8_S8_EJEJEJRKS8_SC_SC_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v8;
  }
  v9 = this + 2;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v10 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_1ADA878BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::vector<std::string> const,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<std::string> const,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;
  void **v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (void **)a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::TranslationPairSetting>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<kaldi::quasar::TMTools::ModelSharing>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFD20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::TMTools::ModelSharing>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFD20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::quasar::TMTools::ModelSharing>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
}

_QWORD *std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::find<std::tuple<std::string,std::string,std::string>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;
  char v9;
  char v10;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>((uint64_t)&v9, (uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>((uint64_t)&v10, a2, (uint64_t)(v5 + 4)))
  {
    return v2;
  }
  return v5;
}

BOOL std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  int v15;
  BOOL v16;
  char v17;

  v5 = *(char *)(a3 + 23);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  if (v6 >= 0)
    v8 = (const void *)a2;
  else
    v8 = *(const void **)a2;
  if (v5 >= 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  if (v5 >= 0)
    v10 = (const void *)a3;
  else
    v10 = *(const void **)a3;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = v7 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  v15 = memcmp(v10, v8, v11);
  v16 = v9 < v7;
  if (v15)
    v16 = v15 < 0;
  return !v16
      && std::__tuple_less<2ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>((uint64_t)&v17, a2, a3);
}

BOOL std::__tuple_less<2ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  int v15;
  BOOL v16;
  char v17;

  v5 = *(char *)(a3 + 47);
  v6 = *(char *)(a2 + 47);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 47);
  else
    v7 = *(_QWORD *)(a2 + 32);
  if (v6 >= 0)
    v8 = (const void *)(a2 + 24);
  else
    v8 = *(const void **)(a2 + 24);
  if (v5 >= 0)
    v9 = *(unsigned __int8 *)(a3 + 47);
  else
    v9 = *(_QWORD *)(a3 + 32);
  if (v5 >= 0)
    v10 = (const void *)(a3 + 24);
  else
    v10 = *(const void **)(a3 + 24);
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = v7 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  v15 = memcmp(v10, v8, v11);
  v16 = v9 < v7;
  if (v15)
    v16 = v15 < 0;
  return !v16
      && std::__tuple_less<1ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>((uint64_t)&v17, a2, a3);
}

BOOL std::__tuple_less<1ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const void *v4;
  const void *v5;
  int v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  int v10;
  size_t v11;
  const void *v12;
  size_t v13;
  const void *v14;
  size_t v15;
  int v16;

  v5 = *(const void **)(a3 + 48);
  v3 = a3 + 48;
  v4 = v5;
  v6 = *(char *)(v3 + 23);
  v9 = *(const void **)(a2 + 48);
  v7 = a2 + 48;
  v8 = v9;
  v10 = *(char *)(v7 + 23);
  if (v10 >= 0)
    v11 = *(unsigned __int8 *)(v7 + 23);
  else
    v11 = *(_QWORD *)(v7 + 8);
  if (v10 >= 0)
    v12 = (const void *)v7;
  else
    v12 = v8;
  if (v6 >= 0)
    v13 = *(unsigned __int8 *)(v3 + 23);
  else
    v13 = *(_QWORD *)(v3 + 8);
  if (v6 >= 0)
    v14 = (const void *)v3;
  else
    v14 = v4;
  if (v13 >= v11)
    v15 = v11;
  else
    v15 = v13;
  v16 = memcmp(v12, v14, v15);
  if (v16)
    return v16 < 0;
  else
    return v11 < v13;
}

uint64_t *std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__emplace_unique_key_args<std::tuple<std::string,std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,std::string> const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__find_equal<std::tuple<std::string,std::string,std::string>>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,std::string> const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__find_equal<std::tuple<std::string,std::string,std::string>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  char v10;
  char v11;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>((uint64_t)&v10, a3, (uint64_t)(v4 + 4)))break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>((uint64_t)&v11, v8, a3))break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

std::string *std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,std::string> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::string,std::string,std::string>::__tuple_impl((std::string *)(v6 + 32), *a2);
  *((_QWORD *)v6 + 13) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADA87F04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::TranslationPairSetting>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__erase_unique<std::tuple<std::string,std::string,std::string>>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::find<std::tuple<std::string,std::string,std::string>>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::string>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::TranslationPairSetting>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::PDecTranslator,std::allocator<quasar::PDecTranslator>,quasar::SystemConfig &,std::string const&,std::string const&,std::string const&,std::map<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>> *,std::unordered_map<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>> *,decltype(nullptr),BOOL &,std::shared_ptr<quasar::ContextProvider> &,void>@<X0>(quasar::SystemConfig *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, unsigned __int8 *a9, uint64_t *a10)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0xC8uLL);
  result = std::__shared_ptr_emplace<quasar::PDecTranslator>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string const&,std::string const&,std::string const&,std::map<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>> *,std::unordered_map<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>> *,decltype(nullptr),BOOL &,std::shared_ptr<quasar::ContextProvider> &,std::allocator<quasar::PDecTranslator>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9, a10);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1ADA88054(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::PDecTranslator>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string const&,std::string const&,std::string const&,std::map<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>> *,std::unordered_map<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>> *,decltype(nullptr),BOOL &,std::shared_ptr<quasar::ContextProvider> &,std::allocator<quasar::PDecTranslator>,0>(_QWORD *a1, quasar::SystemConfig *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t a8, unsigned __int8 *a9, uint64_t *a10)
{
  char v12;

  a1[2] = 0;
  *a1 = &unk_1E5D42A68;
  a1[1] = 0;
  std::allocator<quasar::PDecTranslator>::construct[abi:ne180100]<quasar::PDecTranslator,quasar::SystemConfig &,std::string const&,std::string const&,std::string const&,std::map<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>> *,std::unordered_map<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>> *,decltype(nullptr),BOOL &,std::shared_ptr<quasar::ContextProvider> &>((uint64_t)&v12, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

void sub_1ADA880D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PDecTranslator>::construct[abi:ne180100]<quasar::PDecTranslator,quasar::SystemConfig &,std::string const&,std::string const&,std::string const&,std::map<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>> *,std::unordered_map<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>> *,decltype(nullptr),BOOL &,std::shared_ptr<quasar::ContextProvider> &>(uint64_t a1, uint64_t a2, quasar::SystemConfig *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t a9, unsigned __int8 *a10, uint64_t *a11)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v12 = *a7;
  v13 = *a8;
  v14 = *a10;
  v15 = (std::__shared_weak_count *)a11[1];
  v21 = *a11;
  v22 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  quasar::PDecTranslator::PDecTranslator(a2, a3, a4, a5, a6, v12, v13, 0, v14 != 0, &v21);
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1ADA881A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SystemConfig>,quasar::SystemConfig const*,quasar::SystemConfig const*,quasar::SystemConfig*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a4 + v7), (const quasar::SystemConfig *)(a2 + v7), 1, 1);
      v7 += 1544;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADA88220(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 1544;
    do
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + v2) + 48))(v4 + v2);
      v2 -= 1544;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<std::string,std::string,std::string>>,std::tuple<std::string,std::string,std::string> const*,std::tuple<std::string,std::string,std::string> const*,std::tuple<std::string,std::string,std::string>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::string,std::string,std::string>::__tuple_impl(v4, v6);
      v6 = (__int128 *)((char *)v6 + 72);
      v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::tuple<std::string,std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADA882D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::tuple<std::string,std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::tuple<std::string,std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::vector<std::tuple<std::string,std::string,std::string>>::__emplace_back_slow_path<std::string const&,std::string const&,std::string const&>(uint64_t *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  void *v17;
  std::string *v18;
  std::string *v19;
  char *v20;
  uint64_t *v21;

  v5 = *a1;
  v6 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x38E38E38E38E38ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0x8E38E38E38E38E39 * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x1C71C71C71C71C7)
    v13 = 0x38E38E38E38E38ELL;
  else
    v13 = v7;
  v21 = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v11, v13);
  else
    v14 = 0;
  v17 = v14;
  v18 = (std::string *)&v14[72 * v6];
  v20 = &v14[72 * v13];
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_EEC2B8ne180100IJLm0ELm1ELm2EEJS8_S8_S8_EJEJEJRKS8_SC_SC_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(v18, a2, a3, a4);
  v19 = v18 + 3;
  std::vector<std::tuple<std::string,std::string,std::string>>::__swap_out_circular_buffer(a1, &v17);
  v15 = a1[1];
  std::__split_buffer<std::tuple<std::string,std::string,std::string>>::~__split_buffer(&v17);
  return v15;
}

void sub_1ADA88440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,std::string,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::string,std::string,std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v9 - 56) = *(_QWORD *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 72) = 0;
      v11 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v11;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v12 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 72;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((_QWORD *)&v17 + 1) = v9;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::ItnOverride>::destroy[abi:ne180100](v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::tuple<std::string,std::string,std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::tuple<std::string,std::string,std::string>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::tuple<std::string,std::string,std::string>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<quasar::ItnOverride>::destroy[abi:ne180100](v4, i - 72);
  }
}

uint64_t std::__tree<std::pair<std::string,std::string>>::__count_unique<std::pair<std::string,std::string>>(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(v4, a2, v2 + 4) & 1) == 0)
      {
        if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(v4, v2 + 4, a2))return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,char const*,UErrorCode *,void>@<X0>(const char **a1@<X1>, UErrorCode **a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x20uLL);
  result = std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const*,UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADA88754(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const*,UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(_QWORD *a1, const char **a2, UErrorCode **a3)
{
  a1[2] = 0;
  *a1 = &unk_1E5D444E0;
  a1[1] = 0;
  quasar::URegularExpressionWrapper::URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_1ADA887A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeLatticePruned<fst::LatticeWeightTpl<float>,int>(void **a1, uint64_t a2, __int128 *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  int i;
  void **v11;
  _BOOL8 v12;
  double v13;
  BOOL v14;
  double v16;
  float v17;
  _QWORD *v18;
  _BOOL8 v19;
  uint64_t v20;
  int v21;
  _QWORD v23[34];
  double v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27[41];
  void *v28;
  uint64_t v29;

  v8 = (*((uint64_t (**)(void **))*a1 + 14))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v8);
  v9 = (*((uint64_t (**)(void **))*a1 + 15))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v9);
  if ((*((unsigned int (**)(void **))*a1 + 20))(a1))
  {
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v28);
    for (i = 9; ; --i)
    {
      v11 = i == 9 ? a1 : &v28;
      v25 = *a3;
      v26 = *((_QWORD *)a3 + 2);
      fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::LatticeDeterminizerPruned((uint64_t)v27, (uint64_t)v11, (uint64_t)&v25, a4);
      v24 = 0.0;
      v12 = fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Determinize((uint64_t)v27, &v24);
      v13 = v24;
      v14 = v24 >= a4 * *((float *)a3 + 5) || a4 == INFINITY;
      if (v14 || i == 0)
        break;
      if (v24 < 0.0)
      {
        v24 = 0.0;
        v13 = 0.0;
      }
      v16 = a4 * sqrt(v13 / a4);
      if (v16 >= a4 * 0.5)
        a4 = v16;
      else
        a4 = a4 * 0.5;
      if (i == 9)
        fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::operator=((uint64_t)&v28, (uint64_t)a1);
      v17 = a4;
      kaldi::PruneLattice<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(&v28, v17);
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Pruned state-level lattice with beam ", 37);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" and retrying determinization with that beam.", 45);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v23);
      }
      fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::~LatticeDeterminizerPruned(v27);
    }
    v19 = v12;
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Output(v27, a2, 1);
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::~LatticeDeterminizerPruned(v27);
    v28 = &unk_1E5D25580;
    v20 = v29;
    if (v29)
    {
      v21 = *(_DWORD *)(v29 + 56) - 1;
      *(_DWORD *)(v29 + 56) = v21;
      if (!v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    return 1;
  }
  return v19;
}

void sub_1ADA889F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;
  _DWORD *v51;
  int v52;

  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::~LatticeDeterminizerPruned(&a49);
  *(_QWORD *)(v49 - 120) = &unk_1E5D25580;
  v51 = *(_DWORD **)(v49 - 112);
  if (v51)
  {
    v52 = v51[14] - 1;
    v51[14] = v52;
    if (!v52)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
  }
  _Unwind_Resume(a1);
}

BOOL fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Determinize(uint64_t a1, double *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  _QWORD v24[35];

  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::InitializeDeterminization(a1);
  v4 = *(char **)(a1 + 200);
  v5 = *(char **)(a1 + 208);
  if (v4 != v5)
  {
    while (1)
    {
      v6 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
      v7 = *(unsigned int *)(a1 + 92);
      if ((int)v7 >= 1 && v6 > v7)
        break;
      v9 = *(_QWORD *)v4;
      v10 = *(_DWORD *)(a1 + 96);
      if (v10 >= 1 && *(_DWORD *)(a1 + 24) > v10)
        break;
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v6, 1) <= 0x1999999999999999uLL)
      {
        if (!fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::CheckMemoryUsage(a1))
          break;
        v4 = *(char **)(a1 + 200);
        v5 = *(char **)(a1 + 208);
      }
      if (v5 - v4 >= 9)
      {
        v11 = *(_QWORD *)v4;
        v12 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>(v4, (uint64_t)v24, (unint64_t)(v5 - v4) >> 3);
        v13 = v5 - 8;
        if (v5 - 8 == v12)
        {
          *(_QWORD *)v12 = v11;
        }
        else
        {
          *(_QWORD *)v12 = *(_QWORD *)v13;
          *(_QWORD *)v13 = v11;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>((uint64_t)v4, (uint64_t)(v12 + 8), (uint64_t)v24, (v12 + 8 - v4) >> 3);
        }
      }
      *(_QWORD *)(a1 + 208) -= 8;
      fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ProcessTransition(a1, *(_DWORD *)v9, *(_DWORD *)(v9 + 4), (uint64_t *)(v9 + 8));
      v14 = *(void **)(v9 + 8);
      if (v14)
      {
        *(_QWORD *)(v9 + 16) = v14;
        operator delete(v14);
      }
      MEMORY[0x1AF44D190](v9, 0x1020C40CC82F220);
      v4 = *(char **)(a1 + 200);
      v5 = *(char **)(a1 + 208);
      if (v4 == v5)
        goto LABEL_21;
    }
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v24, 1);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Lattice determinization terminated but not ", 43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" because of lattice-beam.  (#states, #arcs) is(", 49);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"), versus limits(", 20);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", ", 2);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") (else, may be memory limit).", 31);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v24);
    }
  }
LABEL_21:
  *(_BYTE *)(a1 + 112) = 1;
  v20 = *(_QWORD *)(a1 + 200);
  v21 = *(_QWORD *)(a1 + 208);
  if (a2)
  {
    if (v20 == v21)
    {
      *a2 = *(double *)(a1 + 64);
      v21 = v20;
    }
    else
    {
      v22 = *(double *)(*(_QWORD *)v20 + 32);
      *a2 = v22
          - *(double *)(*(_QWORD *)(a1 + 40)
                      + 8 * (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)));
      v20 = *(_QWORD *)(a1 + 200);
      v21 = *(_QWORD *)(a1 + 208);
    }
  }
  return v20 == v21;
}

void sub_1ADA88CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Output(uint64_t *a1, uint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _BYTE *v22;
  uint64_t v23;
  std::vector<unsigned int> v24;
  _DWORD v25[2];
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  int v30;

  v5 = a1[1] - *a1;
  v6 = v5 >> 3;
  if (a3)
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeMostMemory(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, 0xFFFFFFFFLL);
  if ((_DWORD)v6)
  {
    if ((int)v6 < 1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, 0);
    }
    else
    {
      v7 = 0;
      do
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
        ++v7;
      }
      while ((_DWORD)v6 != v7);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, 0);
      v8 = 0;
      v14 = (v5 >> 3);
      do
      {
        v9 = *(_QWORD *)(*a1 + 8 * v8);
        v10 = *(_QWORD *)(v9 + 24);
        v11 = *(_QWORD *)(v9 + 32);
        v12 = v9 + 24;
        while (v10 != v11)
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          memset(&v24, 0, sizeof(v24));
          fst::LatticeStringRepository<int>::ConvertToVector((_DWORD)a1 + 280, *(uint64_t **)(v10 + 8), &v24);
          v20 = *(_QWORD *)(v10 + 20);
          v22 = 0;
          v23 = 0;
          v21 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, v24.__begin_, (uint64_t)v24.__end_, v24.__end_ - v24.__begin_);
          if (*(_DWORD *)(v10 + 16) == -1)
          {
            v16 = v20;
            v18 = 0;
            v19 = 0;
            __p = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v21, (uint64_t)v22, (v22 - (_BYTE *)v21) >> 2);
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v8, &v16);
            if (__p)
            {
              v18 = __p;
              operator delete(__p);
            }
          }
          else
          {
            v30 = *(_DWORD *)(v10 + 16);
            v25[0] = *(_DWORD *)v10;
            v25[1] = v25[0];
            v26 = v20;
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v27, (char *)v21, (uint64_t)v22, (v22 - (_BYTE *)v21) >> 2);
            (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 208))(a2, v8, v25);
          }
          if (v21)
          {
            v22 = v21;
            operator delete(v21);
          }
          if (v24.__begin_)
          {
            v24.__end_ = v24.__begin_;
            operator delete(v24.__begin_);
          }
          if (v27)
          {
            v28 = v27;
            operator delete(v27);
          }
          v10 += 32;
        }
        if (a3)
        {
          v13 = *(void **)v12;
          *(_QWORD *)(v12 + 8) = 0;
          *(_QWORD *)(v12 + 16) = 0;
          *(_QWORD *)v12 = 0;
          if (v13)
            operator delete(v13);
        }
        ++v8;
      }
      while (v8 != v14);
    }
    if ((a3 & 1) != 0)
    {
      fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeOutputStates((uint64_t)a1);
      fst::LatticeStringRepository<int>::Destroy(a1 + 35);
    }
  }
}

{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  _DWORD v33[2];
  int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  std::vector<unsigned int> __p;

  v5 = a1[1] - *a1;
  v6 = v5 >> 3;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  if (!(v5 >> 3))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, 0xFFFFFFFFLL);
    return;
  }
  if (a3)
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeMostMemory(a1);
  if ((int)v6 >= 1)
  {
    v7 = 0;
    do
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      ++v7;
    }
    while ((_DWORD)v6 != v7);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, 0);
    v8 = 0;
    v31 = (v5 >> 3);
    while (1)
    {
      v9 = *(_QWORD *)(*a1 + 8 * v8);
      v12 = *(int **)(v9 + 24);
      v10 = *(int **)(v9 + 32);
      v11 = v9 + 24;
      while (v12 != v10)
      {
        memset(&__p, 0, sizeof(__p));
        fst::LatticeStringRepository<int>::ConvertToVector((_DWORD)a1 + 280, *((uint64_t **)v12 + 1), &__p);
        begin = __p.__begin_;
        end = __p.__end_;
        if (v12[4] != -1)
        {
          if ((std::vector<unsigned int>::pointer)((char *)__p.__end_ - (char *)__p.__begin_) <= (std::vector<unsigned int>::pointer)4)
          {
            v37 = v12[4];
            v17 = v8;
          }
          else
          {
            v15 = 0;
            v16 = v8;
            do
            {
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
              v37 = v17;
              v18 = 0;
              if (!v15)
                v18 = *(_QWORD *)(v12 + 5);
              v36 = v18;
              v19 = *v12;
              if (v15)
                v19 = 0;
              v34 = v19;
              v35 = __p.__begin_[v15];
              (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 208))(a2, v16, &v34);
              begin = __p.__begin_;
              end = __p.__end_;
              v20 = v15 + 2;
              ++v15;
              v16 = v17;
            }
            while (v20 < __p.__end_ - __p.__begin_);
            v37 = v12[4];
            if ((std::vector<unsigned int>::pointer)((char *)__p.__end_ - (char *)__p.__begin_) > (std::vector<unsigned int>::pointer)7)
            {
              v21 = 0;
              v22 = 0;
LABEL_29:
              v36 = v22;
              if (v21)
                v28 = *v12;
              else
                v28 = 0;
              v34 = v28;
              if (end == begin)
                v29 = 0;
              else
                v29 = *(end - 1);
              v35 = v29;
              (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 208))(a2, v17, &v34);
              goto LABEL_38;
            }
          }
          v22 = *(_QWORD *)(v12 + 5);
          v21 = 1;
          goto LABEL_29;
        }
        v23 = v8;
        if (__p.__end_ == __p.__begin_)
          goto LABEL_36;
        v24 = 0;
        v25 = v8;
        do
        {
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
          v37 = v23;
          v26 = 0;
          if (!v24)
            v26 = *(_QWORD *)(v12 + 5);
          v36 = v26;
          v34 = 0;
          v35 = __p.__begin_[v24];
          (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 208))(a2, v25, &v34);
          ++v24;
          v25 = v23;
        }
        while (v24 < __p.__end_ - __p.__begin_);
        if (__p.__end_ == __p.__begin_)
        {
LABEL_36:
          v27 = v12[6];
          v33[0] = v12[5];
        }
        else
        {
          v33[0] = 0;
          v27 = 0;
        }
        v33[1] = v27;
        (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 184))(a2, v23, v33);
LABEL_38:
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        v12 += 8;
      }
      if (a3)
      {
        v30 = *(void **)v11;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)v11 = 0;
        if (v30)
          operator delete(v30);
      }
      if (++v8 == v31)
      {
        if ((a3 & 1) != 0)
          goto LABEL_46;
        return;
      }
    }
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, 0);
  if ((a3 & 1) != 0)
  {
LABEL_46:
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeOutputStates((uint64_t)a1);
    fst::LatticeStringRepository<int>::Destroy(a1 + 35);
  }
}

void sub_1ADA88F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  if (a24)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeLatticePruned<fst::LatticeWeightTpl<float>>(void **a1, uint64_t a2, __int128 *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  int i;
  void **v11;
  _BOOL8 v12;
  double v13;
  double v14;
  double v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  float v21;
  uint64_t v22;
  int v23;
  _QWORD v25[34];
  double v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29[41];
  void *v30;
  uint64_t v31;

  v8 = (*((uint64_t (**)(void **))*a1 + 14))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v8);
  v9 = (*((uint64_t (**)(void **))*a1 + 15))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v9);
  if ((*((unsigned int (**)(void **))*a1 + 20))(a1))
  {
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v30);
    for (i = 9; ; --i)
    {
      v11 = i == 9 ? a1 : &v30;
      v27 = *a3;
      v28 = *((_QWORD *)a3 + 2);
      fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::LatticeDeterminizerPruned((uint64_t)v29, (uint64_t)v11, (uint64_t)&v27, a4);
      v26 = 0.0;
      v12 = fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Determinize((uint64_t)v29, &v26);
      if (!i)
        break;
      v13 = v26;
      if (v26 >= a4 * *((float *)a3 + 5))
        break;
      if (v26 < 0.0)
      {
        v26 = 0.0;
        v13 = 0.0;
      }
      v14 = a4 * sqrt(v13 / a4);
      if (v14 >= a4 * 0.5)
        v15 = v14;
      else
        v15 = a4 * 0.5;
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Effective beam ", 15);
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" was less than beam ", 20);
        v17 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" * cutoff ", 10);
        v18 = (_QWORD *)std::ostream::operator<<();
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", pruning raw ", 14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"lattice with new beam ", 22);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" and retrying.", 14);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v25);
      }
      if (i == 9)
        fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::operator=((uint64_t)&v30, (uint64_t)a1);
      v21 = v15;
      kaldi::PruneLattice<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(&v30, v21);
      fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::~LatticeDeterminizerPruned(v29);
      a4 = v15;
    }
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Output(v29, a2, 1);
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::~LatticeDeterminizerPruned(v29);
    v30 = &unk_1E5D25580;
    v22 = v31;
    if (v31)
    {
      v23 = *(_DWORD *)(v31 + 56) - 1;
      *(_DWORD *)(v31 + 56) = v23;
      if (!v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    return 1;
  }
  return v12;
}

void sub_1ADA8927C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;
  _DWORD *v51;
  int v52;

  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::~LatticeDeterminizerPruned(&a49);
  *(_QWORD *)(v49 - 136) = &unk_1E5D25580;
  v51 = *(_DWORD **)(v49 - 128);
  if (v51)
  {
    v52 = v51[14] - 1;
    v51[14] = v52;
    if (!v52)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
  }
  _Unwind_Resume(a1);
}

void sub_1ADA89650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeLatticePhonePruned<fst::LatticeWeightTpl<float>,int>(kaldi::TransitionModel *a1, void **a2, uint64_t a3, uint64_t a4, int a5, double a6)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v13;
  int v14;
  int v15;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[35];
  __int128 v20;
  uint64_t v21;

  if ((a5 & 0x101) != 0)
  {
    *((_QWORD *)&v20 + 1) = -1;
    v21 = 0x3F000000FFFFFFFFLL;
    *(_QWORD *)&v20 = a4;
    if ((a5 & 1) != 0)
    {
      if (kaldi::g_kaldi_verbose_level >= 1)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v19, 1);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Doing first pass of determinization on phone + word ", 52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"lattices.", 9);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v19);
      }
      v10 = fst::DeterminizeLatticePhonePrunedFirstPass<fst::LatticeWeightTpl<float>,int>(a1, a2, (uint64_t)&v20, a6);
      if ((a5 & 0x100) == 0)
      {
        fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)a2, a3, 0);
        return v10;
      }
    }
    else
    {
      v10 = 1;
      if ((a5 & 0x100) == 0)
      {
        if ((a5 & 0x10000) == 0)
          return v10;
        goto LABEL_16;
      }
    }
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v19, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Doing second pass of determinization on word lattices.", 54);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v19);
    }
    v17 = v20;
    v18 = v21;
    v10 = fst::DeterminizeLatticePruned<fst::LatticeWeightTpl<float>,int>(a2, a3, &v17, a6) & v10;
    if ((a5 & 0x10000) != 0)
    {
LABEL_16:
      if (kaldi::g_kaldi_verbose_level >= 1)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v19, 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Pushing and minimizing on word lattices.", 40);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v19);
      }
      v14 = fst::PushCompactLatticeStrings<fst::LatticeWeightTpl<float>,int>(a3);
      v15 = fst::PushCompactLatticeWeights<fst::LatticeWeightTpl<float>,int>(a3);
      return fst::MinimizeCompactLattice<fst::LatticeWeightTpl<float>,int>(a3, 0.00097656) & v15 & v14 & v10;
    }
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Both --phone-determinize and --word-determinize are set to ", 59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"false, copying lattice without determinization.", 47);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    }
    fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)a2, a3, 0);
    return 1;
  }
  return v10;
}

void sub_1ADA898C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeLatticePhonePrunedFirstPass<fst::LatticeWeightTpl<float>,int>(kaldi::TransitionModel *a1, void **a2, uint64_t a3, double a4)
{
  int v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  v7 = fst::DeterminizeLatticeInsertPhones<fst::LatticeWeightTpl<float>>(a1, (uint64_t)a2);
  fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a2);
  v10 = *(_OWORD *)a3;
  v11 = *(_QWORD *)(a3 + 16);
  v8 = fst::DeterminizeLatticePruned<fst::LatticeWeightTpl<float>>(a2, (uint64_t)a2, &v10, a4);
  fst::DeterminizeLatticeDeletePhones<fst::LatticeWeightTpl<float>>(v7, (uint64_t)a2);
  fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a2);
  return v8;
}

uint64_t fst::DeterminizeLatticePhonePrunedWrapper(kaldi::TransitionModel *a1, void **a2, uint64_t a3, uint64_t a4, int a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v20[34];

  if ((*((uint64_t (**)(void **))*a2 + 14))(a2))
  {
    v12 = (*((uint64_t (**)(void **))*a2 + 14))(a2);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  }
  else
  {
    v13 = 0;
  }
  if ((*((uint64_t (**)(void **))*a2 + 15))(a2))
  {
    v14 = (*((uint64_t (**)(void **))*a2 + 15))(a2);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  }
  else
  {
    v15 = 0;
  }
  fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::InvertMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)a2);
  (*((void (**)(void **, uint64_t))*a2 + 35))(a2, v15);
  (*((void (**)(void **, uint64_t))*a2 + 36))(a2, v13);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!(*((uint64_t (**)(void **, uint64_t, uint64_t))*a2 + 8))(a2, 0x4000000000, 1)
    && !fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Topological sorting of state-level lattice failed (probably", 59);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" your lexicon has empty words or your LM has epsilon cycles", 59);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, ").");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)a2);
  v16 = fst::DeterminizeLatticePhonePruned<fst::LatticeWeightTpl<float>,int>(a1, a2, a3, a4, a5, a6);
  fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a3);
  return v16;
}

uint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::LatticeDeterminizerPruned(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(double *)(a1 + 64) = a4;
  v7 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a3;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 96) = v7;
  *(_BYTE *)(a1 + 112) = 0;
  std::unordered_map<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const* const,int>>>::unordered_map(a1 + 120, 3uLL, a1 + 104, (int *)(a1 + 108));
  std::unordered_map<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const* const,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::unordered_map(a1 + 160, 3uLL, a1 + 104, (int *)(a1 + 108));
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  fst::LatticeStringRepository<int>::LatticeStringRepository(a1 + 280);
  return a1;
}

void sub_1ADA89C44(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;

  v8 = v1[32];
  if (v8)
  {
    v1[33] = v8;
    operator delete(v8);
  }
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::LatticeDeterminizerPruned(v5, v4, v3, (uint64_t)v1);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2);
  v9 = *v6;
  if (*v6)
  {
    v1[6] = v9;
    operator delete(v9);
  }
  v10 = *v1;
  if (*v1)
  {
    v1[1] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const* const,int>>>::unordered_map(uint64_t a1, size_t a2, uint64_t a3, int *a4)
{
  int v5;

  v5 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_DWORD *)(a1 + 36) = v5;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADA89CEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const* const,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::unordered_map(uint64_t a1, size_t a2, uint64_t a3, int *a4)
{
  int v5;

  v5 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_DWORD *)(a1 + 36) = v5;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADA89D38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeStringRepository<int>::LatticeStringRepository(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)a1 = operator new();
  return a1;
}

void sub_1ADA89DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::LatticeStringRepository<int>::~LatticeStringRepository(_QWORD *a1)
{
  fst::LatticeStringRepository<int>::Destroy(a1);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t fst::LatticeStringRepository<int>::Destroy(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *i;
  uint64_t v4;
  _OWORD v6[2];
  int v7;

  v2 = (uint64_t)(a1 + 1);
  for (i = (_QWORD *)a1[3]; i; i = (_QWORD *)*i)
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D190](v4, 0x1060C40ADAFC7CALL);
  }
  memset(v6, 0, sizeof(v6));
  v7 = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::swap((uint64_t)v6, v2);
  if (*a1)
  {
    MEMORY[0x1AF44D190](*a1, 0x1060C40ADAFC7CALL);
    *a1 = 0;
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v6);
}

uint64_t *fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::~LatticeDeterminizerPruned(uint64_t *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeMostMemory(a1);
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeOutputStates((uint64_t)a1);
  fst::LatticeStringRepository<int>::~LatticeStringRepository(a1 + 35);
  v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = (uint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = (uint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)a1[25];
  if (v4)
  {
    a1[26] = (uint64_t)v4;
    operator delete(v4);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 20));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 15));
  v5 = (void *)a1[5];
  if (v5)
  {
    a1[6] = (uint64_t)v5;
    operator delete(v5);
  }
  v6 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v6;
    operator delete(v6);
  }
  return a1;
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeMostMemory(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t *v15;
  uint64_t j;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v2 = a1[4];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    a1[4] = 0;
  }
  v23 = 0u;
  v24 = 0u;
  v25 = 0x3A8000003F800000;
  std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap((uint64_t)&v23, (uint64_t)(a1 + 15));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v23);
  v3 = *a1;
  if (a1[1] != *a1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      v6 = *(void **)v5;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)v5 = 0;
      if (v6)
        operator delete(v6);
      ++v4;
      v3 = *a1;
    }
    while (v4 < (a1[1] - *a1) >> 3);
  }
  for (i = (_QWORD *)a1[22]; i; i = (_QWORD *)*i)
  {
    v8 = i[2];
    if (v8)
    {
      v9 = *(void **)v8;
      if (*(_QWORD *)v8)
      {
        *(_QWORD *)(v8 + 8) = v9;
        operator delete(v9);
      }
      MEMORY[0x1AF44D190](v8, 0x20C40960023A9);
    }
  }
  v23 = 0u;
  v24 = 0u;
  v25 = 0x3A8000003F800000;
  std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap((uint64_t)&v23, (uint64_t)(a1 + 20));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v23);
  v10 = *a1;
  if (a1[1] != *a1)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(v10 + 8 * v11);
      v13 = *(void **)v12;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)v12 = 0;
      if (v13)
        operator delete(v13);
      ++v11;
      v10 = *a1;
    }
    while (v11 < (a1[1] - *a1) >> 3);
  }
  v14 = (void *)a1[32];
  a1[33] = 0;
  a1[34] = 0;
  a1[32] = 0;
  if (v14)
    operator delete(v14);
  v15 = (uint64_t *)a1[25];
  for (j = a1[26]; v15 != (uint64_t *)j; a1[26] = j)
  {
    v17 = *v15;
    if (*v15)
    {
      v18 = *(void **)(v17 + 8);
      if (v18)
      {
        *(_QWORD *)(v17 + 16) = v18;
        operator delete(v18);
      }
      MEMORY[0x1AF44D190](v17, 0x1020C40CC82F220);
      v15 = (uint64_t *)a1[25];
      j = a1[26];
    }
    if (j - (uint64_t)v15 >= 9)
    {
      v19 = *v15;
      v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>(v15, (uint64_t)&v23, (unint64_t)(j - (_QWORD)v15) >> 3);
      v21 = (_QWORD *)(j - 8);
      if ((_QWORD *)(j - 8) == v20)
      {
        *v20 = v19;
      }
      else
      {
        *v20 = *v21;
        *v21 = v19;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>((uint64_t)v15, (uint64_t)(v20 + 1), (uint64_t)&v23, v20 + 1 - v15);
      }
    }
    v15 = (uint64_t *)a1[25];
    j = a1[26] - 8;
  }
  v22 = (void *)a1[29];
  a1[30] = 0;
  a1[31] = 0;
  a1[29] = 0;
  if (v22)
    operator delete(v22);
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeOutputStates(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        v7 = *(void **)(v6 + 24);
        if (v7)
        {
          *(_QWORD *)(v6 + 32) = v7;
          operator delete(v7);
        }
        v8 = *(void **)v6;
        if (*(_QWORD *)v6)
        {
          *(_QWORD *)(v6 + 8) = v8;
          operator delete(v8);
        }
        MEMORY[0x1AF44D190](v6, 0x1020C405B906368);
        v2 = *(_QWORD **)a1;
        v3 = *(_QWORD **)(a1 + 8);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    operator delete(v2);
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = &a1[v3];
    v9 = v6[1];
    v7 = v6 + 1;
    v8 = v9;
    v10 = (2 * v3) | 1;
    v11 = 2 * v3 + 2;
    if (v11 < a3 && *(double *)(v8 + 32) > *(double *)(v7[1] + 32))
    {
      v8 = v7[1];
      ++v7;
      v10 = v11;
    }
    *a1 = v8;
    a1 = v7;
    v3 = v10;
  }
  while (v10 <= v5);
  return v7;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  _QWORD *v11;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_QWORD *)(result + 8 * v4);
    v6 = *v5;
    v9 = *(_QWORD *)(a2 - 8);
    v7 = (_QWORD *)(a2 - 8);
    v8 = v9;
    v10 = *(double *)(v9 + 32);
    if (*(double *)(*v5 + 32) > v10)
    {
      do
      {
        v11 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (_QWORD *)(result + 8 * v4);
        v6 = *v5;
        v7 = v11;
      }
      while (*(double *)(*v5 + 32) > v10);
      *v11 = v8;
    }
  }
  return result;
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::InitializeDeterminization(uint64_t a1)
{
  int v2;
  int v3;
  size_t v4;
  int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  void *__p;
  _BYTE *v23;
  uint64_t **v24;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32), 0x4000000000, 1);
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ComputeBackwardWeight(a1);
  if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32), 1, 0))
  {
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 160))(*(_QWORD *)(a1 + 32));
    if (v2 >= 0)
      v3 = v2;
    else
      v3 = v2 + 1;
    v4 = (v3 >> 1) + 3;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1 + 120, v4);
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1 + 160, v4);
  }
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  if (v5 != -1)
  {
    v6 = v5;
    std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::vector(&__p, 1uLL);
    v7 = __p;
    *(_DWORD *)__p = v6;
    v7[1] = 0;
    v7[2] = 0;
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::EpsilonClosure(a1, (uint64_t *)&__p);
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ConvertToMinimal(a1, (unsigned int **)&__p);
    v8 = operator new();
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__init_with_size[abi:ne180100]<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>((char *)v8, (uint64_t)__p, (uint64_t)v23, 0xAAAAAAAAAAAAAAABLL * ((v23 - (_BYTE *)__p) >> 3));
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    v9 = *(uint64_t **)a1;
    v10 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)a1 >= v10)
    {
      v12 = v10 - (_QWORD)v9;
      v13 = v12 >> 2;
      if ((unint64_t)(v12 >> 2) <= 1)
        v13 = 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 16, v14);
      v17 = &v15[v16];
      *v15 = v8;
      v11 = v15 + 1;
      v19 = *(uint64_t **)a1;
      v18 = *(uint64_t **)(a1 + 8);
      if (v18 != *(uint64_t **)a1)
      {
        do
        {
          v20 = *--v18;
          *--v15 = v20;
        }
        while (v18 != v19);
        v18 = *(uint64_t **)a1;
      }
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v8;
      v11 = v9 + 1;
    }
    *(_QWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 28) -= 1431655765 * ((unint64_t)(v23 - (_BYTE *)__p) >> 3);
    v21 = (uint64_t *)v8;
    v24 = &v21;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>>>::__emplace_unique_key_args<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::piecewise_construct_t const&,std::tuple<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*&&>,std::tuple<>>(a1 + 120, &v21, (uint64_t)&std::piecewise_construct, &v24)+ 6) = 0;
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ProcessFinal(a1, 0);
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ProcessTransitions(a1, 0);
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
  }
}

void sub_1ADA8A4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::CheckMemoryUsage(uint64_t a1)
{
  int v1;
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD v15[35];

  v1 = *(_DWORD *)(a1 + 84);
  if (v1 < 1)
    return 1;
  v3 = 24 * *(_DWORD *)(a1 + 28) + 32 * *(_DWORD *)(a1 + 24);
  if (v3 + 32 * *(_DWORD *)(a1 + 312) <= v1)
    return 1;
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::RebuildRepository((_QWORD *)a1);
  v4 = *(_DWORD *)(a1 + 312);
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Rebuilt repository in determinize-lattice: repository shrank from ", 66);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" to ", 4);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" bytes (approximately)", 22);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15);
  }
  if (v3 + 32 * v4 <= (int)((double)*(int *)(a1 + 84) * 0.8))
    return 1;
  if (*(_QWORD *)(a1 + 200) != *(_QWORD *)(a1 + 208))
    (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Did not reach requested beam in determinize-lattice: ", 53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"size exceeds maximum ", 21);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" bytes; (repo,arcs,elems) = (",
      29);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",", 1);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"), after rebuilding, repo size was ", 35);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", effective beam was ", 21);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" vs. requested beam ", 20);
    std::ostream::operator<<();
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
  }
  return 0;
}

void sub_1ADA8A770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ProcessTransition(uint64_t a1, int a2, int a3, uint64_t *a4)
{
  double v8;
  int v9;
  uint64_t *v10;
  float32x2_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  _QWORD *v28;
  float32x2_t v29;
  float32x2_t v30;
  uint64_t *v31;

  v8 = *(double *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * a2) + 48);
  v31 = 0;
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::NormalizeSubset(a1, a4, (uint64_t)&v30, &v31);
  v28 = 0;
  v9 = fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::InitialToStateId(a1, a4, (unint64_t *)&v29, &v28, v8 + v30.f32[0] + v30.f32[1]);
  v10 = fst::LatticeStringRepository<int>::Concatenate((uint64_t **)(a1 + 280), v31, v28);
  v31 = v10;
  v11 = vadd_f32(v30, v29);
  v30 = v11;
  v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * a2);
  v13 = v12[4];
  v14 = v12[5];
  if (v13 >= v14)
  {
    v16 = v12[3];
    v17 = (uint64_t)(v13 - v16) >> 5;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v19 = v14 - v16;
    if (v19 >> 4 > v18)
      v18 = v19 >> 4;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
      v20 = 0x7FFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(v12 + 5), v20);
    v22 = &v21[32 * v17];
    v24 = &v21[32 * v23];
    *(_DWORD *)v22 = a3;
    *((_QWORD *)v22 + 1) = v10;
    *((_DWORD *)v22 + 4) = v9;
    *(float32x2_t *)(v22 + 20) = v11;
    v15 = v22 + 32;
    v26 = (char *)v12[3];
    v25 = (char *)v12[4];
    if (v25 != v26)
    {
      do
      {
        v27 = *((_OWORD *)v25 - 2);
        *((_DWORD *)v22 - 4) = *((_DWORD *)v25 - 4);
        *((_OWORD *)v22 - 2) = v27;
        *(_QWORD *)(v22 - 12) = *(_QWORD *)(v25 - 12);
        v22 -= 32;
        v25 -= 32;
      }
      while (v25 != v26);
      v25 = (char *)v12[3];
    }
    v12[3] = v22;
    v12[4] = v15;
    v12[5] = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *(_DWORD *)v13 = a3;
    *(_QWORD *)(v13 + 8) = v10;
    *(_DWORD *)(v13 + 16) = v9;
    v15 = (char *)(v13 + 32);
    *(float32x2_t *)(v13 + 20) = v11;
  }
  v12[4] = v15;
  ++*(_DWORD *)(a1 + 24);
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ComputeBackwardWeight(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  _QWORD v14[3];
  _DWORD *v15;
  unint64_t v16;

  v2 = (_QWORD *)(a1 + 40);
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 160))(*(_QWORD *)(a1 + 32));
  std::vector<double>::resize((uint64_t)v2, v3);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 160))(*(_QWORD *)(a1 + 32));
  if (v4 < 1)
    goto LABEL_20;
  v5 = v4;
  do
  {
    v6 = v5--;
    v7 = *(_QWORD *)(a1 + 40);
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 32))(v14, *(_QWORD *)(a1 + 32), v5);
    *(double *)(v7 + 8 * v5) = *(float *)v14 + *((float *)v14 + 1);
    v8 = *(_QWORD *)(a1 + 32);
    v16 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v8 + 136))(v8, v5, v14);
    while (1)
    {
      if (!v14[0])
      {
        if (v16 >= v14[2])
          goto LABEL_17;
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v14[0] + 24))(v14[0]))
        break;
      if (v14[0])
      {
        v9 = (*(uint64_t (**)(void))(*(_QWORD *)v14[0] + 32))();
        v10 = v14[0];
        goto LABEL_10;
      }
LABEL_9:
      v10 = 0;
      v9 = v14[1] + 20 * v16;
LABEL_10:
      v11 = *(float *)(v9 + 8) + *(float *)(v9 + 12) + *(double *)(*v2 + 8 * *(int *)(v9 + 16));
      if (v11 >= *(double *)(v7 + 8 * v5))
        v11 = *(double *)(v7 + 8 * v5);
      *(double *)(v7 + 8 * v5) = v11;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
      else
        ++v16;
    }
    if (v14[0])
    {
      (*(void (**)(void))(*(_QWORD *)v14[0] + 8))();
      continue;
    }
LABEL_17:
    if (v15)
      --*v15;
  }
  while (v6 > 1);
LABEL_20:
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)) != -1)
  {
    v12 = *(double *)(*(_QWORD *)(a1 + 40)
                    + 8 * (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)));
    if (v12 == INFINITY && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Total weight of input lattice is zero.", 38);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    }
    *(double *)(a1 + 72) = v12 + *(double *)(a1 + 64);
  }
}

void sub_1ADA8AB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::EpsilonClosure(uint64_t a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  _BYTE *v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  _OWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  float v26;
  float v27;
  uint64_t *v28;
  uint64_t *v29;
  float v30;
  float v31;
  int v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  _QWORD *v36;
  int v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  _OWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  _QWORD *v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  _BYTE v57[24];
  _DWORD *v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  _QWORD *v62;
  _BYTE *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  int v67;
  float v68;
  int v69;
  __int128 *v70;

  v65 = 0u;
  v66 = 0u;
  v67 = 1065353216;
  v4 = (char *)*a2;
  if (a2[1] != *a2)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = &v4[v5];
      *(_DWORD *)v57 = *(_DWORD *)v7;
      *(_OWORD *)&v57[8] = *(_OWORD *)v7;
      v58 = (_DWORD *)*((_QWORD *)v7 + 2);
      std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::pair<int const,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> const&>((uint64_t)&v65, (int *)v57, (uint64_t)v57);
      ++v6;
      v4 = (char *)*a2;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  v8 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32), 0x10000000, 0);
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v9 = *a2;
  if (*a2 == a2[1])
    goto LABEL_56;
  v10 = v8;
  do
  {
    std::priority_queue<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::push((uint64_t *)&v62, v9);
    v9 += 24;
  }
  while (v9 != a2[1]);
  v11 = v62;
  v12 = v63;
  v13 = v63 - (_BYTE *)v62;
  if (v63 == (_BYTE *)v62)
    goto LABEL_56;
  v54 = 0;
  v14 = 0;
  do
  {
    v60 = *(_OWORD *)v11;
    v61 = v11[2];
    if (v13 >= 25)
    {
      *(_OWORD *)v57 = *(_OWORD *)v11;
      v16 = *((_DWORD *)v11 + 4);
      v15 = *((_DWORD *)v11 + 5);
      v17 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>>((uint64_t)v11, (uint64_t)&v55, v13 / 0x18uLL);
      v18 = v12 - 24;
      if (v12 - 24 == (_BYTE *)v17)
      {
        *(_OWORD *)v17 = *(_OWORD *)v57;
        *(_DWORD *)(v17 + 16) = v16;
        *(_DWORD *)(v17 + 20) = v15;
      }
      else
      {
        *(_OWORD *)v17 = *v18;
        *(_QWORD *)(v17 + 16) = *((_QWORD *)v12 - 1);
        *v18 = *(_OWORD *)v57;
        *((_DWORD *)v12 - 2) = v16;
        *((_DWORD *)v12 - 1) = v15;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>>((uint64_t)v11, v17 + 24, (uint64_t)&v55, 0xAAAAAAAAAAAAAAABLL * ((v17 + 24 - (uint64_t)v11) >> 3));
      }
      v12 = v63;
    }
    v63 = v12 - 24;
    if ((v14 & 1) != 0)
    {
      *(_QWORD *)v57 = &v60;
      v19 = std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v65, (int *)&v60, (uint64_t)&std::piecewise_construct, (_DWORD **)v57);
      if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element::operator!=((uint64_t)(v19 + 3), (uint64_t)&v60))
      {
        v14 = 1;
        goto LABEL_55;
      }
    }
    v20 = *(_DWORD *)(a1 + 88);
    if (v20 >= 1)
    {
      if (v54 > v20)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Lattice determinization aborted since looped more than ", 55);
        v53 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" times during epsilon closure.\n", 31);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v57);
      }
      ++v54;
    }
    v21 = *(_QWORD *)(a1 + 32);
    v59 = 0;
    (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v21 + 136))(v21, v60, v57);
    while (1)
    {
      if (!*(_QWORD *)v57)
      {
        if (v59 >= *(_QWORD *)&v57[16])
          goto LABEL_53;
LABEL_26:
        v24 = *(_QWORD *)&v57[8] + 20 * v59;
        goto LABEL_27;
      }
      v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v57 + 24))(*(_QWORD *)v57);
      v23 = *(_QWORD *)v57;
      if ((v22 & 1) != 0)
        goto LABEL_51;
      if (!*(_QWORD *)v57)
        goto LABEL_26;
      v24 = (*(uint64_t (**)(void))(**(_QWORD **)v57 + 32))();
LABEL_27:
      v25 = *(_DWORD *)v24;
      if ((v10 & 0x10000000) != 0)
      {
        if (v25)
          break;
      }
      if (!v25)
      {
        LODWORD(v55) = 0;
        v26 = *(float *)(v24 + 8);
        v27 = *(float *)(v24 + 12);
        *(float *)&v55 = v26;
        *(float *)&v70 = v27;
        v69 = 2139095040;
        v68 = INFINITY;
        if (v26 != INFINITY || *(float *)&v70 != v68)
        {
          LODWORD(v55) = *(_DWORD *)(v24 + 16);
          *(float *)&v56 = *(float *)&v61 + v26;
          *((float *)&v56 + 1) = *((float *)&v61 + 1) + v27;
          v28 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v65, (int *)&v55);
          v29 = v28;
          if (v28)
          {
            v30 = *((float *)v28 + 10);
            v31 = v30 + *((float *)v28 + 11);
            if ((float)(*(float *)&v56 + *((float *)&v56 + 1)) < v31)
              goto LABEL_36;
            if ((float)(*(float *)&v56 + *((float *)&v56 + 1)) <= v31)
            {
              if (*(float *)&v56 < v30)
                goto LABEL_36;
              if (*(float *)&v56 <= v30)
              {
                v37 = *(_DWORD *)(v24 + 4);
                v38 = (uint64_t *)*((_QWORD *)&v60 + 1);
                if (v37)
                  v38 = fst::LatticeStringRepository<int>::Successor((uint64_t **)(a1 + 280), *((uint64_t *)&v60 + 1), v37);
                *((_QWORD *)&v55 + 1) = v38;
                if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Compare(a1, (float *)&v56, v38, (float *)v29 + 10, (uint64_t *)v29[4]) == 1)
                {
LABEL_36:
                  v32 = *(_DWORD *)(v24 + 4);
                  v33 = (uint64_t *)*((_QWORD *)&v60 + 1);
                  if (v32)
                    v33 = fst::LatticeStringRepository<int>::Successor((uint64_t **)(a1 + 280), *((uint64_t *)&v60 + 1), v32);
                  *((_QWORD *)&v55 + 1) = v33;
                  v29[4] = (uint64_t)v33;
                  v29[5] = v56;
                  std::priority_queue<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::push((uint64_t *)&v62, (uint64_t)&v55);
                  v14 = 1;
                }
              }
            }
          }
          else
          {
            v34 = *(_DWORD *)(v24 + 4);
            v35 = (uint64_t *)*((_QWORD *)&v60 + 1);
            if (v34)
              v35 = fst::LatticeStringRepository<int>::Successor((uint64_t **)(a1 + 280), *((uint64_t *)&v60 + 1), v34);
            *((_QWORD *)&v55 + 1) = v35;
            v70 = &v55;
            v36 = std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v65, (int *)&v55, (uint64_t)&std::piecewise_construct, (_DWORD **)&v70);
            *(_OWORD *)(v36 + 3) = v55;
            v36[5] = v56;
            std::priority_queue<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::push((uint64_t *)&v62, (uint64_t)&v55);
          }
        }
      }
      if (*(_QWORD *)v57)
        (*(void (**)(_QWORD))(**(_QWORD **)v57 + 40))(*(_QWORD *)v57);
      else
        ++v59;
    }
    v23 = *(_QWORD *)v57;
LABEL_51:
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      goto LABEL_55;
    }
LABEL_53:
    if (v58)
      --*v58;
LABEL_55:
    v11 = v62;
    v12 = v63;
    v13 = v63 - (_BYTE *)v62;
  }
  while (v63 != (_BYTE *)v62);
LABEL_56:
  a2[1] = *a2;
  std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::reserve((void **)a2, *((unint64_t *)&v66 + 1));
  v39 = (_QWORD *)v66;
  if ((_QWORD)v66)
  {
    v40 = a2 + 2;
    v41 = (char *)a2[1];
    do
    {
      v42 = v39 + 3;
      if ((unint64_t)v41 >= *v40)
      {
        v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v41[-*a2] >> 3);
        v44 = v43 + 1;
        if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((*v40 - *a2) >> 3) > v44)
          v44 = 0x5555555555555556 * ((*v40 - *a2) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((*v40 - *a2) >> 3) >= 0x555555555555555)
          v45 = 0xAAAAAAAAAAAAAAALL;
        else
          v45 = v44;
        v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a2 + 2), v45);
        v48 = &v46[24 * v43];
        *(_OWORD *)v48 = *v42;
        *((_QWORD *)v48 + 2) = v39[5];
        v50 = (char *)*a2;
        v49 = (char *)a2[1];
        v51 = v48;
        if (v49 != (char *)*a2)
        {
          do
          {
            *(_OWORD *)(v51 - 24) = *(_OWORD *)(v49 - 24);
            *((_QWORD *)v51 - 1) = *((_QWORD *)v49 - 1);
            v51 -= 24;
            v49 -= 24;
          }
          while (v49 != v50);
          v49 = (char *)*a2;
        }
        v41 = v48 + 24;
        *a2 = (uint64_t)v51;
        a2[1] = (uint64_t)(v48 + 24);
        a2[2] = (uint64_t)&v46[24 * v47];
        if (v49)
          operator delete(v49);
      }
      else
      {
        *(_OWORD *)v41 = *v42;
        *((_QWORD *)v41 + 2) = v39[5];
        v41 += 24;
      }
      a2[1] = (uint64_t)v41;
      v39 = (_QWORD *)*v39;
    }
    while (v39);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v65);
}

void sub_1ADA8B248(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 208);
  if (v3)
  {
    *(_QWORD *)(v1 - 200) = v3;
    operator delete(v3);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1 - 176);
  _Unwind_Resume(a1);
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ConvertToMinimal(uint64_t a1, unsigned int **a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a2;
  do
  {
    if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal(a1, *v4))
    {
      *(_OWORD *)v6 = *(_OWORD *)v4;
      *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
      v6 += 6;
    }
    v4 += 6;
  }
  while (v4 != v5);
  std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::resize((uint64_t)a2, 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)*a2) >> 3));
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ProcessFinal(uint64_t a1, int a2)
{
  uint64_t v2;
  float32x2_t *v3;
  float32x2_t *v4;
  uint64_t *v6;
  char v7;
  float32x2_t v8;
  uint64_t *v9;
  int32x2_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  float32x2_t v26;
  float32x2_t v27;
  int32x2_t v28;
  float v29;
  int v30;
  float v31;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
  v28 = vdup_n_s32(0x7F800000u);
  v3 = *(float32x2_t **)v2;
  v4 = *(float32x2_t **)(v2 + 8);
  if (*(float32x2_t **)v2 == v4)
    return;
  v6 = 0;
  v7 = 0;
  do
  {
    (*(void (**)(float32x2_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 32))(&v26, *(_QWORD *)(a1 + 32), v3->u32[0]);
    v8 = vadd_f32(v3[2], v26);
    v27 = v8;
    v9 = (uint64_t *)v3[1];
    v31 = v8.f32[1];
    v26.i32[0] = v8.i32[0];
    v30 = 2139095040;
    v29 = INFINITY;
    if (v8.f32[0] != INFINITY || v31 != v29)
    {
      if ((v7 & 1) == 0)
        goto LABEL_8;
      if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Compare(a1, (float *)&v27, v9, (float *)&v28, v6) == 1)
      {
        v8 = v27;
LABEL_8:
        v28 = (int32x2_t)v8;
        v7 = 1;
        v6 = v9;
        goto LABEL_10;
      }
      v7 = 1;
    }
LABEL_10:
    v3 += 3;
  }
  while (v3 != v4);
  if ((v7 & 1) != 0)
  {
    v10 = v28;
    if (*(double *)(v2 + 48) + *(float *)v28.i32 + *(float *)&v28.i32[1] <= *(double *)(a1 + 72))
    {
      v11 = *(_QWORD *)(v2 + 40);
      v12 = *(_QWORD *)(v2 + 32);
      if (v12 >= v11)
      {
        v14 = *(_QWORD *)(v2 + 24);
        v15 = (uint64_t)(v12 - v14) >> 5;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = v11 - v14;
        if (v17 >> 4 > v16)
          v16 = v17 >> 4;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
          v18 = 0x7FFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v2 + 40, v18);
        v20 = &v19[32 * v15];
        v22 = &v19[32 * v21];
        *(_DWORD *)v20 = 0;
        *((_QWORD *)v20 + 1) = v6;
        *((_DWORD *)v20 + 4) = -1;
        *(int32x2_t *)(v20 + 20) = v10;
        v13 = v20 + 32;
        v24 = *(char **)(v2 + 24);
        v23 = *(char **)(v2 + 32);
        if (v23 != v24)
        {
          do
          {
            v25 = *((_OWORD *)v23 - 2);
            *((_DWORD *)v20 - 4) = *((_DWORD *)v23 - 4);
            *((_OWORD *)v20 - 2) = v25;
            *(_QWORD *)(v20 - 12) = *(_QWORD *)(v23 - 12);
            v20 -= 32;
            v23 -= 32;
          }
          while (v23 != v24);
          v23 = *(char **)(v2 + 24);
        }
        *(_QWORD *)(v2 + 24) = v20;
        *(_QWORD *)(v2 + 32) = v13;
        *(_QWORD *)(v2 + 40) = v22;
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_DWORD *)v12 = 0;
        *(_QWORD *)(v12 + 8) = v6;
        *(_DWORD *)(v12 + 16) = -1;
        v13 = (char *)(v12 + 32);
        *(int32x2_t *)(v12 + 20) = v10;
      }
      *(_QWORD *)(v2 + 32) = v13;
      ++*(_DWORD *)(a1 + 24);
    }
  }
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ProcessTransitions(uint64_t a1, int a2)
{
  uint64_t *v3;
  float32x2_t **v4;
  float32x2_t *v5;
  float32x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  float32x2_t *v10;
  __int32 v11;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float **v23;
  _QWORD *v24;
  int v25;
  char *v26;
  _OWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  float *v34;
  float *v35;
  char *v36;
  double v37;
  double v38;
  float *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  double v52;
  _QWORD *v54;
  char **v55;
  _QWORD v57[3];
  _DWORD *v58;
  unint64_t v59;
  float v60;
  __int128 v61;
  float32x2_t v62;
  float v63;
  int v64;
  float v65;

  v3 = (uint64_t *)(a1 + 232);
  v4 = *(float32x2_t ***)(*(_QWORD *)a1 + 8 * a2);
  v5 = *v4;
  v6 = v4[1];
  if (*v4 == v6)
    goto LABEL_26;
  do
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = v5->u32[0];
    v59 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, v8, v57);
    while (1)
    {
      if (!v57[0])
      {
        if (v59 >= v57[2])
          goto LABEL_23;
LABEL_8:
        v10 = (float32x2_t *)(v57[1] + 20 * v59);
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v57[0] + 24))(v57[0]))
        break;
      if (!v57[0])
        goto LABEL_8;
      v10 = (float32x2_t *)(*(uint64_t (**)(void))(*(_QWORD *)v57[0] + 32))();
LABEL_9:
      if (v10->i32[0])
      {
        v60 = 0.0;
        v60 = v10[1].f32[0];
        v65 = 0.0;
        v65 = v10[1].f32[1];
        v64 = 2139095040;
        v63 = INFINITY;
        if (v60 != INFINITY || (v9.n128_f32[0] = v65, v65 != v63))
        {
          v61 = 0uLL;
          v62 = 0;
          v11 = v10[2].i32[0];
          v60 = v10->f32[0];
          LODWORD(v61) = v11;
          v62 = vadd_f32(v5[2], v10[1]);
          v12 = v10->i32[1];
          v13 = (uint64_t *)v5[1];
          if (v12)
            v13 = fst::LatticeStringRepository<int>::Successor((uint64_t **)(a1 + 280), (uint64_t)v13, v12);
          *((_QWORD *)&v61 + 1) = v13;
          v14 = *(_QWORD *)(a1 + 240);
          if (v14 >= *(_QWORD *)(a1 + 248))
          {
            v15 = std::vector<std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__push_back_slow_path<std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> const&>(v3, (uint64_t)&v60);
          }
          else
          {
            *(float *)v14 = v60;
            v9.n128_u64[1] = *((_QWORD *)&v61 + 1);
            *(_OWORD *)(v14 + 8) = v61;
            v9.n128_u64[0] = (unint64_t)v62;
            *(float32x2_t *)(v14 + 24) = v62;
            v15 = v14 + 32;
          }
          *(_QWORD *)(a1 + 240) = v15;
        }
      }
      if (v57[0])
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v57[0] + 40))(v57[0], v9);
      else
        ++v59;
    }
    if (v57[0])
    {
      (*(void (**)(void))(*(_QWORD *)v57[0] + 8))();
      goto LABEL_25;
    }
LABEL_23:
    if (v58)
      --*v58;
LABEL_25:
    v5 += 3;
  }
  while (v5 != v6);
LABEL_26:
  v16 = *(int **)(a1 + 232);
  v17 = *(int **)(a1 + 240);
  v18 = 126 - 2 * __clz(((char *)v17 - (char *)v16) >> 5);
  if (v17 == v16)
    v19 = 0;
  else
    v19 = v18;
  std::__introsort<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,false>(v16, v17, (uint64_t)v57, v19, 1);
  v20 = *(_QWORD *)(a1 + 232);
  v21 = *(_QWORD *)(a1 + 240);
  if (v20 != v21)
  {
    v55 = (char **)(a1 + 200);
    do
    {
      v22 = operator new();
      *(_QWORD *)(v22 + 8) = 0;
      v23 = (float **)(v22 + 8);
      *(_QWORD *)(v22 + 16) = 0;
      *(_QWORD *)(v22 + 24) = 0;
      v24 = (_QWORD *)(v22 + 24);
      v25 = *(_DWORD *)v20;
      *(_QWORD *)(v22 + 32) = 0x7FF0000000000000;
      *(_DWORD *)v22 = a2;
      *(_DWORD *)(v22 + 4) = v25;
      v26 = 0;
      while (1)
      {
        v27 = (_OWORD *)(v20 + 8);
        if ((unint64_t)v26 >= *v24)
        {
          v28 = 0xAAAAAAAAAAAAAAABLL * ((v26 - (char *)*v23) >> 3);
          v29 = v28 + 1;
          if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*v24 - (_QWORD)*v23) >> 3) > v29)
            v29 = 0x5555555555555556 * ((uint64_t)(*v24 - (_QWORD)*v23) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v24 - (_QWORD)*v23) >> 3) >= 0x555555555555555)
            v30 = 0xAAAAAAAAAAAAAAALL;
          else
            v30 = v29;
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v24, v30);
          v33 = &v31[24 * v28];
          *(_OWORD *)v33 = *v27;
          *((_QWORD *)v33 + 2) = *(_QWORD *)(v20 + 24);
          v35 = *(float **)(v22 + 8);
          v34 = *(float **)(v22 + 16);
          v36 = v33;
          if (v34 != v35)
          {
            do
            {
              *(_OWORD *)(v36 - 24) = *(_OWORD *)(v34 - 6);
              *((_QWORD *)v36 - 1) = *((_QWORD *)v34 - 1);
              v36 -= 24;
              v34 -= 6;
            }
            while (v34 != v35);
            v34 = *v23;
          }
          v26 = v33 + 24;
          *(_QWORD *)(v22 + 8) = v36;
          *(_QWORD *)(v22 + 16) = v33 + 24;
          *(_QWORD *)(v22 + 24) = &v31[24 * v32];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_OWORD *)v26 = *v27;
          *((_QWORD *)v26 + 2) = *(_QWORD *)(v20 + 24);
          v26 += 24;
        }
        *(_QWORD *)(v22 + 16) = v26;
        v37 = *(float *)(v20 + 24) + *(float *)(v20 + 28) + *(double *)(*(_QWORD *)(a1 + 40) + 8 * *(int *)(v20 + 8));
        if (v37 >= *(double *)(v22 + 32))
          v37 = *(double *)(v22 + 32);
        *(double *)(v22 + 32) = v37;
        v20 += 32;
        if (v20 == v21)
          break;
        if (*(_DWORD *)v20 != v25)
          goto LABEL_51;
      }
      v20 = v21;
LABEL_51:
      v38 = *(double *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * a2) + 48) + v37;
      *(double *)(v22 + 32) = v38;
      if (v38 <= *(double *)(a1 + 72))
      {
        fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::MakeSubsetUnique(a1, v23);
        v41 = *(uint64_t **)(a1 + 208);
        v40 = *(_QWORD *)(a1 + 216);
        if ((unint64_t)v41 >= v40)
        {
          v43 = ((char *)v41 - *v55) >> 3;
          if ((unint64_t)(v43 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v44 = v40 - (_QWORD)*v55;
          v45 = v44 >> 2;
          if (v44 >> 2 <= (unint64_t)(v43 + 1))
            v45 = v43 + 1;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
            v46 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v46 = v45;
          if (v46)
            v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 216, v46);
          else
            v47 = 0;
          v48 = (uint64_t *)&v47[8 * v43];
          *v48 = v22;
          v42 = (uint64_t)(v48 + 1);
          v50 = *(char **)(a1 + 200);
          v49 = *(char **)(a1 + 208);
          if (v49 != v50)
          {
            do
            {
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
              *--v48 = v51;
            }
            while (v49 != v50);
            v49 = *v55;
          }
          *(_QWORD *)(a1 + 200) = v48;
          *(_QWORD *)(a1 + 208) = v42;
          *(_QWORD *)(a1 + 216) = &v47[8 * v46];
          if (v49)
            operator delete(v49);
        }
        else
        {
          *v41 = v22;
          v42 = (uint64_t)(v41 + 1);
        }
        *(_QWORD *)(a1 + 208) = v42;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>(*(_QWORD *)(a1 + 200), v42, (uint64_t)v57, (v42 - *(_QWORD *)(a1 + 200)) >> 3);
        v52 = *(double *)(*(_QWORD *)(a1 + 40)
                        + 8 * (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)));
        if (*(double *)(v22 + 32) < v52 - (fabs(v52) * 0.0001 + 0.01) && kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v57);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Cost below best cost was encountered:", 37);
          v54 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" < ", 3);
          std::ostream::operator<<();
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v57);
        }
      }
      else
      {
        v39 = *v23;
        if (*v23)
        {
          *(_QWORD *)(v22 + 16) = v39;
          operator delete(v39);
        }
        MEMORY[0x1AF44D190](v22, 0x1020C40CC82F220);
      }
    }
    while (v20 != v21);
    v20 = *v3;
  }
  *(_QWORD *)(a1 + 240) = v20;
}

void sub_1ADA8BB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1ADA8BC3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::priority_queue<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::push(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v12);
    v14 = &v13[24 * v9];
    v16 = &v13[24 * v15];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    v8 = (uint64_t)(v14 + 24);
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != (char *)*a1)
    {
      do
      {
        *(_OWORD *)(v14 - 24) = *(_OWORD *)(v17 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v17 - 1);
        v14 -= 24;
        v17 -= 24;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = (uint64_t)v14;
    a1[1] = v8;
    a1[2] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
    v8 = v7 + 24;
  }
  a1[1] = v8;
  return std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>>(*a1, v8, (uint64_t)&v20, 0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3));
}

BOOL fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element::operator!=(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 != *(_DWORD *)a2
      || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
      || *(float *)(a1 + 16) != *(float *)(a2 + 16)
      || *(float *)(a1 + 20) != *(float *)(a2 + 20);
}

uint64_t *fst::LatticeStringRepository<int>::Successor(uint64_t **a1, uint64_t a2, int a3)
{
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  uint64_t *v7;

  v4 = *a1;
  *v4 = a2;
  *((_DWORD *)v4 + 2) = a3;
  v5 = std::__hash_table<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::EntryKey,fst::LatticeStringRepository<int>::EntryEqual,std::allocator<fst::LatticeStringRepository<int>::Entry const*>>::__emplace_unique_key_args<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::Entry const* const&>((uint64_t)(a1 + 1), a1, a1);
  if (!v6)
    return (uint64_t *)v5[2];
  v7 = *a1;
  *a1 = (uint64_t *)operator new();
  return v7;
}

uint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Compare(int a1, float *a2, uint64_t *a3, float *a4, uint64_t *a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  int v10;
  unsigned int *begin;
  unint64_t v12;
  unint64_t v13;
  signed int v15;
  signed int v16;
  uint64_t v17;
  std::vector<unsigned int> v18;
  std::vector<unsigned int> __p;

  v5 = *a2;
  v6 = *a2 + a2[1];
  v7 = *a4;
  v8 = *a4 + a4[1];
  if (v6 < v8)
    return 1;
  if (v6 > v8)
    return 0xFFFFFFFFLL;
  if (v5 < v7)
    return 1;
  if (v5 > v7)
    return 0xFFFFFFFFLL;
  v9 = (uint64_t)a5;
  if (a3 == a5)
    return 0;
  memset(&__p, 0, sizeof(__p));
  memset(&v18, 0, sizeof(v18));
  v10 = a1 + 280;
  fst::LatticeStringRepository<int>::ConvertToVector(a1 + 280, a3, &__p);
  fst::LatticeStringRepository<int>::ConvertToVector(v10, (uint64_t *)v9, &v18);
  begin = __p.__begin_;
  v12 = (unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2;
  v13 = (unint64_t)((char *)v18.__end_ - (char *)v18.__begin_) >> 2;
  if ((int)v12 <= (int)v13)
  {
    if ((int)v12 >= (int)v13)
    {
      if ((int)v12 < 1)
        goto LABEL_20;
      v15 = *__p.__begin_;
      v16 = *v18.__begin_;
      if ((signed int)*__p.__begin_ < (signed int)*v18.__begin_)
        goto LABEL_8;
      v17 = 1;
      while (v15 <= v16)
      {
        if (((unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2) != v17)
        {
          v15 = __p.__begin_[v17];
          v16 = v18.__begin_[v17++];
          v9 = 0xFFFFFFFFLL;
          if (v15 >= v16)
            continue;
        }
        goto LABEL_20;
      }
    }
    v9 = 1;
    goto LABEL_20;
  }
LABEL_8:
  v9 = 0xFFFFFFFFLL;
LABEL_20:
  if (v18.__begin_)
  {
    v18.__end_ = v18.__begin_;
    operator delete(v18.__begin_);
    begin = __p.__begin_;
  }
  if (begin)
  {
    __p.__end_ = begin;
    operator delete(begin);
  }
  return v9;
}

void sub_1ADA8BFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *(_OWORD *)(v12 - 24) = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

char *std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::pair<int const,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 24);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *(_QWORD *)v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v10)
  {
    v20 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1ADA8C2D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = result + 24 * (v4 >> 1);
    v7 = a2 - 24;
    v8 = *(_DWORD *)(a2 - 24);
    if (*(_DWORD *)v6 > v8)
    {
      v11 = *(_QWORD *)(a2 - 20);
      v12 = *(_DWORD *)(a2 - 12);
      v9 = *(_QWORD *)(a2 - 8);
      do
      {
        v10 = v7;
        v7 = v6;
        *(_OWORD *)v10 = *(_OWORD *)v6;
        *(_QWORD *)(v10 + 16) = *(_QWORD *)(v6 + 16);
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = result + 24 * v5;
      }
      while (*(_DWORD *)v6 > v8);
      *(_DWORD *)v7 = v8;
      *(_QWORD *)(v7 + 4) = v11;
      *(_DWORD *)(v7 + 12) = v12;
      *(_QWORD *)(v7 + 16) = v9;
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1 + 24 * v3 + 24;
    v7 = (2 * v3) | 1;
    v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      v9 = *(_DWORD *)v6;
      v10 = *(_DWORD *)(v6 + 24);
      if (*(_DWORD *)v6 > v10)
        v6 += 24;
      if (v9 > v10)
        v7 = v8;
    }
    *(_OWORD *)a1 = *(_OWORD *)v6;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v6 + 16);
    a1 = v6;
    v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

_QWORD *std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1ADA8C640(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::EntryKey,fst::LatticeStringRepository<int>::EntryEqual,std::allocator<fst::LatticeStringRepository<int>::Entry const*>>::__emplace_unique_key_args<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::Entry const* const&>(uint64_t a1, uint64_t **a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = *((int *)*a2 + 2);
  v7 = **a2;
  v8 = v6 + 49109 * v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v6 + 49109 * v7;
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          v14 = i[2];
          if (*(_QWORD *)v14 == v7 && *(_DWORD *)(v14 + 8) == (_DWORD)v6)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *i = *v22;
LABEL_39:
    *v22 = i;
    goto LABEL_40;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADA8C878(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::LatticeStringRepository<int>::ConvertToVector(int a1, uint64_t *a2, std::vector<unsigned int> *this)
{
  uint64_t *v4;
  std::vector<unsigned int>::size_type v5;
  _QWORD *v6;
  std::vector<unsigned int>::pointer v7;

  if (a2)
  {
    v4 = a2;
    v5 = 0;
    v6 = v4;
    do
    {
      ++v5;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    std::vector<int>::resize(this, v5);
    v7 = this->__end_ - 1;
    do
    {
      *v7-- = *((_DWORD *)v4 + 2);
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    std::vector<int>::resize(this, 0);
  }
}

uint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __n128 v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char v14;
  std::vector<char>::value_type __x[8];
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  float v20;
  int v21;
  float v22;
  float v23;

  v4 = (uint64_t *)(a1 + 256);
  v5 = *(_QWORD *)(a1 + 256);
  v6 = *(_QWORD *)(a1 + 264) - v5;
  v7 = a2;
  if (v6 <= a2)
  {
    __x[0] = 0;
    std::vector<char>::__append((std::vector<char> *)(a1 + 256), (a2 + 1) - v6, __x);
    v5 = *v4;
  }
  v8 = *(unsigned __int8 *)(v5 + v7);
  if (v8 == 1)
    return 0;
  if (v8 == 2)
    return 1;
  *(_BYTE *)(v5 + v7) = 1;
  (*(void (**)(std::vector<char>::value_type *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 32))(__x, *(_QWORD *)(a1 + 32), a2);
  v23 = *(float *)__x;
  v22 = *(float *)&__x[4];
  v21 = 2139095040;
  v20 = INFINITY;
  v9.n128_u32[0] = *(_DWORD *)__x;
  if (*(float *)__x != INFINITY || (v9.n128_f32[0] = v22, v22 != v20))
    *(_BYTE *)(*v4 + v7) = 2;
  v10 = *(_QWORD *)(a1 + 32);
  v19 = 0;
  (*(void (**)(uint64_t, uint64_t, std::vector<char>::value_type *, __n128))(*(_QWORD *)v10 + 136))(v10, a2, __x, v9);
  while (*(_QWORD *)__x)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x) & 1) != 0)
      goto LABEL_23;
    if (!*(_QWORD *)__x)
      goto LABEL_14;
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
LABEL_15:
    if (*(_DWORD *)v12)
    {
      v23 = 0.0;
      v23 = *(float *)(v12 + 8);
      v22 = 0.0;
      v22 = *(float *)(v12 + 12);
      v21 = 2139095040;
      v20 = INFINITY;
      v11.n128_f32[0] = v23;
      if (v23 != INFINITY || (v11.n128_f32[0] = v22, v22 != v20))
      {
        v14 = 0;
        *(_BYTE *)(*v4 + v7) = 2;
        goto LABEL_24;
      }
    }
    if (*(_QWORD *)__x)
      (*(void (**)(_QWORD))(**(_QWORD **)__x + 40))(*(_QWORD *)__x);
    else
      ++v19;
  }
  if (v19 < v17)
  {
LABEL_14:
    v12 = v16 + 20 * v19;
    goto LABEL_15;
  }
LABEL_23:
  v14 = 1;
LABEL_24:
  if (*(_QWORD *)__x)
  {
    (*(void (**)(_QWORD, __n128))(**(_QWORD **)__x + 8))(*(_QWORD *)__x, v11);
  }
  else if (v18)
  {
    --*v18;
  }
  if ((v14 & 1) != 0)
    return fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal(a1, a2);
  return 1;
}

void sub_1ADA8CB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v12[24 * v11];
    v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *(_OWORD *)(v14 - 24) = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

char *std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__init_with_size[abi:ne180100]<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *(_OWORD *)v7 = *(_OWORD *)a2;
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
      v7 += 24;
      a2 += 24;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADA8CD98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>>>::__emplace_unique_key_args<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::piecewise_construct_t const&,std::tuple<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*&&>,std::tuple<>>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  int *v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v8 = (int *)**a2;
  v9 = (int *)(*a2)[1];
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v10 = *v8 + v10 * v11 + *((_QWORD *)v8 + 1);
      v11 *= 23531;
      v8 += 6;
    }
    while (v8 != v9);
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if ((fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual::operator()((float *)(a1 + 36), *((unint64_t **)i + 2), *a2) & 1) != 0)return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_QWORD *)i + 2) = **a4;
  *((_DWORD *)i + 6) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v10 >= v12)
        v4 = v10 % v12;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_43:
    *v25 = i;
    goto LABEL_44;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v24 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v26 >= v12)
        v26 %= v12;
    }
    else
    {
      v26 &= v12 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_43;
  }
LABEL_44:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADA8D020(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual::operator()(float *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  BOOL v10;

  v4 = *a2;
  v3 = a2[1];
  v5 = *a3;
  if (v3 - *a2 != a3[1] - *a3)
    return 0;
  while (v4 < v3)
  {
    if (*(_DWORD *)v4 != *(_DWORD *)v5 || *(_QWORD *)(v4 + 8) != *(_QWORD *)(v5 + 8))
      return 0;
    v6 = *(float *)(v4 + 16);
    v7 = *(float *)(v4 + 20);
    v8 = *(float *)(v5 + 16);
    v9 = *(float *)(v5 + 20);
    v10 = v6 == v8 && v7 == v9;
    if (!v10 && vabds_f32(v6 + v7, v8 + v9) > *a1)
      return 0;
    v4 += 24;
    v5 += 24;
  }
  return 1;
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::MakeSubsetUnique(int a1, float **a2)
{
  float *v3;
  float *v4;
  unint64_t v6;
  float *v7;
  float *v8;
  float *v9;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = *a2;
    while (1)
    {
      if (v3 != v7)
      {
        *(_OWORD *)v7 = *(_OWORD *)v3;
        *((_QWORD *)v7 + 2) = *((_QWORD *)v3 + 2);
      }
      if (v3 + 6 == v4)
        break;
      v8 = v3 + 10;
      while (*((_DWORD *)v8 - 4) == *(_DWORD *)v7)
      {
        if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Compare(a1, v8, *((uint64_t **)v8 - 1), v7 + 4, *((uint64_t **)v7 + 1)) == 1)
        {
          *((_QWORD *)v7 + 1) = *((_QWORD *)v8 - 1);
          *((_QWORD *)v7 + 2) = *(_QWORD *)v8;
        }
        v9 = v8 + 2;
        v8 += 6;
        if (v9 == v4)
          goto LABEL_14;
      }
      v7 += 6;
      ++v6;
      v3 = v8 - 4;
      if (v8 - 4 == v4)
        goto LABEL_16;
    }
LABEL_14:
    ++v6;
  }
LABEL_16:
  std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::resize((uint64_t)a2, v6);
}

uint64_t std::vector<std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__push_back_slow_path<std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  v11 = &v10[32 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[32 * v12];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  v17 = v11 + 32;
  std::vector<std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 += (v16 - v17 + 31) & 0xFFFFFFFFFFFFFFE0;
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1ADA8D2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,false>(int *a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  if (result != a2)
  {
    v2 = result + 32;
    if (result + 32 != a2)
    {
      v3 = 0;
      v4 = result;
      while (1)
      {
        v5 = v4;
        v4 = v2;
        v6 = *(_DWORD *)(v5 + 32);
        if (v6 < *(_DWORD *)v5)
          break;
        if (v6 <= *(_DWORD *)v5)
        {
          v7 = *(_DWORD *)(v5 + 40);
          if (v7 < *(_DWORD *)(v5 + 8))
            goto LABEL_6;
        }
LABEL_17:
        v2 = v4 + 32;
        v3 += 32;
        if (v4 + 32 == a2)
          return result;
      }
      v7 = *(_DWORD *)(v5 + 40);
LABEL_6:
      v14 = *(_DWORD *)(v5 + 52);
      v13 = *(_QWORD *)(v5 + 44);
      v8 = *(_QWORD *)(v5 + 56);
      *(_DWORD *)(v5 + 32) = *(_DWORD *)v5;
      v9 = (_DWORD *)(v5 + 8);
      *(_OWORD *)(v4 + 8) = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(v4 + 24) = *(_QWORD *)(v5 + 24);
      if (v5 == result)
      {
LABEL_13:
        v5 = result;
      }
      else
      {
        v10 = v3;
        while (1)
        {
          v11 = result + v10;
          v12 = *(_DWORD *)(result + v10 - 32);
          if (v6 >= v12)
          {
            if (v6 > v12)
              goto LABEL_14;
            if (v7 >= *(_DWORD *)(result + v10 - 24))
              break;
          }
          v9 = (_DWORD *)(v5 - 24);
          v5 -= 32;
          *(_DWORD *)v11 = v12;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)(v11 - 24);
          *(_QWORD *)(v11 + 24) = *(_QWORD *)(v11 - 8);
          v10 -= 32;
          if (!v10)
          {
            v9 = (_DWORD *)(result + 8);
            goto LABEL_13;
          }
        }
        v9 = (_DWORD *)(result + v10 + 8);
        v5 = result + v10;
      }
LABEL_14:
      *(_DWORD *)v5 = v6;
      *v9 = v7;
      *(_QWORD *)(v5 + 12) = v13;
      *(_DWORD *)(v5 + 20) = v14;
      *(_QWORD *)(v5 + 24) = v8;
      goto LABEL_17;
    }
  }
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(int *result, int *a2)
{
  int *v2;
  int *i;
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int *j;
  uint64_t v10;
  int v11;

  if (result != a2)
  {
    v2 = result + 8;
    if (result + 8 != a2)
    {
      for (i = result + 3; ; i += 8)
      {
        v4 = result;
        result = v2;
        v5 = v4[8];
        if (v5 < *v4)
          break;
        if (v5 <= *v4)
        {
          v6 = v4[10];
          if (v6 < v4[2])
            goto LABEL_6;
        }
LABEL_14:
        v2 = result + 8;
        if (result + 8 == a2)
          return result;
      }
      v6 = v4[10];
LABEL_6:
      v10 = *(_QWORD *)(v4 + 11);
      v11 = v4[13];
      v7 = *((_QWORD *)v4 + 7);
      v8 = *v4;
      for (j = i; ; j -= 8)
      {
        j[5] = v8;
        *(_OWORD *)(j + 7) = *(_OWORD *)(j - 1);
        *(_QWORD *)(j + 11) = *(_QWORD *)(j + 3);
        v8 = *(j - 11);
        if (v5 >= v8 && (v5 > v8 || v6 >= *(j - 9)))
          break;
      }
      *(j - 3) = v5;
      *(j - 1) = v6;
      *(_QWORD *)j = v10;
      j[2] = v11;
      *(_QWORD *)(j + 3) = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  int v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;

  v3 = *a2;
  v4 = *a1;
  if (*a2 < *a1 || v3 <= v4 && a2[2] < a1[2])
  {
    v5 = *a3;
    if (*a3 < v3 || v5 <= v3 && a3[2] < a2[2])
    {
      *a1 = v5;
      *a3 = v4;
      v6 = *(_OWORD *)(a1 + 2);
      v7 = *((_QWORD *)a1 + 3);
      *(_OWORD *)(a1 + 2) = *(_OWORD *)(a3 + 2);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a3 + 3);
      *(_OWORD *)(a3 + 2) = v6;
      *((_QWORD *)a3 + 3) = v7;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v17 = (__int128 *)(a2 + 2);
      v18 = *(_OWORD *)(a1 + 2);
      v19 = a1[6];
      v20 = a1[7];
      *(_OWORD *)(a1 + 2) = *(_OWORD *)(a2 + 2);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      *(_OWORD *)(a2 + 2) = v18;
      a2[6] = v19;
      a2[7] = v20;
      v21 = *a3;
      v22 = *a2;
      if (*a3 < *a2 || v21 <= v22 && a3[2] < *(_DWORD *)v17)
      {
        *a2 = v21;
        *a3 = v22;
        v23 = *v17;
        *v17 = *(_OWORD *)(a3 + 2);
        *((_QWORD *)a2 + 3) = *((_QWORD *)a3 + 3);
        *(_OWORD *)(a3 + 2) = v23;
        a3[6] = v19;
        a3[7] = v20;
        return 2;
      }
    }
    return 1;
  }
  v9 = *a3;
  if (*a3 < v3 || v9 <= v3 && a3[2] < a2[2])
  {
    *a2 = v9;
    *a3 = v3;
    v10 = a2 + 2;
    v11 = *(_OWORD *)(a2 + 2);
    v12 = *((_QWORD *)a2 + 3);
    *(_OWORD *)(a2 + 2) = *(_OWORD *)(a3 + 2);
    *((_QWORD *)a2 + 3) = *((_QWORD *)a3 + 3);
    *(_OWORD *)(a3 + 2) = v11;
    *((_QWORD *)a3 + 3) = v12;
    v13 = *a2;
    v14 = *a1;
    if (*a2 < *a1 || v13 <= v14 && *(_DWORD *)v10 < a1[2])
    {
      *a1 = v13;
      *a2 = v14;
      v15 = *(_OWORD *)(a1 + 2);
      v16 = *((_QWORD *)a1 + 3);
      *(_OWORD *)(a1 + 2) = *v10;
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      *v10 = v15;
      *((_QWORD *)a2 + 3) = v16;
      return 2;
    }
    return 1;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &>(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int *i;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  __int128 v17;
  uint64_t v18;
  int v19;

  v2 = *a1;
  v3 = a1[2];
  v18 = *(_QWORD *)(a1 + 3);
  v19 = a1[5];
  v4 = *(a2 - 8);
  if (*a1 >= v4 && (v2 > v4 || v3 >= *(a2 - 6)))
  {
    for (i = a1 + 8; i < a2 && v2 >= *i && (v2 > *i || v3 >= i[2]); i += 8)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[8];
      i += 8;
      v6 = v7;
    }
    while (v2 >= v7 && (v2 > v6 || v3 >= i[2]));
  }
  if (i < a2)
  {
    for (a2 -= 8; v2 < v4 || v2 <= v4 && v3 < a2[2]; a2 -= 8)
    {
      v8 = *(a2 - 8);
      v4 = v8;
    }
  }
  v9 = *((_QWORD *)a1 + 3);
  if (i < a2)
  {
    v10 = *i;
    v11 = *a2;
    do
    {
      *i = v11;
      *a2 = v10;
      v17 = *(_OWORD *)(i + 2);
      v12 = *((_QWORD *)i + 3);
      *(_OWORD *)(i + 2) = *(_OWORD *)(a2 + 2);
      *((_QWORD *)i + 3) = *((_QWORD *)a2 + 3);
      *(_OWORD *)(a2 + 2) = v17;
      *((_QWORD *)a2 + 3) = v12;
      do
      {
        v13 = i[8];
        i += 8;
        v10 = v13;
      }
      while (v2 >= v13 && (v2 > v10 || v3 >= i[2]));
      do
      {
        do
        {
          v14 = *(a2 - 8);
          a2 -= 8;
          v11 = v14;
          v15 = v2 <= v14;
        }
        while (v2 < v14);
      }
      while (v15 && v3 < a2[2]);
    }
    while (i < a2);
  }
  if (i - 8 != a1)
  {
    *a1 = *(i - 8);
    *(_OWORD *)(a1 + 2) = *(_OWORD *)(i - 6);
    *((_QWORD *)a1 + 3) = *((_QWORD *)i - 1);
  }
  *(i - 8) = v2;
  *(i - 6) = v3;
  *(i - 3) = v19;
  *(_QWORD *)(i - 5) = v18;
  *((_QWORD *)i - 1) = v9;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &>(int *a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  __int128 v21;
  uint64_t v22;
  int v23;

  v2 = 0;
  v3 = a1[2];
  v4 = *a1;
  v22 = *(_QWORD *)(a1 + 3);
  v23 = a1[5];
  v5 = *((_QWORD *)a1 + 3);
  while (1)
  {
    v6 = a1[v2 + 8];
    if (v6 >= v4 && (v6 > v4 || a1[v2 + 10] >= v3))
      break;
    v2 += 8;
  }
  v7 = (unint64_t)&a1[v2 + 8];
  if (v2 * 4)
  {
    do
    {
      v9 = *(a2 - 8);
      a2 -= 8;
      v8 = v9;
    }
    while (v9 >= v4 && (v8 > v4 || a2[2] >= v3));
  }
  else
  {
LABEL_19:
    if (v7 < (unint64_t)a2)
    {
      do
      {
        v11 = *(a2 - 8);
        a2 -= 8;
        v10 = v11;
        if (v11 < v4)
          break;
        if (v10 > v4)
          goto LABEL_19;
      }
      while (a2[2] >= v3 && v7 < (unint64_t)a2);
    }
  }
  if (v7 >= (unint64_t)a2)
  {
    v14 = v7;
  }
  else
  {
    v13 = *a2;
    v14 = v7;
    v15 = a2;
    do
    {
      *(_DWORD *)v14 = v13;
      *v15 = v6;
      v21 = *(_OWORD *)(v14 + 8);
      v16 = *(_QWORD *)(v14 + 24);
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 2);
      *(_QWORD *)(v14 + 24) = *((_QWORD *)v15 + 3);
      *(_OWORD *)(v15 + 2) = v21;
      *((_QWORD *)v15 + 3) = v16;
      do
      {
        do
        {
          v17 = *(_DWORD *)(v14 + 32);
          v14 += 32;
          v6 = v17;
          v18 = v17 <= v4;
        }
        while (v17 < v4);
      }
      while (v18 && *(_DWORD *)(v14 + 8) < v3);
      do
      {
        v19 = *(v15 - 8);
        v15 -= 8;
        v13 = v19;
      }
      while (v19 >= v4 && (v13 > v4 || v15[2] >= v3));
    }
    while (v14 < (unint64_t)v15);
  }
  if ((int *)(v14 - 32) != a1)
  {
    *a1 = *(_DWORD *)(v14 - 32);
    *(_OWORD *)(a1 + 2) = *(_OWORD *)(v14 - 24);
    *((_QWORD *)a1 + 3) = *(_QWORD *)(v14 - 8);
  }
  *(_DWORD *)(v14 - 32) = v4;
  *(_DWORD *)(v14 - 24) = v3;
  *(_DWORD *)(v14 - 12) = v23;
  *(_QWORD *)(v14 - 20) = v22;
  *(_QWORD *)(v14 - 8) = v5;
  return v14 - 32;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 32);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1 || v6 <= v7 && *(_DWORD *)(a2 - 24) < *(_DWORD *)(a1 + 8))
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 32) = v7;
        v8 = *(_OWORD *)(a1 + 8);
        v9 = *(_QWORD *)(a1 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a2 - 24) = v8;
        *(_QWORD *)(a2 - 8) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((int *)a1, (int *)(a1 + 32), (int *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a1 + 32, a1 + 64, a1 + 96, (int *)(a2 - 32));
      return 1;
    default:
      v10 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((int *)a1, (int *)(a1 + 32), (int *)(a1 + 64));
      v11 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  do
  {
    v14 = *(_DWORD *)v11;
    if (*(_DWORD *)v11 >= *(_DWORD *)v10)
    {
      if (v14 > *(_DWORD *)v10)
        goto LABEL_20;
      v15 = *(_DWORD *)(v11 + 8);
      if (v15 >= *(_DWORD *)(v10 + 8))
        goto LABEL_20;
    }
    else
    {
      v15 = *(_DWORD *)(v11 + 8);
    }
    v22 = *(_QWORD *)(v11 + 12);
    v23 = *(_DWORD *)(v11 + 20);
    v16 = *(_QWORD *)(v11 + 24);
    *(_DWORD *)v11 = *(_DWORD *)v10;
    v17 = (_DWORD *)(v10 + 8);
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(v10 + 8);
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(v10 + 24);
    if (v10 == a1)
    {
LABEL_15:
      v10 = a1;
    }
    else
    {
      v18 = v12;
      while (1)
      {
        v19 = a1 + v18;
        v20 = *(_DWORD *)(a1 + v18 + 32);
        if (v14 >= v20)
        {
          if (v14 > v20)
            goto LABEL_16;
          v21 = a1 + v18;
          if (v15 >= *(_DWORD *)(a1 + v18 + 40))
            break;
        }
        v17 = (_DWORD *)(v10 - 24);
        v10 -= 32;
        *(_DWORD *)(v19 + 64) = v20;
        *(_OWORD *)(v19 + 72) = *(_OWORD *)(v19 + 40);
        *(_QWORD *)(v19 + 88) = *(_QWORD *)(v19 + 56);
        v18 -= 32;
        if (v18 == -64)
        {
          v17 = (_DWORD *)(a1 + 8);
          goto LABEL_15;
        }
      }
      v17 = (_DWORD *)(v21 + 72);
      v10 = v21 + 64;
    }
LABEL_16:
    *(_DWORD *)v10 = v14;
    *v17 = v15;
    *(_QWORD *)(v10 + 12) = v22;
    *(_DWORD *)(v10 + 20) = v23;
    *(_QWORD *)(v10 + 24) = v16;
    if (++v13 == 8)
      return v11 + 32 == a2;
LABEL_20:
    v10 = v11;
    v12 += 32;
    v11 += 32;
  }
  while (v11 != a2);
  return 1;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  int v9;
  int v10;
  _OWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  _OWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((int *)a1, (int *)a2, (int *)a3);
  v9 = *(_DWORD *)a4;
  v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 < *(_DWORD *)a3 || v9 <= v10 && *(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
  {
    *(_DWORD *)a3 = v9;
    *(_DWORD *)a4 = v10;
    v11 = (_OWORD *)(a3 + 8);
    result = *(__n128 *)(a3 + 8);
    v12 = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
    *(__n128 *)(a4 + 8) = result;
    *(_QWORD *)(a4 + 24) = v12;
    v13 = *(_DWORD *)a3;
    v14 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2 || v13 <= v14 && *(_DWORD *)v11 < *(_DWORD *)(a2 + 8))
    {
      *(_DWORD *)a2 = v13;
      *(_DWORD *)a3 = v14;
      v15 = (_OWORD *)(a2 + 8);
      result = *(__n128 *)(a2 + 8);
      v16 = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a2 + 8) = *v11;
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
      *v11 = result;
      *(_QWORD *)(a3 + 24) = v16;
      v17 = *(_DWORD *)a2;
      v18 = *(_DWORD *)a1;
      if (*(_DWORD *)a2 < *(_DWORD *)a1 || v17 <= v18 && *(_DWORD *)v15 < *(_DWORD *)(a1 + 8))
      {
        *(_DWORD *)a1 = v17;
        *(_DWORD *)a2 = v18;
        result = *(__n128 *)(a1 + 8);
        v19 = *(_QWORD *)(a1 + 24);
        *(_OWORD *)(a1 + 8) = *v15;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *v15 = result;
        *(_QWORD *)(a2 + 24) = v19;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  __n128 result;
  int v11;
  int v12;
  _OWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  _OWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  _OWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a2, a3, a4).n128_u64[0];
  v11 = *a5;
  v12 = *(_DWORD *)a4;
  if (*a5 < *(_DWORD *)a4 || v11 <= v12 && a5[2] < *(_DWORD *)(a4 + 8))
  {
    *(_DWORD *)a4 = v11;
    *a5 = v12;
    v13 = (_OWORD *)(a4 + 8);
    result = *(__n128 *)(a4 + 8);
    v14 = *(_QWORD *)(a4 + 24);
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 2);
    *(_QWORD *)(a4 + 24) = *((_QWORD *)a5 + 3);
    *(__n128 *)(a5 + 2) = result;
    *((_QWORD *)a5 + 3) = v14;
    v15 = *(_DWORD *)a4;
    v16 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3 || v15 <= v16 && *(_DWORD *)v13 < *(_DWORD *)(a3 + 8))
    {
      *(_DWORD *)a3 = v15;
      *(_DWORD *)a4 = v16;
      v17 = (_OWORD *)(a3 + 8);
      result = *(__n128 *)(a3 + 8);
      v18 = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(a3 + 8) = *v13;
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
      *v13 = result;
      *(_QWORD *)(a4 + 24) = v18;
      v19 = *(_DWORD *)a3;
      v20 = *(_DWORD *)a2;
      if (*(_DWORD *)a3 < *(_DWORD *)a2 || v19 <= v20 && *(_DWORD *)v17 < *(_DWORD *)(a2 + 8))
      {
        *(_DWORD *)a2 = v19;
        *(_DWORD *)a3 = v20;
        v21 = (_OWORD *)(a2 + 8);
        result = *(__n128 *)(a2 + 8);
        v22 = *(_QWORD *)(a2 + 24);
        *(_OWORD *)(a2 + 8) = *v17;
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
        *v17 = result;
        *(_QWORD *)(a3 + 24) = v22;
        v23 = *(_DWORD *)a2;
        v24 = *(_DWORD *)a1;
        if (*(_DWORD *)a2 < *(_DWORD *)a1 || v23 <= v24 && *(_DWORD *)v21 < *(_DWORD *)(a1 + 8))
        {
          *(_DWORD *)a1 = v23;
          *(_DWORD *)a2 = v24;
          result = *(__n128 *)(a1 + 8);
          v25 = *(_QWORD *)(a1 + 24);
          *(_OWORD *)(a1 + 8) = *v21;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *v21 = result;
          *(_QWORD *)(a2 + 24) = v25;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  __int128 v28;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 5;
    if (a2 - a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (int *)(a1 + 32 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = (_OWORD *)(a1 + 8);
      v15 = a2;
      do
      {
        v16 = *(_DWORD *)v15;
        v17 = *(_DWORD *)a1;
        if (*(_DWORD *)v15 < *(_DWORD *)a1 || v16 <= v17 && *(_DWORD *)(v15 + 8) < *(_DWORD *)v14)
        {
          *(_DWORD *)v15 = v17;
          *(_DWORD *)a1 = v16;
          v18 = *(_OWORD *)(v15 + 8);
          v19 = *(_QWORD *)(v15 + 24);
          *(_OWORD *)(v15 + 8) = *v14;
          *(_QWORD *)(v15 + 24) = *(_QWORD *)(a1 + 24);
          *v14 = v18;
          *(_QWORD *)(a1 + 24) = v19;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a4, v9, (int *)a1);
        }
        v15 += 32;
      }
      while (v15 != a3);
      v13 = a3;
    }
    if (v8 >= 33)
    {
      v20 = (unint64_t)v8 >> 5;
      v21 = a2 - 32;
      do
      {
        v22 = *(_DWORD *)a1;
        v28 = *(_OWORD *)(a1 + 8);
        v24 = *(_DWORD *)(a1 + 24);
        v23 = *(_DWORD *)(a1 + 28);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a4, v20);
        if (v21 == v25)
        {
          *(_DWORD *)v25 = v22;
          *(_OWORD *)(v25 + 8) = v28;
          *(_DWORD *)(v25 + 24) = v24;
          *(_DWORD *)(v25 + 28) = v23;
        }
        else
        {
          *(_DWORD *)v25 = *(_DWORD *)v21;
          *(_OWORD *)(v25 + 8) = *(_OWORD *)(v21 + 8);
          *(_QWORD *)(v25 + 24) = *(_QWORD *)(v21 + 24);
          *(_DWORD *)v21 = v22;
          *(_OWORD *)(v21 + 8) = v28;
          *(_DWORD *)(v21 + 24) = v24;
          *(_DWORD *)(v21 + 28) = v23;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, v25 + 32, a4, (v25 + 32 - a1) >> 5);
        }
        v21 -= 32;
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 5)
    {
      v6 = v4 >> 4;
      v7 = (v4 >> 4) + 1;
      v8 = (int *)(result + 32 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[8];
        if (*v8 < v10 || *v8 <= v10 && *(_DWORD *)(result + 32 * v7 + 8) < v8[10])
        {
          v8 += 8;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v11 <= v12)
        {
          v13 = a4[2];
          if (v8[2] < v13)
            return result;
        }
        else
        {
          v13 = a4[2];
        }
        v20 = *(_QWORD *)(a4 + 3);
        v21 = a4[5];
        v14 = *((_QWORD *)a4 + 3);
        *a4 = v11;
        *(_OWORD *)(a4 + 2) = *(_OWORD *)(v8 + 2);
        *((_QWORD *)a4 + 3) = *((_QWORD *)v8 + 3);
        if (v5 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = (int *)(result + 32 * v7);
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = v15[8];
              if (*v15 < v18 || *v15 <= v18 && *(_DWORD *)(result + 32 * v7 + 8) < v15[10])
              {
                v15 += 8;
                v7 = v17;
              }
            }
            v19 = *v15;
            if (*v15 < v12 || v19 <= v12 && v15[2] < v13)
              break;
            *v8 = v19;
            *(_OWORD *)(v8 + 2) = *(_OWORD *)(v15 + 2);
            *((_QWORD *)v8 + 3) = *((_QWORD *)v15 + 3);
            v8 = v15;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *v15 = v12;
        v15[2] = v13;
        *(_QWORD *)(v15 + 3) = v20;
        v15[5] = v21;
        *((_QWORD *)v15 + 3) = v14;
      }
    }
  }
  return result;
}

double std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  double result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    v7 = v3 + 1;
    a1 += 32 * (v3 + 1);
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = *(_DWORD *)(a1 + 32);
      if (*(_DWORD *)a1 < v10 || *(_DWORD *)a1 <= v10 && *(_DWORD *)(v6 + 32 * v7 + 8) < *(_DWORD *)(a1 + 40))
      {
        a1 += 32;
        v3 = v9;
      }
    }
    *(_DWORD *)v6 = *(_DWORD *)a1;
    *(_OWORD *)(v6 + 8) = *(_OWORD *)(a1 + 8);
    result = *(double *)(a1 + 24);
    *(double *)(v6 + 24) = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (int *)(result + 32 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_DWORD *)(a2 - 32);
    if (*v6 >= v8)
    {
      if (v7 > v8)
        return result;
      v9 = *(_DWORD *)(a2 - 24);
      if (*(_DWORD *)(result + 32 * v5 + 8) >= v9)
        return result;
    }
    else
    {
      v9 = *(_DWORD *)(a2 - 24);
    }
    v16 = *(_QWORD *)(a2 - 20);
    v17 = *(_DWORD *)(a2 - 12);
    v10 = *(_QWORD *)(a2 - 8);
    *(_DWORD *)(a2 - 32) = v7;
    v11 = result + 32 * v5;
    v12 = (_DWORD *)(v11 + 8);
    *(_OWORD *)(a2 - 24) = *(_OWORD *)(v11 + 8);
    *(_QWORD *)(a2 - 8) = *(_QWORD *)(v11 + 24);
    if (v4 >= 2)
    {
      while (1)
      {
        v14 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v13 = (int *)(result + 32 * v5);
        v15 = *v13;
        if (*v13 >= v8 && (v15 > v8 || *(_DWORD *)(result + 32 * v5 + 8) >= v9))
          break;
        *v6 = v15;
        v12 = v13 + 2;
        *(_OWORD *)(v6 + 2) = *(_OWORD *)(v13 + 2);
        *((_QWORD *)v6 + 3) = *((_QWORD *)v13 + 3);
        v6 = (int *)(result + 32 * v5);
        if (v14 <= 1)
          goto LABEL_12;
      }
    }
    v13 = v6;
LABEL_12:
    *v13 = v8;
    *v12 = v9;
    *(_QWORD *)(v13 + 3) = v16;
    v13[5] = v17;
    *((_QWORD *)v13 + 3) = v10;
  }
  return result;
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::RebuildRepository(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  char **v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  int64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  char v67;

  v64 = 0;
  v65 = 0;
  v66 = 0;
  v2 = *a1;
  if (a1[1] != *a1)
  {
    v3 = 0;
    do
    {
      fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::AddStrings((uint64_t)a1, *(uint64_t **)(v2 + 8 * v3), &v64);
      v2 = *a1;
      v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v3) + 24);
      if (*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v3) + 32) != v4)
      {
        v5 = 0;
        v6 = (uint64_t *)v65;
        do
        {
          v7 = (_QWORD *)(v4 + 32 * v5 + 8);
          if ((unint64_t)v6 >= v66)
          {
            v8 = ((char *)v6 - v64) >> 3;
            if ((unint64_t)(v8 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v9 = (uint64_t)(v66 - (_QWORD)v64) >> 2;
            if (v9 <= v8 + 1)
              v9 = v8 + 1;
            if (v66 - (unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
              v10 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v10 = v9;
            if (v10)
              v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v66, v10);
            else
              v11 = 0;
            v12 = &v11[8 * v8];
            *(_QWORD *)v12 = *v7;
            v6 = (uint64_t *)(v12 + 8);
            v14 = v64;
            v13 = (uint64_t *)v65;
            if (v65 != v64)
            {
              do
              {
                v15 = *--v13;
                *((_QWORD *)v12 - 1) = v15;
                v12 -= 8;
              }
              while (v13 != (uint64_t *)v14);
              v13 = (uint64_t *)v64;
            }
            v64 = v12;
            v65 = (char *)v6;
            v66 = (unint64_t)&v11[8 * v10];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *v6++ = *v7;
          }
          v65 = (char *)v6;
          ++v5;
          v2 = *a1;
          v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v3) + 24);
        }
        while (v5 < (*(_QWORD *)(*(_QWORD *)(*a1 + 8 * v3) + 32) - v4) >> 5);
      }
      ++v3;
    }
    while (v3 < (a1[1] - v2) >> 3);
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v16 = (char **)(a1 + 25);
  while (1)
  {
    v17 = (char *)a1[25];
    v18 = (char *)a1[26];
    if (v17 == v18)
      break;
    v19 = *(_QWORD *)v17;
    if (v18 - v17 >= 9)
    {
      v20 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>((_QWORD *)a1[25], (uint64_t)&v67, (unint64_t)(v18 - v17) >> 3);
      v21 = v18 - 8;
      if (v18 - 8 == v20)
      {
        *(_QWORD *)v20 = v19;
      }
      else
      {
        *(_QWORD *)v20 = *(_QWORD *)v21;
        *(_QWORD *)v21 = v19;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>((uint64_t)v17, (uint64_t)(v20 + 8), (uint64_t)&v67, (v20 + 8 - v17) >> 3);
      }
    }
    a1[26] -= 8;
    v22 = v62;
    if (v62 >= v63)
    {
      v24 = (v62 - v61) >> 3;
      if ((unint64_t)(v24 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v25 = (v63 - v61) >> 2;
      if (v25 <= v24 + 1)
        v25 = v24 + 1;
      if ((unint64_t)(v63 - v61) >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v63, v26);
      else
        v27 = 0;
      v28 = &v27[8 * v24];
      *(_QWORD *)v28 = v19;
      v23 = v28 + 8;
      v30 = v61;
      v29 = v62;
      if (v62 != v61)
      {
        do
        {
          v31 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *((_QWORD *)v28 - 1) = v31;
          v28 -= 8;
        }
        while (v29 != v30);
        v29 = v61;
      }
      v61 = v28;
      v62 = v23;
      v63 = &v27[8 * v26];
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_QWORD *)v62 = v19;
      v23 = v22 + 8;
    }
    v62 = v23;
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::AddStrings((uint64_t)a1, (uint64_t *)(v19 + 8), &v64);
  }
  v32 = v62;
  if (v62 != v61)
  {
    v33 = 0;
    v32 = v61;
    do
    {
      v35 = (char *)a1[26];
      v34 = a1[27];
      if ((unint64_t)v35 >= v34)
      {
        v37 = (v35 - *v16) >> 3;
        if ((unint64_t)(v37 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v38 = v34 - (_QWORD)*v16;
        v39 = v38 >> 2;
        if (v38 >> 2 <= (unint64_t)(v37 + 1))
          v39 = v37 + 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v39;
        if (v40)
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 27), v40);
        else
          v41 = 0;
        v42 = &v41[8 * v37];
        *(_QWORD *)v42 = *(_QWORD *)&v32[8 * v33];
        v36 = (uint64_t)(v42 + 8);
        v44 = (char *)a1[25];
        v43 = (char *)a1[26];
        if (v43 != v44)
        {
          do
          {
            v45 = *((_QWORD *)v43 - 1);
            v43 -= 8;
            *((_QWORD *)v42 - 1) = v45;
            v42 -= 8;
          }
          while (v43 != v44);
          v43 = *v16;
        }
        a1[25] = v42;
        a1[26] = v36;
        a1[27] = &v41[8 * v40];
        if (v43)
          operator delete(v43);
      }
      else
      {
        *(_QWORD *)v35 = *(_QWORD *)&v32[8 * v33];
        v36 = (uint64_t)(v35 + 8);
      }
      a1[26] = v36;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>(a1[25], v36, (uint64_t)&v67, (v36 - a1[25]) >> 3);
      ++v33;
      v32 = v61;
    }
    while (v33 < (v62 - v61) >> 3);
  }
  if (v32)
  {
    v62 = v32;
    operator delete(v32);
  }
  v46 = (uint64_t **)a1[22];
  if (v46)
  {
    do
    {
      v47 = (uint64_t)v46[4];
      fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::AddStrings((uint64_t)a1, v46[2], &v64);
      v48 = v65;
      if ((unint64_t)v65 >= v66)
      {
        v50 = (v65 - v64) >> 3;
        if ((unint64_t)(v50 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v51 = (uint64_t)(v66 - (_QWORD)v64) >> 2;
        if (v51 <= v50 + 1)
          v51 = v50 + 1;
        if (v66 - (unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v51;
        if (v52)
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v66, v52);
        else
          v53 = 0;
        v54 = &v53[8 * v50];
        *(_QWORD *)v54 = v47;
        v49 = (uint64_t *)(v54 + 8);
        v56 = v64;
        v55 = (uint64_t *)v65;
        if (v65 != v64)
        {
          do
          {
            v57 = *--v55;
            *((_QWORD *)v54 - 1) = v57;
            v54 -= 8;
          }
          while (v55 != (uint64_t *)v56);
          v55 = (uint64_t *)v64;
        }
        v64 = v54;
        v65 = (char *)v49;
        v66 = (unint64_t)&v53[8 * v52];
        if (v55)
          operator delete(v55);
      }
      else
      {
        *(_QWORD *)v65 = v47;
        v49 = (uint64_t *)(v48 + 8);
      }
      v65 = (char *)v49;
      v46 = (uint64_t **)*v46;
    }
    while (v46);
  }
  else
  {
    v49 = (uint64_t *)v65;
  }
  v58 = 126 - 2 * __clz(((char *)v49 - v64) >> 3);
  if (v49 == (uint64_t *)v64)
    v59 = 0;
  else
    v59 = v58;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,false>((uint64_t)v64, (unint64_t *)v49, (uint64_t)&v61, v59, 1);
  v60 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::LatticeStringRepository<int>::Entry const**>,std::__wrap_iter<fst::LatticeStringRepository<int>::Entry const**>,std::__equal_to &>((uint64_t *)v64, (uint64_t *)v65);
  if (v65 != (char *)v60)
    v65 = (char *)v60;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Rebuilding repository.", 22);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v61);
  }
  fst::LatticeStringRepository<int>::Rebuild((uint64_t)(a1 + 35), (uint64_t ***)&v64);
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
}

void sub_1ADA8EF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void *v12;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
  v12 = *(void **)(v10 - 112);
  if (v12)
  {
    *(_QWORD *)(v10 - 104) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::AddStrings(uint64_t a1, uint64_t *a2, char **a3)
{
  uint64_t v3;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v3 = *a2;
  if (*a2 != a2[1])
  {
    v6 = a3 + 2;
    v7 = a3[1];
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        v8 = (v7 - *a3) >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v9 = *v6 - (_QWORD)*a3;
        v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v6, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v8];
        *(_QWORD *)v13 = *(_QWORD *)(v3 + 8);
        v7 = v13 + 8;
        v15 = *a3;
        v14 = a3[1];
        if (v14 != *a3)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = *a3;
        }
        *a3 = v13;
        a3[1] = v7;
        a3[2] = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v7 = *(_QWORD *)(v3 + 8);
        v7 += 8;
      }
      a3[1] = v7;
      v3 += 24;
    }
    while (v3 != a2[1]);
  }
}

uint64_t fst::LatticeStringRepository<int>::Rebuild(uint64_t a1, uint64_t ***a2)
{
  uint64_t **i;
  uint64_t *j;
  _QWORD *v6;
  _OWORD v8[2];
  int v9;

  memset(v8, 0, sizeof(v8));
  v9 = 1065353216;
  for (i = *a2; i != a2[1]; ++i)
    fst::LatticeStringRepository<int>::RebuildHelper(a1, *i, v8);
  for (j = *(uint64_t **)(a1 + 24); j; j = (uint64_t *)*j)
  {
    v6 = j + 2;
    if (!std::__hash_table<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::EntryKey,fst::LatticeStringRepository<int>::EntryEqual,std::allocator<fst::LatticeStringRepository<int>::Entry const*>>::find<fst::LatticeStringRepository<int>::Entry const*>(v8, (uint64_t **)j + 2)&& *v6)
    {
      MEMORY[0x1AF44D190](*v6, 0x1060C40ADAFC7CALL);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::swap(a1 + 8, (uint64_t)v8);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v8);
}

void sub_1ADA8F144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  char v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  BOOL v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;

  v8 = (unint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 < *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,fst::LatticeStringRepository<int>::Entry const**>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) >= *v9)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(v9, (uint64_t *)a2);
            v9 = (unint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9, v17);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v22 = v9 + 1;
        v24 = v9 == a2 || v22 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v24)
          {
            v25 = 0;
            v26 = v9;
            do
            {
              v28 = *v26;
              v27 = v26[1];
              v26 = v22;
              if (v27 < v28)
              {
                v29 = v25;
                while (1)
                {
                  *(unint64_t *)((char *)v9 + v29 + 8) = v28;
                  if (!v29)
                    break;
                  v28 = *(unint64_t *)((char *)v9 + v29 - 8);
                  v29 -= 8;
                  if (v27 >= v28)
                  {
                    v30 = (unint64_t *)((char *)v9 + v29 + 8);
                    goto LABEL_42;
                  }
                }
                v30 = v9;
LABEL_42:
                *v30 = v27;
              }
              v22 = v26 + 1;
              v25 += 8;
            }
            while (v26 + 1 != a2);
          }
        }
        else if (!v24)
        {
          do
          {
            v32 = *v8;
            v31 = v8[1];
            v8 = v22;
            if (v31 < v32)
            {
              do
              {
                *v22 = v32;
                v32 = *(v22 - 2);
                --v22;
              }
              while (v31 < v32);
              *v22 = v31;
            }
            v22 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = (uint64_t *)(a1 + 1);
    do
    {
      v3 = (unint64_t *)v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < (unint64_t *)a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < (unint64_t *)a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < (unint64_t *)a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

unint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,fst::LatticeStringRepository<int>::Entry const**>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            if (*v20 >= v20[1])
            {
              v17 = v21;
            }
            else
            {
              v22 = v20[1];
              ++v20;
            }
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v23 = (char *)v20 - (char *)a1 + 8;
          if (v23 >= 9)
          {
            v24 = (((unint64_t)v23 >> 3) - 2) >> 1;
            v25 = &a1[v24];
            v26 = *v25;
            v27 = *v20;
            if (*v25 < *v20)
            {
              do
              {
                *v20 = v26;
                v20 = v25;
                if (!v24)
                  break;
                v24 = (v24 - 1) >> 1;
                v25 = &a1[v24];
                v26 = *v25;
              }
              while (*v25 < v27);
              *v20 = v27;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unint64_t *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        if (*v8 < v8[1])
        {
          v10 = v8[1];
          ++v8;
          v7 = v9;
        }
      }
      v11 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v12 = (2 * v7) | 1;
          v8 = (unint64_t *)(result + 8 * v12);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v12;
          }
          else
          {
            v10 = *v8;
            if (*v8 >= v8[1])
            {
              v7 = v12;
            }
            else
            {
              v10 = v8[1];
              ++v8;
            }
          }
        }
        while (v10 >= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::LatticeStringRepository<int>::Entry const**>,std::__wrap_iter<fst::LatticeStringRepository<int>::Entry const**>,std::__equal_to &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  result = a2;
  if (a1 != a2)
  {
    v4 = a1 + 1;
    do
    {
      if (v4 == a2)
        return a2;
      v5 = *(v4 - 1);
      v6 = *v4++;
    }
    while (v5 != v6);
    v7 = v4 - 2;
    while (v4 != a2)
    {
      v8 = v5;
      v5 = *v4;
      if (v8 != *v4)
      {
        v7[1] = v5;
        ++v7;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

void fst::LatticeStringRepository<int>::RebuildHelper(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t **v4;

  v4 = (uint64_t **)a2;
  if (a2)
  {
    do
    {
      if (std::__hash_table<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::EntryKey,fst::LatticeStringRepository<int>::EntryEqual,std::allocator<fst::LatticeStringRepository<int>::Entry const*>>::find<fst::LatticeStringRepository<int>::Entry const*>(a3, (uint64_t **)&v4))
      {
        break;
      }
      std::__hash_table<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::EntryKey,fst::LatticeStringRepository<int>::EntryEqual,std::allocator<fst::LatticeStringRepository<int>::Entry const*>>::__emplace_unique_key_args<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::Entry const* const&>((uint64_t)a3, (uint64_t **)&v4, &v4);
      v4 = (uint64_t **)*v4;
    }
    while (v4);
  }
}

_QWORD *std::__hash_table<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::EntryKey,fst::LatticeStringRepository<int>::EntryEqual,std::allocator<fst::LatticeStringRepository<int>::Entry const*>>::find<fst::LatticeStringRepository<int>::Entry const*>(_QWORD *a1, uint64_t **a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *((int *)*a2 + 2);
  v4 = **a2;
  v5 = v3 + 49109 * v4;
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v3 + 49109 * v4;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        v11 = result[2];
        if (*(_QWORD *)v11 == v4 && *(_DWORD *)(v11 + 8) == (_DWORD)v3)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *((int *)*a2 + 2);
  v4 = **a2;
  v5 = v3 + 49109 * v4;
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v3 + 49109 * v4;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        v11 = result[2];
        if (*(_QWORD *)v11 == v4 && *(_DWORD *)(v11 + 8) == (_DWORD)v3)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::NormalizeSubset(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t **v9;
  unint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  _QWORD *v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int *begin;
  unint64_t v31;
  uint64_t *v32;
  uint64_t **v33;
  std::vector<unsigned int> v35;
  int v36;
  int v37;
  float v38;
  _QWORD v39[35];

  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"empty subset", 12);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    }
    *a4 = 0;
    *(int32x2_t *)a3 = vdup_n_s32(0x7F800000u);
  }
  else
  {
    memset(&v35, 0, sizeof(v35));
    v9 = (uint64_t **)(a1 + 280);
    fst::LatticeStringRepository<int>::ConvertToVector(a1 + 280, *(uint64_t **)(v6 + 8), &v35);
    v10 = (v7 - v6) / 24;
    v12 = *(float *)(*a2 + 16);
    v11 = *(float *)(*a2 + 20);
    if (v10 >= 2)
    {
      v13 = 0;
      v14 = v10 - 1;
      do
      {
        v15 = *a2 + v13;
        v16 = *(float *)(v15 + 40);
        v17 = *(float *)(v15 + 44);
        if ((float)(v12 + v11) >= (float)(v16 + v17))
        {
          if ((float)(v12 + v11) > (float)(v16 + v17) || (v12 >= v16 ? (v18 = v12 <= v16) : (v18 = 1), !v18))
          {
            v11 = *(float *)(v15 + 44);
            v12 = *(float *)(v15 + 40);
          }
        }
        fst::LatticeStringRepository<int>::ReduceToCommonPrefix((int)v9, *(uint64_t **)(v15 + 32), &v35);
        v13 += 24;
        --v14;
      }
      while (v14);
    }
    *(float *)v39 = v12;
    v38 = v11;
    v37 = 2139095040;
    v36 = 2139095040;
    v19 = 0;
    v20 = v35.__end_ - v35.__begin_;
    if (v10 <= 1)
      v21 = 1;
    else
      v21 = v10;
    v22 = *a2;
    do
    {
      v23 = *(float *)(v22 + v19 + 16) - v12;
      v24 = *(float *)(v22 + v19 + 20) - v11;
      if (v23 == -INFINITY || v24 == -INFINITY)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v39);
          v22 = *a2;
        }
        v24 = INFINITY;
        v23 = INFINITY;
      }
      else
      {
        v27 = v23 == INFINITY;
        if (v24 == INFINITY)
          v27 = 1;
        if (v27)
        {
          v24 = INFINITY;
          v23 = INFINITY;
        }
      }
      v28 = v22 + v19;
      *(float *)(v28 + 16) = v23;
      *(float *)(v28 + 20) = v24;
      v29 = fst::LatticeStringRepository<int>::RemovePrefix(v9, *(uint64_t **)(v28 + 8), v20);
      v22 = *a2;
      *(_QWORD *)(*a2 + v19 + 8) = v29;
      v19 += 24;
      --v21;
    }
    while (v21);
    begin = v35.__begin_;
    if (v35.__end_ == v35.__begin_)
    {
      v32 = 0;
      v33 = a4;
    }
    else
    {
      v31 = 0;
      v32 = 0;
      v33 = a4;
      do
      {
        v32 = fst::LatticeStringRepository<int>::Successor(v9, (uint64_t)v32, begin[v31++]);
        begin = v35.__begin_;
      }
      while (v31 < v35.__end_ - v35.__begin_);
    }
    *v33 = v32;
    *(float *)a3 = v12;
    *(float *)(a3 + 4) = v11;
    if (begin)
    {
      v35.__end_ = begin;
      operator delete(begin);
    }
  }
}

void sub_1ADA90168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a16);
  _Unwind_Resume(a1);
}

unint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::InitialToStateId(uint64_t a1, uint64_t *a2, unint64_t *a3, _QWORD *a4, double a5)
{
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v18;
  __int128 v19;
  unint64_t v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t *v24[34];
  float v25;
  int v26;

  v10 = a1 + 160;
  v24[0] = a2;
  v11 = std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::find<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*>((_QWORD *)(a1 + 160), v24);
  if (v11)
  {
    v12 = v11;
    *a3 = (unint64_t)v11[5];
    *a4 = v11[4];
    LODWORD(v24[0]) = 0;
    LODWORD(v24[0]) = *((_DWORD *)v11 + 10);
    LODWORD(__p) = 0;
    LODWORD(__p) = *((_DWORD *)v11 + 11);
    LODWORD(v19) = 2139095040;
    LODWORD(v18) = 2139095040;
    if (*(float *)v24 == INFINITY && *(float *)&__p == *(float *)&v18 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Zero weight!", 12);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    }
    return *((unsigned int *)v12 + 6);
  }
  else
  {
    __p = 0;
    v22 = 0;
    v23 = 0;
    std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__init_with_size[abi:ne180100]<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>((char *)&__p, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::EpsilonClosure(a1, (uint64_t *)&__p);
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ConvertToMinimal(a1, (unsigned int **)&__p);
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::NormalizeSubset(a1, &__p, (uint64_t)&v20, (uint64_t **)&v19 + 1);
    v13 = fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::MinimalToStateId(a1, (uint64_t *)&__p, *(float *)&v20 + *((float *)&v20 + 1) + a5);
    v14 = v20;
    *a3 = v20;
    *a4 = *((_QWORD *)&v19 + 1);
    LODWORD(v18) = HIDWORD(v14);
    LODWORD(v24[0]) = v14;
    v26 = 2139095040;
    v25 = INFINITY;
    if (*(float *)&v14 == INFINITY && *(float *)&v18 == v25 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Zero weight!", 12);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    }
    v15 = operator new();
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 16) = 0;
    std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__init_with_size[abi:ne180100]<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>((char *)v15, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    v18 = (uint64_t *)v15;
    LODWORD(v19) = v13;
    v24[0] = (uint64_t *)&v18;
    v16 = (char *)std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::piecewise_construct_t const&,std::tuple<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const* const&>,std::tuple<>>(v10, &v18, (uint64_t)&std::piecewise_construct, v24);
    *(_OWORD *)(v16 + 24) = v19;
    *((_QWORD *)v16 + 5) = v20;
    *(_DWORD *)(a1 + 28) -= 1431655765 * ((unint64_t)(v18[1] - *v18) >> 3);
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
  }
  return v13;
}

void sub_1ADA90480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *fst::LatticeStringRepository<int>::Concatenate(uint64_t **a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t *v4;
  std::vector<unsigned int>::size_type v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *end;
  unint64_t v10;
  std::vector<unsigned int> v12;

  v3 = a3;
  if (!a2)
    return a3;
  v4 = a2;
  if (a3)
  {
    v6 = 0;
    memset(&v12, 0, sizeof(v12));
    v7 = a3;
    do
    {
      ++v6;
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    std::vector<int>::resize(&v12, v6);
    v8 = 0x3FFFFFFFFFFFFFFFLL;
    end = v12.__end_;
    do
    {
      end[v8] = *((_DWORD *)v3 + 2);
      v3 = (_QWORD *)*v3;
      --v8;
    }
    while (v3);
    if (end != v12.__begin_)
    {
      v10 = 0;
      end = v12.__begin_;
      do
      {
        v4 = fst::LatticeStringRepository<int>::Successor(a1, (uint64_t)v4, end[v10++]);
        end = v12.__begin_;
      }
      while (v10 < v12.__end_ - v12.__begin_);
    }
    if (end)
    {
      v12.__end_ = end;
      operator delete(end);
    }
  }
  return v4;
}

void sub_1ADA905C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::LatticeStringRepository<int>::ReduceToCommonPrefix(int a1, uint64_t *a2, std::vector<unsigned int> *this)
{
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  std::vector<unsigned int>::size_type v7;
  std::vector<unsigned int>::size_type v8;

  if (!a2)
  {
    v7 = 0;
    v5 = this->__end_ - this->__begin_;
    goto LABEL_17;
  }
  v3 = 0;
  v4 = a2;
  do
  {
    ++v3;
    v4 = (_QWORD *)*v4;
  }
  while (v4);
  v5 = this->__end_ - this->__begin_;
  if (v3 <= v5)
  {
    v7 = v3;
    if (!v3)
      goto LABEL_17;
  }
  else
  {
    v6 = v3;
    do
    {
      a2 = (uint64_t *)*a2;
      --v6;
    }
    while (v6 > v5);
    v7 = this->__end_ - this->__begin_;
    if (!v5)
      goto LABEL_17;
  }
  if (v5 < v3)
    v3 = this->__end_ - this->__begin_;
  v8 = v3 - 1;
  do
  {
    if (*((_DWORD *)a2 + 2) != this->__begin_[v8])
      v7 = v8;
    a2 = (uint64_t *)*a2;
    --v8;
  }
  while (v8 != -1);
LABEL_17:
  if (v7 != v5)
    std::vector<int>::resize(this, v7);
}

uint64_t *fst::LatticeStringRepository<int>::RemovePrefix(uint64_t **a1, uint64_t *a2, unint64_t a3)
{
  uint64_t *v3;
  unint64_t v4;
  unsigned int *begin;
  std::vector<unsigned int> v8;

  v3 = a2;
  if (a3)
  {
    v4 = a3;
    memset(&v8, 0, sizeof(v8));
    fst::LatticeStringRepository<int>::ConvertToVector((int)a1, a2, &v8);
    begin = v8.__begin_;
    if (v4 >= v8.__end_ - v8.__begin_)
    {
      v3 = 0;
      if (!v8.__begin_)
        return v3;
      goto LABEL_6;
    }
    v3 = 0;
    do
    {
      v3 = fst::LatticeStringRepository<int>::Successor(a1, (uint64_t)v3, begin[v4++]);
      begin = v8.__begin_;
    }
    while (v4 < v8.__end_ - v8.__begin_);
    if (v8.__begin_)
    {
LABEL_6:
      v8.__end_ = begin;
      operator delete(begin);
    }
  }
  return v3;
}

void sub_1ADA90730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::MinimalToStateId(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t **v7;
  char *v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t *v28;
  uint64_t *v29[34];

  v6 = a1 + 120;
  v29[0] = a2;
  v7 = std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::find<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*>((_QWORD *)(a1 + 120), v29);
  v8 = *(char **)a1;
  if (v7)
  {
    if (*(double *)(*(_QWORD *)&v8[8 * *((int *)v7 + 6)] + 48) + -0.1 > a3 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"New cost is less (check the difference is small) ", 49);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
      v8 = *(char **)a1;
    }
  }
  v11 = *(_QWORD *)(a1 + 8);
  v12 = operator new();
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)v12 = 0;
  std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__init_with_size[abi:ne180100]<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>((char *)v12, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v13 = (unint64_t)(v11 - (_QWORD)v8) >> 3;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  *(double *)(v12 + 48) = a3;
  v28 = (uint64_t *)v12;
  v29[0] = (uint64_t *)&v28;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>>>::__emplace_unique_key_args<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::piecewise_construct_t const&,std::tuple<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*&&>,std::tuple<>>(v6, &v28, (uint64_t)&std::piecewise_construct, v29)+ 6) = v13;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v15 >= v14)
  {
    v17 = ((uint64_t)v15 - *(_QWORD *)a1) >> 3;
    if ((unint64_t)(v17 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v18 = v14 - *(_QWORD *)a1;
    v19 = v18 >> 2;
    if (v18 >> 2 <= (unint64_t)(v17 + 1))
      v19 = v17 + 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 16, v20);
    else
      v21 = 0;
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v12;
    v16 = v22 + 1;
    v25 = *(char **)a1;
    v24 = *(char **)(a1 + 8);
    if (v24 != *(char **)a1)
    {
      do
      {
        v26 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *--v22 = v26;
      }
      while (v24 != v25);
      v24 = *(char **)a1;
    }
    *(_QWORD *)a1 = v22;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v23;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *v15 = v12;
    v16 = v15 + 1;
  }
  *(_QWORD *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 28) -= 1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ProcessFinal(a1, v13);
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ProcessTransitions(a1, v13);
  return v13;
}

void sub_1ADA9099C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C405B906368);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::find<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*>(_QWORD *a1, uint64_t **a2)
{
  int *v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ***v11;
  uint64_t **v12;
  float *v13;
  unint64_t v14;

  v3 = (int *)**a2;
  v4 = (int *)(*a2)[1];
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v5 = *v3 + v5 * v6 + *((_QWORD *)v3 + 1);
      v6 *= 23531;
      v3 += 6;
    }
    while (v3 != v4);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v5;
    if (v5 >= *(_QWORD *)&v7)
      v10 = v5 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v5;
  }
  v11 = *(uint64_t ****)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (*v11)
  {
    v13 = (float *)a1 + 9;
    do
    {
      v14 = (unint64_t)v12[1];
      if (v14 == v5)
      {
        if ((fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual::operator()(v13, (unint64_t *)v12[2], *a2) & 1) != 0)return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v7)
            v14 %= *(_QWORD *)&v7;
        }
        else
        {
          v14 &= *(_QWORD *)&v7 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = (uint64_t **)*v12;
    }
    while (v12);
  }
  return v12;
}

void *std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::piecewise_construct_t const&,std::tuple<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const* const&>,std::tuple<>>(uint64_t a1, uint64_t **a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  int *v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v8 = (int *)**a2;
  v9 = (int *)(*a2)[1];
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v10 = *v8 + v10 * v11 + *((_QWORD *)v8 + 1);
      v11 *= 23531;
      v8 += 6;
    }
    while (v8 != v9);
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if ((fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual::operator()((float *)(a1 + 36), *((unint64_t **)i + 2), *a2) & 1) != 0)return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_QWORD *)i + 2) = **a4;
  *((_QWORD *)i + 3) = 0;
  *((_QWORD *)i + 4) = 0;
  *((_QWORD *)i + 5) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v10 >= v12)
        v4 = v10 % v12;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_43:
    *v25 = i;
    goto LABEL_44;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v24 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v26 >= v12)
        v26 %= v12;
    }
    else
    {
      v26 &= v12 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_43;
  }
LABEL_44:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADA90D74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeLatticeInsertPhones<fst::LatticeWeightTpl<float>>(kaldi::TransitionModel *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9[2];
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;

  v4 = fst::HighestNumberedInputSymbol<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2) + 1;
  v15 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v13);
  while (1)
  {
    if (!v13)
    {
      if ((int)v15 >= v14)
        return v4;
LABEL_7:
      v5 = v15;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13))
      break;
    if (!v13)
      goto LABEL_7;
    v5 = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 24))();
LABEL_8:
    if ((_DWORD)v5 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 296))(a2, v5, &v12);
      while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
        *(_QWORD *)v9 = *(_QWORD *)v6;
        v10 = *(_QWORD *)(v6 + 8);
        v11 = *(_DWORD *)(v6 + 16);
        if (v9[1]
          && !kaldi::TransitionModel::TransitionIdToHmmState(a1, v9[1])
          && !kaldi::TransitionModel::IsSelfLoop(a1, v9[1]))
        {
          v7 = kaldi::TransitionModel::TransitionIdToPhone(a1, v9[1]);
          if (v9[0])
          {
            v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2);
          }
          else
          {
            v9[0] = v7 + v4;
          }
        }
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v12 + 88))(v12, v9);
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      }
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
    else
      ++v15;
  }
  if (v13)
    (*(void (**)(void))(*(_QWORD *)v13 + 8))();
  return v4;
}

void sub_1ADA90F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeLatticeDeletePhones<fst::LatticeWeightTpl<float>>(int a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;

  v13 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v11);
  while (1)
  {
    result = v11;
    if (!v11)
    {
      if ((int)v13 >= v12)
        return result;
LABEL_7:
      v6 = v13;
      goto LABEL_8;
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    result = v11;
    if (v5)
      break;
    if (!v11)
      goto LABEL_7;
    v6 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 24))();
LABEL_8:
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 296))(a2, v6, &v10);
    while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v8[0] = *(_QWORD *)v7;
      v8[1] = *(_QWORD *)(v7 + 8);
      v9 = *(_DWORD *)(v7 + 16);
      if (SLODWORD(v8[0]) >= a1)
        LODWORD(v8[0]) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 88))(v10, v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    }
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    else
      ++v13;
  }
  if (v11)
    return (*(uint64_t (**)(void))(*(_QWORD *)v11 + 8))();
  return result;
}

void sub_1ADA91144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t fst::HighestNumberedInputSymbol<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  _QWORD v7[3];
  _DWORD *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;

  v12 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v10);
  v2 = 0;
  while (1)
  {
    if (!v10)
    {
      if ((int)v12 >= v11)
        return v2;
LABEL_7:
      v3 = v12;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10))
      break;
    if (!v10)
      goto LABEL_7;
    v3 = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 24))();
LABEL_8:
    v9 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v3, v7);
    while (1)
    {
      if (!v7[0])
      {
        if (v9 >= v7[2])
          goto LABEL_24;
LABEL_18:
        v5 = *(_DWORD *)(v7[1] + 20 * v9);
        if ((int)v2 <= v5)
          v2 = v5;
        else
          v2 = v2;
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v7[0] + 24))(v7[0]))
        break;
      if (!v7[0])
        goto LABEL_18;
      v4 = *(_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v7[0] + 32))();
      if ((int)v2 <= v4)
        v2 = v4;
      else
        v2 = v2;
      if (v7[0])
        (*(void (**)(void))(*(_QWORD *)v7[0] + 40))();
      else
LABEL_21:
        ++v9;
    }
    if (v7[0])
    {
      (*(void (**)(void))(*(_QWORD *)v7[0] + 8))();
      goto LABEL_26;
    }
LABEL_24:
    if (v8)
      --*v8;
LABEL_26:
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    else
      ++v12;
  }
  if (v10)
    (*(void (**)(void))(*(_QWORD *)v10 + 8))();
  return v2;
}

void sub_1ADA9132C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

void StopNgramStats::StopNgramStats(StopNgramStats *this, Vocab *a2, SubVocab *a3, int a4)
{
  _QWORD *v5;

  NgramCounts<unsigned long>::NgramCounts(this, a2, a4);
  *v5 = &off_1E5D165C8;
  v5[22] = a3;
}

_QWORD *StopNgramStats::incrementCounts(_QWORD *this, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  _QWORD *v5;
  unsigned int v6;
  char v7;

  if (*a2 != -1)
  {
    v4 = a2;
    v5 = this + 20;
    do
    {
      v7 = 0;
      this = Trie<unsigned int,unsigned long>::insertTrie(v5, v4, &v7);
      v6 = v4[1];
      ++v4;
      this[1] += a3;
    }
    while (v6 != -1);
  }
  return this;
}

uint64_t StopNgramStats::countSentence(StopNgramStats *this, Vocab *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  Vocab *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  int v14;
  int v16;
  _BYTE v17[12];
  int v18;

  v6 = Vocab::length((uint64_t)a2, (const unsigned int *)a2);
  *(_DWORD *)&v17[8] = 0;
  v18 = 0;
  v16 = 0;
  *(_QWORD *)v17 = (v6 + 1);
  if ((_DWORD)v6 == -1 || (Array<unsigned int>::alloc((uint64_t)&v16, v6, 0), (_DWORD)v6))
  {
    v7 = 0;
    v8 = a2;
    v9 = v6;
    do
    {
      v10 = *(_QWORD *)&v17[4];
      *(_DWORD *)(*(_QWORD *)&v17[4] + 4 * (v7 - v16)) = *(_DWORD *)v8;
      *(_DWORD *)(v10 + 4 * (v7 + 1 - v16)) = -1;
      v11 = *((_DWORD *)this + 39);
      if (v7 + 1 >= v11)
        StopNgramStats::incrementCounts(this, (unsigned int *)(v10 + 4 * (int)(v7 + 1 - (v11 + v16))), a3);
      else
        StopNgramStats::incrementCounts(this, (unsigned int *)(v10 - 4 * v16), a3);
      if (!(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 22) + 32))(*((_QWORD *)this + 22), *(unsigned int *)v8))
      {
        *(_DWORD *)(*(_QWORD *)&v17[4] + 4 * (v7 - v16)) = *(_DWORD *)v8;
        ++v7;
      }
      v8 = (Vocab *)((char *)v8 + 4);
      --v9;
    }
    while (v9);
    v12 = 0;
  }
  else
  {
    v12 = 1;
  }
  *((double *)this + 8) = *((double *)this + 8) + (double)v6;
  v13 = *(_DWORD *)a2;
  if (v13 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3)))
    *((double *)this + 8) = *((double *)this + 8) + -1.0;
  if ((v12 & 1) == 0)
  {
    v14 = *((_DWORD *)a2 + (v6 - 1));
    if (v14 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3)))
      *((double *)this + 8) = *((double *)this + 8) + -1.0;
  }
  *((double *)this + 7) = *((double *)this + 7) + 1.0;
  if (*(_QWORD *)&v17[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v17[4], 0x1000C8052888210);
  return v6;
}

void sub_1ADA9160C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    MEMORY[0x1AF44D160](a11, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void StopNgramStats::~StopNgramStats(StopNgramStats *this)
{
  *(_QWORD *)this = &unk_1E5D15AB8;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
}

{
  *(_QWORD *)this = &unk_1E5D15AB8;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t StopNgramStats::countSentence(StopNgramStats *this, const unsigned int *a2)
{
  return (*(uint64_t (**)(StopNgramStats *, const unsigned int *, uint64_t))(*(_QWORD *)this + 136))(this, a2, 1);
}

_QWORD *quasar::QualityEstimatorOptions::options@<X0>(quasar::QualityEstimatorOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x48uLL);
  a2[1] = result + 9;
  a2[2] = result + 9;
  *result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 336;
  result[3] = (char *)this + 496;
  result[4] = (char *)this + 656;
  result[5] = (char *)this + 816;
  result[6] = (char *)this + 976;
  result[7] = (char *)this + 1136;
  result[8] = (char *)this + 1296;
  *a2 = result;
  return result;
}

void quasar::QualityEstimatorBlock::init(std::string *this)
{
  const std::string *v2;
  const std::string *v3;
  const std::string *v4;
  _QWORD *v5;
  _QWORD *i;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v2 = (const std::string *)quasar::OptionValue<std::string>::value(this[1].__r_.__value_.__r.__words);
  std::string::operator=(this + 67, v2);
  v3 = (const std::string *)quasar::OptionValue<std::string>::value(&this[7].__r_.__value_.__r.__words[2]);
  std::string::operator=(this + 68, v3);
  if ((SHIBYTE(this[67].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this[67].__r_.__value_.__s + 23))
      goto LABEL_3;
LABEL_26:
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v22, "src-locale not present in the config");
    goto LABEL_29;
  }
  if (!this[67].__r_.__value_.__l.__size_)
    goto LABEL_26;
LABEL_3:
  if ((SHIBYTE(this[68].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this[68].__r_.__value_.__s + 23))
      goto LABEL_5;
    goto LABEL_28;
  }
  if (!this[68].__r_.__value_.__l.__size_)
  {
LABEL_28:
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v22, "tgt-locale not present in the config");
LABEL_29:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v22);
  }
LABEL_5:
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v4 = (const std::string *)quasar::OptionValue<std::string>::value(&this[14].__r_.__value_.__l.__size_);
  kaldi::SplitStringToVector(v4, ",", 1, (uint64_t)&v19);
  v18 = 0uLL;
  v5 = v19;
  for (i = v20; v5 != i; v5 += 3)
  {
    quasar::QualityEstimatorFeature::create(v5, &v22);
    v7 = v22;
    v22 = 0uLL;
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    v18 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    (*(void (**)(_QWORD, std::string::value_type *))(*(_QWORD *)v18 + 24))(v18, &this->__r_.__value_.__s.__data_[8]);
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](&this[66].__r_.__value_.__l.__data_, &v18);
  }
  if (quasar::gLogLevel > 4)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"QE handler contains ", 20);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" features", 9);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v22);
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)&v22 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
}

void `virtual thunk to'quasar::QualityEstimatorBlock::init(quasar::QualityEstimatorBlock *this)
{
  quasar::QualityEstimatorBlock::init((std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)));
}

void quasar::QualityEstimatorBlock::addQEFeatureScoresToMetaInfo(uint64_t a1, quasar::MetaInfo::Impl **a2, _QWORD *a3)
{
  quasar *v5;
  float *v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  BOOL v12;
  void *__p;
  std::string v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  char v20;
  uint64_t v21;
  _BYTE v22[64];
  _BYTE v23[64];

  quasar::PTree::PTree((quasar::PTree *)v23);
  quasar::PTree::PTree((quasar::PTree *)v22);
  v8 = (float *)*a3;
  v6 = (float *)(a3 + 1);
  v7 = v8;
  if (v8 != v6)
  {
    do
    {
      v9 = v7[14];
      LODWORD(__p) = quasar::getType(v5, v9);
      std::to_string(&v14, v9);
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 1;
      quasar::PTree::putChild((uint64_t)v22, (uint64_t)(v7 + 8), (uint64_t)&__p, 1);
      quasar::PTree::~PTree((quasar::PTree *)&__p);
      v10 = (float *)*((_QWORD *)v7 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(float **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (float *)*((_QWORD *)v7 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != v6);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "quality_features");
  quasar::PTree::putChild((uint64_t)v23, (uint64_t)&__p, (uint64_t)v22, 1);
  if (v14.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  quasar::PTree::writeJson((quasar::PTreeHelper *)v23, &__p, 0);
  quasar::MetaInfo::update(a2, (const quasar::PTree *)v23);
  __p = (void *)*MEMORY[0x1E0DE4F60];
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v14.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete(v19);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v21);
  quasar::PTree::~PTree((quasar::PTree *)v22);
  quasar::PTree::~PTree((quasar::PTree *)v23);
}

void sub_1ADA91C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  quasar::PTree::~PTree((quasar::PTree *)(v15 - 208));
  quasar::PTree::~PTree((quasar::PTree *)(v15 - 144));
  _Unwind_Resume(a1);
}

void quasar::QualityEstimatorBlock::estimateQuality(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  __int128 *v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  _OWORD *v17;
  _QWORD *v18;
  void **v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v25[2];
  uint64_t v26;
  void **v27;
  char *v28[2];
  uint64_t v29[3];
  void *__p[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unsigned __int8 v48;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *a3;
  if (a3[1] != *a3)
  {
    v7 = 0;
    do
    {
      quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v47, (quasar::TranslationPhraseInternal *)(v5 + 200 * v7));
      if (quasar::gLogLevel >= 5)
      {
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v34 = 0u;
        v32 = 0u;
        v33 = 0u;
        *(_OWORD *)__p = 0u;
        v31 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Raw hypothesis : ", 17);
        if ((v48 & 0x80u) == 0)
          v9 = &v47;
        else
          v9 = (__int128 *)v47;
        if ((v48 & 0x80u) == 0)
          v10 = v48;
        else
          v10 = *((_QWORD *)&v47 + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      quasar::getWordBoundarySeparatedString((char *)&v47, (std::vector<std::string> *)__p);
      quasar::QualityEstimatorBlock::cleanICUTokens((uint64_t *)__p, v29);
      v27 = __p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
      kaldi::JoinVectorToString(v29, " ", 1, &v47);
      if (quasar::gLogLevel >= 5)
      {
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v34 = 0u;
        v32 = 0u;
        v33 = 0u;
        *(_OWORD *)__p = 0u;
        v31 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Tokenized hypothesis : ", 23);
        if ((v48 & 0x80u) == 0)
          v12 = &v47;
        else
          v12 = (__int128 *)v47;
        if ((v48 & 0x80u) == 0)
          v13 = v48;
        else
          v13 = *((_QWORD *)&v47 + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      v28[0] = 0;
      v28[1] = 0;
      v27 = (void **)v28;
      v14 = *(_QWORD **)(a1 + 1584);
      v15 = *(_QWORD **)(a1 + 1592);
      while (v14 != v15)
      {
        v16 = (*(float (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)*v14 + 32))(*v14, a2, v29);
        if (v16 == 0.0)
        {
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*v14 + 16))(v25);
          *(_OWORD *)__p = *(_OWORD *)v25;
          *(_QWORD *)&v31 = v26;
          v25[1] = 0;
          v26 = 0;
          v25[0] = 0;
          *((float *)&v31 + 2) = v16;
          v17 = std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string,float>>((uint64_t **)&v27, (const void **)__p, (uint64_t)__p);
          if (SBYTE7(v31) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v26) < 0)
            operator delete(v25[0]);
          quasar::QualityEstimatorBlock::addQEFeatureScoresToMetaInfo((uint64_t)v17, (quasar::MetaInfo::Impl **)(v5 + 200 * v7 + 192), &v27);
          *(_BYTE *)(v5 + 200 * v7 + 8) = 1;
          break;
        }
        v14 += 2;
      }
      if (quasar::gLogLevel >= 5)
      {
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v34 = 0u;
        v32 = 0u;
        v33 = 0u;
        *(_OWORD *)__p = 0u;
        v31 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Meta info ", 10);
        quasar::MetaInfo::json((quasar::MetaInfo::Impl **)(v5 + 200 * v7 + 192), (uint64_t)v25);
        if (v26 >= 0)
          v19 = v25;
        else
          v19 = (void **)v25[0];
        if (v26 >= 0)
          v20 = HIBYTE(v26);
        else
          v20 = (uint64_t)v25[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
        if (SHIBYTE(v26) < 0)
          operator delete(v25[0]);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        if (quasar::gLogLevel >= 5)
        {
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v34 = 0u;
          v32 = 0u;
          v33 = 0u;
          *(_OWORD *)__p = 0u;
          v31 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Confidence ", 11);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          if (quasar::gLogLevel >= 5)
          {
            v45 = 0u;
            v46 = 0u;
            v43 = 0u;
            v44 = 0u;
            v41 = 0u;
            v42 = 0u;
            v39 = 0u;
            v40 = 0u;
            v37 = 0u;
            v38 = 0u;
            v35 = 0u;
            v36 = 0u;
            v34 = 0u;
            v32 = 0u;
            v33 = 0u;
            *(_OWORD *)__p = 0u;
            v31 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LowConfidence ", 14);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
        }
      }
      v21 = a4[1];
      if (v21 >= a4[2])
      {
        v22 = std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(a4, (const quasar::TranslationPhraseInternal *)(v5 + 200 * v7));
      }
      else
      {
        quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)a4[1], (const quasar::TranslationPhraseInternal *)(v5 + 200 * v7));
        v22 = v21 + 200;
        a4[1] = v21 + 200;
      }
      a4[1] = v22;
      std::__tree<std::string>::destroy((uint64_t)&v27, v28[0]);
      __p[0] = v29;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if ((char)v48 < 0)
        operator delete((void *)v47);
      ++v7;
      v5 = *a3;
    }
    while (v7 < 0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3));
  }
}

void sub_1ADA92118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::__tree<std::string>::destroy((uint64_t)&a18, a19);
  __p = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v29 - 113) < 0)
    operator delete(*(void **)(v29 - 136));
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::QualityEstimatorBlock::cleanICUTokens(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  std::string::size_type size;
  std::__wrap_iter<const char *> v4;
  std::__wrap_iter<const char *> v5;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v8;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v9;
  std::string v10;
  std::string v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  memset(&v11, 0, sizeof(v11));
  kaldi::JoinVectorToString(a1, " ", 1, (__int128 *)&v11);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v9.__traits_, "  *", 0);
  memset(&v10, 0, sizeof(v10));
  size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v11;
  else
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)v11.__r_.__value_.__r.__words[0];
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v11.__r_.__value_.__l.__size_;
  v5.__i_ = &v4.__i_[size];
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v10, v4, v5, &v9, " ", 0);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  cntrl = v9.__start_.__cntrl_;
  if (v9.__start_.__cntrl_)
  {
    p_shared_owners = &v9.__start_.__cntrl_->__shared_owners_;
    do
      v8 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v8 - 1, (unint64_t *)p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  std::locale::~locale(&v9.__traits_.__loc_);
  kaldi::SplitStringToVector(&v11, " ", 1, (uint64_t)a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1ADA92360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::locale::~locale(&a10);
  if (*(char *)(v23 - 25) < 0)
    operator delete(*(void **)(v23 - 48));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void quasar::QualityEstimatorBlock::processBody(quasar::QualityEstimatorBlock *this)
{
  quasar::ProcessingInput *v2;
  _QWORD *Value;
  _QWORD *v4;
  uint64_t v5;
  const void **v6;
  const void **i;
  size_t v8;
  void **v9;
  const void *v10;
  void **v11;
  std::string::size_type v12;
  std::string::size_type size;
  _QWORD *v14;
  std::string *p_str;
  std::string::size_type v16;
  _QWORD *v17;
  std::string *v18;
  std::string::size_type v19;
  uint64_t *v20;
  uint64_t v21;
  void **v22[3];
  uint64_t v23[3];
  std::string __str;
  void *__p[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  void ***v42;

  v2 = (quasar::QualityEstimatorBlock *)((char *)this + 1472);
  Value = (_QWORD *)quasar::ProcessingInput::getValue((quasar::QualityEstimatorBlock *)((char *)this + 1472));
  if (*Value == Value[1])
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "empty source input received");
    goto LABEL_49;
  }
  v4 = (_QWORD *)quasar::ProcessingInput::getValue((quasar::QualityEstimatorBlock *)((char *)this + 1528));
  if (*v4 == v4[1])
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "empty nbest input received");
LABEL_49:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  memset(&__str, 0, sizeof(__str));
  v5 = quasar::ProcessingInput::getValue(v2);
  v6 = *(const void ***)(*(_QWORD *)v5 + 136);
  for (i = *(const void ***)(*(_QWORD *)v5 + 144); v6 != i; v6 += 17)
  {
    if (*((char *)v6 + 23) >= 0)
      v8 = *((unsigned __int8 *)v6 + 23);
    else
      v8 = (size_t)v6[1];
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
    if ((SBYTE7(v26) & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if (v8)
    {
      if (*((char *)v6 + 23) >= 0)
        v10 = v6;
      else
        v10 = *v6;
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)v9 + v8) = 32;
    if ((SBYTE7(v26) & 0x80u) == 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if ((SBYTE7(v26) & 0x80u) == 0)
      v12 = BYTE7(v26);
    else
      v12 = (std::string::size_type)__p[1];
    std::string::append(&__str, (const std::string::value_type *)v11, v12);
    if (SBYTE7(v26) < 0)
      operator delete(__p[0]);
  }
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  std::string::basic_string((std::string *)__p, &__str, 0, size - 1, (std::allocator<char> *)v23);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  __str.__r_.__value_.__r.__words[2] = v26;
  if (quasar::gLogLevel >= 5)
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Raw source : ", 13);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v16 = __str.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_str, v16);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  quasar::getWordBoundarySeparatedString((char *)&__str, (std::vector<std::string> *)__p);
  quasar::QualityEstimatorBlock::cleanICUTokens((uint64_t *)__p, v23);
  v22[0] = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v22);
  kaldi::JoinVectorToString(v23, " ", 1, (__int128 *)&__str);
  if (quasar::gLogLevel >= 5)
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Tokenized source : ", 19);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &__str;
    else
      v18 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v19 = __str.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  v20 = (uint64_t *)quasar::ProcessingInput::getValue((quasar::QualityEstimatorBlock *)((char *)this + 1528));
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v26 = 0;
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(__p, *v20, v20[1], 0x8F5C28F5C28F5C29 * ((v20[1] - *v20) >> 3));
  v21 = *(_QWORD *)(*(_QWORD *)this - 24);
  quasar::QualityEstimatorBlock::estimateQuality((uint64_t)this, (uint64_t)v23, (uint64_t *)__p, (uint64_t *)v22);
  quasar::ProcessingBlock::send((uint64_t)this + v21, (uint64_t)v22, 0);
  v42 = v22;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  v22[0] = __p;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](v22);
  __p[0] = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void `non-virtual thunk to'quasar::QualityEstimatorBlock::processBody(quasar::QualityEstimatorBlock *this)
{
  quasar::QualityEstimatorBlock::processBody((quasar::QualityEstimatorBlock *)((char *)this - 1464));
}

uint64_t quasar::QualityEstimatorBlock::minConfigVersion(quasar::QualityEstimatorBlock *this)
{
  return 35;
}

uint64_t `virtual thunk to'quasar::QualityEstimatorBlock::minConfigVersion(quasar::QualityEstimatorBlock *this)
{
  return 35;
}

void quasar::ConfiguredProcessingBlock<quasar::QualityEstimatorOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1ADA92964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::QualityEstimatorOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::QualityEstimatorOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::QualityEstimatorOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::QualityEstimatorOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::QualityEstimatorBlock::~QualityEstimatorBlock(quasar::QualityEstimatorBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 1656));
}

{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 1656));
  JUMPOUT(0x1AF44D190);
}

const char *quasar::QualityEstimatorBlock::blockType(quasar::QualityEstimatorBlock *this)
{
  return "QualityEstimatorBlock";
}

_QWORD *quasar::QualityEstimatorBlock::inputs@<X0>(quasar::QualityEstimatorBlock *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *result = (char *)this + 1472;
  result[1] = (char *)this + 1528;
  *a2 = result;
  return result;
}

_QWORD *`non-virtual thunk to'quasar::QualityEstimatorBlock::inputs@<X0>(quasar::QualityEstimatorBlock *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *result = (char *)this + 8;
  result[1] = (char *)this + 64;
  *a2 = result;
  return result;
}

void `non-virtual thunk to'quasar::QualityEstimatorBlock::~QualityEstimatorBlock(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this + 24);
}

{
  quasar::ProcessingBlock::~ProcessingBlock(this + 24);
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'quasar::QualityEstimatorBlock::~QualityEstimatorBlock(quasar::QualityEstimatorBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 1656));
}

{
  char **v1;

  v1 = (char **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  quasar::ProcessingBlock::~ProcessingBlock(v1 + 207);
  JUMPOUT(0x1AF44D190);
}

const char *`virtual thunk to'quasar::QualityEstimatorBlock::blockType(quasar::QualityEstimatorBlock *this)
{
  return "QualityEstimatorBlock";
}

void quasar::QualityEstimatorBlock::~QualityEstimatorBlock(quasar::QualityEstimatorBlock *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[5];
  *((_QWORD *)this + 183) = a2[6];
  if (*((char *)this + 1655) < 0)
    operator delete(*((void **)this + 204));
  if (*((char *)this + 1631) < 0)
    operator delete(*((void **)this + 201));
  v6 = (void **)((char *)this + 1584);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 1560);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 1551) < 0)
    operator delete(*((void **)this + 191));
  v6 = (void **)((char *)this + 1504);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 1495) < 0)
    operator delete(*((void **)this + 184));
  v5 = a2[1];
  *(_QWORD *)this = v5;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = a2[2];
  quasar::QualityEstimatorOptions::~QualityEstimatorOptions((quasar::QualityEstimatorBlock *)((char *)this + 8));
}

_OWORD *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string,float>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *quasar::DumpBlockOptions::options@<X0>(quasar::DumpBlockOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x20uLL);
  a2[1] = result + 4;
  a2[2] = result + 4;
  *result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 320;
  result[3] = (char *)this + 480;
  *a2 = result;
  return result;
}

void quasar::DumpBlock::process(_QWORD *a1, uint64_t a2, quasar::MetaInfo::Impl ***a3)
{
  quasar::MetaInfo::Impl **v3;
  quasar::MetaInfo::Impl **v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  char *v16;
  char v17;
  std::vector<std::string>::pointer v18;
  std::string::size_type v19;
  std::string *v20;
  std::vector<std::string>::pointer end;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::string *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  std::string *v30;
  std::string *v31;
  std::string::size_type v32;
  void *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::vector<std::string>::pointer v37;
  std::vector<std::string>::pointer begin;
  uint64_t v40;
  const char *v41;
  std::__split_buffer<std::string>::pointer v42;
  std::string::size_type v43;
  uint64_t v44;
  _QWORD *v46;
  void *__p[2];
  unsigned __int8 v48;
  std::string v49;
  std::string v50;
  std::vector<std::string> v51;
  std::__split_buffer<std::string> __v;
  _QWORD v53[5];

  v53[2] = *MEMORY[0x1E0C80C00];
  memset(&v51, 0, sizeof(v51));
  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    v5 = a1 + 23;
    v46 = a1 + 41;
    v6 = a1 + 61;
    while (!*(_BYTE *)quasar::OptionValue<BOOL>::value(v5))
    {
      quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v50, (quasar::TranslationPhraseInternal *)v3);
      end = v51.__end_;
      if (v51.__end_ >= v51.__end_cap_.__value_)
      {
        v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_ - (char *)v51.__begin_) >> 3);
        v28 = v27 + 1;
        if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3) > v28)
          v28 = 0x5555555555555556 * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3) >= 0x555555555555555)
          v29 = 0xAAAAAAAAAAAAAAALL;
        else
          v29 = v28;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v51.__end_cap_;
        if (v29)
          v30 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v51.__end_cap_, v29);
        else
          v30 = 0;
        v34 = v30 + v27;
        __v.__first_ = v30;
        __v.__begin_ = v34;
        __v.__end_cap_.__value_ = &v30[v29];
        v35 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
        v34->__r_.__value_.__r.__words[2] = v50.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
        memset(&v50, 0, sizeof(v50));
        __v.__end_ = v34 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v51, &__v);
        v36 = v51.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v51.__end_ = v36;
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_48;
        v33 = (void *)v50.__r_.__value_.__r.__words[0];
LABEL_47:
        operator delete(v33);
        goto LABEL_48;
      }
      v22 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
      v51.__end_->__r_.__value_.__r.__words[2] = v50.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v22;
      v51.__end_ = end + 1;
LABEL_48:
      if (*(_DWORD *)quasar::OptionValue<int>::value(v6))
      {
        begin = v51.__begin_;
        v37 = v51.__end_;
        v3 += 25;
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)begin) >> 3) >= *(int *)quasar::OptionValue<int>::value(v6)
          || v3 == v4)
        {
          goto LABEL_56;
        }
      }
      else
      {
        v3 += 25;
        if (v3 == v4)
          goto LABEL_56;
      }
    }
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v49, (quasar::TranslationPhraseInternal *)v3);
    v7 = quasar::OptionValue<std::string>::value(v46);
    v8 = *(char *)(v7 + 23);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)v7;
    else
      v9 = *(const std::string::value_type **)v7;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(v7 + 23);
    else
      v10 = *(_QWORD *)(v7 + 8);
    v11 = std::string::append(&v49, v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    quasar::MetaInfo::json(v3 + 24, (uint64_t)__p);
    if ((v48 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v48 & 0x80u) == 0)
      v14 = v48;
    else
      v14 = (std::string::size_type)__p[1];
    v15 = std::string::append(&v50, (const std::string::value_type *)v13, v14);
    v16 = (char *)v15->__r_.__value_.__r.__words[0];
    v53[0] = v15->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v53 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
    v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v18 = v51.__end_;
    if (v51.__end_ >= v51.__end_cap_.__value_)
    {
      v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_ - (char *)v51.__begin_) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3) > v24)
        v24 = 0x5555555555555556 * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3) >= 0x555555555555555)
        v25 = 0xAAAAAAAAAAAAAAALL;
      else
        v25 = v24;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v51.__end_cap_;
      if (v25)
        v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v51.__end_cap_, v25);
      else
        v26 = 0;
      v31 = v26 + v23;
      __v.__first_ = v26;
      __v.__begin_ = v31;
      __v.__end_cap_.__value_ = &v26[v25];
      v32 = v53[0];
      v31->__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      v31->__r_.__value_.__l.__size_ = v32;
      *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v53 + 7);
      *((_BYTE *)&v31->__r_.__value_.__s + 23) = v17;
      v53[0] = 0;
      *(_QWORD *)((char *)v53 + 7) = 0;
      __v.__end_ = v31 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v51, &__v);
      v20 = v51.__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
    }
    else
    {
      v19 = v53[0];
      v51.__end_->__r_.__value_.__l.__data_ = v16;
      v18->__r_.__value_.__l.__size_ = v19;
      *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v53 + 7);
      *((_BYTE *)&v18->__r_.__value_.__s + 23) = v17;
      v20 = v18 + 1;
    }
    v51.__end_ = v20;
    if ((char)v48 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_48;
    v33 = (void *)v49.__r_.__value_.__r.__words[0];
    goto LABEL_47;
  }
LABEL_56:
  memset(&__v, 0, 24);
  __v.__begin_ = (std::__split_buffer<std::string>::pointer)std::vector<quasar::TranslationPhraseInternal>::__emplace_back_slow_path<>((uint64_t *)&__v);
  memset(&v50, 0, sizeof(v50));
  v40 = quasar::OptionValue<std::string>::value(a1 + 3);
  if (*(char *)(v40 + 23) >= 0)
    v41 = (const char *)v40;
  else
    v41 = *(const char **)v40;
  kaldi::JoinVectorToString<std::string>((uint64_t *)&v51, v41, (uint64_t)&v50);
  v42 = __v.__begin_;
  v43 = __v.__begin_[-3].__r_.__value_.__r.__words[2];
  if (v43 >= __v.__begin_[-2].__r_.__value_.__r.__words[0])
  {
    v44 = std::vector<quasar::TranslationTokenInternal>::__emplace_back_slow_path<std::string &>((uint64_t *)&__v.__begin_[-3].__r_.__value_.__l.__size_, (uint64_t)&v50);
  }
  else
  {
    std::allocator<quasar::TranslationTokenInternal>::construct[abi:ne180100]<quasar::TranslationTokenInternal,std::string &>(LODWORD(__v.__begin_) - 48, (std::string *)__v.__begin_[-3].__r_.__value_.__r.__words[2], (uint64_t)&v50);
    v44 = v43 + 136;
    v42[-3].__r_.__value_.__r.__words[2] = v43 + 136;
  }
  v42[-3].__r_.__value_.__r.__words[2] = v44;
  quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)&__v, 0);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1ADA93214(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t *__pa,std::__split_buffer<std::wstring> *a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)(v33 - 56) = v32;
  if (a28 < 0)
    operator delete(__pa);
  __pa = &a32;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  __pa = (uint64_t *)&a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t kaldi::JoinVectorToString<std::string>(uint64_t *a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[11];
  char v21;
  uint64_t v22;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  v6 = *a1;
  if (a1[1] != *a1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = v6 + v7;
      v10 = *(char *)(v9 + 23);
      if (v10 >= 0)
        v11 = v9;
      else
        v11 = *(_QWORD *)v9;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(v9 + 23);
      else
        v12 = *(_QWORD *)(v9 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v11, v12);
      ++v8;
      v6 = *a1;
      v13 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      if (v8 < v13)
      {
        v14 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)a2, v14);
        v6 = *a1;
        v13 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      }
      v7 += 24;
    }
    while (v8 < v13);
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v17;
  *(_QWORD *)(a3 + 16) = v18;
  v19[0] = *MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v20[0] = v15;
  v20[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v21 < 0)
    operator delete((void *)v20[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v22);
}

void sub_1ADA93484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::DumpBlock::process(_QWORD *a1, uint64_t a2, quasar::MetaInfo::Impl ***a3)
{
  quasar::DumpBlock::process((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)), a2, a3);
}

uint64_t quasar::DumpBlock::minConfigVersion(quasar::DumpBlock *this)
{
  return 240;
}

uint64_t `virtual thunk to'quasar::DumpBlock::minConfigVersion(quasar::DumpBlock *this)
{
  return 240;
}

void quasar::ConfiguredProcessingBlock<quasar::DumpBlockOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1ADA93594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::DumpBlockOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::DumpBlockOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::DumpBlockOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::DumpBlockOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::DumpBlock::~DumpBlock(quasar::DumpBlock *this)
{
  char **v1;

  *(_QWORD *)this = off_1E5D05770;
  v1 = (char **)((char *)this + 632);
  *((_QWORD *)this + 79) = &unk_1E5D057F8;
  quasar::DumpBlockOptions::~DumpBlockOptions((quasar::DumpBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v1);
}

{
  char **v1;

  *(_QWORD *)this = off_1E5D05770;
  v1 = (char **)((char *)this + 632);
  *((_QWORD *)this + 79) = &unk_1E5D057F8;
  quasar::DumpBlockOptions::~DumpBlockOptions((quasar::DumpBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v1);
  JUMPOUT(0x1AF44D190);
}

const char *quasar::DumpBlock::blockType(quasar::DumpBlock *this)
{
  return "DumpBlock";
}

void `virtual thunk to'quasar::DumpBlock::~DumpBlock(quasar::DumpBlock *this)
{
  _QWORD *v1;
  char **v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = off_1E5D05770;
  v2 = (char **)(v1 + 79);
  v1[79] = &unk_1E5D057F8;
  quasar::DumpBlockOptions::~DumpBlockOptions((quasar::DumpBlockOptions *)(v1 + 1));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D05770;
  *((_QWORD *)v1 + 79) = &unk_1E5D057F8;
  quasar::DumpBlockOptions::~DumpBlockOptions((quasar::DumpBlockOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 79);
  JUMPOUT(0x1AF44D190);
}

const char *`virtual thunk to'quasar::DumpBlock::blockType(quasar::DumpBlock *this)
{
  return "DumpBlock";
}

void quasar::DumpBlockOptions::~DumpBlockOptions(quasar::DumpBlockOptions *this)
{
  *(_QWORD *)this = &off_1E5D35C90;
  *((_QWORD *)this + 60) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  *((_QWORD *)this + 60) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  if (*((char *)this + 535) < 0)
    operator delete(*((void **)this + 64));
  if (*((char *)this + 511) < 0)
    operator delete(*((void **)this + 61));
  *((_QWORD *)this + 40) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 456, *((_QWORD **)this + 58));
  if (*((char *)this + 447) < 0)
    operator delete(*((void **)this + 53));
  *((_QWORD *)this + 40) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 408);
  if (*((char *)this + 399) < 0)
    operator delete(*((void **)this + 47));
  if (*((char *)this + 375) < 0)
    operator delete(*((void **)this + 44));
  if (*((char *)this + 351) < 0)
    operator delete(*((void **)this + 41));
  *((_QWORD *)this + 22) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 296, *((char **)this + 38));
  *((_QWORD *)this + 22) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 2) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

uint64_t std::vector<quasar::TranslationPhraseInternal>::__emplace_back_slow_path<>(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  quasar::TranslationPhraseInternal *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v2 = *a1;
  v3 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x147AE147AE147AELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v5 = (uint64_t)(a1 + 2);
  v6 = 0x8F5C28F5C28F5C29 * ((a1[2] - v2) >> 3);
  if (2 * v6 > v4)
    v4 = 2 * v6;
  if (v6 >= 0xA3D70A3D70A3D7)
    v7 = 0x147AE147AE147AELL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>(v5, v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = (quasar::TranslationPhraseInternal *)&v8[200 * v3];
  v14 = &v8[200 * v7];
  quasar::TranslationPhraseInternal::TranslationPhraseInternal(v12);
  v13 = (char *)v12 + 200;
  std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_1ADA93A00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TranslationTokenInternal>::__emplace_back_slow_path<std::string &>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  std::string *v11;
  std::string::value_type *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0)
    v6 = 0x1E1E1E1E1E1E1E1;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (std::string *)&v7[136 * v3];
  v13 = &v7[136 * v6];
  std::allocator<quasar::TranslationTokenInternal>::construct[abi:ne180100]<quasar::TranslationTokenInternal,std::string &>((_DWORD)a1 + 16, v11, a2);
  v12 = &v11[5].__r_.__value_.__s.__data_[16];
  std::vector<quasar::TranslationTokenInternal>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::TranslationTokenInternal>::~__split_buffer(&v10);
  return v8;
}

void sub_1ADA93B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TranslationTokenInternal>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::TranslationTokenInternal>::construct[abi:ne180100]<quasar::TranslationTokenInternal,std::string &>(int a1, std::string *this, uint64_t a3)
{
  std::string v4;
  std::string v5;
  __int16 v6;
  void *__p;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v4 = *(std::string *)a3;
  v5 = v4;
  memset(&v4, 0, sizeof(v4));
  v6 = 0;
  v8 = 0;
  v9 = 0;
  __p = 0;
  v10 = 3212836864;
  v11 = -1;
  quasar::TranslationTokenInternal::TranslationTokenInternal(this, (const quasar::TranslationToken *)&v5);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1ADA93BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  quasar::TranslationToken::~TranslationToken((quasar::TranslationToken *)&a16);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *quasar::TranslationTokenInternal::TranslationTokenInternal(std::string *this, const quasar::TranslationToken *a2)
{
  __int128 v4;
  __int16 v5;
  std::string::size_type v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_WORD *)a2 + 12);
  this[1].__r_.__value_.__l.__size_ = 0;
  LOWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[1].__r_.__value_.__l.__size_, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  v6 = *((_QWORD *)a2 + 7);
  LODWORD(this[2].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 16);
  this[2].__r_.__value_.__l.__size_ = v6;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = 0u;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = -1;
  return this;
}

void sub_1ADA93CA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::WriteBasicType<unsigned int>(_QWORD *a1, int a2)
{
  uint64_t result;
  _QWORD *v4;
  std::runtime_error *exception;

  if (a2)
  {
    std::ostream::put();
    result = std::ostream::write();
  }
  else
  {
    v4 = (_QWORD *)std::ostream::operator<<();
    result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteBasicType.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1ADA93D68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADA93DD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::SplitEventMap::SplitEventMap(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  int *v9;
  int *v10;
  int v11;
  int v12;

  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_1E5D29FD8;
  kaldi::ConstIntegerSet<int>::ConstIntegerSet(a1 + 16, (uint64_t)a3);
  *(_QWORD *)(a1 + 80) = a4;
  *(_QWORD *)(a1 + 88) = a5;
  v9 = (int *)a3[1];
  if ((int *)*a3 != v9)
  {
    v10 = (int *)(*a3 + 4);
    do
    {
      if (v10 == v9)
        break;
      v12 = *(v10 - 1);
      v11 = *v10++;
    }
    while (v11 >= v12);
  }
  return a1;
}

void sub_1ADA93E70(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::EventMap *>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1ADA93EE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<kaldi::EventMap *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1ADA93F5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 *std::vector<std::vector<int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<int> const*>,std::__wrap_iter<std::vector<int> const*>>(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = a3 + 24 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - (_QWORD)a2) >> 3);
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>(v9, v21, a4, *(_QWORD **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::vector<int>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)v5 + 24 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v23, a3, v21, (char *)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[24 * v15];
      v25 = v24;
      v26 = &v19[24 * v18];
      std::__split_buffer<std::vector<int>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<int> const*>>(&v23, a3, a5);
      v5 = (__n128 *)std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1ADA9411C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

__n128 *std::vector<std::vector<int>>::__move_range(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (__n128 *)((char *)a2 + v6 - a4);
  v8 = (__n128 *)v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(__n128 **)(a1 + 8);
    do
    {
      v8->n128_u64[0] = 0;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      *v8 = *v9;
      v8[1].n128_u64[0] = v9[1].n128_u64[0];
      v9->n128_u64[0] = 0;
      v9->n128_u64[1] = 0;
      v9[1].n128_u64[0] = 0;
      v8 = (__n128 *)((char *)v8 + 24);
      v9 = (__n128 *)((char *)v9 + 24);
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::vector<int> *,std::vector<int> *,std::vector<int> *,0>(a2, v7, v6);
}

_QWORD *std::__split_buffer<std::vector<int>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<int> const*>>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a3)
  {
    v6 = &v4[3 * a3];
    v7 = 24 * a3;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v4 += 3;
      a2 += 24;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1ADA9421C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (_QWORD *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(v7, (uint64_t)a3, a1[1], (_QWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADA94370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::vector<int> *,std::vector<int> *,std::vector<int> *,0>(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 = (__n128 *)((char *)v6 - 24);
      a3 -= 24;
      std::vector<int>::__move_assign(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

_QWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD v6[3];
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v4[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void sub_1ADA949FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,_QWORD *a37)
{
  quasar::LDContext *v37;
  void *v38;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a36, a37);

  quasar::LDContext::~LDContext(v37);
  _Unwind_Resume(a1);
}

void sub_1ADA94D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v24, a23);

  _Unwind_Resume(a1);
}

uint64_t std::optional<std::set<quasar::language_detector::Locale>>::operator=[abi:ne180100]<std::set<quasar::language_detector::Locale>,void>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 24))
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    v3 = a2 + 1;
    v4 = a2[1];
    *(_QWORD *)(a1 + 8) = v4;
    v5 = a1 + 8;
    v6 = a2[2];
    *(_QWORD *)(a1 + 16) = v6;
    if (v6)
    {
      *(_QWORD *)(v4 + 16) = v5;
      *a2 = v3;
      *v3 = 0;
      a2[2] = 0;
    }
    else
    {
      *(_QWORD *)a1 = v5;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t std::optional<quasar::language_detector::Locale>::operator=[abi:ne180100]<quasar::language_detector::Locale,void>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
    v5 = (void **)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      operator delete(*v5);
    v6 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
    *((_BYTE *)a2 + 47) = 0;
    *((_BYTE *)a2 + 24) = 0;
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v7;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v8 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v8;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

std::vector<std::pair<std::string, std::string>> *std::optional<std::vector<quasar::language_detector::Locale>>::operator=[abi:ne180100]<std::vector<quasar::language_detector::Locale>,void>(std::vector<std::pair<std::string, std::string>> *this, std::vector<std::pair<std::string, std::string>> *a2)
{
  if (LOBYTE(this[1].__begin_))
  {
    std::vector<std::pair<std::string,std::string>>::__vdeallocate(this);
    *(_OWORD *)&this->__begin_ = *(_OWORD *)&a2->__begin_;
    this->__end_cap_.__value_ = a2->__end_cap_.__value_;
    a2->__begin_ = 0;
    a2->__end_ = 0;
    a2->__end_cap_.__value_ = 0;
  }
  else
  {
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
    *this = *a2;
    a2->__begin_ = 0;
    a2->__end_ = 0;
    a2->__end_cap_.__value_ = 0;
    LOBYTE(this[1].__begin_) = 1;
  }
  return this;
}

void sub_1ADA95448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void sub_1ADA95718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1ADA958F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::__optional_copy_base<std::set<quasar::language_detector::Locale>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    std::set<quasar::language_detector::Locale>::set[abi:ne180100]((uint64_t *)a1, a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1ADA95AC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<quasar::language_detector::Locale>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<quasar::language_detector::Locale>::insert[abi:ne180100]<std::__tree_const_iterator<quasar::language_detector::Locale,std::__tree_node<quasar::language_detector::Locale,void *> *,long>>(a1, *(unsigned __int8 ***)a2, (unsigned __int8 **)(a2 + 8));
  return a1;
}

void sub_1ADA95B1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<quasar::language_detector::Locale>::insert[abi:ne180100]<std::__tree_const_iterator<quasar::language_detector::Locale,std::__tree_node<quasar::language_detector::Locale,void *> *,long>>(uint64_t *result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  unsigned __int8 **v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<quasar::language_detector::Locale>::__emplace_hint_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = v4[1];
      if (v7)
      {
        do
        {
          v8 = (unsigned __int8 **)v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int8 **)v4[2];
          v9 = *v8 == (unsigned __int8 *)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<quasar::language_detector::Locale>::__emplace_hint_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 **a3, __int128 *a4)
{
  unsigned __int8 **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  unsigned __int8 **v12;

  v6 = std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<quasar::language_detector::Locale>::__construct_node<quasar::language_detector::Locale const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

unsigned __int8 **std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>(_QWORD *a1, uint64_t *a2, unsigned __int8 ***a3, uint64_t *a4, unsigned __int8 **a5)
{
  unsigned __int8 **v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 **v15;
  uint64_t *v16;
  BOOL v17;
  unsigned __int8 **v18;

  v9 = (unsigned __int8 **)(a1 + 1);
  if (a1 + 1 == a2
    || quasar::language_detector::Locale::operator<((unsigned __int8 *)a5, (unsigned __int8 **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = (unsigned __int8 **)v12;
        return (unsigned __int8 **)(v12 + 1);
      }
      else
      {
        *a3 = (unsigned __int8 **)a2;
        return (unsigned __int8 **)a2;
      }
    }
    v11 = (uint64_t *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (uint64_t *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (quasar::language_detector::Locale::operator<((unsigned __int8 *)v12 + 32, a5))
      goto LABEL_16;
    return (unsigned __int8 **)std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>((uint64_t)a1, a3, (unsigned __int8 *)a5);
  }
  if (quasar::language_detector::Locale::operator<((unsigned __int8 *)a2 + 32, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (unsigned __int8 *)a2[1];
      do
      {
        v15 = (unsigned __int8 **)v14;
        v14 = *(unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      v18 = (unsigned __int8 **)a2;
      do
      {
        v15 = (unsigned __int8 **)v18[2];
        v17 = *v15 == (unsigned __int8 *)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!quasar::language_detector::Locale::operator<((unsigned __int8 *)a5, v15 + 4))
        return (unsigned __int8 **)std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>((uint64_t)a1, a3, (unsigned __int8 *)a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (unsigned __int8 **)a2;
    }
    return (unsigned __int8 **)a4;
  }
  *a3 = (unsigned __int8 **)a2;
  *a4 = (uint64_t)a2;
  return (unsigned __int8 **)a4;
}

void std::__tree<quasar::language_detector::Locale>::__construct_node<quasar::language_detector::Locale const&>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  std::allocator<std::__tree_node<quasar::language_detector::Locale,void *>>::construct[abi:ne180100]<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(v5, (std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1ADA95E24(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  unsigned __int8 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (unsigned __int8 *)(v4 + 32);
        if (!quasar::language_detector::Locale::operator<(a3, (unsigned __int8 **)(v4 + 32)))
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!quasar::language_detector::Locale::operator<(v8, (unsigned __int8 **)a3))
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::allocator<std::__tree_node<quasar::language_detector::Locale,void *>>::construct[abi:ne180100]<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1ADA95F40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<quasar::language_detector::Locale,false>::__optional_copy_base[abi:ne180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[2].__r_.__value_.__s.__data_[0] = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    std::__construct_at[abi:ne180100]<quasar::language_detector::Locale,quasar::language_detector::Locale const&,quasar::language_detector::Locale*>(this, (__int128 *)a2);
    this[2].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_1ADA95F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::__construct_at[abi:ne180100]<quasar::language_detector::Locale,quasar::language_detector::Locale const&,quasar::language_detector::Locale*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1ADA96028(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::__optional_copy_base<std::vector<quasar::language_detector::Locale>,false>::__optional_copy_base[abi:ne180100](std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::vector<quasar::language_detector::Locale>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<quasar::language_detector::Locale>,false> const&>(a1, a2);
  return a1;
}

void sub_1ADA960C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_storage_base<std::vector<quasar::language_detector::Locale>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<quasar::language_detector::Locale>,false> const&>(std::string *result, uint64_t a2)
{
  std::string *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    result->__r_.__value_.__r.__words[0] = 0;
    result->__r_.__value_.__l.__size_ = 0;
    result->__r_.__value_.__r.__words[2] = 0;
    result = std::vector<quasar::language_detector::Locale>::__init_with_size[abi:ne180100]<quasar::language_detector::Locale*,quasar::language_detector::Locale*>(result, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
    v2[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return result;
}

std::string *std::vector<quasar::language_detector::Locale>::__init_with_size[abi:ne180100]<quasar::language_detector::Locale*,quasar::language_detector::Locale*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::language_detector::Locale>,quasar::language_detector::Locale*,quasar::language_detector::Locale*,quasar::language_detector::Locale*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1ADA96198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::language_detector::Locale>,quasar::language_detector::Locale*,quasar::language_detector::Locale*,quasar::language_detector::Locale*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<quasar::language_detector::Locale>::construct[abi:ne180100]<quasar::language_detector::Locale,quasar::language_detector::Locale&>(v7, v4, v6);
      v6 += 3;
      v4 = v12 + 2;
      v12 += 2;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::language_detector::Locale>,quasar::language_detector::Locale*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1ADA9624C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::language_detector::Locale>,quasar::language_detector::Locale*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::language_detector::Locale>::construct[abi:ne180100]<quasar::language_detector::Locale,quasar::language_detector::Locale&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1ADA962D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::language_detector::Locale>,quasar::language_detector::Locale*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::__optional_copy_base<std::map<quasar::language_detector::Locale,double>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    std::map<quasar::language_detector::Locale,double>::map[abi:ne180100]((uint64_t *)a1, a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1ADA96364(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<quasar::language_detector::Locale,double>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<quasar::language_detector::Locale,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::language_detector::Locale,double>,std::__tree_node<std::__value_type<quasar::language_detector::Locale,double>,void *> *,long>>>(a1, *(unsigned __int8 ***)a2, (unsigned __int8 **)(a2 + 8));
  return a1;
}

void sub_1ADA963C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<quasar::language_detector::Locale,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::language_detector::Locale,double>,std::__tree_node<std::__value_type<quasar::language_detector::Locale,double>,void *> *,long>>>(uint64_t *result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  unsigned __int8 **v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_hint_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = v4[1];
      if (v7)
      {
        do
        {
          v8 = (unsigned __int8 **)v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int8 **)v4[2];
          v9 = *v8 == (unsigned __int8 *)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_hint_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double> const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 **a3, __int128 *a4)
{
  unsigned __int8 **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  unsigned __int8 **v12;

  v6 = std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__construct_node<std::pair<quasar::language_detector::Locale const,double> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__construct_node<std::pair<quasar::language_detector::Locale const,double> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADA96540(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
  return this;
}

{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
  return this;
}

void sub_1ADA965D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *__Block_byref_object_copy__7(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
}

void ___ZN10EARHelpers15DictionaryToMapIN6quasar17language_detector6LocaleEdZ47___EARLanguageDetectorRequestContext_LDContext_E3__0Z47___EARLanguageDetectorRequestContext_LDContext_E3__1EENSt3__13mapIT_T0_NS6_4lessIS8_EENS6_9allocatorINS6_4pairIKS8_S9_EEEEEEP12NSDictionaryT1_T2__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t **v9;
  uint64_t v10;
  void *v11[2];
  char v12;
  void *v13;
  char v14;
  void *__p[2];
  uint64_t v16;

  v5 = a2;
  v6 = a3;
  v7 = v5;
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "ear_toString");
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v16 = 0;
  }
  quasar::language_detector::Locale::Locale(v11, __p);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);

  objc_msgSend(v6, "doubleValue");
  v9 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  __p[0] = v11;
  std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale const&>,std::tuple<>>(v9, (unsigned __int8 *)v11, (uint64_t)&std::piecewise_construct, (__int128 **)__p)[10] = v10;
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11[0]);

}

void sub_1ADA96730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale const&>,std::tuple<>>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADA96868(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  return this;
}

void sub_1ADA968FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<quasar::language_detector::Locale>::__emplace_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v6 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v10 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::vector<quasar::language_detector::Locale>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  std::allocator<std::pair<std::wstring, std::wstring>> *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::pair<std::wstring, std::wstring> *v15;
  std::pair<std::wstring, std::wstring> *v16;
  __int128 v17;
  __int128 v18;
  std::__split_buffer<std::pair<std::wstring, std::wstring>> v19;

  v6 = a1[2];
  v4 = (std::allocator<std::pair<std::wstring, std::wstring>> *)(a1 + 2);
  v5 = v6;
  v7 = *((_QWORD *)v4 - 1);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v19.__end_cap_.__value_ = v4;
    if (v14)
      v15 = (std::pair<std::wstring, std::wstring> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = v15 + v11;
    v19.__first_ = v15;
    v19.__begin_ = v16;
    v19.__end_cap_.__value_ = &v15[v14];
    v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v19.__end_ = v16 + 1;
    std::vector<quasar::language_detector::Locale>::__swap_out_circular_buffer(a1, &v19);
    v10 = a1[1];
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
}

void sub_1ADA96B38(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::language_detector::Locale>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::language_detector::Locale>,std::reverse_iterator<quasar::language_detector::Locale*>,std::reverse_iterator<quasar::language_detector::Locale*>,std::reverse_iterator<quasar::language_detector::Locale*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::language_detector::Locale>,std::reverse_iterator<quasar::language_detector::Locale*>,std::reverse_iterator<quasar::language_detector::Locale*>,std::reverse_iterator<quasar::language_detector::Locale*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::language_detector::Locale>,std::reverse_iterator<quasar::language_detector::Locale*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::language_detector::Locale>,std::reverse_iterator<quasar::language_detector::Locale*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

quasar::QsrText *quasar::QsrText::QsrText(quasar::QsrText *this)
{
  char *i;
  uint64_t v3;
  _BYTE __dst[1800];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  qmemcpy(__dst, "abfnrtv_\\~", 10);
  std::unordered_set<char>::unordered_set((uint64_t)this, __dst, 10);
  qmemcpy(__dst, " \n\t", 3);
  std::unordered_set<char>::unordered_set((uint64_t)this + 40, __dst, 3);
  *(_OWORD *)&__dst[64] = xmmword_1AE15DDC8;
  *(_OWORD *)&__dst[80] = unk_1AE15DDD8;
  *(_OWORD *)&__dst[96] = xmmword_1AE15DDE8;
  *(_OWORD *)__dst = xmmword_1AE15DD88;
  *(_OWORD *)&__dst[16] = unk_1AE15DD98;
  *(_OWORD *)&__dst[32] = xmmword_1AE15DDA8;
  *(_OWORD *)&__dst[48] = unk_1AE15DDB8;
  std::unordered_map<unsigned long,char>::unordered_map((uint64_t)this + 80, (unint64_t *)__dst, 7);
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  memcpy(__dst, &unk_1AE15DDF8, sizeof(__dst));
  std::unordered_map<char32_t,char32_t>::unordered_map((uint64_t)this + 160, (unsigned int *)__dst, 225);
  *((_BYTE *)this + 200) = 0;
  for (i = (char *)*((_QWORD *)this + 12); i; i = *(char **)i)
  {
    v3 = *((_QWORD *)i + 2);
    *(_QWORD *)__dst = i + 24;
    std::__hash_table<std::__hash_value_type<char,unsigned long>,std::__unordered_map_hasher<char,std::__hash_value_type<char,unsigned long>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,unsigned long>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,unsigned long>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>((uint64_t)this + 120, i + 24, (uint64_t)&std::piecewise_construct, (_BYTE **)__dst)[3] = v3;
  }
  return this;
}

void sub_1ADA96E1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::QsrText::getHex(int a1, char *__str, unint64_t *a3)
{
  const char *v5;
  uint64_t v6;
  _OWORD v8[17];
  char *__endptr;

  v5 = __str;
  if (__str[23] < 0)
    v5 = *(const char **)__str;
  __endptr = 0;
  *a3 = strtoul(v5, &__endptr, 16);
  *__error() = 0;
  if (__str[23] < 0)
    v6 = *((_QWORD *)__str + 1);
  else
    v6 = __str[23];
  if (__endptr == &v5[v6] && (*a3 - 0x7FFFFFFFFFFFFFFFLL > 1 || *__error() != 34))
    return 1;
  if (quasar::gLogLevel >= 1)
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Invalid or out-of-range hex value", 33);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v8);
  }
  return 0;
}

void sub_1ADA96F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

BOOL quasar::QsrText::isValidToken(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  int v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _OWORD v14[17];
  char v15;

  result = quasar::QsrText::isValidText(a1, a2);
  if (result)
  {
    v5 = *(char *)(a2 + 23);
    if (v5 >= 0)
      v6 = (char *)a2;
    else
      v6 = *(char **)a2;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a2 + 23);
    else
      v7 = *(_QWORD *)(a2 + 8);
    if (v7)
    {
      v8 = (_QWORD *)(a1 + 40);
      while (1)
      {
        v15 = *v6;
        if (std::__hash_table<char,std::hash<char>,std::equal_to<char>,std::allocator<char>>::find<char>(v8, &v15))
          break;
        ++v6;
        if (!--v7)
          return 1;
      }
      if (quasar::gLogLevel >= 1)
      {
        memset(v14, 0, sizeof(v14));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Found token separator char in token: \"", 38);
        v10 = *(char *)(a2 + 23);
        if (v10 >= 0)
          v11 = a2;
        else
          v11 = *(_QWORD *)a2;
        if (v10 >= 0)
          v12 = *(unsigned __int8 *)(a2 + 23);
        else
          v12 = *(_QWORD *)(a2 + 8);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\"", 1);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v14);
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_1ADA970BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

BOOL quasar::QsrText::isValidText(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  std::basic_string<char32_t>::size_type size;
  char v7;
  std::basic_string<char32_t> *v8;
  std::basic_string<char32_t> *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  std::basic_string<char32_t>::size_type v18;
  std::basic_string<char32_t> *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  _BYTE *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  int *v39;
  uint64_t v40;
  _BOOL8 v41;
  BOOL v43;
  int v44;
  _BOOL4 v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char v54;
  char v55;
  int v56;
  int v57;
  char Hex;
  char v59;
  _QWORD *v60;
  void *v61;
  std::string v63;
  std::string v64;
  void *__p[2];
  unsigned __int8 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  char v88;
  uint64_t v89;
  std::basic_string<char32_t> v90;
  _BYTE v91[48];
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v3 = operator new();
  *(_OWORD *)(v3 + 8) = xmmword_1AE1402C0;
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &unk_1E5D40240;
  memset(v91, 0, sizeof(v91));
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (int *)a2;
  else
    v5 = *(int **)a2;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  v92 = v3;
  v101 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v91, v5, (int *)((char *)v5 + v4), &v90);
  size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v90;
  else
    v8 = (std::basic_string<char32_t> *)v90.__r_.__value_.__r.__words[0];
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v90.__r_.__value_.__l.__size_;
  if (size)
  {
    v9 = (std::basic_string<char32_t> *)((char *)v8 + 4 * size);
    v10 = (void *)*MEMORY[0x1E0DE4F60];
    v61 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
    v11 = MEMORY[0x1E0DE4FB8] + 16;
    do
    {
      if (!u_charType(v8->__r_.__value_.__s.__data_[0]))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v84);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"Found unassigned code point ", 28);
        v12 = (_QWORD *)std::ostream::operator<<();
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" in string \"", 12);
        v14 = *(char *)(a2 + 23);
        if (v14 >= 0)
          v15 = a2;
        else
          v15 = *(_QWORD *)a2;
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(a2 + 23);
        else
          v16 = *(_QWORD *)(a2 + 8);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\" (", 3);
        v18 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v90;
        else
          v19 = (std::basic_string<char32_t> *)v90.__r_.__value_.__r.__words[0];
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v18 = v90.__r_.__value_.__l.__size_;
        if (v18)
        {
          v20 = 4 * v18;
          do
          {
            v21 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" ", 1);
            v19 = (std::basic_string<char32_t> *)((char *)v19 + 4);
            v20 -= 4;
          }
          while (v20);
        }
        v22 = atomic_load((unsigned __int8 *)(a1 + 200));
        if ((v22 & 1) == 0)
        {
          if (quasar::gLogLevel >= 4)
          {
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v72 = 0u;
            v73 = 0u;
            v71 = 0u;
            v69 = 0u;
            v70 = 0u;
            v67 = 0u;
            v68 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
            std::stringbuf::str();
            if ((v66 & 0x80u) == 0)
              v23 = __p;
            else
              v23 = (void **)__p[0];
            if ((v66 & 0x80u) == 0)
              v24 = v66;
            else
              v24 = (uint64_t)__p[1];
            v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)v23, v24);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)")", 2);
            if ((char)v66 < 0)
              operator delete(__p[0]);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v67);
          }
          atomic_store(1u, (unsigned __int8 *)(a1 + 200));
        }
        v84 = v10;
        *(void **)((char *)&v84 + *((_QWORD *)v10 - 3)) = v61;
        v85 = v11;
        if (v88 < 0)
          operator delete(v87);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1AF44D094](&v89);
      }
      v8 = (std::basic_string<char32_t> *)((char *)v8 + 4);
    }
    while (v8 != v9);
    v7 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
  }
  if (v7 < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  v84 = 0;
  v85 = 0;
  v86 = 0;
  if ((quasar::QsrText::normalizeUnicode(a1, a2, (uint64_t)&v84, 0, 1) & 1) == 0)
  {
    if (quasar::gLogLevel >= 1)
    {
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v71 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Unicode normalization failed for:", 33);
      v34 = *(char *)(a2 + 23);
      if (v34 >= 0)
        v35 = a2;
      else
        v35 = *(_QWORD *)a2;
      if (v34 >= 0)
        v36 = *(unsigned __int8 *)(a2 + 23);
      else
        v36 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v67);
    }
    goto LABEL_80;
  }
  v26 = *(unsigned __int8 *)(a2 + 23);
  v27 = *(_QWORD *)(a2 + 8);
  if ((v26 & 0x80u) == 0)
    v28 = *(unsigned __int8 *)(a2 + 23);
  else
    v28 = *(_QWORD *)(a2 + 8);
  v29 = HIBYTE(v86);
  if (v86 < 0)
    v29 = v85;
  if (v28 != v29)
    goto LABEL_72;
  if (v86 >= 0)
    v30 = (unsigned __int8 *)&v84;
  else
    v30 = (unsigned __int8 *)v84;
  if ((v26 & 0x80) != 0)
  {
    v32 = *(_BYTE **)a2;
    if (!memcmp(*(const void **)a2, v30, *(_QWORD *)(a2 + 8)))
      goto LABEL_84;
LABEL_72:
    if (quasar::gLogLevel >= 4)
    {
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v71 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Input string is not Unicode normalized:", 39);
      v38 = *(char *)(a2 + 23);
      if (v38 >= 0)
        v39 = (int *)a2;
      else
        v39 = *(int **)a2;
      if (v38 >= 0)
        v40 = *(unsigned __int8 *)(a2 + 23);
      else
        v40 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v39, v40);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v67);
    }
    goto LABEL_80;
  }
  if (!*(_BYTE *)(a2 + 23))
  {
LABEL_91:
    v44 = 0;
    v45 = 0;
    while (1)
    {
      v46 = *(unsigned __int8 *)(a2 + 23);
      v47 = (char)v46;
      if ((v46 & 0x80u) != 0)
        v46 = *(_QWORD *)(a2 + 8);
      v41 = v46 <= v44;
      if (v46 <= v44)
        goto LABEL_81;
      v48 = v44;
      LOBYTE(__p[0]) = 0;
      v49 = v47 >= 0 ? a2 : *(_QWORD *)a2;
      v50 = *(unsigned __int8 *)(v49 + v44);
      LOBYTE(__p[0]) = v50;
      if (!v45)
        break;
      if (std::__hash_table<char,std::hash<char>,std::equal_to<char>,std::allocator<char>>::find<char>((_QWORD *)a1, (char *)__p))
      {
        v45 = 0;
LABEL_102:
        ++v44;
        goto LABEL_103;
      }
      if (LOBYTE(__p[0]) == 119)
      {
        ++v44;
        v56 = *(unsigned __int8 *)(a2 + 23);
        if ((v56 & 0x80u) != 0)
          v56 = *(_DWORD *)(a2 + 8);
        if (v56 - v44 <= 1)
        {
          if (quasar::gLogLevel >= 1)
          {
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v72 = 0u;
            v73 = 0u;
            v71 = 0u;
            v69 = 0u;
            v70 = 0u;
            v67 = 0u;
            v68 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"~w is not followed by 2 hex digits", 34);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v67);
          }
          goto LABEL_80;
        }
        v90.__r_.__value_.__r.__words[0] = 0;
        v57 = std::string::basic_string(&v63, (const std::string *)a2, v44, 2uLL, (std::allocator<char> *)&v67);
        Hex = quasar::QsrText::getHex(v57, (char *)&v63, (unint64_t *)&v90);
        v59 = Hex;
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v63.__r_.__value_.__l.__data_);
          if ((v59 & 1) == 0)
          {
LABEL_123:
            v51 = 1;
            goto LABEL_130;
          }
        }
        else if ((Hex & 1) == 0)
        {
          goto LABEL_123;
        }
        if (quasar::gLogLevel >= 6)
        {
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v71 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"~w followed by hexValue=", 24);
          std::ostream::operator<<();
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v67);
        }
        v45 = 0;
        v44 = v48 + 3;
      }
      else
      {
        if (LOBYTE(__p[0]) != 85)
        {
          if (quasar::gLogLevel >= 1)
          {
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v72 = 0u;
            v73 = 0u;
            v71 = 0u;
            v69 = 0u;
            v70 = 0u;
            v67 = 0u;
            v68 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
            v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Encountered invalid tilde char: ", 32);
            LOBYTE(v90.__r_.__value_.__l.__data_) = __p[0];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)&v90, 1);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v67);
          }
          goto LABEL_80;
        }
        ++v44;
        v52 = *(unsigned __int8 *)(a2 + 23);
        if ((v52 & 0x80u) != 0)
          v52 = *(_DWORD *)(a2 + 8);
        if (v52 - v44 <= 7)
        {
          if (quasar::gLogLevel >= 1)
          {
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v72 = 0u;
            v73 = 0u;
            v71 = 0u;
            v69 = 0u;
            v70 = 0u;
            v67 = 0u;
            v68 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"~U is not followed by 8 hex digits", 34);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v67);
          }
          goto LABEL_80;
        }
        v90.__r_.__value_.__r.__words[0] = 0;
        v53 = std::string::basic_string(&v64, (const std::string *)a2, v44, 8uLL, (std::allocator<char> *)&v67);
        v54 = quasar::QsrText::getHex(v53, (char *)&v64, (unint64_t *)&v90);
        v55 = v54;
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v64.__r_.__value_.__l.__data_);
          if ((v55 & 1) == 0)
            goto LABEL_129;
        }
        else if ((v54 & 1) == 0)
        {
          goto LABEL_129;
        }
        if (v90.__r_.__value_.__s.__data_[0] != 127 && (v90.__r_.__value_.__s.__data_[0] - 1) >= 0x1F)
        {
          if (quasar::gLogLevel >= 1)
          {
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v72 = 0u;
            v73 = 0u;
            v71 = 0u;
            v69 = 0u;
            v70 = 0u;
            v67 = 0u;
            v68 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"~U is not followed by a valid unloggly code point", 49);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v67);
          }
LABEL_129:
          v51 = 1;
LABEL_130:
          v45 = 1;
          goto LABEL_104;
        }
        v45 = 0;
        v44 = v48 + 9;
      }
LABEL_103:
      v51 = 8;
LABEL_104:
      if (v51 != 8)
        goto LABEL_81;
    }
    v45 = v50 == 126;
    goto LABEL_102;
  }
  v31 = 0;
  do
  {
    if (*(unsigned __int8 *)(a2 + v31) != v30[v31])
      goto LABEL_72;
    ++v31;
  }
  while (v26 != v31);
  v32 = (_BYTE *)a2;
  v27 = *(unsigned __int8 *)(a2 + 23);
LABEL_84:
  if (!v27)
    goto LABEL_91;
  while (1)
  {
    LOBYTE(v90.__r_.__value_.__l.__data_) = 0;
    LOBYTE(v90.__r_.__value_.__l.__data_) = *v32;
    v43 = SLOBYTE(v90.__r_.__value_.__l.__data_) != 127
       && (SLOBYTE(v90.__r_.__value_.__l.__data_) - 1) > 0x1E;
    if (!v43
      && !std::__hash_table<char,std::hash<char>,std::equal_to<char>,std::allocator<char>>::find<char>((_QWORD *)(a1 + 40), (char *)&v90))
    {
      break;
    }
    ++v32;
    if (!--v27)
      goto LABEL_91;
  }
  if (quasar::gLogLevel >= 1)
  {
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v71 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Found illegal char with value ", 30);
    std::ostream::operator<<();
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v67);
  }
LABEL_80:
  v41 = 0;
LABEL_81:
  if (SHIBYTE(v86) < 0)
    operator delete(v84);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v91);
  return v41;
}

void sub_1ADA97A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a21);
  if (a60 < 0)
    operator delete(__p);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void sub_1ADA97B50(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37)
{
  void *v37;
  void *v38;
  const char *v39;
  size_t v40;

  if (a2 == 1)
  {
    v37 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      v38 = v37;
      a36 = 0u;
      a37 = 0u;
      a34 = 0u;
      a35 = 0u;
      a32 = 0u;
      a33 = 0u;
      a30 = 0u;
      a31 = 0u;
      a28 = 0u;
      a29 = 0u;
      a26 = 0u;
      a27 = 0u;
      a25 = 0u;
      a23 = 0u;
      a24 = 0u;
      a21 = 0u;
      a22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a21);
      v39 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
      v40 = strlen(v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a21, (uint64_t)v39, v40);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a21);
    }
    __cxa_end_catch();
    JUMPOUT(0x1ADA975ACLL);
  }
  JUMPOUT(0x1ADA97B40);
}

void sub_1ADA97C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  __cxa_end_catch();
  JUMPOUT(0x1ADA97B40);
}

void sub_1ADA97C80(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADA97B48);
}

uint64_t quasar::QsrText::normalizeUnicode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  unsigned int *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  std::basic_string<char32_t>::value_type *v19;
  _BOOL8 v20;
  std::basic_string<char32_t>::size_type size;
  char *v22;
  char v23;
  const char *v24;
  int32_t v25;
  _QWORD *v26;
  const char *v27;
  size_t v28;
  size_t v29;
  void *v30;
  int v31;
  const char *v32;
  int32_t v33;
  _QWORD *v34;
  const char *v35;
  size_t v36;
  size_t v37;
  void *v38;
  int32_t v39;
  int32_t v40;
  _QWORD *v41;
  const char *v42;
  size_t v43;
  size_t v45;
  void *v46;
  _QWORD *v47;
  const char *v48;
  size_t v49;
  int32_t destCapacity;
  _BYTE __str[32];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  std::string pDestLength;
  std::basic_string<char32_t> v68;
  _BYTE v69[48];
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v11 = operator new();
    *(_OWORD *)(v11 + 8) = xmmword_1AE1402C0;
    *(_DWORD *)(v11 + 24) = 0;
    *(_QWORD *)v11 = &unk_1E5D40240;
    memset(v69, 0, sizeof(v69));
    v70 = v11;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = (int *)a2;
    else
      v13 = *(int **)a2;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a2 + 8);
    v79 = 0;
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v69, v13, (int *)((char *)v13 + v12), (std::basic_string<char32_t> *)__str);
    memset(&v68, 0, sizeof(v68));
    if (a5)
    {
      v14 = __str[23];
      if (__str[23] >= 0)
        v15 = (unsigned int *)__str;
      else
        v15 = *(unsigned int **)__str;
      if (__str[23] < 0)
        v14 = *(_QWORD *)&__str[8];
      if (v14)
      {
        v16 = (_QWORD *)(a1 + 160);
        v17 = 4 * v14;
        do
        {
          v18 = std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v16, v15);
          v19 = (std::basic_string<char32_t>::value_type *)v18 + 5;
          if (!v18)
            v19 = (std::basic_string<char32_t>::value_type *)v15;
          std::basic_string<char32_t>::push_back(&v68, *v19);
          ++v15;
          v17 -= 4;
        }
        while (v17);
      }
    }
    else
    {
      std::basic_string<char32_t>::operator=(&v68, (const std::basic_string<char32_t> *)__str);
    }
    size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = (char *)&v68;
    else
      v22 = (char *)v68.__r_.__value_.__r.__words[0];
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v68.__r_.__value_.__l.__size_;
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes((uint64_t)v69, v22, &v22[4 * size], &pDestLength);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(std::string *)a3 = pDestLength;
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v68.__r_.__value_.__s.__data_[0] = 0;
    LODWORD(pDestLength.__r_.__value_.__l.__data_) = 0;
    v23 = *(_BYTE *)(a3 + 23);
    if (v23 >= 0)
      v24 = (const char *)a3;
    else
      v24 = *(const char **)a3;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a3 + 23);
    else
      v25 = *(_DWORD *)(a3 + 8);
    u_strFromUTF8(0, 0, (int32_t *)&pDestLength, v24, v25, (UErrorCode *)&v68);
    if (v68.__r_.__value_.__s.__data_[0] >= 1 && v68.__r_.__value_.__s.__data_[0] != 15)
    {
      if (quasar::gLogLevel >= 1)
      {
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v58 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        memset(__str, 0, sizeof(__str));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"u_strFromUTF8() failed with error=", 34);
        v27 = u_errorName((UErrorCode)v68.__r_.__value_.__s.__data_[0]);
        v28 = strlen(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__str);
      }
      v20 = 0;
      goto LABEL_75;
    }
    v68.__r_.__value_.__s.__data_[0] = 0;
    if (SLODWORD(pDestLength.__r_.__value_.__l.__data_) < 0)
      v29 = -1;
    else
      v29 = 2 * SLODWORD(pDestLength.__r_.__value_.__l.__data_);
    v30 = (void *)operator new[]();
    bzero(v30, v29);
    v31 = *(char *)(a3 + 23);
    if (v31 >= 0)
      v32 = (const char *)a3;
    else
      v32 = *(const char **)a3;
    if (v31 >= 0)
      v33 = *(unsigned __int8 *)(a3 + 23);
    else
      v33 = *(_DWORD *)(a3 + 8);
    u_strFromUTF8((UChar *)v30, (int32_t)pDestLength.__r_.__value_.__l.__data_, (int32_t *)&pDestLength, v32, v33, (UErrorCode *)&v68);
    if (v68.__r_.__value_.__s.__data_[0] >= 1)
    {
      if (quasar::gLogLevel >= 1)
      {
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v58 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        memset(__str, 0, sizeof(__str));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"u_strFromUTF8() failed with error=", 34);
        v35 = u_errorName((UErrorCode)v68.__r_.__value_.__s.__data_[0]);
        v36 = strlen(v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__str);
      }
      v20 = 0;
      goto LABEL_74;
    }
    if (a4 == 1)
    {
      unorm2_getNFDInstance();
    }
    else
    {
      if (a4)
      {
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v58 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        memset(__str, 0, sizeof(__str));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Unsupported normalization type: ", 32);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
      }
      unorm2_getNFCInstance();
    }
    if (SLODWORD(pDestLength.__r_.__value_.__l.__data_) < 0)
      v37 = -1;
    else
      v37 = 4 * SLODWORD(pDestLength.__r_.__value_.__l.__data_);
    v38 = (void *)operator new[]();
    bzero(v38, v37);
    v39 = unorm2_normalize();
    if (v68.__r_.__value_.__s.__data_[0] < 1)
    {
      v40 = v39;
      destCapacity = 0;
      u_strToUTF8(0, 0, &destCapacity, (const UChar *)v38, v39, (UErrorCode *)&v68);
      if (v68.__r_.__value_.__s.__data_[0] < 1 || v68.__r_.__value_.__s.__data_[0] == 15)
      {
        v68.__r_.__value_.__s.__data_[0] = 0;
        v45 = destCapacity;
        v46 = (void *)operator new[]();
        bzero(v46, v45);
        u_strToUTF8((char *)v46, destCapacity, 0, (const UChar *)v38, v40, (UErrorCode *)&v68);
        v20 = v68.__r_.__value_.__s.__data_[0] < 1;
        if (v68.__r_.__value_.__s.__data_[0] < 1)
        {
          std::string::basic_string[abi:ne180100](__str, v46, destCapacity);
          if (*(char *)(a3 + 23) < 0)
            operator delete(*(void **)a3);
          *(_OWORD *)a3 = *(_OWORD *)__str;
          *(_QWORD *)(a3 + 16) = *(_QWORD *)&__str[16];
        }
        else if (quasar::gLogLevel >= 1)
        {
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v58 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          memset(__str, 0, sizeof(__str));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
          v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"u_strToUTF8() failed with error=", 32);
          v48 = u_errorName((UErrorCode)v68.__r_.__value_.__s.__data_[0]);
          v49 = strlen(v48);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__str);
        }
        MEMORY[0x1AF44D160](v46, 0x1000C8077774924);
        goto LABEL_73;
      }
      if (quasar::gLogLevel >= 1)
      {
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v58 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        memset(__str, 0, sizeof(__str));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"u_strToUTF8() failed with error=", 32);
        v42 = u_errorName((UErrorCode)v68.__r_.__value_.__s.__data_[0]);
        v43 = strlen(v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__str);
      }
    }
    else if (quasar::gLogLevel >= 4)
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v58 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      memset(__str, 0, sizeof(__str));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Unicode NFC normalization failed.", 33);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__str);
    }
    v20 = 0;
LABEL_73:
    MEMORY[0x1AF44D160](v38, 0x1000C80BDFB0063);
LABEL_74:
    MEMORY[0x1AF44D160](v30, 0x1000C80BDFB0063);
LABEL_75:
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v69);
    return v20;
  }
  MEMORY[0x1AF44C914](a3, "");
  return 1;
}

void sub_1ADA98414(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  JUMPOUT(0x1ADA98420);
}

void sub_1ADA98440(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  JUMPOUT(0x1ADA98470);
}

void sub_1ADA98458(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  JUMPOUT(0x1ADA98470);
}

void sub_1ADA9846C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;

  MEMORY[0x1AF44D160](v52, 0x1000C80BDFB0063);
  MEMORY[0x1AF44D160](v51, 0x1000C80BDFB0063);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_1ADA984B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  JUMPOUT(0x1ADA984E8);
}

void sub_1ADA984FC()
{
  JUMPOUT(0x1ADA98530);
}

void sub_1ADA98508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 __p, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46)
{
  uint64_t v46;
  void *v49;
  void *v50;
  const char *v51;
  size_t v52;

  if (a45 < 0)
    operator delete(*(void **)(v46 + 296));
  if (SBYTE7(a12) < 0)
    operator delete((void *)__p);
  if (a2 == 1)
  {
    v49 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 4)
    {
      v50 = v49;
      *(_OWORD *)(v46 + 240) = 0u;
      *(_OWORD *)(v46 + 256) = 0u;
      *(_OWORD *)(v46 + 208) = 0u;
      *(_OWORD *)(v46 + 224) = 0u;
      *(_OWORD *)(v46 + 176) = 0u;
      *(_OWORD *)(v46 + 192) = 0u;
      *(_OWORD *)(v46 + 144) = 0u;
      *(_OWORD *)(v46 + 160) = 0u;
      *(_OWORD *)(v46 + 128) = 0u;
      a17 = 0u;
      a18 = 0u;
      a15 = 0u;
      a16 = 0u;
      a13 = 0u;
      a14 = 0u;
      __p = 0u;
      a12 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v51 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v50 + 16))(v50);
      v52 = strlen(v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v51, v52);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1ADA97F4CLL);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void sub_1ADA985C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a11);
  __cxa_end_catch();
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_1ADA985E0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADA984F0);
}

uint64_t quasar::QsrText::hatToQsrToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[17];
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  if ((quasar::QsrText::normalizeUnicode(a1, a2, (uint64_t)v13, 0, 1) & 1) != 0)
  {
    v6 = quasar::QsrText::hatSubTokenToQsrToken(a1, (uint64_t)v13, a3, 1);
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      memset(v12, 0, sizeof(v12));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unicode normalization failed for :", 34);
      v8 = *(char *)(a2 + 23);
      if (v8 >= 0)
        v9 = a2;
      else
        v9 = *(_QWORD *)a2;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(a2 + 23);
      else
        v10 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v12);
    }
    v6 = 0;
  }
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  return v6;
}

void sub_1ADA986F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 33) < 0)
    operator delete(*(void **)(v1 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QsrText::hatSubTokenToQsrToken(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7;
  int i;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  int v12;
  const char *v13;
  char Hex;
  char v15;
  const char *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string v46;
  std::string v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[2];
  _QWORD v67[11];
  char v68;
  uint64_t v69;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v66);
  if (*(char *)(a2 + 23) >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_DWORD *)(a2 + 8);
  if (v7 >= 1)
  {
    for (i = 0; i < v7; ++i)
    {
      v9 = *(unsigned __int8 *)(a2 + 23);
      if ((v9 & 0x80u) == 0)
        v10 = (_BYTE *)a2;
      else
        v10 = *(_BYTE **)a2;
      v11 = v10[i];
      if (v11 == 126)
      {
        v13 = "~~";
LABEL_23:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v13, 2);
        continue;
      }
      if (v11 == 95)
      {
        if ((v9 & 0x80) != 0)
        {
          v13 = "~_";
          if (**(_BYTE **)a2 != 47)
            goto LABEL_23;
          v9 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          v13 = "~_";
          if (*(_QWORD *)a2 != 47)
            goto LABEL_23;
        }
        v13 = "~_";
        if (v10[v9 - 1] != 47)
          goto LABEL_23;
LABEL_22:
        LOBYTE(v49) = v10[i];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)&v49, 1);
        continue;
      }
      if (v11 != 94)
        goto LABEL_22;
      if (i > v7 - 3)
      {
        if (quasar::gLogLevel >= 1)
        {
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v49 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
          v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Illegal occurrence of ^ in HatText token ", 41);
          v40 = *(char *)(a2 + 23);
          if (v40 >= 0)
            v41 = a2;
          else
            v41 = *(_QWORD *)a2;
          if (v40 >= 0)
            v42 = *(unsigned __int8 *)(a2 + 23);
          else
            v42 = *(_QWORD *)(a2 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v41, v42);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v49);
        }
LABEL_90:
        v38 = 0;
        goto LABEL_91;
      }
      v48 = 0;
      v12 = std::string::basic_string(&v47, (const std::string *)a2, i + 1, 2uLL, (std::allocator<char> *)&v49);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v46, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
      else
        v46 = v47;
      Hex = quasar::QsrText::getHex(v12, (char *)&v46, &v48);
      v15 = Hex;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v46.__r_.__value_.__l.__data_);
        if ((v15 & 1) != 0)
        {
LABEL_27:
          if ((_DWORD)v48 == 127 || (v48 - 1) <= 0x1E)
          {
            v22 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((_QWORD *)(a1 + 80), &v48);
            if (v22)
            {
              v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"~", 1);
              LOBYTE(v49) = *((_BYTE *)v22 + 24);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v49, 1);
            }
            else
            {
              v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"~U", 2);
              LOBYTE(v49) = 48;
              v25 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, (char *)&v49);
              v26 = *v25;
              *(uint64_t *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 24) = 8;
              *(_DWORD *)((char *)v25 + *(_QWORD *)(v26 - 24) + 8) |= 0x4000u;
              *(_DWORD *)((char *)v25 + *(_QWORD *)(v26 - 24) + 8) = *(_DWORD *)((_BYTE *)v25 + *(_QWORD *)(v26 - 24)
                                                                                              + 8) & 0xFFFFFFB5 | 8;
              std::ostream::operator<<();
            }
            goto LABEL_58;
          }
          if (v48)
          {
            if (v48 == 94)
            {
              v16 = "^";
              goto LABEL_56;
            }
            if (v48 == 32)
            {
              v16 = "_";
LABEL_56:
              v27 = 1;
              goto LABEL_57;
            }
          }
          else if (a4)
          {
            v16 = "~w00";
            v27 = 4;
LABEL_57:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v16, v27);
LABEL_58:
            v21 = 1;
            goto LABEL_59;
          }
          if (quasar::gLogLevel >= 1)
          {
            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v60 = 0u;
            v61 = 0u;
            v58 = 0u;
            v59 = 0u;
            v56 = 0u;
            v57 = 0u;
            v54 = 0u;
            v55 = 0u;
            v52 = 0u;
            v53 = 0u;
            v50 = 0u;
            v51 = 0u;
            v49 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Illegal use of ^ followed by value ", 35);
            v28 = (_QWORD *)std::ostream::operator<<();
            v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" in HatText token ", 18);
            v29 = *(char *)(a2 + 23);
            if (v29 >= 0)
              v19 = a2;
            else
              v19 = *(_QWORD *)a2;
            if (v29 >= 0)
              v20 = *(unsigned __int8 *)(a2 + 23);
            else
              v20 = *(_QWORD *)(a2 + 8);
LABEL_41:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v49);
            goto LABEL_42;
          }
          goto LABEL_42;
        }
      }
      else if ((Hex & 1) != 0)
      {
        goto LABEL_27;
      }
      if (quasar::gLogLevel >= 1)
      {
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Illegal occurrence of ^ in HatText token ", 41);
        v18 = *(char *)(a2 + 23);
        if (v18 >= 0)
          v19 = a2;
        else
          v19 = *(_QWORD *)a2;
        if (v18 >= 0)
          v20 = *(unsigned __int8 *)(a2 + 23);
        else
          v20 = *(_QWORD *)(a2 + 8);
        goto LABEL_41;
      }
LABEL_42:
      v21 = 0;
LABEL_59:
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (!v21)
        goto LABEL_90;
      i += 2;
    }
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v49;
  *(_QWORD *)(a3 + 16) = v50;
  if (!quasar::QsrText::isValidToken(a1, a3))
    goto LABEL_90;
  if (quasar::gLogLevel >= 6)
  {
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
    v30 = *(char *)(a2 + 23);
    if (v30 >= 0)
      v31 = a2;
    else
      v31 = *(_QWORD *)a2;
    if (v30 >= 0)
      v32 = *(unsigned __int8 *)(a2 + 23);
    else
      v32 = *(_QWORD *)(a2 + 8);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, v31, v32);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"->", 2);
    v35 = *(char *)(a3 + 23);
    if (v35 >= 0)
      v36 = (void *)a3;
    else
      v36 = *(void **)a3;
    if (v35 >= 0)
      v37 = *(unsigned __int8 *)(a3 + 23);
    else
      v37 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v49);
  }
  v38 = 1;
LABEL_91:
  v66[0] = *MEMORY[0x1E0DE4F50];
  v43 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v66 + *(_QWORD *)(v66[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v67[0] = v43;
  v67[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v68 < 0)
    operator delete((void *)v67[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](&v69);
  return v38;
}

void sub_1ADA98CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t quasar::QsrText::hatToQsrTokens(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *__p[2];
  uint64_t v26;
  void *v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  std::string v44;

  std::vector<std::string>::__clear[abi:ne180100](a3);
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    while (1)
    {
      memset(&v44, 0, sizeof(v44));
      if ((quasar::QsrText::normalizeUnicode(a1, v8, (uint64_t)&v44, 0, 1) & 1) != 0)
      {
        if (a4)
        {
          v27[0] = 0;
          v27[1] = 0;
          *(_QWORD *)&v28 = 0;
          if ((quasar::QsrText::hatSubTokenToQsrToken(a1, (uint64_t)&v44, (uint64_t)v27, 1) & 1) != 0)
          {
            v10 = a3[1];
            if (v10 >= a3[2])
            {
              v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)v27);
            }
            else
            {
              if (SBYTE7(v28) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)v27[0], (std::string::size_type)v27[1]);
              }
              else
              {
                v11 = *(_OWORD *)v27;
                *(_QWORD *)(v10 + 16) = v28;
                *(_OWORD *)v10 = v11;
              }
              v22 = v10 + 24;
              a3[1] = v10 + 24;
            }
            a3[1] = v22;
            if (SBYTE7(v28) < 0)
              operator delete(v27[0]);
LABEL_42:
            v21 = 1;
            goto LABEL_43;
          }
          if (SBYTE7(v28) < 0)
            operator delete(v27[0]);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "^00");
          quasar::splitAndTrimNoEmpty(&v44, (char *)__p, v27);
          if (SHIBYTE(v26) < 0)
            operator delete(__p[0]);
          v17 = (char *)v27[0];
          v16 = (char *)v27[1];
          while (1)
          {
            if (v17 == v16)
            {
              __p[0] = v27;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_42;
            }
            __p[0] = 0;
            __p[1] = 0;
            v26 = 0;
            if ((quasar::QsrText::hatSubTokenToQsrToken(a1, (uint64_t)v17, (uint64_t)__p, 0) & 1) == 0)
              break;
            v18 = a3[1];
            if (v18 >= a3[2])
            {
              v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)__p);
            }
            else
            {
              if (SHIBYTE(v26) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                v19 = *(_OWORD *)__p;
                *(_QWORD *)(v18 + 16) = v26;
                *(_OWORD *)v18 = v19;
              }
              v20 = v18 + 24;
              a3[1] = v18 + 24;
            }
            a3[1] = v20;
            if (SHIBYTE(v26) < 0)
              operator delete(__p[0]);
            v17 += 24;
          }
          if (SHIBYTE(v26) < 0)
            operator delete(__p[0]);
          __p[0] = v27;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
      }
      else if (quasar::gLogLevel >= 1)
      {
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        *(_OWORD *)v27 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Unicode normalization failed for :", 34);
        v13 = *(char *)(v8 + 23);
        if (v13 >= 0)
          v14 = v8;
        else
          v14 = *(_QWORD *)v8;
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(v8 + 23);
        else
          v15 = *(_QWORD *)(v8 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v27);
      }
      v21 = 0;
LABEL_43:
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      v8 += 24;
      if (v8 == v9)
        v23 = 0;
      else
        v23 = v21;
      if ((v23 & 1) == 0)
        return v21;
    }
  }
  return 1;
}

{
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  std::string::size_type v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v31;
  int v32;
  std::string v33;
  std::string __str;
  _BYTE v35[32];
  __int128 v36;
  void *v37[2];
  _OWORD v38[2];
  void *v39[2];
  _OWORD v40[2];
  void *v41[2];
  __int128 v42;
  void *__p[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  std::string v49;
  void **v50[2];

  v9 = *a3;
  for (i = a3[1]; i != v9; quasar::Token::~Token((void **)(i - 224)))
    ;
  a3[1] = v9;
  v11 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    v32 = a4;
    v31 = a2[1];
    while (1)
    {
      memset(&v49, 0, sizeof(v49));
      if ((quasar::QsrText::normalizeUnicode(a1, v11, (uint64_t)&v49, 0, 1) & 1) != 0)
      {
        if (!a4)
        {
          std::string::basic_string[abi:ne180100]<0>(v35, "^00");
          quasar::splitAndTrim(&v49, v35, (uint64_t *)&__str);
          if ((v35[23] & 0x80000000) != 0)
            operator delete(*(void **)v35);
          v18 = *(_DWORD *)(v11 + 36);
          v19 = __str.__r_.__value_.__r.__words[0];
          if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
          {
            v20 = 0;
            v21 = 0;
            v22 = *(_DWORD *)(v11 + 28);
            v23 = (v18 - v22)
                / (0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3));
            while (1)
            {
              memset(&v33, 0, sizeof(v33));
              v24 = quasar::QsrText::hatSubTokenToQsrToken(a1, v19 + v20, (uint64_t)&v33, 0);
              if ((v24 & 1) != 0)
              {
                quasar::Token::Token((std::string *)v35, (const quasar::Token *)v11);
                std::string::operator=((std::string *)v35, &v33);
                *(_DWORD *)&v35[28] = v22;
                v22 += v23;
                LODWORD(v36) = v22;
                DWORD1(v36) = v22;
                v25 = a3[1];
                if (v25 >= a3[2])
                {
                  v26 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, (const quasar::Token *)v35);
                }
                else
                {
                  quasar::Token::Token((std::string *)a3[1], (const quasar::Token *)v35);
                  v26 = v25 + 224;
                  a3[1] = v25 + 224;
                }
                a3[1] = v26;
                if (SBYTE7(v44) < 0)
                  operator delete(__p[0]);
                if (SBYTE7(v42) < 0)
                  operator delete(v41[0]);
                v50[0] = (void **)v40 + 1;
                std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v50);
                if (SBYTE7(v40[0]) < 0)
                  operator delete(v39[0]);
                v50[0] = (void **)v38 + 1;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v50);
                if (SBYTE7(v38[0]) < 0)
                  operator delete(v37[0]);
                if ((v35[23] & 0x80000000) != 0)
                  operator delete(*(void **)v35);
              }
              if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v33.__r_.__value_.__l.__data_);
              if ((v24 & 1) == 0)
                break;
              ++v21;
              v19 = __str.__r_.__value_.__r.__words[0];
              v20 += 24;
              if (0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3) <= v21)
              {
                v18 = *(_DWORD *)(v11 + 36);
                a4 = v32;
                v10 = v31;
                goto LABEL_42;
              }
            }
            *(_QWORD *)v35 = &__str;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
            v28 = 0;
            a4 = v32;
            v10 = v31;
            goto LABEL_61;
          }
LABEL_42:
          v27 = a3[1];
          *(_DWORD *)(v27 - 192) = *(_DWORD *)(v11 + 32);
          *(_DWORD *)(v27 - 188) = v18;
          *(_QWORD *)v35 = &__str;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
          goto LABEL_60;
        }
        memset(&__str, 0, sizeof(__str));
        if ((quasar::QsrText::hatSubTokenToQsrToken(a1, (uint64_t)&v49, (uint64_t)&__str, 1) & 1) != 0)
        {
          quasar::Token::Token((std::string *)v35, (const quasar::Token *)v11);
          std::string::operator=((std::string *)v35, &__str);
          v12 = a3[1];
          if (v12 >= a3[2])
          {
            v13 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, (const quasar::Token *)v35);
          }
          else
          {
            quasar::Token::Token((std::string *)a3[1], (const quasar::Token *)v35);
            v13 = v12 + 224;
            a3[1] = v12 + 224;
          }
          a3[1] = v13;
          if (SBYTE7(v44) < 0)
            operator delete(__p[0]);
          if (SBYTE7(v42) < 0)
            operator delete(v41[0]);
          v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v40 + 8;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
          if (SBYTE7(v40[0]) < 0)
            operator delete(v39[0]);
          v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v38 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
          if (SBYTE7(v38[0]) < 0)
            operator delete(v37[0]);
          if ((v35[23] & 0x80000000) != 0)
            operator delete(*(void **)v35);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
LABEL_60:
          v28 = 1;
          goto LABEL_61;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      else if (quasar::gLogLevel >= 4)
      {
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        *(_OWORD *)__p = 0u;
        v44 = 0u;
        *(_OWORD *)v41 = 0u;
        v42 = 0u;
        memset(v40, 0, sizeof(v40));
        *(_OWORD *)v39 = 0u;
        *(_OWORD *)v37 = 0u;
        memset(v38, 0, sizeof(v38));
        v36 = 0u;
        memset(v35, 0, sizeof(v35));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Unicode normalization failed for :", 34);
        v15 = *(char *)(v11 + 23);
        if (v15 >= 0)
          v16 = v11;
        else
          v16 = *(_QWORD *)v11;
        if (v15 >= 0)
          v17 = *(unsigned __int8 *)(v11 + 23);
        else
          v17 = *(_QWORD *)(v11 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v35);
      }
      v28 = 0;
LABEL_61:
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      v11 += 224;
      if (v11 == v10)
        v29 = 0;
      else
        v29 = v28;
      if ((v29 & 1) == 0)
        return v28;
    }
  }
  return 1;
}

void sub_1ADA99074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v21 + 8) = v22;
  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 97) < 0)
    operator delete(*(void **)(v23 - 120));
  _Unwind_Resume(exception_object);
}

void sub_1ADA99564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)(v30 + 8) = v31;
  quasar::Token::~Token((void **)&a25);
  if (a24 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 97) < 0)
    operator delete(*(void **)(v32 - 120));
  _Unwind_Resume(a1);
}

uint64_t quasar::QsrText::qsrSubTokenToHatToken(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  const char *v19;
  int v20;
  const char *v21;
  uint64_t v22;
  int v23;
  int v24;
  int Hex;
  int v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  char v49;
  std::string v50;
  _BYTE v51[32];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  _QWORD v68[2];
  _QWORD v69[11];
  char v70;
  uint64_t v71;
  char v72[9];

  if (!quasar::QsrText::isValidToken(a1, a2))
    return 0;
  v49 = a4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v68);
  if (*(char *)(a2 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_DWORD *)(a2 + 8);
  if (v8 < 1)
  {
LABEL_58:
    std::stringbuf::str();
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = *(_OWORD *)v51;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&v51[16];
    if (quasar::gLogLevel >= 6)
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v52 = 0u;
      memset(v51, 0, sizeof(v51));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v51);
      v31 = *(char *)(a2 + 23);
      if (v31 >= 0)
        v32 = (_BYTE *)a2;
      else
        v32 = *(_BYTE **)a2;
      if (v31 >= 0)
        v33 = *(unsigned __int8 *)(a2 + 23);
      else
        v33 = *(_QWORD *)(a2 + 8);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v32, v33);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"->", 2);
      v36 = *(char *)(a3 + 23);
      if (v36 >= 0)
        v37 = (void *)a3;
      else
        v37 = *(void **)a3;
      if (v36 >= 0)
        v38 = *(unsigned __int8 *)(a3 + 23);
      else
        v38 = *(_QWORD *)(a3 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, v38);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v51);
    }
    v30 = 1;
    goto LABEL_75;
  }
  v9 = 0;
  v10 = (_QWORD *)(a1 + 120);
  while (1)
  {
    v11 = *(unsigned __int8 *)(a2 + 23);
    if ((v11 & 0x80u) == 0)
      v12 = (_BYTE *)a2;
    else
      v12 = *(_BYTE **)a2;
    v13 = v12[v9];
    if (v13 == 94)
    {
      v19 = "^5E";
      goto LABEL_19;
    }
    if (v13 == 95)
    {
      if ((v11 & 0x80) != 0)
      {
        v19 = "^20";
        if (**(_BYTE **)a2 == 47)
        {
          v11 = *(_QWORD *)(a2 + 8);
          goto LABEL_22;
        }
      }
      else
      {
        v19 = "^20";
        if (*(_QWORD *)a2 == 47)
        {
LABEL_22:
          if (v12[v11 - 1] == 47)
          {
LABEL_23:
            v51[0] = v12[v9];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v51, 1);
            goto LABEL_24;
          }
        }
      }
LABEL_19:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v19, 3);
      goto LABEL_24;
    }
    if (v13 != 126)
      goto LABEL_23;
    v14 = v9;
    v15 = &v12[v9 + 1];
    if (std::__hash_table<char,std::hash<char>,std::equal_to<char>,std::allocator<char>>::find<char>(v10, v15))
    {
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"^", 1);
      v51[0] = 48;
      v17 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, v51);
      v18 = *v17;
      *(uint64_t *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 24) = 2;
      *(_DWORD *)((char *)v17 + *(_QWORD *)(v18 - 24) + 8) |= 0x4000u;
      *(_DWORD *)((char *)v17 + *(_QWORD *)(v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(v18 - 24) + 8) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      ++v9;
      goto LABEL_24;
    }
    v20 = *v15;
    if (v20 <= 94)
    {
      if (v20 != 85)
      {
        if (v20 != 92)
        {
LABEL_86:
          if (quasar::gLogLevel < 1)
            goto LABEL_115;
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v52 = 0u;
          memset(v51, 0, sizeof(v51));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v51);
          v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Illegal use of ~ in QsrText token ", 34);
          v45 = *(char *)(a2 + 23);
          if (v45 >= 0)
            v43 = a2;
          else
            v43 = *(_QWORD *)a2;
          if (v45 >= 0)
            v44 = *(unsigned __int8 *)(a2 + 23);
          else
            v44 = *(_QWORD *)(a2 + 8);
          goto LABEL_114;
        }
        v21 = "\\";
        goto LABEL_35;
      }
      v67 = 0;
      v23 = v9 + 2;
      if (v9 + 2 > v8 - 8)
      {
        if (quasar::gLogLevel < 1)
          goto LABEL_115;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v52 = 0u;
        memset(v51, 0, sizeof(v51));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v51);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Illegal occurrence of ~U in QsrText token ", 42);
        v47 = *(char *)(a2 + 23);
        if (v47 >= 0)
          v43 = a2;
        else
          v43 = *(_QWORD *)a2;
        if (v47 >= 0)
          v44 = *(unsigned __int8 *)(a2 + 23);
        else
          v44 = *(_QWORD *)(a2 + 8);
        goto LABEL_114;
      }
      v24 = std::string::basic_string((std::string *)v51, (const std::string *)a2, v23, 8uLL, (std::allocator<char> *)v72);
      if ((v51[23] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v51, *(std::string::size_type *)&v51[8]);
      else
        v50 = *(std::string *)v51;
      Hex = quasar::QsrText::getHex(v24, (char *)&v50, &v67);
      v26 = Hex;
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v50.__r_.__value_.__l.__data_);
        if ((v26 & 1) == 0)
          goto LABEL_53;
      }
      else if ((Hex & 1) == 0)
      {
LABEL_53:
        if ((v51[23] & 0x80000000) != 0)
          operator delete(*(void **)v51);
        v9 = v23;
        if (!v26)
          goto LABEL_115;
        goto LABEL_24;
      }
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"^", 1);
      v72[0] = 48;
      v28 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, v72);
      v29 = *v28;
      *(uint64_t *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 24) = 2;
      *(_DWORD *)((char *)v28 + *(_QWORD *)(v29 - 24) + 8) |= 0x4000u;
      *(_DWORD *)((char *)v28 + *(_QWORD *)(v29 - 24) + 8) = *(_DWORD *)((_BYTE *)v28 + *(_QWORD *)(v29 - 24) + 8) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      v23 = v9 + 9;
      goto LABEL_53;
    }
    if (v20 == 95)
    {
      v21 = "_";
LABEL_35:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v21, 1);
      ++v9;
      goto LABEL_24;
    }
    if (v20 != 119)
    {
      if (v20 != 126)
        goto LABEL_86;
      v21 = "~";
      goto LABEL_35;
    }
    if ((v49 & 1) == 0)
    {
      if (quasar::gLogLevel < 1)
        goto LABEL_115;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v52 = 0u;
      memset(v51, 0, sizeof(v51));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v51);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Illegal occurrence of ~w in QsrText token ", 42);
      v46 = *(char *)(a2 + 23);
      if (v46 >= 0)
        v43 = a2;
      else
        v43 = *(_QWORD *)a2;
      if (v46 >= 0)
        v44 = *(unsigned __int8 *)(a2 + 23);
      else
        v44 = *(_QWORD *)(a2 + 8);
      goto LABEL_114;
    }
    if (v9 + 2 > v8 - 2)
      break;
    if (*(char *)(a2 + 23) >= 0)
      v22 = a2;
    else
      v22 = *(_QWORD *)a2;
    if (*(_BYTE *)(v22 + v9 + 2) != 48 || (v9 += 3, *(_BYTE *)(v22 + v14 + 3) != 48))
    {
      if (quasar::gLogLevel < 1)
        goto LABEL_115;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v52 = 0u;
      memset(v51, 0, sizeof(v51));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v51);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Unsupported occurrence of ~w in QsrText token ", 46);
      v42 = *(char *)(a2 + 23);
      if (v42 >= 0)
        v43 = a2;
      else
        v43 = *(_QWORD *)a2;
      if (v42 >= 0)
        v44 = *(unsigned __int8 *)(a2 + 23);
      else
        v44 = *(_QWORD *)(a2 + 8);
      goto LABEL_114;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"^00", 3);
LABEL_24:
    if (++v9 >= v8)
      goto LABEL_58;
  }
  if (quasar::gLogLevel < 1)
    goto LABEL_115;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v52 = 0u;
  memset(v51, 0, sizeof(v51));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v51);
  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Illegal occurrence of ~w in QsrText token ", 42);
  v48 = *(char *)(a2 + 23);
  if (v48 >= 0)
    v43 = a2;
  else
    v43 = *(_QWORD *)a2;
  if (v48 >= 0)
    v44 = *(unsigned __int8 *)(a2 + 23);
  else
    v44 = *(_QWORD *)(a2 + 8);
LABEL_114:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v43, v44);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v51);
LABEL_115:
  v30 = 0;
LABEL_75:
  v68[0] = *MEMORY[0x1E0DE4F50];
  v39 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v68 + *(_QWORD *)(v68[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v69[0] = v39;
  v69[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v70 < 0)
    operator delete((void *)v69[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](&v71);
  return v30;
}

void sub_1ADA99DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void quasar::QsrText::removeW00(int a1, __int128 **a2, uint64_t *a3)
{
  __int128 *v6;
  __int128 *v7;
  __int128 v8;
  std::string *v9;
  std::string *i;
  std::string::size_type size;
  _BOOL4 v12;
  std::string::value_type *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  __int128 *v19;
  unint64_t v20;
  uint64_t v21;
  std::string __p;
  std::string __str;
  std::string::value_type *__s[2];
  int64_t v25;
  std::string v26;
  std::string *v27;
  std::string *v28;
  unint64_t v29;

  std::vector<std::string>::__clear[abi:ne180100](a3);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v8 = *v6;
        v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v8;
      }
      __s[0] = 0;
      __s[1] = 0;
      v25 = 0;
      memset(&__str, 0, sizeof(__str));
      v9 = v27;
      for (i = v28; i != v9; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i[-1].__r_.__value_.__l.__data_);
      }
      v28 = v9;
      size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v26.__r_.__value_.__l.__size_;
      if (size)
      {
        do
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "~w00");
          v12 = quasar::QsrText::splitOnUserDefinedSymbol(a1, (uint64_t)&v26, &__p, (uint64_t)__s, (uint64_t)&__str);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v13 = (std::string::value_type *)HIBYTE(v25);
          if (v25 < 0)
            v13 = __s[1];
          if (v13)
          {
            v14 = v28;
            if ((unint64_t)v28 >= v29)
            {
              v16 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v27, (__int128 *)__s);
            }
            else
            {
              if (SHIBYTE(v25) < 0)
              {
                std::string::__init_copy_ctor_external(v28, __s[0], (std::string::size_type)__s[1]);
              }
              else
              {
                v15 = *(_OWORD *)__s;
                v28->__r_.__value_.__r.__words[2] = v25;
                *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
              }
              v16 = v14 + 1;
            }
            v28 = v16;
          }
          std::string::operator=(&v26, &__str);
        }
        while (v12);
        v17 = v28;
      }
      else
      {
        if ((unint64_t)v9 >= v29)
        {
          v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v27, (__int128 *)&v26);
        }
        else
        {
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v9, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
          }
          else
          {
            v18 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
            v9->__r_.__value_.__r.__words[2] = v26.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v18;
          }
          v17 = v9 + 1;
        }
        v28 = v17;
      }
      v19 = (__int128 *)v27;
      if (v27 != v17)
      {
        v20 = a3[1];
        if ((char *)v17 - (char *)v27 == 24)
        {
          if (v20 >= a3[2])
          {
            v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v6);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v6);
            v21 = v20 + 24;
          }
          a3[1] = v21;
        }
        else
        {
          do
          {
            if (v20 >= a3[2])
            {
              v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v19);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v19);
              v20 += 24;
            }
            a3[1] = v20;
            v19 = (__int128 *)((char *)v19 + 24);
          }
          while (v19 != (__int128 *)v17);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25) < 0)
        operator delete(__s[0]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v6 = (__int128 *)((char *)v6 + 24);
    }
    while (v6 != v7);
  }
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
}

{
  uint64_t i;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  std::string *j;
  std::string *v11;
  std::string::size_type size;
  _BOOL4 v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  float32x2_t v28;
  unint64_t v29;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  __int128 *v34;
  std::string __p;
  int v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  std::string v41;
  uint64_t v42;
  std::string v43;
  uint64_t v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  float32x2_t v49;
  std::string __str;
  __int128 v51;
  int64_t v52;
  std::string v53;
  std::string *v54;
  std::string *v55;
  unint64_t v56;
  void **v57[3];

  v7 = *a3;
  for (i = a3[1]; i != v7; quasar::Token::~Token((void **)(i - 224)))
    ;
  a3[1] = v7;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v8 = *a2;
  v34 = a2[1];
  if (*a2 != v34)
  {
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v53.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v9;
      }
      v51 = 0uLL;
      v52 = 0;
      memset(&__str, 0, sizeof(__str));
      v11 = v54;
      for (j = v55; j != v11; --j)
      {
        if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(j[-1].__r_.__value_.__l.__data_);
      }
      v55 = v11;
      size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v53.__r_.__value_.__l.__size_;
      if (size)
      {
        do
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "~w00");
          v13 = quasar::QsrText::splitOnUserDefinedSymbol(a1, (uint64_t)&v53, &__p, (uint64_t)&v51, (uint64_t)&__str);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v14 = HIBYTE(v52);
          if (v52 < 0)
            v14 = *((_QWORD *)&v51 + 1);
          if (v14)
          {
            v15 = v55;
            if ((unint64_t)v55 >= v56)
            {
              v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v54, &v51);
            }
            else
            {
              if (SHIBYTE(v52) < 0)
              {
                std::string::__init_copy_ctor_external(v55, (const std::string::value_type *)v51, *((std::string::size_type *)&v51 + 1));
              }
              else
              {
                v16 = v51;
                v55->__r_.__value_.__r.__words[2] = v52;
                *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
              }
              v17 = v15 + 1;
            }
            v55 = v17;
          }
          std::string::operator=(&v53, &__str);
        }
        while (v13);
        v19 = v55;
      }
      else
      {
        if ((unint64_t)v11 >= v56)
        {
          v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v54, (__int128 *)&v53);
        }
        else
        {
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v11, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
          }
          else
          {
            v18 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
            v11->__r_.__value_.__r.__words[2] = v53.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v18;
          }
          v19 = v11 + 1;
        }
        v55 = v19;
      }
      v20 = (uint64_t)v54;
      if (v54 != v19)
      {
        if ((char *)v19 - (char *)v54 == 24)
        {
          v21 = a3[1];
          if (v21 >= a3[2])
          {
            v22 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, (const quasar::Token *)v8);
          }
          else
          {
            quasar::Token::Token((std::string *)a3[1], (const quasar::Token *)v8);
            v22 = v21 + 224;
            a3[1] = v21 + 224;
          }
          a3[1] = v22;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v54) >> 3);
          v26 = *((_DWORD *)v8 + 7);
          v27 = (*((_DWORD *)v8 + 9) - v26) / v25;
          *(float *)&v18 = (float)v25;
          v28 = vdiv_f32(*(float32x2_t *)((char *)v8 + 204), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v18, 0));
          do
          {
            quasar::Token::Token((quasar::Token *)&__p);
            std::string::operator=(&__p, (const std::string *)(v20 + v23));
            v29 = v24 + 1;
            v36 = v26;
            v26 += v27;
            v37 = v26;
            v38 = v26;
            v39 = *((_DWORD *)v8 + 10);
            v31 = v24 + 1 != v25 || *((_BYTE *)v8 + 44) != 0;
            v40 = v31;
            if (!v24)
            {
              std::string::operator=(&v41, (const std::string *)v8 + 2);
              std::string::operator=(&v43, (const std::string *)v8 + 4);
            }
            v49 = v28;
            v32 = a3[1];
            if (v32 >= a3[2])
            {
              v33 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, (const quasar::Token *)&__p);
            }
            else
            {
              quasar::Token::Token((std::string *)a3[1], (const quasar::Token *)&__p);
              v33 = v32 + 224;
              a3[1] = v32 + 224;
            }
            a3[1] = v33;
            if (v48 < 0)
              operator delete(v47);
            if (v46 < 0)
              operator delete(v45);
            v57[0] = (void **)&v44;
            std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v57);
            if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v43.__r_.__value_.__l.__data_);
            v57[0] = (void **)&v42;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v57);
            if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v41.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v20 = (uint64_t)v54;
            v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v54) >> 3);
            v23 += 24;
            v24 = v29;
          }
          while (v25 > v29);
          *(_QWORD *)(a3[1] - 192) = *((_QWORD *)v8 + 4);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v52) < 0)
        operator delete((void *)v51);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      v8 += 14;
    }
    while (v8 != v34);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1ADA9A134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(v34 - 80) = v33;
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  a28 = (void *)(v34 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  _Unwind_Resume(a1);
}

uint64_t quasar::QsrText::qsrToHatTokens(uint64_t a1, __int128 **a2, uint64_t *a3, int a4)
{
  uint64_t i;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  const quasar::Token *v17;
  const quasar::Token *v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  const quasar::Token *v24;
  const quasar::Token *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  std::string v44;
  void *v45;
  char v46;
  _BYTE v47[24];
  void *v48;
  char v49;
  _BYTE v50[24];
  void *v51;
  char v52;
  void *__p;
  char v54;

  v9 = *a3;
  for (i = a3[1]; i != v9; quasar::Token::~Token((void **)(i - 224)))
    ;
  a3[1] = v9;
  if (a4)
  {
    v10 = *a2;
    v11 = a2[1];
    if (*a2 != v11)
    {
      do
      {
        quasar::Token::Token(&v44, (const quasar::Token *)v10);
        v12 = quasar::QsrText::qsrSubTokenToHatToken(a1, (uint64_t)v10, (uint64_t)&v44, 1);
        if ((v12 & 1) != 0)
        {
          v13 = a3[1];
          if (v13 >= a3[2])
          {
            v14 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, (const quasar::Token *)&v44);
          }
          else
          {
            quasar::Token::Token((std::string *)a3[1], (const quasar::Token *)&v44);
            v14 = v13 + 224;
            a3[1] = v13 + 224;
          }
          a3[1] = v14;
        }
        else if (quasar::gLogLevel >= 1)
        {
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v28 = 0u;
          v29 = 0u;
          v27 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
          v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Conversion failed for qsr token ", 32);
          quasar::operator<<(v15, (uint64_t)v10);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v27);
        }
        if (v54 < 0)
          operator delete(__p);
        if (v52 < 0)
          operator delete(v51);
        *(_QWORD *)&v27 = v50;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
        if (v49 < 0)
          operator delete(v48);
        *(_QWORD *)&v27 = v47;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
        if (v46 < 0)
          operator delete(v45);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        v10 += 14;
        if (v10 == v11)
          v16 = 0;
        else
          v16 = v12;
      }
      while ((v16 & 1) != 0);
      return v12;
    }
    return 1;
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  quasar::QsrText::removeW00(a1, a2, (uint64_t *)&v24);
  v17 = v24;
  v18 = v25;
  if (v24 == v25)
  {
LABEL_48:
    *(_QWORD *)&v27 = &v24;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
    return 1;
  }
  while (1)
  {
    quasar::Token::Token(&v44, v17);
    v19 = quasar::QsrText::qsrSubTokenToHatToken(a1, (uint64_t)v17, (uint64_t)&v44, 0);
    if ((v19 & 1) != 0)
    {
      v20 = a3[1];
      if (v20 >= a3[2])
      {
        v21 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, (const quasar::Token *)&v44);
      }
      else
      {
        quasar::Token::Token((std::string *)a3[1], (const quasar::Token *)&v44);
        v21 = v20 + 224;
        a3[1] = v20 + 224;
      }
      a3[1] = v21;
    }
    else if (quasar::gLogLevel >= 1)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v27 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Conversion failed for qsr token ", 32);
      quasar::operator<<(v22, (uint64_t)v17);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v27);
    }
    if (v54 < 0)
      operator delete(__p);
    if (v52 < 0)
      operator delete(v51);
    *(_QWORD *)&v27 = v50;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
    if (v49 < 0)
      operator delete(v48);
    *(_QWORD *)&v27 = v47;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
    if (v46 < 0)
      operator delete(v45);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if ((v19 & 1) == 0)
      break;
    v17 = (const quasar::Token *)((char *)v17 + 224);
    if (v17 == v18)
      goto LABEL_48;
  }
  *(_QWORD *)&v27 = &v24;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  return 0;
}

void sub_1ADA9A534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void sub_1ADA9A9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 136) = v22;
  if (*(char *)(v23 - 201) < 0)
    operator delete(*(void **)(v23 - 224));
  if (*(char *)(v23 - 177) < 0)
    operator delete(*(void **)(v23 - 200));
  if (*(char *)(v23 - 153) < 0)
    operator delete(*(void **)(v23 - 176));
  __p = (void *)(v23 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::QsrText::decodeQsrTextTokens(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;

  if (a3 != a2)
    std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a3, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  v6 = *a2;
  if (a2[1] == *a2)
    return 1;
  v7 = 0;
  v8 = 0;
  do
  {
    result = quasar::QsrText::decodeQsrText(a1, v6 + v7, *a3 + v7);
    if ((result & 1) == 0)
      break;
    ++v8;
    v6 = *a2;
    v7 += 224;
  }
  while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > v8);
  return result;
}

uint64_t quasar::QsrText::decodeQsrText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t **v13;
  int v14;
  const char *v15;
  uint64_t v16;
  int v17;
  int Hex;
  int v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  std::string v50;
  std::string v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  _QWORD v70[2];
  _QWORD v71[11];
  char v72;
  uint64_t v73;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v70);
  if (*(char *)(a2 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_DWORD *)(a2 + 8);
  if (v6 < 1)
  {
LABEL_54:
    std::stringbuf::str();
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v52;
    *(_QWORD *)(a3 + 16) = v53;
    if (quasar::gLogLevel >= 6)
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v52 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"\"", 1);
      v25 = *(char *)(a2 + 23);
      if (v25 >= 0)
        v26 = a2;
      else
        v26 = *(_QWORD *)a2;
      if (v25 >= 0)
        v27 = *(unsigned __int8 *)(a2 + 23);
      else
        v27 = *(_QWORD *)(a2 + 8);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\" (", 3);
      v29 = (_QWORD *)std::ostream::operator<<();
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") -> ", 5);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\"", 1);
      v32 = *(char *)(a3 + 23);
      if (v32 >= 0)
        v33 = (void *)a3;
      else
        v33 = *(void **)a3;
      if (v32 >= 0)
        v34 = *(unsigned __int8 *)(a3 + 23);
      else
        v34 = *(_QWORD *)(a3 + 8);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"\" (", 3);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)")", 1);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v52);
    }
    v37 = 1;
    goto LABEL_71;
  }
  v7 = 0;
  v8 = (_QWORD *)(a1 + 120);
  while (1)
  {
    if (*(char *)(a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    v10 = *(unsigned __int8 *)(v9 + v7);
    if (v10 == 95)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" ", 1);
      LODWORD(v11) = v7;
      goto LABEL_15;
    }
    if (v10 != 126)
    {
      LOBYTE(v52) = *(_BYTE *)(v9 + v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)&v52, 1);
      LODWORD(v11) = v7;
      goto LABEL_15;
    }
    v11 = v7 + 1;
    v12 = (char *)(v9 + v11);
    v13 = std::__hash_table<char,std::hash<char>,std::equal_to<char>,std::allocator<char>>::find<char>(v8, (char *)(v9 + v11));
    if (v13)
    {
      LOBYTE(v52) = v13[3];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)&v52, 1);
      goto LABEL_15;
    }
    v14 = *v12;
    if (v14 <= 94)
      break;
    if (v14 == 95)
    {
      v15 = "_";
      goto LABEL_26;
    }
    if (v14 != 119)
    {
      if (v14 != 126)
        goto LABEL_81;
      v15 = "~";
      goto LABEL_26;
    }
    if (v7 + 2 > v6 - 2)
    {
      if (quasar::gLogLevel < 1)
        goto LABEL_104;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v52 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"Illegal occurrence of ~w in QsrText string ", 43);
      v48 = *(char *)(a2 + 23);
      if (v48 >= 0)
        v42 = a2;
      else
        v42 = *(_QWORD *)a2;
      if (v48 >= 0)
        v43 = *(unsigned __int8 *)(a2 + 23);
      else
        v43 = *(_QWORD *)(a2 + 8);
      goto LABEL_103;
    }
    if (*(char *)(a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = *(_QWORD *)a2;
    if (*(_BYTE *)(v16 + v7 + 2) != 48 || (LODWORD(v11) = v7 + 3, *(_BYTE *)(v16 + v7 + 3) != 48))
    {
      if (quasar::gLogLevel < 1)
        goto LABEL_104;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v52 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"Unsupported occurrence of ~w in QsrText string ", 47);
      v41 = *(char *)(a2 + 23);
      if (v41 >= 0)
        v42 = a2;
      else
        v42 = *(_QWORD *)a2;
      if (v41 >= 0)
        v43 = *(unsigned __int8 *)(a2 + 23);
      else
        v43 = *(_QWORD *)(a2 + 8);
LABEL_103:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v52);
      goto LABEL_104;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" ", 1);
LABEL_15:
    v7 = v11 + 1;
    if ((int)v11 + 1 >= v6)
      goto LABEL_54;
  }
  if (v14 == 85)
  {
    v69 = 0;
    LODWORD(v11) = v7 + 2;
    if (v7 + 2 > v6 - 8)
    {
      if (quasar::gLogLevel < 1)
        goto LABEL_104;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v52 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"Illegal occurrence of ~U in QsrText string ", 43);
      v49 = *(char *)(a2 + 23);
      if (v49 >= 0)
        v42 = a2;
      else
        v42 = *(_QWORD *)a2;
      if (v49 >= 0)
        v43 = *(unsigned __int8 *)(a2 + 23);
      else
        v43 = *(_QWORD *)(a2 + 8);
      goto LABEL_103;
    }
    v17 = std::string::basic_string(&v51, (const std::string *)a2, (int)v11, 8uLL, (std::allocator<char> *)&v52);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v50, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
    else
      v50 = v51;
    Hex = quasar::QsrText::getHex(v17, (char *)&v50, &v69);
    v19 = Hex;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((v19 & 1) != 0)
        goto LABEL_40;
    }
    else if ((Hex & 1) != 0)
    {
LABEL_40:
      LOBYTE(v52) = v69;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)&v52, 1);
      LODWORD(v11) = v7 + 9;
      goto LABEL_50;
    }
    if (quasar::gLogLevel >= 1)
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v52 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"Illegal occurrence of ~U in QsrText string ", 43);
      v21 = *(char *)(a2 + 23);
      if (v21 >= 0)
        v22 = a2;
      else
        v22 = *(_QWORD *)a2;
      if (v21 >= 0)
        v23 = *(unsigned __int8 *)(a2 + 23);
      else
        v23 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v52);
    }
LABEL_50:
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (!v19)
      goto LABEL_104;
    goto LABEL_15;
  }
  if (v14 == 92)
  {
    v15 = "\\";
LABEL_26:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v15, 1);
    goto LABEL_15;
  }
LABEL_81:
  if (quasar::gLogLevel >= 4)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"Illegal use of ~ in QsrText string ", 35);
    v45 = *(char *)(a2 + 23);
    if (v45 >= 0)
      v46 = a2;
    else
      v46 = *(_QWORD *)a2;
    if (v45 >= 0)
      v47 = *(unsigned __int8 *)(a2 + 23);
    else
      v47 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v46, v47);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v52);
  }
LABEL_104:
  v37 = 0;
LABEL_71:
  v70[0] = *MEMORY[0x1E0DE4F50];
  v38 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v70 + *(_QWORD *)(v70[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v71[0] = v38;
  v71[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v72 < 0)
    operator delete((void *)v71[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](&v73);
  return v37;
}

void sub_1ADA9B23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a59);
  _Unwind_Resume(a1);
}

BOOL quasar::QsrText::encodeTokenQsrText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int *v10;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v20;
  _QWORD *v21;
  const std::string::value_type *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  void **v26;
  std::string::size_type v27;
  void **v28;
  std::string::size_type v29;
  _BOOL8 v30;
  _BOOL8 isValidToken;
  char v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void *__p[2];
  unsigned __int8 v48;
  void *v49[2];
  _OWORD v50[4];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[160];
  std::basic_string<char32_t> v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[48];
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a3 + 23) < 0)
  {
    **(_BYTE **)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 23) = 0;
  }
  v56 = 0;
  v57 = 0;
  v58 = 0;
  if ((quasar::QsrText::normalizeUnicode(a1, a2, (uint64_t)&v56, 0, 1) & 1) != 0)
  {
    v6 = operator new();
    v45 = a1;
    v44 = a2;
    *(_OWORD *)(v6 + 8) = xmmword_1AE1402C0;
    *(_QWORD *)v6 = &unk_1E5D40240;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v7 = HIBYTE(v58);
    v8 = v57;
    v9 = v58 < 0;
    if (v58 >= 0)
      v10 = (int *)&v56;
    else
      v10 = (int *)v56;
    *(_DWORD *)(v6 + 24) = 0;
    memset(v59, 0, sizeof(v59));
    if (v9)
      v7 = v8;
    v60 = v6;
    v69 = 0;
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v59, v10, (int *)((char *)v10 + v7), &v55);
    size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v55;
    else
      v12 = (std::basic_string<char32_t> *)v55.__r_.__value_.__r.__words[0];
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v55.__r_.__value_.__l.__size_;
    if (size)
    {
      v46 = (_QWORD *)(a1 + 80);
      v13 = (void *)*MEMORY[0x1E0DE4F50];
      v15 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
      v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v16 = 4 * size;
      v17 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        v18 = v12->__r_.__value_.__s.__data_[0];
        if (v12->__r_.__value_.__s.__data_[0] != 127 && (v12->__r_.__value_.__s.__data_[0] - 1) > 0x1E)
        {
          if (v18 > 94)
          {
            if (v18 == 95)
            {
              v22 = "~_";
            }
            else
            {
              if (v18 != 126)
              {
LABEL_47:
                LODWORD(__p[0]) = v12->__r_.__value_.__s.__data_[0];
                std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes((uint64_t)v59, (char *)__p, (char *)__p + 4, (std::string *)v49);
                if ((SBYTE7(v50[0]) & 0x80u) == 0)
                  v28 = v49;
                else
                  v28 = (void **)v49[0];
                if ((SBYTE7(v50[0]) & 0x80u) == 0)
                  v29 = BYTE7(v50[0]);
                else
                  v29 = (std::string::size_type)v49[1];
                std::string::append((std::string *)a3, (const std::string::value_type *)v28, v29);
                if (SBYTE7(v50[0]) < 0)
                  operator delete(v49[0]);
                goto LABEL_45;
              }
              v22 = "~~";
            }
          }
          else if (v18 == 32)
          {
            v22 = "_";
          }
          else
          {
            if (v18 != 92)
              goto LABEL_47;
            v22 = "~\\";
          }
          std::string::append((std::string *)a3, v22);
        }
        else
        {
          v49[0] = (void *)v12->__r_.__value_.__s.__data_[0];
          v20 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v46, (unint64_t *)v49);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v49);
          if (v20)
          {
            v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"~", 1);
            LOBYTE(__p[0]) = *((_BYTE *)v20 + 24);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)__p, 1);
          }
          else
          {
            v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"~U", 2);
            LOBYTE(__p[0]) = 48;
            v24 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, (char *)__p);
            v25 = *v24;
            *(uint64_t *)((char *)v24 + *(_QWORD *)(*v24 - 24) + 24) = 8;
            *(_DWORD *)((char *)v24 + *(_QWORD *)(v25 - 24) + 8) |= 0x4000u;
            *(_DWORD *)((char *)v24 + *(_QWORD *)(v25 - 24) + 8) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v25 - 24) + 8) & 0xFFFFFFB5 | 8;
            std::ostream::operator<<();
          }
          std::stringbuf::str();
          if ((v48 & 0x80u) == 0)
            v26 = __p;
          else
            v26 = (void **)__p[0];
          if ((v48 & 0x80u) == 0)
            v27 = v48;
          else
            v27 = (std::string::size_type)__p[1];
          std::string::append((std::string *)a3, (const std::string::value_type *)v26, v27);
          if ((char)v48 < 0)
            operator delete(__p[0]);
          v49[0] = v13;
          *(void **)((char *)v49 + *((_QWORD *)v13 - 3)) = v15;
          *(_QWORD *)&v50[0] = v14;
          *((_QWORD *)&v50[0] + 1) = v17;
          if (SHIBYTE(v52) < 0)
            operator delete(*((void **)&v51 + 1));
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1AF44D094](v54);
        }
LABEL_45:
        v12 = (std::basic_string<char32_t> *)((char *)v12 + 4);
        v16 -= 4;
      }
      while (v16);
    }
    isValidToken = quasar::QsrText::isValidToken(v45, a3);
    v30 = isValidToken;
    v32 = quasar::gLogLevel < 4 || isValidToken;
    if ((v32 & 1) == 0)
    {
      v53 = 0u;
      memset(v54, 0, 144);
      v51 = 0u;
      v52 = 0u;
      memset(v50, 0, sizeof(v50));
      *(_OWORD *)v49 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Failed to encode srcToken=\"", 27);
      v34 = *(char *)(v44 + 23);
      if (v34 >= 0)
        v35 = v44;
      else
        v35 = *(_QWORD *)v44;
      if (v34 >= 0)
        v36 = *(unsigned __int8 *)(v44 + 23);
      else
        v36 = *(_QWORD *)(v44 + 8);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\" dstToken=\"", 12);
      v39 = *(char *)(a3 + 23);
      if (v39 >= 0)
        v40 = a3;
      else
        v40 = *(_QWORD *)a3;
      if (v39 >= 0)
        v41 = *(unsigned __int8 *)(a3 + 23);
      else
        v41 = *(_QWORD *)(a3 + 8);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"\"", 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v49);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v59);
  }
  else
  {
    v30 = 0;
  }
  if (SHIBYTE(v58) < 0)
    operator delete(v56);
  return v30;
}

void sub_1ADA9B7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a65;

  if (a58 < 0)
    operator delete(__p);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a65);
  if (a64 < 0)
    operator delete(a59);
  _Unwind_Resume(a1);
}

BOOL quasar::QsrText::encodeTokenQsrTextWithMetadata(uint64_t a1, std::string *this, std::string *a3)
{
  std::string::size_type v6;
  _BOOL8 v7;
  _BOOL8 v8;
  std::string::size_type v9;
  BOOL v10;
  BOOL v11;
  std::string *v12;
  std::string::size_type size;
  std::string v15;
  std::string v16;
  char v17;

  v6 = std::string::find(this, 92, 0);
  std::string::basic_string(&v16, this, 0, v6, (std::allocator<char> *)&v15);
  v7 = quasar::QsrText::encodeTokenQsrText(a1, (uint64_t)&v16, (uint64_t)a3);
  v8 = v7;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    if (!v8)
      return v8;
    while (1)
    {
LABEL_5:
      v8 = v6 == -1;
      if (v6 == -1)
        return v8;
      v9 = std::string::find(this, 92, v6 + 1);
      memset(&v16, 0, sizeof(v16));
      std::string::basic_string(&v15, this, v6 + 1, v9 + ~v6, (std::allocator<char> *)&v17);
      v10 = quasar::QsrText::encodeTokenQsrText(a1, (uint64_t)&v15, (uint64_t)&v16);
      v11 = v10;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v15.__r_.__value_.__l.__data_);
        if (v11)
        {
LABEL_10:
          std::operator+<char>();
          if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v12 = &v15;
          else
            v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
          if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
          else
            size = v15.__r_.__value_.__l.__size_;
          std::string::append(a3, (const std::string::value_type *)v12, size);
          if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v15.__r_.__value_.__l.__data_);
          v6 = v9;
        }
      }
      else if (v10)
      {
        goto LABEL_10;
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v16.__r_.__value_.__l.__data_);
        if (!v11)
          return v8;
      }
      else if (!v11)
      {
        return v8;
      }
    }
  }
  if (v7)
    goto LABEL_5;
  return v8;
}

void sub_1ADA9BA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t quasar::QsrText::getMetadataStartIndex(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  unint64_t v3;
  uint64_t *v4;
  int v5;

  result = 0;
  v3 = *((unsigned __int8 *)a2 + 23);
  while ((v3 & 0x80) == 0)
  {
    v4 = a2;
    if (v3 <= (int)result)
      return v3;
LABEL_6:
    v5 = *((unsigned __int8 *)v4 + (int)result);
    if (v5 == 126)
    {
      LODWORD(result) = result + 1;
    }
    else if (v5 == 92)
    {
      return result;
    }
    result = (result + 1);
  }
  v4 = (uint64_t *)*a2;
  if (a2[1] > (unint64_t)(int)result)
    goto LABEL_6;
  return a2[1];
}

BOOL quasar::QsrText::splitOnUserDefinedSymbol(int a1, uint64_t a2, std::string *__str, uint64_t a4, uint64_t a5)
{
  int v9;
  int Hex;
  int UserDefinedSymbolLocation;
  uint64_t v12;
  uint64_t v13;
  std::string v15;
  std::string v16;
  char v17;

  v15.__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::basic_string(&v16, __str, 2uLL, 2uLL, (std::allocator<char> *)&v17);
  Hex = quasar::QsrText::getHex(v9, (char *)&v16, (unint64_t *)&v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  UserDefinedSymbolLocation = quasar::QsrText::findUserDefinedSymbolLocation(Hex, (uint64_t *)a2, __str);
  v12 = UserDefinedSymbolLocation;
  if (*(char *)(a2 + 23) >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  if (v13 == UserDefinedSymbolLocation)
  {
    std::string::operator=((std::string *)a4, (const std::string *)a2);
    MEMORY[0x1AF44C914](a5, "");
  }
  else
  {
    std::string::basic_string(&v15, (const std::string *)a2, 0, UserDefinedSymbolLocation, (std::allocator<char> *)&v17);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v15;
    std::string::basic_string(&v15, (const std::string *)a2, (int)v12 + 4, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v17);
    if (*(char *)(a5 + 23) < 0)
      operator delete(*(void **)a5);
    *(std::string *)a5 = v15;
  }
  return v13 != v12;
}

void sub_1ADA9BC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QsrText::findUserDefinedSymbolLocation(int a1, uint64_t *a2, std::string *__str)
{
  int v5;
  uint64_t result;
  int v7;
  std::string *v8;
  uint64_t *v9;
  int v10;
  std::string v11;
  unint64_t v12;
  char v13;

  v12 = 0;
  v5 = std::string::basic_string(&v11, __str, 2uLL, 2uLL, (std::allocator<char> *)&v13);
  quasar::QsrText::getHex(v5, (char *)&v11, &v12);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  result = 0;
  v7 = *((unsigned __int8 *)a2 + 23);
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = __str;
  else
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if ((v7 & 0x80) != 0)
    goto LABEL_9;
  while (1)
  {
    v9 = a2;
    if ((int)result >= v7 - 3)
      break;
    while (1)
    {
      if (*((_BYTE *)v9 + (int)result) != 126 || (v10 = result + 1, *((_BYTE *)v9 + (int)result + 1) != 126))
      {
        if (*((_BYTE *)v9 + (int)result) == 126
          && *((_BYTE *)v9 + (int)result + 1) == 119
          && *((unsigned __int8 *)v9 + (int)result + 2) == v8->__r_.__value_.__s.__data_[2])
        {
          v10 = result;
          if (*((unsigned __int8 *)v9 + (int)result + 3) == v8->__r_.__value_.__s.__data_[3])
            return result;
        }
        else
        {
          v10 = result;
        }
      }
      result = (v10 + 1);
      if ((v7 & 0x80) == 0)
        break;
LABEL_9:
      v9 = (uint64_t *)*a2;
      if ((int)result >= *((_DWORD *)a2 + 2) - 3)
        return *((unsigned int *)a2 + 2);
    }
  }
  return *((unsigned __int8 *)a2 + 23);
}

void sub_1ADA9BD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<char>::unordered_set(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v4 = a3;
    do
    {
      std::__hash_table<char,std::hash<char>,std::equal_to<char>,std::allocator<char>>::__emplace_unique_key_args<char,char const&>(a1, a2, a2);
      ++a2;
      --v4;
    }
    while (v4);
  }
  return a1;
}

void sub_1ADA9BDE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<char,std::hash<char>,std::equal_to<char>,std::allocator<char>>::__emplace_unique_key_args<char,char const&>(uint64_t a1, char *a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_BYTE *)v10 + 16) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1ADA9BFF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned long,char>::unordered_map(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<unsigned long,char>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,char>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,char>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,char>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,char> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_1ADA9C06C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,char>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,char>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,char>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,char>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,char> const&>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADA9C284(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<char32_t,char32_t>::unordered_map(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<char32_t,char32_t>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,char32_t>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,char32_t>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,char32_t>>>::__emplace_unique_key_args<char32_t,std::pair<char32_t const,char32_t> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_1ADA9C2F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<char32_t,char32_t>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,char32_t>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,char32_t>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,char32_t>>>::__emplace_unique_key_args<char32_t,std::pair<char32_t const,char32_t> const&>(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1ADA9C514(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<char,unsigned long>,std::__unordered_map_hasher<char,std::__hash_value_type<char,unsigned long>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,unsigned long>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,unsigned long>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(uint64_t a1, char *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1ADA9C734(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<char,std::hash<char>,std::equal_to<char>,std::allocator<char>>::find<char>(_QWORD *a1, char *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void quasar::getCharRange(uint64_t *a1@<X0>, void **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t *v18;
  char *v19;
  char *v20;
  unint64_t v21;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(a2, 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5));
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v6 = 0;
    do
    {
      if (*(char *)(v4 + 23) < 0)
        v7 = *(_QWORD *)(v4 + 8);
      else
        LODWORD(v7) = *(unsigned __int8 *)(v4 + 23);
      v8 = v6 + v7;
      v9 = v6 | ((unint64_t)(v6 + v7 - 1) << 32);
      v11 = (unint64_t *)a2[1];
      v10 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = ((char *)v11 - (_BYTE *)*a2) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v14 = v10 - (_QWORD)*a2;
        v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v16);
        else
          v17 = 0;
        v18 = (unint64_t *)&v17[8 * v13];
        *v18 = v9;
        v12 = (char *)(v18 + 1);
        v20 = (char *)*a2;
        v19 = (char *)a2[1];
        if (v19 != *a2)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *--v18 = v21;
          }
          while (v19 != v20);
          v19 = (char *)*a2;
        }
        *a2 = v18;
        a2[1] = v12;
        a2[2] = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v11 = v9;
        v12 = (char *)(v11 + 1);
      }
      a2[1] = v12;
      v6 = v8 + *(unsigned __int8 *)(v4 + 44);
      v4 += 224;
    }
    while (v4 != v5);
  }
}

void sub_1ADA9C96C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::getPreItnTokenToPostItnCharAlignment(std::string *a1@<X0>, std::string *a2@<X1>, char ***a3@<X2>, uint64_t *a4@<X8>)
{
  std::string::size_type v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char **v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char **v65;
  int v66;
  int v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  _QWORD *v79;
  void **v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  void **v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  void *__p[2];
  unsigned __int8 v100;
  void *v101[2];
  unsigned __int8 v102;
  _OWORD v103[17];
  char *v104;
  char *v105;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (*a3)
    (*a3)[1] = **a3;
  if (a1->__r_.__value_.__l.__size_ != a1->__r_.__value_.__r.__words[0]
    && a2->__r_.__value_.__l.__size_ != a2->__r_.__value_.__r.__words[0])
  {
    quasar::getCharRange((uint64_t *)a2, (void **)&v104);
    v8 = a1->__r_.__value_.__r.__words[0];
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1->__r_.__value_.__l.__size_ - a1->__r_.__value_.__r.__words[0]) >> 5);
    if (a1->__r_.__value_.__l.__size_ == a1->__r_.__value_.__r.__words[0])
    {
      LODWORD(v12) = 0;
      v11 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      LODWORD(v12) = 0;
      v13 = 0;
      v14 = (uint64_t)(a4 + 2);
      while (1)
      {
        v15 = v12;
        v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5);
        v12 = v13;
        v17 = v11;
LABEL_8:
        v18 = v17;
        v19 = v16 <= v17
            ? v17
            : 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5);
        if (v16 <= v17)
          break;
        v20 = 0;
        v21 = *(_DWORD *)(v8 + 224 * v10 + 28);
        v22 = (unsigned __int8 *)(a2->__r_.__value_.__r.__words[0] + 172 + 224 * v17);
        v23 = v18 - v19;
        while (1)
        {
          v24 = *((_DWORD *)v22 - 36);
          if (v21 == v24)
            break;
          if (v21 < v24)
          {
            v17 = v18 - v20;
            v10 = ++v12;
            if (v9 > v12)
              goto LABEL_8;
            goto LABEL_60;
          }
          --v20;
          v22 += 224;
          if (v23 == v20)
            goto LABEL_60;
        }
        v98 = v15;
        v25 = *v22;
        v26 = v25 + v18 - v20;
        v27 = v12 - 1;
        if ((int)v12 >= 1 && v26 > 0)
        {
          v96 = v25 + v18 - 1 - v20;
          v28 = *(_DWORD *)&v104[8 * v96 + 4];
          v97 = *(_DWORD *)&v104[8 * v11];
          if (v97 <= v28)
          {
            v30 = (_DWORD *)a4[1];
            v29 = a4[2];
            v94 = *v22;
            v95 = v25 + v18 - v20;
            if ((unint64_t)v30 >= v29)
            {
              v32 = (_DWORD *)*a4;
              v90 = ((uint64_t)v30 - *a4) >> 4;
              v91 = v14;
              v33 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 60)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v34 = v29 - (_QWORD)v32;
              if (v34 >> 3 > v33)
                v33 = v34 >> 3;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
                v35 = 0xFFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v14, v35);
                v32 = (_DWORD *)*a4;
                v30 = (_DWORD *)a4[1];
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[16 * v90];
              *(_DWORD *)v37 = v98;
              *((_DWORD *)v37 + 1) = v12 - 1;
              *((_DWORD *)v37 + 2) = v97;
              *((_DWORD *)v37 + 3) = v28;
              v38 = v37;
              if (v30 != v32)
              {
                do
                {
                  *((_OWORD *)v38 - 1) = *((_OWORD *)v30 - 1);
                  v38 -= 16;
                  v30 -= 4;
                }
                while (v30 != v32);
                v32 = (_DWORD *)*a4;
              }
              v31 = v37 + 16;
              *a4 = (uint64_t)v38;
              a4[1] = (uint64_t)(v37 + 16);
              a4[2] = (uint64_t)&v36[16 * v35];
              if (v32)
                operator delete(v32);
              v14 = v91;
              v25 = v94;
              v27 = v12 - 1;
            }
            else
            {
              *v30 = v15;
              v30[1] = v27;
              v31 = v30 + 4;
              v30[2] = v97;
              v30[3] = v28;
            }
            a4[1] = (uint64_t)v31;
            v39 = *a3;
            v26 = v95;
            if (*a3)
            {
              v40 = (unint64_t)v39[2];
              v41 = v39[1];
              if ((unint64_t)v41 >= v40)
              {
                v93 = v27;
                v92 = v14;
                v43 = *v39;
                v44 = (v41 - *v39) >> 4;
                v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 60)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v46 = v40 - (_QWORD)v43;
                if (v46 >> 3 > v45)
                  v45 = v46 >> 3;
                if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
                  v47 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v47 = v45;
                if (v47)
                {
                  v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v39 + 2), v47);
                  v43 = *v39;
                  v41 = v39[1];
                }
                else
                {
                  v48 = 0;
                }
                v49 = &v48[16 * v44];
                *(_DWORD *)v49 = v98;
                *((_DWORD *)v49 + 1) = v93;
                *((_DWORD *)v49 + 2) = v11;
                *((_DWORD *)v49 + 3) = v96;
                v50 = v49;
                if (v41 != v43)
                {
                  do
                  {
                    *((_OWORD *)v50 - 1) = *((_OWORD *)v41 - 1);
                    v50 -= 16;
                    v41 -= 16;
                  }
                  while (v41 != v43);
                  v43 = *v39;
                }
                v42 = v49 + 16;
                *v39 = v50;
                v39[1] = v49 + 16;
                v39[2] = &v48[16 * v47];
                if (v43)
                  operator delete(v43);
                v14 = v92;
              }
              else
              {
                *(_DWORD *)v41 = v98;
                *((_DWORD *)v41 + 1) = v27;
                v42 = v41 + 16;
                *((_DWORD *)v41 + 2) = v11;
                *((_DWORD *)v41 + 3) = v96;
              }
              v39[1] = v42;
              v25 = v94;
              v26 = v95;
            }
          }
        }
        v13 = v12 + 1;
        v8 = a1->__r_.__value_.__r.__words[0];
        v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1->__r_.__value_.__l.__size_ - a1->__r_.__value_.__r.__words[0]) >> 5);
        v10 = (int)v12 + 1;
        v11 = v26;
        if (v9 <= v10)
        {
          v11 = v18 + v25 - v20;
          goto LABEL_62;
        }
      }
LABEL_60:
      LODWORD(v12) = v15;
    }
LABEL_62:
    if (v11 < (unint64_t)((v105 - v104) >> 3))
    {
      v51 = *(_DWORD *)&v104[8 * v11];
      v52 = *(_DWORD *)&v104[0x6DB6DB6DB6DB6DB8
                           * ((uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5)
                           - 4];
      if (v51 <= v52)
      {
        v53 = v9 - 1;
        v54 = a4[2];
        v55 = (_DWORD *)a4[1];
        if ((unint64_t)v55 >= v54)
        {
          v57 = (_DWORD *)*a4;
          v58 = ((uint64_t)v55 - *a4) >> 4;
          v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v60 = v54 - (_QWORD)v57;
          if (v60 >> 3 > v59)
            v59 = v60 >> 3;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0)
            v61 = 0xFFFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          if (v61)
          {
            v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a4 + 2), v61);
            v57 = (_DWORD *)*a4;
            v55 = (_DWORD *)a4[1];
          }
          else
          {
            v62 = 0;
          }
          v63 = &v62[16 * v58];
          *(_DWORD *)v63 = v12;
          *((_DWORD *)v63 + 1) = v53;
          v64 = &v62[16 * v61];
          *((_DWORD *)v63 + 2) = v51;
          *((_DWORD *)v63 + 3) = v52;
          v56 = v63 + 16;
          if (v55 != v57)
          {
            do
            {
              *((_OWORD *)v63 - 1) = *((_OWORD *)v55 - 1);
              v63 -= 16;
              v55 -= 4;
            }
            while (v55 != v57);
            v57 = (_DWORD *)*a4;
          }
          *a4 = (uint64_t)v63;
          a4[1] = (uint64_t)v56;
          a4[2] = (uint64_t)v64;
          if (v57)
            operator delete(v57);
        }
        else
        {
          *v55 = v12;
          v55[1] = v53;
          v56 = v55 + 4;
          v55[2] = v51;
          v55[3] = v52;
        }
        a4[1] = (uint64_t)v56;
        v65 = *a3;
        if (v65)
        {
          v66 = -1227133513 * ((a1->__r_.__value_.__l.__size_ - a1->__r_.__value_.__r.__words[0]) >> 5) - 1;
          v67 = -1227133513 * ((a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5) - 1;
          v68 = (unint64_t)v65[2];
          v69 = v65[1];
          if ((unint64_t)v69 >= v68)
          {
            v71 = *v65;
            v72 = (v69 - *v65) >> 4;
            v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 60)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v74 = v68 - (_QWORD)v71;
            if (v74 >> 3 > v73)
              v73 = v74 >> 3;
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
              v75 = 0xFFFFFFFFFFFFFFFLL;
            else
              v75 = v73;
            if (v75)
            {
              v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v65 + 2), v75);
              v71 = *v65;
              v69 = v65[1];
            }
            else
            {
              v76 = 0;
            }
            v77 = &v76[16 * v72];
            *(_DWORD *)v77 = v12;
            *((_DWORD *)v77 + 1) = v66;
            v78 = &v76[16 * v75];
            *((_DWORD *)v77 + 2) = v11;
            *((_DWORD *)v77 + 3) = v67;
            v70 = v77 + 16;
            if (v69 != v71)
            {
              do
              {
                *((_OWORD *)v77 - 1) = *((_OWORD *)v69 - 1);
                v77 -= 16;
                v69 -= 16;
              }
              while (v69 != v71);
              v71 = *v65;
            }
            *v65 = v77;
            v65[1] = v70;
            v65[2] = v78;
            if (v71)
              operator delete(v71);
          }
          else
          {
            *(_DWORD *)v69 = v12;
            *((_DWORD *)v69 + 1) = v66;
            v70 = v69 + 16;
            *((_DWORD *)v69 + 2) = v11;
            *((_DWORD *)v69 + 3) = v67;
          }
          v65[1] = v70;
        }
      }
    }
    if (quasar::gLogLevel >= 6)
    {
      memset(v103, 0, sizeof(v103));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v103);
      v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"pre = \"", 7);
      quasar::formatResultTokensSimple(a1, 0);
      if ((v102 & 0x80u) == 0)
        v80 = v101;
      else
        v80 = (void **)v101[0];
      if ((v102 & 0x80u) == 0)
        v81 = v102;
      else
        v81 = (uint64_t)v101[1];
      v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
      v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"\" ", 2);
      v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"post = \"", 8);
      quasar::formatResultTokensSimple(a2, 0);
      if ((v100 & 0x80u) == 0)
        v85 = __p;
      else
        v85 = (void **)__p[0];
      if ((v100 & 0x80u) == 0)
        v86 = v100;
      else
        v86 = (uint64_t)__p[1];
      v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, v86);
      v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"\" ", 2);
      v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"map = ", 6);
      quasar::operator<<(v89, a4);
      if ((char)v100 < 0)
        operator delete(__p[0]);
      if ((char)v102 < 0)
        operator delete(v101[0]);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v103);
    }
    if (v104)
    {
      v105 = v104;
      operator delete(v104);
    }
  }
}

void sub_1ADA9D12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  void *v32;
  void *v33;

  v32 = *(void **)(v30 - 112);
  if (v32)
  {
    *(_QWORD *)(v30 - 104) = v32;
    operator delete(v32);
  }
  v33 = *(void **)v29;
  if (*(_QWORD *)v29)
  {
    *(_QWORD *)(v29 + 8) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::operator<<(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = 1;
    do
    {
      if ((v6 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
      quasar::operator<<(a1);
      v6 = 0;
      v4 += 16;
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]", 1);
  return a1;
}

{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"alternativeDescription\": ", 27);
  v5 = *a2;
  v11 = v4;
  v6 = *(unsigned int *)(v5 + 24);
  if ((_DWORD)v6 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v7 = v4;
  v12 = &v11;
  ((void (*)(_QWORD **))off_1E5D48D98[v6])(&v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", \"translationPhraseIndex\": ", 28);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", \"selectionSpanIndex\": ", 24);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"}", 1);
  return a1;
}

_QWORD *quasar::operator<<(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)",", 1);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)",", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",", 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"]", 1);
  return a1;
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"DecodingSignals(", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"graphCost=", 10);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"acousticCost=", 13);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"acousticCostFirstPassCollapsed=", 31);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"acousticCostSecondPassUnpushed=", 31);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
  return a1;
}

{
  _QWORD *v2;
  _QWORD *v3;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{start: ", 8);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", end: ", 7);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"}", 1);
  return a1;
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{silencePosterior=", 18);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" silenceWindow=", 15);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" stablePartials=", 16);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"}", 1);
  return a1;
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{early=", 7);
  v3 = quasar::operator<<(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" backoff=", 9);
  v5 = quasar::operator<<(v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" maxTriggers=", 13);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" requireSilencePosterior=", 25);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" debug=", 7);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"}", 1);
  return a1;
}

{
  _QWORD *v1;
  _QWORD *v2;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  v1 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)", ", 2);
  v2 = (_QWORD *)std::ostream::operator<<();
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"]", 1);
}

{
  _QWORD *v2;
  _QWORD *v3;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"start\": ", 10);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", \"length\": ", 12);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"}", 1);
  return a1;
}

{
  _QWORD *v2;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"enableDisambiguationAlternatives\": ", 37);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"}", 1);
  return a1;
}

void sub_1ADA9D3D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADA9D46C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADA9D500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADA9D5A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADA9D630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADA9D70C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

double kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ConvolutionalMaxPoolingComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1E5D313F0;
  *(_QWORD *)(a1 + 88) = &unk_1E5D31528;
  *(_QWORD *)(a1 + 96) = &unk_1E5D31550;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 264) = _D1;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ConvolutionalMaxPoolingComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32[35];

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_QWORD *)(a1 + 88) = &unk_1E5D31528;
  *(_QWORD *)(a1 + 96) = &unk_1E5D31550;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1E5D313F0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  v6 = (uint64_t *)(a1 + 152);
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 4));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 5);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 2);
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
  v7 = *(_QWORD *)(a2 + 152);
  if (v7)
  {
    kaldi::NewCuSubOrMat<float>(v7, 0, v32);
    v8 = v32[0];
    v32[0] = 0;
    v9 = *v6;
    *v6 = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      v10 = v32[0];
      v32[0] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    }
  }
  v11 = *(_QWORD **)(a2 + 160);
  if (v11)
  {
    kaldi::NewCuSubOrVec<float>(v11, *(unsigned __int8 *)(a1 + 16), v32);
    v12 = v32[0];
    v32[0] = 0;
    v13 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      v14 = v32[0];
      v32[0] = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    }
  }
  v16 = *(_QWORD *)(a1 + 168);
  v15 = *(_QWORD *)(a1 + 176);
  if (v15 != v16)
  {
    v17 = 0;
    do
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * v17);
      if (v18)
      {
        kaldi::NewCuSubOrMat<float>(v18, *(unsigned __int8 *)(a1 + 16), v32);
        v19 = *(_QWORD *)(a1 + 168);
        v20 = v32[0];
        v32[0] = 0;
        v21 = *(_QWORD *)(v19 + 8 * v17);
        *(_QWORD *)(v19 + 8 * v17) = v20;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
        v22 = v32[0];
        v32[0] = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
        v16 = *(_QWORD *)(a1 + 168);
        v15 = *(_QWORD *)(a1 + 176);
      }
      ++v17;
    }
    while (v17 < (v15 - v16) >> 3);
  }
  v24 = *(_QWORD *)(a1 + 192);
  v23 = *(_QWORD *)(a1 + 200);
  if (v23 != v24)
  {
    v25 = 0;
    do
    {
      v26 = *(_QWORD **)(*(_QWORD *)(a2 + 192) + 8 * v25);
      if (v26)
      {
        kaldi::NewCuSubOrVec<float>(v26, *(unsigned __int8 *)(a1 + 16), v32);
        v27 = *(_QWORD *)(a1 + 192);
        v28 = v32[0];
        v32[0] = 0;
        v29 = *(_QWORD *)(v27 + 8 * v25);
        *(_QWORD *)(v27 + 8 * v25) = v28;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        v30 = v32[0];
        v32[0] = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
        v24 = *(_QWORD *)(a1 + 192);
        v23 = *(_QWORD *)(a1 + 200);
      }
      ++v25;
    }
    while (v25 < (v23 - v24) >> 3);
  }
  if (*(_QWORD *)(a2 + 496) != *(_QWORD *)(a2 + 488))
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
  return a1;
}

void sub_1ADA9DC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void **a13, quasar::Bitmap *a14, quasar::Bitmap *a15, _QWORD *a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  uint64_t *v17;
  void **v18;
  void **v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v18);
  v20 = (void *)*((_QWORD *)v16 + 57);
  if (v20)
    operator delete(v20);
  a16 = (_QWORD *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v21 = *v19;
  if (*v19)
  {
    *((_QWORD *)v16 + 40) = v21;
    operator delete(v21);
  }
  v22 = *a13;
  if (*a13)
  {
    *((_QWORD *)v16 + 37) = v22;
    operator delete(v22);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v23 = *((_QWORD *)v16 + 20);
  *((_QWORD *)v16 + 20) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  v24 = *v17;
  *v17 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(_QWORD *a1, uint64_t *a2)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((uint64_t)a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(a1[21] + 8 * ((((a1[22] - a1[21]) << 29) - 0x100000000) >> 32)));
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(a1[24] + 8 * ((((a1[25] - a1[24]) << 29) - 0x100000000) >> 32)));
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)(a1 + 88) = &unk_1E5D31528;
  v2 = (quasar::Bitmap *)(a1 + 88);
  *(_QWORD *)a1 = &unk_1E5D313F0;
  *(_QWORD *)(a1 + 96) = &unk_1E5D31550;
  v3 = (quasar::Bitmap *)(a1 + 96);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 488));
  v4 = *(void **)(a1 + 456);
  if (v4)
    operator delete(v4);
  v9 = (void **)(a1 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(_QWORD *)(a1 + 320) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(_QWORD *)(a1 + 296) = v6;
    operator delete(v6);
  }
  v9 = (void **)(a1 + 240);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 216);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 192);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 168);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v7 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v8 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
  JUMPOUT(0x1AF44D190);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ConvolutionalMaxPoolingComponent(v2, a1);
  return v2;
}

void sub_1ADA9E030(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int *v6;
  int *v7;
  int *v8;
  uint64_t *v9;
  int *v10;
  int *v11;
  uint64_t v13;
  BOOL v17;
  int *v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  float *v23;
  BOOL v25;
  __int128 *v26;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  _BOOL4 v41;
  BOOL v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int i;
  uint64_t j;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  __int128 *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  int *v74;
  float *v75;
  int *v76;
  float *v77;
  int *v78;
  float *v79;
  int *v80;
  float *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  int v85;
  _BYTE v86[16];
  uint64_t v87;
  void *__p;
  void *v89;
  void **v90[34];
  __int128 v91;
  uint64_t v92;
  int v93;
  int v94;
  float v95;
  int v96;

  v95 = 2.0;
  v96 = -1073741824;
  v94 = 1036831949;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  v6 = (int *)(a1 + 116);
  *(_QWORD *)(a1 + 132) = 0x100000001;
  v7 = (int *)(a1 + 132);
  v8 = (int *)(a1 + 136);
  v93 = -1;
  v91 = 0uLL;
  v92 = 0;
  v9 = a2 + 4;
  v75 = (float *)(a1 + 280);
  v76 = (int *)(a1 + 128);
  v79 = (float *)(a1 + 264);
  v80 = (int *)(a1 + 124);
  v74 = (int *)(a1 + 120);
  v77 = (float *)(a1 + 268);
  v78 = (int *)(a1 + 112);
  v10 = (int *)(a1 + 108);
  v11 = (int *)(a1 + 104);
  while ((*((_BYTE *)v9 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v91);
    if ((SHIBYTE(v92) & 0x80000000) == 0)
    {
      switch(HIBYTE(v92))
      {
        case 0xA:
          if ((_QWORD)v91 != 0x61654D736169423CLL || WORD4(v91) != 15982)
            goto LABEL_107;
          goto LABEL_61;
        case 0xB:
          if ((_QWORD)v91 == 0x6E6152736169423CLL && *(_QWORD *)((char *)&v91 + 3) == 0x3E65676E61527361)
            goto LABEL_109;
          if (HIBYTE(v92) == 10)
            goto LABEL_108;
          if (HIBYTE(v92) != 11)
            goto LABEL_128;
LABEL_96:
          v31 = (_QWORD)v91 == 0x745368637461503CLL && *(_QWORD *)((char *)&v91 + 3) == 0x3E70657453686374;
          v18 = v78;
          if (!v31)
            goto LABEL_107;
          goto LABEL_129;
        case 0xC:
          goto LABEL_102;
        case 0xD:
          if ((_QWORD)v91 == 0x74536D617261503CLL && *(_QWORD *)((char *)&v91 + 5) == 0x3E7665646474536DLL)
            goto LABEL_135;
LABEL_78:
          v28 = (_QWORD)v91 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v91 + 5) == 0x3E706574536E6F69;
          v18 = v6;
          if (v28)
            goto LABEL_129;
          if (HIBYTE(v92) == 10)
            goto LABEL_108;
          if (HIBYTE(v92) == 12)
            goto LABEL_102;
          if (HIBYTE(v92) != 13)
            goto LABEL_128;
          v29 = (_QWORD)v91 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v91 + 5) == 0x3E657A69536E6F69;
          v18 = v74;
          if (!v29)
            goto LABEL_128;
          goto LABEL_129;
        case 0xF:
          v30 = (_QWORD)v91 == 0x75746165466E493CLL && *(_QWORD *)((char *)&v91 + 7) == 0x3E7370614D657275;
          v18 = v11;
          if (!v30)
          {
            v26 = &v91;
            switch(HIBYTE(v92))
            {
              case 0xA:
                goto LABEL_124;
              case 0xB:
                goto LABEL_96;
              case 0xC:
                goto LABEL_102;
              case 0xD:
                goto LABEL_78;
              case 0xF:
                goto LABEL_138;
              default:
                goto LABEL_128;
            }
          }
          goto LABEL_129;
        case 0x10:
          v25 = (_QWORD)v91 == 0x7461654674754F3CLL && *((_QWORD *)&v91 + 1) == 0x3E7370614D657275;
          v18 = v10;
          if (!v25)
          {
            v26 = &v91;
            switch(HIBYTE(v92))
            {
              case 0xA:
                goto LABEL_124;
              case 0xB:
                goto LABEL_96;
              case 0xC:
                goto LABEL_102;
              case 0xD:
                goto LABEL_78;
              case 0xF:
LABEL_138:
                v42 = (_QWORD)v91 == 0x65726168536E493CLL && *(_QWORD *)((char *)&v91 + 7) == 0x3E73646E61426465;
                v18 = v76;
                if (!v42)
                  goto LABEL_107;
                goto LABEL_129;
              default:
                goto LABEL_128;
            }
          }
          goto LABEL_129;
        default:
          goto LABEL_128;
      }
    }
    v13 = *((_QWORD *)&v91 + 1);
    if (*((_QWORD *)&v91 + 1) == 10)
    {
      if (*(_QWORD *)v91 == 0x61654D736169423CLL && *(_WORD *)(v91 + 8) == 15982)
      {
LABEL_61:
        v23 = (float *)&v96;
        goto LABEL_136;
      }
      v13 = *((_QWORD *)&v91 + 1);
    }
    else if (*((_QWORD *)&v91 + 1) == 13
           && *(_QWORD *)v91 == 0x74536D617261503CLL
           && *(_QWORD *)(v91 + 5) == 0x3E7665646474536DLL)
    {
LABEL_135:
      v23 = (float *)&v94;
      goto LABEL_136;
    }
    if (v13 == 11)
    {
      if (*(_QWORD *)v91 == 0x6E6152736169423CLL && *(_QWORD *)(v91 + 3) == 0x3E65676E61527361)
      {
LABEL_109:
        v23 = &v95;
        goto LABEL_136;
      }
      v13 = *((_QWORD *)&v91 + 1);
    }
    if (v13 == 15)
    {
      v17 = *(_QWORD *)v91 == 0x75746165466E493CLL && *(_QWORD *)(v91 + 7) == 0x3E7370614D657275;
      v18 = v11;
      if (v17)
        goto LABEL_129;
      v13 = *((_QWORD *)&v91 + 1);
    }
    if (v13 == 16)
    {
      v19 = *(_QWORD *)v91 == 0x7461654674754F3CLL && *(_QWORD *)(v91 + 8) == 0x3E7370614D657275;
      v18 = v10;
      if (v19)
        goto LABEL_129;
      v13 = *((_QWORD *)&v91 + 1);
    }
    if (v13 == 11)
    {
      v20 = *(_QWORD *)v91 == 0x745368637461503CLL && *(_QWORD *)(v91 + 3) == 0x3E70657453686374;
      v18 = v78;
      if (v20)
        goto LABEL_129;
      v13 = *((_QWORD *)&v91 + 1);
    }
    if (v13 != 13)
      goto LABEL_110;
    v21 = *(_QWORD *)v91 == 0x6E6F69746365533CLL && *(_QWORD *)(v91 + 5) == 0x3E706574536E6F69;
    v18 = v6;
    if (v21)
      goto LABEL_129;
    v13 = *((_QWORD *)&v91 + 1);
    if (*((_QWORD *)&v91 + 1) != 13)
      goto LABEL_110;
    v22 = *(_QWORD *)v91 == 0x6E6F69746365533CLL && *(_QWORD *)(v91 + 5) == 0x3E657A69536E6F69;
    v18 = v74;
    if (v22)
      goto LABEL_129;
    if ((v92 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v92) == 10)
        goto LABEL_108;
      if (HIBYTE(v92) != 12)
        goto LABEL_128;
LABEL_102:
      v32 = (_QWORD)v91 == 0x537265746C69463CLL && DWORD2(v91) == 1046837865;
      v18 = v80;
      if (v32)
        goto LABEL_129;
      if ((v92 & 0x8000000000000000) == 0)
      {
LABEL_107:
        if (HIBYTE(v92) != 10)
          goto LABEL_128;
LABEL_108:
        v26 = &v91;
LABEL_124:
        v35 = *(_QWORD *)v26;
        v36 = *((unsigned __int16 *)v26 + 4);
        v37 = v35 == 0x7A69536C6F6F503CLL && v36 == 15973;
        v18 = v7;
        if (v37)
          goto LABEL_129;
        goto LABEL_128;
      }
    }
    else
    {
LABEL_110:
      if (v13 != 12)
        goto LABEL_116;
      v33 = *(_QWORD *)v91 == 0x537265746C69463CLL && *(_DWORD *)(v91 + 8) == 1046837865;
      v18 = v80;
      if (v33)
        goto LABEL_129;
    }
    v13 = *((_QWORD *)&v91 + 1);
LABEL_116:
    if (v13 == 15)
    {
      v34 = *(_QWORD *)v91 == 0x65726168536E493CLL && *(_QWORD *)(v91 + 7) == 0x3E73646E61426465;
      v18 = v76;
      if (v34)
        goto LABEL_129;
      v13 = *((_QWORD *)&v91 + 1);
    }
    if (v13 == 10)
    {
      v26 = (__int128 *)v91;
      goto LABEL_124;
    }
LABEL_128:
    v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v91, "<PoolStep>");
    v18 = v8;
    if (v38)
      goto LABEL_129;
    v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v91, "<LearnRateCoef>");
    v23 = v79;
    if (!v39)
    {
      v40 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v91, "<BiasLearnRateCoef>");
      v23 = v77;
      if (!v40)
      {
        v41 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v91, "<MaxNorm>");
        v23 = v75;
        if (!v41)
        {
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v91, "<RandomSeed>"))
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v90);
            v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"Unknown token ", 14);
            if (v92 >= 0)
              v70 = &v91;
            else
              v70 = (__int128 *)v91;
            if (v92 >= 0)
              v71 = HIBYTE(v92);
            else
              v71 = *((_QWORD *)&v91 + 1);
            v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
            v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)", a typo in config?", 19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" (ParamStddev|BiasMean|BiasRange|InFeatureMaps|OutFeatureMaps|PatchStep|SectionStep|SectionSize|FilterSize|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed)", 158);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v90);
          }
          v18 = &v93;
LABEL_129:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v18);
          goto LABEL_137;
        }
      }
    }
LABEL_136:
    kaldi::ReadBasicType<float>(a2, 0, v23);
LABEL_137:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v43 = *(_DWORD *)(a1 + 8);
  v44 = *(_DWORD *)(a1 + 12);
  v46 = *(_DWORD *)(a1 + 104);
  v45 = *(_DWORD *)(a1 + 108);
  v47 = *(_DWORD *)(a1 + 132);
  v48 = v43 / v46 - *(_DWORD *)(a1 + 128);
  v49 = *(_DWORD *)(a1 + 120);
  v50 = *(_DWORD *)(a1 + 136);
  v51 = (v49 - v47) / v50 + 1;
  *(_DWORD *)(a1 + 148) = v51;
  v52 = v45 * v51;
  v53 = v44 / v52;
  *(_DWORD *)(a1 + 140) = v48;
  *(_DWORD *)(a1 + 144) = v44 / v52;
  if (v47 < 1 || v49 < v47)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"ConvolutionalMaxPoolingComponent: Invalid max pooling size", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v90);
  }
  if (v50 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"ConvolutionalMaxPoolingComponent: Max pooling step must be >= 1", 63);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v90);
  }
  if (v44 != v52 * v53)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"ConvolutionalMaxPoolingComponent: output dim mismatch", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v90);
  }
  if (v43 != v43 / v46 * v46)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"ConvolutionalMaxPoolingComponent: input dim mismatch", 52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v90);
  }
  if (*v80 + *v78 * (v49 - 1) + *v6 * (v53 - 1) > v48)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"ConvolutionalMaxPoolingComponent: too few input bands to compute the output", 75);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v90);
  }
  if (v93 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v93);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v86, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)v84, ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104)), (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108)), 0, 0);
  for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v84); ++i)
  {
    for (j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v84); ++j)
    {
      v56 = *(float *)&v94;
      kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v86, 0);
      *(float *)(v84[0] + 4 * i * v85 + 4 * j) = v56 * v57;
    }
  }
  if (*(_QWORD *)(a1 + 152))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"pointer is thought to be un-initialized here", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v90);
  }
  v58 = operator new();
  kaldi::CuMatrix<float>::CuMatrix<float>(v58, v84, 111, 0);
  v59 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v58;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
  v60 = (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108));
  v82 = 0;
  v83 = 0;
  v81 = 0;
  kaldi::Vector<float>::Resize((void **)&v81, v60, 0);
  if ((int)v82 >= 1)
  {
    v61 = 0;
    do
    {
      v62 = *(float *)&v96;
      v63 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
      v64 = v62 + (v63 + -0.5) * v95;
      v65 = (int)v82;
      v81[v61++] = v64;
    }
    while (v61 < v65);
  }
  if (*(_QWORD *)(a1 + 160))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"pointer is thought to be un-initialized here", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v90);
  }
  v66 = (_QWORD *)operator new();
  v67 = v82;
  v66[2] = 0;
  v66[3] = 0;
  *v66 = &unk_1E5D341C8;
  v66[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v66, v67, 0);
  v68 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v66;
  if (v68)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 16))(v68);
    v66 = *(_QWORD **)(a1 + 160);
  }
  kaldi::CuVectorBase<float>::CopyFromVec<float>(v66, (uint64_t)&v81);
  kaldi::Vector<float>::Destroy((uint64_t)&v81);
  kaldi::Matrix<float>::~Matrix((uint64_t)v84);
  if (__p)
  {
    v89 = __p;
    operator delete(__p);
  }
  v90[0] = (void **)&v87;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v90);
  if (SHIBYTE(v92) < 0)
    operator delete((void *)v91);
}

void sub_1ADA9EC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 121) < 0)
    operator delete(*(void **)(v24 - 144));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  float *v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  _BOOL4 v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int32x2_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v52;
  __int128 *v53;
  uint64_t v54;
  void *__p[2];
  uint64_t v57;
  __int128 v58;
  uint64_t v59;

  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  v7 = a1 + 116;
  *(_QWORD *)(a1 + 132) = 0x100000001;
  v8 = a1 + 132;
  while (kaldi::Peek(a2, a3) == 60)
  {
    v58 = 0uLL;
    v59 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v58);
    if ((SHIBYTE(v59) & 0x80000000) == 0)
    {
      v9 = (uint64_t *)&v58;
      switch(HIBYTE(v59))
      {
        case 0xA:
          goto LABEL_87;
        case 0xB:
LABEL_4:
          v10 = (_QWORD)v58 == 0x745368637461503CLL && *(_QWORD *)((char *)&v58 + 3) == 0x3E70657453686374;
          v11 = a1 + 112;
          if (!v10)
            goto LABEL_86;
          goto LABEL_136;
        case 0xC:
          goto LABEL_81;
        case 0xD:
LABEL_68:
          v24 = (_QWORD)v58 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v58 + 5) == 0x3E706574536E6F69;
          v11 = v7;
          if (v24)
            goto LABEL_136;
          if (HIBYTE(v59) == 10)
            goto LABEL_87;
          if (HIBYTE(v59) == 12)
            goto LABEL_81;
          if (HIBYTE(v59) != 13)
            goto LABEL_132;
          v25 = (_QWORD)v58 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v58 + 5) == 0x3E657A69536E6F69;
          v11 = a1 + 120;
          if (!v25)
            goto LABEL_132;
          goto LABEL_136;
        case 0xF:
          v19 = (_QWORD)v58 == 0x75746165466E493CLL && *(_QWORD *)((char *)&v58 + 7) == 0x3E7370614D657275;
          v11 = a1 + 104;
          if (v19)
            goto LABEL_136;
LABEL_52:
          v20 = (_QWORD)v58 == 0x65726168536E493CLL && *(_QWORD *)((char *)&v58 + 7) == 0x3E73646E61426465;
          v11 = a1 + 128;
          if (v20)
            goto LABEL_136;
          if (HIBYTE(v59) != 15)
            goto LABEL_86;
          v21 = (_QWORD)v58 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v58 + 7) == 0x3E66656F43657461;
          v22 = (float *)(a1 + 264);
          if (!v21)
            goto LABEL_132;
          goto LABEL_138;
        case 0x10:
          v23 = (_QWORD)v58 == 0x7461654674754F3CLL && *((_QWORD *)&v58 + 1) == 0x3E7370614D657275;
          v11 = a1 + 108;
          if (!v23)
          {
            switch(HIBYTE(v59))
            {
              case 0xA:
                goto LABEL_87;
              case 0xB:
                goto LABEL_4;
              case 0xC:
                goto LABEL_81;
              case 0xD:
                goto LABEL_68;
              case 0xF:
                goto LABEL_52;
              default:
                goto LABEL_132;
            }
          }
          goto LABEL_136;
        case 0x13:
          goto LABEL_125;
        default:
          goto LABEL_132;
      }
    }
    v12 = *((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1) == 15)
    {
      v13 = *(_QWORD *)v58 == 0x75746165466E493CLL && *(_QWORD *)(v58 + 7) == 0x3E7370614D657275;
      v11 = a1 + 104;
      if (v13)
        goto LABEL_136;
    }
    if (*((_QWORD *)&v58 + 1) == 16)
    {
      v14 = *(_QWORD *)v58 == 0x7461654674754F3CLL && *(_QWORD *)(v58 + 8) == 0x3E7370614D657275;
      v11 = a1 + 108;
      if (v14)
        goto LABEL_136;
      v12 = *((_QWORD *)&v58 + 1);
    }
    if (v12 == 11)
    {
      v15 = *(_QWORD *)v58 == 0x745368637461503CLL && *(_QWORD *)(v58 + 3) == 0x3E70657453686374;
      v11 = a1 + 112;
      if (v15)
        goto LABEL_136;
      v12 = *((_QWORD *)&v58 + 1);
    }
    if (v12 != 13)
      goto LABEL_41;
    v16 = *(_QWORD *)v58 == 0x6E6F69746365533CLL && *(_QWORD *)(v58 + 5) == 0x3E706574536E6F69;
    v11 = v7;
    if (v16)
      goto LABEL_136;
    v12 = *((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1) != 13)
      goto LABEL_41;
    v17 = *(_QWORD *)v58 == 0x6E6F69746365533CLL && *(_QWORD *)(v58 + 5) == 0x3E657A69536E6F69;
    v11 = a1 + 120;
    if (v17)
      goto LABEL_136;
    if ((v59 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v59) == 10)
        goto LABEL_87;
      if (HIBYTE(v59) != 12)
        goto LABEL_132;
LABEL_81:
      v26 = (_QWORD)v58 == 0x537265746C69463CLL && DWORD2(v58) == 1046837865;
      v11 = a1 + 124;
      if (v26)
        goto LABEL_136;
      if ((v59 & 0x8000000000000000) == 0)
      {
LABEL_86:
        if (HIBYTE(v59) != 10)
          goto LABEL_132;
LABEL_87:
        v27 = (_QWORD)v58 == 0x7A69536C6F6F503CLL && WORD4(v58) == 15973;
        v11 = v8;
        if (v27)
          goto LABEL_136;
        if ((v59 & 0x8000000000000000) == 0)
        {
          if (HIBYTE(v59) != 10)
            goto LABEL_132;
          v28 = (_QWORD)v58 == 0x6574536C6F6F503CLL && WORD4(v58) == 15984;
          v11 = v7 + 20;
          if (!v28)
            goto LABEL_132;
          goto LABEL_136;
        }
LABEL_111:
        v12 = *((_QWORD *)&v58 + 1);
        if (*((_QWORD *)&v58 + 1) != 10)
          goto LABEL_117;
        v31 = *(_QWORD *)v58 == 0x6574536C6F6F503CLL && *(_WORD *)(v58 + 8) == 15984;
        v11 = v7 + 20;
        if (!v31)
        {
          if (v59 < 0)
          {
LABEL_117:
            if (v12 == 15)
            {
              v32 = *(_QWORD *)v58 == 0x61526E7261654C3CLL && *(_QWORD *)(v58 + 7) == 0x3E66656F43657461;
              v22 = (float *)(a1 + 264);
              if (!v32)
              {
                v12 = *((_QWORD *)&v58 + 1);
                goto LABEL_123;
              }
LABEL_138:
              kaldi::ReadBasicType<float>(a2, a3, v22);
              goto LABEL_139;
            }
LABEL_123:
            if (v12 == 19)
            {
              v9 = (uint64_t *)v58;
LABEL_125:
              v33 = *v9;
              v34 = v9[1];
              v35 = *(uint64_t *)((char *)v9 + 11);
              v36 = v33 == 0x61654C736169423CLL && v34 == 0x6F43657461526E72;
              v37 = v36 && v35 == 0x3E66656F43657461;
              v22 = (float *)(a1 + 268);
              if (v37)
                goto LABEL_138;
            }
          }
LABEL_132:
          v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v58, "<MaxNorm>");
          v22 = (float *)(a1 + 280);
          if (!v38)
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v58, "<GradientNormType>"))
            {
              __p[0] = 0;
              __p[1] = 0;
              v57 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)__p);
              *(_DWORD *)(a1 + 272) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
              if (SHIBYTE(v57) < 0)
                operator delete(__p[0]);
              goto LABEL_139;
            }
            v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v58, "<MaxGrad>");
            v22 = (float *)(a1 + 276);
            if (!v39)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
              if (v59 >= 0)
                v53 = &v58;
              else
                v53 = (__int128 *)v58;
              if (v59 >= 0)
                v54 = HIBYTE(v59);
              else
                v54 = *((_QWORD *)&v58 + 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
            }
          }
          goto LABEL_138;
        }
        goto LABEL_136;
      }
    }
    else
    {
LABEL_41:
      if (v12 != 12)
        goto LABEL_100;
      v18 = *(_QWORD *)v58 == 0x537265746C69463CLL && *(_DWORD *)(v58 + 8) == 1046837865;
      v11 = a1 + 124;
      if (v18)
        goto LABEL_136;
    }
    v12 = *((_QWORD *)&v58 + 1);
LABEL_100:
    if (v12 == 15)
    {
      v29 = *(_QWORD *)v58 == 0x65726168536E493CLL && *(_QWORD *)(v58 + 7) == 0x3E73646E61426465;
      v11 = a1 + 128;
      if (v29)
        goto LABEL_136;
      v12 = *((_QWORD *)&v58 + 1);
    }
    if (v12 != 10)
      goto LABEL_117;
    v30 = *(_QWORD *)v58 == 0x7A69536C6F6F503CLL && *(_WORD *)(v58 + 8) == 15973;
    v11 = v8;
    if (!v30)
      goto LABEL_111;
LABEL_136:
    kaldi::ReadBasicType<int>(a2, a3, v11);
LABEL_139:
    if (SHIBYTE(v59) < 0)
      operator delete((void *)v58);
  }
  v40 = *(_DWORD *)(a1 + 12);
  v41 = *(_DWORD *)(a1 + 108);
  v42 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 128);
  v43 = (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 132)) / *(_DWORD *)(a1 + 136) + 1;
  *(_DWORD *)(a1 + 148) = v43;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 140) = v42;
  *(_DWORD *)(a1 + 144) = v40 / (v41 * v43);
  LOBYTE(v58) = 0;
  kaldi::ReadBasicType<char>(a2, a3, &v58);
  if (*(_QWORD *)(a1 + 152))
    goto LABEL_156;
  kaldi::ExpectToken(a2, a3, "<Filters>");
  v44 = ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104));
  v45 = (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108));
  v46 = (int32x2_t *)operator new();
  kaldi::CuMatrix<float>::CuMatrix(v46, v44, v45, 0, 0, 0);
  v47 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v46;
  if (v47)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
    v46 = *(int32x2_t **)(a1 + 152);
  }
  (**(void (***)(int32x2_t *, uint64_t *, uint64_t, uint64_t))v46)(v46, a2, a3, a4);
  if (*(_QWORD *)(a1 + 160))
  {
LABEL_156:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::ExpectToken(a2, a3, "<Bias>");
  v48 = (_QWORD *)operator new();
  v49 = *(unsigned int *)(a1 + 12);
  v48[2] = 0;
  v48[3] = 0;
  *v48 = &unk_1E5D341C8;
  v48[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v48, v49, 0);
  v50 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v48;
  if (v50)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
    v48 = *(_QWORD **)(a1 + 160);
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))*v48)(v48, a2, a3);
}

void sub_1ADA9F690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 89) < 0)
    operator delete(*(void **)(v22 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ReadBasicType<char>(_QWORD *a1, int a2, _BYTE *a3)
{
  int v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v11[52];

  v11[51] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v5 = std::istream::get();
    if (v5 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "ReadBasicType: encountered end of stream.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
    }
    if (v5 << 24 != 0x1000000)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"ReadBasicType: did not get expected integer type, ", 50);
      v8 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" vs. ", 5);
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)".  You can change this code to successfully", 43);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, " read it later, if needed.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
    }
    result = std::istream::read();
  }
  else
  {
    LOWORD(v11[0]) = 0;
    result = MEMORY[0x1AF44CB30](a1, v11);
    *a3 = v11[0];
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Read failure in ReadBasicType, file position is ", 48);
    std::istream::tellg();
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", next char is ", 15);
    std::istream::peek();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return result;
}

void sub_1ADA9F8D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<InFeatureMaps>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<OutFeatureMaps>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PatchStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<SectionStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<SectionSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FilterSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<InSharedBands>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 272), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1ADA9FB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::WriteData(uint64_t *a1, _QWORD *a2, int a3, int a4)
{
  (*(void (**)(uint64_t *))(*a1 + 168))(a1);
  kaldi::WriteBasicType<char>(a2, a3);
  kaldi::WriteToken(a2, a3, "<Filters>");
  kaldi::CuMatrixBase<float>::Write(a1[19], a2, a3, a4);
  kaldi::WriteToken(a2, a3, "<Bias>");
  kaldi::CuVectorBase<float>::Write(a1[20], a2, a3);
}

uint64_t kaldi::WriteBasicType<char>(_QWORD *a1, int a2)
{
  uint64_t result;
  _QWORD *v4;
  std::runtime_error *exception;

  if (a2)
  {
    std::ostream::put();
    result = std::ostream::write();
  }
  else
  {
    v4 = (_QWORD *)std::ostream::operator<<();
    result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteBasicType.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1ADA9FC84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(a1 + 160) + 16)
                      + *(_DWORD *)(*(_QWORD *)(a1 + 152) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 152) + 20));
}

const void **kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetParams(_QWORD *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = a1[19];
  v6 = *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v10, v5);
  v7 = a1[20];
  v8 = *(_DWORD *)(v7 + 16);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2 + 4 * v6;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v7, (uint64_t)&v10);
}

void *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::SetParams(_QWORD *a1, char **a2)
{
  uint64_t v4;
  int v5;
  _DWORD *v6;
  int v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(_QWORD *))(*a1 + 176))(a1);
  v4 = a1[19];
  v5 = *(_DWORD *)(v4 + 16) * *(_DWORD *)(v4 + 20);
  v10 = 0;
  v11 = 0;
  v9 = *a2;
  LODWORD(v10) = v5;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v4, &v9);
  v6 = (_DWORD *)a1[20];
  v7 = v6[4];
  v10 = 0;
  v11 = 0;
  v9 = &(*a2)[4 * v5];
  LODWORD(v10) = v7;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v6, (uint64_t)&v9);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 312);
  v3 = *(_QWORD *)(a1 + 320) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1)
{
  float v2;

  v2 = kaldi::CuMatrixBase<float>::Sum(*(_QWORD *)(a1 + 152));
  return v2 + kaldi::CuVectorBase<float>::Sum(*(_QWORD *)(a1 + 160));
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2)
{
  _QWORD v5[4];
  int32x2_t v6[6];

  kaldi::CuMatrix<float>::CuMatrix(v6, *(unsigned int *)(*(_QWORD *)(a1 + 152) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 152) + 16), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v6);
  kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(a1 + 152), (uint64_t)v6, 111, a2, 1.0);
  kaldi::CuVector<float>::CuVector(v5, *(_QWORD *)(a1 + 160));
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v5);
  kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(a1 + 160), (uint64_t)v5, a2, 1.0);
  v5[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v5);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v6);
}

void sub_1ADA9FF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  void *__p[2];
  unsigned __int8 v20;
  void *v21[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;

  std::string::basic_string[abi:ne180100]<0>(&v25, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ParamsString(a1);
  if ((v24 & 0x80u) == 0)
    v4 = v23;
  else
    v4 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v5 = v24;
  else
    v5 = (std::string::size_type)v23[1];
  v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v26, "\n  filters");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 152));
  if ((v22 & 0x80u) == 0)
    v10 = v21;
  else
    v10 = (void **)v21[0];
  if ((v22 & 0x80u) == 0)
    v11 = v22;
  else
    v11 = (std::string::size_type)v21[1];
  v12 = std::string::append(&v27, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v28, "\n  bias");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 160));
  if ((v20 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v17 = v20;
  else
    v17 = (std::string::size_type)__p[1];
  v18 = std::string::append(&v29, (const std::string::value_type *)v16, v17);
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if ((char)v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((char)v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1ADAA0110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v45 - 41) < 0)
    operator delete(*(void **)(v45 - 64));
  if (*(char *)(v45 - 73) < 0)
    operator delete(*(void **)(v45 - 96));
  if (a20 < 0)
    operator delete(a15);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ParamsString(uint64_t a1)
{
  _QWORD *v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 168))(a1, v4, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" , # of sections: ", 18);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", section size after pooling: ", 30);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v4[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v6);
}

void sub_1ADAA02C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  void **v34;
  std::string::size_type v35;
  std::string *v36;
  void *__p[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  void *v43[2];
  unsigned __int8 v44;
  void *v45[2];
  unsigned __int8 v46;
  void *v47[2];
  unsigned __int8 v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;

  std::string::basic_string[abi:ne180100]<0>(&v49, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ParamsString(a1);
  if ((v48 & 0x80u) == 0)
    v4 = v47;
  else
    v4 = (void **)v47[0];
  if ((v48 & 0x80u) == 0)
    v5 = v48;
  else
    v5 = (std::string::size_type)v47[1];
  v6 = std::string::append(&v49, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v50, "\n  filters_grad");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 168));
  if ((v46 & 0x80u) == 0)
    v10 = v45;
  else
    v10 = (void **)v45[0];
  if ((v46 & 0x80u) == 0)
    v11 = v46;
  else
    v11 = (std::string::size_type)v45[1];
  v12 = std::string::append(&v51, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v52, ", lr-coef ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v44 & 0x80u) == 0)
    v16 = v43;
  else
    v16 = (void **)v43[0];
  if ((v44 & 0x80u) == 0)
    v17 = v44;
  else
    v17 = (std::string::size_type)v43[1];
  v18 = std::string::append(&v53, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v54, ", max-norm ");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v42 & 0x80u) == 0)
    v22 = v41;
  else
    v22 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v23 = v42;
  else
    v23 = (std::string::size_type)v41[1];
  v24 = std::string::append(&v55, (const std::string::value_type *)v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v56, "\n  bias_grad");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 192));
  if ((v40 & 0x80u) == 0)
    v28 = v39;
  else
    v28 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v29 = v40;
  else
    v29 = (std::string::size_type)v39[1];
  v30 = std::string::append(&v57, (const std::string::value_type *)v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = std::string::append(&v58, ", lr-coef ");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v38 & 0x80u) == 0)
    v34 = __p;
  else
    v34 = (void **)__p[0];
  if ((v38 & 0x80u) == 0)
    v35 = v38;
  else
    v35 = (std::string::size_type)__p[1];
  v36 = std::string::append(&v59, (const std::string::value_type *)v34, v35);
  *a2 = *v36;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if ((char)v38 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if ((char)v44 < 0)
    operator delete(v43[0]);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if ((char)v46 < 0)
    operator delete(v45[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if ((char)v48 < 0)
    operator delete(v47[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
}

void sub_1ADAA06B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a66;
  char a71;
  void *a72;
  char a73;
  uint64_t v73;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v73 - 57) < 0)
    operator delete(*(void **)(v73 - 80));
  if (*(char *)(v73 - 89) < 0)
    operator delete(*(void **)(v73 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v73 - 121) < 0)
    operator delete(*(void **)(v73 - 144));
  if (*(char *)(v73 - 153) < 0)
    operator delete(*(void **)(v73 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v73 - 185) < 0)
    operator delete(*(void **)(v73 - 208));
  if (*(char *)(v73 - 217) < 0)
    operator delete(*(void **)(v73 - 240));
  if (a33 < 0)
    operator delete(a28);
  if (a73 < 0)
    operator delete(a72);
  if (a71 < 0)
    operator delete(a66);
  if (a39 < 0)
    operator delete(a34);
  if (a64 < 0)
    operator delete(a59);
  if (a57 < 0)
    operator delete(a52);
  if (a45 < 0)
    operator delete(a40);
  if (a51 < 0)
    operator delete(a46);
  _Unwind_Resume(a1);
}

void sub_1ADAA080C()
{
  JUMPOUT(0x1ADAA0784);
}

void sub_1ADAA0814()
{
  JUMPOUT(0x1ADAA0794);
}

void sub_1ADAA081C()
{
  JUMPOUT(0x1ADAA07A4);
}

void sub_1ADAA0824()
{
  JUMPOUT(0x1ADAA07B4);
}

void sub_1ADAA082C()
{
  JUMPOUT(0x1ADAA07C4);
}

void sub_1ADAA0834()
{
  JUMPOUT(0x1ADAA07D4);
}

void sub_1ADAA083C()
{
  JUMPOUT(0x1ADAA07E4);
}

void sub_1ADAA0844()
{
  JUMPOUT(0x1ADAA07F4);
}

void kaldi::nnet1::MomentStatistics<float>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5[3];
  const void *v6[2];
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(*(_QWORD *)*a1 + 16);
  v6[0] = &unk_1E5D341C8;
  v6[1] = 0;
  v7 = 0;
  v8 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v6, v2, 0);
  v3 = *a1;
  if (a1[1] != *a1)
  {
    v4 = 0;
    do
    {
      kaldi::CuVectorBase<float>::AddVec((uint64_t)v6, *(_QWORD *)(v3 + 8 * v4++), 1.0, 1.0);
      v3 = *a1;
    }
    while (v4 < (uint64_t)(a1[1] - *a1) >> 3);
  }
  memset(v5, 0, sizeof(v5));
  kaldi::Vector<float>::Init(v5, v7);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v6, (uint64_t)v5);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v5);
  kaldi::Vector<float>::Destroy((uint64_t)v5);
  v6[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v6);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6[3];
  const void *v7[2];
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(*a1 + 16);
  v7[0] = &unk_1E5D341C8;
  v7[1] = 0;
  v8 = 0;
  v9 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v7, v2, 0);
  v3 = *a1;
  if (a1[1] != *a1)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      kaldi::CuVectorBase<float>::AddVec((uint64_t)v7, v3 + v4, 1.0, 1.0);
      ++v5;
      v3 = *a1;
      v4 += 32;
    }
    while (v5 < (uint64_t)(a1[1] - *a1) >> 5);
  }
  memset(v6, 0, sizeof(v6));
  kaldi::Vector<float>::Init(v6, v8);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v7, (uint64_t)v6);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v6);
  kaldi::Vector<float>::Destroy((uint64_t)v6);
  v7[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v7);
}

void sub_1ADAA092C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::PropagateFncDirect(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int i;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int j;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  _QWORD v69[5];
  void *v70;
  __int128 v71;
  __int128 v72;
  void *v73;
  _QWORD v74[4];
  void *v75;
  _QWORD v76[4];

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  if (*(int *)(a1 + 128) <= 0)
    v8 = 0.0;
  else
    v8 = 1.0;
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 384) + 48 * a4), *(unsigned int *)(a2 + 20), (*(_DWORD *)(a1 + 108) * *(_DWORD *)(a1 + 120)), 3, 0);
  if (*(int *)(a1 + 144) >= 1)
  {
    v9 = 0;
    v10 = a4;
    do
    {
      v11 = *(_DWORD *)(a1 + 128);
      v12 = *(_DWORD *)(a1 + 120);
      if (v11 >= 1)
      {
        v14 = *(_DWORD *)(a1 + 104);
        v13 = *(_DWORD *)(a1 + 108);
        v15 = v13 * v9 * v12;
        v16 = *(_QWORD *)(a3 + 8) + 4 * v15;
        v17 = *(_DWORD *)(a3 + 28) - v15;
        v18 = *(_QWORD *)(a3 + 32);
        *(_QWORD *)((char *)&v76[1] + 4) = *(_QWORD *)(a3 + 20);
        LODWORD(v76[1]) = v13;
        HIDWORD(v76[2]) = v17;
        v76[3] = v18;
        v75 = &unk_1E5D29D40;
        v76[0] = v16;
        v19 = v14 * *(_DWORD *)(a1 + 140);
        v20 = *(_QWORD *)(a2 + 8) + 4 * v19;
        v21 = *(_DWORD *)(a2 + 28) - v19;
        v22 = *(_QWORD *)(a2 + 32);
        LODWORD(v74[1]) = v14 * v11;
        *(_QWORD *)((char *)&v74[1] + 4) = *(_QWORD *)(a2 + 20);
        HIDWORD(v74[2]) = v21;
        v74[3] = v22;
        v73 = &unk_1E5D29D40;
        v74[0] = v20;
        v23 = *(_QWORD *)(a1 + 152);
        LODWORD(v22) = *(_DWORD *)(v23 + 24);
        v24 = v22 * *(_DWORD *)(a1 + 124) * v14;
        v25 = *(_QWORD *)(v23 + 8) + 4 * v24 + 4 * (int)(v13 * v9);
        v26 = *(_DWORD *)(v23 + 28) - v24 - v13 * v9;
        v27 = *(_QWORD *)(v23 + 32);
        *((_QWORD *)&v71 + 1) = __PAIR64__(v74[1], v13);
        *(_QWORD *)&v72 = __PAIR64__(v26, v22);
        *((_QWORD *)&v72 + 1) = v27;
        v70 = &unk_1E5D29D40;
        *(_QWORD *)&v71 = v25;
        kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v75, (uint64_t)&v73, CblasNoTrans, (uint64_t)&v70, CblasNoTrans, 1.0, 0.0);
        v28 = *(_DWORD *)(a1 + 120);
        if (v28 >= 2)
        {
          for (i = 1; i < v28; ++i)
          {
            v30 = *(_DWORD *)(a1 + 108) * (i + v9 * v28);
            v31 = *(_QWORD *)(a3 + 8) + 4 * v30;
            v32 = *(_DWORD *)(a3 + 28) - v30;
            v33 = *(_QWORD *)(a3 + 32);
            LODWORD(v69[2]) = *(_DWORD *)(a1 + 108);
            *(_QWORD *)((char *)&v69[2] + 4) = *(_QWORD *)(a3 + 20);
            HIDWORD(v69[3]) = v32;
            v69[4] = v33;
            v69[0] = &unk_1E5D29D40;
            v69[1] = v31;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v69, (uint64_t)&v75, 111);
            v69[0] = &unk_1E5D29D40;
            memset(&v69[1], 0, 32);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v69);
            v28 = *(_DWORD *)(a1 + 120);
          }
        }
        v70 = &unk_1E5D29D40;
        v71 = 0u;
        v72 = 0u;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v70);
        v73 = &unk_1E5D29D40;
        memset(v74, 0, sizeof(v74));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v73);
        v75 = &unk_1E5D29D40;
        memset(v76, 0, sizeof(v76));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v75);
        v12 = *(_DWORD *)(a1 + 120);
      }
      if (v12 >= 1)
      {
        v34 = 0;
        do
        {
          v35 = *(_QWORD *)(a1 + 384) + 48 * v10;
          v36 = *(_DWORD *)(a1 + 108);
          v37 = *(_DWORD *)(v35 + 28) - v36 * v34;
          v38 = *(_QWORD *)(v35 + 32);
          v76[0] = *(_QWORD *)(v35 + 8) + 4 * v36 * v34;
          LODWORD(v76[1]) = v36;
          *(_QWORD *)((char *)&v76[1] + 4) = *(_QWORD *)(v35 + 20);
          HIDWORD(v76[2]) = v37;
          v76[3] = v38;
          v75 = &unk_1E5D29D40;
          v39 = *(_QWORD *)(a1 + 160);
          v74[1] = 0;
          v40 = *(_QWORD *)(v39 + 8) + 4 * v36 * v9;
          v73 = &unk_1E5D29D70;
          v74[0] = v40;
          LODWORD(v74[1]) = v36;
          v74[2] = *(_QWORD *)(v39 + 24);
          kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v75, (uint64_t)&v73, 1.0, v8);
          v41 = *(_DWORD *)(a1 + 104);
          v42 = *(_DWORD *)(a1 + 108);
          v43 = (*(_DWORD *)(a1 + 116) * v9 + *(_DWORD *)(a1 + 112) * v34) * v41;
          v44 = *(_QWORD *)(a2 + 8) + 4 * v43;
          v45 = *(_DWORD *)(a2 + 28) - v43;
          v46 = *(_QWORD *)(a2 + 32);
          LODWORD(v74[1]) = *(_DWORD *)(a1 + 124) * v41;
          *(_QWORD *)((char *)&v74[1] + 4) = *(_QWORD *)(a2 + 20);
          HIDWORD(v74[2]) = v45;
          v74[3] = v46;
          v73 = &unk_1E5D29D40;
          v74[0] = v44;
          v47 = *(_QWORD *)(a1 + 152);
          v48 = *(_QWORD *)(v47 + 8) + 4 * (int)(v42 * v9);
          v49 = *(_DWORD *)(v47 + 24);
          v50 = *(_DWORD *)(v47 + 28);
          v51 = *(_QWORD *)(v47 + 32);
          *((_QWORD *)&v71 + 1) = __PAIR64__(v74[1], v42);
          LODWORD(v72) = v49;
          DWORD1(v72) = v50 - v42 * v9;
          *((_QWORD *)&v72 + 1) = v51;
          v70 = &unk_1E5D29D40;
          *(_QWORD *)&v71 = v48;
          kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v75, (uint64_t)&v73, CblasNoTrans, (uint64_t)&v70, CblasNoTrans, 1.0, 1.0);
          v70 = &unk_1E5D29D40;
          v71 = 0u;
          v72 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v70);
          v73 = &unk_1E5D29D40;
          memset(v74, 0, sizeof(v74));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v73);
          v75 = &unk_1E5D29D40;
          memset(v76, 0, sizeof(v76));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v75);
          ++v34;
        }
        while (v34 < *(_DWORD *)(a1 + 120));
      }
      v52 = *(_DWORD *)(a1 + 148);
      if (v52 >= 1)
      {
        for (j = 0; j < v52; ++j)
        {
          v54 = *(_DWORD *)(a1 + 108);
          v55 = v54 * (j + v52 * v9);
          v56 = *(_QWORD *)(a3 + 8) + 4 * v55;
          v57 = *(_DWORD *)(a3 + 28) - v55;
          v58 = *(_QWORD *)(a3 + 32);
          *(_QWORD *)((char *)&v76[1] + 4) = *(_QWORD *)(a3 + 20);
          LODWORD(v76[1]) = v54;
          HIDWORD(v76[2]) = v57;
          v76[3] = v58;
          v75 = &unk_1E5D29D40;
          v76[0] = v56;
          v59 = *(_QWORD *)(a1 + 384) + 48 * v10;
          LODWORD(v56) = v54 * j * *(_DWORD *)(a1 + 136);
          v60 = *(_QWORD *)(v59 + 8) + 4 * (int)v56;
          LODWORD(v56) = *(_DWORD *)(v59 + 28) - v56;
          v61 = *(_QWORD *)(v59 + 32);
          v74[0] = v60;
          LODWORD(v74[1]) = v54;
          *(_QWORD *)((char *)&v74[1] + 4) = *(_QWORD *)(v59 + 20);
          HIDWORD(v74[2]) = v56;
          v74[3] = v61;
          v73 = &unk_1E5D29D40;
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v75, (uint64_t)&v73, 111);
          v73 = &unk_1E5D29D40;
          memset(v74, 0, sizeof(v74));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v73);
          if (*(int *)(a1 + 132) >= 2)
          {
            v62 = 1;
            do
            {
              v63 = *(_QWORD *)(a1 + 384) + 48 * v10;
              v64 = *(_DWORD *)(a1 + 108);
              v65 = (v62 + j * *(_DWORD *)(a1 + 136)) * v64;
              v66 = *(_QWORD *)(v63 + 8) + 4 * v65;
              v67 = *(_DWORD *)(v63 + 28) - v65;
              v68 = *(_QWORD *)(v63 + 32);
              v74[0] = v66;
              LODWORD(v74[1]) = v64;
              *(_QWORD *)((char *)&v74[1] + 4) = *(_QWORD *)(v63 + 20);
              HIDWORD(v74[2]) = v67;
              v74[3] = v68;
              v73 = &unk_1E5D29D40;
              kaldi::CuMatrixBase<float>::Max((uint64_t)&v75, (uint64_t)&v73);
              v73 = &unk_1E5D29D40;
              memset(v74, 0, sizeof(v74));
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v73);
              ++v62;
            }
            while (v62 < *(_DWORD *)(a1 + 132));
          }
          v75 = &unk_1E5D29D40;
          memset(v76, 0, sizeof(v76));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v75);
          v52 = *(_DWORD *)(a1 + 148);
        }
      }
      ++v9;
    }
    while (v9 < *(_DWORD *)(a1 + 144));
  }
}

void sub_1ADAA0F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _OWORD *a13, uint64_t a14, _OWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;

  a21 = v26 + 16;
  *a13 = 0u;
  a13[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a21);
  a26 = v26 + 16;
  *v27 = 0u;
  v27[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a26);
  *(_QWORD *)(v28 - 144) = v26 + 16;
  *a15 = 0u;
  a15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v28 - 144));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t v16[6];
  int32x2_t v17[6];

  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix(v17, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v16, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, _QWORD))(*(_QWORD *)v8 + 112))(v8, a2, v17, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, uint64_t, int32x2_t *, _QWORD))(*(_QWORD *)v8 + 128))(v8, a2, v17, a3, v16, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  v9 = a1[19];
  LODWORD(a2) = *(_DWORD *)(v9 + 16);
  LODWORD(a3) = *(_DWORD *)(v9 + 20);
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v10, 1);
  LODWORD(a3) = a2 * a3;
  v14 = 0;
  v15 = 0;
  v13 = (char *)*a4;
  LODWORD(v14) = a3;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v13, **(_QWORD **)(v8 + 168));
  v11 = *(_DWORD *)(a1[20] + 16);
  v14 = 0;
  v15 = 0;
  v13 = (char *)*a4 + 4 * (int)a3;
  LODWORD(v14) = v11;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(const void ****)(v8 + 192), (uint64_t)&v13);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v16);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v17);
}

void sub_1ADAA1164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 276) = a3;
  *(_DWORD *)(result + 272) = a2;
  *(_BYTE *)(result + 480) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  float v4;
  int v6;
  uint64_t v7;
  uint64_t v9;

  v4 = a3;
  v6 = *(_DWORD *)(a1 + 272);
  if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * a2), *(_QWORD *)(a1 + 216) + 48 * a2, a3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * a2), *(_QWORD *)(a1 + 240) + 32 * a2, v4);
    }
  }
  else if (v6 == 2)
  {
    if (a3 > 0.0)
    {
      v9 = a2;
      if (*(_BYTE *)(a1 + 84))
        v4 = (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * a2) * a3;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * a2), (int *)(*(_QWORD *)(a1 + 216) + 48 * a2), v4);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v9), (_QWORD *)(*(_QWORD *)(a1 + 240) + 32 * v9), v4);
    }
  }
  else if (v6 == 1 && a3 > 0.0)
  {
    v7 = a2;
    if (*(_BYTE *)(a1 + 84))
      v4 = (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * a2) * a3;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * a2), v4);
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v7), v4);
  }
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[34];

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  *a3 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16)
      + *(_DWORD *)(*(_QWORD *)(a1 + 152) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 152) + 20);
  v6 = *(_QWORD *)(a1 + 168);
  v7 = *(_QWORD *)(a1 + 176) - v6;
  if (v7 && (v8 = *(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) != 0)
  {
    v9 = v7 >> 3;
    v10 = v8 >> 3;
    v11 = *(_DWORD *)(a1 + 80);
    if (v11 == 1)
      v11 = 0;
    v12 = v11;
    v13 = v10 - 1;
    if (v9 - 1 != v11 || v13 != v11)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"  ", 2);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
    }
    v15 = kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v6 + 8 * v11));
    v16 = kaldi::CuVectorBase<float>::CountZeros(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v12)) + v15;
  }
  else
  {
    v16 = 0;
  }
  *a2 = v16;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t i;
  int32x2_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1)
    v3 = (v2 + 1);
  else
    v3 = 1;
  if (!*(_BYTE *)(a1 + 480))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 408), (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 360), (int)v3);
    std::vector<BOOL>::resize(a1 + 456, (int)v3, 0);
    v4 = *(_DWORD *)(a1 + 272);
    v5 = (_QWORD *)(a1 + 168);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 168, (int)v3);
    v6 = (_QWORD *)(a1 + 192);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 192, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 216), (int)v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 240), (int)v3);
    if ((int)v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        v8 = (int32x2_t *)operator new();
        kaldi::CuMatrix<float>::CuMatrix(v8, *(unsigned int *)(*(_QWORD *)(a1 + 152) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 152) + 16), 0, 0, 0);
        v9 = *(_QWORD *)(*v5 + 8 * i);
        *(_QWORD *)(*v5 + 8 * i) = v8;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
        v10 = (_QWORD *)operator new();
        v11 = *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16);
        *v10 = &unk_1E5D341C8;
        v10[1] = 0;
        v10[2] = 0;
        v10[3] = 0;
        kaldi::CuVector<float>::Resize((uint64_t)v10, v11, 0);
        v12 = *(_QWORD *)(*v6 + 8 * i);
        *(_QWORD *)(*v6 + 8 * i) = v10;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        if ((v4 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 216) + 48 * i), *(unsigned int *)(*(_QWORD *)(a1 + 152) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 152) + 16), 1, 0);
          kaldi::CuVector<float>::Resize(*(_QWORD *)(a1 + 240) + 32 * i, *(unsigned int *)(*(_QWORD *)(a1 + 152) + 20), 1);
          if (*(_DWORD *)(a1 + 272) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 216) + 48 * i, 1.0);
            kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 240) + 32 * i, 1.0);
          }
        }
      }
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 288), (int)v3);
    *(_BYTE *)(a1 + 480) = 1;
  }
}

void sub_1ADAA1688(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>(v2, a1);
  return v2;
}

void sub_1ADAA1704(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>(v2, a1);
  return v2;
}

void sub_1ADAA1774(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(a1 - 96);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(uint64_t a1, int a2, float a3)
{
  float result;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(a1 + 152), *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * a2), 111, -(float)(a3 * *(float *)(a1 + 264)), 1.0);
  kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(a1 + 160), *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * a2), -(float)(a3 * *(float *)(a1 + 268)), 1.0);
  return result;
}

uint64_t *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(uint64_t a1)
{
  int v2;
  int v3;
  unint64_t v4;

  v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1)
    v3 = v2 + 1;
  else
    v3 = 1;
  v4 = v3;
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 336), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 384), v4);
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 432), v4);
}

double kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1E5D31578;
  *(_QWORD *)(a1 + 88) = &unk_1E5D316B0;
  *(_QWORD *)(a1 + 96) = &unk_1E5D316D8;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 264) = _D1;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[35];

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_QWORD *)(a1 + 88) = &unk_1E5D316B0;
  *(_QWORD *)(a1 + 96) = &unk_1E5D316D8;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1E5D31578;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 4));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 5);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 2);
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  v6 = *(int **)(a2 + 152);
  if (v6)
  {
    v7 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v7, v6);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v7);
  }
  v8 = *(_QWORD **)(a2 + 160);
  if (v8)
  {
    kaldi::NewCuSubOrVec<float>(v8, *(unsigned __int8 *)(a1 + 16), v29);
    v9 = v29[0];
    v29[0] = 0;
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v11 = v29[0];
      v29[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * v14);
      if (v15)
      {
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16), v29);
        v16 = *(_QWORD *)(a1 + 168);
        v17 = v29[0];
        v29[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v29[0];
        v29[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v13 = *(_QWORD *)(a1 + 168);
        v12 = *(_QWORD *)(a1 + 176);
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  v21 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  if (v20 != v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD **)(*(_QWORD *)(a2 + 192) + 8 * v22);
      if (v23)
      {
        kaldi::NewCuSubOrVec<float>(v23, *(unsigned __int8 *)(a1 + 16), v29);
        v24 = *(_QWORD *)(a1 + 192);
        v25 = v29[0];
        v29[0] = 0;
        v26 = *(_QWORD *)(v24 + 8 * v22);
        *(_QWORD *)(v24 + 8 * v22) = v25;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v27 = v29[0];
        v29[0] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v21 = *(_QWORD *)(a1 + 192);
        v20 = *(_QWORD *)(a1 + 200);
      }
      ++v22;
    }
    while (v22 < (v20 - v21) >> 3);
  }
  if (*(_QWORD *)(a2 + 496) != *(_QWORD *)(a2 + 488))
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
  return a1;
}

void sub_1ADAA1D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, quasar::Bitmap *a14, quasar::Bitmap *a15, _QWORD *a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  void **v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  v19 = (void *)*((_QWORD *)v16 + 57);
  if (v19)
    operator delete(v19);
  a16 = (_QWORD *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v20 = *a12;
  if (*a12)
  {
    *((_QWORD *)v16 + 40) = v20;
    operator delete(v20);
  }
  v21 = *a13;
  if (*a13)
  {
    *((_QWORD *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v22 = *((_QWORD *)v16 + 20);
  *((_QWORD *)v16 + 20) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v18, 0);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(_QWORD *a1, uint64_t *a2)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs((uint64_t)a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(a1[21] + 8 * ((((a1[22] - a1[21]) << 29) - 0x100000000) >> 32)));
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(a1[24] + 8 * ((((a1[25] - a1[24]) << 29) - 0x100000000) >> 32)));
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)(a1 + 88) = &unk_1E5D316B0;
  v2 = (quasar::Bitmap *)(a1 + 88);
  *(_QWORD *)a1 = &unk_1E5D31578;
  *(_QWORD *)(a1 + 96) = &unk_1E5D316D8;
  v3 = (quasar::Bitmap *)(a1 + 96);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 488));
  v4 = *(void **)(a1 + 456);
  if (v4)
    operator delete(v4);
  v8 = (void **)(a1 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(_QWORD *)(a1 + 320) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(_QWORD *)(a1 + 296) = v6;
    operator delete(v6);
  }
  v8 = (void **)(a1 + 240);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 216);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 192);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 168);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v7 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), 0);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
  JUMPOUT(0x1AF44D190);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent(v2, a1);
  return v2;
}

void sub_1ADAA20FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int *v6;
  int *v7;
  int *v8;
  uint64_t *v9;
  int *v10;
  int *v11;
  uint64_t v13;
  BOOL v17;
  int *v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  float *v23;
  BOOL v25;
  __int128 *v26;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  _BOOL4 v41;
  BOOL v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int i;
  uint64_t j;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  __int128 *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  int *v73;
  float *v74;
  int *v75;
  float *v76;
  int *v77;
  float *v78;
  int *v79;
  float *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[2];
  int v84;
  _BYTE v85[16];
  uint64_t v86;
  void *__p;
  void *v88;
  void **v89[34];
  __int128 v90;
  uint64_t v91;
  int v92;
  int v93;
  float v94;
  int v95;

  v94 = 2.0;
  v95 = -1073741824;
  v93 = 1036831949;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  v6 = (int *)(a1 + 116);
  *(_QWORD *)(a1 + 132) = 0x100000001;
  v7 = (int *)(a1 + 132);
  v8 = (int *)(a1 + 136);
  v92 = -1;
  v90 = 0uLL;
  v91 = 0;
  v9 = a2 + 4;
  v74 = (float *)(a1 + 280);
  v75 = (int *)(a1 + 128);
  v78 = (float *)(a1 + 264);
  v79 = (int *)(a1 + 124);
  v73 = (int *)(a1 + 120);
  v76 = (float *)(a1 + 268);
  v77 = (int *)(a1 + 112);
  v10 = (int *)(a1 + 108);
  v11 = (int *)(a1 + 104);
  while ((*((_BYTE *)v9 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v90);
    if ((SHIBYTE(v91) & 0x80000000) == 0)
    {
      switch(HIBYTE(v91))
      {
        case 0xA:
          if ((_QWORD)v90 != 0x61654D736169423CLL || WORD4(v90) != 15982)
            goto LABEL_107;
          goto LABEL_61;
        case 0xB:
          if ((_QWORD)v90 == 0x6E6152736169423CLL && *(_QWORD *)((char *)&v90 + 3) == 0x3E65676E61527361)
            goto LABEL_109;
          if (HIBYTE(v91) == 10)
            goto LABEL_108;
          if (HIBYTE(v91) != 11)
            goto LABEL_128;
LABEL_96:
          v31 = (_QWORD)v90 == 0x745368637461503CLL && *(_QWORD *)((char *)&v90 + 3) == 0x3E70657453686374;
          v18 = v77;
          if (!v31)
            goto LABEL_107;
          goto LABEL_129;
        case 0xC:
          goto LABEL_102;
        case 0xD:
          if ((_QWORD)v90 == 0x74536D617261503CLL && *(_QWORD *)((char *)&v90 + 5) == 0x3E7665646474536DLL)
            goto LABEL_135;
LABEL_78:
          v28 = (_QWORD)v90 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v90 + 5) == 0x3E706574536E6F69;
          v18 = v6;
          if (v28)
            goto LABEL_129;
          if (HIBYTE(v91) == 10)
            goto LABEL_108;
          if (HIBYTE(v91) == 12)
            goto LABEL_102;
          if (HIBYTE(v91) != 13)
            goto LABEL_128;
          v29 = (_QWORD)v90 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v90 + 5) == 0x3E657A69536E6F69;
          v18 = v73;
          if (!v29)
            goto LABEL_128;
          goto LABEL_129;
        case 0xF:
          v30 = (_QWORD)v90 == 0x75746165466E493CLL && *(_QWORD *)((char *)&v90 + 7) == 0x3E7370614D657275;
          v18 = v11;
          if (!v30)
          {
            v26 = &v90;
            switch(HIBYTE(v91))
            {
              case 0xA:
                goto LABEL_124;
              case 0xB:
                goto LABEL_96;
              case 0xC:
                goto LABEL_102;
              case 0xD:
                goto LABEL_78;
              case 0xF:
                goto LABEL_138;
              default:
                goto LABEL_128;
            }
          }
          goto LABEL_129;
        case 0x10:
          v25 = (_QWORD)v90 == 0x7461654674754F3CLL && *((_QWORD *)&v90 + 1) == 0x3E7370614D657275;
          v18 = v10;
          if (!v25)
          {
            v26 = &v90;
            switch(HIBYTE(v91))
            {
              case 0xA:
                goto LABEL_124;
              case 0xB:
                goto LABEL_96;
              case 0xC:
                goto LABEL_102;
              case 0xD:
                goto LABEL_78;
              case 0xF:
LABEL_138:
                v42 = (_QWORD)v90 == 0x65726168536E493CLL && *(_QWORD *)((char *)&v90 + 7) == 0x3E73646E61426465;
                v18 = v75;
                if (!v42)
                  goto LABEL_107;
                goto LABEL_129;
              default:
                goto LABEL_128;
            }
          }
          goto LABEL_129;
        default:
          goto LABEL_128;
      }
    }
    v13 = *((_QWORD *)&v90 + 1);
    if (*((_QWORD *)&v90 + 1) == 10)
    {
      if (*(_QWORD *)v90 == 0x61654D736169423CLL && *(_WORD *)(v90 + 8) == 15982)
      {
LABEL_61:
        v23 = (float *)&v95;
        goto LABEL_136;
      }
      v13 = *((_QWORD *)&v90 + 1);
    }
    else if (*((_QWORD *)&v90 + 1) == 13
           && *(_QWORD *)v90 == 0x74536D617261503CLL
           && *(_QWORD *)(v90 + 5) == 0x3E7665646474536DLL)
    {
LABEL_135:
      v23 = (float *)&v93;
      goto LABEL_136;
    }
    if (v13 == 11)
    {
      if (*(_QWORD *)v90 == 0x6E6152736169423CLL && *(_QWORD *)(v90 + 3) == 0x3E65676E61527361)
      {
LABEL_109:
        v23 = &v94;
        goto LABEL_136;
      }
      v13 = *((_QWORD *)&v90 + 1);
    }
    if (v13 == 15)
    {
      v17 = *(_QWORD *)v90 == 0x75746165466E493CLL && *(_QWORD *)(v90 + 7) == 0x3E7370614D657275;
      v18 = v11;
      if (v17)
        goto LABEL_129;
      v13 = *((_QWORD *)&v90 + 1);
    }
    if (v13 == 16)
    {
      v19 = *(_QWORD *)v90 == 0x7461654674754F3CLL && *(_QWORD *)(v90 + 8) == 0x3E7370614D657275;
      v18 = v10;
      if (v19)
        goto LABEL_129;
      v13 = *((_QWORD *)&v90 + 1);
    }
    if (v13 == 11)
    {
      v20 = *(_QWORD *)v90 == 0x745368637461503CLL && *(_QWORD *)(v90 + 3) == 0x3E70657453686374;
      v18 = v77;
      if (v20)
        goto LABEL_129;
      v13 = *((_QWORD *)&v90 + 1);
    }
    if (v13 != 13)
      goto LABEL_110;
    v21 = *(_QWORD *)v90 == 0x6E6F69746365533CLL && *(_QWORD *)(v90 + 5) == 0x3E706574536E6F69;
    v18 = v6;
    if (v21)
      goto LABEL_129;
    v13 = *((_QWORD *)&v90 + 1);
    if (*((_QWORD *)&v90 + 1) != 13)
      goto LABEL_110;
    v22 = *(_QWORD *)v90 == 0x6E6F69746365533CLL && *(_QWORD *)(v90 + 5) == 0x3E657A69536E6F69;
    v18 = v73;
    if (v22)
      goto LABEL_129;
    if ((v91 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v91) == 10)
        goto LABEL_108;
      if (HIBYTE(v91) != 12)
        goto LABEL_128;
LABEL_102:
      v32 = (_QWORD)v90 == 0x537265746C69463CLL && DWORD2(v90) == 1046837865;
      v18 = v79;
      if (v32)
        goto LABEL_129;
      if ((v91 & 0x8000000000000000) == 0)
      {
LABEL_107:
        if (HIBYTE(v91) != 10)
          goto LABEL_128;
LABEL_108:
        v26 = &v90;
LABEL_124:
        v35 = *(_QWORD *)v26;
        v36 = *((unsigned __int16 *)v26 + 4);
        v37 = v35 == 0x7A69536C6F6F503CLL && v36 == 15973;
        v18 = v7;
        if (v37)
          goto LABEL_129;
        goto LABEL_128;
      }
    }
    else
    {
LABEL_110:
      if (v13 != 12)
        goto LABEL_116;
      v33 = *(_QWORD *)v90 == 0x537265746C69463CLL && *(_DWORD *)(v90 + 8) == 1046837865;
      v18 = v79;
      if (v33)
        goto LABEL_129;
    }
    v13 = *((_QWORD *)&v90 + 1);
LABEL_116:
    if (v13 == 15)
    {
      v34 = *(_QWORD *)v90 == 0x65726168536E493CLL && *(_QWORD *)(v90 + 7) == 0x3E73646E61426465;
      v18 = v75;
      if (v34)
        goto LABEL_129;
      v13 = *((_QWORD *)&v90 + 1);
    }
    if (v13 == 10)
    {
      v26 = (__int128 *)v90;
      goto LABEL_124;
    }
LABEL_128:
    v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v90, "<PoolStep>");
    v18 = v8;
    if (v38)
      goto LABEL_129;
    v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v90, "<LearnRateCoef>");
    v23 = v78;
    if (!v39)
    {
      v40 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v90, "<BiasLearnRateCoef>");
      v23 = v76;
      if (!v40)
      {
        v41 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v90, "<MaxNorm>");
        v23 = v74;
        if (!v41)
        {
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v90, "<RandomSeed>"))
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
            v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Unknown token ", 14);
            if (v91 >= 0)
              v69 = &v90;
            else
              v69 = (__int128 *)v90;
            if (v91 >= 0)
              v70 = HIBYTE(v91);
            else
              v70 = *((_QWORD *)&v90 + 1);
            v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
            v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)", a typo in config?", 19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" (ParamStddev|BiasMean|BiasRange|InFeatureMaps|OutFeatureMaps|PatchStep|SectionStep|SectionSize|FilterSize|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed)", 158);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
          }
          v18 = &v92;
LABEL_129:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v18);
          goto LABEL_137;
        }
      }
    }
LABEL_136:
    kaldi::ReadBasicType<float>(a2, 0, v23);
LABEL_137:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v43 = *(_DWORD *)(a1 + 8);
  v44 = *(_DWORD *)(a1 + 12);
  v46 = *(_DWORD *)(a1 + 104);
  v45 = *(_DWORD *)(a1 + 108);
  v47 = *(_DWORD *)(a1 + 132);
  v48 = v43 / v46 - *(_DWORD *)(a1 + 128);
  v49 = *(_DWORD *)(a1 + 120);
  v50 = *(_DWORD *)(a1 + 136);
  v51 = (v49 - v47) / v50 + 1;
  *(_DWORD *)(a1 + 148) = v51;
  v52 = v45 * v51;
  v53 = v44 / v52;
  *(_DWORD *)(a1 + 140) = v48;
  *(_DWORD *)(a1 + 144) = v44 / v52;
  if (v47 < 1 || v49 < v47)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: Invalid max pooling size", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
  }
  if (v50 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: Max pooling step must be >= 1", 63);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
  }
  if (v44 != v52 * v53)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: output dim mismatch", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
  }
  if (v43 != v43 / v46 * v46)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: input dim mismatch", 52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
  }
  if (*v79 + *v77 * (v49 - 1) + *v6 * (v53 - 1) > v48)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: too few input bands to compute the output", 75);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
  }
  if (v92 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v92);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v85, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)v83, ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104)), (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108)), 0, 0);
  for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v83); ++i)
  {
    for (j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v83); ++j)
    {
      v56 = *(float *)&v93;
      kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v85, 0);
      *(float *)(v83[0] + 4 * i * v84 + 4 * j) = v56 * v57;
    }
  }
  if (*(_QWORD *)(a1 + 152))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"pointer is thought to be un-initialized here", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
  }
  v58 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v58, (uint64_t)v83);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v58);
  v59 = (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108));
  v81 = 0;
  v82 = 0;
  v80 = 0;
  kaldi::Vector<float>::Resize((void **)&v80, v59, 0);
  if ((int)v81 >= 1)
  {
    v60 = 0;
    do
    {
      v61 = *(float *)&v95;
      v62 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
      v63 = v61 + (v62 + -0.5) * v94;
      v64 = (int)v81;
      v80[v60++] = v63;
    }
    while (v60 < v64);
  }
  if (*(_QWORD *)(a1 + 160))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"pointer is thought to be un-initialized here", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
  }
  v65 = (_QWORD *)operator new();
  v66 = v81;
  v65[2] = 0;
  v65[3] = 0;
  *v65 = &unk_1E5D341C8;
  v65[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v65, v66, 0);
  v67 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v65;
  if (v67)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
    v65 = *(_QWORD **)(a1 + 160);
  }
  kaldi::CuVectorBase<float>::CopyFromVec<float>(v65, (uint64_t)&v80);
  kaldi::Vector<float>::Destroy((uint64_t)&v80);
  kaldi::Matrix<float>::~Matrix((uint64_t)v83);
  if (__p)
  {
    v88 = __p;
    operator delete(__p);
  }
  v89[0] = (void **)&v86;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v89);
  if (SHIBYTE(v91) < 0)
    operator delete((void *)v90);
}

void sub_1ADAA2D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 121) < 0)
    operator delete(*(void **)(v24 - 144));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  float *v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  _BOOL4 v39;
  int v40;
  int v41;
  int v42;
  int v43;
  kaldi::quasar::Vocab **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v52;
  __int128 *v53;
  uint64_t v54;
  void *__p[2];
  uint64_t v57;
  __int128 v58;
  uint64_t v59;

  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  v7 = a1 + 116;
  *(_QWORD *)(a1 + 132) = 0x100000001;
  v8 = a1 + 132;
  while (kaldi::Peek(a2, a3) == 60)
  {
    v58 = 0uLL;
    v59 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v58);
    if ((SHIBYTE(v59) & 0x80000000) == 0)
    {
      v9 = (uint64_t *)&v58;
      switch(HIBYTE(v59))
      {
        case 0xA:
          goto LABEL_87;
        case 0xB:
LABEL_4:
          v10 = (_QWORD)v58 == 0x745368637461503CLL && *(_QWORD *)((char *)&v58 + 3) == 0x3E70657453686374;
          v11 = a1 + 112;
          if (!v10)
            goto LABEL_86;
          goto LABEL_136;
        case 0xC:
          goto LABEL_81;
        case 0xD:
LABEL_68:
          v24 = (_QWORD)v58 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v58 + 5) == 0x3E706574536E6F69;
          v11 = v7;
          if (v24)
            goto LABEL_136;
          if (HIBYTE(v59) == 10)
            goto LABEL_87;
          if (HIBYTE(v59) == 12)
            goto LABEL_81;
          if (HIBYTE(v59) != 13)
            goto LABEL_132;
          v25 = (_QWORD)v58 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v58 + 5) == 0x3E657A69536E6F69;
          v11 = a1 + 120;
          if (!v25)
            goto LABEL_132;
          goto LABEL_136;
        case 0xF:
          v19 = (_QWORD)v58 == 0x75746165466E493CLL && *(_QWORD *)((char *)&v58 + 7) == 0x3E7370614D657275;
          v11 = a1 + 104;
          if (v19)
            goto LABEL_136;
LABEL_52:
          v20 = (_QWORD)v58 == 0x65726168536E493CLL && *(_QWORD *)((char *)&v58 + 7) == 0x3E73646E61426465;
          v11 = a1 + 128;
          if (v20)
            goto LABEL_136;
          if (HIBYTE(v59) != 15)
            goto LABEL_86;
          v21 = (_QWORD)v58 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v58 + 7) == 0x3E66656F43657461;
          v22 = (float *)(a1 + 264);
          if (!v21)
            goto LABEL_132;
          goto LABEL_138;
        case 0x10:
          v23 = (_QWORD)v58 == 0x7461654674754F3CLL && *((_QWORD *)&v58 + 1) == 0x3E7370614D657275;
          v11 = a1 + 108;
          if (!v23)
          {
            switch(HIBYTE(v59))
            {
              case 0xA:
                goto LABEL_87;
              case 0xB:
                goto LABEL_4;
              case 0xC:
                goto LABEL_81;
              case 0xD:
                goto LABEL_68;
              case 0xF:
                goto LABEL_52;
              default:
                goto LABEL_132;
            }
          }
          goto LABEL_136;
        case 0x13:
          goto LABEL_125;
        default:
          goto LABEL_132;
      }
    }
    v12 = *((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1) == 15)
    {
      v13 = *(_QWORD *)v58 == 0x75746165466E493CLL && *(_QWORD *)(v58 + 7) == 0x3E7370614D657275;
      v11 = a1 + 104;
      if (v13)
        goto LABEL_136;
    }
    if (*((_QWORD *)&v58 + 1) == 16)
    {
      v14 = *(_QWORD *)v58 == 0x7461654674754F3CLL && *(_QWORD *)(v58 + 8) == 0x3E7370614D657275;
      v11 = a1 + 108;
      if (v14)
        goto LABEL_136;
      v12 = *((_QWORD *)&v58 + 1);
    }
    if (v12 == 11)
    {
      v15 = *(_QWORD *)v58 == 0x745368637461503CLL && *(_QWORD *)(v58 + 3) == 0x3E70657453686374;
      v11 = a1 + 112;
      if (v15)
        goto LABEL_136;
      v12 = *((_QWORD *)&v58 + 1);
    }
    if (v12 != 13)
      goto LABEL_41;
    v16 = *(_QWORD *)v58 == 0x6E6F69746365533CLL && *(_QWORD *)(v58 + 5) == 0x3E706574536E6F69;
    v11 = v7;
    if (v16)
      goto LABEL_136;
    v12 = *((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1) != 13)
      goto LABEL_41;
    v17 = *(_QWORD *)v58 == 0x6E6F69746365533CLL && *(_QWORD *)(v58 + 5) == 0x3E657A69536E6F69;
    v11 = a1 + 120;
    if (v17)
      goto LABEL_136;
    if ((v59 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v59) == 10)
        goto LABEL_87;
      if (HIBYTE(v59) != 12)
        goto LABEL_132;
LABEL_81:
      v26 = (_QWORD)v58 == 0x537265746C69463CLL && DWORD2(v58) == 1046837865;
      v11 = a1 + 124;
      if (v26)
        goto LABEL_136;
      if ((v59 & 0x8000000000000000) == 0)
      {
LABEL_86:
        if (HIBYTE(v59) != 10)
          goto LABEL_132;
LABEL_87:
        v27 = (_QWORD)v58 == 0x7A69536C6F6F503CLL && WORD4(v58) == 15973;
        v11 = v8;
        if (v27)
          goto LABEL_136;
        if ((v59 & 0x8000000000000000) == 0)
        {
          if (HIBYTE(v59) != 10)
            goto LABEL_132;
          v28 = (_QWORD)v58 == 0x6574536C6F6F503CLL && WORD4(v58) == 15984;
          v11 = v7 + 20;
          if (!v28)
            goto LABEL_132;
          goto LABEL_136;
        }
LABEL_111:
        v12 = *((_QWORD *)&v58 + 1);
        if (*((_QWORD *)&v58 + 1) != 10)
          goto LABEL_117;
        v31 = *(_QWORD *)v58 == 0x6574536C6F6F503CLL && *(_WORD *)(v58 + 8) == 15984;
        v11 = v7 + 20;
        if (!v31)
        {
          if (v59 < 0)
          {
LABEL_117:
            if (v12 == 15)
            {
              v32 = *(_QWORD *)v58 == 0x61526E7261654C3CLL && *(_QWORD *)(v58 + 7) == 0x3E66656F43657461;
              v22 = (float *)(a1 + 264);
              if (!v32)
              {
                v12 = *((_QWORD *)&v58 + 1);
                goto LABEL_123;
              }
LABEL_138:
              kaldi::ReadBasicType<float>(a2, a3, v22);
              goto LABEL_139;
            }
LABEL_123:
            if (v12 == 19)
            {
              v9 = (uint64_t *)v58;
LABEL_125:
              v33 = *v9;
              v34 = v9[1];
              v35 = *(uint64_t *)((char *)v9 + 11);
              v36 = v33 == 0x61654C736169423CLL && v34 == 0x6F43657461526E72;
              v37 = v36 && v35 == 0x3E66656F43657461;
              v22 = (float *)(a1 + 268);
              if (v37)
                goto LABEL_138;
            }
          }
LABEL_132:
          v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v58, "<MaxNorm>");
          v22 = (float *)(a1 + 280);
          if (!v38)
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v58, "<GradientNormType>"))
            {
              __p[0] = 0;
              __p[1] = 0;
              v57 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)__p);
              *(_DWORD *)(a1 + 272) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
              if (SHIBYTE(v57) < 0)
                operator delete(__p[0]);
              goto LABEL_139;
            }
            v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v58, "<MaxGrad>");
            v22 = (float *)(a1 + 276);
            if (!v39)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
              if (v59 >= 0)
                v53 = &v58;
              else
                v53 = (__int128 *)v58;
              if (v59 >= 0)
                v54 = HIBYTE(v59);
              else
                v54 = *((_QWORD *)&v58 + 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
            }
          }
          goto LABEL_138;
        }
        goto LABEL_136;
      }
    }
    else
    {
LABEL_41:
      if (v12 != 12)
        goto LABEL_100;
      v18 = *(_QWORD *)v58 == 0x537265746C69463CLL && *(_DWORD *)(v58 + 8) == 1046837865;
      v11 = a1 + 124;
      if (v18)
        goto LABEL_136;
    }
    v12 = *((_QWORD *)&v58 + 1);
LABEL_100:
    if (v12 == 15)
    {
      v29 = *(_QWORD *)v58 == 0x65726168536E493CLL && *(_QWORD *)(v58 + 7) == 0x3E73646E61426465;
      v11 = a1 + 128;
      if (v29)
        goto LABEL_136;
      v12 = *((_QWORD *)&v58 + 1);
    }
    if (v12 != 10)
      goto LABEL_117;
    v30 = *(_QWORD *)v58 == 0x7A69536C6F6F503CLL && *(_WORD *)(v58 + 8) == 15973;
    v11 = v8;
    if (!v30)
      goto LABEL_111;
LABEL_136:
    kaldi::ReadBasicType<int>(a2, a3, v11);
LABEL_139:
    if (SHIBYTE(v59) < 0)
      operator delete((void *)v58);
  }
  v40 = *(_DWORD *)(a1 + 12);
  v41 = *(_DWORD *)(a1 + 108);
  v42 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 128);
  v43 = (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 132)) / *(_DWORD *)(a1 + 136) + 1;
  *(_DWORD *)(a1 + 148) = v43;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 140) = v42;
  *(_DWORD *)(a1 + 144) = v40 / (v41 * v43);
  LOBYTE(v58) = 0;
  kaldi::ReadBasicType<char>(a2, a3, &v58);
  v44 = (kaldi::quasar::Vocab **)(a1 + 152);
  if (*(_QWORD *)(a1 + 152)
    || (kaldi::ExpectToken(a2, a3, "<Filters>"),
        v45 = ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104)),
        v46 = (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108)),
        v47 = operator new(),
        kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v47, v45, v46),
        std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v47),
        kaldi::QuantizedMatrix<signed char>::Read(*(float **)(a1 + 152), a2, a3, a4),
        *(_QWORD *)(a1 + 160)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::ExpectToken(a2, a3, "<Bias>");
  v48 = (_QWORD *)operator new();
  v49 = *(unsigned int *)(a1 + 12);
  v48[2] = 0;
  v48[3] = 0;
  *v48 = &unk_1E5D341C8;
  v48[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v48, v49, 0);
  v50 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v48;
  if (v50)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
    v48 = *(_QWORD **)(a1 + 160);
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))*v48)(v48, a2, a3);
  kaldi::quasar::Vocab::VocabSize(*v44);
  return kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)*v44);
}

void sub_1ADAA373C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 89) < 0)
    operator delete(*(void **)(v22 - 112));
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<InFeatureMaps>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<OutFeatureMaps>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PatchStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<SectionStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<SectionSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FilterSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<InSharedBands>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 272), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1ADAA39FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  kaldi::WriteBasicType<char>(a2, a3);
  kaldi::WriteToken(a2, a3, "<Filters>");
  kaldi::QuantizedMatrix<signed char>::Write(*(int **)(a1 + 152), a2, a3, a4);
  kaldi::WriteToken(a2, a3, "<Bias>");
  kaldi::CuVectorBase<float>::Write(*(_QWORD *)(a1 + 160), a2, a3);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1)
{
  int v2;

  v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  return *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152)) * v2;
}

const void **kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  v6 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152)) * v5;
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v10, *(float **)(a1 + 152));
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_DWORD *)(v7 + 16);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2 + 4 * v6;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v7, (uint64_t)&v10);
}

void *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(uint64_t a1, char **a2)
{
  int v4;
  int v5;
  unsigned int *v6;
  _DWORD *v7;
  int v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  v4 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152)) * v4;
  v6 = *(unsigned int **)(a1 + 152);
  v11 = 0;
  v12 = 0;
  v10 = *a2;
  LODWORD(v11) = v5;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v6, &v10);
  v7 = *(_DWORD **)(a1 + 160);
  v8 = v7[4];
  v11 = 0;
  v12 = 0;
  v10 = &(*a2)[4 * v5];
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v7, (uint64_t)&v10);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 312);
  v3 = *(_QWORD *)(a1 + 320) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1)
{
  float v2;

  v2 = kaldi::QuantizedMatrixBase<signed char>::Sum(*(int **)(a1 + 152));
  return v2 + kaldi::CuVectorBase<float>::Sum(*(_QWORD *)(a1 + 160));
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int32x2_t v4[6];

  v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152));
  kaldi::CuMatrix<float>::CuMatrix(v4, v2, v3, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

uint64_t sub_1ADAA3D10()
{
  uint64_t v0;
  float v1;
  _QWORD v3[4];
  uint64_t v4;

  kaldi::CuVector<float>::CuVector(v3, *(_QWORD *)(v0 + 160));
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v3);
  kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(v0 + 160), (uint64_t)v3, v1, 1.0);
  v3[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v3);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v4);
}

void sub_1ADAA3D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  void *__p[2];
  unsigned __int8 v20;
  void *v21[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;

  std::string::basic_string[abi:ne180100]<0>(&v25, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ParamsString(a1);
  if ((v24 & 0x80u) == 0)
    v4 = v23;
  else
    v4 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v5 = v24;
  else
    v5 = (std::string::size_type)v23[1];
  v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v26, "\n  filters");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<signed char>(*(kaldi::quasar::Vocab **)(a1 + 152));
  if ((v22 & 0x80u) == 0)
    v10 = v21;
  else
    v10 = (void **)v21[0];
  if ((v22 & 0x80u) == 0)
    v11 = v22;
  else
    v11 = (std::string::size_type)v21[1];
  v12 = std::string::append(&v27, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v28, "\n  bias");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 160));
  if ((v20 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v17 = v20;
  else
    v17 = (std::string::size_type)__p[1];
  v18 = std::string::append(&v29, (const std::string::value_type *)v16, v17);
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if ((char)v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((char)v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1ADAA3F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v45 - 41) < 0)
    operator delete(*(void **)(v45 - 64));
  if (*(char *)(v45 - 73) < 0)
    operator delete(*(void **)(v45 - 96));
  if (a20 < 0)
    operator delete(a15);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ParamsString(uint64_t a1)
{
  _QWORD *v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 168))(a1, v4, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" , # of sections: ", 18);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", section size after pooling: ", 30);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v4[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v6);
}

void sub_1ADAA4138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  void **v34;
  std::string::size_type v35;
  std::string *v36;
  void *__p[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  void *v43[2];
  unsigned __int8 v44;
  void *v45[2];
  unsigned __int8 v46;
  void *v47[2];
  unsigned __int8 v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;

  std::string::basic_string[abi:ne180100]<0>(&v49, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ParamsString(a1);
  if ((v48 & 0x80u) == 0)
    v4 = v47;
  else
    v4 = (void **)v47[0];
  if ((v48 & 0x80u) == 0)
    v5 = v48;
  else
    v5 = (std::string::size_type)v47[1];
  v6 = std::string::append(&v49, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v50, "\n  filters_grad");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 168));
  if ((v46 & 0x80u) == 0)
    v10 = v45;
  else
    v10 = (void **)v45[0];
  if ((v46 & 0x80u) == 0)
    v11 = v46;
  else
    v11 = (std::string::size_type)v45[1];
  v12 = std::string::append(&v51, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v52, ", lr-coef ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v44 & 0x80u) == 0)
    v16 = v43;
  else
    v16 = (void **)v43[0];
  if ((v44 & 0x80u) == 0)
    v17 = v44;
  else
    v17 = (std::string::size_type)v43[1];
  v18 = std::string::append(&v53, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v54, ", max-norm ");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v42 & 0x80u) == 0)
    v22 = v41;
  else
    v22 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v23 = v42;
  else
    v23 = (std::string::size_type)v41[1];
  v24 = std::string::append(&v55, (const std::string::value_type *)v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v56, "\n  bias_grad");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 192));
  if ((v40 & 0x80u) == 0)
    v28 = v39;
  else
    v28 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v29 = v40;
  else
    v29 = (std::string::size_type)v39[1];
  v30 = std::string::append(&v57, (const std::string::value_type *)v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = std::string::append(&v58, ", lr-coef ");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v38 & 0x80u) == 0)
    v34 = __p;
  else
    v34 = (void **)__p[0];
  if ((v38 & 0x80u) == 0)
    v35 = v38;
  else
    v35 = (std::string::size_type)__p[1];
  v36 = std::string::append(&v59, (const std::string::value_type *)v34, v35);
  *a2 = *v36;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if ((char)v38 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if ((char)v44 < 0)
    operator delete(v43[0]);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if ((char)v46 < 0)
    operator delete(v45[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if ((char)v48 < 0)
    operator delete(v47[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
}

void sub_1ADAA4520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a66;
  char a71;
  void *a72;
  char a73;
  uint64_t v73;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v73 - 57) < 0)
    operator delete(*(void **)(v73 - 80));
  if (*(char *)(v73 - 89) < 0)
    operator delete(*(void **)(v73 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v73 - 121) < 0)
    operator delete(*(void **)(v73 - 144));
  if (*(char *)(v73 - 153) < 0)
    operator delete(*(void **)(v73 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v73 - 185) < 0)
    operator delete(*(void **)(v73 - 208));
  if (*(char *)(v73 - 217) < 0)
    operator delete(*(void **)(v73 - 240));
  if (a33 < 0)
    operator delete(a28);
  if (a73 < 0)
    operator delete(a72);
  if (a71 < 0)
    operator delete(a66);
  if (a39 < 0)
    operator delete(a34);
  if (a64 < 0)
    operator delete(a59);
  if (a57 < 0)
    operator delete(a52);
  if (a45 < 0)
    operator delete(a40);
  if (a51 < 0)
    operator delete(a46);
  _Unwind_Resume(a1);
}

void sub_1ADAA467C()
{
  JUMPOUT(0x1ADAA45F4);
}

void sub_1ADAA4684()
{
  JUMPOUT(0x1ADAA4604);
}

void sub_1ADAA468C()
{
  JUMPOUT(0x1ADAA4614);
}

void sub_1ADAA4694()
{
  JUMPOUT(0x1ADAA4624);
}

void sub_1ADAA469C()
{
  JUMPOUT(0x1ADAA4634);
}

void sub_1ADAA46A4()
{
  JUMPOUT(0x1ADAA4644);
}

void sub_1ADAA46AC()
{
  JUMPOUT(0x1ADAA4654);
}

void sub_1ADAA46B4()
{
  JUMPOUT(0x1ADAA4664);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFncDirect(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  double v22;
  int v23;
  int i;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  int v43;
  int j;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v62[5];
  _QWORD v63[6];
  void *v64;
  _QWORD v65[4];
  void *v66;
  _QWORD v67[4];

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  if (*(int *)(a1 + 128) <= 0)
    v7 = 0.0;
  else
    v7 = 1.0;
  v60 = a2;
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 384) + 48 * a4), *(unsigned int *)(a2 + 20), (*(_DWORD *)(a1 + 108) * *(_DWORD *)(a1 + 120)), 3, 0);
  if (*(int *)(a1 + 144) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(a1 + 128);
      v10 = *(_DWORD *)(a1 + 120);
      if (v9 >= 1)
      {
        v12 = *(_DWORD *)(a1 + 104);
        v11 = *(_DWORD *)(a1 + 108);
        v13 = v11 * v8 * v10;
        v14 = *(_QWORD *)(a3 + 8) + 4 * v13;
        v15 = *(_DWORD *)(a3 + 28) - v13;
        v16 = *(_QWORD *)(a3 + 32);
        *(_QWORD *)((char *)&v67[1] + 4) = *(_QWORD *)(a3 + 20);
        LODWORD(v67[1]) = v11;
        HIDWORD(v67[2]) = v15;
        v67[3] = v16;
        v66 = &unk_1E5D29D40;
        v67[0] = v14;
        v17 = v12 * *(_DWORD *)(a1 + 140);
        v18 = v12 * v9;
        v19 = *(_QWORD *)(v60 + 8) + 4 * v17;
        v20 = *(_DWORD *)(v60 + 28) - v17;
        v21 = *(_QWORD *)(v60 + 32);
        LODWORD(v65[1]) = v18;
        *(_QWORD *)((char *)&v65[1] + 4) = *(_QWORD *)(v60 + 20);
        HIDWORD(v65[2]) = v20;
        v65[3] = v21;
        v64 = &unk_1E5D29D40;
        v65[0] = v19;
        kaldi::QuantizedMatrixBase<signed char>::Range(*(_QWORD *)(a1 + 152), *(_DWORD *)(a1 + 124) * v12, v18, v11 * v8, v11, (uint64_t)v63);
        LODWORD(v22) = 1.0;
        kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v66, (uint64_t)&v64, 111, (kaldi::quasar::Vocab *)v63, 111, v22, 0.0);
        v23 = *(_DWORD *)(a1 + 120);
        if (v23 >= 2)
        {
          for (i = 1; i < v23; ++i)
          {
            v25 = *(_DWORD *)(a1 + 108) * (i + v8 * v23);
            v26 = *(_QWORD *)(a3 + 8) + 4 * v25;
            v27 = *(_DWORD *)(a3 + 28) - v25;
            v28 = *(_QWORD *)(a3 + 32);
            LODWORD(v62[2]) = *(_DWORD *)(a1 + 108);
            *(_QWORD *)((char *)&v62[2] + 4) = *(_QWORD *)(a3 + 20);
            HIDWORD(v62[3]) = v27;
            v62[4] = v28;
            v62[0] = &unk_1E5D29D40;
            v62[1] = v26;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v62, (uint64_t)&v66, 111);
            v62[0] = &unk_1E5D29D40;
            memset(&v62[1], 0, 32);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v62);
            v23 = *(_DWORD *)(a1 + 120);
          }
        }
        kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)v63);
        v64 = &unk_1E5D29D40;
        memset(v65, 0, sizeof(v65));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v64);
        v66 = &unk_1E5D29D40;
        memset(v67, 0, sizeof(v67));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
        v10 = *(_DWORD *)(a1 + 120);
      }
      if (v10 >= 1)
      {
        v29 = 0;
        do
        {
          v30 = *(_QWORD *)(a1 + 384) + 48 * a4;
          v31 = *(_DWORD *)(a1 + 108);
          v32 = *(_DWORD *)(v30 + 28) - v31 * v29;
          v33 = *(_QWORD *)(v30 + 32);
          v67[0] = *(_QWORD *)(v30 + 8) + 4 * v31 * v29;
          LODWORD(v67[1]) = v31;
          *(_QWORD *)((char *)&v67[1] + 4) = *(_QWORD *)(v30 + 20);
          HIDWORD(v67[2]) = v32;
          v67[3] = v33;
          v66 = &unk_1E5D29D40;
          v34 = *(_QWORD *)(a1 + 160);
          v63[2] = 0;
          v35 = *(_QWORD *)(v34 + 8) + 4 * v31 * v8;
          v63[0] = &unk_1E5D29D70;
          v63[1] = v35;
          LODWORD(v63[2]) = v31;
          v63[3] = *(_QWORD *)(v34 + 24);
          kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v66, (uint64_t)v63, 1.0, v7);
          v37 = *(_DWORD *)(a1 + 104);
          v36 = *(_DWORD *)(a1 + 108);
          v38 = (*(_DWORD *)(a1 + 116) * v8 + *(_DWORD *)(a1 + 112) * v29) * v37;
          v39 = *(_DWORD *)(a1 + 124) * v37;
          v40 = *(_QWORD *)(v60 + 8) + 4 * v38;
          HIDWORD(v65[2]) = *(_DWORD *)(v60 + 28) - v38;
          v41 = *(_QWORD *)(v60 + 32);
          LODWORD(v65[1]) = v39;
          *(_QWORD *)((char *)&v65[1] + 4) = *(_QWORD *)(v60 + 20);
          v65[3] = v41;
          v64 = &unk_1E5D29D40;
          v65[0] = v40;
          kaldi::QuantizedMatrixBase<signed char>::Range(*(_QWORD *)(a1 + 152), 0, v39, v36 * v8, v36, (uint64_t)v63);
          LODWORD(v42) = 1.0;
          kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v66, (uint64_t)&v64, 111, (kaldi::quasar::Vocab *)v63, 111, v42, 1.0);
          kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)v63);
          v64 = &unk_1E5D29D40;
          memset(v65, 0, sizeof(v65));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v64);
          v66 = &unk_1E5D29D40;
          memset(v67, 0, sizeof(v67));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
          ++v29;
        }
        while (v29 < *(_DWORD *)(a1 + 120));
      }
      v43 = *(_DWORD *)(a1 + 148);
      if (v43 >= 1)
      {
        for (j = 0; j < v43; ++j)
        {
          v45 = *(_DWORD *)(a1 + 108);
          v46 = v45 * (j + v43 * v8);
          v47 = *(_QWORD *)(a3 + 8) + 4 * v46;
          v48 = *(_DWORD *)(a3 + 28) - v46;
          v49 = *(_QWORD *)(a3 + 32);
          LODWORD(v63[2]) = v45;
          *(_QWORD *)((char *)&v63[2] + 4) = *(_QWORD *)(a3 + 20);
          HIDWORD(v63[3]) = v48;
          v63[4] = v49;
          v63[0] = &unk_1E5D29D40;
          v63[1] = v47;
          v50 = *(_QWORD *)(a1 + 384) + 48 * a4;
          LODWORD(v47) = v45 * j * *(_DWORD *)(a1 + 136);
          v51 = *(_QWORD *)(v50 + 8) + 4 * (int)v47;
          LODWORD(v47) = *(_DWORD *)(v50 + 28) - v47;
          v52 = *(_QWORD *)(v50 + 32);
          v67[0] = v51;
          LODWORD(v67[1]) = v45;
          *(_QWORD *)((char *)&v67[1] + 4) = *(_QWORD *)(v50 + 20);
          HIDWORD(v67[2]) = v47;
          v67[3] = v52;
          v66 = &unk_1E5D29D40;
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v63, (uint64_t)&v66, 111);
          v66 = &unk_1E5D29D40;
          memset(v67, 0, sizeof(v67));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
          if (*(int *)(a1 + 132) >= 2)
          {
            v53 = 1;
            do
            {
              v54 = *(_QWORD *)(a1 + 384) + 48 * a4;
              v55 = *(_DWORD *)(a1 + 108);
              v56 = (v53 + j * *(_DWORD *)(a1 + 136)) * v55;
              v57 = *(_QWORD *)(v54 + 8) + 4 * v56;
              v58 = *(_DWORD *)(v54 + 28) - v56;
              v59 = *(_QWORD *)(v54 + 32);
              v67[0] = v57;
              LODWORD(v67[1]) = v55;
              *(_QWORD *)((char *)&v67[1] + 4) = *(_QWORD *)(v54 + 20);
              HIDWORD(v67[2]) = v58;
              v67[3] = v59;
              v66 = &unk_1E5D29D40;
              kaldi::CuMatrixBase<float>::Max((uint64_t)v63, (uint64_t)&v66);
              v66 = &unk_1E5D29D40;
              memset(v67, 0, sizeof(v67));
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
              ++v53;
            }
            while (v53 < *(_DWORD *)(a1 + 132));
          }
          v63[0] = &unk_1E5D29D40;
          memset(&v63[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v63);
          v43 = *(_DWORD *)(a1 + 148);
        }
      }
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 144));
  }
}

void sub_1ADAA4C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _OWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;

  a28 = v29 + 16;
  *a14 = 0u;
  a14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a28);
  *(_QWORD *)(v30 - 144) = v29 + 16;
  *v28 = 0u;
  v28[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v30 - 144));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Backpropagation of CNN ConvolutionalMaxPoolingComponent is not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t v15[6];
  int32x2_t v16[6];

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix(v16, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v15, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, _QWORD))(*(_QWORD *)v8 + 112))(v8, a2, v16, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, uint64_t, int32x2_t *, _QWORD))(*(_QWORD *)v8 + 128))(v8, a2, v16, a3, v15, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  LODWORD(a2) = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1);
  LODWORD(a3) = a2 * a3;
  v13 = 0;
  v14 = 0;
  v12 = (char *)*a4;
  LODWORD(v13) = a3;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v12, **(_QWORD **)(v8 + 168));
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16);
  v13 = 0;
  v14 = 0;
  v12 = (char *)*a4 + 4 * (int)a3;
  LODWORD(v13) = v10;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(const void ****)(v8 + 192), (uint64_t)&v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v15);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v16);
}

void sub_1ADAA4F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 276) = a3;
  *(_DWORD *)(result + 272) = a2;
  *(_BYTE *)(result + 480) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  float v4;
  int v6;
  uint64_t v7;
  uint64_t v9;

  v4 = a3;
  v6 = *(_DWORD *)(a1 + 272);
  if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * a2), *(_QWORD *)(a1 + 216) + 48 * a2, a3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * a2), *(_QWORD *)(a1 + 240) + 32 * a2, v4);
    }
  }
  else if (v6 == 2)
  {
    if (a3 > 0.0)
    {
      v9 = a2;
      if (*(_BYTE *)(a1 + 84))
        v4 = (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * a2) * a3;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * a2), (int *)(*(_QWORD *)(a1 + 216) + 48 * a2), v4);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v9), (_QWORD *)(*(_QWORD *)(a1 + 240) + 32 * v9), v4);
    }
  }
  else if (v6 == 1 && a3 > 0.0)
  {
    v7 = a2;
    if (*(_BYTE *)(a1 + 84))
      v4 = (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * a2) * a3;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * a2), v4);
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v7), v4);
  }
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v22[34];

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16);
  v7 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  result = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152));
  *a3 = v6 + result * v7;
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 176) - v9;
  if (v10 && (v11 = *(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) != 0)
  {
    v12 = v10 >> 3;
    v13 = v11 >> 3;
    v14 = *(_DWORD *)(a1 + 80);
    if (v14 == 1)
      v14 = 0;
    v15 = v14;
    v16 = v13 - 1;
    if (v12 - 1 != v14 || v16 != v14)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"  ", 2);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
    v18 = kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v9 + 8 * v14));
    result = kaldi::CuVectorBase<float>::CountZeros(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v15));
    v19 = result + v18;
  }
  else
  {
    v19 = 0;
  }
  *a2 = v19;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t i;
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1)
    v3 = (v2 + 1);
  else
    v3 = 1;
  if (!*(_BYTE *)(a1 + 480))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 408), (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 360), (int)v3);
    std::vector<BOOL>::resize(a1 + 456, (int)v3, 0);
    v4 = *(_DWORD *)(a1 + 272);
    v5 = (_QWORD *)(a1 + 168);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 168, (int)v3);
    v6 = (_QWORD *)(a1 + 192);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 192, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 216), (int)v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 240), (int)v3);
    if ((int)v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        v8 = (int32x2_t *)operator new();
        v9 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
        v10 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152));
        kaldi::CuMatrix<float>::CuMatrix(v8, v9, v10, 0, 0, 0);
        v11 = *(_QWORD *)(*v5 + 8 * i);
        *(_QWORD *)(*v5 + 8 * i) = v8;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
        v12 = (_QWORD *)operator new();
        v13 = *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16);
        *v12 = &unk_1E5D341C8;
        v12[1] = 0;
        v12[2] = 0;
        v12[3] = 0;
        kaldi::CuVector<float>::Resize((uint64_t)v12, v13, 0);
        v14 = *(_QWORD *)(*v6 + 8 * i);
        *(_QWORD *)(*v6 + 8 * i) = v12;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        if ((v4 & 0xFFFFFFFE) == 2)
        {
          v15 = (int32x2_t *)(*(_QWORD *)(a1 + 216) + 48 * i);
          v16 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
          v17 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152));
          kaldi::CuMatrix<float>::Resize(v15, v16, v17, 1, 0);
          v18 = *(_QWORD *)(a1 + 240) + 32 * i;
          v19 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
          kaldi::CuVector<float>::Resize(v18, v19, 1);
          if (*(_DWORD *)(a1 + 272) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 216) + 48 * i, 1.0);
            kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 240) + 32 * i, 1.0);
          }
        }
      }
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 288), (int)v3);
    *(_BYTE *)(a1 + 480) = 1;
  }
}

void sub_1ADAA54B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent(v2, a1);
  return v2;
}

void sub_1ADAA5570(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>(v2, a1);
  return v2;
}

void sub_1ADAA55E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(a1 - 96);
}

double kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1E5D31700;
  *(_QWORD *)(a1 + 88) = &unk_1E5D31838;
  *(_QWORD *)(a1 + 96) = &unk_1E5D31860;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 264) = _D1;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[35];

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_QWORD *)(a1 + 88) = &unk_1E5D31838;
  *(_QWORD *)(a1 + 96) = &unk_1E5D31860;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1E5D31700;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 4));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 5);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 2);
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  v6 = *(int **)(a2 + 152);
  if (v6)
  {
    v7 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v7, v6);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v7);
  }
  v8 = *(_QWORD **)(a2 + 160);
  if (v8)
  {
    kaldi::NewCuSubOrVec<float>(v8, *(unsigned __int8 *)(a1 + 16), v29);
    v9 = v29[0];
    v29[0] = 0;
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v11 = v29[0];
      v29[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * v14);
      if (v15)
      {
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16), v29);
        v16 = *(_QWORD *)(a1 + 168);
        v17 = v29[0];
        v29[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v29[0];
        v29[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v13 = *(_QWORD *)(a1 + 168);
        v12 = *(_QWORD *)(a1 + 176);
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  v21 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  if (v20 != v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD **)(*(_QWORD *)(a2 + 192) + 8 * v22);
      if (v23)
      {
        kaldi::NewCuSubOrVec<float>(v23, *(unsigned __int8 *)(a1 + 16), v29);
        v24 = *(_QWORD *)(a1 + 192);
        v25 = v29[0];
        v29[0] = 0;
        v26 = *(_QWORD *)(v24 + 8 * v22);
        *(_QWORD *)(v24 + 8 * v22) = v25;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v27 = v29[0];
        v29[0] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v21 = *(_QWORD *)(a1 + 192);
        v20 = *(_QWORD *)(a1 + 200);
      }
      ++v22;
    }
    while (v22 < (v20 - v21) >> 3);
  }
  if (*(_QWORD *)(a2 + 496) != *(_QWORD *)(a2 + 488))
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
  return a1;
}

void sub_1ADAA5AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, quasar::Bitmap *a14, quasar::Bitmap *a15, _QWORD *a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  void **v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  v19 = (void *)*((_QWORD *)v16 + 57);
  if (v19)
    operator delete(v19);
  a16 = (_QWORD *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v20 = *a12;
  if (*a12)
  {
    *((_QWORD *)v16 + 40) = v20;
    operator delete(v20);
  }
  v21 = *a13;
  if (*a13)
  {
    *((_QWORD *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v22 = *((_QWORD *)v16 + 20);
  *((_QWORD *)v16 + 20) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v18, 0);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(_QWORD *a1, uint64_t *a2)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs((uint64_t)a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(a1[21] + 8 * ((((a1[22] - a1[21]) << 29) - 0x100000000) >> 32)));
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(a1[24] + 8 * ((((a1[25] - a1[24]) << 29) - 0x100000000) >> 32)));
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)(a1 + 88) = &unk_1E5D31838;
  v2 = (quasar::Bitmap *)(a1 + 88);
  *(_QWORD *)a1 = &unk_1E5D31700;
  *(_QWORD *)(a1 + 96) = &unk_1E5D31860;
  v3 = (quasar::Bitmap *)(a1 + 96);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 488));
  v4 = *(void **)(a1 + 456);
  if (v4)
    operator delete(v4);
  v8 = (void **)(a1 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(_QWORD *)(a1 + 320) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(_QWORD *)(a1 + 296) = v6;
    operator delete(v6);
  }
  v8 = (void **)(a1 + 240);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 216);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 192);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 168);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v7 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), 0);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1 - 88);
  JUMPOUT(0x1AF44D190);
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent(v2, a1);
  return v2;
}

void sub_1ADAA5EB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int *v6;
  int *v7;
  int *v8;
  uint64_t *v9;
  int *v10;
  int *v11;
  uint64_t v13;
  BOOL v17;
  int *v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  float *v23;
  BOOL v25;
  __int128 *v26;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  _BOOL4 v41;
  BOOL v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int i;
  uint64_t j;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  __int128 *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  int *v73;
  float *v74;
  int *v75;
  float *v76;
  int *v77;
  float *v78;
  int *v79;
  float *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[2];
  int v84;
  _BYTE v85[16];
  uint64_t v86;
  void *__p;
  void *v88;
  void **v89[34];
  __int128 v90;
  uint64_t v91;
  int v92;
  int v93;
  float v94;
  int v95;

  v94 = 2.0;
  v95 = -1073741824;
  v93 = 1036831949;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  v6 = (int *)(a1 + 116);
  *(_QWORD *)(a1 + 132) = 0x100000001;
  v7 = (int *)(a1 + 132);
  v8 = (int *)(a1 + 136);
  v92 = -1;
  v90 = 0uLL;
  v91 = 0;
  v9 = a2 + 4;
  v74 = (float *)(a1 + 280);
  v75 = (int *)(a1 + 128);
  v78 = (float *)(a1 + 264);
  v79 = (int *)(a1 + 124);
  v73 = (int *)(a1 + 120);
  v76 = (float *)(a1 + 268);
  v77 = (int *)(a1 + 112);
  v10 = (int *)(a1 + 108);
  v11 = (int *)(a1 + 104);
  while ((*((_BYTE *)v9 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v90);
    if ((SHIBYTE(v91) & 0x80000000) == 0)
    {
      switch(HIBYTE(v91))
      {
        case 0xA:
          if ((_QWORD)v90 != 0x61654D736169423CLL || WORD4(v90) != 15982)
            goto LABEL_107;
          goto LABEL_61;
        case 0xB:
          if ((_QWORD)v90 == 0x6E6152736169423CLL && *(_QWORD *)((char *)&v90 + 3) == 0x3E65676E61527361)
            goto LABEL_109;
          if (HIBYTE(v91) == 10)
            goto LABEL_108;
          if (HIBYTE(v91) != 11)
            goto LABEL_128;
LABEL_96:
          v31 = (_QWORD)v90 == 0x745368637461503CLL && *(_QWORD *)((char *)&v90 + 3) == 0x3E70657453686374;
          v18 = v77;
          if (!v31)
            goto LABEL_107;
          goto LABEL_129;
        case 0xC:
          goto LABEL_102;
        case 0xD:
          if ((_QWORD)v90 == 0x74536D617261503CLL && *(_QWORD *)((char *)&v90 + 5) == 0x3E7665646474536DLL)
            goto LABEL_135;
LABEL_78:
          v28 = (_QWORD)v90 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v90 + 5) == 0x3E706574536E6F69;
          v18 = v6;
          if (v28)
            goto LABEL_129;
          if (HIBYTE(v91) == 10)
            goto LABEL_108;
          if (HIBYTE(v91) == 12)
            goto LABEL_102;
          if (HIBYTE(v91) != 13)
            goto LABEL_128;
          v29 = (_QWORD)v90 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v90 + 5) == 0x3E657A69536E6F69;
          v18 = v73;
          if (!v29)
            goto LABEL_128;
          goto LABEL_129;
        case 0xF:
          v30 = (_QWORD)v90 == 0x75746165466E493CLL && *(_QWORD *)((char *)&v90 + 7) == 0x3E7370614D657275;
          v18 = v11;
          if (!v30)
          {
            v26 = &v90;
            switch(HIBYTE(v91))
            {
              case 0xA:
                goto LABEL_124;
              case 0xB:
                goto LABEL_96;
              case 0xC:
                goto LABEL_102;
              case 0xD:
                goto LABEL_78;
              case 0xF:
                goto LABEL_138;
              default:
                goto LABEL_128;
            }
          }
          goto LABEL_129;
        case 0x10:
          v25 = (_QWORD)v90 == 0x7461654674754F3CLL && *((_QWORD *)&v90 + 1) == 0x3E7370614D657275;
          v18 = v10;
          if (!v25)
          {
            v26 = &v90;
            switch(HIBYTE(v91))
            {
              case 0xA:
                goto LABEL_124;
              case 0xB:
                goto LABEL_96;
              case 0xC:
                goto LABEL_102;
              case 0xD:
                goto LABEL_78;
              case 0xF:
LABEL_138:
                v42 = (_QWORD)v90 == 0x65726168536E493CLL && *(_QWORD *)((char *)&v90 + 7) == 0x3E73646E61426465;
                v18 = v75;
                if (!v42)
                  goto LABEL_107;
                goto LABEL_129;
              default:
                goto LABEL_128;
            }
          }
          goto LABEL_129;
        default:
          goto LABEL_128;
      }
    }
    v13 = *((_QWORD *)&v90 + 1);
    if (*((_QWORD *)&v90 + 1) == 10)
    {
      if (*(_QWORD *)v90 == 0x61654D736169423CLL && *(_WORD *)(v90 + 8) == 15982)
      {
LABEL_61:
        v23 = (float *)&v95;
        goto LABEL_136;
      }
      v13 = *((_QWORD *)&v90 + 1);
    }
    else if (*((_QWORD *)&v90 + 1) == 13
           && *(_QWORD *)v90 == 0x74536D617261503CLL
           && *(_QWORD *)(v90 + 5) == 0x3E7665646474536DLL)
    {
LABEL_135:
      v23 = (float *)&v93;
      goto LABEL_136;
    }
    if (v13 == 11)
    {
      if (*(_QWORD *)v90 == 0x6E6152736169423CLL && *(_QWORD *)(v90 + 3) == 0x3E65676E61527361)
      {
LABEL_109:
        v23 = &v94;
        goto LABEL_136;
      }
      v13 = *((_QWORD *)&v90 + 1);
    }
    if (v13 == 15)
    {
      v17 = *(_QWORD *)v90 == 0x75746165466E493CLL && *(_QWORD *)(v90 + 7) == 0x3E7370614D657275;
      v18 = v11;
      if (v17)
        goto LABEL_129;
      v13 = *((_QWORD *)&v90 + 1);
    }
    if (v13 == 16)
    {
      v19 = *(_QWORD *)v90 == 0x7461654674754F3CLL && *(_QWORD *)(v90 + 8) == 0x3E7370614D657275;
      v18 = v10;
      if (v19)
        goto LABEL_129;
      v13 = *((_QWORD *)&v90 + 1);
    }
    if (v13 == 11)
    {
      v20 = *(_QWORD *)v90 == 0x745368637461503CLL && *(_QWORD *)(v90 + 3) == 0x3E70657453686374;
      v18 = v77;
      if (v20)
        goto LABEL_129;
      v13 = *((_QWORD *)&v90 + 1);
    }
    if (v13 != 13)
      goto LABEL_110;
    v21 = *(_QWORD *)v90 == 0x6E6F69746365533CLL && *(_QWORD *)(v90 + 5) == 0x3E706574536E6F69;
    v18 = v6;
    if (v21)
      goto LABEL_129;
    v13 = *((_QWORD *)&v90 + 1);
    if (*((_QWORD *)&v90 + 1) != 13)
      goto LABEL_110;
    v22 = *(_QWORD *)v90 == 0x6E6F69746365533CLL && *(_QWORD *)(v90 + 5) == 0x3E657A69536E6F69;
    v18 = v73;
    if (v22)
      goto LABEL_129;
    if ((v91 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v91) == 10)
        goto LABEL_108;
      if (HIBYTE(v91) != 12)
        goto LABEL_128;
LABEL_102:
      v32 = (_QWORD)v90 == 0x537265746C69463CLL && DWORD2(v90) == 1046837865;
      v18 = v79;
      if (v32)
        goto LABEL_129;
      if ((v91 & 0x8000000000000000) == 0)
      {
LABEL_107:
        if (HIBYTE(v91) != 10)
          goto LABEL_128;
LABEL_108:
        v26 = &v90;
LABEL_124:
        v35 = *(_QWORD *)v26;
        v36 = *((unsigned __int16 *)v26 + 4);
        v37 = v35 == 0x7A69536C6F6F503CLL && v36 == 15973;
        v18 = v7;
        if (v37)
          goto LABEL_129;
        goto LABEL_128;
      }
    }
    else
    {
LABEL_110:
      if (v13 != 12)
        goto LABEL_116;
      v33 = *(_QWORD *)v90 == 0x537265746C69463CLL && *(_DWORD *)(v90 + 8) == 1046837865;
      v18 = v79;
      if (v33)
        goto LABEL_129;
    }
    v13 = *((_QWORD *)&v90 + 1);
LABEL_116:
    if (v13 == 15)
    {
      v34 = *(_QWORD *)v90 == 0x65726168536E493CLL && *(_QWORD *)(v90 + 7) == 0x3E73646E61426465;
      v18 = v75;
      if (v34)
        goto LABEL_129;
      v13 = *((_QWORD *)&v90 + 1);
    }
    if (v13 == 10)
    {
      v26 = (__int128 *)v90;
      goto LABEL_124;
    }
LABEL_128:
    v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v90, "<PoolStep>");
    v18 = v8;
    if (v38)
      goto LABEL_129;
    v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v90, "<LearnRateCoef>");
    v23 = v78;
    if (!v39)
    {
      v40 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v90, "<BiasLearnRateCoef>");
      v23 = v76;
      if (!v40)
      {
        v41 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v90, "<MaxNorm>");
        v23 = v74;
        if (!v41)
        {
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v90, "<RandomSeed>"))
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
            v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Unknown token ", 14);
            if (v91 >= 0)
              v69 = &v90;
            else
              v69 = (__int128 *)v90;
            if (v91 >= 0)
              v70 = HIBYTE(v91);
            else
              v70 = *((_QWORD *)&v90 + 1);
            v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
            v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)", a typo in config?", 19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" (ParamStddev|BiasMean|BiasRange|InFeatureMaps|OutFeatureMaps|PatchStep|SectionStep|SectionSize|FilterSize|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed)", 158);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
          }
          v18 = &v92;
LABEL_129:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v18);
          goto LABEL_137;
        }
      }
    }
LABEL_136:
    kaldi::ReadBasicType<float>(a2, 0, v23);
LABEL_137:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v43 = *(_DWORD *)(a1 + 8);
  v44 = *(_DWORD *)(a1 + 12);
  v46 = *(_DWORD *)(a1 + 104);
  v45 = *(_DWORD *)(a1 + 108);
  v47 = *(_DWORD *)(a1 + 132);
  v48 = v43 / v46 - *(_DWORD *)(a1 + 128);
  v49 = *(_DWORD *)(a1 + 120);
  v50 = *(_DWORD *)(a1 + 136);
  v51 = (v49 - v47) / v50 + 1;
  *(_DWORD *)(a1 + 148) = v51;
  v52 = v45 * v51;
  v53 = v44 / v52;
  *(_DWORD *)(a1 + 140) = v48;
  *(_DWORD *)(a1 + 144) = v44 / v52;
  if (v47 < 1 || v49 < v47)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: Invalid max pooling size", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
  }
  if (v50 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: Max pooling step must be >= 1", 63);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
  }
  if (v44 != v52 * v53)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: output dim mismatch", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
  }
  if (v43 != v43 / v46 * v46)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: input dim mismatch", 52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
  }
  if (*v79 + *v77 * (v49 - 1) + *v6 * (v53 - 1) > v48)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: too few input bands to compute the output", 75);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
  }
  if (v92 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v92);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v85, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)v83, ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104)), (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108)), 0, 0);
  for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v83); ++i)
  {
    for (j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v83); ++j)
    {
      v56 = *(float *)&v93;
      kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v85, 0);
      *(float *)(v83[0] + 4 * i * v84 + 4 * j) = v56 * v57;
    }
  }
  if (*(_QWORD *)(a1 + 152))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"pointer is thought to be un-initialized here", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
  }
  v58 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v58, (uint64_t)v83);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v58);
  v59 = (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108));
  v81 = 0;
  v82 = 0;
  v80 = 0;
  kaldi::Vector<float>::Resize((void **)&v80, v59, 0);
  if ((int)v81 >= 1)
  {
    v60 = 0;
    do
    {
      v61 = *(float *)&v95;
      v62 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
      v63 = v61 + (v62 + -0.5) * v94;
      v64 = (int)v81;
      v80[v60++] = v63;
    }
    while (v60 < v64);
  }
  if (*(_QWORD *)(a1 + 160))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"pointer is thought to be un-initialized here", 44);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
  }
  v65 = (_QWORD *)operator new();
  v66 = v81;
  v65[2] = 0;
  v65[3] = 0;
  *v65 = &unk_1E5D341C8;
  v65[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v65, v66, 0);
  v67 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v65;
  if (v67)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
    v65 = *(_QWORD **)(a1 + 160);
  }
  kaldi::CuVectorBase<float>::CopyFromVec<float>(v65, (uint64_t)&v80);
  kaldi::Vector<float>::Destroy((uint64_t)&v80);
  kaldi::Matrix<float>::~Matrix((uint64_t)v83);
  if (__p)
  {
    v88 = __p;
    operator delete(__p);
  }
  v89[0] = (void **)&v86;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v89);
  if (SHIBYTE(v91) < 0)
    operator delete((void *)v90);
}

void sub_1ADAA6AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 121) < 0)
    operator delete(*(void **)(v24 - 144));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  float *v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  _BOOL4 v39;
  int v40;
  int v41;
  int v42;
  int v43;
  kaldi::quasar::Vocab **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v52;
  __int128 *v53;
  uint64_t v54;
  void *__p[2];
  uint64_t v57;
  __int128 v58;
  uint64_t v59;

  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  v7 = a1 + 116;
  *(_QWORD *)(a1 + 132) = 0x100000001;
  v8 = a1 + 132;
  while (kaldi::Peek(a2, a3) == 60)
  {
    v58 = 0uLL;
    v59 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v58);
    if ((SHIBYTE(v59) & 0x80000000) == 0)
    {
      v9 = (uint64_t *)&v58;
      switch(HIBYTE(v59))
      {
        case 0xA:
          goto LABEL_87;
        case 0xB:
LABEL_4:
          v10 = (_QWORD)v58 == 0x745368637461503CLL && *(_QWORD *)((char *)&v58 + 3) == 0x3E70657453686374;
          v11 = a1 + 112;
          if (!v10)
            goto LABEL_86;
          goto LABEL_136;
        case 0xC:
          goto LABEL_81;
        case 0xD:
LABEL_68:
          v24 = (_QWORD)v58 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v58 + 5) == 0x3E706574536E6F69;
          v11 = v7;
          if (v24)
            goto LABEL_136;
          if (HIBYTE(v59) == 10)
            goto LABEL_87;
          if (HIBYTE(v59) == 12)
            goto LABEL_81;
          if (HIBYTE(v59) != 13)
            goto LABEL_132;
          v25 = (_QWORD)v58 == 0x6E6F69746365533CLL && *(_QWORD *)((char *)&v58 + 5) == 0x3E657A69536E6F69;
          v11 = a1 + 120;
          if (!v25)
            goto LABEL_132;
          goto LABEL_136;
        case 0xF:
          v19 = (_QWORD)v58 == 0x75746165466E493CLL && *(_QWORD *)((char *)&v58 + 7) == 0x3E7370614D657275;
          v11 = a1 + 104;
          if (v19)
            goto LABEL_136;
LABEL_52:
          v20 = (_QWORD)v58 == 0x65726168536E493CLL && *(_QWORD *)((char *)&v58 + 7) == 0x3E73646E61426465;
          v11 = a1 + 128;
          if (v20)
            goto LABEL_136;
          if (HIBYTE(v59) != 15)
            goto LABEL_86;
          v21 = (_QWORD)v58 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v58 + 7) == 0x3E66656F43657461;
          v22 = (float *)(a1 + 264);
          if (!v21)
            goto LABEL_132;
          goto LABEL_138;
        case 0x10:
          v23 = (_QWORD)v58 == 0x7461654674754F3CLL && *((_QWORD *)&v58 + 1) == 0x3E7370614D657275;
          v11 = a1 + 108;
          if (!v23)
          {
            switch(HIBYTE(v59))
            {
              case 0xA:
                goto LABEL_87;
              case 0xB:
                goto LABEL_4;
              case 0xC:
                goto LABEL_81;
              case 0xD:
                goto LABEL_68;
              case 0xF:
                goto LABEL_52;
              default:
                goto LABEL_132;
            }
          }
          goto LABEL_136;
        case 0x13:
          goto LABEL_125;
        default:
          goto LABEL_132;
      }
    }
    v12 = *((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1) == 15)
    {
      v13 = *(_QWORD *)v58 == 0x75746165466E493CLL && *(_QWORD *)(v58 + 7) == 0x3E7370614D657275;
      v11 = a1 + 104;
      if (v13)
        goto LABEL_136;
    }
    if (*((_QWORD *)&v58 + 1) == 16)
    {
      v14 = *(_QWORD *)v58 == 0x7461654674754F3CLL && *(_QWORD *)(v58 + 8) == 0x3E7370614D657275;
      v11 = a1 + 108;
      if (v14)
        goto LABEL_136;
      v12 = *((_QWORD *)&v58 + 1);
    }
    if (v12 == 11)
    {
      v15 = *(_QWORD *)v58 == 0x745368637461503CLL && *(_QWORD *)(v58 + 3) == 0x3E70657453686374;
      v11 = a1 + 112;
      if (v15)
        goto LABEL_136;
      v12 = *((_QWORD *)&v58 + 1);
    }
    if (v12 != 13)
      goto LABEL_41;
    v16 = *(_QWORD *)v58 == 0x6E6F69746365533CLL && *(_QWORD *)(v58 + 5) == 0x3E706574536E6F69;
    v11 = v7;
    if (v16)
      goto LABEL_136;
    v12 = *((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1) != 13)
      goto LABEL_41;
    v17 = *(_QWORD *)v58 == 0x6E6F69746365533CLL && *(_QWORD *)(v58 + 5) == 0x3E657A69536E6F69;
    v11 = a1 + 120;
    if (v17)
      goto LABEL_136;
    if ((v59 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v59) == 10)
        goto LABEL_87;
      if (HIBYTE(v59) != 12)
        goto LABEL_132;
LABEL_81:
      v26 = (_QWORD)v58 == 0x537265746C69463CLL && DWORD2(v58) == 1046837865;
      v11 = a1 + 124;
      if (v26)
        goto LABEL_136;
      if ((v59 & 0x8000000000000000) == 0)
      {
LABEL_86:
        if (HIBYTE(v59) != 10)
          goto LABEL_132;
LABEL_87:
        v27 = (_QWORD)v58 == 0x7A69536C6F6F503CLL && WORD4(v58) == 15973;
        v11 = v8;
        if (v27)
          goto LABEL_136;
        if ((v59 & 0x8000000000000000) == 0)
        {
          if (HIBYTE(v59) != 10)
            goto LABEL_132;
          v28 = (_QWORD)v58 == 0x6574536C6F6F503CLL && WORD4(v58) == 15984;
          v11 = v7 + 20;
          if (!v28)
            goto LABEL_132;
          goto LABEL_136;
        }
LABEL_111:
        v12 = *((_QWORD *)&v58 + 1);
        if (*((_QWORD *)&v58 + 1) != 10)
          goto LABEL_117;
        v31 = *(_QWORD *)v58 == 0x6574536C6F6F503CLL && *(_WORD *)(v58 + 8) == 15984;
        v11 = v7 + 20;
        if (!v31)
        {
          if (v59 < 0)
          {
LABEL_117:
            if (v12 == 15)
            {
              v32 = *(_QWORD *)v58 == 0x61526E7261654C3CLL && *(_QWORD *)(v58 + 7) == 0x3E66656F43657461;
              v22 = (float *)(a1 + 264);
              if (!v32)
              {
                v12 = *((_QWORD *)&v58 + 1);
                goto LABEL_123;
              }
LABEL_138:
              kaldi::ReadBasicType<float>(a2, a3, v22);
              goto LABEL_139;
            }
LABEL_123:
            if (v12 == 19)
            {
              v9 = (uint64_t *)v58;
LABEL_125:
              v33 = *v9;
              v34 = v9[1];
              v35 = *(uint64_t *)((char *)v9 + 11);
              v36 = v33 == 0x61654C736169423CLL && v34 == 0x6F43657461526E72;
              v37 = v36 && v35 == 0x3E66656F43657461;
              v22 = (float *)(a1 + 268);
              if (v37)
                goto LABEL_138;
            }
          }
LABEL_132:
          v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v58, "<MaxNorm>");
          v22 = (float *)(a1 + 280);
          if (!v38)
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v58, "<GradientNormType>"))
            {
              __p[0] = 0;
              __p[1] = 0;
              v57 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)__p);
              *(_DWORD *)(a1 + 272) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
              if (SHIBYTE(v57) < 0)
                operator delete(__p[0]);
              goto LABEL_139;
            }
            v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v58, "<MaxGrad>");
            v22 = (float *)(a1 + 276);
            if (!v39)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
              if (v59 >= 0)
                v53 = &v58;
              else
                v53 = (__int128 *)v58;
              if (v59 >= 0)
                v54 = HIBYTE(v59);
              else
                v54 = *((_QWORD *)&v58 + 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
            }
          }
          goto LABEL_138;
        }
        goto LABEL_136;
      }
    }
    else
    {
LABEL_41:
      if (v12 != 12)
        goto LABEL_100;
      v18 = *(_QWORD *)v58 == 0x537265746C69463CLL && *(_DWORD *)(v58 + 8) == 1046837865;
      v11 = a1 + 124;
      if (v18)
        goto LABEL_136;
    }
    v12 = *((_QWORD *)&v58 + 1);
LABEL_100:
    if (v12 == 15)
    {
      v29 = *(_QWORD *)v58 == 0x65726168536E493CLL && *(_QWORD *)(v58 + 7) == 0x3E73646E61426465;
      v11 = a1 + 128;
      if (v29)
        goto LABEL_136;
      v12 = *((_QWORD *)&v58 + 1);
    }
    if (v12 != 10)
      goto LABEL_117;
    v30 = *(_QWORD *)v58 == 0x7A69536C6F6F503CLL && *(_WORD *)(v58 + 8) == 15973;
    v11 = v8;
    if (!v30)
      goto LABEL_111;
LABEL_136:
    kaldi::ReadBasicType<int>(a2, a3, v11);
LABEL_139:
    if (SHIBYTE(v59) < 0)
      operator delete((void *)v58);
  }
  v40 = *(_DWORD *)(a1 + 12);
  v41 = *(_DWORD *)(a1 + 108);
  v42 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 128);
  v43 = (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 132)) / *(_DWORD *)(a1 + 136) + 1;
  *(_DWORD *)(a1 + 148) = v43;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 140) = v42;
  *(_DWORD *)(a1 + 144) = v40 / (v41 * v43);
  LOBYTE(v58) = 0;
  kaldi::ReadBasicType<char>(a2, a3, &v58);
  v44 = (kaldi::quasar::Vocab **)(a1 + 152);
  if (*(_QWORD *)(a1 + 152)
    || (kaldi::ExpectToken(a2, a3, "<Filters>"),
        v45 = ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104)),
        v46 = (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108)),
        v47 = operator new(),
        kaldi::QuantizedMatrix<short>::QuantizedMatrix(v47, v45, v46),
        std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v47),
        kaldi::QuantizedMatrix<short>::Read(*(float **)(a1 + 152), a2, a3, a4),
        *(_QWORD *)(a1 + 160)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::ExpectToken(a2, a3, "<Bias>");
  v48 = (_QWORD *)operator new();
  v49 = *(unsigned int *)(a1 + 12);
  v48[2] = 0;
  v48[3] = 0;
  *v48 = &unk_1E5D341C8;
  v48[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v48, v49, 0);
  v50 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v48;
  if (v50)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
    v48 = *(_QWORD **)(a1 + 160);
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))*v48)(v48, a2, a3);
  kaldi::quasar::Vocab::VocabSize(*v44);
  return kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)*v44);
}

void sub_1ADAA74F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 89) < 0)
    operator delete(*(void **)(v22 - 112));
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<InFeatureMaps>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<OutFeatureMaps>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PatchStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<SectionStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<SectionSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FilterSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<InSharedBands>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolSize>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PoolStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 272), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1ADAA77B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  kaldi::WriteBasicType<char>(a2, a3);
  kaldi::WriteToken(a2, a3, "<Filters>");
  kaldi::QuantizedMatrix<short>::Write(*(int **)(a1 + 152), a2, a3, a4);
  kaldi::WriteToken(a2, a3, "<Bias>");
  kaldi::CuVectorBase<float>::Write(*(_QWORD *)(a1 + 160), a2, a3);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1)
{
  int v2;

  v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  return *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152)) * v2;
}

const void **kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  v6 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152)) * v5;
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v10, *(float **)(a1 + 152));
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_DWORD *)(v7 + 16);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2 + 4 * v6;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v7, (uint64_t)&v10);
}

void *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::SetParams(uint64_t a1, char **a2)
{
  int v4;
  int v5;
  unsigned int *v6;
  _DWORD *v7;
  int v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  v4 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152)) * v4;
  v6 = *(unsigned int **)(a1 + 152);
  v11 = 0;
  v12 = 0;
  v10 = *a2;
  LODWORD(v11) = v5;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v6, &v10);
  v7 = *(_DWORD **)(a1 + 160);
  v8 = v7[4];
  v11 = 0;
  v12 = 0;
  v10 = &(*a2)[4 * v5];
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v7, (uint64_t)&v10);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 312);
  v3 = *(_QWORD *)(a1 + 320) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1)
{
  float v2;

  v2 = kaldi::QuantizedMatrixBase<short>::Sum(*(int **)(a1 + 152));
  return v2 + kaldi::CuVectorBase<float>::Sum(*(_QWORD *)(a1 + 160));
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int32x2_t v4[6];

  v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152));
  kaldi::CuMatrix<float>::CuMatrix(v4, v2, v3, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

uint64_t sub_1ADAA7AC4()
{
  uint64_t v0;
  float v1;
  _QWORD v3[4];
  uint64_t v4;

  kaldi::CuVector<float>::CuVector(v3, *(_QWORD *)(v0 + 160));
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v3);
  kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(v0 + 160), (uint64_t)v3, v1, 1.0);
  v3[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v3);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v4);
}

void sub_1ADAA7B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  void *__p[2];
  unsigned __int8 v20;
  void *v21[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;

  std::string::basic_string[abi:ne180100]<0>(&v25, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ParamsString(a1);
  if ((v24 & 0x80u) == 0)
    v4 = v23;
  else
    v4 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v5 = v24;
  else
    v5 = (std::string::size_type)v23[1];
  v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v26, "\n  filters");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<short>(*(kaldi::quasar::Vocab **)(a1 + 152));
  if ((v22 & 0x80u) == 0)
    v10 = v21;
  else
    v10 = (void **)v21[0];
  if ((v22 & 0x80u) == 0)
    v11 = v22;
  else
    v11 = (std::string::size_type)v21[1];
  v12 = std::string::append(&v27, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v28, "\n  bias");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 160));
  if ((v20 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v17 = v20;
  else
    v17 = (std::string::size_type)__p[1];
  v18 = std::string::append(&v29, (const std::string::value_type *)v16, v17);
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if ((char)v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((char)v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1ADAA7D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v45 - 41) < 0)
    operator delete(*(void **)(v45 - 64));
  if (*(char *)(v45 - 73) < 0)
    operator delete(*(void **)(v45 - 96));
  if (a20 < 0)
    operator delete(a15);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ParamsString(uint64_t a1)
{
  _QWORD *v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 168))(a1, v4, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" , # of sections: ", 18);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", section size after pooling: ", 30);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v4[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v6);
}

void sub_1ADAA7EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  void **v34;
  std::string::size_type v35;
  std::string *v36;
  void *__p[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  void *v41[2];
  unsigned __int8 v42;
  void *v43[2];
  unsigned __int8 v44;
  void *v45[2];
  unsigned __int8 v46;
  void *v47[2];
  unsigned __int8 v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;

  std::string::basic_string[abi:ne180100]<0>(&v49, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ParamsString(a1);
  if ((v48 & 0x80u) == 0)
    v4 = v47;
  else
    v4 = (void **)v47[0];
  if ((v48 & 0x80u) == 0)
    v5 = v48;
  else
    v5 = (std::string::size_type)v47[1];
  v6 = std::string::append(&v49, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v50, "\n  filters_grad");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 168));
  if ((v46 & 0x80u) == 0)
    v10 = v45;
  else
    v10 = (void **)v45[0];
  if ((v46 & 0x80u) == 0)
    v11 = v46;
  else
    v11 = (std::string::size_type)v45[1];
  v12 = std::string::append(&v51, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v52, ", lr-coef ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v44 & 0x80u) == 0)
    v16 = v43;
  else
    v16 = (void **)v43[0];
  if ((v44 & 0x80u) == 0)
    v17 = v44;
  else
    v17 = (std::string::size_type)v43[1];
  v18 = std::string::append(&v53, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v54, ", max-norm ");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v42 & 0x80u) == 0)
    v22 = v41;
  else
    v22 = (void **)v41[0];
  if ((v42 & 0x80u) == 0)
    v23 = v42;
  else
    v23 = (std::string::size_type)v41[1];
  v24 = std::string::append(&v55, (const std::string::value_type *)v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v56, "\n  bias_grad");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 192));
  if ((v40 & 0x80u) == 0)
    v28 = v39;
  else
    v28 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v29 = v40;
  else
    v29 = (std::string::size_type)v39[1];
  v30 = std::string::append(&v57, (const std::string::value_type *)v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = std::string::append(&v58, ", lr-coef ");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v38 & 0x80u) == 0)
    v34 = __p;
  else
    v34 = (void **)__p[0];
  if ((v38 & 0x80u) == 0)
    v35 = v38;
  else
    v35 = (std::string::size_type)__p[1];
  v36 = std::string::append(&v59, (const std::string::value_type *)v34, v35);
  *a2 = *v36;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if ((char)v38 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if ((char)v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if ((char)v44 < 0)
    operator delete(v43[0]);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if ((char)v46 < 0)
    operator delete(v45[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if ((char)v48 < 0)
    operator delete(v47[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
}

void sub_1ADAA82D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a66;
  char a71;
  void *a72;
  char a73;
  uint64_t v73;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v73 - 57) < 0)
    operator delete(*(void **)(v73 - 80));
  if (*(char *)(v73 - 89) < 0)
    operator delete(*(void **)(v73 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v73 - 121) < 0)
    operator delete(*(void **)(v73 - 144));
  if (*(char *)(v73 - 153) < 0)
    operator delete(*(void **)(v73 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v73 - 185) < 0)
    operator delete(*(void **)(v73 - 208));
  if (*(char *)(v73 - 217) < 0)
    operator delete(*(void **)(v73 - 240));
  if (a33 < 0)
    operator delete(a28);
  if (a73 < 0)
    operator delete(a72);
  if (a71 < 0)
    operator delete(a66);
  if (a39 < 0)
    operator delete(a34);
  if (a64 < 0)
    operator delete(a59);
  if (a57 < 0)
    operator delete(a52);
  if (a45 < 0)
    operator delete(a40);
  if (a51 < 0)
    operator delete(a46);
  _Unwind_Resume(a1);
}

void sub_1ADAA8430()
{
  JUMPOUT(0x1ADAA83A8);
}

void sub_1ADAA8438()
{
  JUMPOUT(0x1ADAA83B8);
}

void sub_1ADAA8440()
{
  JUMPOUT(0x1ADAA83C8);
}

void sub_1ADAA8448()
{
  JUMPOUT(0x1ADAA83D8);
}

void sub_1ADAA8450()
{
  JUMPOUT(0x1ADAA83E8);
}

void sub_1ADAA8458()
{
  JUMPOUT(0x1ADAA83F8);
}

void sub_1ADAA8460()
{
  JUMPOUT(0x1ADAA8408);
}

void sub_1ADAA8468()
{
  JUMPOUT(0x1ADAA8418);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::PropagateFncDirect(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  double v22;
  int v23;
  int i;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  int v43;
  int j;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v62[5];
  _QWORD v63[6];
  void *v64;
  _QWORD v65[4];
  void *v66;
  _QWORD v67[4];

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  if (*(int *)(a1 + 128) <= 0)
    v7 = 0.0;
  else
    v7 = 1.0;
  v60 = a2;
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 384) + 48 * a4), *(unsigned int *)(a2 + 20), (*(_DWORD *)(a1 + 108) * *(_DWORD *)(a1 + 120)), 3, 0);
  if (*(int *)(a1 + 144) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(a1 + 128);
      v10 = *(_DWORD *)(a1 + 120);
      if (v9 >= 1)
      {
        v12 = *(_DWORD *)(a1 + 104);
        v11 = *(_DWORD *)(a1 + 108);
        v13 = v11 * v8 * v10;
        v14 = *(_QWORD *)(a3 + 8) + 4 * v13;
        v15 = *(_DWORD *)(a3 + 28) - v13;
        v16 = *(_QWORD *)(a3 + 32);
        *(_QWORD *)((char *)&v67[1] + 4) = *(_QWORD *)(a3 + 20);
        LODWORD(v67[1]) = v11;
        HIDWORD(v67[2]) = v15;
        v67[3] = v16;
        v66 = &unk_1E5D29D40;
        v67[0] = v14;
        v17 = v12 * *(_DWORD *)(a1 + 140);
        v18 = v12 * v9;
        v19 = *(_QWORD *)(v60 + 8) + 4 * v17;
        v20 = *(_DWORD *)(v60 + 28) - v17;
        v21 = *(_QWORD *)(v60 + 32);
        LODWORD(v65[1]) = v18;
        *(_QWORD *)((char *)&v65[1] + 4) = *(_QWORD *)(v60 + 20);
        HIDWORD(v65[2]) = v20;
        v65[3] = v21;
        v64 = &unk_1E5D29D40;
        v65[0] = v19;
        kaldi::QuantizedMatrixBase<short>::Range(*(_QWORD *)(a1 + 152), *(_DWORD *)(a1 + 124) * v12, v18, v11 * v8, v11, (uint64_t)v63);
        LODWORD(v22) = 1.0;
        kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v66, (uint64_t)&v64, 111, (kaldi::quasar::Vocab *)v63, 111, v22, 0.0);
        v23 = *(_DWORD *)(a1 + 120);
        if (v23 >= 2)
        {
          for (i = 1; i < v23; ++i)
          {
            v25 = *(_DWORD *)(a1 + 108) * (i + v8 * v23);
            v26 = *(_QWORD *)(a3 + 8) + 4 * v25;
            v27 = *(_DWORD *)(a3 + 28) - v25;
            v28 = *(_QWORD *)(a3 + 32);
            LODWORD(v62[2]) = *(_DWORD *)(a1 + 108);
            *(_QWORD *)((char *)&v62[2] + 4) = *(_QWORD *)(a3 + 20);
            HIDWORD(v62[3]) = v27;
            v62[4] = v28;
            v62[0] = &unk_1E5D29D40;
            v62[1] = v26;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v62, (uint64_t)&v66, 111);
            v62[0] = &unk_1E5D29D40;
            memset(&v62[1], 0, 32);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v62);
            v23 = *(_DWORD *)(a1 + 120);
          }
        }
        kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)v63);
        v64 = &unk_1E5D29D40;
        memset(v65, 0, sizeof(v65));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v64);
        v66 = &unk_1E5D29D40;
        memset(v67, 0, sizeof(v67));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
        v10 = *(_DWORD *)(a1 + 120);
      }
      if (v10 >= 1)
      {
        v29 = 0;
        do
        {
          v30 = *(_QWORD *)(a1 + 384) + 48 * a4;
          v31 = *(_DWORD *)(a1 + 108);
          v32 = *(_DWORD *)(v30 + 28) - v31 * v29;
          v33 = *(_QWORD *)(v30 + 32);
          v67[0] = *(_QWORD *)(v30 + 8) + 4 * v31 * v29;
          LODWORD(v67[1]) = v31;
          *(_QWORD *)((char *)&v67[1] + 4) = *(_QWORD *)(v30 + 20);
          HIDWORD(v67[2]) = v32;
          v67[3] = v33;
          v66 = &unk_1E5D29D40;
          v34 = *(_QWORD *)(a1 + 160);
          v63[2] = 0;
          v35 = *(_QWORD *)(v34 + 8) + 4 * v31 * v8;
          v63[0] = &unk_1E5D29D70;
          v63[1] = v35;
          LODWORD(v63[2]) = v31;
          v63[3] = *(_QWORD *)(v34 + 24);
          kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v66, (uint64_t)v63, 1.0, v7);
          v37 = *(_DWORD *)(a1 + 104);
          v36 = *(_DWORD *)(a1 + 108);
          v38 = (*(_DWORD *)(a1 + 116) * v8 + *(_DWORD *)(a1 + 112) * v29) * v37;
          v39 = *(_DWORD *)(a1 + 124) * v37;
          v40 = *(_QWORD *)(v60 + 8) + 4 * v38;
          HIDWORD(v65[2]) = *(_DWORD *)(v60 + 28) - v38;
          v41 = *(_QWORD *)(v60 + 32);
          LODWORD(v65[1]) = v39;
          *(_QWORD *)((char *)&v65[1] + 4) = *(_QWORD *)(v60 + 20);
          v65[3] = v41;
          v64 = &unk_1E5D29D40;
          v65[0] = v40;
          kaldi::QuantizedMatrixBase<short>::Range(*(_QWORD *)(a1 + 152), 0, v39, v36 * v8, v36, (uint64_t)v63);
          LODWORD(v42) = 1.0;
          kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v66, (uint64_t)&v64, 111, (kaldi::quasar::Vocab *)v63, 111, v42, 1.0);
          kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)v63);
          v64 = &unk_1E5D29D40;
          memset(v65, 0, sizeof(v65));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v64);
          v66 = &unk_1E5D29D40;
          memset(v67, 0, sizeof(v67));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
          ++v29;
        }
        while (v29 < *(_DWORD *)(a1 + 120));
      }
      v43 = *(_DWORD *)(a1 + 148);
      if (v43 >= 1)
      {
        for (j = 0; j < v43; ++j)
        {
          v45 = *(_DWORD *)(a1 + 108);
          v46 = v45 * (j + v43 * v8);
          v47 = *(_QWORD *)(a3 + 8) + 4 * v46;
          v48 = *(_DWORD *)(a3 + 28) - v46;
          v49 = *(_QWORD *)(a3 + 32);
          LODWORD(v63[2]) = v45;
          *(_QWORD *)((char *)&v63[2] + 4) = *(_QWORD *)(a3 + 20);
          HIDWORD(v63[3]) = v48;
          v63[4] = v49;
          v63[0] = &unk_1E5D29D40;
          v63[1] = v47;
          v50 = *(_QWORD *)(a1 + 384) + 48 * a4;
          LODWORD(v47) = v45 * j * *(_DWORD *)(a1 + 136);
          v51 = *(_QWORD *)(v50 + 8) + 4 * (int)v47;
          LODWORD(v47) = *(_DWORD *)(v50 + 28) - v47;
          v52 = *(_QWORD *)(v50 + 32);
          v67[0] = v51;
          LODWORD(v67[1]) = v45;
          *(_QWORD *)((char *)&v67[1] + 4) = *(_QWORD *)(v50 + 20);
          HIDWORD(v67[2]) = v47;
          v67[3] = v52;
          v66 = &unk_1E5D29D40;
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v63, (uint64_t)&v66, 111);
          v66 = &unk_1E5D29D40;
          memset(v67, 0, sizeof(v67));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
          if (*(int *)(a1 + 132) >= 2)
          {
            v53 = 1;
            do
            {
              v54 = *(_QWORD *)(a1 + 384) + 48 * a4;
              v55 = *(_DWORD *)(a1 + 108);
              v56 = (v53 + j * *(_DWORD *)(a1 + 136)) * v55;
              v57 = *(_QWORD *)(v54 + 8) + 4 * v56;
              v58 = *(_DWORD *)(v54 + 28) - v56;
              v59 = *(_QWORD *)(v54 + 32);
              v67[0] = v57;
              LODWORD(v67[1]) = v55;
              *(_QWORD *)((char *)&v67[1] + 4) = *(_QWORD *)(v54 + 20);
              HIDWORD(v67[2]) = v58;
              v67[3] = v59;
              v66 = &unk_1E5D29D40;
              kaldi::CuMatrixBase<float>::Max((uint64_t)v63, (uint64_t)&v66);
              v66 = &unk_1E5D29D40;
              memset(v67, 0, sizeof(v67));
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v66);
              ++v53;
            }
            while (v53 < *(_DWORD *)(a1 + 132));
          }
          v63[0] = &unk_1E5D29D40;
          memset(&v63[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v63);
          v43 = *(_DWORD *)(a1 + 148);
        }
      }
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 144));
  }
}

void sub_1ADAA89C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _OWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;

  a28 = v29 + 16;
  *a14 = 0u;
  a14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a28);
  *(_QWORD *)(v30 - 144) = v29 + 16;
  *v28 = 0u;
  v28[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v30 - 144));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Backpropagation of CNN ConvolutionalMaxPoolingComponent is not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::AccumGradients()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not supported for quantized weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t v15[6];
  int32x2_t v16[6];

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix(v16, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v15, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, _QWORD))(*(_QWORD *)v8 + 112))(v8, a2, v16, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, uint64_t, int32x2_t *, _QWORD))(*(_QWORD *)v8 + 128))(v8, a2, v16, a3, v15, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  LODWORD(a2) = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1);
  LODWORD(a3) = a2 * a3;
  v13 = 0;
  v14 = 0;
  v12 = (char *)*a4;
  LODWORD(v13) = a3;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v12, **(_QWORD **)(v8 + 168));
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16);
  v13 = 0;
  v14 = 0;
  v12 = (char *)*a4 + 4 * (int)a3;
  LODWORD(v13) = v10;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(const void ****)(v8 + 192), (uint64_t)&v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v15);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v16);
}

void sub_1ADAA8D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 276) = a3;
  *(_DWORD *)(result + 272) = a2;
  *(_BYTE *)(result + 480) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  float v4;
  int v6;
  uint64_t v7;
  uint64_t v9;

  v4 = a3;
  v6 = *(_DWORD *)(a1 + 272);
  if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * a2), *(_QWORD *)(a1 + 216) + 48 * a2, a3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * a2), *(_QWORD *)(a1 + 240) + 32 * a2, v4);
    }
  }
  else if (v6 == 2)
  {
    if (a3 > 0.0)
    {
      v9 = a2;
      if (*(_BYTE *)(a1 + 84))
        v4 = (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * a2) * a3;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * a2), (int *)(*(_QWORD *)(a1 + 216) + 48 * a2), v4);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v9), (_QWORD *)(*(_QWORD *)(a1 + 240) + 32 * v9), v4);
    }
  }
  else if (v6 == 1 && a3 > 0.0)
  {
    v7 = a2;
    if (*(_BYTE *)(a1 + 84))
      v4 = (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * a2) * a3;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * a2), v4);
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v7), v4);
  }
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v22[34];

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16);
  v7 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
  result = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152));
  *a3 = v6 + result * v7;
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 176) - v9;
  if (v10 && (v11 = *(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) != 0)
  {
    v12 = v10 >> 3;
    v13 = v11 >> 3;
    v14 = *(_DWORD *)(a1 + 80);
    if (v14 == 1)
      v14 = 0;
    v15 = v14;
    v16 = v13 - 1;
    if (v12 - 1 != v14 || v16 != v14)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"  ", 2);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
    v18 = kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v9 + 8 * v14));
    result = kaldi::CuVectorBase<float>::CountZeros(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v15));
    v19 = result + v18;
  }
  else
  {
    v19 = 0;
  }
  *a2 = v19;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t i;
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1)
    v3 = (v2 + 1);
  else
    v3 = 1;
  if (!*(_BYTE *)(a1 + 480))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 408), (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 360), (int)v3);
    std::vector<BOOL>::resize(a1 + 456, (int)v3, 0);
    v4 = *(_DWORD *)(a1 + 272);
    v5 = (_QWORD *)(a1 + 168);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 168, (int)v3);
    v6 = (_QWORD *)(a1 + 192);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 192, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 216), (int)v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 240), (int)v3);
    if ((int)v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        v8 = (int32x2_t *)operator new();
        v9 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
        v10 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152));
        kaldi::CuMatrix<float>::CuMatrix(v8, v9, v10, 0, 0, 0);
        v11 = *(_QWORD *)(*v5 + 8 * i);
        *(_QWORD *)(*v5 + 8 * i) = v8;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
        v12 = (_QWORD *)operator new();
        v13 = *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16);
        *v12 = &unk_1E5D341C8;
        v12[1] = 0;
        v12[2] = 0;
        v12[3] = 0;
        kaldi::CuVector<float>::Resize((uint64_t)v12, v13, 0);
        v14 = *(_QWORD *)(*v6 + 8 * i);
        *(_QWORD *)(*v6 + 8 * i) = v12;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        if ((v4 & 0xFFFFFFFE) == 2)
        {
          v15 = (int32x2_t *)(*(_QWORD *)(a1 + 216) + 48 * i);
          v16 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
          v17 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 152));
          kaldi::CuMatrix<float>::Resize(v15, v16, v17, 1, 0);
          v18 = *(_QWORD *)(a1 + 240) + 32 * i;
          v19 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 152));
          kaldi::CuVector<float>::Resize(v18, v19, 1);
          if (*(_DWORD *)(a1 + 272) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 216) + 48 * i, 1.0);
            kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 240) + 32 * i, 1.0);
          }
        }
      }
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 288), (int)v3);
    *(_BYTE *)(a1 + 480) = 1;
  }
}

void sub_1ADAA9268(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>(v2, a1);
  return v2;
}

void sub_1ADAA9324(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent(v2, a1);
  return v2;
}

void sub_1ADAA9394(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40FC9476E1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(a1 - 96);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 262;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 263;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 264;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc(uint64_t a1)
{
  _QWORD v1[34];

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Backpropagation of CNN ConvolutionalMaxPoolingComponent is not supported on CPU");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[35];

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  *(_DWORD *)(*(_QWORD *)(a1 + 288) + 4 * a5) = *(_DWORD *)(a2 + 20);
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 456) + (((unint64_t)a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v41, "ConvolutionalMaxPoolingComponent::AccumGradients can't be called before ConvolutionalMaxPoolingComponent::Backpropagate");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41);
  }
  v9 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(*(_QWORD *)(v9 + 8 * a5) + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * a5) + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(v9 + 8 * a5));
  kaldi::CuVectorBase<float>::SetZero(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * a5));
  if (*(int *)(a1 + 144) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * a5);
      v13 = *(_DWORD *)(a1 + 104);
      v12 = *(_DWORD *)(a1 + 108);
      v14 = *(_QWORD *)(v11 + 8) + 4 * v12 * v10;
      v15 = *(_DWORD *)(v11 + 28) - v12 * v10;
      v16 = *(_QWORD *)(v11 + 32);
      LODWORD(v41[2]) = v12;
      *(_QWORD *)((char *)&v41[2] + 4) = *(_QWORD *)(v11 + 20);
      HIDWORD(v41[3]) = v15;
      v41[4] = v16;
      v41[0] = &unk_1E5D29D40;
      v41[1] = v14;
      v17 = *(_QWORD *)(a1 + 408) + 48 * a5;
      LODWORD(v16) = *(_DWORD *)(a1 + 124);
      v18 = *(_DWORD *)(a2 + 20) * *(_DWORD *)(a1 + 120);
      v19 = *(_DWORD *)(v17 + 24);
      v20 = v19 * v18 * v10;
      v21 = *(_QWORD *)(v17 + 8) + 4 * v20;
      v22 = *(_DWORD *)(v17 + 28) - v20;
      v23 = *(_DWORD *)(v17 + 16);
      v24 = *(_QWORD *)(v17 + 32);
      *((_QWORD *)&v39 + 1) = __PAIR64__(v18, v23);
      *(_QWORD *)&v40 = __PAIR64__(v22, v19);
      *((_QWORD *)&v40 + 1) = v24;
      v38 = &unk_1E5D29D40;
      *(_QWORD *)&v39 = v21;
      v25 = *(_QWORD *)(a1 + 336) + 48 * a5;
      v26 = v13 * v16;
      LODWORD(v16) = *(_DWORD *)(v25 + 24);
      LODWORD(v14) = v16 * v18 * v10;
      v27 = *(_QWORD *)(v25 + 8) + 4 * (int)v14;
      LODWORD(v14) = *(_DWORD *)(v25 + 28) - v14;
      v28 = *(_QWORD *)(v25 + 32);
      *((_QWORD *)&v36 + 1) = __PAIR64__(v18, v26);
      *(_QWORD *)&v37 = __PAIR64__(v14, v16);
      *((_QWORD *)&v37 + 1) = v28;
      v35 = &unk_1E5D29D40;
      *(_QWORD *)&v36 = v27;
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)v41, (uint64_t)&v35, CblasTrans, (uint64_t)&v38, CblasNoTrans, 1.0, 0.0);
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * a5);
      v30 = *(_DWORD *)(a1 + 108);
      v33 = 0;
      v31 = *(_QWORD *)(v29 + 8) + 4 * v30 * v10;
      v32[0] = &unk_1E5D29D70;
      v32[1] = v31;
      LODWORD(v33) = v30;
      v34 = *(_QWORD *)(v29 + 24);
      kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v32, (uint64_t)&v38, 1.0, 1.0);
      v35 = &unk_1E5D29D40;
      v36 = 0u;
      v37 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v35);
      v38 = &unk_1E5D29D40;
      v39 = 0u;
      v40 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v38);
      v41[0] = &unk_1E5D29D40;
      memset(&v41[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v41);
      ++v10;
    }
    while (v10 < *(_DWORD *)(a1 + 144));
  }
}

void sub_1ADAA96A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;

  a14 = &unk_1E5D29D40;
  *v26 = 0u;
  v26[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  a19 = &unk_1E5D29D40;
  *v25 = 0u;
  v25[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a19);
  a24 = &unk_1E5D29D40;
  *v24 = 0u;
  v24[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a24);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  float v6;
  float v7;
  float v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int *v18;
  int v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  _QWORD v25[4];
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[34];

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v7 = *(float *)(a1 + 64);
  v6 = *(float *)(a1 + 68);
  v8 = *(float *)(a1 + 72);
  v9 = *(_DWORD *)(a1 + 76);
  *(_QWORD *)(*(_QWORD *)(a1 + 152) + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24) = a2;
  v10 = *(unsigned int *)(a1 + 80);
  if (a3 >= 0)
    v11 = a3;
  else
    v11 = *(_DWORD *)(a1 + 80);
  if ((_DWORD)v10 == 1)
    v12 = 0;
  else
    v12 = v11;
  v13 = *(uint64_t **)(a1 + 168);
  v14 = v12;
  *(_QWORD *)(v13[v12] + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v12) + 24) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 216) + 48 * v12 + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 240) + 32 * v12 + 24) = a2;
  if (v12 == (_DWORD)v10)
  {
    kaldi::CuMatrixBase<float>::AddMat(v13[v12], *v13, 111, 1.0, 0.0);
    kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v14), **(_QWORD **)(a1 + 192), 1.0, 0.0);
    if (*(int *)(a1 + 80) > 1)
    {
      v15 = 1;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v14), *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v15), 111, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v14), *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v15++), 1.0, 1.0);
      }
      while (v15 < *(int *)(a1 + 80));
    }
    v16 = *(int **)(a1 + 288);
    v16[v14] = 0;
    if ((int)v10 >= 1)
    {
      v17 = 0;
      v18 = v16;
      do
      {
        v19 = *v18++;
        v17 += v19;
        v16[v14] = v17;
        --v10;
      }
      while (v10);
    }
  }
  v20 = *(float *)(a1 + 56);
  if (*(_BYTE *)(a1 + 84))
    v20 = v20 / (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * v14);
  v21 = *(_QWORD *)(a1 + 312);
  if (v14 >= (*(_QWORD *)(a1 + 320) - v21) >> 2)
  {
    LODWORD(v29[0]) = 2143289344;
    std::vector<float>::resize(a1 + 312, (int)v14 + 1, v29);
    v21 = *(_QWORD *)(a1 + 312);
  }
  *(float *)(v21 + 4 * v14) = v20;
  if (*(float *)(a1 + 276) >= 0.0)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 248))(a1, v14);
  if (v7 != 0.0)
    kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 152), 111, (float)-(float)(v20 * v7) * (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * v14), 1.0);
  if (v6 != 0.0)
    kaldi::cu::RegularizeL1<float>(*(_QWORD *)(a1 + 152), *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v14), (float)(v6 * v20) * (float)*(int *)(*(_QWORD *)(a1 + 288) + 4 * v14), v20);
  if (v8 > 0.0)
  {
    if (*(int *)(a1 + 80) >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
    }
    if (*(_QWORD *)(a1 + 496) == *(_QWORD *)(a1 + 488))
      kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 488), v9, v8);
  }
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(a1, v14, v20);
  if (*(float *)(a1 + 280) > 0.0)
  {
    kaldi::CuMatrix<float>::CuMatrix(v29, *(_QWORD *)(a1 + 152), 111);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)v29, *(_QWORD *)(a1 + 152));
    v22 = *(unsigned int *)(*(_QWORD *)(a1 + 152) + 20);
    v27 = 0;
    v28 = 0;
    v26[0] = &unk_1E5D341C8;
    v26[1] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v26, v22, 0);
    v28 = a2;
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v26, (uint64_t)v29, 1.0, 0.0);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v26, 0.5);
    v25[0] = &unk_1E5D341C8;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v28;
    kaldi::CuVector<float>::Resize((uint64_t)v25, v27, 1);
    kaldi::CuVectorBase<float>::CopyFromVec(v25, (uint64_t)v26);
    kaldi::CuVectorBase<float>::Scale((uint64_t)v25, 1.0 / *(float *)(a1 + 280));
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v25, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)v25);
    kaldi::CuMatrixBase<float>::MulRowsVec(*(_QWORD *)(a1 + 152), (uint64_t)v25);
    kaldi::CuVectorBase<float>::ApplyMaxNorm(*(_QWORD *)(a1 + 160), *(float *)(a1 + 280));
    v25[0] = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)v25);
    v26[0] = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)v26);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v29);
  }
  v23 = *(_BYTE **)(a1 + 288);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 80))
  {
    v24 = *(_BYTE **)(a1 + 296);
    if (v23 != v24)
      bzero(v23, ((v24 - v23 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v23[4 * v14] = 0;
  }
}

void sub_1ADAA9B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "Weights are already vectorized");
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v39);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Performing vectorization of convolutional maxpooling component", 62);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v39);
  }
  v8 = (uint64_t *)(a1 + 152);
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 152) + 20);
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16) + v9;
  if (v10 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "(nlinparams + Bias().Dim()) == NumParams()");
    goto LABEL_32;
  }
  kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 152), a2, (uint64_t *)&v39);
  v11 = (uint64_t)v39;
  v39 = 0;
  v12 = *v8;
  *v8 = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    v13 = v39;
    v39 = 0;
    if (v13)
      (*(void (**)(void *))(*(_QWORD *)v13 + 24))(v13);
  }
  v14 = *(_QWORD *)(a3 + 8);
  v39 = &unk_1E5D29D70;
  v40 = v14;
  v42 = *(_QWORD *)(a3 + 24);
  v41 = v9;
  kaldi::CuVectorBase<float>::Set((uint64_t)&v39, *(float *)(a1 + 264));
  v15 = *(_DWORD *)(a3 + 16) - v9;
  *(_QWORD *)(a3 + 8) += 4 * v9;
  *(_DWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 160), a2, &v39);
  v16 = v39;
  v39 = 0;
  v17 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    v18 = v39;
    v39 = 0;
    if (v18)
      (*(void (**)(void *))(*(_QWORD *)v18 + 16))(v18);
  }
  v19 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16);
  v20 = *(_QWORD *)(a3 + 8);
  v39 = &unk_1E5D29D70;
  v40 = v20;
  v42 = *(_QWORD *)(a3 + 24);
  v41 = v19;
  kaldi::CuVectorBase<float>::Set((uint64_t)&v39, *(float *)(a1 + 268));
  v21 = *(int *)(*(_QWORD *)(a1 + 160) + 16);
  v22 = *(_DWORD *)(a3 + 16) - v21;
  *(_QWORD *)(a3 + 8) += 4 * v21;
  *(_DWORD *)(a3 + 16) = v22;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v23 = a4[1];
  v24 = (v23 - *a4) >> 5;
  if (v24 != (uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3
    || v24 != (uint64_t)(*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "veccorrs->size() == filters_grad_.size() && veccorrs->size() == bias_grad_.size()");
    goto LABEL_32;
  }
  if (v23 == *a4)
    goto LABEL_28;
  v25 = 0;
  do
  {
    v26 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v25) + 16)
        + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v25) + 16)
        * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v25) + 20);
    if (v26 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "(filters_grad_[ic]->NumRows() * filters_grad_[ic]->NumCols() + bias_grad_[ic]->Dim()) == NumParams()");
      goto LABEL_32;
    }
    ++v25;
    v27 = *a4;
    v28 = a4[1];
  }
  while (v25 < (v28 - *a4) >> 5);
  if (v28 != v27)
  {
    v29 = 0;
    do
    {
      v30 = v27 + 32 * v29;
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 168) + 8 * v29), v30, (uint64_t *)&v39);
      v31 = *(_QWORD *)(a1 + 168);
      v32 = v39;
      v39 = 0;
      v33 = *(_QWORD *)(v31 + 8 * v29);
      *(_QWORD *)(v31 + 8 * v29) = v32;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
      v34 = v39;
      v39 = 0;
      if (v34)
        (*(void (**)(void *))(*(_QWORD *)v34 + 24))(v34);
      kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 192) + 8 * v29), v30, &v39);
      v35 = *(_QWORD *)(a1 + 192);
      v36 = v39;
      v39 = 0;
      v37 = *(_QWORD *)(v35 + 8 * v29);
      *(_QWORD *)(v35 + 8 * v29) = v36;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
      v38 = v39;
      v39 = 0;
      if (v38)
        (*(void (**)(void *))(*(_QWORD *)v38 + 16))(v38);
      ++v29;
      v27 = *a4;
    }
    while (v29 < (a4[1] - *a4) >> 5);
  }
LABEL_28:
  *(_BYTE *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Done  vectorization of convolutional maxpooling component", 57);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v39);
  }
}

void sub_1ADAA9F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::nnet1::CnnRearrangeComponent::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  void **v5;
  void *v6;
  int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  char *v26;
  std::vector<unsigned int>::pointer begin;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD v33[34];
  void **v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  std::vector<unsigned int> v38;
  char *v39;
  char *v40;
  char *v41;

  v39 = 0;
  v40 = 0;
  v41 = 0;
  memset(&v38, 0, sizeof(v38));
  v37 = -1;
  v34 = 0;
  v35 = 0;
  v4 = a2 + 4;
  v36 = 0;
  while ((*((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v34);
    if (SHIBYTE(v36) < 0)
    {
      if (v35 != 10)
        goto LABEL_49;
      v5 = v34;
    }
    else
    {
      if (SHIBYTE(v36) != 10)
        goto LABEL_49;
      v5 = (void **)&v34;
    }
    v6 = *v5;
    v7 = *((unsigned __int16 *)v5 + 4);
    if (v6 != (void *)0x646E61426D754E3CLL || v7 != 15987)
    {
LABEL_49:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Unknown token ", 14);
      if (v36 >= 0)
        v29 = (void **)&v34;
      else
        v29 = v34;
      if (v36 >= 0)
        v30 = HIBYTE(v36);
      else
        v30 = v35;
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" (NumBands)", 11);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v33);
    }
    kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v37);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v9 = v37;
  if (v37 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"NumBands should be > 0", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v33);
  }
  v10 = *(_DWORD *)(a1 + 8);
  v11 = v10 / v37;
  if (v10 % v37)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid NumBands value", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v33);
  }
  v12 = 0;
  do
  {
    if (v11 >= 1)
    {
      v13 = 0;
      v14 = v40;
      do
      {
        v15 = v12 + v37 * v13;
        if (v14 >= v41)
        {
          v17 = v39;
          v18 = (v14 - v39) >> 2;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v20 = v41 - v39;
          if ((v41 - v39) >> 1 > v19)
            v19 = v20 >> 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v41, v21);
            v17 = v39;
            v14 = v40;
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[4 * v18];
          *(_DWORD *)v23 = v15;
          v16 = v23 + 4;
          while (v14 != v17)
          {
            v24 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          v39 = v23;
          v40 = v16;
          v41 = &v22[4 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_DWORD *)v14 = v15;
          v16 = v14 + 4;
        }
        v40 = v16;
        ++v13;
        v14 = v16;
      }
      while (v13 != v11);
      v9 = v37;
    }
    ++v12;
  }
  while (v12 < v9);
  std::vector<int>::resize(&v38, *(int *)(a1 + 8));
  if (*(int *)(a1 + 8) >= 1)
  {
    v25 = 0;
    v26 = v39;
    begin = v38.__begin_;
    do
    {
      begin[*(int *)&v26[4 * v25]] = v25;
      ++v25;
    }
    while (v25 < *(int *)(a1 + 8));
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)(v40 - v39) >> 2, 1);
  memcpy(*(void **)(a1 + 56), v39, v40 - v39);
  kaldi::CuArray<int>::Resize(a1 + 72, (unint64_t)((char *)v38.__end_ - (char *)v38.__begin_) >> 2, 1);
  memcpy(*(void **)(a1 + 80), v38.__begin_, (char *)v38.__end_ - (char *)v38.__begin_);
  if (SHIBYTE(v36) < 0)
    operator delete(v34);
  if (v38.__begin_)
  {
    v38.__end_ = v38.__begin_;
    operator delete(v38.__begin_);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
}

void sub_1ADAAA304(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(_QWORD *)(v1 - 120) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 104);
  if (v4)
  {
    *(_QWORD *)(v1 - 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::CnnRearrangeComponent::ReadData(uint64_t a1, _QWORD *a2, int a3)
{
  std::vector<int> __p;
  std::vector<int> v7;
  char v8;

  v8 = 0;
  kaldi::ReadBasicType<char>(a2, a3, &v8);
  memset(&v7, 0, sizeof(v7));
  kaldi::ReadIntegerVector<int>(a2, a3, &v7, 0, 0, 0, 0);
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)v7.__end_ - (char *)v7.__begin_) >> 2, 1);
  memcpy(*(void **)(a1 + 56), v7.__begin_, (char *)v7.__end_ - (char *)v7.__begin_);
  memset(&__p, 0, sizeof(__p));
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, 0, 0, 0, 0);
  kaldi::CuArray<int>::Resize(a1 + 72, (unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2, 1);
  memcpy(*(void **)(a1 + 80), __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v7.__begin_)
  {
    v7.__end_ = v7.__begin_;
    operator delete(v7.__begin_);
  }
}

void sub_1ADAAA448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::CnnRearrangeComponent::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  std::vector<unsigned int> __p;
  std::vector<int> v7;

  kaldi::WriteBasicType<char>(a2, a3);
  std::vector<int>::vector(&v7, *(int *)(a1 + 48));
  kaldi::CuArray<int>::CopyToVec((const void **)(a1 + 48), (std::vector<unsigned int> *)&v7);
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, v7.__end_ - v7.__begin_, (uint64_t)v7.__begin_);
  std::vector<int>::vector((std::vector<int> *)&__p, *(int *)(a1 + 72));
  kaldi::CuArray<int>::CopyToVec((const void **)(a1 + 72), &__p);
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, __p.__end_ - __p.__begin_, (uint64_t)__p.__begin_);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v7.__begin_)
  {
    v7.__end_ = v7.__begin_;
    operator delete(v7.__begin_);
  }
}

void sub_1ADAAA54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::nnet1::CnnRearrangeComponent::Info@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "\n CnnRearrange ");
}

uint64_t kaldi::nnet1::CnnRearrangeComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::cu::Copy<float>(a2, (unsigned int *)(a1 + 48), a3);
}

uint64_t kaldi::nnet1::CnnRearrangeComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return kaldi::cu::Copy<float>(a4, (unsigned int *)(a1 + 72), a5);
}

void kaldi::nnet1::PaddingComponent::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  float *v6;
  uint64_t *v7;
  __int128 *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  int v20;
  _QWORD *v21;
  __int128 *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD v27[34];
  __int128 v28;
  uint64_t v29;

  *(_QWORD *)(a1 + 56) = 0;
  v3 = a1 + 56;
  v4 = a1 + 52;
  v5 = (_DWORD *)(a1 + 60);
  *(_QWORD *)(a1 + 48) = 0;
  v6 = (float *)(a1 + 48);
  v28 = 0uLL;
  v29 = 0;
  v7 = a2 + 4;
  while ((*((_BYTE *)v7 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v28);
    if (SHIBYTE(v29) < 0)
    {
      v11 = *((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1) == 12)
      {
        v12 = *(_QWORD *)v28 == 0x646461506572503CLL && *(_DWORD *)(v28 + 8) == 1046965865;
        v10 = v4;
        if (v12)
        {
LABEL_47:
          kaldi::ReadBasicType<int>(a2, 0, v10);
          goto LABEL_48;
        }
      }
      if (*((_QWORD *)&v28 + 1) == 13)
      {
        v13 = *(_QWORD *)v28 == 0x64615074736F503CLL && *(_QWORD *)(v28 + 5) == 0x3E676E6964646150;
        v10 = v3;
        if (v13)
          goto LABEL_47;
        v11 = *((_QWORD *)&v28 + 1);
      }
      if (v11 == 11)
      {
        v14 = *(_QWORD *)v28 == 0x626D6174736F503CLL && *(_QWORD *)(v28 + 3) == 0x3E656C626D617473;
        v10 = (uint64_t)v5;
        if (v14)
          goto LABEL_47;
        v11 = *((_QWORD *)&v28 + 1);
      }
      if (v11 != 10)
        goto LABEL_55;
      v8 = (__int128 *)v28;
    }
    else
    {
      v8 = &v28;
      switch(HIBYTE(v29))
      {
        case 0xA:
          break;
        case 0xB:
          goto LABEL_35;
        case 0xC:
          v9 = (_QWORD)v28 == 0x646461506572503CLL && DWORD2(v28) == 1046965865;
          v10 = v4;
          if (!v9)
            goto LABEL_55;
          goto LABEL_47;
        case 0xD:
          v15 = (_QWORD)v28 == 0x64615074736F503CLL && *(_QWORD *)((char *)&v28 + 5) == 0x3E676E6964646150;
          v10 = v3;
          if (v15)
            goto LABEL_47;
          if (HIBYTE(v29) == 10)
            goto LABEL_40;
          if (HIBYTE(v29) != 11)
            goto LABEL_55;
LABEL_35:
          v16 = (_QWORD)v28 == 0x626D6174736F503CLL && *(_QWORD *)((char *)&v28 + 3) == 0x3E656C626D617473;
          v10 = (uint64_t)v5;
          if (v16)
            goto LABEL_47;
          if (HIBYTE(v29) != 10)
            goto LABEL_55;
LABEL_40:
          v8 = &v28;
          break;
        default:
          goto LABEL_55;
      }
    }
    v17 = *(_QWORD *)v8;
    v18 = *((unsigned __int16 *)v8 + 4);
    if (v17 != 0x756C61566461503CLL || v18 != 15973)
    {
LABEL_55:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Unknown token ", 14);
      if (v29 >= 0)
        v22 = &v28;
      else
        v22 = (__int128 *)v28;
      if (v29 >= 0)
        v23 = HIBYTE(v29);
      else
        v23 = *((_QWORD *)&v28 + 1);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" (NumBands)", 11);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
    }
    kaldi::ReadBasicType<float>(a2, 0, v6);
LABEL_48:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v20 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 52) + v20 + *(_DWORD *)(a1 + 56) != *(_DWORD *)(a1 + 12))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Invalid pre and post padding sizes", 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  if (v20 < *v5 || (*v5 & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Invalid postamble size", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  if (SHIBYTE(v29) < 0)
    operator delete((void *)v28);
}

void sub_1ADAAA980(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::PaddingComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  float *v6;
  __int128 *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  BOOL v18;
  _QWORD *v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD v23[34];
  __int128 v24;
  uint64_t v25;

  *(_QWORD *)(a1 + 56) = 0;
  v5 = a1 + 56;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = (float *)(a1 + 48);
  while (kaldi::Peek(a2, a3) == 60)
  {
    v24 = 0uLL;
    v25 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v24);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
    {
      v7 = &v24;
      switch(HIBYTE(v25))
      {
        case 0xA:
          goto LABEL_34;
        case 0xB:
          v8 = (_QWORD)v24 == 0x626D6174736F503CLL && *(_QWORD *)((char *)&v24 + 3) == 0x3E656C626D617473;
          v9 = v5 + 4;
          if (!v8)
            goto LABEL_50;
          goto LABEL_45;
        case 0xC:
          v14 = (_QWORD)v24 == 0x646461506572503CLL && DWORD2(v24) == 1046965865;
          v9 = v5 - 4;
          if (!v14)
            goto LABEL_32;
          goto LABEL_45;
        case 0xD:
          v18 = (_QWORD)v24 == 0x64615074736F503CLL && *(_QWORD *)((char *)&v24 + 5) == 0x3E676E6964646150;
          v9 = v5;
          if (v18)
            goto LABEL_45;
LABEL_32:
          if (HIBYTE(v25) != 10)
            goto LABEL_50;
          v7 = &v24;
          break;
        default:
          goto LABEL_50;
      }
      goto LABEL_34;
    }
    v10 = *((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1) != 11
      || (*(_QWORD *)v24 == 0x626D6174736F503CLL ? (v11 = *(_QWORD *)(v24 + 3) == 0x3E656C626D617473) : (v11 = 0),
          v9 = v5 + 4,
          !v11))
    {
      if (*((_QWORD *)&v24 + 1) == 12)
      {
        v12 = *(_QWORD *)v24 == 0x646461506572503CLL && *(_DWORD *)(v24 + 8) == 1046965865;
        v9 = v5 - 4;
        if (v12)
          goto LABEL_45;
        v10 = *((_QWORD *)&v24 + 1);
      }
      if (v10 != 13)
        goto LABEL_26;
      v13 = *(_QWORD *)v24 == 0x64615074736F503CLL && *(_QWORD *)(v24 + 5) == 0x3E676E6964646150;
      v9 = v5;
      if (!v13)
      {
        v10 = *((_QWORD *)&v24 + 1);
LABEL_26:
        if (v10 != 10)
          goto LABEL_50;
        v7 = (__int128 *)v24;
LABEL_34:
        v15 = *(_QWORD *)v7;
        v16 = *((unsigned __int16 *)v7 + 4);
        if (v15 != 0x756C61566461503CLL || v16 != 15973)
        {
LABEL_50:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"unrecognized config token ", 26);
          if (v25 >= 0)
            v21 = &v24;
          else
            v21 = (__int128 *)v24;
          if (v25 >= 0)
            v22 = HIBYTE(v25);
          else
            v22 = *((_QWORD *)&v24 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
        }
        kaldi::ReadBasicType<float>(a2, a3, v6);
        goto LABEL_46;
      }
    }
LABEL_45:
    kaldi::ReadBasicType<int>(a2, a3, v9);
LABEL_46:
    if (SHIBYTE(v25) < 0)
      operator delete((void *)v24);
  }
  LOBYTE(v23[0]) = 0;
  return kaldi::ReadBasicType<char>(a2, a3, v23);
}

void sub_1ADAAACC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::PaddingComponent::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  if (*(float *)(a1 + 48) != 0.0)
  {
    kaldi::WriteToken(a2, a3, "<PadValue>");
    kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  }
  kaldi::WriteToken(a2, a3, "<Postamble>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PrePadding>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PostPadding>");
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteBasicType<char>(a2, a3);
}

_QWORD *kaldi::nnet1::PaddingComponent::Info@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "\n PaddingComponent ");
}

void kaldi::nnet1::PaddingComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[4];
  void *v22;
  _QWORD v23[4];

  kaldi::CuMatrixBase<float>::Set(a3, *(float *)(a1 + 48));
  v6 = *(int *)(a1 + 52);
  v7 = *(_QWORD *)(a3 + 8) + 4 * v6;
  LODWORD(v6) = *(_DWORD *)(a3 + 28) - v6;
  v8 = *(_QWORD *)(a3 + 32);
  LODWORD(v23[1]) = *(_DWORD *)(a2 + 16) - *(_DWORD *)(a1 + 60);
  *(_QWORD *)((char *)&v23[1] + 4) = *(_QWORD *)(a3 + 20);
  HIDWORD(v23[2]) = v6;
  v23[3] = v8;
  v22 = &unk_1E5D29D40;
  v23[0] = v7;
  v9 = *(_QWORD *)(a2 + 8);
  LODWORD(v7) = *(_DWORD *)(a2 + 28);
  v10 = *(_QWORD *)(a2 + 32);
  LODWORD(v21[1]) = v23[1];
  *(_QWORD *)((char *)&v21[1] + 4) = *(_QWORD *)(a2 + 20);
  HIDWORD(v21[2]) = v7;
  v21[3] = v10;
  v20 = &unk_1E5D29D40;
  v21[0] = v9;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v22, (uint64_t)&v20, 111);
  v20 = &unk_1E5D29D40;
  memset(v21, 0, sizeof(v21));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v20);
  v22 = &unk_1E5D29D40;
  memset(v23, 0, sizeof(v23));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
  v11 = *(_DWORD *)(a1 + 60);
  if (v11 >= 1)
  {
    v12 = *(_DWORD *)(a3 + 16) - v11;
    v13 = *(_QWORD *)(a3 + 8) + 4 * v12;
    v14 = *(_DWORD *)(a3 + 28) - v12;
    v15 = *(_QWORD *)(a3 + 32);
    LODWORD(v23[1]) = *(_DWORD *)(a1 + 60);
    *(_QWORD *)((char *)&v23[1] + 4) = *(_QWORD *)(a3 + 20);
    HIDWORD(v23[2]) = v14;
    v23[3] = v15;
    v22 = &unk_1E5D29D40;
    v23[0] = v13;
    v16 = *(_DWORD *)(a2 + 16) - v11;
    v17 = *(_QWORD *)(a2 + 8) + 4 * v16;
    v18 = *(_DWORD *)(a2 + 28) - v16;
    v19 = *(_QWORD *)(a2 + 32);
    LODWORD(v21[1]) = v11;
    *(_QWORD *)((char *)&v21[1] + 4) = *(_QWORD *)(a2 + 20);
    HIDWORD(v21[2]) = v18;
    v21[3] = v19;
    v20 = &unk_1E5D29D40;
    v21[0] = v17;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v22, (uint64_t)&v20, 111);
    v20 = &unk_1E5D29D40;
    memset(v21, 0, sizeof(v21));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v20);
    v22 = &unk_1E5D29D40;
    memset(v23, 0, sizeof(v23));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
  }
}

void sub_1ADAAAF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;

  *v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  a14 = v14;
  *v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::PaddingComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[4];
  void *v25;
  _QWORD v26[4];

  v8 = *(_QWORD *)(a5 + 8);
  v9 = *(_DWORD *)(a5 + 28);
  v10 = *(_QWORD *)(a5 + 32);
  LODWORD(v26[1]) = *(_DWORD *)(a5 + 16) - *(_DWORD *)(a1 + 60);
  *(_QWORD *)((char *)&v26[1] + 4) = *(_QWORD *)(a5 + 20);
  HIDWORD(v26[2]) = v9;
  v26[3] = v10;
  v25 = &unk_1E5D29D40;
  v26[0] = v8;
  v11 = *(int *)(a1 + 52);
  v12 = *(_QWORD *)(a4 + 8) + 4 * v11;
  LODWORD(v11) = *(_DWORD *)(a4 + 28) - v11;
  v13 = *(_QWORD *)(a4 + 32);
  LODWORD(v24[1]) = v26[1];
  *(_QWORD *)((char *)&v24[1] + 4) = *(_QWORD *)(a4 + 20);
  HIDWORD(v24[2]) = v11;
  v24[3] = v13;
  v23 = &unk_1E5D29D40;
  v24[0] = v12;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v25, (uint64_t)&v23, 111);
  v23 = &unk_1E5D29D40;
  memset(v24, 0, sizeof(v24));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
  v25 = &unk_1E5D29D40;
  memset(v26, 0, sizeof(v26));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v25);
  v14 = *(_DWORD *)(a1 + 60);
  if (v14 >= 1)
  {
    v15 = *(_DWORD *)(a5 + 16) - v14;
    v16 = *(_QWORD *)(a5 + 8) + 4 * v15;
    v17 = *(_DWORD *)(a5 + 28) - v15;
    v18 = *(_QWORD *)(a5 + 32);
    LODWORD(v26[1]) = *(_DWORD *)(a1 + 60);
    *(_QWORD *)((char *)&v26[1] + 4) = *(_QWORD *)(a5 + 20);
    HIDWORD(v26[2]) = v17;
    v26[3] = v18;
    v25 = &unk_1E5D29D40;
    v26[0] = v16;
    v19 = *(_DWORD *)(a4 + 16) - v14;
    v20 = *(_QWORD *)(a4 + 8) + 4 * v19;
    v21 = *(_DWORD *)(a4 + 28) - v19;
    v22 = *(_QWORD *)(a4 + 32);
    LODWORD(v24[1]) = v14;
    *(_QWORD *)((char *)&v24[1] + 4) = *(_QWORD *)(a4 + 20);
    HIDWORD(v24[2]) = v21;
    v24[3] = v22;
    v23 = &unk_1E5D29D40;
    v24[0] = v20;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v25, (uint64_t)&v23, 111);
    v23 = &unk_1E5D29D40;
    memset(v24, 0, sizeof(v24));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
    v25 = &unk_1E5D29D40;
    memset(v26, 0, sizeof(v26));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v25);
  }
}

void sub_1ADAAB1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;

  *v16 = 0u;
  v16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  a14 = v14;
  *v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::Padding2DComponent::Init(_QWORD *this)
{
  this[6] = 0;
  this[7] = 0;
  this[8] = 0;
  return this;
}

void kaldi::nnet1::Padding2DComponent::Read(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  __int128 *p_p;
  uint64_t v13;
  uint64_t v16;
  int v17;
  __int128 __p;
  uint64_t v21;

  __p = 0uLL;
  v21 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&__p);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    switch(HIBYTE(v21))
    {
      case 8:
        if ((_QWORD)__p != 0x3E706F546461503CLL)
          goto LABEL_63;
        goto LABEL_59;
      case 9:
        if ((_QWORD)__p != 0x7466654C6461503CLL || BYTE8(__p) != 62)
          goto LABEL_63;
        goto LABEL_37;
      case 0xA:
        if ((_QWORD)__p == 0x654C5870616D463CLL && WORD4(__p) == 15982)
          goto LABEL_60;
        if ((_QWORD)__p == 0x654C5970616D463CLL && WORD4(__p) == 15982)
          goto LABEL_61;
        p_p = &__p;
        break;
      case 0xB:
        if ((_QWORD)__p != 0x74746F426461503CLL || *(_QWORD *)((char *)&__p + 3) != 0x3E6D6F74746F4264)
          goto LABEL_63;
        goto LABEL_58;
      default:
        return;
    }
LABEL_47:
    v16 = *(_QWORD *)p_p;
    v17 = *((unsigned __int16 *)p_p + 4);
    if (v16 != 0x686769526461503CLL || v17 != 15988)
      goto LABEL_63;
    v13 = a1 + 68;
    goto LABEL_62;
  }
  v6 = *((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1) == 8)
  {
    if (*(_QWORD *)__p == 0x3E706F546461503CLL)
    {
LABEL_59:
      v13 = a1 + 56;
      goto LABEL_62;
    }
    v6 = *((_QWORD *)&__p + 1);
  }
  else if (*((_QWORD *)&__p + 1) == 10)
  {
    if (*(_QWORD *)__p == 0x654C5870616D463CLL && *(_WORD *)(__p + 8) == 15982)
    {
LABEL_60:
      v13 = a1 + 48;
      goto LABEL_62;
    }
    if (*(_QWORD *)__p == 0x654C5970616D463CLL && *(_WORD *)(__p + 8) == 15982)
    {
LABEL_61:
      v13 = a1 + 52;
      goto LABEL_62;
    }
  }
  if (v6 == 11)
  {
    if (*(_QWORD *)__p == 0x74746F426461503CLL && *(_QWORD *)(__p + 3) == 0x3E6D6F74746F4264)
    {
LABEL_58:
      v13 = a1 + 60;
      goto LABEL_62;
    }
    v6 = *((_QWORD *)&__p + 1);
  }
  if (v6 != 9)
  {
LABEL_30:
    if (v6 != 10)
      goto LABEL_63;
    p_p = (__int128 *)__p;
    goto LABEL_47;
  }
  if (*(_QWORD *)__p != 0x7466654C6461503CLL || *(_BYTE *)(__p + 8) != 62)
  {
    v6 = *((_QWORD *)&__p + 1);
    goto LABEL_30;
  }
LABEL_37:
  v13 = a1 + 64;
LABEL_62:
  kaldi::ReadBasicType<int>(a2, a3, v13);
LABEL_63:
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__p);
}

void sub_1ADAAB4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *kaldi::nnet1::Padding2DComponent::Check(_DWORD *this)
{
  signed int v1;
  unsigned int v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _QWORD v13[34];

  v2 = this[12];
  v1 = this[13];
  if (v1 < 1 || (int)v2 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "h > 0 && w > 0");
    goto LABEL_17;
  }
  v4 = this[14];
  v5 = this[15];
  if ((-v5 & ~(-v5 >> 31)) + (-v4 & ~(-v4 >> 31)) >= v1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "num_to_trim_h < h");
    goto LABEL_17;
  }
  v6 = this[16];
  v7 = this[17];
  if ((-v7 & ~(-v7 >> 31)) + (-v6 & ~(-v6 >> 31)) >= v2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "num_to_trim_w < w");
    goto LABEL_17;
  }
  v8 = this[2];
  v9 = v8 / (int)(v2 * v1);
  if (v8 % (int)(v2 * v1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "input_dim_ % (h * w) == 0");
    goto LABEL_17;
  }
  v10 = v4 + v1 + v5;
  v11 = this[3];
  v12 = (v6 + v2 + v7) * v10;
  if (v11 % v12)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "output_dim_ % (out_h * out_w) == 0");
    goto LABEL_17;
  }
  if (v9 != v11 / v12)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "c == out_c");
LABEL_17:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  return this;
}

_DWORD *kaldi::nnet1::Padding2DComponent::InitData(kaldi::nnet1::Padding2DComponent *this, uint64_t *a2)
{
  uint64_t *v3;

  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v3 = a2 + 4;
  while ((*((_BYTE *)v3 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::nnet1::Padding2DComponent::Read((uint64_t)this, a2, 0);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  return kaldi::nnet1::Padding2DComponent::Check(this);
}

_DWORD *kaldi::nnet1::Padding2DComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t *v6;
  char i;
  char v9;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = a2;
  for (i = a3; kaldi::Peek(v6, i) == 60; i = a3)
  {
    kaldi::nnet1::Padding2DComponent::Read(a1, a2, a3);
    v6 = a2;
  }
  v9 = 0;
  kaldi::ReadBasicType<char>(a2, a3, &v9);
  return kaldi::nnet1::Padding2DComponent::Check((_DWORD *)a1);
}

uint64_t kaldi::nnet1::Padding2DComponent::WriteData(int a1, _QWORD *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<FmapXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadTop>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadBottom>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadLeft>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadRight>");
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteBasicType<char>(a2, a3);
}

uint64_t kaldi::nnet1::Padding2DComponent::Info(kaldi::nnet1::Padding2DComponent *this)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  (*(void (**)(kaldi::nnet1::Padding2DComponent *, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, v3, 0, 0);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v5);
}

void sub_1ADAAB944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Padding2DComponent::PropagateFnc(int *a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::Pad2D(a2, a3, a1[14], a1[15], a1[16], a1[17], a1[13], a1[12]);
}

void kaldi::nnet1::Pad2D(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  _QWORD v40[5];
  _QWORD v41[6];

  if (a5 > 0 || a3 > 0 || a4 > 0 || a6 >= 1)
    kaldi::CuMatrixBase<float>::SetZero(a2);
  v28 = *(_DWORD *)(a1 + 16) / (a8 * a7);
  v29 = a8 * a7;
  if (v28 >= 1)
  {
    v35 = 0;
    v13 = 0;
    v14 = a6 + a5 + a8;
    v15 = a5 & (a5 >> 31);
    v16 = -a3;
    v27 = v14 * (a7 + a4 + a3);
    v33 = (a5 & ~(a5 >> 31)) + a3 * v14;
    v34 = v15;
    v32 = -v33;
    v36 = -v15;
    v37 = (a6 & (a6 >> 31)) + a8 + v15;
    do
    {
      v31 = v13;
      if (a7 >= 1)
      {
        v17 = 0;
        v19 = v34;
        v18 = v35;
        v20 = v32;
        v21 = v33;
        do
        {
          if (v17 >= v16 && v17 < a7 + a4)
          {
            v22 = *(_QWORD *)(a2 + 8) + 4 * v21;
            v23 = v20 + *(_DWORD *)(a2 + 28);
            v24 = *(_QWORD *)(a2 + 32);
            LODWORD(v41[2]) = v37;
            *(_QWORD *)((char *)&v41[2] + 4) = *(_QWORD *)(a2 + 20);
            HIDWORD(v41[3]) = v23;
            v41[4] = v24;
            v41[0] = &unk_1E5D29D40;
            v41[1] = v22;
            v25 = *(_QWORD *)(a1 + 8) + 4 * (v36 + v18);
            LODWORD(v22) = v19 + *(_DWORD *)(a1 + 28);
            v26 = *(_QWORD *)(a1 + 32);
            LODWORD(v40[2]) = v37;
            *(_QWORD *)((char *)&v40[2] + 4) = *(_QWORD *)(a1 + 20);
            HIDWORD(v40[3]) = v22;
            v40[4] = v26;
            v40[0] = &unk_1E5D29D40;
            v40[1] = v25;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v41, (uint64_t)v40, 111);
            v40[0] = &unk_1E5D29D40;
            memset(&v40[1], 0, 32);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v40);
            v41[0] = &unk_1E5D29D40;
            memset(&v41[1], 0, 32);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v41);
          }
          ++v17;
          v21 += v14;
          v20 -= v14;
          v18 += a8;
          v19 -= a8;
        }
        while (a7 != v17);
      }
      v13 = v31 + 1;
      v33 += v27;
      v32 -= v27;
      v35 += v29;
      v34 -= v29;
    }
    while (v31 + 1 != v28);
  }
}

void sub_1ADAABC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _OWORD *a15, _OWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  uint64_t v22;

  a22 = &unk_1E5D29D40;
  *a15 = 0u;
  a15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a22);
  *(_QWORD *)(v22 - 128) = &unk_1E5D29D40;
  *a16 = 0u;
  a16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v22 - 128));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Padding2DComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::nnet1::Pad2D(a4, a5, -a1[14], -a1[15], -a1[16], -a1[17], a1[14] + a1[13] + a1[15], a1[16] + a1[12] + a1[17]);
}

void kaldi::nnet1::CnnRearrangeComponent::~CnnRearrangeComponent(kaldi::nnet1::CnnRearrangeComponent *this)
{
  kaldi::nnet1::CnnRearrangeComponent::~CnnRearrangeComponent(this);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E5D2E850;
  v2 = (_QWORD *)((char *)this + 72);
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
    free(v3);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
    free(v4);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  kaldi::nnet1::Component::~Component(this);
}

uint64_t kaldi::nnet1::CnnRearrangeComponent::Copy(kaldi::nnet1::CnnRearrangeComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D2E850;
  kaldi::CuArray<int>::CuArray((int *)(v2 + 48), (uint64_t)this + 48);
  kaldi::CuArray<int>::CuArray((int *)(v2 + 72), (uint64_t)this + 72);
  return v2;
}

void sub_1ADAABD50(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;
  _QWORD *v2;
  void *v4;

  v4 = (void *)*((_QWORD *)v1 + 7);
  if (v4)
    free(v4);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  kaldi::nnet1::Component::~Component(v1);
  MEMORY[0x1AF44D190](v1, 0x1091C40DB89F4D6);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CnnRearrangeComponent::GetType(kaldi::nnet1::CnnRearrangeComponent *this)
{
  return 1036;
}

void kaldi::nnet1::PaddingComponent::~PaddingComponent(kaldi::nnet1::PaddingComponent *this)
{
  kaldi::nnet1::Component::~Component(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::PaddingComponent::Copy(kaldi::nnet1::PaddingComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D2D170;
  *(_OWORD *)(v2 + 48) = *((_OWORD *)this + 3);
  return v2;
}

void sub_1ADAABE54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40E1B45FB4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::PaddingComponent::GetType(kaldi::nnet1::PaddingComponent *this)
{
  return 1037;
}

void kaldi::nnet1::Padding2DComponent::~Padding2DComponent(kaldi::nnet1::Padding2DComponent *this)
{
  kaldi::nnet1::Component::~Component(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::Padding2DComponent::Copy(kaldi::nnet1::Padding2DComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1E5D32508;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1E5D2E068;
  *(_OWORD *)(v2 + 48) = *((_OWORD *)this + 3);
  *(_QWORD *)(v2 + 64) = *((_QWORD *)this + 8);
  return v2;
}

void sub_1ADAABF34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C406EF1CAE1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Padding2DComponent::GetType(kaldi::nnet1::Padding2DComponent *this)
{
  return 1038;
}

int *kaldi::CuArray<int>::CuArray(int *a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
  kaldi::CuArray<int>::Resize((uint64_t)a1, *(_DWORD *)a2, 1);
  v4 = *a1;
  if ((_DWORD)v4)
    memcpy(*((void **)a1 + 1), *(const void **)(a2 + 8), 4 * v4);
  return a1;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[35];

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_QWORD *)(a1 + 88) = &unk_1E5D316B0;
  *(_QWORD *)(a1 + 96) = &unk_1E5D316D8;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1E5D31578;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 4));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 5);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 2);
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  v6 = *(_QWORD *)(a2 + 152);
  if (v6)
  {
    v7 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v7, v6);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v7);
  }
  v8 = *(_QWORD **)(a2 + 160);
  if (v8)
  {
    kaldi::NewCuSubOrVec<float>(v8, *(unsigned __int8 *)(a1 + 16), v29);
    v9 = v29[0];
    v29[0] = 0;
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v11 = v29[0];
      v29[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * v14);
      if (v15)
      {
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16), v29);
        v16 = *(_QWORD *)(a1 + 168);
        v17 = v29[0];
        v29[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v29[0];
        v29[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v13 = *(_QWORD *)(a1 + 168);
        v12 = *(_QWORD *)(a1 + 176);
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  v21 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  if (v20 != v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD **)(*(_QWORD *)(a2 + 192) + 8 * v22);
      if (v23)
      {
        kaldi::NewCuSubOrVec<float>(v23, *(unsigned __int8 *)(a1 + 16), v29);
        v24 = *(_QWORD *)(a1 + 192);
        v25 = v29[0];
        v29[0] = 0;
        v26 = *(_QWORD *)(v24 + 8 * v22);
        *(_QWORD *)(v24 + 8 * v22) = v25;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v27 = v29[0];
        v29[0] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v21 = *(_QWORD *)(a1 + 192);
        v20 = *(_QWORD *)(a1 + 200);
      }
      ++v22;
    }
    while (v22 < (v20 - v21) >> 3);
  }
  if (*(_QWORD *)(a2 + 496) != *(_QWORD *)(a2 + 488))
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
  return a1;
}

void sub_1ADAAC3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, quasar::Bitmap *a14, quasar::Bitmap *a15, _QWORD *a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  void **v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  v19 = (void *)*((_QWORD *)v16 + 57);
  if (v19)
    operator delete(v19);
  a16 = (_QWORD *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v20 = *a12;
  if (*a12)
  {
    *((_QWORD *)v16 + 40) = v20;
    operator delete(v20);
  }
  v21 = *a13;
  if (*a13)
  {
    *((_QWORD *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v22 = *((_QWORD *)v16 + 20);
  *((_QWORD *)v16 + 20) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v18, 0);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[35];

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_QWORD *)(a1 + 88) = &unk_1E5D31838;
  *(_QWORD *)(a1 + 96) = &unk_1E5D31860;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1E5D31700;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 4));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 5);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 2);
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  v6 = *(_QWORD *)(a2 + 152);
  if (v6)
  {
    v7 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v7, v6);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v7);
  }
  v8 = *(_QWORD **)(a2 + 160);
  if (v8)
  {
    kaldi::NewCuSubOrVec<float>(v8, *(unsigned __int8 *)(a1 + 16), v29);
    v9 = v29[0];
    v29[0] = 0;
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v11 = v29[0];
      v29[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * v14);
      if (v15)
      {
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16), v29);
        v16 = *(_QWORD *)(a1 + 168);
        v17 = v29[0];
        v29[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v29[0];
        v29[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v13 = *(_QWORD *)(a1 + 168);
        v12 = *(_QWORD *)(a1 + 176);
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  v21 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  if (v20 != v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD **)(*(_QWORD *)(a2 + 192) + 8 * v22);
      if (v23)
      {
        kaldi::NewCuSubOrVec<float>(v23, *(unsigned __int8 *)(a1 + 16), v29);
        v24 = *(_QWORD *)(a1 + 192);
        v25 = v29[0];
        v29[0] = 0;
        v26 = *(_QWORD *)(v24 + 8 * v22);
        *(_QWORD *)(v24 + 8 * v22) = v25;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v27 = v29[0];
        v29[0] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v21 = *(_QWORD *)(a1 + 192);
        v20 = *(_QWORD *)(a1 + 200);
      }
      ++v22;
    }
    while (v22 < (v20 - v21) >> 3);
  }
  if (*(_QWORD *)(a2 + 496) != *(_QWORD *)(a2 + 488))
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
  return a1;
}

void sub_1ADAAC938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, quasar::Bitmap *a14, quasar::Bitmap *a15, _QWORD *a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  void **v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  v19 = (void *)*((_QWORD *)v16 + 57);
  if (v19)
    operator delete(v19);
  a16 = (_QWORD *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v20 = *a12;
  if (*a12)
  {
    *((_QWORD *)v16 + 40) = v20;
    operator delete(v20);
  }
  v21 = *a13;
  if (*a13)
  {
    *((_QWORD *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v22 = *((_QWORD *)v16 + 20);
  *((_QWORD *)v16 + 20) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v18, 0);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

