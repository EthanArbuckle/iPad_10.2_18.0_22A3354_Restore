void sub_1ADEB0A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 84);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADEB0B20(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1ADEB0CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Features::GetFeatureMap(void)::$_0::operator()()
{
  uint64_t v0;
  void *__p[2];
  char v2;
  void **v3;

  v0 = operator new();
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  kaldi::quasar::Features::GetFeatureMap(void)::m_heap = v0;
  std::string::basic_string[abi:ne180100]<0>(__p, "start");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 0;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "dur");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 1;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "p_avg");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 2;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "p_max");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 3;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "p_min");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 4;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "p_geo");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 5;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "comb_score");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 6;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lm_post");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 7;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "am_post");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 8;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "n_match");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 9;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "n_intersect");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 10;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "p_wcr");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 11;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "p_uni_lm");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 12;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "p_avg_low");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 13;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "p_avg_high");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 14;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "p_avg_diffhigh");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 15;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "p_avg_difflow");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 16;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "rank_score");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 17;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "low_rank_score");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 18;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "high_rank_score");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 19;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "delta_low");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 20;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "delta_high");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 21;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "p_mbr");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 22;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "p_fan_out");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 23;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "n_fan_out");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 24;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "p_fan_in");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 25;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "n_fan_in");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 26;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "n_wrd_inutt");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 27;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_depth");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 28;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_post");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 29;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_ac");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 30;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_lm");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 31;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_conf");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 32;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_like");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 33;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_likelow");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 34;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_likehigh");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 35;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_ac_like");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 36;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_ac_likelow");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 37;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_ac_likehigh");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 38;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_start");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 39;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_dur");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 40;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_p_avg");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 41;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_p_max");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 42;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_p_min");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 43;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_p_geo");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 44;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_comb_score");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 45;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_lm_post");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 46;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_am_post");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 47;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_n_match");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 48;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_n_intersect");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 49;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_p_wcr");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 50;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_p_uni_lm");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 51;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_p_avg_low");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 52;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_p_avg_high");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 53;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_p_avg_diffhigh");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 54;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_p_avg_difflow");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 55;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_rank_score");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 56;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_low_rank_score");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 57;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_high_rank_score");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 58;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_delta_low");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 59;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_delta_high");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 60;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_p_mbr");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 61;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_p_fan_out");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 62;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_n_fan_out");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 63;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_p_fan_in");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 64;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_n_fan_in");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 65;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cand_p_avg");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 66;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cand_p_min");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 67;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cand_p_max");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 68;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "is_eps");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 69;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "alt_hyp_overlap");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 70;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "hyp_sub_alt_prev");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 71;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "hyp_sub_alt");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 72;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "hyp_sub_alt_next");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 73;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "alt_sub_hyp_prev");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 74;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "alt_sub_hyp");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 75;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "alt_sub_hyp_next");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 76;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "alt_lthalf_hyp");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 77;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "hyp_lthalf_alt");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 78;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "alt_in_prev");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 79;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "alt_prev_score");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 80;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "alt_in_next");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 81;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "alt_next_score");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 82;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "alt_tbp");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 83;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_tbp");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 84;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num_in_confset");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 85;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "prev_in_ob");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 86;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "next_in_ob");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 87;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "prev_best_score");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 88;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "next_best_score");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 89;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cand_avg_p_avg");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 90;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cand_avg_tbp");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 91;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cand_avg_p_max");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 92;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cand_avg_p_min");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 93;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cand_wrd_len");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 94;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sub_compound_left");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 95;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sub_compound_right");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 96;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "is_lme_word");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 97;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ob_is_lme_word");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 98;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "alt_has_lme_word");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 99;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "is_one_best");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 100;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "phonetic_dist_to_ob");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 101;
  if (v2 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "min_phonetic_dist_confset");
  v3 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 10) = 102;
  if (v2 < 0)
    operator delete(__p[0]);
  if (*(_QWORD *)(v0 + 24) != 103)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "m.size() == Features::kFeatureCount");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
}

void sub_1ADEB2E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

uint64_t std::vector<kaldi::quasar::WordConf>::__push_back_slow_path<kaldi::quasar::WordConf const&>(uint64_t *a1, const kaldi::quasar::WordConf *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xF83E0F83E0F83E1 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xF83E0F83E0F83ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xF83E0F83E0F83E1 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x7C1F07C1F07C1FLL)
    v9 = 0xF83E0F83E0F83ELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::WordConf>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[264 * v4];
  v16 = &v10[264 * v9];
  kaldi::quasar::WordConf::WordConf(v14, a2);
  v15 = v14 + 11;
  std::vector<kaldi::quasar::WordConf>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::quasar::WordConf>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADEB2FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::WordConf>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::WordConf>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  if (v4 != (__int128 *)*a1)
  {
    do
    {
      v6 -= 264;
      v4 = (__int128 *)((char *)v4 - 264);
      std::allocator<kaldi::quasar::WordConf>::construct[abi:ne180100]<kaldi::quasar::WordConf,kaldi::quasar::WordConf>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 std::allocator<kaldi::quasar::WordConf>::construct[abi:ne180100]<kaldi::quasar::WordConf,kaldi::quasar::WordConf>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v4 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v5 = a3[3];
  *(_QWORD *)(a2 + 64) = *((_QWORD *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 6) = 0;
  v6 = *(__int128 *)((char *)a3 + 72);
  *(_QWORD *)(a2 + 88) = *((_QWORD *)a3 + 11);
  *(_OWORD *)(a2 + 72) = v6;
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 10) = 0;
  *((_QWORD *)a3 + 11) = 0;
  v7 = a3[6];
  *(_QWORD *)(a2 + 112) = *((_QWORD *)a3 + 14);
  *(_OWORD *)(a2 + 96) = v7;
  *((_QWORD *)a3 + 12) = 0;
  *((_QWORD *)a3 + 13) = 0;
  *((_QWORD *)a3 + 14) = 0;
  v8 = *(__int128 *)((char *)a3 + 120);
  *(_QWORD *)(a2 + 136) = *((_QWORD *)a3 + 17);
  *(_OWORD *)(a2 + 120) = v8;
  *((_QWORD *)a3 + 15) = 0;
  *((_QWORD *)a3 + 16) = 0;
  *((_QWORD *)a3 + 17) = 0;
  v9 = *((_QWORD *)a3 + 20);
  *(_OWORD *)(a2 + 144) = a3[9];
  *(_QWORD *)(a2 + 160) = v9;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 168) = *(__int128 *)((char *)a3 + 168);
  *(_QWORD *)(a2 + 184) = *((_QWORD *)a3 + 23);
  *((_QWORD *)a3 + 21) = 0;
  *((_QWORD *)a3 + 22) = 0;
  *((_QWORD *)a3 + 23) = 0;
  v10 = a3[12];
  *(_DWORD *)(a2 + 208) = *((_DWORD *)a3 + 52);
  *(_OWORD *)(a2 + 192) = v10;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_OWORD *)(a2 + 216) = *(__int128 *)((char *)a3 + 216);
  *(_QWORD *)(a2 + 232) = *((_QWORD *)a3 + 29);
  *((_QWORD *)a3 + 27) = 0;
  *((_QWORD *)a3 + 28) = 0;
  *((_QWORD *)a3 + 29) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  result = (__n128)a3[15];
  *(__n128 *)(a2 + 240) = result;
  *(_QWORD *)(a2 + 256) = *((_QWORD *)a3 + 32);
  *((_QWORD *)a3 + 30) = 0;
  *((_QWORD *)a3 + 31) = 0;
  *((_QWORD *)a3 + 32) = 0;
  return result;
}

uint64_t std::__split_buffer<kaldi::quasar::WordConf>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 264;
    kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)(i - 264));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::vector<kaldi::quasar::WordConf>>::__push_back_slow_path<std::vector<kaldi::quasar::WordConf> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<kaldi::quasar::WordConf>::__init_with_size[abi:ne180100]<kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(v11, *a2, a2[1], 0xF83E0F83E0F83E1 * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<kaldi::quasar::WordConf>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<kaldi::quasar::WordConf>>::~__split_buffer(v14);
  return v12;
}

void sub_1ADEB32FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<kaldi::quasar::WordConf>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::quasar::WordConf>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::reverse_iterator<std::vector<kaldi::quasar::WordConf>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<kaldi::quasar::WordConf>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<kaldi::quasar::WordConf>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<kaldi::quasar::WordConf>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<kaldi::quasar::WordConf>>::__assign_with_size[abi:ne180100]<std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  void **v14;
  void **v15;
  void **v16;
  char v17;
  char v18;
  void **v19;

  v8 = a1 + 16;
  v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<kaldi::quasar::WordConf>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<kaldi::quasar::WordConf> *,std::vector<kaldi::quasar::WordConf> *,std::vector<kaldi::quasar::WordConf> *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<kaldi::quasar::WordConf>>,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<kaldi::quasar::WordConf> *,std::vector<kaldi::quasar::WordConf> *,std::vector<kaldi::quasar::WordConf> *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      v19 = v16;
      std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADEB3690(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADEB3698(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<kaldi::quasar::WordConf> *,std::vector<kaldi::quasar::WordConf> *,std::vector<kaldi::quasar::WordConf> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t *)a4)
        std::vector<kaldi::quasar::WordConf>::__assign_with_size[abi:ne180100]<kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(a4, *v5, v5[1], 0xF83E0F83E0F83E1 * ((v5[1] - *v5) >> 3));
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<kaldi::quasar::WordConf>::__assign_with_size[abi:ne180100]<kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<kaldi::quasar::WordConf>::__vdeallocate((void **)a1);
    if (a4 > 0xF83E0F83E0F83ELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x1F07C1F07C1F07C2 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x7C1F07C1F07C1FLL)
      v11 = 0xF83E0F83E0F83ELL;
    else
      v11 = v10;
    std::vector<kaldi::quasar::WordConf>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::WordConf>,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::WordConf *,kaldi::quasar::WordConf *,kaldi::quasar::WordConf *,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::WordConf>,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::WordConf *,kaldi::quasar::WordConf *,kaldi::quasar::WordConf *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
      kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)(v16 - 264));
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADEB3898(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADEB38A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::WordConf>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)(v3 - 264));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::WordConf *,kaldi::quasar::WordConf *,kaldi::quasar::WordConf *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      kaldi::quasar::WordConf::operator=(a3, v4);
      v4 += 264;
      a3 += 264;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

_QWORD *std::__hash_table<std::__hash_value_type<int,kaldi::quasar::ScoreTuple>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::ScoreTuple>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::ScoreTuple>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::ScoreTuple>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1ADEB3B6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,std::string>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::string>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::string>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::string>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADEB3DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::string>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<kaldi::ChosenArc>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<kaldi::ChosenArc>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 104)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

_QWORD *std::vector<kaldi::ChosenArc>::__construct_one_at_end[abi:ne180100]<kaldi::ChosenArc const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v3 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 48) = v6;
  *(_OWORD *)(v3 + 16) = v4;
  *(_OWORD *)v3 = *(_OWORD *)a2;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v3 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 104;
  return result;
}

void sub_1ADEB3EC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::ChosenArc>::__push_back_slow_path<kaldi::ChosenArc const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x13B13B13B13B13BLL)
    v9 = 0x276276276276276;
  else
    v9 = v5;
  v20 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::LmInfo>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[104 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v18 = v11;
  v19 = &v10[104 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 60) = *(_OWORD *)(a2 + 60);
  *((_OWORD *)v11 + 2) = v13;
  *((_OWORD *)v11 + 3) = v14;
  *((_OWORD *)v11 + 1) = v12;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 10) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v11 + 10, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  v18 += 104;
  std::vector<kaldi::ChosenArc>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<kaldi::ChosenArc>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1ADEB4000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::ChosenArc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::ChosenArc>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::ChosenArc>,std::reverse_iterator<kaldi::ChosenArc*>,std::reverse_iterator<kaldi::ChosenArc*>,std::reverse_iterator<kaldi::ChosenArc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::ChosenArc>,std::reverse_iterator<kaldi::ChosenArc*>,std::reverse_iterator<kaldi::ChosenArc*>,std::reverse_iterator<kaldi::ChosenArc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 104) = *(_OWORD *)(a3 - 104);
      v8 = *(_OWORD *)(a3 - 88);
      v9 = *(_OWORD *)(a3 - 72);
      v10 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 44) = *(_OWORD *)(a3 - 44);
      *(_OWORD *)(v7 - 56) = v10;
      *(_OWORD *)(v7 - 72) = v9;
      *(_OWORD *)(v7 - 88) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v16 + 1) - 104;
      *((_QWORD *)&v16 + 1) -= 104;
      a3 -= 104;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,std::reverse_iterator<kaldi::ChosenArc*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,std::reverse_iterator<kaldi::ChosenArc*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,std::reverse_iterator<kaldi::ChosenArc*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,std::reverse_iterator<kaldi::ChosenArc*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 80);
    if (v3)
    {
      *(_QWORD *)(v1 + 88) = v3;
      operator delete(v3);
    }
    v1 += 104;
  }
}

uint64_t std::__split_buffer<kaldi::ChosenArc>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<kaldi::ChosenArc>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<kaldi::ChosenArc>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 104;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 104;
    }
  }
}

_QWORD *std::vector<std::vector<kaldi::ChosenArc>>::__construct_one_at_end[abi:ne180100]<std::vector<kaldi::ChosenArc> const&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<kaldi::ChosenArc>::__init_with_size[abi:ne180100]<kaldi::ChosenArc*,kaldi::ChosenArc*>(v3, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1ADEB42B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::ChosenArc>>::__push_back_slow_path<std::vector<kaldi::ChosenArc> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<kaldi::ChosenArc>::__init_with_size[abi:ne180100]<kaldi::ChosenArc*,kaldi::ChosenArc*>(v11, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<kaldi::ChosenArc>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<kaldi::ChosenArc>>::~__split_buffer(v14);
  return v12;
}

void sub_1ADEB43D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<kaldi::ChosenArc>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::ChosenArc>::__init_with_size[abi:ne180100]<kaldi::ChosenArc*,kaldi::ChosenArc*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<kaldi::ChosenArc>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::ChosenArc>,kaldi::ChosenArc*,kaldi::ChosenArc*,kaldi::ChosenArc*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADEB444C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::ChosenArc>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x276276276276277)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::LmInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::ChosenArc>,kaldi::ChosenArc*,kaldi::ChosenArc*,kaldi::ChosenArc*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_OWORD *)v4 = *(_OWORD *)v6;
      v7 = *(_OWORD *)(v6 + 16);
      v8 = *(_OWORD *)(v6 + 32);
      v9 = *(_OWORD *)(v6 + 48);
      *(_OWORD *)(v4 + 60) = *(_OWORD *)(v6 + 60);
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)(v4 + 48) = v9;
      *(_OWORD *)(v4 + 16) = v7;
      *(_QWORD *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = 0;
      *(_QWORD *)(v4 + 80) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v4 + 80), *(const void **)(v6 + 80), *(_QWORD *)(v6 + 88), (uint64_t)(*(_QWORD *)(v6 + 88) - *(_QWORD *)(v6 + 80)) >> 2);
      v4 = v14 + 104;
      v14 += 104;
      v6 += 104;
    }
    while (v6 != a3);
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,kaldi::ChosenArc*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1ADEB457C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,kaldi::ChosenArc*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,kaldi::ChosenArc*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,kaldi::ChosenArc*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ChosenArc>,kaldi::ChosenArc*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(_QWORD *)(v1 - 16) = v3;
      operator delete(v3);
    }
    v1 -= 104;
  }
}

uint64_t std::vector<std::vector<kaldi::ChosenArc>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::ChosenArc>>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::ChosenArc>>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::ChosenArc>>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::ChosenArc>>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::ChosenArc>>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::ChosenArc>>,std::reverse_iterator<std::vector<kaldi::ChosenArc>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<kaldi::ChosenArc>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<kaldi::ChosenArc>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<kaldi::ChosenArc>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,false>(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  float v16;
  int v17;
  float *v18;
  char v19;
  BOOL v20;
  float v21;
  float v22;
  float v23;

  v8 = (float *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *(a2 - 1);
        v22 = v9[1];
        if (v21 > v22)
        {
          v23 = *v9;
          *v9 = *(a2 - 2);
          *(a2 - 2) = v23;
          v9[1] = v21;
          *(a2 - 1) = v22;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>((uint64_t)v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            v17 = *((_DWORD *)v9 + 1);
            v9[1] = v15[1];
            *((_DWORD *)v15 + 1) = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) <= v9[1])
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::quasar::SortPred &>(v9, a2);
            v9 = (float *)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = (float *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::quasar::SortPred &>(v9, a2);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v9, v18);
          v9 = v18 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(v18 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,false>(v8, v18, a3, -v11, a5 & 1);
            v9 = v18 + 2;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,std::pair<int,float> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(uint64_t result, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  float v5;
  float v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD *)result != a2)
  {
    v2 = (_DWORD *)(result + 8);
    if ((_DWORD *)(result + 8) != a2)
    {
      v3 = 0;
      v4 = (_DWORD *)result;
      do
      {
        v5 = *((float *)v4 + 3);
        v6 = *((float *)v4 + 1);
        v4 = v2;
        if (v5 > v6)
        {
          v7 = *v2;
          v8 = v3;
          while (1)
          {
            v9 = result + v8;
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(result + v8);
            *(_DWORD *)(v9 + 12) = *(_DWORD *)(result + v8 + 4);
            if (!v8)
              break;
            v8 -= 8;
            if (v5 <= *(float *)(v9 - 4))
            {
              v10 = result + v8 + 8;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(_DWORD *)v10 = v7;
          *(float *)(v10 + 4) = v5;
        }
        v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(_DWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  float *v3;
  float v4;
  float v5;
  int v6;
  float *v7;
  float *v8;
  int v9;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = (float *)(result + 3);
      do
      {
        v4 = *((float *)result + 3);
        v5 = *((float *)result + 1);
        result = v2;
        if (v4 > v5)
        {
          v6 = *v2;
          v7 = v3;
          do
          {
            v8 = v7;
            *(v7 - 1) = *(v7 - 3);
            v9 = *((_DWORD *)v7 - 2);
            v7 -= 2;
            *(_DWORD *)v8 = v9;
          }
          while (v4 > *(v8 - 4));
          *((_DWORD *)v7 - 1) = v6;
          *v7 = v4;
        }
        v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v3 = a2[1];
  v4 = a1[1];
  v5 = a3[1];
  if (v3 > v4)
  {
    v6 = *a1;
    if (v5 > v3)
    {
      *a1 = *a3;
      *a3 = v6;
      a1[1] = v5;
      a3[1] = v4;
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    a1[1] = v3;
    a2[1] = v4;
    v11 = a3[1];
    if (v11 <= v4)
      return 1;
    *a2 = *a3;
    *a3 = v6;
    a2[1] = v11;
    a3[1] = v4;
    return 2;
  }
  if (v5 > v3)
  {
    v7 = *a2;
    *a2 = *a3;
    *a3 = v7;
    a2[1] = v5;
    a3[1] = v3;
    v8 = a2[1];
    v9 = a1[1];
    if (v8 <= v9)
      return 1;
    v10 = *a1;
    *a1 = *a2;
    *a2 = v10;
    a1[1] = v8;
    a2[1] = v9;
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::quasar::SortPred &>(float *a1, float *a2)
{
  float v2;
  float *v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v7;
  float *v8;
  float v9;
  float v10;
  int v11;
  int v12;
  float v13;
  float v14;

  v2 = a1[1];
  if (v2 <= *(a2 - 1))
  {
    v6 = (unint64_t)(a1 + 2);
    do
    {
      v4 = v6;
      if (v6 >= (unint64_t)a2)
        break;
      v7 = *(float *)(v6 + 4);
      v6 += 8;
    }
    while (v2 <= v7);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = (unint64_t)(v3 + 2);
      v5 = v3[3];
      v3 += 2;
    }
    while (v2 <= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 2;
      v9 = *(a2 - 1);
      a2 -= 2;
    }
    while (v2 > v9);
  }
  v10 = *a1;
  while (v4 < (unint64_t)v8)
  {
    v11 = *(_DWORD *)v4;
    *(float *)v4 = *v8;
    *(_DWORD *)v8 = v11;
    v12 = *(_DWORD *)(v4 + 4);
    *(float *)(v4 + 4) = v8[1];
    *((_DWORD *)v8 + 1) = v12;
    do
    {
      v13 = *(float *)(v4 + 12);
      v4 += 8;
    }
    while (v2 <= v13);
    do
    {
      v14 = *(v8 - 1);
      v8 -= 2;
    }
    while (v2 > v14);
  }
  if ((float *)(v4 - 8) != a1)
  {
    *a1 = *(float *)(v4 - 8);
    a1[1] = *(float *)(v4 - 4);
  }
  *(float *)(v4 - 8) = v10;
  *(float *)(v4 - 4) = v2;
  return v4;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::quasar::SortPred &>(float *a1, float *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  unint64_t v6;
  float *v7;
  float v8;
  float v9;
  unint64_t v10;
  float *v11;
  int v12;
  int v13;
  float v14;
  float v15;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  do
  {
    v5 = a1[v2 + 3];
    v2 += 2;
  }
  while (v5 > v4);
  v6 = (unint64_t)&a1[v2];
  if (v2 == 2)
  {
    while (v6 < (unint64_t)a2)
    {
      v7 = a2 - 2;
      v9 = *(a2 - 1);
      a2 -= 2;
      if (v9 > v4)
        goto LABEL_9;
    }
    v7 = a2;
  }
  else
  {
    do
    {
      v7 = a2 - 2;
      v8 = *(a2 - 1);
      a2 -= 2;
    }
    while (v8 <= v4);
  }
LABEL_9:
  v10 = (unint64_t)&a1[v2];
  if (v6 < (unint64_t)v7)
  {
    v11 = v7;
    do
    {
      v12 = *(_DWORD *)v10;
      *(float *)v10 = *v11;
      *(_DWORD *)v11 = v12;
      v13 = *(_DWORD *)(v10 + 4);
      *(float *)(v10 + 4) = v11[1];
      *((_DWORD *)v11 + 1) = v13;
      do
      {
        v14 = *(float *)(v10 + 12);
        v10 += 8;
      }
      while (v14 > v4);
      do
      {
        v15 = *(v11 - 1);
        v11 -= 2;
      }
      while (v15 <= v4);
    }
    while (v10 < (unint64_t)v11);
  }
  if ((float *)(v10 - 8) != a1)
  {
    *a1 = *(float *)(v10 - 8);
    a1[1] = *(float *)(v10 - 4);
  }
  *(float *)(v10 - 8) = v3;
  *(float *)(v10 - 4) = v4;
  return v10 - 8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  uint64_t v11;
  int v12;
  float v13;
  int v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[1];
    if (v13 > v9[1])
    {
      v14 = *(_DWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = (float *)((char *)a1 + v15);
        v16[6] = *(float *)((char *)a1 + v15 + 16);
        v16[7] = *(float *)((char *)a1 + v15 + 20);
        if (v15 == -16)
          break;
        v15 -= 8;
        if (v13 <= v16[3])
        {
          v17 = (uint64_t)a1 + v15 + 24;
          goto LABEL_12;
        }
      }
      v17 = (uint64_t)a1;
LABEL_12:
      *(_DWORD *)v17 = v14;
      *(float *)(v17 + 4) = v13;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(float *a1, float *a2, float *a3, float *a4)
{
  uint64_t result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(a1, a2, a3);
  v9 = a4[1];
  v10 = a3[1];
  if (v9 > v10)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    a3[1] = v9;
    a4[1] = v10;
    v12 = a3[1];
    v13 = a2[1];
    if (v12 > v13)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      v15 = a2[1];
      v16 = a1[1];
      if (v15 > v16)
      {
        v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  uint64_t result;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(a1, a2, a3, a4);
  v11 = a5[1];
  v12 = a4[1];
  if (v11 > v12)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    a4[1] = v11;
    a5[1] = v12;
    v14 = a4[1];
    v15 = a3[1];
    if (v14 > v15)
    {
      v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      a3[1] = v14;
      a4[1] = v15;
      v17 = a3[1];
      v18 = a2[1];
      if (v17 > v18)
      {
        v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
        a2[1] = v17;
        a3[1] = v18;
        v20 = a2[1];
        v21 = a1[1];
        if (v20 > v21)
        {
          v22 = *a1;
          *a1 = *a2;
          *a2 = v22;
          a1[1] = v20;
          a2[1] = v21;
        }
      }
    }
  }
  return result;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,std::pair<int,float> *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  float *v19;
  float v20;
  int v21;
  float *v22;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = v14[1];
        v16 = a1[1];
        if (v15 > v16)
        {
          v17 = *v14;
          *v14 = *a1;
          *a1 = v17;
          v14[1] = v16;
          a1[1] = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v18 = (unint64_t)v8 >> 3;
      v19 = a2 - 2;
      do
      {
        v20 = *a1;
        v21 = *((_DWORD *)a1 + 1);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>((uint64_t)a1, a4, v18);
        if (v19 == v22)
        {
          *v22 = v20;
          *((_DWORD *)v22 + 1) = v21;
        }
        else
        {
          *v22 = *v19;
          v22[1] = v19[1];
          *v19 = v20;
          *((_DWORD *)v19 + 1) = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 3);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (float *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && v8[1] > v8[3])
      {
        v8 += 2;
        v7 = v9;
      }
      v10 = v8[1];
      v11 = a4[1];
      if (v10 <= v11)
      {
        v12 = *a4;
        do
        {
          v13 = a4;
          a4 = v8;
          *v13 = *v8;
          v13[1] = v10;
          if (v5 < v7)
            break;
          v14 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (float *)(result + 8 * v7);
          v15 = v14 + 2;
          if (v15 < a3 && v8[1] > v8[3])
          {
            v8 += 2;
            v7 = v15;
          }
          v10 = v8[1];
        }
        while (v10 <= v11);
        *a4 = v12;
        a4[1] = v11;
      }
    }
  }
  return result;
}

float std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    a1 += 8 * (v3 + 1);
    v7 = 2 * v3;
    v3 = (2 * v3) | 1;
    v8 = v7 + 2;
    if (v8 < a3 && *(float *)(a1 + 4) > *(float *)(a1 + 12))
    {
      a1 += 8;
      v3 = v8;
    }
    *(_DWORD *)v6 = *(_DWORD *)a1;
    result = *(float *)(a1 + 4);
    *(float *)(v6 + 4) = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = *(float *)(result + 8 * v4 + 4);
    v6 = *(float *)(a2 - 4);
    if (v5 > v6)
    {
      v9 = *(_DWORD *)(a2 - 8);
      v7 = a2 - 8;
      v8 = v9;
      do
      {
        v10 = v7;
        v7 = result + 8 * v4;
        *(_DWORD *)v10 = *(_DWORD *)v7;
        *(float *)(v10 + 4) = v5;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = *(float *)(result + 8 * v4 + 4);
      }
      while (v5 > v6);
      *(_DWORD *)v7 = v8;
      *(float *)(v7 + 4) = v6;
    }
  }
  return result;
}

_QWORD *std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v3, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1ADEB55A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__push_back_slow_path<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v11, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~__split_buffer(v14);
  return v12;
}

void sub_1ADEB56C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::reverse_iterator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t **std::__tree<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::__map_value_compare<int,std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x58uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 8) = 0;
    *((_QWORD *)v11 + 9) = 0;
    *((_QWORD *)v11 + 7) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[56 * v4];
  v16 = &v10[56 * v9];
  std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100]((uint64_t)v14, a2);
  v15 = v14 + 56;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADEB5AB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 56;
      std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](v7 - 56, v9);
      v7 = *((_QWORD *)&v15 + 1) - 56;
      *((_QWORD *)&v15 + 1) -= 56;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1ADEB5C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>,std::__wrap_iter<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      v20 = v12 - a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        v21 = a3 + 56 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__move_range((uint64_t)a1, v5, v12, v5 + 56 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x492492492492492)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v13) >> 3);
      v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x249249249249249)
        v18 = 0x492492492492492;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v9, v18);
      else
        v19 = 0;
      v22 = (uint64_t)&v19[56 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[56 * v18];
      v23 = 56 * a5;
      v24 = v22 + 56 * a5;
      do
      {
        std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](v22, v7);
        v22 += 56;
        v7 += 56;
        v23 -= 56;
      }
      while (v23);
      v27 = v24;
      v5 = std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_1ADEB5E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](v8, v10);
      v10 += 56;
      v8 += 56;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>((uint64_t)&v12, a2, v7, v6);
}

void sub_1ADEB5F28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>,std::reverse_iterator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](v4, v6);
      v6 += 56;
      v4 = v11 + 56;
      v11 += 56;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADEB606C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      *(_DWORD *)(v8 - 56) = *(_DWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v8 - 48) = *(_QWORD *)(a3 + v7 - 48);
      fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(a4 + v7 - 40, a3 + v7 - 40);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 56;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(v5 + 8);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(a4 + 16, v5 + 16);
    *(_DWORD *)(a4 + 48) = *(_DWORD *)(v5 + 48);
    a4 += 56;
    v5 += 56;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](v4, v6);
      v6 += 56;
      v4 = v11 + 56;
      v11 += 56;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADEB6240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADEB62B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](v4, v6);
      v6 += 56;
      v4 = v11 + 56;
      v11 += 56;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADEB6364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1ADEB65CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[13];
      if (v4)
      {
        v2[14] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x80uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[14] = 0;
  v11[15] = 0;
  v11[13] = 0;
  *((_DWORD *)v11 + 6) = -1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1ADEB68E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,kaldi::ChosenArc>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,kaldi::ChosenArc>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[13];
    if (v3)
    {
      __p[14] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADEB69AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v4, *v6, v6[1], 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADEB6A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::unordered_map<unsigned long,short>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long,char>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,char>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,char>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,char>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,char> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_1ADEB6B68(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::vector<std::vector<std::pair<int,float>>>::__assign_with_size[abi:ne180100]<std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(uint64_t *a1, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = (uint64_t)(a1 + 2);
  v9 = (uint64_t **)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<std::vector<int>>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,float>>>,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v9) >> 3) < a4)
  {
    v13 = &a2[(a1[1] - (uint64_t)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *>((uint64_t)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,float>>>,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *>((uint64_t)&v21, a2, a3, v9);
  v15 = v14;
  v16 = a1[1];
  if (v16 != v14)
  {
    v17 = a1[1];
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  a1[1] = v15;
}

void sub_1ADEB6D6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADEB6D74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__assign_with_size[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  void **v14;
  void **v15;
  void **v16;
  char v17;
  char v18;
  void **v19;

  v8 = a1 + 16;
  v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *>((uint64_t)&v17, a2, v13, (uint64_t *)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *>((uint64_t)&v18, a2, a3, (uint64_t *)v9);
  v15 = v14;
  v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      v19 = v16;
      std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADEB6EEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADEB6EF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4)
        std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__assign_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(a4, *v5, v5[1], 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3));
      v5 += 3;
      a4 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__assign_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  char v19;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vdeallocate(a1);
    if (a4 > 0x492492492492492)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v10;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((a1[1] - v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((a1[1] - v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>((uint64_t)&v18, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>((uint64_t)&v19, a2, a3, v9);
  v15 = v14;
  v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      v17 = *(void **)(v16 - 32);
      if (v17)
      {
        *(_QWORD *)(v16 - 24) = v17;
        operator delete(v17);
      }
      v16 -= 56;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_1ADEB7180(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADEB7188(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,short>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,short>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,short>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,short>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  *((_WORD *)v11 + 12) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1ADEB73D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<kaldi::ChosenArc>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D28BF0;
  a1[1] = v2;
  return a1;
}

void sub_1ADEB74A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D25940;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D28BF0;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 56);
  v4 = *v5;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1ADEB7680(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[5] = 0;
  v5[6] = 0;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v5 + 7);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  return std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D21490;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1ADEB7AC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D22860;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CF90;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1ADEB7BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FD90;
  v2 = (_QWORD *)a1[9];
  if (v2 != (_QWORD *)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD *)a1[8];
    do
    {
      fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(v2[v3++]);
      v2 = (_QWORD *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1ADEB7D1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __str;
  _DWORD *v19;
  std::string::size_type v20;
  void *v21[2];
  void *__p;
  void *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;

  *(_QWORD *)a1 = &unk_1E5D22860;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CF90;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v26 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v24);
  while (1)
  {
    if (!v24)
    {
      if ((int)v26 >= v25)
        goto LABEL_47;
LABEL_25:
      v14 = v26;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24))
      break;
    if (!v24)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddState((_QWORD *)a1);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(v21, a2, v14);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal(a1, v14, (int *)v21);
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 56), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __str.__r_.__value_.__r.__words[2])
          goto LABEL_40;
LABEL_34:
        v16 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v20);
        goto LABEL_35;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0]))
        break;
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_34;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_35:
      fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__str.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_42;
    }
LABEL_40:
    if (v19)
      --*v19;
LABEL_42:
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    else
      ++v26;
  }
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
LABEL_47:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1ADEB80F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  _QWORD *v21;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFstBaseImpl(v21);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddState(_QWORD *a1)
{
  char *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v2 = (char *)operator new(0x50uLL);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(v2);
  v3 = a1[10];
  *((_QWORD *)v2 + 9) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  v4 = (_QWORD *)a1[9];
  if ((unint64_t)v4 >= v3)
  {
    v6 = a1[8];
    v7 = ((uint64_t)v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = v3 - v6;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 10), v10);
    else
      v11 = 0;
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = v2;
    v5 = v12 + 8;
    v15 = (char *)a1[8];
    v14 = (char *)a1[9];
    if (v14 != v15)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      v14 = (char *)a1[8];
    }
    a1[8] = v12;
    a1[9] = v5;
    a1[10] = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  a1[9] = v5;
  return (((unint64_t)v5 - a1[8]) >> 3) - 1;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *__p;
  _BYTE *v7;
  uint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
  v4 = *a3;
  v5 = *(_QWORD *)(a3 + 1);
  v7 = 0;
  v8 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)a3 + 2), *((_QWORD *)a3 + 3), (uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 2);
  *(_DWORD *)v3 = v4;
  *(_QWORD *)(v3 + 4) = v5;
  if ((int *)v3 != &v4)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 + 16), (char *)__p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_1ADEB8338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (!*a2)
    ++a1[5];
  if (!a2[1])
    ++a1[6];
  v3 = (uint64_t)(a1 + 9);
  v4 = a1[8];
  if (v4 >= a1[9])
  {
    result = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(a1 + 7, (uint64_t)a2);
  }
  else
  {
    std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(v3, a1[8], (uint64_t)a2);
    result = v4 + 56;
    a1[8] = v4 + 56;
  }
  a1[8] = result;
  return result;
}

void sub_1ADEB83D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  _BYTE v35[8];
  void *v36[2];
  void *v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string __p;
  std::string::size_type v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v38 = 0u;
  v39 = 0u;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)v37 = 0u;
  v6 = -1;
  v41 = 0;
  v42 = 0;
  v40 = -1;
  v40 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v41 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v41 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(&__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v45;
    if (v45 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, &__p, v9, (uint64_t)v35);
  v31 = v9;
  v32 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v33 = v7;
    v12 = 0;
    v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(&__p, a1, v12);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Write((uint64_t)&__p, a2);
      if (__p.__r_.__value_.__r.__words[2])
      {
        v44 = __p.__r_.__value_.__r.__words[2];
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
      }
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      v14 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v12);
      v16 = *(_QWORD *)(v14 + 56);
      v15 = *(_QWORD *)(v14 + 64);
      if (v15 == v16)
        v17 = 0;
      else
        v17 = *(_DWORD **)(v14 + 56);
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1)
          v18 = 1;
        else
          v18 = (v15 - v16) / 56;
        v19 = v17;
        do
        {
          v20 = *v19;
          v19 += 14;
          LODWORD(__p.__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p.__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Write((uint64_t)(v17 + 2), a2);
          LODWORD(__p.__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
    v7 = v33;
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_32:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_35;
  }
  if (!v7)
  {
    if (v41 == v11)
    {
      updated = 1;
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v29 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_32;
  }
  v41 = v11;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  updated = fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, &__p, v31, (uint64_t)v35, v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_35:
  if (SHIBYTE(v38) < 0)
    operator delete(v37[1]);
  if (SHIBYTE(v37[0]) < 0)
    operator delete(v36[0]);
  return updated;
}

void sub_1ADEB87FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33)
{
  if (a32 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

_QWORD *fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Write(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + 4;
  std::ostream::write();
  fst::LatticeWeightTpl<float>::Write(v4, (uint64_t)a2);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
  {
    v5 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
    std::ostream::write();
    if ((int)(v5 >> 2) >= 1)
    {
      v6 = 0;
      v7 = v5 & 0x3FFFFFFFCLL;
      do
      {
        std::ostream::write();
        v6 += 4;
      }
      while (v7 != v6);
    }
  }
  return a2;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1ADEB8DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>::Type()
{
  unsigned __int8 v0;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  if ((v0 & 1) == 0
  {
    v2 = (std::string *)operator new();
    v3 = (_QWORD *)fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Type();
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "tropical"))
    {
      std::string::basic_string[abi:ne180100]<0>(v2, "standard");
    }
    else
    {
      v4 = fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Type();
      if (*(char *)(v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      }
      else
      {
        v5 = *(_OWORD *)v4;
        v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
        *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v5;
      }
    }
    fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>::Type(void)::type = (uint64_t)v2;
  }
  return fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>::Type(void)::type;
}

void sub_1ADEB8EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1ADEB918C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  int64x2_t v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  int64x2_t v30;
  int64x2_t v31;
  std::vector<int>::value_type __x;
  std::vector<int> v33;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v33.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(*(_QWORD *)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v17 = *(int64x2_t *)(v16 + 40);
      v18 = *(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56);
      if (v18)
        v19 = *(_QWORD *)(v16 + 56);
      else
        v19 = 0;
      if (v18)
      {
        v20 = 0;
        v21 = 0;
        v22 = (int *)(v19 + 48);
        do
        {
          v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            v25 = *((_QWORD *)v22 - 6);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            v17 = vaddq_s64(v17, vceqzq_s64(v26));
          }
          else
          {
            *v22 = v23;
            if (v20 != v21)
            {
              v30 = v17;
              v24 = (_QWORD *)(v19 + 56 * v21);
              *v24 = *((_QWORD *)v22 - 6);
              fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v24 + 1), (uint64_t)(v22 - 10));
              *(_DWORD *)(v19 + 56 * v21 + 48) = *v22;
              v14 = *v4;
              v17 = v30;
            }
            ++v21;
          }
          ++v20;
          v16 = *(_QWORD *)(v14 + 8 * v15);
          v27 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56)) >> 3);
          v22 += 14;
        }
        while (v20 < v27);
        v31 = v17;
      }
      else
      {
        v31 = *(int64x2_t *)(v16 + 40);
        v21 = 0;
        v27 = 0;
      }
      fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteArcs((_QWORD *)v16, v27 - v21);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 40) = v31;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v28 = *(int *)(a1 + 88);
  if ((_DWORD)v28 == -1)
  {
    v29 = v33.__begin_;
    if (!v33.__begin_)
      return;
  }
  else
  {
    v29 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v28];
  }
  v33.__end_ = v29;
  operator delete(v29);
}

void sub_1ADEB9458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteArcs(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    v2 = a2;
    v4 = a1[8] - 56;
    do
    {
      if (!*(_DWORD *)v4)
        --a1[5];
      if (!*(_DWORD *)(v4 + 4))
        --a1[6];
      v5 = *(void **)(v4 + 24);
      if (v5)
      {
        *(_QWORD *)(v4 + 32) = v5;
        operator delete(v5);
      }
      a1[8] = v4;
      v4 -= 56;
      --v2;
    }
    while (v2);
  }
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteStates(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2 != *(_QWORD *)(a1 + 64))
  {
    v3 = 0;
    v2 = *(_QWORD *)(a1 + 64);
    do
    {
      fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(*(_QWORD *)(v2 + 8 * v3++));
      v2 = *(_QWORD *)(a1 + 64);
    }
    while (v3 < (*(_QWORD *)(a1 + 72) - v2) >> 3);
  }
  *(_QWORD *)(a1 + 72) = v2;
  *(_DWORD *)(a1 + 88) = -1;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)
                                                             - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 56 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Flags_()
{
  return 15;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::SetValue(uint64_t a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  _BYTE *v18;
  uint64_t v19;
  const void *v20;
  size_t v21;
  _BOOL4 v22;
  uint64_t v23;
  float v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  const void *v29;
  size_t v30;
  _BYTE *v31;
  const void *v32;
  size_t v33;
  _BOOL4 v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  void *__p;
  _BYTE *v40;
  uint64_t v41;
  float v42;
  void *v43;
  _BYTE *v44;
  float v45;
  float v46;
  float v47;
  float v48;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
  v6 = (int *)(v5 + 56 * v4);
  v7 = *v6;
  v8 = v6[1];
  if (*v6 != v8)
    **(_QWORD **)(a1 + 16) &= ~0x20000uLL;
  if (v7)
  {
    if (!v8)
    {
      v9 = *(unint64_t **)(a1 + 16);
      v10 = *v9;
LABEL_8:
      *v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    v9 = *(unint64_t **)(a1 + 16);
    v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      *v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  v12 = v5 + 56 * v4;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v41);
  LODWORD(v37) = 0;
  v14 = *(float *)(v12 + 8);
  v13 = (float *)(v12 + 8);
  *(float *)&v37 = v14;
  v48 = *(float *)&v41;
  if (v14 != *(float *)&v41)
    goto LABEL_14;
  LODWORD(v37) = 0;
  *(float *)&v37 = v13[1];
  v48 = 0.0;
  v48 = v13[2];
  v47 = *((float *)&v41 + 1);
  v46 = v42;
  if (*(float *)&v37 != *((float *)&v41 + 1))
    goto LABEL_14;
  if (v48 == v46
    && (v15 = v5 + 56 * v4,
        v16 = *(const void **)(v15 + 24),
        v17 = *(_QWORD *)(v15 + 32) - (_QWORD)v16,
        v18 = v43,
        v17 == v44 - (_BYTE *)v43)
    && !memcmp(v16, v43, v17))
  {
    v22 = 0;
    if (v18)
    {
LABEL_23:
      v44 = v18;
      operator delete(v18);
    }
  }
  else
  {
LABEL_14:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v37);
    v48 = 0.0;
    v48 = *v13;
    v47 = *(float *)&v37;
    if (v48 != *(float *)&v37)
      goto LABEL_19;
    v48 = 0.0;
    v48 = v13[1];
    v47 = 0.0;
    v47 = v13[2];
    v46 = *((float *)&v37 + 1);
    v45 = v38;
    if (v48 != *((float *)&v37 + 1))
      goto LABEL_19;
    if (v47 == v45
      && (v19 = v5 + 56 * v4,
          v20 = *(const void **)(v19 + 24),
          v21 = *(_QWORD *)(v19 + 32) - (_QWORD)v20,
          v21 == v40 - (_BYTE *)__p))
    {
      v22 = memcmp(v20, __p, v21) != 0;
    }
    else
    {
LABEL_19:
      v22 = 1;
    }
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    v18 = v43;
    if (v43)
      goto LABEL_23;
  }
  if (v22)
    **(_QWORD **)(a1 + 16) &= ~0x100000000uLL;
  v23 = 0x30FC30007;
  if (*(_DWORD *)a2 == *v6 && *((_DWORD *)a2 + 1) == v6[1] && *((_DWORD *)a2 + 12) == *(_DWORD *)(v5 + 56 * v4 + 48))
    v23 = 0x3FFFFFFF0007;
  fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetArc(*(_QWORD **)(a1 + 8), a2, *(_QWORD *)(a1 + 24));
  v24 = *a2;
  v25 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 != v25)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v24 == 0.0)
  {
    v26 = *(unint64_t **)(a1 + 16);
    v28 = *v26 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v26 = v28;
    if (!v25)
    {
      v27 = v28 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v26 = v27;
      goto LABEL_37;
    }
  }
  else if (!v25)
  {
    v26 = *(unint64_t **)(a1 + 16);
    v27 = *v26;
LABEL_37:
    *v26 = v27 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v41);
  LODWORD(v37) = 0;
  *(float *)&v37 = a2[2];
  v48 = *(float *)&v41;
  if (*(float *)&v37 != *(float *)&v41)
    goto LABEL_43;
  LODWORD(v37) = 0;
  *(float *)&v37 = a2[3];
  v48 = 0.0;
  v48 = a2[4];
  v47 = *((float *)&v41 + 1);
  v46 = v42;
  if (*(float *)&v37 != *((float *)&v41 + 1))
    goto LABEL_43;
  if (v48 == v46
    && (v29 = (const void *)*((_QWORD *)a2 + 3),
        v30 = *((_QWORD *)a2 + 4) - (_QWORD)v29,
        v31 = v43,
        v30 == v44 - (_BYTE *)v43)
    && !memcmp(v29, v43, v30))
  {
    v34 = 0;
    if (v31)
    {
LABEL_52:
      v44 = v31;
      operator delete(v31);
    }
  }
  else
  {
LABEL_43:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v37);
    v48 = 0.0;
    v48 = a2[2];
    v47 = *(float *)&v37;
    if (v48 != *(float *)&v37)
      goto LABEL_48;
    v48 = 0.0;
    v48 = a2[3];
    v47 = 0.0;
    v47 = a2[4];
    v46 = *((float *)&v37 + 1);
    v45 = v38;
    if (v48 != *((float *)&v37 + 1))
      goto LABEL_48;
    if (v47 == v45
      && (v32 = (const void *)*((_QWORD *)a2 + 3), v33 = *((_QWORD *)a2 + 4) - (_QWORD)v32, v33 == v40 - (_BYTE *)__p))
    {
      v34 = memcmp(v32, __p, v33) != 0;
    }
    else
    {
LABEL_48:
      v34 = 1;
    }
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    v31 = v43;
    if (v43)
      goto LABEL_52;
  }
  v35 = *(unint64_t **)(a1 + 16);
  v36 = *v35;
  if (v34)
  {
    v36 = v36 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
    *v35 = v36;
  }
  *v35 = v36 & v23;
}

void sub_1ADEB9AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetArc(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;

  v4 = a1[7];
  v5 = (_DWORD *)(v4 + 56 * a3);
  if (!*v5)
    --a1[5];
  if (!*(_DWORD *)(v4 + 56 * a3 + 4))
    --a1[6];
  if (!*a2)
    ++a1[5];
  if (!a2[1])
    ++a1[6];
  *(_QWORD *)v5 = *(_QWORD *)a2;
  v6 = v4 + 56 * a3;
  result = fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(v6 + 8, (uint64_t)(a2 + 2));
  *(_DWORD *)(v6 + 48) = a2[12];
  return result;
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(_QWORD *a1, int a2, float *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 56))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 56);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(v8, a2, a3, v7);
  return fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), a3);
}

uint64_t fst::AddArcProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(unint64_t a1, int a2, float *a3, _DWORD *a4)
{
  float v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  size_t v13;
  _BYTE *v14;
  const void *v15;
  size_t v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t v20;
  float v21;
  void *__p;
  _BYTE *v23;
  uint64_t v24;
  float v25;
  void *v26;
  _BYTE *v27;
  float v28;
  float v29;
  float v30;
  float v31;

  v6 = *a3;
  v7 = *((_DWORD *)a3 + 1);
  v8 = a1 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*(_DWORD *)a3 == v7)
    v8 = a1;
  v9 = v8 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v7)
    v9 = v8 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  if (v6 == 0.0)
    v8 = v9;
  if (v7)
    v10 = v8;
  else
    v10 = v8 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  if (a4)
  {
    if (*a4 <= SLODWORD(v6))
      v11 = v10;
    else
      v11 = v10 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    if (a4[1] > v7)
      v10 = v11 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
    else
      v10 = v11;
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v24);
  LODWORD(v20) = 0;
  *(float *)&v20 = a3[2];
  v31 = *(float *)&v24;
  if (*(float *)&v20 != *(float *)&v24)
    goto LABEL_22;
  LODWORD(v20) = 0;
  *(float *)&v20 = a3[3];
  v31 = 0.0;
  v31 = a3[4];
  v30 = *((float *)&v24 + 1);
  v29 = v25;
  if (*(float *)&v20 != *((float *)&v24 + 1))
    goto LABEL_22;
  if (v31 == v29
    && (v12 = (const void *)*((_QWORD *)a3 + 3),
        v13 = *((_QWORD *)a3 + 4) - (_QWORD)v12,
        v14 = v26,
        v13 == v27 - (_BYTE *)v26)
    && !memcmp(v12, v26, v13))
  {
    v17 = 0;
    if (v14)
    {
LABEL_31:
      v27 = v14;
      operator delete(v14);
    }
  }
  else
  {
LABEL_22:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v20);
    v31 = 0.0;
    v31 = a3[2];
    v30 = *(float *)&v20;
    if (v31 != *(float *)&v20)
      goto LABEL_27;
    v31 = 0.0;
    v31 = a3[3];
    v30 = 0.0;
    v30 = a3[4];
    v29 = *((float *)&v20 + 1);
    v28 = v21;
    if (v31 != *((float *)&v20 + 1))
      goto LABEL_27;
    if (v30 == v28
      && (v15 = (const void *)*((_QWORD *)a3 + 3), v16 = *((_QWORD *)a3 + 4) - (_QWORD)v15, v16 == v23 - (_BYTE *)__p))
    {
      v17 = memcmp(v15, __p, v16) != 0;
    }
    else
    {
LABEL_27:
      v17 = 1;
    }
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    v14 = v26;
    if (v26)
      goto LABEL_31;
  }
  v18 = v10 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  if (!v17)
    v18 = v10;
  if (*((_DWORD *)a3 + 12) <= a2)
    v18 = v18 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  if ((v18 & 0x4000000000) != 0)
    return v18 & 0x5D7FFEB0007 | 0x2800000000;
  else
    return v18 & 0x5D7FFEB0007;
}

void sub_1ADEB9E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal(_QWORD *a1, int a2, uint64_t a3)
{
  int *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *__p;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;

  v6 = *(int **)(a1[8] + 8 * a2);
  v23 = *v6;
  v24 = *(_QWORD *)(v6 + 1);
  v26 = 0;
  v27 = 0;
  v25 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v25, *((const void **)v6 + 2), *((_QWORD *)v6 + 3), (uint64_t)(*((_QWORD *)v6 + 3) - *((_QWORD *)v6 + 2)) >> 2);
  v18 = *(_DWORD *)a3;
  v19 = *(_QWORD *)(a3 + 4);
  v21 = 0;
  v22 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal((uint64_t)a1, a2, &v18);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v13 = v23;
  v14 = v24;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, v25, (uint64_t)v26, (v26 - (_BYTE *)v25) >> 2);
  v8 = *(_DWORD *)a3;
  v9 = *(_QWORD *)(a3 + 4);
  v11 = 0;
  v12 = 0;
  v10 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v10, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>(v7, (uint64_t)&v13, (uint64_t)&v8);
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void sub_1ADEBA010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  v24 = *(void **)(v22 - 56);
  if (v24)
  {
    *(_QWORD *)(v22 - 48) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SetFinalProperties<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  size_t v7;
  _BYTE *v8;
  const void *v9;
  size_t v10;
  _BOOL4 v11;
  const void *v12;
  size_t v13;
  _BYTE *v14;
  const void *v15;
  size_t v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t v20;
  float v21;
  void *__p;
  _BYTE *v23;
  uint64_t v24;
  float v25;
  void *v26;
  _BYTE *v27;
  float v28;
  float v29;
  float v30;
  float v31;

  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v24);
  LODWORD(v20) = 0;
  LODWORD(v20) = *(_DWORD *)a2;
  v31 = *(float *)&v24;
  if (*(float *)&v20 == *(float *)&v24)
  {
    LODWORD(v20) = 0;
    LODWORD(v20) = *(_DWORD *)(a2 + 4);
    v31 = 0.0;
    v31 = *(float *)(a2 + 8);
    v30 = *((float *)&v24 + 1);
    v29 = v25;
    if (*(float *)&v20 == *((float *)&v24 + 1) && v31 == v29)
    {
      v6 = *(const void **)(a2 + 16);
      v7 = *(_QWORD *)(a2 + 24) - (_QWORD)v6;
      v8 = v26;
      if (v7 == v27 - (_BYTE *)v26 && !memcmp(v6, v26, v7))
      {
        v11 = 0;
        if (!v8)
          goto LABEL_16;
        goto LABEL_15;
      }
    }
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v20);
  v31 = 0.0;
  v31 = *(float *)a2;
  v30 = *(float *)&v20;
  if (v31 != *(float *)&v20)
    goto LABEL_11;
  v31 = 0.0;
  v31 = *(float *)(a2 + 4);
  v30 = 0.0;
  v30 = *(float *)(a2 + 8);
  v29 = *((float *)&v20 + 1);
  v28 = v21;
  if (v31 != *((float *)&v20 + 1))
    goto LABEL_11;
  if (v30 == v28
    && (v9 = *(const void **)(a2 + 16), v10 = *(_QWORD *)(a2 + 24) - (_QWORD)v9, v10 == v23 - (_BYTE *)__p))
  {
    v11 = memcmp(v9, __p, v10) != 0;
  }
  else
  {
LABEL_11:
    v11 = 1;
  }
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  v8 = v26;
  if (v26)
  {
LABEL_15:
    v27 = v8;
    operator delete(v8);
  }
LABEL_16:
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v24);
  LODWORD(v20) = 0;
  LODWORD(v20) = *(_DWORD *)a3;
  v31 = *(float *)&v24;
  if (*(float *)&v20 != *(float *)&v24)
    goto LABEL_21;
  LODWORD(v20) = 0;
  LODWORD(v20) = *(_DWORD *)(a3 + 4);
  v31 = 0.0;
  v31 = *(float *)(a3 + 8);
  v30 = *((float *)&v24 + 1);
  v29 = v25;
  if (*(float *)&v20 != *((float *)&v24 + 1))
    goto LABEL_21;
  if (v31 == v29
    && (v12 = *(const void **)(a3 + 16), v13 = *(_QWORD *)(a3 + 24) - (_QWORD)v12, v14 = v26, v13 == v27 - (_BYTE *)v26)
    && !memcmp(v12, v26, v13))
  {
    v17 = 0;
    if (v14)
    {
LABEL_30:
      v27 = v14;
      operator delete(v14);
    }
  }
  else
  {
LABEL_21:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v20);
    v31 = 0.0;
    v31 = *(float *)a3;
    v30 = *(float *)&v20;
    if (v31 != *(float *)&v20)
      goto LABEL_26;
    v31 = 0.0;
    v31 = *(float *)(a3 + 4);
    v30 = 0.0;
    v30 = *(float *)(a3 + 8);
    v29 = *((float *)&v20 + 1);
    v28 = v21;
    if (v31 != *((float *)&v20 + 1))
      goto LABEL_26;
    if (v30 == v28
      && (v15 = *(const void **)(a3 + 16), v16 = *(_QWORD *)(a3 + 24) - (_QWORD)v15, v16 == v23 - (_BYTE *)__p))
    {
      v17 = memcmp(v15, __p, v16) != 0;
    }
    else
    {
LABEL_26:
      v17 = 1;
    }
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    v14 = v26;
    if (v26)
      goto LABEL_30;
  }
  v18 = a1 & 0xFFFFFFFEFFFFFFFFLL;
  if (!v11)
    v18 = a1;
  if (v17)
    v18 = v18 & 0x3FCFFFF0007 | 0x100000000;
  return v18 & 0x3FFFFFF0007;
}

void sub_1ADEBA3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  void *v10[2];
  void *__p;
  void *v12;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 24))(*a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v7);
        for (i = a2[5]; ; a2[5] = i)
        {
          v9 = a2[2];
          if (i >= 0x6DB6DB6DB6DB6DB7 * ((a2[3] - v9) >> 3))
            break;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 208))(a1, v7, v9 + 56 * i);
          i = a2[5] + 1;
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(v10, *a2, v7);
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 184))(a1, v7, v10);
        if (__p)
        {
          v12 = __p;
          operator delete(__p);
        }
        v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1ADEBA5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetState(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _DWORD *v15;
  unint64_t v16;

  a1[5] = 0;
  v4 = a1 + 2;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](a1 + 2);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a2);
  std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::reserve(v4, v5);
  v6 = *a1;
  v16 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v14);
  while (1)
  {
    if (!v14[0])
    {
      if (v16 >= v14[2])
        goto LABEL_16;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v14[0] + 24))(v14[0]))
      break;
    if (v14[0])
    {
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v14[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = v14[1] + 56 * v16;
LABEL_8:
    v8 = a1[3];
    if (v8 >= a1[4])
    {
      v9 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(v4, v7);
    }
    else
    {
      std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>((uint64_t)(a1 + 4), a1[3], v7);
      v9 = v8 + 56;
      a1[3] = v8 + 56;
    }
    a1[3] = v9;
    if (v14[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v14[0] + 40))(v14[0]);
    else
      ++v16;
  }
  if (v14[0])
  {
    (*(void (**)(void))(*(_QWORD *)v14[0] + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (v15)
    --*v15;
LABEL_18:
  v10 = a1[2];
  v11 = (uint64_t *)a1[3];
  v12 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v11 - v10) >> 3));
  if (v11 == (uint64_t *)v10)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*,false>(v10, v11, (uint64_t)v14, v13, 1);
}

void sub_1ADEBA770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v13 + 24) = v14;
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*,false>(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v29;
  void *__p;
  void *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  int v54;

void sub_1ADEBABF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  v27 = *(void **)(v25 - 120);
  if (v27)
  {
    *(_QWORD *)(v25 - 112) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t i;
  int v10;
  uint64_t *v11;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *__p;
  void *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  int v45;

  if (a1 != a2)
  {
    v3 = a1 + 7;
    if (a1 + 7 != a2)
    {
      v4 = 0;
      v5 = a1;
      do
      {
        v6 = v3;
        v39 = v5[7];
        v40 = *((_DWORD *)v5 + 16);
        v41 = *(_QWORD *)((char *)v5 + 68);
        v43 = 0;
        v44 = 0;
        v42 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, (const void *)v5[10], v5[11], (uint64_t)(v5[11] - v5[10]) >> 2);
        v45 = *((_DWORD *)v5 + 26);
        v32 = *v5;
        v33 = *((_DWORD *)v5 + 2);
        v34 = *(_QWORD *)((char *)v5 + 12);
        v36 = 0;
        v37 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v5[3], v5[4], (uint64_t)(v5[4] - v5[3]) >> 2);
        v38 = *((_DWORD *)v5 + 12);
        v7 = v39;
        v8 = v32;
        if (__p)
        {
          v36 = __p;
          operator delete(__p);
        }
        if (v42)
        {
          v43 = v42;
          operator delete(v42);
        }
        if (v7 < v8)
        {
          v25 = *v6;
          v26 = *((_DWORD *)v5 + 16);
          v27 = *(_QWORD *)((char *)v5 + 68);
          v29 = 0;
          v30 = 0;
          v28 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v28, (const void *)v5[10], v5[11], (uint64_t)(v5[11] - v5[10]) >> 2);
          v31 = *((_DWORD *)v5 + 26);
          for (i = v4; ; i -= 56)
          {
            *(_QWORD *)((char *)a1 + i + 56) = *(_QWORD *)((char *)a1 + i);
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)a1 + i + 64, (uint64_t)a1 + i + 8);
            *(_DWORD *)((char *)a1 + i + 104) = *(_DWORD *)((char *)a1 + i + 48);
            if (!i)
            {
              v11 = a1;
              goto LABEL_19;
            }
            v18 = v25;
            v19 = v26;
            v20 = v27;
            v22 = 0;
            v23 = 0;
            v21 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, v28, (uint64_t)v29, (v29 - (_BYTE *)v28) >> 2);
            v24 = v31;
            v13 = *(_QWORD *)((char *)a1 + i - 56);
            v15 = 0;
            v16 = 0;
            v14 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v14, *(const void **)((char *)a1 + i - 32), *(_QWORD *)((char *)a1 + i - 24), (uint64_t)(*(_QWORD *)((char *)a1 + i - 24) - *(_QWORD *)((char *)a1 + i - 32)) >> 2);
            v17 = *(_DWORD *)((char *)a1 + i - 8);
            v10 = v18;
            if (v14)
            {
              v15 = v14;
              operator delete(v14);
            }
            if (v21)
            {
              v22 = v21;
              operator delete(v21);
            }
            if (v10 >= (int)v13)
              break;
          }
          v11 = (_QWORD *)((char *)a1 + i);
LABEL_19:
          *v11 = v25;
          *(_DWORD *)((char *)a1 + i + 8) = v26;
          *(uint64_t *)((char *)v11 + 12) = v27;
          if (v11 != &v25)
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v11 + 24, (char *)v28, (uint64_t)v29, (v29 - (_BYTE *)v28) >> 2);
          *((_DWORD *)v11 + 12) = v31;
          if (v28)
          {
            v29 = v28;
            operator delete(v28);
          }
        }
        v3 = v6 + 7;
        v4 += 56;
        v5 = v6;
      }
      while (v6 + 7 != a2);
    }
  }
}

void sub_1ADEBAEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _DWORD *v4;
  _QWORD *v5;
  int v6;
  int v7;
  _DWORD *v8;
  const void *v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void *__p;
  void *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  int v46;

  if ((_QWORD *)a1 != a2)
  {
    v2 = (_QWORD *)a1;
    v3 = (_QWORD *)(a1 + 56);
    if ((_QWORD *)(a1 + 56) != a2)
    {
      v4 = (_DWORD *)(a1 + 104);
      do
      {
        v5 = v3;
        v40 = v2[7];
        v41 = *((_DWORD *)v2 + 16);
        v42 = *(_QWORD *)((char *)v2 + 68);
        v44 = 0;
        v45 = 0;
        v43 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v43, (const void *)v2[10], v2[11], (uint64_t)(v2[11] - v2[10]) >> 2);
        v46 = *((_DWORD *)v2 + 26);
        v33 = *v2;
        v34 = *((_DWORD *)v2 + 2);
        v35 = *(_QWORD *)((char *)v2 + 12);
        v37 = 0;
        v38 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v2[3], v2[4], (uint64_t)(v2[4] - v2[3]) >> 2);
        v39 = *((_DWORD *)v2 + 12);
        v6 = v40;
        v7 = v33;
        if (__p)
        {
          v37 = __p;
          operator delete(__p);
        }
        if (v43)
        {
          v44 = v43;
          operator delete(v43);
        }
        if (v6 < v7)
        {
          v26 = *v5;
          v27 = *((_DWORD *)v2 + 16);
          v28 = *(_QWORD *)((char *)v2 + 68);
          v30 = 0;
          v31 = 0;
          v29 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, (const void *)v2[10], v2[11], (uint64_t)(v2[11] - v2[10]) >> 2);
          v32 = *((_DWORD *)v2 + 26);
          v8 = v4;
          do
          {
            *((_QWORD *)v8 - 6) = *((_QWORD *)v8 - 13);
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v8 - 10), (uint64_t)(v8 - 24));
            *v8 = *(v8 - 14);
            v19 = v26;
            v20 = v27;
            v21 = v28;
            v23 = 0;
            v24 = 0;
            v22 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, v29, (uint64_t)v30, (v30 - (_BYTE *)v29) >> 2);
            v25 = v32;
            v14 = *((_QWORD *)v8 - 20);
            v16 = 0;
            v17 = 0;
            v9 = (const void *)*((_QWORD *)v8 - 17);
            v10 = *((_QWORD *)v8 - 16);
            v15 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, v9, v10, (v10 - (uint64_t)v9) >> 2);
            v18 = *(v8 - 28);
            v11 = v19;
            if (v15)
            {
              v16 = v15;
              operator delete(v15);
            }
            if (v22)
            {
              v23 = v22;
              operator delete(v22);
            }
            v8 -= 14;
          }
          while (v11 < (int)v14);
          *((_QWORD *)v8 - 6) = v26;
          v12 = v8 - 12;
          v12[2] = v27;
          *(_QWORD *)(v12 + 3) = v28;
          if (v8 - 12 != (_DWORD *)&v26)
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v8 - 24, (char *)v29, (uint64_t)v30, (v30 - (_BYTE *)v29) >> 2);
          *v8 = v32;
          if (v29)
          {
            v30 = v29;
            operator delete(v29);
          }
        }
        v3 = v5 + 7;
        v4 += 14;
        v2 = v5;
      }
      while (v5 + 7 != a2);
    }
  }
}

void sub_1ADEBB1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  uint64_t v7;
  int v8;
  const void *v9;
  uint64_t v10;
  int v11;
  const void *v12;
  uint64_t v13;
  int v14;
  const void *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  const void *v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *__p;
  void *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  int v91;

  v85 = *(_QWORD *)a2;
  v86 = *(_DWORD *)(a2 + 8);
  v87 = *(_QWORD *)(a2 + 12);
  v89 = 0;
  v90 = 0;
  v88 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v88, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  v91 = *(_DWORD *)(a2 + 48);
  v78 = *(_QWORD *)a1;
  v79 = *(_DWORD *)(a1 + 8);
  v80 = *(_QWORD *)(a1 + 12);
  v82 = 0;
  v83 = 0;
  v6 = *(const void **)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v81 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v81, v6, v7, (v7 - (uint64_t)v6) >> 2);
  v84 = *(_DWORD *)(a1 + 48);
  v8 = v85;
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v8 < (int)v78)
  {
    v43 = *(_QWORD *)a3;
    v44 = *(_DWORD *)(a3 + 8);
    v45 = *(_QWORD *)(a3 + 12);
    v47 = 0;
    v48 = 0;
    v46 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v46, *(const void **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
    v49 = *(_DWORD *)(a3 + 48);
    v36 = *(_QWORD *)a2;
    v37 = *(_DWORD *)(a2 + 8);
    v38 = *(_QWORD *)(a2 + 12);
    v40 = 0;
    v41 = 0;
    v9 = *(const void **)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 32);
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v9, v10, (v10 - (uint64_t)v9) >> 2);
    v42 = *(_DWORD *)(a2 + 48);
    v11 = v43;
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
    }
    if (v11 < (int)v36)
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a1, (uint64_t *)a3);
      return 1;
    }
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
    v29 = *(_QWORD *)a3;
    v30 = *(_DWORD *)(a3 + 8);
    v31 = *(_QWORD *)(a3 + 12);
    v33 = 0;
    v34 = 0;
    v32 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v32, *(const void **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
    v35 = *(_DWORD *)(a3 + 48);
    v24 = *(_QWORD *)a2;
    v26 = 0;
    v27 = 0;
    v20 = *(const void **)(a2 + 24);
    v21 = *(_QWORD *)(a2 + 32);
    v25 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v25, v20, v21, (v21 - (uint64_t)v20) >> 2);
    v28 = *(_DWORD *)(a2 + 48);
    v22 = v29;
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    if (v22 >= (int)v24)
      return 1;
    v18 = (uint64_t *)a2;
    v19 = (uint64_t *)a3;
LABEL_29:
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(v18, v19);
    return 2;
  }
  v71 = *(_QWORD *)a3;
  v72 = *(_DWORD *)(a3 + 8);
  v73 = *(_QWORD *)(a3 + 12);
  v75 = 0;
  v76 = 0;
  v74 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v74, *(const void **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  v77 = *(_DWORD *)(a3 + 48);
  v64 = *(_QWORD *)a2;
  v65 = *(_DWORD *)(a2 + 8);
  v66 = *(_QWORD *)(a2 + 12);
  v68 = 0;
  v69 = 0;
  v12 = *(const void **)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v67 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v67, v12, v13, (v13 - (uint64_t)v12) >> 2);
  v70 = *(_DWORD *)(a2 + 48);
  v14 = v71;
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  if (v14 < (int)v64)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
    v57 = *(_QWORD *)a2;
    v58 = *(_DWORD *)(a2 + 8);
    v59 = *(_QWORD *)(a2 + 12);
    v61 = 0;
    v62 = 0;
    v60 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v60, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
    v63 = *(_DWORD *)(a2 + 48);
    v50 = *(_QWORD *)a1;
    v51 = *(_DWORD *)(a1 + 8);
    v52 = *(_QWORD *)(a1 + 12);
    v54 = 0;
    v55 = 0;
    v15 = *(const void **)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 32);
    v53 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, v15, v16, (v16 - (uint64_t)v15) >> 2);
    v56 = *(_DWORD *)(a1 + 48);
    v17 = v57;
    if (v53)
    {
      v54 = v53;
      operator delete(v53);
    }
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    if (v17 >= (int)v50)
      return 1;
    v18 = (uint64_t *)a1;
    v19 = (uint64_t *)a2;
    goto LABEL_29;
  }
  return 0;
}

void sub_1ADEBB648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &>(unint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  int v7;
  const void *v8;
  uint64_t v9;
  int v10;
  const void *v11;
  uint64_t v12;
  int v13;
  const void *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  void *__p;
  void *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  void *v108;
  _BYTE *v109;
  uint64_t v110;
  int v111;

  v3 = a1;
  v105 = *(_QWORD *)a1;
  v4 = a1 + 8;
  v106 = *(_DWORD *)(a1 + 8);
  v107 = *(_QWORD *)(a1 + 12);
  v109 = 0;
  v110 = 0;
  v108 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v108, *(const void **)(v3 + 24), *(_QWORD *)(v3 + 32), (uint64_t)(*(_QWORD *)(v3 + 32) - *(_QWORD *)(v3 + 24)) >> 2);
  v111 = *(_DWORD *)(v3 + 48);
  v98 = v105;
  v99 = v106;
  v100 = v107;
  v102 = 0;
  v103 = 0;
  v101 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v101, v108, (uint64_t)v109, (v109 - (_BYTE *)v108) >> 2);
  v21 = v4;
  v104 = v111;
  v91 = *(a2 - 7);
  v92 = *((_DWORD *)a2 - 12);
  v93 = *(uint64_t *)((char *)a2 - 44);
  v95 = 0;
  v96 = 0;
  v5 = (const void *)*(a2 - 4);
  v6 = *(a2 - 3);
  v94 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v94, v5, v6, (v6 - (uint64_t)v5) >> 2);
  v97 = *((_DWORD *)a2 - 2);
  v7 = v98;
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  v22 = v3;
  if (v7 >= (int)v91)
  {
    for (v3 += 56; v3 < (unint64_t)a2; v3 += 56)
    {
      v70 = v105;
      v71 = v106;
      v72 = v107;
      v74 = 0;
      v75 = 0;
      v73 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v73, v108, (uint64_t)v109, (v109 - (_BYTE *)v108) >> 2);
      v76 = v111;
      v63 = *(_QWORD *)v3;
      v64 = *(_DWORD *)(v3 + 8);
      v65 = *(_QWORD *)(v3 + 12);
      v67 = 0;
      v68 = 0;
      v11 = *(const void **)(v3 + 24);
      v12 = *(_QWORD *)(v3 + 32);
      v66 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v66, v11, v12, (v12 - (uint64_t)v11) >> 2);
      v69 = *(_DWORD *)(v3 + 48);
      v13 = v70;
      if (v66)
      {
        v67 = v66;
        operator delete(v66);
      }
      if (v73)
      {
        v74 = v73;
        operator delete(v73);
      }
      if (v13 < (int)v63)
        break;
    }
  }
  else
  {
    do
    {
      v84 = v105;
      v85 = v106;
      v86 = v107;
      v88 = 0;
      v89 = 0;
      v87 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v87, v108, (uint64_t)v109, (v109 - (_BYTE *)v108) >> 2);
      v90 = v111;
      v77 = *(_QWORD *)(v3 + 56);
      v78 = *(_DWORD *)(v3 + 64);
      v79 = *(_QWORD *)(v3 + 68);
      v81 = 0;
      v82 = 0;
      v8 = *(const void **)(v3 + 80);
      v9 = *(_QWORD *)(v3 + 88);
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v8, v9, (v9 - (uint64_t)v8) >> 2);
      v83 = *(_DWORD *)(v3 + 104);
      v10 = v84;
      if (__p)
      {
        v81 = __p;
        operator delete(__p);
      }
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
      v3 += 56;
    }
    while (v10 >= (int)v77);
  }
  if (v3 < (unint64_t)a2)
  {
    do
    {
      v56 = v105;
      v57 = v106;
      v58 = v107;
      v60 = 0;
      v61 = 0;
      v59 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v59, v108, (uint64_t)v109, (v109 - (_BYTE *)v108) >> 2);
      v62 = v111;
      v49 = *(a2 - 7);
      v50 = *((_DWORD *)a2 - 12);
      v51 = *(uint64_t *)((char *)a2 - 44);
      v53 = 0;
      v54 = 0;
      v14 = (const void *)*(a2 - 4);
      v15 = *(a2 - 3);
      v52 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v52, v14, v15, (v15 - (uint64_t)v14) >> 2);
      v55 = *((_DWORD *)a2 - 2);
      v16 = v56;
      if (v52)
      {
        v53 = v52;
        operator delete(v52);
      }
      if (v59)
      {
        v60 = v59;
        operator delete(v59);
      }
      a2 -= 7;
    }
    while (v16 < (int)v49);
  }
  while (v3 < (unint64_t)a2)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)v3, a2);
    do
    {
      v42 = v105;
      v43 = v106;
      v44 = v107;
      v46 = 0;
      v47 = 0;
      v45 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v45, v108, (uint64_t)v109, (v109 - (_BYTE *)v108) >> 2);
      v48 = v111;
      v35 = *(_QWORD *)(v3 + 56);
      v36 = *(_DWORD *)(v3 + 64);
      v37 = *(_QWORD *)(v3 + 68);
      v39 = 0;
      v40 = 0;
      v38 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v38, *(const void **)(v3 + 80), *(_QWORD *)(v3 + 88), (uint64_t)(*(_QWORD *)(v3 + 88) - *(_QWORD *)(v3 + 80)) >> 2);
      v41 = *(_DWORD *)(v3 + 104);
      v17 = v42;
      v18 = v35;
      if (v38)
      {
        v39 = v38;
        operator delete(v38);
      }
      if (v45)
      {
        v46 = v45;
        operator delete(v45);
      }
      v3 += 56;
    }
    while (v17 >= v18);
    do
    {
      v28 = v105;
      v29 = v106;
      v30 = v107;
      v32 = 0;
      v33 = 0;
      v31 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31, v108, (uint64_t)v109, (v109 - (_BYTE *)v108) >> 2);
      v34 = v111;
      v23 = *(a2 - 7);
      v25 = 0;
      v26 = 0;
      v24 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, (const void *)*(a2 - 4), *(a2 - 3), (*(a2 - 3) - *(a2 - 4)) >> 2);
      v27 = *((_DWORD *)a2 - 2);
      v19 = v28;
      if (v24)
      {
        v25 = v24;
        operator delete(v24);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      a2 -= 7;
    }
    while (v19 < (int)v23);
  }
  if (v3 - 56 != v22)
  {
    *(_QWORD *)v22 = *(_QWORD *)(v3 - 56);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(v21, v3 - 48);
    *(_DWORD *)(v22 + 48) = *(_DWORD *)(v3 - 8);
  }
  *(_QWORD *)(v3 - 56) = v105;
  *(_DWORD *)(v3 - 48) = v106;
  *(_QWORD *)(v3 - 44) = v107;
  if ((int *)(v3 - 48) != &v106)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 - 32), (char *)v108, (uint64_t)v109, (v109 - (_BYTE *)v108) >> 2);
  *(_DWORD *)(v3 - 8) = v111;
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  return v3;
}

void sub_1ADEBBC74(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(_QWORD *)(v1 - 168) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 120);
  if (v4)
  {
    *(_QWORD *)(v1 - 112) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t *i;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  void *v24;
  void *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  void *__p;
  void *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  void *v94;
  _BYTE *v95;
  uint64_t v96;
  int v97;

  v91 = *a1;
  v21 = (uint64_t)(a1 + 1);
  v92 = *((_DWORD *)a1 + 2);
  v93 = *(uint64_t *)((char *)a1 + 12);
  v95 = 0;
  v96 = 0;
  v94 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v94, (const void *)a1[3], a1[4], (a1[4] - a1[3]) >> 2);
  v4 = 0;
  v22 = a1;
  v97 = *((_DWORD *)a1 + 12);
  do
  {
    v84 = v22[v4 + 7];
    v85 = v22[v4 + 8];
    v86 = *(uint64_t *)((char *)&v22[v4 + 8] + 4);
    v88 = 0;
    v89 = 0;
    v87 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v87, (const void *)v22[v4 + 10], v22[v4 + 11], (v22[v4 + 11] - v22[v4 + 10]) >> 2);
    v90 = v22[v4 + 13];
    v77 = v91;
    v78 = v92;
    v79 = v93;
    v81 = 0;
    v82 = 0;
    v80 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v80, v94, (uint64_t)v95, (v95 - (_BYTE *)v94) >> 2);
    v83 = v97;
    v5 = v84;
    if (v80)
    {
      v81 = v80;
      operator delete(v80);
    }
    if (v87)
    {
      v88 = v87;
      operator delete(v87);
    }
    v4 += 7;
  }
  while (v5 < (int)v77);
  v6 = (unint64_t)&v22[v4];
  if (v4 == 7)
  {
    if (v6 >= (unint64_t)a2)
    {
      i = a2;
    }
    else
    {
      for (i = a2 - 7; ; i -= 7)
      {
        v70 = *i;
        v71 = *((_DWORD *)i + 2);
        v72 = *(uint64_t *)((char *)i + 12);
        v74 = 0;
        v75 = 0;
        v73 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v73, (const void *)i[3], i[4], (i[4] - i[3]) >> 2);
        v76 = *((_DWORD *)i + 12);
        v63 = v91;
        v64 = v92;
        v65 = v93;
        v67 = 0;
        v68 = 0;
        v66 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v66, v94, (uint64_t)v95, (v95 - (_BYTE *)v94) >> 2);
        v69 = v97;
        v10 = v70;
        if (v66)
        {
          v67 = v66;
          operator delete(v66);
        }
        if (v73)
        {
          v74 = v73;
          operator delete(v73);
        }
        if (v10 < (int)v63 || v6 >= (unint64_t)i)
          break;
      }
    }
  }
  else
  {
    i = a2;
    do
    {
      v8 = *(i - 7);
      i -= 7;
      v56 = v8;
      v57 = *((_DWORD *)i + 2);
      v58 = *(uint64_t *)((char *)i + 12);
      v60 = 0;
      v61 = 0;
      v59 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v59, (const void *)i[3], i[4], (i[4] - i[3]) >> 2);
      v62 = *((_DWORD *)a2 - 2);
      v49 = v91;
      v50 = v92;
      v51 = v93;
      v53 = 0;
      v54 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v94, (uint64_t)v95, (v95 - (_BYTE *)v94) >> 2);
      v55 = v97;
      v9 = v56;
      if (__p)
      {
        v53 = __p;
        operator delete(__p);
      }
      if (v59)
      {
        v60 = v59;
        operator delete(v59);
      }
      a2 = i;
    }
    while (v9 >= (int)v49);
  }
  if (v6 >= (unint64_t)i)
  {
    v11 = (unint64_t)&v22[v4];
  }
  else
  {
    v11 = (unint64_t)&v22[v4];
    v12 = (unint64_t)i;
    do
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)v11, (uint64_t *)v12);
      v13 = v11;
      do
      {
        v14 = *(_QWORD *)(v11 + 56);
        v11 += 56;
        v42 = v14;
        v43 = *(_DWORD *)(v11 + 8);
        v44 = *(_QWORD *)(v11 + 12);
        v46 = 0;
        v47 = 0;
        v45 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v45, *(const void **)(v11 + 24), *(_QWORD *)(v11 + 32), (uint64_t)(*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24)) >> 2);
        v48 = *(_DWORD *)(v13 + 104);
        v35 = v91;
        v36 = v92;
        v37 = v93;
        v39 = 0;
        v40 = 0;
        v38 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v38, v94, (uint64_t)v95, (v95 - (_BYTE *)v94) >> 2);
        v41 = v97;
        v15 = v42;
        v16 = v35;
        if (v38)
        {
          v39 = v38;
          operator delete(v38);
        }
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
        }
        v13 = v11;
      }
      while (v15 < v16);
      v17 = v12;
      do
      {
        v18 = *(_QWORD *)(v12 - 56);
        v12 -= 56;
        v28 = v18;
        v29 = *(_DWORD *)(v12 + 8);
        v30 = *(_QWORD *)(v12 + 12);
        v32 = 0;
        v33 = 0;
        v31 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31, *(const void **)(v12 + 24), *(_QWORD *)(v12 + 32), (uint64_t)(*(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24)) >> 2);
        v34 = *(_DWORD *)(v17 - 8);
        v23 = v91;
        v25 = 0;
        v26 = 0;
        v24 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v24, v94, (uint64_t)v95, (v95 - (_BYTE *)v94) >> 2);
        v27 = v97;
        v19 = v28;
        if (v24)
        {
          v25 = v24;
          operator delete(v24);
        }
        if (v31)
        {
          v32 = v31;
          operator delete(v31);
        }
        v17 = v12;
      }
      while (v19 >= v23);
    }
    while (v11 < v12);
  }
  if ((uint64_t *)(v11 - 56) != v22)
  {
    *v22 = *(_QWORD *)(v11 - 56);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(v21, v11 - 48);
    *((_DWORD *)v22 + 12) = *(_DWORD *)(v11 - 8);
  }
  *(_QWORD *)(v11 - 56) = v91;
  *(_DWORD *)(v11 - 48) = v92;
  *(_QWORD *)(v11 - 44) = v93;
  if ((int *)(v11 - 48) != &v92)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v11 - 32), (char *)v94, (uint64_t)v95, (v95 - (_BYTE *)v94) >> 2);
  *(_DWORD *)(v11 - 8) = v97;
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  return v11 - 56;
}

void sub_1ADEBC28C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(_QWORD *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BOOL8 result;
  const void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t i;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  void *v33;
  _BYTE *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *__p;
  void *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  int v64;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v58 = *(_QWORD *)(a2 - 56);
      v59 = *(_DWORD *)(a2 - 48);
      v60 = *(_QWORD *)(a2 - 44);
      v62 = 0;
      v63 = 0;
      v61 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v61, *(const void **)(a2 - 32), *(_QWORD *)(a2 - 24), (uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 2);
      v64 = *(_DWORD *)(a2 - 8);
      v51 = *(_QWORD *)a1;
      v52 = *(_DWORD *)(a1 + 8);
      v53 = *(_QWORD *)(a1 + 12);
      v55 = 0;
      v56 = 0;
      v5 = *(const void **)(a1 + 24);
      v6 = *(_QWORD *)(a1 + 32);
      v54 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v54, v5, v6, (v6 - (uint64_t)v5) >> 2);
      v57 = *(_DWORD *)(a1 + 48);
      v7 = v58;
      if (v54)
      {
        v55 = v54;
        operator delete(v54);
      }
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
      }
      if (v7 < (int)v51)
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a1, (uint64_t *)(a2 - 56));
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a1 + 56, a2 - 56);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a1 + 56, a1 + 112, a2 - 56);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return 1;
    default:
      v8 = a1 + 112;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a1 + 56, a1 + 112);
      v9 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v10 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v44 = *(_QWORD *)v9;
    v45 = *(_DWORD *)(v9 + 8);
    v46 = *(_QWORD *)(v9 + 12);
    v48 = 0;
    v49 = 0;
    v47 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v47, *(const void **)(v9 + 24), *(_QWORD *)(v9 + 32), (uint64_t)(*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24)) >> 2);
    v50 = *(_DWORD *)(v9 + 48);
    v37 = *(_QWORD *)v8;
    v38 = *(_DWORD *)(v8 + 8);
    v39 = *(_QWORD *)(v8 + 12);
    v41 = 0;
    v42 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v8 + 24), *(_QWORD *)(v8 + 32), (uint64_t)(*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24)) >> 2);
    v43 = *(_DWORD *)(v8 + 48);
    v11 = v44;
    v12 = v37;
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    if (v11 < v12)
    {
      v30 = *(_QWORD *)v9;
      v31 = *(_DWORD *)(v9 + 8);
      v32 = *(_QWORD *)(v9 + 12);
      v34 = 0;
      v35 = 0;
      v33 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, *(const void **)(v9 + 24), *(_QWORD *)(v9 + 32), (uint64_t)(*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24)) >> 2);
      v36 = *(_DWORD *)(v9 + 48);
      for (i = v10; ; i -= 56)
      {
        *(_QWORD *)(a1 + i + 168) = *(_QWORD *)(a1 + i + 112);
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(a1 + i + 176, a1 + i + 120);
        *(_DWORD *)(a1 + i + 216) = *(_DWORD *)(a1 + i + 160);
        if (i == -112)
        {
          v15 = a1;
          goto LABEL_26;
        }
        v23 = v30;
        v24 = v31;
        v25 = v32;
        v27 = 0;
        v28 = 0;
        v26 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v26, v33, (uint64_t)v34, (v34 - (_BYTE *)v33) >> 2);
        v29 = v36;
        v18 = *(_QWORD *)(a1 + i + 56);
        v20 = 0;
        v21 = 0;
        v19 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v19, *(const void **)(a1 + i + 80), *(_QWORD *)(a1 + i + 88), (uint64_t)(*(_QWORD *)(a1 + i + 88) - *(_QWORD *)(a1 + i + 80)) >> 2);
        v22 = *(_DWORD *)(a1 + i + 104);
        v14 = v23;
        if (v19)
        {
          v20 = v19;
          operator delete(v19);
        }
        if (v26)
        {
          v27 = v26;
          operator delete(v26);
        }
        if (v14 >= (int)v18)
          break;
      }
      v15 = a1 + i + 112;
LABEL_26:
      *(_QWORD *)v15 = v30;
      *(_DWORD *)(a1 + i + 120) = v31;
      *(_QWORD *)(v15 + 12) = v32;
      if ((uint64_t *)v15 != &v30)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v15 + 24), (char *)v33, (uint64_t)v34, (v34 - (_BYTE *)v33) >> 2);
      *(_DWORD *)(v15 + 48) = v36;
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (++v16 == 8)
        return v9 + 56 == a2;
    }
    v8 = v9;
    v10 += 56;
    v9 += 56;
    if (v9 == a2)
      return 1;
  }
}

void sub_1ADEBC7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  void *v47;

  v47 = *(void **)(v45 - 120);
  if (v47)
  {
    *(_QWORD *)(v45 - 112) = v47;
    operator delete(v47);
  }
  _Unwind_Resume(exception_object);
}

void std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *__p;
  _BYTE *v9;
  uint64_t v10;
  int v11;

  v5 = *a1;
  v4 = (uint64_t)(a1 + 1);
  v6 = *((_DWORD *)a1 + 2);
  v7 = *(uint64_t *)((char *)a1 + 12);
  v9 = 0;
  v10 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a1[3], a1[4], (a1[4] - a1[3]) >> 2);
  v11 = *((_DWORD *)a1 + 12);
  *a1 = *a2;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(v4, (uint64_t)(a2 + 1));
  *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
  *a2 = v5;
  *((_DWORD *)a2 + 2) = v6;
  *(uint64_t *)((char *)a2 + 12) = v7;
  if (&v5 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a2 + 24, (char *)__p, (uint64_t)v9, (v9 - (_BYTE *)__p) >> 2);
  *((_DWORD *)a2 + 12) = v11;
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_1ADEBC8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v8;
  uint64_t v9;
  int v10;
  const void *v11;
  uint64_t v12;
  int v13;
  const void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *__p;
  void *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  int v56;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a2, a3);
  v50 = *(_QWORD *)a4;
  v51 = *(_DWORD *)(a4 + 8);
  v52 = *(_QWORD *)(a4 + 12);
  v54 = 0;
  v55 = 0;
  v53 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, *(const void **)(a4 + 24), *(_QWORD *)(a4 + 32), (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 2);
  v56 = *(_DWORD *)(a4 + 48);
  v43 = *(_QWORD *)a3;
  v44 = *(_DWORD *)(a3 + 8);
  v45 = *(_QWORD *)(a3 + 12);
  v47 = 0;
  v48 = 0;
  v8 = *(const void **)(a3 + 24);
  v9 = *(_QWORD *)(a3 + 32);
  v46 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v46, v8, v9, (v9 - (uint64_t)v8) >> 2);
  v49 = *(_DWORD *)(a3 + 48);
  v10 = v50;
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v10 < (int)v43)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a3, (uint64_t *)a4);
    v36 = *(_QWORD *)a3;
    v37 = *(_DWORD *)(a3 + 8);
    v38 = *(_QWORD *)(a3 + 12);
    v40 = 0;
    v41 = 0;
    v39 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, *(const void **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
    v42 = *(_DWORD *)(a3 + 48);
    v29 = *(_QWORD *)a2;
    v30 = *(_DWORD *)(a2 + 8);
    v31 = *(_QWORD *)(a2 + 12);
    v33 = 0;
    v34 = 0;
    v11 = *(const void **)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 32);
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 2);
    v35 = *(_DWORD *)(a2 + 48);
    v13 = v36;
    if (__p)
    {
      v33 = __p;
      operator delete(__p);
    }
    if (v39)
    {
      v40 = v39;
      operator delete(v39);
    }
    if (v13 < (int)v29)
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
      v22 = *(_QWORD *)a2;
      v23 = *(_DWORD *)(a2 + 8);
      v24 = *(_QWORD *)(a2 + 12);
      v26 = 0;
      v27 = 0;
      v25 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v25, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
      v28 = *(_DWORD *)(a2 + 48);
      v17 = *(_QWORD *)a1;
      v19 = 0;
      v20 = 0;
      v14 = *(const void **)(a1 + 24);
      v15 = *(_QWORD *)(a1 + 32);
      v18 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, v14, v15, (v15 - (uint64_t)v14) >> 2);
      v21 = *(_DWORD *)(a1 + 48);
      v16 = v22;
      if (v18)
      {
        v19 = v18;
        operator delete(v18);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v16 < (int)v17)
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
    }
  }
}

void sub_1ADEBCB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const void *v10;
  uint64_t v11;
  int v12;
  const void *v13;
  uint64_t v14;
  int v15;
  const void *v16;
  uint64_t v17;
  int v18;
  const void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  void *__p;
  void *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  int v75;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a2, a3, a4);
  v69 = *(_QWORD *)a5;
  v70 = *(_DWORD *)(a5 + 8);
  v71 = *(_QWORD *)(a5 + 12);
  v73 = 0;
  v74 = 0;
  v72 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v72, *(const void **)(a5 + 24), *(_QWORD *)(a5 + 32), (uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 2);
  v75 = *(_DWORD *)(a5 + 48);
  v62 = *(_QWORD *)a4;
  v63 = *(_DWORD *)(a4 + 8);
  v64 = *(_QWORD *)(a4 + 12);
  v66 = 0;
  v67 = 0;
  v10 = *(const void **)(a4 + 24);
  v11 = *(_QWORD *)(a4 + 32);
  v65 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v65, v10, v11, (v11 - (uint64_t)v10) >> 2);
  v68 = *(_DWORD *)(a4 + 48);
  v12 = v69;
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  if (v12 < (int)v62)
  {
    std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a4, (uint64_t *)a5);
    v55 = *(_QWORD *)a4;
    v56 = *(_DWORD *)(a4 + 8);
    v57 = *(_QWORD *)(a4 + 12);
    v59 = 0;
    v60 = 0;
    v58 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v58, *(const void **)(a4 + 24), *(_QWORD *)(a4 + 32), (uint64_t)(*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24)) >> 2);
    v61 = *(_DWORD *)(a4 + 48);
    v48 = *(_QWORD *)a3;
    v49 = *(_DWORD *)(a3 + 8);
    v50 = *(_QWORD *)(a3 + 12);
    v52 = 0;
    v53 = 0;
    v13 = *(const void **)(a3 + 24);
    v14 = *(_QWORD *)(a3 + 32);
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v13, v14, (v14 - (uint64_t)v13) >> 2);
    v54 = *(_DWORD *)(a3 + 48);
    v15 = v55;
    if (__p)
    {
      v52 = __p;
      operator delete(__p);
    }
    if (v58)
    {
      v59 = v58;
      operator delete(v58);
    }
    if (v15 < (int)v48)
    {
      std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a3, (uint64_t *)a4);
      v41 = *(_QWORD *)a3;
      v42 = *(_DWORD *)(a3 + 8);
      v43 = *(_QWORD *)(a3 + 12);
      v45 = 0;
      v46 = 0;
      v44 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v44, *(const void **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
      v47 = *(_DWORD *)(a3 + 48);
      v34 = *(_QWORD *)a2;
      v35 = *(_DWORD *)(a2 + 8);
      v36 = *(_QWORD *)(a2 + 12);
      v38 = 0;
      v39 = 0;
      v16 = *(const void **)(a2 + 24);
      v17 = *(_QWORD *)(a2 + 32);
      v37 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v37, v16, v17, (v17 - (uint64_t)v16) >> 2);
      v40 = *(_DWORD *)(a2 + 48);
      v18 = v41;
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
      if (v18 < (int)v34)
      {
        std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a2, (uint64_t *)a3);
        v27 = *(_QWORD *)a2;
        v28 = *(_DWORD *)(a2 + 8);
        v29 = *(_QWORD *)(a2 + 12);
        v31 = 0;
        v32 = 0;
        v30 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
        v33 = *(_DWORD *)(a2 + 48);
        v22 = *(_QWORD *)a1;
        v24 = 0;
        v25 = 0;
        v19 = *(const void **)(a1 + 24);
        v20 = *(_QWORD *)(a1 + 32);
        v23 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v23, v19, v20, (v20 - (uint64_t)v19) >> 2);
        v26 = *(_DWORD *)(a1 + 48);
        v21 = v27;
        if (v23)
        {
          v24 = v23;
          operator delete(v23);
        }
        if (v30)
        {
          v31 = v30;
          operator delete(v30);
        }
        if (v21 < (int)v22)
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
}

void sub_1ADEBCF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t v22;
  void *__p;
  void *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  int v33;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 56;
    if (a2 - a1 >= 57)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 56 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a4, v9, v12);
        v12 -= 7;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v21 = v8;
      v14 = v6;
      do
      {
        v27 = *(_QWORD *)v14;
        v28 = *(_DWORD *)(v14 + 8);
        v29 = *(_QWORD *)(v14 + 12);
        v31 = 0;
        v32 = 0;
        v30 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, *(const void **)(v14 + 24), *(_QWORD *)(v14 + 32), (uint64_t)(*(_QWORD *)(v14 + 32) - *(_QWORD *)(v14 + 24)) >> 2);
        v33 = *(_DWORD *)(v14 + 48);
        v22 = *(_QWORD *)a1;
        v24 = 0;
        v25 = 0;
        v15 = *(const void **)(a1 + 24);
        v16 = *(_QWORD *)(a1 + 32);
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v15, v16, (v16 - (uint64_t)v15) >> 2);
        v26 = *(_DWORD *)(a1 + 48);
        v17 = v27;
        if (__p)
        {
          v24 = __p;
          operator delete(__p);
        }
        if (v30)
        {
          v31 = v30;
          operator delete(v30);
        }
        if (v17 < (int)v22)
        {
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)v14, (uint64_t *)a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, a4, v9, (uint64_t *)a1);
        }
        v14 += 56;
      }
      while (v14 != a3);
      v13 = a3;
      v8 = v21;
    }
    if (v8 >= 57)
    {
      v18 = v8 / 0x38uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, v6, a4, v18);
        v6 -= 56;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1ADEBD184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  int64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  const void *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v25;
  int64_t v26;
  int v27;
  void *v28;
  void *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  void *v56;
  _BYTE *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  void *__p;
  void *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  int v87;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = a1;
    v26 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - a1) >> 3))
    {
      v7 = a3;
      v8 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v9 = (uint64_t *)(a1 + 56 * v8);
      v10 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v10 < a3)
      {
        v81 = *v9;
        v11 = a1 + 56 * v8;
        v82 = *(_DWORD *)(v11 + 8);
        v83 = *(_QWORD *)(v11 + 12);
        v85 = 0;
        v86 = 0;
        v84 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v84, *(const void **)(v11 + 24), *(_QWORD *)(v11 + 32), (uint64_t)(*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24)) >> 2);
        v87 = *(_DWORD *)(v11 + 48);
        v74 = v9[7];
        v75 = *((_DWORD *)v9 + 16);
        v76 = *(uint64_t *)((char *)v9 + 68);
        v78 = 0;
        v79 = 0;
        v77 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v77, (const void *)v9[10], v9[11], (v9[11] - v9[10]) >> 2);
        v80 = *((_DWORD *)v9 + 26);
        v12 = v81;
        if (v77)
        {
          v78 = v77;
          operator delete(v77);
        }
        if (v84)
        {
          v85 = v84;
          operator delete(v84);
        }
        v13 = v12 < (int)v74;
        v7 = a3;
        if (v13)
        {
          v9 += 7;
          v8 = v10;
        }
      }
      v67 = *v9;
      v68 = *((_DWORD *)v9 + 2);
      v69 = *(uint64_t *)((char *)v9 + 12);
      v71 = 0;
      v72 = 0;
      v70 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v70, (const void *)v9[3], v9[4], (v9[4] - v9[3]) >> 2);
      v73 = *((_DWORD *)v9 + 12);
      v60 = *v5;
      v61 = *((_DWORD *)v5 + 2);
      v62 = *(uint64_t *)((char *)v5 + 12);
      v64 = 0;
      v65 = 0;
      v14 = (const void *)v5[3];
      v15 = v5[4];
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v14, v15, (v15 - (uint64_t)v14) >> 2);
      v66 = *((_DWORD *)v5 + 12);
      v16 = v67;
      if (__p)
      {
        v64 = __p;
        operator delete(__p);
      }
      if (v70)
      {
        v71 = v70;
        operator delete(v70);
      }
      if (v16 >= (int)v60)
      {
        v53 = *v5;
        v54 = *((_DWORD *)v5 + 2);
        v55 = *(uint64_t *)((char *)v5 + 12);
        v57 = 0;
        v58 = 0;
        v56 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v56, (const void *)v5[3], v5[4], (v5[4] - v5[3]) >> 2);
        v59 = *((_DWORD *)v5 + 12);
        v25 = v6;
        do
        {
          v17 = v9;
          *v5 = *v9;
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v5 + 1), (uint64_t)(v9 + 1));
          *((_DWORD *)v5 + 12) = *((_DWORD *)v9 + 12);
          if (v26 < v8)
            break;
          v18 = (2 * v8) | 1;
          v9 = (uint64_t *)(v6 + 56 * v18);
          v19 = 2 * v8 + 2;
          if (v19 >= v7)
          {
            v8 = (2 * v8) | 1;
          }
          else
          {
            v46 = *v9;
            v20 = v6 + 56 * v18;
            v47 = *(_DWORD *)(v20 + 8);
            v48 = *(_QWORD *)(v20 + 12);
            v50 = 0;
            v51 = 0;
            v49 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v49, *(const void **)(v20 + 24), *(_QWORD *)(v20 + 32), (uint64_t)(*(_QWORD *)(v20 + 32) - *(_QWORD *)(v20 + 24)) >> 2);
            v52 = *(_DWORD *)(v6 + 56 * v18 + 48);
            v39 = v9[7];
            v40 = *((_DWORD *)v9 + 16);
            v41 = *(uint64_t *)((char *)v9 + 68);
            v43 = 0;
            v44 = 0;
            v42 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, (const void *)v9[10], v9[11], (v9[11] - v9[10]) >> 2);
            v45 = *((_DWORD *)v9 + 26);
            v21 = v46;
            v22 = v39;
            if (v42)
            {
              v43 = v42;
              operator delete(v42);
            }
            if (v49)
            {
              v50 = v49;
              operator delete(v49);
            }
            v8 = (2 * v8) | 1;
            v13 = v21 < v22;
            v7 = a3;
            if (v13)
            {
              v9 += 7;
              v8 = v19;
            }
          }
          v32 = *v9;
          v33 = *((_DWORD *)v9 + 2);
          v34 = *(uint64_t *)((char *)v9 + 12);
          v36 = 0;
          v37 = 0;
          v35 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, (const void *)v9[3], v9[4], (v9[4] - v9[3]) >> 2);
          v6 = v25;
          v38 = *((_DWORD *)v9 + 12);
          v27 = v53;
          v29 = 0;
          v30 = 0;
          v28 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v28, v56, (uint64_t)v57, (v57 - (_BYTE *)v56) >> 2);
          v31 = v59;
          v23 = v32;
          if (v28)
          {
            v29 = v28;
            operator delete(v28);
          }
          if (v35)
          {
            v36 = v35;
            operator delete(v35);
          }
          v5 = v17;
        }
        while (v23 >= v27);
        *v17 = v53;
        *((_DWORD *)v17 + 2) = v54;
        *(uint64_t *)((char *)v17 + 12) = v55;
        if (v17 != &v53)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v17 + 24, (char *)v56, (uint64_t)v57, (v57 - (_BYTE *)v56) >> 2);
        *((_DWORD *)v17 + 12) = v59;
        if (v56)
        {
          v57 = v56;
          operator delete(v56);
        }
      }
    }
  }
}

void sub_1ADEBD650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *__p;
  _BYTE *v14;
  uint64_t v15;
  int v16;

  if (a4 >= 2)
  {
    v10 = *(_QWORD *)a1;
    v11 = *(_DWORD *)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 12);
    v14 = 0;
    v15 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
    v16 = *(_DWORD *)(a1 + 48);
    v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>((uint64_t *)a1, a3, a4);
    v9 = v8;
    if (v8 == (uint64_t *)(a2 - 56))
    {
      *v8 = v10;
      *((_DWORD *)v8 + 2) = v11;
      *(uint64_t *)((char *)v8 + 12) = v12;
      if (v8 != &v10)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v8 + 24, (char *)__p, (uint64_t)v14, (v14 - (_BYTE *)__p) >> 2);
      *((_DWORD *)v9 + 12) = v16;
    }
    else
    {
      *v8 = *(_QWORD *)(a2 - 56);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v8 + 1), a2 - 48);
      *((_DWORD *)v9 + 12) = *(_DWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 56) = v10;
      *(_DWORD *)(a2 - 48) = v11;
      *(_QWORD *)(a2 - 44) = v12;
      if ((int *)(a2 - 48) != &v11)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 - 32), (char *)__p, (uint64_t)v14, (v14 - (_BYTE *)__p) >> 2);
      *(_DWORD *)(a2 - 8) = v16;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, (uint64_t)(v9 + 7), a3, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v9 - a1 + 56) >> 3));
    }
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
}

void sub_1ADEBD84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v15;
  void *__p;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  int v26;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    v9 = v5 + 1;
    a1 += 7 * v5 + 7;
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      v20 = *a1;
      v12 = &v8[7 * v9];
      v21 = *((_DWORD *)v12 + 2);
      v22 = *(uint64_t *)((char *)v12 + 12);
      v24 = 0;
      v25 = 0;
      v23 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v23, (const void *)v12[3], v12[4], (v12[4] - v12[3]) >> 2);
      v26 = *((_DWORD *)v12 + 12);
      v15 = a1[7];
      v17 = 0;
      v18 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)a1[10], a1[11], (a1[11] - a1[10]) >> 2);
      v19 = *((_DWORD *)a1 + 26);
      v13 = v20;
      if (__p)
      {
        v17 = __p;
        operator delete(__p);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      if (v13 < (int)v15)
      {
        a1 += 7;
        v5 = v11;
      }
    }
    *v8 = *a1;
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v8 + 1), (uint64_t)(a1 + 1));
    *((_DWORD *)v8 + 12) = *((_DWORD *)a1 + 12);
  }
  while (v5 <= v7);
  return a1;
}

void sub_1ADEBD9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  int v12;
  int v13;
  void *v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *__p;
  void *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  int v45;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (uint64_t *)(a1 + 56 * (v4 >> 1));
    v39 = *v8;
    v40 = *((_DWORD *)v8 + 2);
    v41 = *(uint64_t *)((char *)v8 + 12);
    v43 = 0;
    v44 = 0;
    v42 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, (const void *)v8[3], v8[4], (v8[4] - v8[3]) >> 2);
    v45 = *((_DWORD *)v8 + 12);
    v9 = (uint64_t *)(a2 - 56);
    v32 = *(_QWORD *)(a2 - 56);
    v33 = *(_DWORD *)(a2 - 48);
    v34 = *(_QWORD *)(a2 - 44);
    v36 = 0;
    v37 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a2 - 32), *(_QWORD *)(a2 - 24), (uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 2);
    v38 = *(_DWORD *)(a2 - 8);
    v10 = v39;
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v10 < (int)v32)
    {
      v25 = *(_QWORD *)(a2 - 56);
      v26 = *(_DWORD *)(a2 - 48);
      v27 = *(_QWORD *)(a2 - 44);
      v29 = 0;
      v30 = 0;
      v28 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v28, *(const void **)(a2 - 32), *(_QWORD *)(a2 - 24), (uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 2);
      v31 = *(_DWORD *)(a2 - 8);
      do
      {
        v11 = v8;
        *v9 = *v8;
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v9 + 1), (uint64_t)(v8 + 1));
        *((_DWORD *)v9 + 12) = *((_DWORD *)v8 + 12);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(a1 + 56 * v7);
        v18 = *v8;
        v19 = *((_DWORD *)v8 + 2);
        v20 = *(uint64_t *)((char *)v8 + 12);
        v22 = 0;
        v23 = 0;
        v21 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, (const void *)v8[3], v8[4], (v8[4] - v8[3]) >> 2);
        v24 = *((_DWORD *)v8 + 12);
        v13 = v25;
        v15 = 0;
        v16 = 0;
        v14 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v14, v28, (uint64_t)v29, (v29 - (_BYTE *)v28) >> 2);
        v17 = v31;
        v12 = v18;
        if (v14)
        {
          v15 = v14;
          operator delete(v14);
        }
        if (v21)
        {
          v22 = v21;
          operator delete(v21);
        }
        v9 = v11;
      }
      while (v12 < v13);
      *v11 = v25;
      *((_DWORD *)v11 + 2) = v26;
      *(uint64_t *)((char *)v11 + 12) = v27;
      if (v11 != &v25)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v11 + 24, (char *)v28, (uint64_t)v29, (v29 - (_BYTE *)v28) >> 2);
      *((_DWORD *)v11 + 12) = v31;
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
    }
  }
}

void sub_1ADEBDC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::One()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::One(void)::one = v2;
  }
  return fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::One(void)::one;
}

void sub_1ADEBDD58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  fst *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22[2];
  char v23;
  char v24;
  _QWORD v25[2];
  char v26;
  char v27;
  int v28;
  uint64_t v29;
  void *v30;
  _BYTE *v31;
  uint64_t v32;
  __int128 v33;
  void *__p;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  unsigned int v45;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v4);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v5);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result == -1)
  {
    if ((v6 & 4) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1) != 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 248))(a2, v8);
  }
  HIDWORD(v40) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v38);
  while (!v38)
  {
    if (SHIDWORD(v40) >= v39)
      goto LABEL_14;
LABEL_9:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
    else
      ++HIDWORD(v40);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38))
    goto LABEL_9;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
LABEL_14:
  v45 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v43);
  while (2)
  {
    if (!v43)
    {
      if ((int)v45 >= v44)
        goto LABEL_63;
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43))
    {
      if (v43)
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
        goto LABEL_21;
      }
LABEL_20:
      v9 = v45;
LABEL_21:
      if ((_DWORD)v9 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v9);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 256))(a2, v9, v10);
      v35 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v9, &v32);
LABEL_24:
      if (v32)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32))
        {
          if (v32)
          {
            (*(void (**)(void))(*(_QWORD *)v32 + 8))();
            goto LABEL_39;
          }
LABEL_37:
          if (__p)
            --*(_DWORD *)__p;
LABEL_39:
          (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v28, a1, v9);
          v32 = 0;
          LODWORD(v33) = v28;
          *(_QWORD *)((char *)&v33 + 4) = v29;
          v35 = 0;
          v36 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v30, (uint64_t)v31, (v31 - (_BYTE *)v30) >> 2);
          v37 = -1;
          fst::RmWeightMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::operator()((uint64_t)&v32, (uint64_t)&v38);
          if (__p)
          {
            v35 = (unint64_t)__p;
            operator delete(__p);
          }
          if (v30)
          {
            v31 = v30;
            operator delete(v30);
          }
          if (v38)
          {
            v12 = FLAGS_fst_error_fatal;
            if (FLAGS_fst_error_fatal)
            {
              std::string::basic_string[abi:ne180100]<0>(v25, "FATAL");
              v13 = fst::LogMessage::LogMessage((fst *)&v27, (uint64_t)v25);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v22, "ERROR");
              v13 = fst::LogMessage::LogMessage((fst *)&v24, (uint64_t)v22);
            }
            v14 = (_QWORD *)fst::cerr(v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
            if (v12)
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v27);
              if (v26 < 0)
              {
                v15 = (void *)v25[0];
                goto LABEL_52;
              }
            }
            else
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v24);
              if (v23 < 0)
              {
                v15 = v22[0];
LABEL_52:
                operator delete(v15);
              }
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
          }
          v17 = v39;
          v18 = v40;
          v20 = 0;
          v21 = 0;
          v19 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v19, v41, (uint64_t)v42, (v42 - (_BYTE *)v41) >> 2);
          (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 184))(a2, v9, &v17);
          if (v19)
          {
            v20 = v19;
            operator delete(v19);
          }
          if (v41)
          {
            v42 = v41;
            operator delete(v41);
          }
          if (v43)
            (*(void (**)(uint64_t))(*(_QWORD *)v43 + 32))(v43);
          else
            ++v45;
          continue;
        }
        if (v32)
        {
          v11 = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 32))();
LABEL_30:
          fst::RmWeightMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::operator()(v11, (uint64_t)&v38);
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 208))(a2, v9, &v38);
          if (v41)
          {
            v42 = v41;
            operator delete(v41);
          }
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
          else
            ++v35;
          goto LABEL_24;
        }
      }
      else if (v35 >= *((_QWORD *)&v33 + 1))
      {
        goto LABEL_37;
      }
      v11 = v33 + 56 * v35;
      goto LABEL_30;
    }
    break;
  }
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
LABEL_63:
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v6 & 0x3FFCFFFF0007 | v16 | 0x200000000, 0x3FFFFFFF0007);
}

void sub_1ADEBE34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  uint64_t v45;
  void *v47;
  uint64_t v48;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a25);
  if (a21 < 0)
    operator delete(__p);
  v47 = *(void **)(v45 - 144);
  if (v47)
  {
    *(_QWORD *)(v45 - 136) = v47;
    operator delete(v47);
  }
  v48 = *(_QWORD *)(v45 - 112);
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  _Unwind_Resume(a1);
}

void fst::RmWeightMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  const void *v4;
  size_t v5;
  int v6;
  uint64_t v7;
  float v8;
  void *__p;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  float v15;
  int v16;
  float v17;
  float v18;

  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v7);
  v18 = 0.0;
  v18 = *(float *)(a1 + 8);
  v17 = *(float *)&v7;
  if (v18 != *(float *)&v7)
    goto LABEL_6;
  v18 = 0.0;
  v18 = *(float *)(a1 + 12);
  v17 = 0.0;
  v17 = *(float *)(a1 + 16);
  v16 = HIDWORD(v7);
  v15 = v8;
  if (v18 != *((float *)&v7 + 1))
    goto LABEL_6;
  if (v17 == v15
    && (v4 = *(const void **)(a1 + 24), v5 = *(_QWORD *)(a1 + 32) - (_QWORD)v4, v5 == v10 - (_BYTE *)__p)
    && !memcmp(v4, __p, v5))
  {
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v11);
  }
  else
  {
LABEL_6:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v11);
  }
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v6 = *(_DWORD *)(a1 + 48);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 12) = v12;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a2 + 24), v13, (uint64_t)v14, (v14 - (_BYTE *)v13) >> 2);
  *(_DWORD *)(a2 + 48) = v6;
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
}

void sub_1ADEBE5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  float v19;
  uint64_t v20;
  int v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  __int128 __p;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47[2];
  void *v48;
  void *v49;
  unsigned int v50;
  uint64_t v51;
  void *v52[3];
  void *v53;
  uint64_t v54;

  v8 = *(_QWORD *)(a4 + 24);
  if (v8 == 1 && *(_BYTE *)(a4 + 35) == 0)
  {
    v34 = 0uLL;
    *(_QWORD *)&__p = 0;
    v50 = 0;
    if (fst::SingleShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, a3, (uint64_t *)a4, &v50, (char **)&v34))fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a1, a2, &v34, v50);
    else
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    if ((_QWORD)v34)
    {
      *((_QWORD *)&v34 + 1) = v34;
      operator delete((void *)v34);
    }
  }
  else if (v8)
  {
    if (*(_BYTE *)(a4 + 33)
      || (fst::ShortestDistance<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, a3, a4), a3[1] - *a3 != 40)|| fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member(*a3))
    {
      fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorFst(&v53);
      fst::Reverse<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, (uint64_t *)&v53, 1);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v50);
      v10 = *(_QWORD *)(**(_QWORD **)(v54 + 64) + 56);
      v11 = *(_QWORD *)(**(_QWORD **)(v54 + 64) + 64) - v10;
      if (v11)
      {
        v12 = v11 / 56;
        if (v12 <= 1)
          v13 = 1;
        else
          v13 = v12;
        v14 = (int *)(v10 + 48);
        v15 = v14;
        do
        {
          v16 = *v15;
          v15 += 14;
          v17 = v16 - 1;
          if (0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3) > v16 - 1)
          {
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse((uint64_t)(v14 - 10), (uint64_t)&v43);
            fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v43, *a3 + 40 * v17, v47);
            fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)&v50, (uint64_t)v47, (uint64_t)&v34);
            v50 = v34;
            v51 = *(_QWORD *)((char *)&v34 + 4);
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v52, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2);
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            if (v48)
            {
              v49 = v48;
              operator delete(v48);
            }
            if (v45)
            {
              v46 = v45;
              operator delete(v45);
            }
          }
          v14 = v15;
          --v13;
        }
        while (v13);
      }
      std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::insert(a3, *a3, (unint64_t)&v50);
      if (*(_BYTE *)(a4 + 32))
      {
        v47[0] = 0;
        v47[1] = 0;
        v48 = 0;
        v18 = *(_DWORD *)(a4 + 16);
        LOBYTE(v34) = FLAGS_fst_default_cache_gc;
        *((_QWORD *)&v34 + 1) = FLAGS_fst_default_cache_gc_limit;
        LODWORD(__p) = v18;
        *(_QWORD *)((char *)&__p + 4) = 0;
        BYTE12(__p) = 0;
        v36 = 0;
        v37 = 0;
        fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>(&v43, (uint64_t)&v53, (uint64_t)a3, (uint64_t)v47, (uint64_t)&v34);
        v19 = *(float *)(a4 + 16);
        v29 = *(_DWORD *)(a4 + 40);
        v30 = *(_QWORD *)(a4 + 44);
        v32 = 0;
        v33 = 0;
        v31 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31, *(const void **)(a4 + 56), *(_QWORD *)(a4 + 64), (uint64_t)(*(_QWORD *)(a4 + 64) - *(_QWORD *)(a4 + 56)) >> 2);
        fst::NShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>((uint64_t)&v43, a2, v47, v8, (uint64_t)&v29, *(_DWORD *)(a4 + 80), *(unsigned __int8 *)(a4 + 35), v19);
        if (v31)
        {
          v32 = v31;
          operator delete(v31);
        }
        v43 = &unk_1E5D273C8;
        v20 = v44;
        if (v44)
        {
          v21 = *(_DWORD *)(v44 + 56) - 1;
          *(_DWORD *)(v44 + 56) = v21;
          if (!v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        *(_QWORD *)&v34 = v47;
        std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      }
      else
      {
        v22 = *(float *)(a4 + 16);
        v38 = *(_DWORD *)(a4 + 40);
        v39 = *(_QWORD *)(a4 + 44);
        v41 = 0;
        v42 = 0;
        v40 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v40, *(const void **)(a4 + 56), *(_QWORD *)(a4 + 64), (uint64_t)(*(_QWORD *)(a4 + 64) - *(_QWORD *)(a4 + 56)) >> 2);
        fst::NShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>((uint64_t)&v53, a2, a3, v8, (uint64_t)&v38, *(_DWORD *)(a4 + 80), *(unsigned __int8 *)(a4 + 35), v22);
        if (v40)
        {
          v41 = v40;
          operator delete(v40);
        }
      }
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,0>(*a3 + 40, a3[1], *a3);
      v24 = v23;
      for (i = a3[1]; i != v24; i -= 40)
      {
        v26 = *(void **)(i - 24);
        if (v26)
        {
          *(_QWORD *)(i - 16) = v26;
          operator delete(v26);
        }
      }
      a3[1] = v24;
      if (v52[0])
      {
        v52[1] = v52[0];
        operator delete(v52[0]);
      }
      v53 = &unk_1E5D24E00;
      v27 = v54;
      if (v54)
      {
        v28 = *(_DWORD *)(v54 + 56) - 1;
        *(_DWORD *)(v54 + 56) = v28;
        if (!v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    }
  }
}

void sub_1ADEBEA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;
  void *v35;
  _DWORD *v36;
  int v37;

  if (__p)
    operator delete(__p);
  v35 = *(void **)(v33 - 144);
  if (v35)
  {
    *(_QWORD *)(v33 - 136) = v35;
    operator delete(v35);
  }
  *(_QWORD *)(v33 - 120) = &unk_1E5D24E00;
  v36 = *(_DWORD **)(v33 - 112);
  if (v36)
  {
    v37 = v36[14] - 1;
    v36[14] = v37;
    if (!v37)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  fst *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  fst *v26;
  _QWORD *v27;
  uint64_t v28;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  fst *v32;
  _QWORD *v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  fst *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  fst *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  fst *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  fst *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  fst *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  void *__p[2];
  char v59;
  char v60;
  __int16 v61;
  void *v62[3];
  uint64_t v63[2];
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v6 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v7 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v8 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v21 = operator new();
    *(_DWORD *)(v21 + 8) = 5;
    *(_BYTE *)(v21 + 12) = 0;
    *(_QWORD *)v21 = &unk_1E5D1EEB0;
    *(_QWORD *)(v21 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v21;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v22 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v23 = (_QWORD *)fst::cerr(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"AutoQueue: using state-order discipline", 39);
  }
  else if ((v8 & 0x800000000) != 0)
  {
    v25 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(v25, a2);
    *(_QWORD *)(a1 + 16) = v25;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v26 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v27 = (_QWORD *)fst::cerr(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"AutoQueue: using top-order discipline", 37);
  }
  else
  {
    if ((v8 & 0x200000000) == 0)
    {
      v66 = 0;
      v63[0] = (uint64_t)v7;
      v63[1] = 0;
      v64 = 0;
      v65 = &v66;
      fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a2, v63, 0);
      v9 = *(int **)(a1 + 48);
      v10 = *(int **)(a1 + 56);
      if (v9 != v10)
      {
        v11 = v9 + 1;
        if (v9 + 1 != v10)
        {
          v12 = *v9;
          v13 = v9 + 1;
          do
          {
            v15 = *v13++;
            v14 = v15;
            v16 = v12 < v15;
            if (v12 <= v15)
              v12 = v14;
            if (v16)
              v9 = v11;
            v11 = v13;
          }
          while (v13 != v10);
        }
      }
      v17 = *v9;
      v18 = *v9 + 1;
      std::vector<fst::QueueType>::vector(v62, v18);
      if (a3)
      {
        v19 = operator new();
        v20 = (_QWORD *)operator new();
        *v20 = a3;
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v61 = 0;
      fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>(a2, v7, (uint64_t)v62, v19, &v61, (_BYTE *)&v61 + 1);
      if (HIBYTE(v61))
      {
        v31 = operator new();
        *(_DWORD *)(v31 + 8) = 2;
        *(_BYTE *)(v31 + 12) = 0;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_OWORD *)(v31 + 48) = 0u;
        *(_QWORD *)v31 = &unk_1E5D27B60;
        *(_QWORD *)(a1 + 16) = v31;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v32 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v33 = (_QWORD *)fst::cerr(v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_30:
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
LABEL_52:
        if (v20)
          MEMORY[0x1AF44D190](v20, 0x60C40B37CB4BBLL);
        if (v19)
          MEMORY[0x1AF44D190](v19, 0xC400A2AC0F1);
        v24 = v62[0];
        if (v62[0])
        {
          v62[1] = v62[0];
          goto LABEL_58;
        }
        return a1;
      }
      if ((_BYTE)v61)
      {
        v34 = operator new();
        fst::TopOrderQueue<int>::TopOrderQueue(v34, (uint64_t)v7);
        *(_QWORD *)(a1 + 16) = v34;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v35 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v36 = (_QWORD *)fst::cerr(v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: using top-order discipline", 37);
        goto LABEL_30;
      }
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v37 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v38 = (_QWORD *)fst::cerr(v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
      }
      std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v6, v18);
      if (v17 < 0)
      {
LABEL_51:
        v56 = operator new();
        *(_DWORD *)(v56 + 8) = 6;
        *(_BYTE *)(v56 + 12) = 0;
        *(_QWORD *)v56 = &unk_1E5D22CF0;
        *(_QWORD *)(v56 + 16) = v6;
        *(_QWORD *)(v56 + 24) = v7;
        *(_QWORD *)(v56 + 32) = 0xFFFFFFFF00000000;
        *(_QWORD *)(v56 + 48) = 0;
        *(_QWORD *)(v56 + 56) = 0;
        *(_QWORD *)(v56 + 40) = 0;
        *(_QWORD *)(a1 + 16) = v56;
        goto LABEL_52;
      }
      v39 = 0;
      while (1)
      {
        v40 = *((_DWORD *)v62[0] + v39);
        if (v40 == 3)
        {
          v44 = operator new();
          *(_DWORD *)(v44 + 8) = 3;
          *(_BYTE *)(v44 + 12) = 0;
          *(_QWORD *)v44 = &unk_1E5D217B0;
          *(_OWORD *)(v44 + 16) = *(_OWORD *)v20;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_OWORD *)(v44 + 48) = 0u;
          *(_OWORD *)(v44 + 64) = 0u;
          *(_OWORD *)(v44 + 80) = 0u;
          *(_OWORD *)(v44 + 92) = 0u;
          *(_QWORD *)(v44 + 120) = 0;
          *(_QWORD *)(v44 + 128) = 0;
          *(_QWORD *)(v44 + 112) = 0;
          *(_QWORD *)(*v6 + 8 * v39) = v44;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v45 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v46 = (_QWORD *)fst::cerr(v45);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"AutoQueue: SCC #", 16);
            v47 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": using shortest-first discipline", 33);
            goto LABEL_48;
          }
        }
        else if (v40 == 2)
        {
          v48 = operator new();
          *(_DWORD *)(v48 + 8) = 2;
          *(_BYTE *)(v48 + 12) = 0;
          *(_OWORD *)(v48 + 16) = 0u;
          *(_OWORD *)(v48 + 32) = 0u;
          *(_OWORD *)(v48 + 48) = 0u;
          *(_QWORD *)v48 = &unk_1E5D27B60;
          *(_QWORD *)(*v6 + 8 * v39) = v48;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v49 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v50 = (_QWORD *)fst::cerr(v49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"AutoQueue: SCC #", 16);
            v51 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": using LIFO disciplle", 22);
            goto LABEL_48;
          }
        }
        else if (v40)
        {
          v52 = operator new();
          *(_DWORD *)(v52 + 8) = 1;
          *(_BYTE *)(v52 + 12) = 0;
          *(_OWORD *)(v52 + 16) = 0u;
          *(_OWORD *)(v52 + 32) = 0u;
          *(_OWORD *)(v52 + 48) = 0u;
          *(_QWORD *)v52 = &unk_1E5D23A28;
          *(_QWORD *)(*v6 + 8 * v39) = v52;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v53 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v54 = (_QWORD *)fst::cerr(v53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"AutoQueue: SCC #", 16);
            v55 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": using FIFO disciplle", 22);
LABEL_48:
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
            if (v59 < 0)
              operator delete(__p[0]);
          }
        }
        else
        {
          *(_QWORD *)(*v6 + 8 * v39) = 0;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v41 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v42 = (_QWORD *)fst::cerr(v41);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"AutoQueue: SCC #", 16);
            v43 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": using trivial discipline", 26);
            goto LABEL_48;
          }
        }
        if (v18 == ++v39)
          goto LABEL_51;
      }
    }
    v28 = operator new();
    *(_DWORD *)(v28 + 8) = 2;
    *(_BYTE *)(v28 + 12) = 0;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_QWORD *)v28 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v28;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v29 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"AutoQueue: using LIFO discipline", 32);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)v62);
  if (SHIBYTE(v64) < 0)
  {
    v24 = (void *)v63[0];
LABEL_58:
    operator delete(v24);
  }
  return a1;
}

void sub_1ADEBF3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;

  if (a16 < 0)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  v32 = *v30;
  if (*v30)
  {
    *(_QWORD *)(v28 + 56) = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    *(_QWORD *)(v28 + 32) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  BOOL v20;
  int v21;
  const void *v22;
  size_t v23;
  _BYTE *v24;
  _BOOL4 v25;
  _BYTE *v26;
  const void *v27;
  size_t v28;
  _BYTE *v29;
  __n128 v30;
  _BOOL4 v31;
  _BYTE *v32;
  const void *v33;
  size_t v34;
  const void *v35;
  size_t v36;
  uint64_t v39;
  float v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  float v44;
  void *__p;
  _BYTE *v46;
  _QWORD v47[3];
  _DWORD *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  float v53;
  float v54;
  float v55;
  float v56;

  *a5 = 1;
  *a6 = 1;
  v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v10)
  {
    v11 = v10 >> 2;
    if (v11 <= 1)
      v11 = 1;
    bzero(*(void **)a3, 4 * v11);
  }
  v52 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v50);
  while (1)
  {
    result = v50;
    if (!v50)
    {
      if ((int)v52 >= v51)
        return result;
LABEL_11:
      v14 = v52;
      goto LABEL_12;
    }
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
    result = v50;
    if (v13)
      break;
    if (!v50)
      goto LABEL_11;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
LABEL_12:
    v49 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v14, v47);
    v15 = (int)v14;
    while (1)
    {
      if (!v47[0])
      {
        if (v49 >= v47[2])
          goto LABEL_76;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v47[0] + 24))(v47[0]))
        break;
      if (v47[0])
      {
        v16 = (*(uint64_t (**)(void))(*(_QWORD *)v47[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      v16 = v47[1] + 56 * v49;
LABEL_19:
      v17 = *(int *)(*a2 + 4 * v15);
      if ((_DWORD)v17 == *(_DWORD *)(*a2 + 4 * *(int *)(v16 + 48)))
      {
        v18 = *(_DWORD **)a3;
        if (!a4)
          goto LABEL_24;
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v43);
        v19 = (_DWORD *)(v16 + 8);
        v20 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(a4, v16 + 8, (uint64_t)&v43);
        if (__p)
        {
          v46 = __p;
          operator delete(__p);
        }
        if (v20)
        {
LABEL_24:
          v21 = 1;
          goto LABEL_42;
        }
        if ((v18[v17] | 2) == 2)
        {
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v43);
          LODWORD(v39) = 0;
          LODWORD(v39) = *v19;
          v56 = *(float *)&v43;
          if (*(float *)&v39 != *(float *)&v43)
            goto LABEL_31;
          LODWORD(v39) = 0;
          LODWORD(v39) = *(_DWORD *)(v16 + 12);
          v56 = 0.0;
          v56 = *(float *)(v16 + 16);
          v55 = *((float *)&v43 + 1);
          v54 = v44;
          if (*(float *)&v39 != *((float *)&v43 + 1))
            goto LABEL_31;
          if (v56 == v54
            && (v22 = *(const void **)(v16 + 24),
                v23 = *(_QWORD *)(v16 + 32) - (_QWORD)v22,
                v24 = __p,
                v23 == v46 - (_BYTE *)__p)
            && !memcmp(v22, __p, v23))
          {
            v25 = 0;
            if (v24)
              goto LABEL_38;
          }
          else
          {
LABEL_31:
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v39);
            v56 = 0.0;
            v56 = *(float *)v19;
            v55 = *(float *)&v39;
            if (v56 != *(float *)&v39
              || (v56 = 0.0,
                  v56 = *(float *)(v16 + 12),
                  v55 = 0.0,
                  v55 = *(float *)(v16 + 16),
                  v54 = *((float *)&v39 + 1),
                  v53 = v40,
                  v56 != *((float *)&v39 + 1))
              || v55 != v53)
            {
              v25 = 1;
              goto LABEL_35;
            }
            v35 = *(const void **)(v16 + 24);
            v36 = *(_QWORD *)(v16 + 32) - (_QWORD)v35;
            v26 = v41;
            if (v36 == v42 - (_BYTE *)v41)
            {
              v25 = memcmp(v35, v41, v36) != 0;
LABEL_35:
              v26 = v41;
              if (v41)
              {
LABEL_36:
                v42 = v26;
                operator delete(v26);
              }
            }
            else
            {
              v25 = 1;
              if (v41)
                goto LABEL_36;
            }
            v24 = __p;
            if (__p)
            {
LABEL_38:
              v46 = v24;
              operator delete(v24);
            }
          }
          if (v25)
            v21 = 3;
          else
            v21 = 2;
LABEL_42:
          v18[v17] = v21;
        }
        *a5 = 0;
      }
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v43);
      LODWORD(v39) = 0;
      LODWORD(v39) = *(_DWORD *)(v16 + 8);
      v56 = *(float *)&v43;
      if (*(float *)&v39 != *(float *)&v43)
        goto LABEL_49;
      LODWORD(v39) = 0;
      LODWORD(v39) = *(_DWORD *)(v16 + 12);
      v56 = 0.0;
      v56 = *(float *)(v16 + 16);
      v55 = *((float *)&v43 + 1);
      v54 = v44;
      if (*(float *)&v39 != *((float *)&v43 + 1)
        || v56 != v54
        || (v27 = *(const void **)(v16 + 24),
            v28 = *(_QWORD *)(v16 + 32) - (_QWORD)v27,
            v29 = __p,
            v28 != v46 - (_BYTE *)__p)
        || memcmp(v27, __p, v28))
      {
LABEL_49:
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v39);
        v56 = 0.0;
        v56 = *(float *)(v16 + 8);
        v55 = *(float *)&v39;
        v30.n128_f32[0] = v56;
        if (v56 != *(float *)&v39)
          goto LABEL_52;
        v56 = 0.0;
        v56 = *(float *)(v16 + 12);
        v55 = 0.0;
        v55 = *(float *)(v16 + 16);
        v54 = *((float *)&v39 + 1);
        v53 = v40;
        v30.n128_f32[0] = v56;
        if (v56 != *((float *)&v39 + 1) || (v30.n128_f32[0] = v55, v55 != v53))
        {
LABEL_52:
          v31 = 1;
          goto LABEL_53;
        }
        v33 = *(const void **)(v16 + 24);
        v34 = *(_QWORD *)(v16 + 32) - (_QWORD)v33;
        v32 = v41;
        if (v34 == v42 - (_BYTE *)v41)
        {
          v31 = memcmp(v33, v41, v34) != 0;
LABEL_53:
          v32 = v41;
          if (v41)
          {
LABEL_54:
            v42 = v32;
            operator delete(v32);
          }
        }
        else
        {
          v31 = 1;
          if (v41)
            goto LABEL_54;
        }
        v29 = __p;
        if (!__p)
          goto LABEL_57;
LABEL_56:
        v46 = v29;
        operator delete(v29);
        goto LABEL_57;
      }
      v31 = 0;
      if (v29)
        goto LABEL_56;
LABEL_57:
      if (v31)
        *a6 = 0;
      if (v47[0])
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v47[0] + 40))(v47[0], v30);
      else
        ++v49;
    }
    if (v47[0])
    {
      (*(void (**)(void))(*(_QWORD *)v47[0] + 8))();
      goto LABEL_78;
    }
LABEL_76:
    if (v48)
      --*v48;
LABEL_78:
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50);
    else
      ++v52;
  }
  if (v50)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  return result;
}

void sub_1ADEBFA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v27;

  v27 = *(_QWORD *)(v25 - 128);
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1ADEBFC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 56 * v12[5];
            v18 = *(int *)(v17 + 48);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 48);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 48);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D19918;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADEC03A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19918;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v5;
  float v6;
  float v7;
  size_t v8;
  const void *v9;
  uint64_t v10;
  _BOOL8 v11;
  const void *v13;
  float v14;
  float v15;
  float v16;
  void *__p;
  _BYTE *v18;
  float v19;
  float v20;
  float v21;
  float v22;

  fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)a2, a3, (uint64_t)&v14);
  v22 = v14;
  v21 = 0.0;
  v5 = *(float *)a2;
  v21 = *(float *)a2;
  if (v14 != v21)
    goto LABEL_6;
  v22 = v15;
  v21 = v16;
  v20 = 0.0;
  v6 = *(float *)(a2 + 4);
  v7 = *(float *)(a2 + 8);
  v20 = v6;
  v19 = v7;
  if (v15 != v6)
    goto LABEL_6;
  if (v21 == v19
    && (v8 = v18 - (_BYTE *)__p,
        v10 = a2 + 16,
        v9 = *(const void **)(a2 + 16),
        v18 - (_BYTE *)__p == *(_QWORD *)(v10 + 8) - (_QWORD)v9)
    && !memcmp(__p, v9, v18 - (_BYTE *)__p))
  {
    v22 = v5;
    v21 = 0.0;
    v21 = *(float *)a3;
    v11 = v5 != v21
       || (v22 = v6, v21 = v7, v20 = 0.0, v20 = *(float *)(a3 + 4), v19 = 0.0, v19 = *(float *)(a3 + 8), v6 != v20)
       || v21 != v19
       || (v13 = *(const void **)(a3 + 16), v8 != *(_QWORD *)(a3 + 24) - (_QWORD)v13)
       || memcmp(v9, v13, v8) != 0;
  }
  else
  {
LABEL_6:
    v11 = 0;
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v11;
}

_QWORD *fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>@<X0>(float *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float *v4;
  float v6;
  float v7;
  float v8;
  float v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char v22;

  v4 = a1;
  if (!fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v22, a1, (float *)a2))
  {
    if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v22, (float *)a2, v4))
      goto LABEL_8;
    v6 = v4[1];
    v7 = v6 + v4[2];
    v8 = *(float *)(a2 + 4);
    v9 = v8 + *(float *)(a2 + 8);
    if (v7 < v9)
      goto LABEL_9;
    if (v7 > v9)
    {
LABEL_8:
      v4 = (float *)a2;
      goto LABEL_9;
    }
    if (v6 >= v8)
    {
      if (v6 > v8)
        goto LABEL_8;
      v10 = (int *)*((_QWORD *)v4 + 2);
      v11 = *((_QWORD *)v4 + 3) - (_QWORD)v10;
      v12 = v11 >> 2;
      v13 = *(int **)(a2 + 16);
      v14 = (*(_QWORD *)(a2 + 24) - (_QWORD)v13) >> 2;
      if ((int)(v11 >> 2) > (int)v14)
        goto LABEL_8;
      if ((int)v12 >= 1 && (int)v12 >= (int)v14)
      {
        v16 = (v11 >> 2) - 1;
        do
        {
          v18 = *v10++;
          v17 = v18;
          v20 = *v13++;
          v19 = v20;
          if (v17 < v20)
            goto LABEL_8;
        }
        while (v17 <= v19 && v16-- != 0);
      }
    }
  }
LABEL_9:
  *(float *)a3 = *v4;
  *(_QWORD *)(a3 + 4) = *(_QWORD *)(v4 + 1);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a3 + 16), *((const void **)v4 + 2), *((_QWORD *)v4 + 3), (uint64_t)(*((_QWORD *)v4 + 3) - *((_QWORD *)v4 + 2)) >> 2);
}

_QWORD *fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::~ShortestFirstQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D217B0;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  return a1;
}

void fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::~ShortestFirstQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D217B0;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Head_(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Enqueue_(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Insert(a1 + 16, &v3);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Dequeue_(uint64_t a1)
{
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Pop(a1 + 16);
}

BOOL fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Clear_(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Insert(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int *v15;
  char *v16;
  int v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  int v42;

  v5 = a1 + 64;
  v4 = *(int **)(a1 + 64);
  v6 = *(int *)(v5 + 24);
  v7 = *(int **)(v5 + 8);
  v8 = v7 - v4;
  if (v8 <= v6)
  {
    v9 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v7 >= v9)
    {
      if ((v8 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = v9 - (_QWORD)v4;
      v12 = (uint64_t)(v9 - (_QWORD)v4) >> 1;
      if (v12 <= v8 + 1)
        v12 = v8 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v13);
        v4 = *(int **)(a1 + 64);
        v7 = *(int **)(a1 + 72);
      }
      else
      {
        v14 = 0;
      }
      v15 = (int *)&v14[4 * v8];
      v16 = &v14[4 * v13];
      *v15 = *a2;
      v10 = v15 + 1;
      while (v7 != v4)
      {
        v17 = *--v7;
        *--v15 = v17;
      }
      *(_QWORD *)(a1 + 64) = v15;
      *(_QWORD *)(a1 + 72) = v10;
      *(_QWORD *)(a1 + 80) = v16;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v7 = *a2;
      v10 = v7 + 1;
    }
    v18 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 72) = v10;
    v19 = *(char **)(a1 + 24);
    if ((unint64_t)v19 >= v18)
    {
      v21 = *(char **)(a1 + 16);
      v22 = (v19 - v21) >> 2;
      if ((unint64_t)(v22 + 1) >> 62)
        goto LABEL_53;
      v23 = v18 - (_QWORD)v21;
      v24 = (uint64_t)(v18 - (_QWORD)v21) >> 1;
      if (v24 <= v22 + 1)
        v24 = v22 + 1;
      if (v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 32, v25);
        v21 = *(char **)(a1 + 16);
        v19 = *(char **)(a1 + 24);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      v28 = &v26[4 * v25];
      *(_DWORD *)v27 = *(_DWORD *)(a1 + 88);
      v20 = v27 + 4;
      while (v19 != v21)
      {
        v29 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v27 - 1) = v29;
        v27 -= 4;
      }
      *(_QWORD *)(a1 + 16) = v27;
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v28;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_DWORD *)v19 = *(_DWORD *)(a1 + 88);
      v20 = v19 + 4;
    }
    v30 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 24) = v20;
    v31 = *(char **)(a1 + 48);
    if ((unint64_t)v31 < v30)
    {
      *(_DWORD *)v31 = *(_DWORD *)(a1 + 88);
      v32 = v31 + 4;
LABEL_51:
      *(_QWORD *)(a1 + 48) = v32;
      goto LABEL_52;
    }
    v33 = *(char **)(a1 + 40);
    v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      v35 = v30 - (_QWORD)v33;
      v36 = (uint64_t)(v30 - (_QWORD)v33) >> 1;
      if (v36 <= v34 + 1)
        v36 = v34 + 1;
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v37);
        v33 = *(char **)(a1 + 40);
        v31 = *(char **)(a1 + 48);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v40 = &v38[4 * v37];
      *(_DWORD *)v39 = *(_DWORD *)(a1 + 88);
      v32 = v39 + 4;
      while (v31 != v33)
      {
        v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(_QWORD *)(a1 + 40) = v39;
      *(_QWORD *)(a1 + 48) = v32;
      *(_QWORD *)(a1 + 56) = v40;
      if (v33)
        operator delete(v33);
      goto LABEL_51;
    }
LABEL_53:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v4[v6] = *a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * *(int *)(*(_QWORD *)(a1 + 40) + 4 * *(int *)(a1 + 88))) = *(_DWORD *)(a1 + 88);
LABEL_52:
  v42 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v42 + 1;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Insert(a1, a2, v42);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3;
  if (a3 >= 1)
  {
    v6 = *(_QWORD *)(a1 + 64);
    while (1)
    {
      v7 = v3 - 1;
      v8 = (v3 - 1) >> 1;
      if (fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(a1 + 8, **(_QWORD **)a1 + 40 * *(int *)(v6 + 4 * v8), **(_QWORD **)a1 + 40 * *a2))
      {
        break;
      }
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(int *)(v9 + 4 * v3);
      v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      v12 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      v6 = *(_QWORD *)(a1 + 64);
      LODWORD(v10) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v10;
      v3 = v7 >> 1;
      if (v7 <= 1)
        return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * (int)v8);
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * (int)v8);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Pop(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD **)(a1 + 64);
  v2 = *v1;
  v3 = *(int *)(a1 + 88) - 1;
  v4 = *(int **)(a1 + 40);
  v5 = *v4;
  v6 = v4[v3];
  *v4 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  *v1 = v1[v3];
  v1[v3] = (_DWORD)v4;
  --*(_DWORD *)(a1 + 88);
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Heapify(a1, 0);
  return v2;
}

BOOL fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,false>::Heapify(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v4 = result + 8;
  while (1)
  {
    v5 = (2 * (_DWORD)a2) | 1u;
    if ((int)v5 >= *(_DWORD *)(v3 + 88)
      || !(result = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(v4, **(_QWORD **)v3 + 40 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v5), **(_QWORD **)v3 + 40 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)a2))))
    {
      v5 = a2;
    }
    v6 = 2 * a2 + 2;
    if ((signed int)v6 < *(_DWORD *)(v3 + 88))
    {
      result = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(v4, **(_QWORD **)v3 + 40 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v6), **(_QWORD **)v3 + 40 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v5));
      if (result)
        v5 = v6;
      else
        v5 = v5;
    }
    if ((_DWORD)v5 == (_DWORD)a2)
      break;
    v7 = *(_QWORD *)(v3 + 40);
    v8 = *(int *)(v7 + 4 * (int)a2);
    v9 = *(int *)(v7 + 4 * (int)v5);
    *(_DWORD *)(v7 + 4 * (int)a2) = v9;
    v10 = *(_QWORD *)(v3 + 16);
    *(_DWORD *)(v10 + 4 * v9) = a2;
    *(_DWORD *)(v7 + 4 * (int)v5) = v8;
    *(_DWORD *)(v10 + 4 * v8) = v5;
    v11 = *(_QWORD *)(v3 + 64);
    LODWORD(v8) = *(_DWORD *)(v11 + 4 * (int)a2);
    *(_DWORD *)(v11 + 4 * (int)a2) = *(_DWORD *)(v11 + 4 * (int)v5);
    *(_DWORD *)(v11 + 4 * (int)v5) = v8;
    a2 = v5;
  }
  return result;
}

uint64_t fst::SingleShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4, char **a5)
{
  uint64_t v10;
  const void *v11;
  size_t v12;
  _BYTE *v13;
  fst *v14;
  _QWORD *v15;
  uint64_t v16;
  fst *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  __n128 v50;
  _BOOL4 v51;
  _BYTE *v52;
  _BOOL4 v53;
  _BYTE *v54;
  _BOOL4 v55;
  int v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  float *v75;
  __n128 v76;
  _BOOL4 v77;
  _BYTE *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const void *v84;
  size_t v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  uint64_t v90;
  void *v91;
  _BYTE *v92;
  float v93;
  uint64_t v94;
  void *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  char *v100;
  unint64_t v101;
  _BYTE v102[12];
  void *__p;
  _BYTE *v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  void *v110[3];
  float v111;
  float v112;
  float v113;
  float v114;

  a5[1] = *a5;
  *a4 = -1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) == -1)
    return 1;
  memset(v110, 0, sizeof(v110));
  v88 = *a3;
  v10 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v10 == -1)
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v106);
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100](a2);
  (*(void (**)(_QWORD))(**(_QWORD **)(v88 + 16) + 56))(*(_QWORD *)(v88 + 16));
  if (a3[3] != 1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(v102, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(v102, "ERROR");
    v17 = fst::LogMessage::LogMessage((fst *)&v97, (uint64_t)v102);
    v18 = (_QWORD *)fst::cerr(v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"SingleShortestPath: for nshortest > 1, use ShortestPath", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" instead", 8);
LABEL_21:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v97);
    if (SHIBYTE(__p) < 0)
      operator delete(*(void **)v102);
    goto LABEL_23;
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(v102);
  LODWORD(v97) = 0;
  LODWORD(v97) = *((_DWORD *)a3 + 10);
  v93 = *(float *)v102;
  if (*(float *)&v97 != *(float *)v102)
    goto LABEL_10;
  LODWORD(v97) = 0;
  LODWORD(v97) = *((_DWORD *)a3 + 11);
  v93 = 0.0;
  v93 = *((float *)a3 + 12);
  v89 = *(float *)&v102[4];
  v114 = *(float *)&v102[8];
  if (*(float *)&v97 != *(float *)&v102[4]
    || v93 != v114
    || (v11 = (const void *)a3[7], v12 = a3[8] - (_QWORD)v11, v13 = __p, v12 != v104 - (_BYTE *)__p)
    || memcmp(v11, __p, v12))
  {
LABEL_10:
    if (__p)
    {
      v104 = __p;
      operator delete(__p);
    }
LABEL_12:
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(v102, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(v102, "ERROR");
    v14 = fst::LogMessage::LogMessage((fst *)&v97, (uint64_t)v102);
    v15 = (_QWORD *)fst::cerr(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"SingleShortestPath: weight and state thresholds not applicable", 62);
    goto LABEL_21;
  }
  v86 = a4;
  v21 = *((_DWORD *)a3 + 20);
  if (v13)
  {
    v104 = v13;
    operator delete(v13);
  }
  if (v21 != -1)
    goto LABEL_12;
  for (; 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) < (int)v10; a5[1] = v26)
  {
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(v102);
    v22 = a2[1];
    if (v22 >= a2[2])
    {
      v23 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(a2, (uint64_t)v102);
    }
    else
    {
      std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)a2, (uint64_t)v102);
      v23 = v22 + 40;
    }
    a2[1] = v23;
    if (__p)
    {
      v104 = __p;
      operator delete(__p);
    }
    v102[0] = 0;
    std::vector<BOOL>::push_back((uint64_t)v110, v102);
    v25 = a5[1];
    v24 = (unint64_t)a5[2];
    if ((unint64_t)v25 >= v24)
    {
      v27 = *a5;
      v28 = (v25 - *a5) >> 4;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v30 = v24 - (_QWORD)v27;
      if (v30 >> 3 > v29)
        v29 = v30 >> 3;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
        v31 = 0xFFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v31);
        v27 = *a5;
        v25 = a5[1];
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[16 * v28];
      *(_DWORD *)v33 = -1;
      *((_QWORD *)v33 + 1) = -1;
      v34 = v33;
      if (v25 != v27)
      {
        do
        {
          *((_OWORD *)v34 - 1) = *((_OWORD *)v25 - 1);
          v34 -= 16;
          v25 -= 16;
        }
        while (v25 != v27);
        v27 = *a5;
      }
      v26 = v33 + 16;
      *a5 = v34;
      a5[1] = v33 + 16;
      a5[2] = &v32[16 * v31];
      if (v27)
        operator delete(v27);
    }
    else
    {
      *(_DWORD *)v25 = -1;
      *((_QWORD *)v25 + 1) = -1;
      v26 = v25 + 16;
    }
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(v102);
  v35 = a2[1];
  if (v35 >= a2[2])
  {
    v36 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(a2, (uint64_t)v102);
  }
  else
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)a2, (uint64_t)v102);
    v36 = v35 + 40;
  }
  a2[1] = v36;
  if (__p)
  {
    v104 = __p;
    operator delete(__p);
  }
  v38 = (uint64_t)(a5 + 2);
  v37 = (unint64_t)a5[2];
  v39 = a5[1];
  if ((unint64_t)v39 >= v37)
  {
    v41 = *a5;
    v42 = (v39 - *a5) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v44 = v37 - (_QWORD)v41;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    if (v45)
    {
      v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v45);
      v41 = *a5;
      v39 = a5[1];
    }
    else
    {
      v46 = 0;
    }
    v47 = &v46[16 * v42];
    v48 = &v46[16 * v45];
    *(_DWORD *)v47 = -1;
    *((_QWORD *)v47 + 1) = -1;
    v40 = v47 + 16;
    if (v39 != v41)
    {
      do
      {
        *((_OWORD *)v47 - 1) = *((_OWORD *)v39 - 1);
        v47 -= 16;
        v39 -= 16;
      }
      while (v39 != v41);
      v41 = *a5;
    }
    *a5 = v47;
    a5[1] = v40;
    a5[2] = v48;
    if (v41)
      operator delete(v41);
  }
  else
  {
    *(_DWORD *)v39 = -1;
    *((_QWORD *)v39 + 1) = -1;
    v40 = v39 + 16;
  }
  a5[1] = v40;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v88 + 16) + 24))(*(_QWORD *)(v88 + 16), v10);
  v102[0] = 1;
  std::vector<BOOL>::push_back((uint64_t)v110, v102);
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v88 + 16) + 48))(*(_QWORD *)(v88 + 16)) & 1) != 0)
      goto LABEL_189;
    v87 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v88 + 16) + 16))(*(_QWORD *)(v88 + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(v88 + 16) + 32))(*(_QWORD *)(v88 + 16));
    *(_QWORD *)((char *)v110[0] + (((unint64_t)(int)v87 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v87);
    v49 = *a2 + 40 * (int)v87;
    *(_DWORD *)v102 = *(_DWORD *)v49;
    *(_QWORD *)&v102[4] = *(_QWORD *)(v49 + 4);
    v104 = 0;
    v105 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v49 + 16), *(_QWORD *)(v49 + 24), (uint64_t)(*(_QWORD *)(v49 + 24) - *(_QWORD *)(v49 + 16)) >> 2);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v97, a1, v87);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v93);
    v89 = *(float *)&v97;
    v114 = v93;
    v50.n128_u32[0] = v97;
    if (*(float *)&v97 != v93
      || (v89 = *((float *)&v97 + 1),
          v114 = *(float *)&v98,
          v112 = *((float *)&v94 + 1),
          v113 = *(float *)&v94,
          v50.n128_u32[0] = HIDWORD(v97),
          *((float *)&v97 + 1) != *(float *)&v94)
      || (v50.n128_f32[0] = v114, v114 != v112))
    {
      v51 = 1;
      goto LABEL_82;
    }
    v52 = v95;
    if (v100 - (_BYTE *)v99 == v96 - (_BYTE *)v95)
    {
      v51 = memcmp(v99, v95, v100 - (_BYTE *)v99) != 0;
LABEL_82:
      v52 = v95;
      if (!v95)
        goto LABEL_84;
LABEL_83:
      v96 = v52;
      operator delete(v52);
      goto LABEL_84;
    }
    v51 = 1;
    if (v95)
      goto LABEL_83;
LABEL_84:
    if (v99)
    {
      v100 = (char *)v99;
      operator delete(v99);
    }
    if (v51)
    {
      (*(void (**)(float *__return_ptr, uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 32))(&v93, a1, v87, v50);
      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)v102, (uint64_t)&v93, &v97);
      if (v95)
      {
        v96 = v95;
        operator delete(v95);
      }
      fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>(&v106, (uint64_t)&v97, (uint64_t)&v93);
      v89 = v106;
      v114 = v93;
      if (v106 == v93
        && (v114 = *((float *)&v107 + 1),
            v89 = *(float *)&v107,
            v112 = *((float *)&v94 + 1),
            v113 = *(float *)&v94,
            *(float *)&v107 == *(float *)&v94)
        && v114 == v112)
      {
        v54 = v95;
        if (v109 - v108 != v96 - (_BYTE *)v95)
        {
          v53 = 1;
          if (!v95)
          {
LABEL_95:
            if (v53)
            {
              fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>(&v106, (uint64_t)&v97, (uint64_t)&v93);
              v106 = v93;
              v107 = v94;
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v108, (char *)v95, (uint64_t)v96, (v96 - (_BYTE *)v95) >> 2);
              if (v95)
              {
                v96 = v95;
                operator delete(v95);
              }
              *v86 = v87;
            }
            v55 = fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member((uint64_t)&v106);
            if (*((_BYTE *)a3 + 34))
              v56 = 5;
            else
              v56 = 0;
            if (*((_BYTE *)a3 + 34))
              v57 = 0;
            else
              v57 = v55;
            if (v55)
              v58 = v56;
            else
              v58 = 1;
            if (v99)
            {
              v100 = (char *)v99;
              operator delete(v99);
            }
            if (!v57)
              goto LABEL_176;
            goto LABEL_111;
          }
LABEL_94:
          v96 = v54;
          operator delete(v54);
          goto LABEL_95;
        }
        v53 = memcmp(v108, v95, v109 - v108) != 0;
      }
      else
      {
        v53 = 1;
      }
      v54 = v95;
      if (!v95)
        goto LABEL_95;
      goto LABEL_94;
    }
LABEL_111:
    v101 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, __n128))(*(_QWORD *)a1 + 136))(a1, v87, &v97, v50);
    while (1)
    {
      if (v97)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 24))(v97) & 1) != 0)
          goto LABEL_168;
        if (v97)
        {
          v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 32))(v97);
          goto LABEL_140;
        }
      }
      else if (v101 >= (unint64_t)v99)
      {
LABEL_168:
        v58 = 0;
        goto LABEL_172;
      }
      v59 = v98 + 56 * v101;
LABEL_140:
      while (1)
      {
        v73 = *a2;
        v74 = *(int *)(v59 + 48);
        if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > v74)
          break;
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v93);
        v60 = a2[1];
        if (v60 >= a2[2])
        {
          v61 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(a2, (uint64_t)&v93);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)a2, (uint64_t)&v93);
          v61 = v60 + 40;
        }
        a2[1] = v61;
        if (v95)
        {
          v96 = v95;
          operator delete(v95);
        }
        LOBYTE(v93) = 0;
        std::vector<BOOL>::push_back((uint64_t)v110, &v93);
        v63 = a5[1];
        v62 = (unint64_t)a5[2];
        if ((unint64_t)v63 >= v62)
        {
          v65 = *a5;
          v66 = (v63 - *a5) >> 4;
          v67 = v66 + 1;
          if ((unint64_t)(v66 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v68 = v62 - (_QWORD)v65;
          if (v68 >> 3 > v67)
            v67 = v68 >> 3;
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0)
            v69 = 0xFFFFFFFFFFFFFFFLL;
          else
            v69 = v67;
          if (v69)
          {
            v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v38, v69);
            v65 = *a5;
            v63 = a5[1];
          }
          else
          {
            v70 = 0;
          }
          v71 = &v70[16 * v66];
          *(_DWORD *)v71 = -1;
          *((_QWORD *)v71 + 1) = -1;
          v72 = v71;
          if (v63 != v65)
          {
            do
            {
              *((_OWORD *)v72 - 1) = *((_OWORD *)v63 - 1);
              v72 -= 16;
              v63 -= 16;
            }
            while (v63 != v65);
            v65 = *a5;
          }
          v64 = v71 + 16;
          *a5 = v72;
          a5[1] = v71 + 16;
          a5[2] = &v70[16 * v69];
          if (v65)
            operator delete(v65);
        }
        else
        {
          *(_DWORD *)v63 = -1;
          *((_QWORD *)v63 + 1) = -1;
          v64 = v63 + 16;
        }
        a5[1] = v64;
      }
      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)v102, v59 + 8, &v93);
      v75 = (float *)(v73 + 40 * (int)v74);
      fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>(v75, (uint64_t)&v93, (uint64_t)&v89);
      v114 = 0.0;
      v114 = *v75;
      v113 = v89;
      v76.n128_f32[0] = v114;
      if (v114 != v89)
        goto LABEL_144;
      v114 = 0.0;
      v114 = v75[1];
      v113 = 0.0;
      v113 = v75[2];
      v111 = *((float *)&v90 + 1);
      v112 = *(float *)&v90;
      v76.n128_f32[0] = v114;
      if (v114 != *(float *)&v90 || (v76.n128_f32[0] = v113, v113 != v111))
      {
LABEL_144:
        v77 = 1;
        goto LABEL_145;
      }
      v83 = v73 + 40 * (int)v74;
      v84 = *(const void **)(v83 + 16);
      v85 = *(_QWORD *)(v83 + 24) - (_QWORD)v84;
      v78 = v91;
      if (v85 == v92 - (_BYTE *)v91)
      {
        v77 = memcmp(v84, v91, v85) != 0;
LABEL_145:
        v78 = v91;
        if (!v91)
          goto LABEL_147;
LABEL_146:
        v92 = v78;
        operator delete(v78);
        goto LABEL_147;
      }
      v77 = 1;
      if (v91)
        goto LABEL_146;
LABEL_147:
      if (!v77)
        goto LABEL_159;
      fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)(v73 + 40 * (int)v74), (uint64_t)&v93, (uint64_t)&v89);
      *v75 = v89;
      *(_QWORD *)(v75 + 1) = v90;
      if (v75 != &v89)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v73 + 40 * (int)v74 + 16), (char *)v91, (uint64_t)v92, (v92 - (_BYTE *)v91) >> 2);
      if (v91)
      {
        v92 = v91;
        operator delete(v91);
      }
      if (!fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member(v73 + 40 * (int)v74))
        break;
      if (v97)
        v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 48))(v97);
      else
        v79 = v101;
      v80 = *(int *)(v59 + 48);
      v81 = (uint64_t)&(*a5)[16 * v80];
      *(_DWORD *)v81 = v87;
      *(_QWORD *)(v81 + 8) = v79;
      v82 = **(_QWORD **)(v88 + 16);
      if (((*(_QWORD *)((char *)v110[0] + ((v80 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v80) & 1) != 0)
      {
        (*(void (**)(void))(v82 + 40))();
      }
      else
      {
        (*(void (**)(void))(v82 + 24))();
        *(_QWORD *)((char *)v110[0] + (((unint64_t)*(int *)(v59 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v59 + 48);
      }
LABEL_159:
      if (v95)
      {
        v96 = v95;
        operator delete(v95);
      }
      v38 = (uint64_t)(a5 + 2);
      if (v97)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v97 + 40))(v97, v76);
      else
        ++v101;
    }
    v38 = (uint64_t)(a5 + 2);
    if (v95)
    {
      v96 = v95;
      operator delete(v95);
    }
    v58 = 1;
LABEL_172:
    if (v97)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
    }
    else if (v100)
    {
      --*(_DWORD *)v100;
    }
LABEL_176:
    if (__p)
    {
      v104 = __p;
      operator delete(__p);
    }
  }
  while (!v58);
  if (v58 != 5)
  {
LABEL_23:
    v16 = 0;
    goto LABEL_24;
  }
LABEL_189:
  v16 = 1;
LABEL_24:
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  if (v110[0])
    operator delete(v110[0]);
  return v16;
}

void sub_1ADEC1A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  uint64_t v34;
  void *v36;
  void *v37;

  v36 = *(void **)(v34 - 152);
  if (v36)
  {
    *(_QWORD *)(v34 - 144) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(v34 - 128);
  if (v37)
    operator delete(v37);
  _Unwind_Resume(exception_object);
}

uint64_t fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  _QWORD v26[3];
  _DWORD *v27;
  uint64_t v28;
  void *v29[2];
  void *__p;
  void *v31;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v8);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v9);
  if ((_DWORD)a4 != -1)
  {
    v10 = -1;
    v11 = a4;
    LODWORD(v12) = -1;
    while (1)
    {
      v13 = v12;
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      if (v10 == -1)
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(v29, a1, a4);
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 184))(a2, v12, v29);
        if (__p)
        {
          v31 = __p;
          operator delete(__p);
        }
        goto LABEL_18;
      }
      v28 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v11, v26);
      v14 = *(_QWORD *)(*a3 + 16 * v10 + 8);
      if (!v26[0])
        break;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v26[0] + 64))(v26[0], v14);
      if (!v26[0])
      {
        v14 = v28;
        goto LABEL_11;
      }
      v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v26[0] + 32))(v26[0]);
LABEL_12:
      v19 = *(_QWORD *)v15;
      v20 = *(_DWORD *)(v15 + 8);
      v21 = *(_QWORD *)(v15 + 12);
      v23 = 0;
      v24 = 0;
      v22 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, *(const void **)(v15 + 24), *(_QWORD *)(v15 + 32), (uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 2);
      v25 = v13;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 208))(a2, v12, &v19);
      if (v22)
      {
        v23 = v22;
        operator delete(v22);
      }
      if (v26[0])
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v26[0] + 8))(v26[0]);
      }
      else if (v27)
      {
        --*v27;
      }
LABEL_18:
      v10 = v11;
      v11 = *(unsigned int *)(*a3 + 16 * (int)v11);
      if ((_DWORD)v11 == -1)
        goto LABEL_21;
    }
    v28 = *(_QWORD *)(*a3 + 16 * v10 + 8);
LABEL_11:
    v15 = v26[1] + 56 * v14;
    goto LABEL_12;
  }
  v12 = 0xFFFFFFFFLL;
LABEL_21:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v12);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 4, 0))
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v17 = fst::ShortestPathProperties(v16, 0);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v17, 0x3FFFFFFF0007);
}

void sub_1ADEC1E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ShortestDistance<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *v6[2];
  void *__p;
  void *v8;
  uint64_t v9[3];
  int v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[29];

  v9[0] = a1;
  v9[1] = (uint64_t)a2;
  v9[2] = *(_QWORD *)a3;
  v10 = *(_DWORD *)(a3 + 16);
  v11 = *(_BYTE *)(a3 + 20);
  v12 = 0;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  memset(v16, 0, sizeof(v16));
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100](a2);
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::ShortestDistance(v9, *(_DWORD *)(a3 + 12));
  if (v16[28])
  {
    std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100](a2);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::NoWeight(v6);
    std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::resize(a2, 1uLL, (uint64_t)v6);
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ShortestDistanceState((uint64_t)v9);
}

void sub_1ADEC1FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
    operator delete(__p);
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ShortestDistanceState((uint64_t)&a14);
  _Unwind_Resume(a1);
}

BOOL fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member(uint64_t a1)
{
  _BOOL8 result;
  float *v3;

  result = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Member((float *)a1);
  if (result)
  {
    v3 = (float *)fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero();
    return *(float *)a1 != *v3
        || *(float *)(a1 + 4) != v3[1]
        || *(float *)(a1 + 8) != v3[2]
        || *(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 24);
  }
  return result;
}

uint64_t fst::Reverse<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  uint64_t v14;
  __n128 v15;
  char *v16;
  _BOOL4 v17;
  int v18;
  unsigned int v19;
  __n128 v20;
  _BOOL4 v21;
  int *v22;
  unint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  __n128 v31;
  _BOOL4 v32;
  char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v47;
  unsigned int v48;
  _BYTE v49[16];
  void *v50;
  void *v51;
  float v52;
  uint64_t v53;
  void *v54;
  _BYTE *v55;
  uint64_t v56;
  void *v57[2];
  void *v58;
  void *v59;
  float v60[4];
  void *v61;
  void *v62;
  float v63;
  uint64_t v64;
  void *v65;
  _BYTE *v66;
  void *__p;
  _DWORD *v68;
  unint64_t v69;
  _DWORD *v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  void *v74;
  _BYTE *v75;
  void *v76[2];
  void *v77;
  void *v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  _BYTE v82[24];
  char *v83;
  void *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;

  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
    (*(void (**)(uint64_t *, _QWORD))(*a2 + 248))(a2, (v8 + 1));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v10 = 0;
  v92 = 0;
  v48 = v9;
  if ((a3 & 1) != 0)
    goto LABEL_79;
  LODWORD(v69) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 128))(a1, &__p);
  v11 = 0xFFFFFFFFLL;
  while (1)
  {
    if (!__p)
    {
      if ((int)v69 >= (int)v68)
        goto LABEL_36;
LABEL_10:
      v14 = v69;
      goto LABEL_11;
    }
    v12 = (*(uint64_t (**)(void *))(*(_QWORD *)__p + 16))(__p);
    v13 = __p;
    if ((v12 & 1) != 0)
      goto LABEL_34;
    if (!__p)
      goto LABEL_10;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 24))();
LABEL_11:
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(v82, a1, v14);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v87);
    v63 = *(float *)v82;
    LODWORD(v60[0]) = v87;
    v15.n128_u32[0] = *(_DWORD *)v82;
    if (*(float *)v82 != *(float *)&v87
      || (v63 = *(float *)&v82[4],
          v60[0] = *(float *)&v82[8],
          LODWORD(v57[0]) = HIDWORD(v87),
          LODWORD(v79) = v88,
          v15.n128_u32[0] = *(_DWORD *)&v82[4],
          *(float *)&v82[4] != *((float *)&v87 + 1))
      || (v15.n128_f32[0] = v60[0], v60[0] != *(float *)&v79))
    {
      v17 = 0;
LABEL_17:
      v16 = v89;
      if (!v89)
        goto LABEL_19;
LABEL_18:
      v90 = v16;
      operator delete(v16);
      goto LABEL_19;
    }
    v16 = v89;
    if (&v83[-*(_QWORD *)&v82[16]] == (char *)(v90 - v89))
    {
      v17 = memcmp(*(const void **)&v82[16], v89, (size_t)&v83[-*(_QWORD *)&v82[16]]) == 0;
      goto LABEL_17;
    }
    v17 = 0;
    if (v89)
      goto LABEL_18;
LABEL_19:
    if (*(_QWORD *)&v82[16])
    {
      v83 = *(char **)&v82[16];
      operator delete(*(void **)&v82[16]);
    }
    v18 = 2 * ((_DWORD)v11 != -1);
    v19 = (_DWORD)v11 == -1 ? v14 : -1;
    if (v17)
    {
      v18 = 4;
      v11 = v11;
    }
    else
    {
      v11 = v19;
    }
    if ((v18 | 4) != 4)
      break;
    if (__p)
      (*(void (**)(void *, __n128))(*(_QWORD *)__p + 32))(__p, v15);
    else
      LODWORD(v69) = v69 + 1;
  }
  v13 = __p;
LABEL_34:
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
LABEL_36:
  if ((_DWORD)v11 != -1)
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(v82, a1, v11);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v87);
    LODWORD(__p) = *(_DWORD *)v82;
    v63 = *(float *)&v87;
    v20.n128_u32[0] = *(_DWORD *)v82;
    v21 = *(float *)v82 != *(float *)&v87
       || (LODWORD(__p) = *(_DWORD *)&v82[4],
           v63 = *(float *)&v82[8],
           v60[0] = *((float *)&v87 + 1),
           LODWORD(v57[0]) = v88,
           v20.n128_u32[0] = *(_DWORD *)&v82[4],
           *(float *)&v82[4] != *((float *)&v87 + 1))
       || (v20.n128_f32[0] = v63, v63 != *(float *)v57)
       || &v83[-*(_QWORD *)&v82[16]] != (char *)(v90 - v89)
       || memcmp(*(const void **)&v82[16], v89, (size_t)&v83[-*(_QWORD *)&v82[16]]) != 0;
    if (v89)
    {
      v90 = v89;
      operator delete(v89);
    }
    if (*(_QWORD *)&v82[16])
    {
      v83 = *(char **)&v82[16];
      operator delete(*(void **)&v82[16]);
    }
    if (!v21)
    {
      v28 = 0;
      v47 = 0;
      goto LABEL_80;
    }
    __p = 0;
    v68 = 0;
    v69 = 0;
    *(_QWORD *)v82 = &__p;
    *(_QWORD *)&v82[8] = 0;
    *(_QWORD *)&v82[16] = 0;
    v83 = (char *)&v92;
    fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, (uint64_t *)v82, 0);
    v22 = (int *)__p;
    if (__p != v68)
    {
      v23 = 0;
      do
      {
        v24 = *v22++;
        if (v24 == *((_DWORD *)__p + (int)v11))
          ++v23;
      }
      while (v22 != v68);
      if (v23 > 1)
        goto LABEL_74;
    }
    v91 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v11, &v87);
    while (2)
    {
      while (2)
      {
        if (v87)
        {
          v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 24))(v87);
          v26 = v87;
          if ((v25 & 1) != 0)
            goto LABEL_68;
          if (v87)
          {
            v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 32))(v87);
            v26 = v87;
            if (*(_DWORD *)(v27 + 48) == (_DWORD)v11)
            {
              v11 = 0xFFFFFFFFLL;
LABEL_68:
              if (v26)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
                goto LABEL_72;
              }
LABEL_70:
              if (v90)
                --*(_DWORD *)v90;
LABEL_72:
              if ((_DWORD)v11 != -1)
              {
                v10 = 0x2000000000;
                goto LABEL_75;
              }
LABEL_74:
              v10 = 0;
              v11 = 0xFFFFFFFFLL;
LABEL_75:
              if (__p)
              {
                v68 = __p;
                operator delete(__p);
              }
              if ((_DWORD)v11 != -1)
              {
                v47 = v10;
                v28 = 0;
                goto LABEL_80;
              }
              goto LABEL_79;
            }
            if (v87)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v87 + 40))(v87);
              continue;
            }
            goto LABEL_63;
          }
        }
        else if (v91 >= (unint64_t)v89)
        {
          goto LABEL_70;
        }
        break;
      }
      if (*(_DWORD *)(v88 + 56 * v91 + 48) == (_DWORD)v11)
      {
        v11 = 0xFFFFFFFFLL;
        goto LABEL_70;
      }
LABEL_63:
      ++v91;
      continue;
    }
  }
  v10 = 0;
LABEL_79:
  v47 = v10;
  v11 = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
  v28 = 1;
LABEL_80:
  v81 = 0;
  (*(void (**)(uint64_t, uint64_t *, __n128))(*(_QWORD *)a1 + 128))(a1, &v79, v20);
  while (2)
  {
    if (!v79)
    {
      if ((int)v81 >= v80)
        goto LABEL_147;
      goto LABEL_86;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v79 + 16))(v79))
    {
      if (v79)
      {
        v29 = (*(uint64_t (**)(void))(*(_QWORD *)v79 + 24))();
LABEL_87:
        v30 = v29 + v28;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v30)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if ((_DWORD)v29 == v48)
        {
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(v76);
          (*(void (**)(uint64_t *, _QWORD, void **))(*a2 + 184))(a2, (v29 + v28), v76);
          if (v77)
          {
            v78 = v77;
            operator delete(v77);
          }
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v87, a1, v29);
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(v82);
        LODWORD(__p) = v87;
        v63 = *(float *)v82;
        v31.n128_u32[0] = v87;
        if (*(float *)&v87 != *(float *)v82
          || (LODWORD(__p) = HIDWORD(v87),
              v63 = *(float *)&v88,
              v60[0] = *(float *)&v82[4],
              LODWORD(v57[0]) = *(_DWORD *)&v82[8],
              v31.n128_u32[0] = HIDWORD(v87),
              *((float *)&v87 + 1) != *(float *)&v82[4])
          || (v31.n128_f32[0] = v63, v63 != *(float *)v57))
        {
          v32 = 1;
          goto LABEL_97;
        }
        v33 = *(char **)&v82[16];
        if ((char *)(v90 - v89) == &v83[-*(_QWORD *)&v82[16]])
        {
          v32 = memcmp(v89, *(const void **)&v82[16], v90 - v89) != 0;
LABEL_97:
          v33 = *(char **)&v82[16];
          if (*(_QWORD *)&v82[16])
          {
LABEL_98:
            v83 = v33;
            operator delete(v33);
          }
        }
        else
        {
          v32 = 1;
          if (*(_QWORD *)&v82[16])
            goto LABEL_98;
        }
        if ((v28 & v32) != 0)
        {
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse((uint64_t)&v87, (uint64_t)&v72);
          *(_QWORD *)v82 = 0;
          *(_DWORD *)&v82[8] = v72;
          *(_QWORD *)&v82[12] = v73;
          v84 = 0;
          v85 = 0;
          v83 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v83, v74, (uint64_t)v75, (v75 - (_BYTE *)v74) >> 2);
          v86 = v29 + v28;
          if (v74)
          {
            v75 = v74;
            operator delete(v74);
          }
          (*(void (**)(uint64_t *, _QWORD, _BYTE *))(*a2 + 208))(a2, 0, v82);
          if (v83)
          {
            v84 = v83;
            operator delete(v83);
          }
        }
        v71 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, __n128))(*(_QWORD *)a1 + 136))(a1, v29, &__p, v31);
LABEL_105:
        if (__p)
        {
          if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
          {
            if (__p)
            {
              (*(void (**)(void))(*(_QWORD *)__p + 8))();
              goto LABEL_136;
            }
LABEL_134:
            if (v70)
              --*v70;
LABEL_136:
            if (v89)
            {
              v90 = v89;
              operator delete(v89);
            }
            if (v79)
              (*(void (**)(uint64_t))(*(_QWORD *)v79 + 32))(v79);
            else
              ++v81;
            continue;
          }
          if (__p)
          {
            v34 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
LABEL_111:
            v35 = *(_DWORD *)(v34 + 48);
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse(v34 + 8, (uint64_t)&v63);
            v36 = (v35 + v28);
            if ((_DWORD)v36 == (_DWORD)v11)
              v37 = v28;
            else
              v37 = 1;
            if ((v37 & 1) == 0)
            {
              (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(v57, a1, v11);
              fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse((uint64_t)v57, (uint64_t)v60);
              fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)v60, (uint64_t)&v63, v82);
              v63 = *(float *)v82;
              v64 = *(_QWORD *)&v82[4];
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v65, *(char **)&v82[16], (uint64_t)v83, (uint64_t)&v83[-*(_QWORD *)&v82[16]] >> 2);
              if (*(_QWORD *)&v82[16])
              {
                v83 = *(char **)&v82[16];
                operator delete(*(void **)&v82[16]);
              }
              if (v61)
              {
                v62 = v61;
                operator delete(v61);
              }
              if (v58)
              {
                v59 = v58;
                operator delete(v58);
              }
            }
            v38 = *(_QWORD *)v34;
            v52 = v63;
            v53 = v64;
            v55 = 0;
            v56 = 0;
            v54 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v54, v65, (uint64_t)v66, (v66 - (_BYTE *)v65) >> 2);
            *(_QWORD *)v82 = v38;
            *(float *)&v82[8] = v52;
            *(_QWORD *)&v82[12] = v53;
            v84 = 0;
            v85 = 0;
            v83 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v83, v54, (uint64_t)v55, (v55 - (_BYTE *)v54) >> 2);
            v86 = v30;
            if (v54)
            {
              v55 = v54;
              operator delete(v54);
            }
            while (1)
            {
              v39 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              v40 = *a2;
              if (v39 > (int)v36)
                break;
              (*(void (**)(uint64_t *))(v40 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, _BYTE *))(v40 + 208))(a2, v36, v82);
            if (v83)
            {
              v84 = v83;
              operator delete(v83);
            }
            if (v65)
            {
              v66 = v65;
              operator delete(v65);
            }
            if (__p)
              (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
            else
              ++v71;
            goto LABEL_105;
          }
        }
        else if (v71 >= v69)
        {
          goto LABEL_134;
        }
        v34 = (uint64_t)&v68[14 * v71];
        goto LABEL_111;
      }
LABEL_86:
      v29 = v81;
      goto LABEL_87;
    }
    break;
  }
  if (v79)
    (*(void (**)(void))(*(_QWORD *)v79 + 8))();
LABEL_147:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, v11);
  if ((_DWORD)v11 == v48)
    v41 = v28;
  else
    v41 = 1;
  if ((v41 & 1) == 0)
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(v82, a1, v48);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse((uint64_t)v82, (uint64_t)v49);
    (*(void (**)(uint64_t *, _QWORD, _BYTE *))(*a2 + 184))(a2, v48, v49);
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
    if (*(_QWORD *)&v82[16])
    {
      v83 = *(char **)&v82[16];
      operator delete(*(void **)&v82[16]);
    }
  }
  v42 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  v43 = v92 | v42;
  v44 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0) | v47;
  v45 = fst::ReverseProperties(v43, v28);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v44 | v45, 0x3FFFFFFF0007);
}

void sub_1ADEC2BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::vector<int>::size_type v6;
  std::vector<int>::pointer begin;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer v10;
  int v11;
  std::vector<int> v12;

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = (v4 - v5) >> 2;
  std::vector<int>::vector(&v12, v6);
  begin = v12.__begin_;
  if (v4 != v5)
  {
    if (v6 <= 1)
      v8 = 1;
    else
      v8 = (v4 - v5) >> 2;
    v9 = (int *)(*(_QWORD *)(a1 + 16) + 4 * v6 - 4);
    v10 = v12.__begin_;
    do
    {
      v11 = *v9--;
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_QWORD *)(a2 + 4) = *(_QWORD *)(a1 + 4);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a2 + 16), begin, (uint64_t)v12.__end_, v12.__end_ - begin);
  if (v12.__begin_)
  {
    v12.__end_ = v12.__begin_;
    operator delete(v12.__begin_);
  }
}

void sub_1ADEC2EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v10 = *a1;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v11 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v10) >> 3);
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - v10) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v13 >= 0x333333333333333)
      v15 = 0x666666666666666;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[40 * v12];
    v20 = v19;
    v21 = &v16[40 * v15];
    std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::push_back[abi:ne180100](&v18, a3);
    v4 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__swap_out_circular_buffer(a1, &v18, v4);
    std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)a1, a3);
  }
  else
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__move_range((uint64_t)a1, a2, v6, a2 + 40);
    if (v4 <= a3)
      a3 += 40 * (a1[1] > a3);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(v4, a3);
  }
  return v4;
}

void sub_1ADEC3020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::NShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, int a6, int a7, float a8)
{
  fst *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  const void *v24;
  _BYTE *v25;
  void *v26;
  _BOOL4 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  float *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int *v38;
  int *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  int *v45;
  char *v46;
  int v47;
  int v48;
  int *v49;
  int *v50;
  int v51;
  int *v52;
  int *v53;
  float v54;
  uint64_t v55;
  void *v56;
  int v57;
  char *v58;
  char *v59;
  unint64_t v60;
  float i;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  float v72;
  BOOL v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  float *v81;
  float v83;
  float v84;
  BOOL v85;
  float v86;
  uint64_t v88;
  const void *v89;
  uint64_t v90;
  void *v91;
  float v92;
  uint64_t v93;
  float *v94;
  uint64_t v95;
  int *v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  int *v104;
  int v105;
  _BOOL4 v106;
  void *v107;
  uint64_t v108;
  float *v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  int *v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  char v123;
  int v126;
  uint64_t *v127[2];
  int v128;
  float v129;
  uint64_t *v130[2];
  int v131;
  float v132;
  float v133;
  uint64_t v134;
  _BYTE v135[12];
  void *v136;
  _BYTE *v137;
  uint64_t v138;
  float v139;
  uint64_t v140;
  void *v141;
  _BYTE *v142;
  __int128 v143;
  void *v144;
  char *v145;
  unint64_t v146;
  void *v147;
  float v148;
  _BYTE v149[12];
  void *v150;
  _BYTE *v151;
  uint64_t v152;
  float v153;
  int v154;
  uint64_t v155;
  void *v156;
  void *v157;
  uint64_t v158;
  float v159;
  uint64_t v160;
  _BYTE v161[12];
  void *v162;
  _BYTE *v163;
  uint64_t *v164[2];
  int v165;
  float v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  float v170;
  uint64_t v171;
  void *v172;
  _BYTE *v173;
  uint64_t v174;
  void *v175[2];
  void *v176;
  void *v177;
  _QWORD v178[2];
  void *v179;
  void *v180;
  char v181;
  char *v182;
  char *v183;
  char *v184;
  int *v185;
  int *v186;
  char *v187;
  uint64_t v188;
  float *v189;
  unint64_t v190;
  float v191;
  int v192;

  if (!a4)
    return;
  if (a7 && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x400000000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&v147, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&v147, "ERROR");
    v14 = fst::LogMessage::LogMessage((fst *)&v159, (uint64_t)&v147);
    v15 = (_QWORD *)fst::cerr(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"NShortestPath: FST has a cycle and include_final_ties was set to true. This is not currently supported.", 103);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v159);
    if ((v149[11] & 0x80000000) != 0)
      operator delete(v147);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v16);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v17);
  v188 = 0;
  v189 = 0;
  v190 = 0;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v182 = 0;
  v183 = 0;
  v184 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) == -1
    || (v19 = *a3,
        v18 = a3[1],
        0xCCCCCCCCCCCCCCCDLL * ((v18 - v19) >> 3) <= (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1)))
  {
LABEL_21:
    if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 4, 0))
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    goto LABEL_23;
  }
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v21 = *a3;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v147);
  v22 = (float *)(v21 + 40 * v20);
  v159 = 0.0;
  v159 = *v22;
  v133 = *(float *)&v147;
  if (v159 != *(float *)&v147)
    goto LABEL_13;
  v159 = 0.0;
  v159 = v22[1];
  v133 = 0.0;
  v133 = v22[2];
  LODWORD(v175[0]) = HIDWORD(v147);
  v170 = v148;
  if (v159 != *((float *)&v147 + 1))
    goto LABEL_13;
  if (v133 == v170
    && (v23 = v21 + 40 * v20,
        v24 = *(const void **)(v23 + 16),
        v25 = (_BYTE *)(*(_QWORD *)(v23 + 24) - (_QWORD)v24),
        v26 = *(void **)&v149[4],
        v25 == (char *)v150 - *(_QWORD *)&v149[4])
    && !memcmp(v24, *(const void **)&v149[4], (size_t)v25))
  {
    v28 = 1;
    if (!v26)
      goto LABEL_20;
  }
  else
  {
LABEL_13:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v159);
    v27 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()((uint64_t)&v181, a5, (uint64_t)&v159);
    if (a6)
      v28 = v27;
    else
      v28 = 1;
    if (*(_QWORD *)&v161[4])
    {
      v162 = *(void **)&v161[4];
      operator delete(*(void **)&v161[4]);
    }
    v26 = *(void **)&v149[4];
    if (!*(_QWORD *)&v149[4])
      goto LABEL_20;
  }
  v150 = v26;
  operator delete(v26);
LABEL_20:
  if (v28)
    goto LABEL_21;
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v29);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(v178);
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 184))(a2, v30, v178);
  if (v179)
  {
    v180 = v179;
    operator delete(v179);
  }
  v31 = v30;
  v126 = v30;
  while (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v189 - v188) >> 4) <= (int)v30)
  {
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v159);
    LODWORD(v147) = -1;
    v148 = v159;
    *(_QWORD *)v149 = v160;
    v151 = 0;
    v152 = 0;
    v150 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v150, *(const void **)&v161[4], (uint64_t)v162, ((uint64_t)v162 - *(_QWORD *)&v161[4]) >> 2);
    v32 = v189;
    if ((unint64_t)v189 >= v190)
    {
      v33 = std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>(&v188, (uint64_t)&v147);
    }
    else
    {
      *(_DWORD *)v189 = (_DWORD)v147;
      v32[2] = v148;
      *(_QWORD *)(v32 + 3) = *(_QWORD *)v149;
      *((_QWORD *)v32 + 4) = 0;
      *((_QWORD *)v32 + 5) = 0;
      *((_QWORD *)v32 + 3) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v32 + 3, v150, (uint64_t)v151, (v151 - (_BYTE *)v150) >> 2);
      v33 = (uint64_t)(v32 + 12);
    }
    v189 = (float *)v33;
    if (v150)
    {
      v151 = v150;
      operator delete(v150);
    }
    if (*(_QWORD *)&v161[4])
    {
      v162 = *(void **)&v161[4];
      operator delete(*(void **)&v161[4]);
    }
  }
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v159);
  LODWORD(v147) = v34;
  v148 = v159;
  *(_QWORD *)v149 = v160;
  v151 = 0;
  v152 = 0;
  v150 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v150, *(const void **)&v161[4], (uint64_t)v162, ((uint64_t)v162 - *(_QWORD *)&v161[4]) >> 2);
  v35 = v188;
  v36 = v188 + 48 * v31;
  *(_DWORD *)v36 = (_DWORD)v147;
  *(float *)(v36 + 8) = v148;
  v36 += 8;
  *(_QWORD *)(v36 + 4) = *(_QWORD *)v149;
  if ((float *)v36 != &v148)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v35 + 48 * v31 + 24), (char *)v150, (uint64_t)v151, (v151 - (_BYTE *)v150) >> 2);
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (*(_QWORD *)&v161[4])
  {
    v162 = *(void **)&v161[4];
    operator delete(*(void **)&v161[4]);
  }
  v37 = v186;
  if (v186 >= (int *)v187)
  {
    v39 = v185;
    v40 = v186 - v185;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v42 = v187 - (char *)v185;
    if ((v187 - (char *)v185) >> 1 > v41)
      v41 = v42 >> 1;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
      v43 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    if (v43)
    {
      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v187, v43);
      v39 = v185;
      v37 = v186;
    }
    else
    {
      v44 = 0;
    }
    v45 = (int *)&v44[4 * v40];
    v46 = &v44[4 * v43];
    *v45 = v126;
    v38 = v45 + 1;
    while (v37 != v39)
    {
      v47 = *--v37;
      *--v45 = v47;
    }
    v185 = v45;
    v186 = v38;
    v187 = v46;
    if (v39)
      operator delete(v39);
  }
  else
  {
    *v186 = v126;
    v38 = v37 + 1;
  }
  v186 = v38;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>(*a3 + 40 * v48, a5, v175);
  v123 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  do
  {
    v49 = v185;
    v50 = v186;
    if (v185 == v186)
      break;
    v164[0] = &v188;
    v164[1] = a3;
    v165 = -1;
    v166 = a8;
    if ((char *)v186 - (char *)v185 >= 5)
    {
      v51 = *v185;
      v52 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>> &,std::__wrap_iter<int *>>(v185, v164, (unint64_t)((char *)v186 - (char *)v185) >> 2);
      v53 = v50 - 1;
      if (v50 - 1 == v52)
      {
        *v52 = v51;
      }
      else
      {
        *v52 = *v53;
        *v53 = v51;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>> &,std::__wrap_iter<int *>>((_BOOL8)v49, (uint64_t)(v52 + 1), v164, v52 + 1 - v49);
      }
    }
    v54 = *((float *)v186 - 1);
    std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::pair[abi:ne180100]((uint64_t)&v159, v188 + 48 * SLODWORD(v54));
    --v186;
    if (v159 == NAN)
    {
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v154);
    }
    else if (0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3) <= SLODWORD(v159))
    {
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v154);
    }
    else
    {
      v55 = *a3 + 40 * SLODWORD(v159);
      v154 = *(_DWORD *)v55;
      v155 = *(_QWORD *)(v55 + 4);
      v157 = 0;
      v158 = 0;
      v156 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v156, *(const void **)(v55 + 16), *(_QWORD *)(v55 + 24), (uint64_t)(*(_QWORD *)(v55 + 24) - *(_QWORD *)(v55 + 16)) >> 2);
    }
    fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v154, (uint64_t)&v160 + 4, &v147);
    if (fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()((uint64_t)&v181, (uint64_t)v175, (uint64_t)&v147))
    {
      v56 = *(void **)&v149[4];
      if (*(_QWORD *)&v149[4])
      {
        v150 = *(void **)&v149[4];
        goto LABEL_80;
      }
      goto LABEL_243;
    }
    if (a6 == -1)
    {
      if (*(_QWORD *)&v149[4])
      {
        v150 = *(void **)&v149[4];
        operator delete(*(void **)&v149[4]);
      }
    }
    else
    {
      v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
      if (*(_QWORD *)&v149[4])
      {
        v150 = *(void **)&v149[4];
        operator delete(*(void **)&v149[4]);
      }
      if (v57 >= a6)
        goto LABEL_243;
    }
    v58 = v182;
    v59 = v183;
    v60 = (v183 - v182) >> 2;
    for (i = v159; v60 <= SLODWORD(v159) + 1; v59 = v62)
    {
      if (v59 >= v184)
      {
        v63 = v60 + 1;
        if ((v60 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v64 = v184 - v58;
        if ((v184 - v58) >> 1 > v63)
          v63 = v64 >> 1;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
          v65 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v65 = v63;
        if (v65)
        {
          v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v184, v65);
          v58 = v182;
          v59 = v183;
        }
        else
        {
          v66 = 0;
        }
        v67 = &v66[4 * v60];
        *(_DWORD *)v67 = 0;
        v62 = v67 + 4;
        while (v59 != v58)
        {
          v68 = *((_DWORD *)v59 - 1);
          v59 -= 4;
          *((_DWORD *)v67 - 1) = v68;
          v67 -= 4;
        }
        v182 = v67;
        v183 = v62;
        v184 = &v66[4 * v65];
        if (v58)
        {
          operator delete(v58);
          v58 = v182;
        }
        else
        {
          v58 = v67;
        }
      }
      else
      {
        *(_DWORD *)v59 = 0;
        v62 = v59 + 4;
      }
      v183 = v62;
      v60 = (v62 - v58) >> 2;
      i = v159;
    }
    if ((a7 & 1) == 0)
    {
      LODWORD(v69) = LODWORD(i) + 1;
LABEL_117:
      v69 = (int)v69;
      goto LABEL_118;
    }
    LODWORD(v69) = LODWORD(i) + 1;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v168 - v167) >> 3) > (int)v69)
      goto LABEL_117;
    do
    {
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v147);
      v70 = v168;
      if (v168 >= v169)
      {
        v71 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(&v167, (uint64_t)&v147);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)&v167, (uint64_t)&v147);
        v71 = v70 + 40;
      }
      v168 = v71;
      if (*(_QWORD *)&v149[4])
      {
        v150 = *(void **)&v149[4];
        operator delete(*(void **)&v149[4]);
        v71 = v168;
      }
      v69 = SLODWORD(v159) + 1;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v71 - v167) >> 3) <= v69);
    v58 = v182;
LABEL_118:
    ++*(_DWORD *)&v58[4 * v69];
    v72 = v159;
    if (v159 == NAN)
    {
      if ((v123 & 1) != 0)
      {
        v73 = *((float *)&v160 + 1) > (float)(v170 + 0.00097656) || v170 > (float)(*((float *)&v160 + 1) + 0.00097656);
        if (v73
          || (*(float *)&v171 != *(float *)v161 || *((float *)&v171 + 1) != *(float *)&v161[4])
          && vabds_f32(*(float *)&v171 + *((float *)&v171 + 1), *(float *)v161 + *(float *)&v161[4]) > 0.00097656
          || v173 - (_BYTE *)v172 != v163 - (_BYTE *)v162
          || memcmp(v172, v162, v173 - (_BYTE *)v172))
        {
          v74 = 1;
          v123 = 1;
          goto LABEL_244;
        }
      }
      v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v133);
      v147 = 0;
      v148 = v133;
      *(_QWORD *)v149 = v134;
      v151 = 0;
      v152 = 0;
      v150 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v150, *(const void **)&v135[4], (uint64_t)v136, ((uint64_t)v136 - *(_QWORD *)&v135[4]) >> 2);
      v153 = v54;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 208))(a2, v75, &v147);
      if (v150)
      {
        v151 = v150;
        operator delete(v150);
      }
      if (*(_QWORD *)&v135[4])
      {
        v136 = *(void **)&v135[4];
        operator delete(*(void **)&v135[4]);
      }
      v72 = v159;
    }
    if ((v123 & 1) != 0)
      goto LABEL_136;
    if (v72 == NAN)
    {
      v74 = *(int *)v182 == a4;
      if (*(_DWORD *)v182 != a4 || a7 == 0)
      {
        v123 = 0;
        goto LABEL_244;
      }
      v170 = *((float *)&v160 + 1);
      v171 = *(_QWORD *)v161;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v172, (char *)v162, (uint64_t)v163, (v163 - (_BYTE *)v162) >> 2);
      v72 = v159;
LABEL_136:
      v123 = 1;
      if (v72 == NAN)
        goto LABEL_243;
      goto LABEL_140;
    }
    v123 = 0;
LABEL_140:
    v76 = SLODWORD(v72) + 1;
    v77 = *(int *)&v182[4 * v76];
    if (a7)
    {
      if (v77 == a4)
      {
        v78 = v167;
        v79 = (_QWORD *)(v167 + 40 * v76);
        *(_DWORD *)v79 = HIDWORD(v160);
        *(_QWORD *)((char *)v79 + 4) = *(_QWORD *)v161;
        if (v79 != (uint64_t *)((char *)&v160 + 4))
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v78 + 40 * v76 + 16), (char *)v162, (uint64_t)v163, (v163 - (_BYTE *)v162) >> 2);
      }
      else if (v77 > a4)
      {
        v81 = (float *)(v167 + 40 * v76);
        if (*v81 > (float)(*((float *)&v160 + 1) + 0.00097656) || *((float *)&v160 + 1) > (float)(*v81 + 0.00097656))
          goto LABEL_243;
        v83 = v81[1];
        v84 = v81[2];
        v85 = *(float *)v161 == v83 && *(float *)&v161[4] == v84;
        v86 = vabds_f32(*(float *)v161 + *(float *)&v161[4], v83 + v84);
        if (!v85 && v86 > 0.00097656)
          goto LABEL_243;
        v88 = v167 + 40 * v76;
        v89 = *(const void **)(v88 + 16);
        if (v163 - (_BYTE *)v162 != *(_QWORD *)(v88 + 24) - (_QWORD)v89 || memcmp(v162, v89, v163 - (_BYTE *)v162))
          goto LABEL_243;
      }
    }
    else if (v77 > a4)
    {
      goto LABEL_243;
    }
    v146 = 0;
    (*(void (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)a1 + 136))(a1, LODWORD(v159), &v143);
    while (1)
    {
      if (!(_QWORD)v143)
      {
        if (v146 >= (unint64_t)v144)
          goto LABEL_205;
        goto LABEL_172;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v143 + 24))(v143))
        break;
      if ((_QWORD)v143)
      {
        v90 = (*(uint64_t (**)(void))(*(_QWORD *)v143 + 32))();
        goto LABEL_173;
      }
LABEL_172:
      v90 = *((_QWORD *)&v143 + 1) + 56 * v146;
LABEL_173:
      v91 = *(void **)v90;
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse(v90 + 8, (uint64_t)&v133);
      v92 = *(float *)(v90 + 48);
      v147 = v91;
      v148 = v133;
      *(_QWORD *)v149 = v134;
      v151 = 0;
      v152 = 0;
      v150 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v150, *(const void **)&v135[4], (uint64_t)v136, ((uint64_t)v136 - *(_QWORD *)&v135[4]) >> 2);
      v153 = v92;
      if (*(_QWORD *)&v135[4])
      {
        v136 = *(void **)&v135[4];
        operator delete(*(void **)&v135[4]);
      }
      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v160 + 4, (uint64_t)&v148, &v139);
      v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      v133 = v153;
      *((float *)&v134 + 1) = v139;
      *(_QWORD *)v135 = v140;
      v137 = 0;
      v138 = 0;
      v136 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v136, v141, (uint64_t)v142, (v142 - (_BYTE *)v141) >> 2);
      v94 = v189;
      if ((unint64_t)v189 >= v190)
      {
        v95 = std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>(&v188, (uint64_t)&v133);
      }
      else
      {
        *v189 = v133;
        v94[2] = *((float *)&v134 + 1);
        *(_QWORD *)(v94 + 3) = *(_QWORD *)v135;
        *((_QWORD *)v94 + 4) = 0;
        *((_QWORD *)v94 + 5) = 0;
        *((_QWORD *)v94 + 3) = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v94 + 3, v136, (uint64_t)v137, (v137 - (_BYTE *)v136) >> 2);
        v95 = (uint64_t)(v94 + 12);
      }
      v189 = (float *)v95;
      if (v136)
      {
        v137 = v136;
        operator delete(v136);
      }
      v153 = v54;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 208))(a2, v93, &v147);
      v96 = v186;
      if (v186 >= (int *)v187)
      {
        v98 = v185;
        v99 = v186 - v185;
        v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v101 = v187 - (char *)v185;
        if ((v187 - (char *)v185) >> 1 > v100)
          v100 = v101 >> 1;
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
          v102 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v102 = v100;
        if (v102)
        {
          v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v187, v102);
          v98 = v185;
          v96 = v186;
        }
        else
        {
          v103 = 0;
        }
        v104 = (int *)&v103[4 * v99];
        *v104 = v93;
        v97 = (uint64_t)(v104 + 1);
        while (v96 != v98)
        {
          v105 = *--v96;
          *--v104 = v105;
        }
        v185 = v104;
        v186 = (int *)v97;
        v187 = &v103[4 * v102];
        if (v98)
          operator delete(v98);
      }
      else
      {
        *v186 = v93;
        v97 = (uint64_t)(v96 + 1);
      }
      v186 = (int *)v97;
      v130[0] = &v188;
      v130[1] = a3;
      v131 = -1;
      v132 = a8;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>> &,std::__wrap_iter<int *>>((_BOOL8)v185, v97, v130, (v97 - (uint64_t)v185) >> 2);
      if (v141)
      {
        v142 = v141;
        operator delete(v141);
      }
      if (v150)
      {
        v151 = v150;
        operator delete(v150);
      }
      if ((_QWORD)v143)
        (*(void (**)(_QWORD))(*(_QWORD *)v143 + 40))(v143);
      else
        ++v146;
    }
    if ((_QWORD)v143)
    {
      (*(void (**)(void))(*(_QWORD *)v143 + 8))();
      goto LABEL_207;
    }
LABEL_205:
    if (v145)
      --*(_DWORD *)v145;
LABEL_207:
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(&v147, a1, LODWORD(v159));
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Reverse((uint64_t)&v147, (uint64_t)&v133);
    if (*(_QWORD *)&v149[4])
    {
      v150 = *(void **)&v149[4];
      operator delete(*(void **)&v149[4]);
    }
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v147);
    *(float *)&v143 = v133;
    v139 = *(float *)&v147;
    if (v133 != *(float *)&v147
      || (v139 = *((float *)&v134 + 1),
          LODWORD(v143) = v134,
          v192 = HIDWORD(v147),
          v191 = v148,
          *(float *)&v134 != *((float *)&v147 + 1))
      || v139 != v191)
    {
      v106 = 1;
      goto LABEL_213;
    }
    v107 = *(void **)&v149[4];
    if ((char *)v136 - *(_QWORD *)&v135[4] == (char *)v150 - *(_QWORD *)&v149[4])
    {
      v106 = memcmp(*(const void **)&v135[4], *(const void **)&v149[4], (size_t)v136 - *(_QWORD *)&v135[4]) != 0;
LABEL_213:
      v107 = *(void **)&v149[4];
      if (*(_QWORD *)&v149[4])
      {
LABEL_214:
        v150 = v107;
        operator delete(v107);
      }
    }
    else
    {
      v106 = 1;
      if (*(_QWORD *)&v149[4])
        goto LABEL_214;
    }
    if (v106)
    {
      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v160 + 4, (uint64_t)&v133, &v143);
      v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      LODWORD(v147) = -1;
      v148 = *(float *)&v143;
      *(_QWORD *)v149 = *(_QWORD *)((char *)&v143 + 4);
      v151 = 0;
      v152 = 0;
      v150 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v150, v144, (uint64_t)v145, (v145 - (_BYTE *)v144) >> 2);
      v109 = v189;
      if ((unint64_t)v189 >= v190)
      {
        v110 = std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>(&v188, (uint64_t)&v147);
      }
      else
      {
        *(_DWORD *)v189 = (_DWORD)v147;
        v109[2] = v148;
        *(_QWORD *)(v109 + 3) = *(_QWORD *)v149;
        *((_QWORD *)v109 + 4) = 0;
        *((_QWORD *)v109 + 5) = 0;
        *((_QWORD *)v109 + 3) = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v109 + 3, v150, (uint64_t)v151, (v151 - (_BYTE *)v150) >> 2);
        v110 = (uint64_t)(v109 + 12);
      }
      v189 = (float *)v110;
      if (v150)
      {
        v151 = v150;
        operator delete(v150);
      }
      v147 = 0;
      v148 = v133;
      *(_QWORD *)v149 = v134;
      v151 = 0;
      v152 = 0;
      v150 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v150, *(const void **)&v135[4], (uint64_t)v136, ((uint64_t)v136 - *(_QWORD *)&v135[4]) >> 2);
      v153 = v54;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 208))(a2, v108, &v147);
      if (v150)
      {
        v151 = v150;
        operator delete(v150);
      }
      v111 = v186;
      if (v186 >= (int *)v187)
      {
        v113 = v185;
        v114 = v186 - v185;
        v115 = v114 + 1;
        if ((unint64_t)(v114 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v116 = v187 - (char *)v185;
        if ((v187 - (char *)v185) >> 1 > v115)
          v115 = v116 >> 1;
        if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL)
          v117 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v117 = v115;
        if (v117)
        {
          v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v187, v117);
          v113 = v185;
          v111 = v186;
        }
        else
        {
          v118 = 0;
        }
        v119 = (int *)&v118[4 * v114];
        *v119 = v108;
        v112 = (uint64_t)(v119 + 1);
        while (v111 != v113)
        {
          v120 = *--v111;
          *--v119 = v120;
        }
        v185 = v119;
        v186 = (int *)v112;
        v187 = &v118[4 * v117];
        if (v113)
          operator delete(v113);
      }
      else
      {
        *v186 = v108;
        v112 = (uint64_t)(v111 + 1);
      }
      v186 = (int *)v112;
      v127[0] = &v188;
      v127[1] = a3;
      v128 = -1;
      v129 = a8;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>> &,std::__wrap_iter<int *>>((_BOOL8)v185, v112, v127, (v112 - (uint64_t)v185) >> 2);
      if (v144)
      {
        v145 = (char *)v144;
        operator delete(v144);
      }
    }
    v56 = *(void **)&v135[4];
    if (*(_QWORD *)&v135[4])
    {
      v136 = *(void **)&v135[4];
LABEL_80:
      operator delete(v56);
    }
LABEL_243:
    v74 = 0;
LABEL_244:
    if (v156)
    {
      v157 = v156;
      operator delete(v156);
    }
    if (v162)
    {
      v163 = v162;
      operator delete(v162);
    }
  }
  while (!v74);
  fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 4, 0))
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
  v121 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v122 = fst::ShortestPathProperties(v121, 0);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v122, 0x3FFFFFFF0007);
  v147 = &v167;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  if (v176)
  {
    v177 = v176;
    operator delete(v176);
  }
LABEL_23:
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  v147 = &v188;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
}

void sub_1ADEC43F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *a68;
  uint64_t a69;
  uint64_t v69;
  void *v71;
  void *v72;
  void *v73;

  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  a41 = &a63;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  if (a68)
  {
    a69 = (uint64_t)a68;
    operator delete(a68);
  }
  v71 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v71;
    operator delete(v71);
  }
  v72 = *(void **)(v69 - 184);
  if (v72)
  {
    *(_QWORD *)(v69 - 176) = v72;
    operator delete(v72);
  }
  v73 = *(void **)(v69 - 160);
  if (v73)
  {
    *(_QWORD *)(v69 - 152) = v73;
    operator delete(v73);
  }
  a41 = (void *)(v69 - 136);
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  _Unwind_Resume(a1);
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D273C8;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D24E00;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v3 = *(_DWORD *)a2;
  *(_QWORD *)(v3 + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v3 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 40;
  return result;
}

void sub_1ADEC47D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[40 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  v12 = *(_QWORD *)(a2 + 4);
  *((_QWORD *)v11 + 2) = 0;
  v11 += 16;
  *(_QWORD *)(v11 - 12) = v12;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v16 += 40;
  std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADEC48EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_DWORD *)(v9 - 40);
      v9 -= 40;
      *(_DWORD *)(v7 - 40) = v10;
      v11 = *(_QWORD *)(v9 + 4);
      *(_QWORD *)(v7 - 24) = 0;
      v12 = (_QWORD *)(v7 - 24);
      *(_QWORD *)((char *)v12 - 12) = v11;
      v12[1] = 0;
      v12[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v12, *(const void **)(v9 + 16), *(_QWORD *)(v9 + 24), (uint64_t)(*(_QWORD *)(v9 + 24) - *(_QWORD *)(v9 + 16)) >> 2);
      v7 = *((_QWORD *)&v18 + 1) - 40;
      *((_QWORD *)&v18 + 1) -= 40;
    }
    while (v9 != a5);
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_1ADEC4A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::ShortestDistance(uint64_t *a1, int a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *i;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  void **v28;
  int v29;
  uint64_t *v30;
  uint64_t *j;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t k;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  float v73;
  BOOL v74;
  BOOL v75;
  float v76;
  float v77;
  BOOL v78;
  float v79;
  BOOL v80;
  uint64_t v81;
  const void *v82;
  size_t v83;
  _BYTE *v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _QWORD *v90;
  float v91;
  uint64_t v92;
  void *v93;
  _BYTE *v94;
  float v95;
  uint64_t v96;
  void *v97;
  _BYTE *v98;
  __int128 v99;
  void *__p;
  char *v101;
  unint64_t v102;
  float v103;
  uint64_t v104;
  _BYTE *v105;
  _BYTE *v106;
  uint64_t v107;
  float v108;
  int v109;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
      return;
    v89 = (char *)a1 + 116;
LABEL_187:
    *v89 = 1;
    return;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 56))(*(_QWORD *)(a1[2] + 16));
  if (!*((_BYTE *)a1 + 33))
  {
    std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100]((uint64_t *)a1[1]);
    std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100](a1 + 5);
    a1[9] = 0;
  }
  if (a2 == -1)
    a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1);
  v4 = a2;
  v5 = (uint64_t *)a1[1];
  for (i = v5 + 1; 0xCCCCCCCCCCCCCCCDLL * ((v5[1] - *v5) >> 3) <= a2; i = v5 + 1)
  {
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v103);
    v7 = v5[1];
    if (v7 >= v5[2])
    {
      v8 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(v5, (uint64_t)&v103);
    }
    else
    {
      std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)v5, (uint64_t)&v103);
      v8 = v7 + 40;
    }
    *i = v8;
    if (v105)
    {
      v106 = v105;
      operator delete(v105);
    }
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v103);
    v9 = a1[6];
    if (v9 >= a1[7])
    {
      v10 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(a1 + 5, (uint64_t)&v103);
    }
    else
    {
      std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v103);
      v10 = v9 + 40;
    }
    a1[6] = v10;
    if (v105)
    {
      v106 = v105;
      operator delete(v105);
    }
    LOBYTE(v103) = 0;
    std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v103);
    v5 = (uint64_t *)a1[1];
  }
  if (*((_BYTE *)a1 + 33))
  {
    v11 = (char *)a1[11];
    v12 = (char *)a1[12];
    v13 = (v12 - v11) >> 2;
    if (v13 <= a2)
    {
      v14 = a1 + 13;
      do
      {
        if ((unint64_t)v12 >= *v14)
        {
          v16 = v13 + 1;
          if ((v13 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v17 = *v14 - (_QWORD)v11;
          if (v17 >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v18);
            v11 = (char *)a1[11];
            v12 = (char *)a1[12];
          }
          else
          {
            v19 = 0;
          }
          v20 = &v19[4 * v13];
          *(_DWORD *)v20 = -1;
          v15 = v20 + 4;
          while (v12 != v11)
          {
            v21 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          a1[11] = (uint64_t)v20;
          a1[12] = (uint64_t)v15;
          a1[13] = (uint64_t)&v19[4 * v18];
          if (v11)
          {
            operator delete(v11);
            v11 = (char *)a1[11];
          }
          else
          {
            v11 = v20;
          }
        }
        else
        {
          *(_DWORD *)v12 = -1;
          v15 = v12 + 4;
        }
        a1[12] = (uint64_t)v15;
        v13 = (v15 - v11) >> 2;
        v12 = v15;
      }
      while (v13 <= a2);
    }
    *(_DWORD *)&v11[4 * a2] = *((_DWORD *)a1 + 28);
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v103);
  v22 = *(_QWORD *)a1[1];
  v23 = v22 + 40 * a2;
  *(float *)v23 = v103;
  *(_QWORD *)(v23 + 4) = v104;
  if ((float *)v23 != &v103)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v22 + 40 * a2 + 16), v105, (uint64_t)v106, (v106 - v105) >> 2);
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v103);
  v25 = a1 + 5;
  v24 = a1[5];
  v26 = v24 + 40 * (int)v4;
  *(float *)v26 = v103;
  *(_QWORD *)(v26 + 4) = v104;
  if ((float *)v26 != &v103)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v24 + 40 * (int)v4 + 16), v105, (uint64_t)v106, (v106 - v105) >> 2);
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
  v27 = a1 + 8;
  *(_QWORD *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[2] + 16) + 24))(*(_QWORD *)(a1[2] + 16), v4);
  v28 = (void **)(a1 + 11);
  v90 = a1 + 13;
  v89 = (char *)a1 + 116;
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 48))(*(_QWORD *)(a1[2] + 16)) & 1) != 0)
    {
LABEL_186:
      ++*((_DWORD *)a1 + 28);
      if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
        return;
      goto LABEL_187;
    }
    v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 16))(*(_QWORD *)(a1[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 32))(*(_QWORD *)(a1[2] + 16));
    v30 = (uint64_t *)a1[1];
    for (j = v30 + 1; 0xCCCCCCCCCCCCCCCDLL * ((v30[1] - *v30) >> 3) <= v29; j = v30 + 1)
    {
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v103);
      v32 = v30[1];
      if (v32 >= v30[2])
      {
        v33 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(v30, (uint64_t)&v103);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)v30, (uint64_t)&v103);
        v33 = v32 + 40;
      }
      *j = v33;
      if (v105)
      {
        v106 = v105;
        operator delete(v105);
      }
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v103);
      v34 = a1[6];
      if (v34 >= a1[7])
      {
        v35 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(a1 + 5, (uint64_t)&v103);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v103);
        v35 = v34 + 40;
      }
      a1[6] = v35;
      if (v105)
      {
        v106 = v105;
        operator delete(v105);
      }
      LOBYTE(v103) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v103);
      v30 = (uint64_t *)a1[1];
    }
    if (*((_BYTE *)a1 + 32))
    {
      (*(void (**)(float *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(&v103, *a1, v29);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v99);
      v95 = v103;
      v91 = *(float *)&v99;
      if (v103 == *(float *)&v99
        && (v91 = *((float *)&v104 + 1),
            v95 = *(float *)&v104,
            v108 = *((float *)&v99 + 2),
            v109 = DWORD1(v99),
            *(float *)&v104 == *((float *)&v99 + 1))
        && v91 == v108)
      {
        v37 = (char *)__p;
        if (v106 - v105 != v101 - (_BYTE *)__p)
        {
          v36 = 1;
          if (!__p)
          {
LABEL_69:
            if (v105)
            {
              v106 = v105;
              operator delete(v105);
            }
            if (v36)
              goto LABEL_186;
            goto LABEL_72;
          }
LABEL_68:
          v101 = v37;
          operator delete(v37);
          goto LABEL_69;
        }
        v36 = memcmp(v105, __p, v106 - v105) != 0;
      }
      else
      {
        v36 = 1;
      }
      v37 = (char *)__p;
      if (!__p)
        goto LABEL_69;
      goto LABEL_68;
    }
LABEL_72:
    *(_QWORD *)(*v27 + (((unint64_t)v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v29);
    v38 = *v25 + 40 * v29;
    v103 = *(float *)v38;
    v104 = *(_QWORD *)(v38 + 4);
    v106 = 0;
    v107 = 0;
    v105 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v105, *(const void **)(v38 + 16), *(_QWORD *)(v38 + 24), (uint64_t)(*(_QWORD *)(v38 + 24) - *(_QWORD *)(v38 + 16)) >> 2);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v99);
    v39 = *v25;
    v40 = *v25 + 40 * v29;
    *(_DWORD *)v40 = v99;
    *(_QWORD *)(v40 + 4) = *(_QWORD *)((char *)&v99 + 4);
    if ((__int128 *)v40 != &v99)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v39 + 40 * v29 + 16), (char *)__p, (uint64_t)v101, (v101 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v101 = (char *)__p;
      operator delete(__p);
    }
    v41 = *a1;
    v102 = 0;
    (*(void (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)v41 + 136))(v41, v29, &v99);
    while (1)
    {
      if (!(_QWORD)v99)
      {
        if (v102 >= (unint64_t)__p)
        {
          v85 = 10;
          goto LABEL_172;
        }
        goto LABEL_82;
      }
      v42 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v99 + 24))(v99);
      v43 = v99;
      if ((v42 & 1) != 0)
        break;
      if ((_QWORD)v99)
      {
        v44 = (*(uint64_t (**)(void))(*(_QWORD *)v99 + 32))();
        goto LABEL_83;
      }
LABEL_82:
      v44 = *((_QWORD *)&v99 + 1) + 56 * v102;
LABEL_83:
      v45 = (uint64_t *)a1[1];
      v46 = v45 + 1;
      for (k = *(int *)(v44 + 48); 0xCCCCCCCCCCCCCCCDLL * ((v45[1] - *v45) >> 3) <= k; k = *(int *)(v44 + 48))
      {
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v95);
        v48 = *v46;
        if (*v46 >= (unint64_t)v45[2])
        {
          v49 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(v45, (uint64_t)&v95);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)v45, (uint64_t)&v95);
          v49 = v48 + 40;
        }
        *v46 = v49;
        if (v97)
        {
          v98 = v97;
          operator delete(v97);
        }
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v95);
        v50 = a1[6];
        if (v50 >= a1[7])
        {
          v51 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>(a1 + 5, (uint64_t)&v95);
        }
        else
        {
          std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> const&>((uint64_t)(a1 + 5), (uint64_t)&v95);
          v51 = v50 + 40;
        }
        a1[6] = v51;
        if (v97)
        {
          v98 = v97;
          operator delete(v97);
        }
        LOBYTE(v95) = 0;
        std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v95);
        v45 = (uint64_t *)a1[1];
        v46 = v45 + 1;
      }
      if (*((_BYTE *)a1 + 33))
      {
        v52 = (char *)a1[11];
        v53 = (char *)a1[12];
        v54 = (v53 - v52) >> 2;
        if (v54 <= (int)k)
        {
          do
          {
            if ((unint64_t)v53 >= *v90)
            {
              v57 = v54 + 1;
              if ((v54 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v58 = *v90 - (_QWORD)v52;
              if (v58 >> 1 > v57)
                v57 = v58 >> 1;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                v59 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
              {
                v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v90, v59);
                v52 = (char *)a1[11];
                v53 = (char *)a1[12];
              }
              else
              {
                v60 = 0;
              }
              v61 = &v60[4 * v54];
              *(_DWORD *)v61 = -1;
              v56 = v61 + 4;
              while (v53 != v52)
              {
                v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              a1[11] = (uint64_t)v61;
              a1[12] = (uint64_t)v56;
              a1[13] = (uint64_t)&v60[4 * v59];
              if (v52)
              {
                operator delete(v52);
                v52 = (char *)*v28;
              }
              else
              {
                v52 = v61;
              }
            }
            else
            {
              *(_DWORD *)v53 = -1;
              v56 = v53 + 4;
            }
            a1[12] = (uint64_t)v56;
            v54 = (v56 - v52) >> 2;
            LODWORD(k) = *(_DWORD *)(v44 + 48);
            v53 = v56;
          }
          while (v54 <= (int)k);
          v55 = (int)k;
        }
        else
        {
          v55 = (int)k;
        }
        if (*(_DWORD *)&v52[4 * v55] != *((_DWORD *)a1 + 28))
        {
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v95);
          v63 = *(_DWORD *)(v44 + 48);
          v64 = *(_QWORD *)a1[1];
          v65 = v64 + 40 * v63;
          *(float *)v65 = v95;
          *(_QWORD *)(v65 + 4) = v96;
          if ((float *)v65 != &v95)
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v64 + 40 * v63 + 16), (char *)v97, (uint64_t)v98, (v98 - (_BYTE *)v97) >> 2);
          if (v97)
          {
            v98 = v97;
            operator delete(v97);
          }
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v95);
          v66 = *(_DWORD *)(v44 + 48);
          v67 = *v25;
          v68 = *v25 + 40 * v66;
          *(float *)v68 = v95;
          *(_QWORD *)(v68 + 4) = v96;
          if ((float *)v68 != &v95)
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v67 + 40 * v66 + 16), (char *)v97, (uint64_t)v98, (v98 - (_BYTE *)v97) >> 2);
          if (v97)
          {
            v98 = v97;
            operator delete(v97);
          }
          v69 = *(int *)(v44 + 48);
          *(_QWORD *)(a1[8] + ((v69 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v69);
          *(_DWORD *)(a1[11] + 4 * v69) = *((_DWORD *)a1 + 28);
          LODWORD(k) = *(_DWORD *)(v44 + 48);
        }
      }
      v70 = *(_QWORD *)a1[1];
      v71 = a1[5];
      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v103, v44 + 8, &v95);
      v72 = (float *)(v70 + 40 * (int)k);
      fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>(v72, (uint64_t)&v95, (uint64_t)&v91);
      v73 = *((float *)a1 + 7);
      v74 = v91 > (float)(v73 + *v72) || *v72 > (float)(v73 + v91);
      if (v74
        || ((v76 = v72[1], v77 = v72[2], v76 == *(float *)&v92) ? (v78 = v77 == *((float *)&v92 + 1)) : (v78 = 0),
            (v79 = vabds_f32(v76 + v77, *(float *)&v92 + *((float *)&v92 + 1)), !v78) ? (v80 = v79 > v73) : (v80 = 0),
            v80))
      {
        v75 = 0;
        goto LABEL_142;
      }
      v81 = v70 + 40 * (int)k;
      v82 = *(const void **)(v81 + 16);
      v83 = *(_QWORD *)(v81 + 24) - (_QWORD)v82;
      v84 = v93;
      if (v83 == v94 - (_BYTE *)v93)
      {
        v75 = memcmp(v82, v93, v83) == 0;
LABEL_142:
        v84 = v93;
        if (!v93)
          goto LABEL_144;
LABEL_143:
        v94 = v84;
        operator delete(v84);
        goto LABEL_144;
      }
      v75 = 0;
      if (v93)
        goto LABEL_143;
LABEL_144:
      if (v75)
      {
        v85 = 0;
        v86 = 1;
        v28 = (void **)(a1 + 11);
      }
      else
      {
        fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)(v70 + 40 * (int)k), (uint64_t)&v95, (uint64_t)&v91);
        *v72 = v91;
        *(_QWORD *)(v72 + 1) = v92;
        if (v72 != &v91)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v70 + 40 * (int)k + 16), (char *)v93, (uint64_t)v94, (v94 - (_BYTE *)v93) >> 2);
        if (v93)
        {
          v94 = v93;
          operator delete(v93);
        }
        v87 = v71 + 40 * (int)k;
        fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)v87, (uint64_t)&v95, (uint64_t)&v91);
        v28 = (void **)(a1 + 11);
        *(float *)v87 = v91;
        *(_QWORD *)(v87 + 4) = v92;
        if ((float *)v87 != &v91)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v71 + 40 * (int)k + 16), (char *)v93, (uint64_t)v94, (v94 - (_BYTE *)v93) >> 2);
        if (v93)
        {
          v94 = v93;
          operator delete(v93);
        }
        if (fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member(v70 + 40 * (int)k)
          && fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member(v71 + 40 * (int)k))
        {
          v88 = **(_QWORD **)(a1[2] + 16);
          if (((*(_QWORD *)(a1[8] + (((unint64_t)*(int *)(v44 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v44 + 48)) & 1) != 0)
          {
            (*(void (**)(void))(v88 + 40))();
            v85 = 0;
            v86 = 1;
          }
          else
          {
            (*(void (**)(void))(v88 + 24))();
            v85 = 0;
            v86 = 1;
            *(_QWORD *)(*v27 + (((unint64_t)*(int *)(v44 + 48) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v44 + 48);
          }
        }
        else
        {
          v86 = 0;
          v85 = 1;
          *v89 = 1;
        }
      }
      if (v97)
      {
        v98 = v97;
        operator delete(v97);
      }
      v43 = v99;
      if (!v86)
        goto LABEL_169;
      if ((_QWORD)v99)
        (*(void (**)(void))(*(_QWORD *)v99 + 40))();
      else
        ++v102;
    }
    v85 = 10;
LABEL_169:
    if (v43)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      goto LABEL_174;
    }
LABEL_172:
    if (v101)
      --*(_DWORD *)v101;
LABEL_174:
    if (v85 == 10)
      v85 = 0;
    if (v105)
    {
      v106 = v105;
      operator delete(v105);
    }
  }
  while (!v85);
}

void sub_1ADEC57B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  void *v28;

  v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(_QWORD *)(v26 - 112) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;

  v4 = a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 40 * a2;
    while (v4 != v8)
    {
      v9 = *(void **)(v4 - 24);
      if (v9)
      {
        *(_QWORD *)(v4 - 16) = v9;
        operator delete(v9);
      }
      v4 -= 40;
    }
    a1[1] = v8;
  }
}

_QWORD *fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::NoWeight@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::NoWeight();
  *(_DWORD *)a1 = *(_DWORD *)v2;
  v3 = *(_QWORD *)(v2 + 4);
  a1[2] = 0;
  a1 += 2;
  *(_QWORD *)((char *)a1 - 12) = v3;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, 0, 0, 0);
}

_QWORD *std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD *v22;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = *(result - 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = v9 + 40 * a2;
      v16 = 40 * a2;
      do
      {
        *(_DWORD *)v9 = *(_DWORD *)a3;
        v17 = *(_QWORD *)(a3 + 4);
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)(v9 + 4) = v17;
        *(_QWORD *)(v9 + 24) = 0;
        *(_QWORD *)(v9 + 32) = 0;
        result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v9 + 16), *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
        v9 += 40;
        v16 -= 40;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    v22 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)result, v13);
    else
      v14 = 0;
    v18 = v14;
    v19 = &v14[40 * v10];
    v20 = v19;
    v21 = &v14[40 * v13];
    std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_at_end(&v18, a2, a3);
    std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__swap_out_circular_buffer(a1, &v18);
    return (_QWORD *)std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)&v18);
  }
  return result;
}

void sub_1ADEC5AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = result[2];
  if (a2)
  {
    v6 = v4 + 40 * a2;
    v7 = 40 * a2;
    do
    {
      *(_DWORD *)v4 = *(_DWORD *)a3;
      v8 = *(_QWORD *)(a3 + 4);
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 4) = v8;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v4 + 16), *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
      v4 += 40;
      v7 -= 40;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1ADEC5B90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::NoWeight()
{
  unsigned __int8 v0;
  uint64_t v2;
  uint64_t v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::NoWeight();
    *(_DWORD *)v2 = *(_DWORD *)v3;
    *(_QWORD *)(v2 + 4) = *(_QWORD *)(v3 + 4);
    fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::NoWeight(void)::no_weight = v2;
  }
  return fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1ADEC5C1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::NoWeight()
{
  unsigned __int8 v0;
  int32x2_t *v2;

  if ((v0 & 1) == 0
  {
    v2 = (int32x2_t *)operator new();
    *v2 = vdup_n_s32(0x7FC00000u);
    v2[1].i32[0] = 2143289344;
    fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::NoWeight(void)::no_weight = (uint64_t)v2;
  }
  return fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::NoWeight(void)::no_weight;
}

void sub_1ADEC5CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ShortestDistanceState(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 64);
  if (v3)
    operator delete(v3);
  v5 = (void **)(a1 + 40);
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

BOOL fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Member(float *a1)
{
  _BOOL8 result;

  result = 0;
  if (*a1 != -INFINITY)
  {
    result = fst::LatticeWeightTpl<float>::Member(a1 + 1);
    if (result)
      return *a1 == INFINITY && a1[1] == INFINITY && a1[2] == INFINITY
          || *a1 != INFINITY && (a1[1] != INFINITY || a1[2] != INFINITY);
  }
  return result;
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D280B0;
  a1[1] = v2;
  return a1;
}

void sub_1ADEC5EBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D24E00;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

_QWORD *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *(_DWORD *)v3;
  *(_QWORD *)(a3 + 4) = *(_QWORD *)(v3 + 4);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a3 + 16), *(const void **)(v3 + 16), *(_QWORD *)(v3 + 24), (uint64_t)(*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D280B0;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 56);
  v4 = *v5;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1ADEC6208(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *a3;
  v8 = *(_QWORD *)(a3 + 1);
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)a3 + 2), *((_QWORD *)a3 + 3), (uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 2);
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::SetFinal(v6, a2, (uint64_t)&v7);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_1ADEC631C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[5] = 0;
  v5[6] = 0;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v5 + 7);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  return std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D210A0;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1ADEC67F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D22668;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CD98;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1ADEC68DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FB98;
  v2 = (_QWORD *)a1[9];
  if (v2 != (_QWORD *)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD *)a1[8];
    do
    {
      fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(v2[v3++]);
      v2 = (_QWORD *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D22668;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADEC6B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADEC6C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1ADEC6D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1ADEC6DC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __str;
  _DWORD *v19;
  std::string::size_type v20;
  void *v21[2];
  void *__p;
  void *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;

  *(_QWORD *)a1 = &unk_1E5D22668;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CD98;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v26 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v24);
  while (1)
  {
    if (!v24)
    {
      if ((int)v26 >= v25)
        goto LABEL_47;
LABEL_25:
      v14 = v26;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24))
      break;
    if (!v24)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddState((_QWORD *)a1);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(v21, a2, v14);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::SetFinal(a1, v14, (int *)v21);
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 56), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __str.__r_.__value_.__r.__words[2])
          goto LABEL_40;
LABEL_34:
        v16 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v20);
        goto LABEL_35;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0]))
        break;
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_34;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_35:
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__str.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_42;
    }
LABEL_40:
    if (v19)
      --*v19;
LABEL_42:
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    else
      ++v26;
  }
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
LABEL_47:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1ADEC719C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  _QWORD *v21;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorFstBaseImpl(v21);
  _Unwind_Resume(a1);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *__p;
  _BYTE *v7;
  uint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
  v4 = *a3;
  v5 = *(_QWORD *)(a3 + 1);
  v7 = 0;
  v8 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)a3 + 2), *((_QWORD *)a3 + 3), (uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 2);
  *(_DWORD *)v3 = v4;
  *(_QWORD *)(v3 + 4) = v5;
  if ((int *)v3 != &v4)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 + 16), (char *)__p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_1ADEC72D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADEC739C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 56;
      std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(a1, v7 - 56, v9);
      v7 = *((_QWORD *)&v16 + 1) - 56;
      *((_QWORD *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1ADEC74D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (!*a2)
    ++a1[5];
  if (!a2[1])
    ++a1[6];
  v3 = (uint64_t)(a1 + 9);
  v4 = a1[8];
  if (v4 >= a1[9])
  {
    result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const&>(a1 + 7, (uint64_t)a2);
  }
  else
  {
    std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(v3, a1[8], (uint64_t)a2);
    result = v4 + 56;
    a1[8] = v4 + 56;
  }
  a1[8] = result;
  return result;
}

void sub_1ADEC75A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[56 * v3];
  v13 = &v7[56 * v6];
  std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 56;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1ADEC76B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1ADEC77D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::vector<unsigned int>::size_type v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  const void *v23;
  size_t v24;
  _BYTE *v25;
  _BOOL4 v26;
  _BYTE *v27;
  int v28;
  std::vector<unsigned int>::pointer end;
  unsigned int *v30;
  std::vector<unsigned int>::pointer begin;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  char *v36;
  unsigned int *v37;
  unsigned int v38;
  std::vector<unsigned int>::pointer v39;
  unsigned int *v40;
  std::vector<unsigned int>::pointer v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  unsigned int *v47;
  unsigned int v48;
  const void *v49;
  size_t v50;
  unint64_t v51;
  std::vector<unsigned int>::pointer v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  std::vector<unsigned int>::pointer v58;
  unsigned int v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  __n128 v63;
  _BOOL4 v64;
  _BYTE *v65;
  __n128 v66;
  _BOOL4 v67;
  _BYTE *v68;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  float v74;
  void *__p;
  _BYTE *v76;
  uint64_t v77;
  float v78;
  void *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  std::vector<unsigned int> v89;
  std::vector<unsigned int> v90;
  uint64_t v91;
  _QWORD v92[2];
  unint64_t *v93;
  unint64_t *v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  float v98;
  float v99;
  float v100;
  float v101;

  v7 = a1;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v9 = v8;
  if (!a4
    || (v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    v9 = v8 & 7;
    v97 = v9;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      v91 = 0;
      v92[0] = 0;
      v92[1] = 0;
      v93 = &v97;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(v7, &v91, 0);
      v9 = v97;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0)
      goto LABEL_175;
    v70 = a3;
    v12 = a2 & 0xC0000;
    v13 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0)
      v13 = 0x10425A850000;
    v14 = v9 | v13;
    v15 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0)
      v14 |= 0x100000uLL;
    v97 = v14;
    memset(&v90, 0, sizeof(v90));
    memset(&v89, 0, sizeof(v89));
    v88 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 128))(v7, &v86);
    v72 = 0;
    v71 = v7;
LABEL_12:
    if (!v86)
    {
      if ((int)v88 >= v87)
        goto LABEL_167;
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v86 + 16))(v86))
    {
      if (v86)
      {
        v16 = (*(uint64_t (**)(void))(*(_QWORD *)v86 + 24))();
LABEL_18:
        v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v16);
        v93 = 0;
        v94 = 0;
        v95 = 0;
        v90.__end_ = v90.__begin_;
        v89.__end_ = v89.__begin_;
        if (v12)
          std::vector<int>::reserve(&v90, v17);
        if (v15)
          std::vector<int>::reserve(&v89, v17);
        v85 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 136))(v7, v16, &v81);
        v18 = 1;
        while (1)
        {
          if (v81)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81))
            {
              if (v81)
              {
                (*(void (**)(void))(*(_QWORD *)v81 + 8))();
              }
              else
              {
LABEL_110:
                if (v84)
                  --*(_DWORD *)v84;
              }
              v7 = v71;
              if (!v12
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v90.__end_ - (char *)v90.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_119:
                if (!v15)
                  goto LABEL_130;
LABEL_120:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v89.__end_ - (char *)v89.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  v57 = v89.__end_ - v89.__begin_;
                  if (v57 <= 2)
                    v57 = 2;
                  v58 = v89.__begin_ + 1;
                  v59 = *v89.__begin_;
                  v60 = v57 - 1;
                  while (1)
                  {
                    v62 = *v58++;
                    v61 = v62;
                    if (v62 == v59)
                      break;
                    v59 = v61;
                    if (!--v60)
                      goto LABEL_130;
                  }
                  v97 = v97 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_130;
              }
              v51 = v90.__end_ - v90.__begin_;
              if (v51 <= 2)
                v51 = 2;
              v52 = v90.__begin_ + 1;
              v53 = *v90.__begin_;
              v54 = v51 - 1;
              while (1)
              {
                v56 = *v52++;
                v55 = v56;
                if (v56 == v53)
                  break;
                v53 = v55;
                if (!--v54)
                  goto LABEL_119;
              }
              v97 = v97 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v15)
                goto LABEL_120;
LABEL_130:
              if (v72 >= 1)
                v97 = v97 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v71 + 32))(&v81, v71, v16);
              fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v77);
              LODWORD(v73) = v81;
              v101 = *(float *)&v77;
              v63.n128_u32[0] = v81;
              if (*(float *)&v81 != *(float *)&v77
                || (LODWORD(v73) = HIDWORD(v81),
                    v101 = *(float *)&v82,
                    v100 = *((float *)&v77 + 1),
                    v99 = v78,
                    v63.n128_u32[0] = HIDWORD(v81),
                    *((float *)&v81 + 1) != *((float *)&v77 + 1))
                || (v63.n128_f32[0] = v101, v101 != v99))
              {
                v64 = 1;
                goto LABEL_136;
              }
              v65 = v79;
              if (v84 - (_BYTE *)v83 == v80 - (_BYTE *)v79)
              {
                v64 = memcmp(v83, v79, v84 - (_BYTE *)v83) != 0;
LABEL_136:
                v65 = v79;
                if (v79)
                {
LABEL_137:
                  v80 = v65;
                  operator delete(v65);
                }
              }
              else
              {
                v64 = 1;
                if (v79)
                  goto LABEL_137;
              }
              if (v64)
              {
                fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v77);
                LODWORD(v73) = v81;
                v101 = *(float *)&v77;
                v66.n128_u32[0] = v81;
                if (*(float *)&v81 != *(float *)&v77
                  || (LODWORD(v73) = HIDWORD(v81),
                      v101 = *(float *)&v82,
                      v100 = *((float *)&v77 + 1),
                      v99 = v78,
                      v66.n128_u32[0] = HIDWORD(v81),
                      *((float *)&v81 + 1) != *((float *)&v77 + 1))
                  || (v66.n128_f32[0] = v101, v101 != v99))
                {
                  v67 = 1;
                  goto LABEL_143;
                }
                v68 = v79;
                if (v84 - (_BYTE *)v83 == v80 - (_BYTE *)v79)
                {
                  v67 = memcmp(v83, v79, v84 - (_BYTE *)v83) != 0;
LABEL_143:
                  v68 = v79;
                  if (v79)
                  {
LABEL_144:
                    v80 = v68;
                    operator delete(v68);
                  }
                }
                else
                {
                  v67 = 1;
                  if (v79)
                    goto LABEL_144;
                }
                if (v67)
                  v97 = v97 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                ++v72;
              }
              else if ((*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v71 + 40))(v71, v16, v63) != 1)
              {
                v97 = v97 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              if (v83)
              {
                v84 = (char *)v83;
                operator delete(v83);
              }
              if (v93)
              {
                v94 = v93;
                operator delete(v93);
              }
              if (v86)
                (*(void (**)(uint64_t, __n128))(*(_QWORD *)v86 + 32))(v86, v66);
              else
                ++v88;
              goto LABEL_12;
            }
            if (v81)
            {
              v19 = (*(uint64_t (**)(void))(*(_QWORD *)v81 + 32))();
              goto LABEL_29;
            }
          }
          else if (v85 >= (unint64_t)v83)
          {
            goto LABEL_110;
          }
          v19 = v82 + 56 * v85;
LABEL_29:
          v20 = *(_DWORD *)v19;
          v21 = *(_DWORD *)v19;
          if (*(_DWORD *)v19 != *(_DWORD *)(v19 + 4))
          {
            v97 = v97 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            v21 = *(_DWORD *)(v19 + 4);
          }
          if (v20 | v21)
          {
            if (v20)
            {
              if (!v21)
                goto LABEL_39;
              goto LABEL_35;
            }
            v22 = v97;
          }
          else
          {
            v22 = v97 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          v97 = v22 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (!v21)
          {
LABEL_39:
            v97 = v97 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
            if ((v18 & 1) != 0)
              goto LABEL_44;
            goto LABEL_40;
          }
LABEL_35:
          if ((v18 & 1) != 0)
            goto LABEL_44;
LABEL_40:
          if (v20 < (int)v91)
            v97 = v97 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
          if (v21 < SHIDWORD(v91))
            v97 = v97 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_44:
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v77);
          LODWORD(v73) = 0;
          LODWORD(v73) = *(_DWORD *)(v19 + 8);
          v101 = *(float *)&v77;
          if (*(float *)&v73 != *(float *)&v77)
            goto LABEL_49;
          LODWORD(v73) = 0;
          LODWORD(v73) = *(_DWORD *)(v19 + 12);
          v101 = 0.0;
          v101 = *(float *)(v19 + 16);
          v100 = *((float *)&v77 + 1);
          v99 = v78;
          if (*(float *)&v73 != *((float *)&v77 + 1)
            || v101 != v99
            || (v23 = *(const void **)(v19 + 24),
                v24 = *(_QWORD *)(v19 + 32) - (_QWORD)v23,
                v25 = v79,
                v24 != v80 - (_BYTE *)v79)
            || memcmp(v23, v79, v24))
          {
LABEL_49:
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v73);
            v101 = 0.0;
            v101 = *(float *)(v19 + 8);
            v100 = *(float *)&v73;
            if (v101 != *(float *)&v73
              || (v101 = 0.0,
                  v101 = *(float *)(v19 + 12),
                  v100 = 0.0,
                  v100 = *(float *)(v19 + 16),
                  v99 = *((float *)&v73 + 1),
                  v98 = v74,
                  v101 != *((float *)&v73 + 1))
              || v100 != v98)
            {
              v26 = 1;
              goto LABEL_53;
            }
            v49 = *(const void **)(v19 + 24);
            v50 = *(_QWORD *)(v19 + 32) - (_QWORD)v49;
            v27 = __p;
            if (v50 == v76 - (_BYTE *)__p)
            {
              v26 = memcmp(v49, __p, v50) != 0;
LABEL_53:
              v27 = __p;
              if (__p)
              {
LABEL_54:
                v76 = v27;
                operator delete(v27);
              }
            }
            else
            {
              v26 = 1;
              if (__p)
                goto LABEL_54;
            }
            v25 = v79;
            if (!v79)
              goto LABEL_57;
LABEL_56:
            v80 = v25;
            operator delete(v25);
            goto LABEL_57;
          }
          v26 = 0;
          if (v25)
            goto LABEL_56;
LABEL_57:
          if (v26)
            v97 = v97 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          v28 = *(_DWORD *)(v19 + 48);
          if (v28 <= (int)v16)
            v97 = v97 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          if (v28 != (_DWORD)v16 + 1)
            v97 = v97 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          v91 = *(_QWORD *)v19;
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)v92, v19 + 8);
          v96 = *(_DWORD *)(v19 + 48);
          if (v12)
          {
            end = v90.__end_;
            if (v90.__end_ >= v90.__end_cap_.__value_)
            {
              begin = v90.__begin_;
              v32 = v90.__end_ - v90.__begin_;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62)
                goto LABEL_177;
              v34 = (char *)v90.__end_cap_.__value_ - (char *)v90.__begin_;
              if (((char *)v90.__end_cap_.__value_ - (char *)v90.__begin_) >> 1 > v33)
                v33 = v34 >> 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                v35 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v90.__end_cap_, v35);
                begin = v90.__begin_;
                end = v90.__end_;
              }
              else
              {
                v36 = 0;
              }
              v37 = (unsigned int *)&v36[4 * v32];
              *v37 = *(_DWORD *)v19;
              v30 = v37 + 1;
              while (end != begin)
              {
                v38 = *--end;
                *--v37 = v38;
              }
              v90.__begin_ = v37;
              v90.__end_ = v30;
              v90.__end_cap_.__value_ = (unsigned int *)&v36[4 * v35];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v90.__end_ = *(_DWORD *)v19;
              v30 = end + 1;
            }
            v90.__end_ = v30;
          }
          if (v15)
          {
            v39 = v89.__end_;
            if (v89.__end_ >= v89.__end_cap_.__value_)
            {
              v41 = v89.__begin_;
              v42 = v89.__end_ - v89.__begin_;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62)
LABEL_177:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v44 = (char *)v89.__end_cap_.__value_ - (char *)v89.__begin_;
              if (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 1 > v43)
                v43 = v44 >> 1;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                v45 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89.__end_cap_, v45);
                v41 = v89.__begin_;
                v39 = v89.__end_;
              }
              else
              {
                v46 = 0;
              }
              v47 = (unsigned int *)&v46[4 * v42];
              *v47 = *(_DWORD *)(v19 + 4);
              v40 = v47 + 1;
              while (v39 != v41)
              {
                v48 = *--v39;
                *--v47 = v48;
              }
              v89.__begin_ = v47;
              v89.__end_ = v40;
              v89.__end_cap_.__value_ = (unsigned int *)&v46[4 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *v89.__end_ = *(_DWORD *)(v19 + 4);
              v40 = v39 + 1;
            }
            v89.__end_ = v40;
          }
          if (v81)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v81 + 40))(v81);
            v18 = 0;
          }
          else
          {
            v18 = 0;
            ++v85;
          }
        }
      }
LABEL_17:
      v16 = v88;
      goto LABEL_18;
    }
    if (v86)
      (*(void (**)(void))(*(_QWORD *)v86 + 8))();
LABEL_167:
    a3 = v70;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) != -1
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
    {
      v97 = v97 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v89.__begin_)
    {
      v89.__end_ = v89.__begin_;
      operator delete(v89.__begin_);
    }
    if (v90.__begin_)
    {
      v90.__end_ = v90.__begin_;
      operator delete(v90.__begin_);
    }
    v9 = v97;
LABEL_175:
    v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1ADEC82DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (__p)
    operator delete(__p);
  if (a37)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 48);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 48);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 48);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 48), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 56 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D197B0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1ADEC8AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D197B0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::FinishState(uint64_t a1, int a2, int a3)
{
  BOOL v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int *i;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  float v23;
  void *__p;
  _BYTE *v25;
  uint64_t v26;
  float v27;
  void *v28;
  _BYTE *v29;
  float v30;
  int v31;
  float v32;
  int v33;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v26);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v22);
  v33 = v26;
  v32 = *(float *)&v22;
  v6 = *(float *)&v26 != *(float *)&v22
    || (v33 = HIDWORD(v26), v32 = v27, v31 = HIDWORD(v22), v30 = v23, *((float *)&v26 + 1) != *((float *)&v22 + 1))
    || v32 != v30
    || v29 - (_BYTE *)v28 != v25 - (_BYTE *)__p
    || memcmp(v28, __p, v29 - (_BYTE *)v28) != 0;
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v6)
    *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v7 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * a2) != *(_DWORD *)(v7 + 4 * a2))
    goto LABEL_26;
  v8 = 0;
  v9 = *(_QWORD **)(a1 + 80);
  v10 = v9[1];
  v11 = **(_QWORD **)(a1 + 16);
  v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    v13 = *v12--;
    v8 |= *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while ((_DWORD)v13 != a2);
  v14 = *(_QWORD **)a1;
  v15 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v10 - 4); ; --i)
  {
    v17 = *i;
    if (v14)
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    v18 = v17 >> 6;
    v19 = 1 << v17;
    if ((v8 & 1) == 0)
      break;
    *(_QWORD *)(v11 + 8 * v18) |= v19;
    *(_QWORD *)(v15 + 8 * v18) &= ~v19;
    if ((_DWORD)v17 == a2)
    {
      v9[1] = i;
      goto LABEL_25;
    }
LABEL_23:
    ;
  }
  *(_QWORD *)(v15 + 8 * v18) &= ~v19;
  if ((_DWORD)v17 != a2)
    goto LABEL_23;
  v9[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_25:
  ++*(_DWORD *)(a1 + 48);
LABEL_26:
  if (a3 != -1)
  {
    v20 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v20 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      *(_QWORD *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v21 = *(_DWORD *)(v7 + 4 * a2);
    if (v21 < *(_DWORD *)(v7 + 4 * a3))
      *(_DWORD *)(v7 + 4 * a3) = v21;
  }
}

void sub_1ADEC8DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D197B0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D197B0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D197B0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADEC8E6C(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A768;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADEC8F54(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A768;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADEC9360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    v10 = v26 + 56 * v27;
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v24 = 0x4000;
    if (v13 > 0x4000)
      v24 = v13;
    *(_QWORD *)(a1 + 8) = v24;
    v15 = malloc_type_malloc(56 * v24, 0x10100407878D4B7uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(_QWORD **)(a1 + 16);
    v15 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[7 * v13];
  v16 = v25;
  v17 = v26;
  v19 = v27;
  v18 = v28;
  if (v28)
    ++*v28;
  v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(v15 - 7) = *(_QWORD *)v23;
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v15 - 6), v23 + 8);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 56 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1ADEC95A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  _BYTE v35[8];
  void *v36[2];
  void *v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string __p;
  std::string::size_type v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v38 = 0u;
  v39 = 0u;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)v37 = 0u;
  v6 = -1;
  v41 = 0;
  v42 = 0;
  v40 = -1;
  v40 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v41 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v41 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(&__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v45;
    if (v45 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, &__p, v9, (uint64_t)v35);
  v31 = v9;
  v32 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v33 = v7;
    v12 = 0;
    v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(&__p, a1, v12);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Write((uint64_t)&__p, a2);
      if (__p.__r_.__value_.__r.__words[2])
      {
        v44 = __p.__r_.__value_.__r.__words[2];
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
      }
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      v14 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v12);
      v16 = *(_QWORD *)(v14 + 56);
      v15 = *(_QWORD *)(v14 + 64);
      if (v15 == v16)
        v17 = 0;
      else
        v17 = *(_DWORD **)(v14 + 56);
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1)
          v18 = 1;
        else
          v18 = (v15 - v16) / 56;
        v19 = v17;
        do
        {
          v20 = *v19;
          v19 += 14;
          LODWORD(__p.__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p.__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Write((uint64_t)(v17 + 2), a2);
          LODWORD(__p.__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
    v7 = v33;
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_32:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_35;
  }
  if (!v7)
  {
    if (v41 == v11)
    {
      updated = 1;
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v29 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_32;
  }
  v41 = v11;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  updated = fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, &__p, v31, (uint64_t)v35, v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_35:
  if (SHIBYTE(v38) < 0)
    operator delete(v37[1]);
  if (SHIBYTE(v37[0]) < 0)
    operator delete(v36[0]);
  return updated;
}

void sub_1ADEC99FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33)
{
  if (a32 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1ADEC9EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>::Type();
    std::operator+<char>();
    fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Type(void)::type = v2;
  }
  return fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Type(void)::type;
}

void sub_1ADEC9FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1ADECA280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::SetFinal(_QWORD *a1, int a2, uint64_t a3)
{
  int *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *__p;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;

  v6 = *(int **)(a1[8] + 8 * a2);
  v23 = *v6;
  v24 = *(_QWORD *)(v6 + 1);
  v26 = 0;
  v27 = 0;
  v25 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v25, *((const void **)v6 + 2), *((_QWORD *)v6 + 3), (uint64_t)(*((_QWORD *)v6 + 3) - *((_QWORD *)v6 + 2)) >> 2);
  v18 = *(_DWORD *)a3;
  v19 = *(_QWORD *)(a3 + 4);
  v21 = 0;
  v22 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::SetFinal((uint64_t)a1, a2, &v18);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v13 = v23;
  v14 = v24;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v15, v25, (uint64_t)v26, (v26 - (_BYTE *)v25) >> 2);
  v8 = *(_DWORD *)a3;
  v9 = *(_QWORD *)(a3 + 4);
  v11 = 0;
  v12 = 0;
  v10 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v10, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>(v7, (uint64_t)&v13, (uint64_t)&v8);
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void sub_1ADECA47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  v24 = *(void **)(v22 - 56);
  if (v24)
  {
    *(_QWORD *)(v22 - 48) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::AddArc(_QWORD *a1, int a2, float *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 56))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 56);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(v8, a2, a3, v7);
  return fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  int64x2_t v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  int64x2_t v30;
  int64x2_t v31;
  std::vector<int>::value_type __x;
  std::vector<int> v33;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v33.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(*(_QWORD *)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v17 = *(int64x2_t *)(v16 + 40);
      v18 = *(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56);
      if (v18)
        v19 = *(_QWORD *)(v16 + 56);
      else
        v19 = 0;
      if (v18)
      {
        v20 = 0;
        v21 = 0;
        v22 = (int *)(v19 + 48);
        do
        {
          v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            v25 = *((_QWORD *)v22 - 6);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            v17 = vaddq_s64(v17, vceqzq_s64(v26));
          }
          else
          {
            *v22 = v23;
            if (v20 != v21)
            {
              v30 = v17;
              v24 = (_QWORD *)(v19 + 56 * v21);
              *v24 = *((_QWORD *)v22 - 6);
              fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v24 + 1), (uint64_t)(v22 - 10));
              *(_DWORD *)(v19 + 56 * v21 + 48) = *v22;
              v14 = *v4;
              v17 = v30;
            }
            ++v21;
          }
          ++v20;
          v16 = *(_QWORD *)(v14 + 8 * v15);
          v27 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56)) >> 3);
          v22 += 14;
        }
        while (v20 < v27);
        v31 = v17;
      }
      else
      {
        v31 = *(int64x2_t *)(v16 + 40);
        v21 = 0;
        v27 = 0;
      }
      fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeleteArcs((_QWORD *)v16, v27 - v21);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 40) = v31;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v28 = *(int *)(a1 + 88);
  if ((_DWORD)v28 == -1)
  {
    v29 = v33.__begin_;
    if (!v33.__begin_)
      return;
  }
  else
  {
    v29 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v28];
  }
  v33.__end_ = v29;
  operator delete(v29);
}

void sub_1ADECA7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)
                                                             - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 56 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::Flags_()
{
  return 15;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::SetValue(uint64_t a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  _BYTE *v18;
  uint64_t v19;
  const void *v20;
  size_t v21;
  _BOOL4 v22;
  uint64_t v23;
  float v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  const void *v29;
  size_t v30;
  _BYTE *v31;
  const void *v32;
  size_t v33;
  _BOOL4 v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  void *__p;
  _BYTE *v40;
  uint64_t v41;
  float v42;
  void *v43;
  _BYTE *v44;
  float v45;
  float v46;
  float v47;
  float v48;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
  v6 = (int *)(v5 + 56 * v4);
  v7 = *v6;
  v8 = v6[1];
  if (*v6 != v8)
    **(_QWORD **)(a1 + 16) &= ~0x20000uLL;
  if (v7)
  {
    if (!v8)
    {
      v9 = *(unint64_t **)(a1 + 16);
      v10 = *v9;
LABEL_8:
      *v9 = v10 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    v9 = *(unint64_t **)(a1 + 16);
    v11 = *v9;
    *v9 &= ~0x1000000uLL;
    if (!v8)
    {
      v10 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      *v9 = v11 & 0xFFFFFFFFFEBFFFFFLL;
      goto LABEL_8;
    }
  }
  v12 = v5 + 56 * v4;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v41);
  LODWORD(v37) = 0;
  v14 = *(float *)(v12 + 8);
  v13 = (float *)(v12 + 8);
  *(float *)&v37 = v14;
  v48 = *(float *)&v41;
  if (v14 != *(float *)&v41)
    goto LABEL_14;
  LODWORD(v37) = 0;
  *(float *)&v37 = v13[1];
  v48 = 0.0;
  v48 = v13[2];
  v47 = *((float *)&v41 + 1);
  v46 = v42;
  if (*(float *)&v37 != *((float *)&v41 + 1))
    goto LABEL_14;
  if (v48 == v46
    && (v15 = v5 + 56 * v4,
        v16 = *(const void **)(v15 + 24),
        v17 = *(_QWORD *)(v15 + 32) - (_QWORD)v16,
        v18 = v43,
        v17 == v44 - (_BYTE *)v43)
    && !memcmp(v16, v43, v17))
  {
    v22 = 0;
    if (v18)
    {
LABEL_23:
      v44 = v18;
      operator delete(v18);
    }
  }
  else
  {
LABEL_14:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v37);
    v48 = 0.0;
    v48 = *v13;
    v47 = *(float *)&v37;
    if (v48 != *(float *)&v37)
      goto LABEL_19;
    v48 = 0.0;
    v48 = v13[1];
    v47 = 0.0;
    v47 = v13[2];
    v46 = *((float *)&v37 + 1);
    v45 = v38;
    if (v48 != *((float *)&v37 + 1))
      goto LABEL_19;
    if (v47 == v45
      && (v19 = v5 + 56 * v4,
          v20 = *(const void **)(v19 + 24),
          v21 = *(_QWORD *)(v19 + 32) - (_QWORD)v20,
          v21 == v40 - (_BYTE *)__p))
    {
      v22 = memcmp(v20, __p, v21) != 0;
    }
    else
    {
LABEL_19:
      v22 = 1;
    }
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    v18 = v43;
    if (v43)
      goto LABEL_23;
  }
  if (v22)
    **(_QWORD **)(a1 + 16) &= ~0x100000000uLL;
  v23 = 0x30FC30007;
  if (*(_DWORD *)a2 == *v6 && *((_DWORD *)a2 + 1) == v6[1] && *((_DWORD *)a2 + 12) == *(_DWORD *)(v5 + 56 * v4 + 48))
    v23 = 0x3FFFFFFF0007;
  fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetArc(*(_QWORD **)(a1 + 8), a2, *(_QWORD *)(a1 + 24));
  v24 = *a2;
  v25 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 != v25)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v24 == 0.0)
  {
    v26 = *(unint64_t **)(a1 + 16);
    v28 = *v26 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v26 = v28;
    if (!v25)
    {
      v27 = v28 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v26 = v27;
      goto LABEL_37;
    }
  }
  else if (!v25)
  {
    v26 = *(unint64_t **)(a1 + 16);
    v27 = *v26;
LABEL_37:
    *v26 = v27 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v41);
  LODWORD(v37) = 0;
  *(float *)&v37 = a2[2];
  v48 = *(float *)&v41;
  if (*(float *)&v37 != *(float *)&v41)
    goto LABEL_43;
  LODWORD(v37) = 0;
  *(float *)&v37 = a2[3];
  v48 = 0.0;
  v48 = a2[4];
  v47 = *((float *)&v41 + 1);
  v46 = v42;
  if (*(float *)&v37 != *((float *)&v41 + 1))
    goto LABEL_43;
  if (v48 == v46
    && (v29 = (const void *)*((_QWORD *)a2 + 3),
        v30 = *((_QWORD *)a2 + 4) - (_QWORD)v29,
        v31 = v43,
        v30 == v44 - (_BYTE *)v43)
    && !memcmp(v29, v43, v30))
  {
    v34 = 0;
    if (v31)
    {
LABEL_52:
      v44 = v31;
      operator delete(v31);
    }
  }
  else
  {
LABEL_43:
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v37);
    v48 = 0.0;
    v48 = a2[2];
    v47 = *(float *)&v37;
    if (v48 != *(float *)&v37)
      goto LABEL_48;
    v48 = 0.0;
    v48 = a2[3];
    v47 = 0.0;
    v47 = a2[4];
    v46 = *((float *)&v37 + 1);
    v45 = v38;
    if (v48 != *((float *)&v37 + 1))
      goto LABEL_48;
    if (v47 == v45
      && (v32 = (const void *)*((_QWORD *)a2 + 3), v33 = *((_QWORD *)a2 + 4) - (_QWORD)v32, v33 == v40 - (_BYTE *)__p))
    {
      v34 = memcmp(v32, __p, v33) != 0;
    }
    else
    {
LABEL_48:
      v34 = 1;
    }
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    v31 = v43;
    if (v43)
      goto LABEL_52;
  }
  v35 = *(unint64_t **)(a1 + 16);
  v36 = *v35;
  if (v34)
  {
    v36 = v36 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
    *v35 = v36;
  }
  *v35 = v36 & v23;
}

void sub_1ADECAD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_DWORD *)v8 = *(_DWORD *)v10;
      v11 = *(_QWORD *)(v10 + 4);
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 4) = v11;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v8 + 16), *(const void **)(v10 + 16), *(_QWORD *)(v10 + 24), (uint64_t)(*(_QWORD *)(v10 + 24) - *(_QWORD *)(v10 + 16)) >> 2);
      v8 += 40;
      v10 += 40;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,0>(a2, v7, v6);
}

void sub_1ADECADFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::push_back[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *result;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v6 = *a1;
    v5 = a1[1];
    if (v5 <= *a1)
    {
      v12 = v4 - v6;
      v11 = v12 == 0;
      v13 = 0x999999999999999ALL * (v12 >> 3);
      if (v11)
        v14 = 1;
      else
        v14 = v13;
      v15 = v14 >> 2;
      v25 = a1[4];
      *(_QWORD *)&v23 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v25, v14);
      *((_QWORD *)&v23 + 1) = v23 + 40 * v15;
      *(_QWORD *)&v24 = *((_QWORD *)&v23 + 1);
      *((_QWORD *)&v24 + 1) = v23 + 40 * v16;
      std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_at_end_with_size<std::move_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>(&v23, a1[1], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - a1[1]) >> 3));
      v17 = v24;
      v18 = *(_OWORD *)a1;
      v19 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v23;
      *((_OWORD *)a1 + 1) = v17;
      v23 = v18;
      v24 = v19;
      std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)&v23);
      v4 = a1[2];
    }
    else
    {
      v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = -5 * (v8 >> 1);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,0>(v5, v4, v5 - 40 * (v8 >> 1));
      v4 = v10;
      a1[1] += 8 * v9;
      a1[2] = v10;
    }
  }
  *(_DWORD *)v4 = *(_DWORD *)a2;
  v20 = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(v4 + 16) = 0;
  v21 = (_QWORD *)(v4 + 16);
  *(_QWORD *)((char *)v21 - 12) = v20;
  v21[1] = 0;
  v21[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v21, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  a1[2] += 40;
  return result;
}

void sub_1ADECAF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 40;
      a3 -= 40;
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(a3, v4);
      v4 += 40;
      a3 += 40;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

_QWORD *std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_at_end_with_size<std::move_iterator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = result[2];
  if (a3)
  {
    v6 = v4 + 40 * a3;
    v7 = 40 * a3;
    do
    {
      *(_DWORD *)v4 = *(_DWORD *)a2;
      v8 = *(_QWORD *)(a2 + 4);
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 4) = v8;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v4 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
      v4 += 40;
      a2 += 40;
      v7 -= 40;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1ADECB14C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a4;
  v12 = a4;
  v13 = a4;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_DWORD *)v4 = *(_DWORD *)v6;
      v7 = *(_QWORD *)(v6 + 4);
      *(_QWORD *)(v4 + 16) = 0;
      v8 = (_QWORD *)(v4 + 16);
      *(_QWORD *)((char *)v8 - 12) = v7;
      v8[1] = 0;
      v8[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8, *(const void **)(v6 + 16), *(_QWORD *)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 2);
      v4 = v13 + 40;
      v13 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1ADECB200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(_QWORD *)(v1 - 16) = v3;
      operator delete(v3);
    }
    v1 -= 40;
  }
}

void fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  void *__p;
  char *v15;
  char *v16;
  uint64_t v17[11];
  uint64_t v18;
  void *v19[3];
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  v17[0] = 0;
  v17[1] = (uint64_t)&v20;
  v17[2] = (uint64_t)v19;
  v17[3] = (uint64_t)&v18;
  fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, v17, 0);
  __p = 0;
  v15 = 0;
  v16 = 0;
  v2 = v21;
  if (v21)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if ((v20[v4 >> 6] & (1 << v4)) == 0 || (*((_QWORD *)v19[0] + (v4 >> 6)) & (1 << v4)) == 0)
      {
        if (v3 >= v16)
        {
          v6 = (char *)__p;
          v7 = (v3 - (_BYTE *)__p) >> 2;
          v8 = v7 + 1;
          if ((unint64_t)(v7 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v9 = v16 - (_BYTE *)__p;
          if ((v16 - (_BYTE *)__p) >> 1 > v8)
            v8 = v9 >> 1;
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
            v10 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v10 = v8;
          if (v10)
          {
            v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v16, v10);
            v6 = (char *)__p;
            v3 = v15;
          }
          else
          {
            v11 = 0;
          }
          v12 = &v11[4 * v7];
          *(_DWORD *)v12 = v4;
          v5 = v12 + 4;
          while (v3 != v6)
          {
            v13 = *((_DWORD *)v3 - 1);
            v3 -= 4;
            *((_DWORD *)v12 - 1) = v13;
            v12 -= 4;
          }
          __p = v12;
          v15 = v5;
          v16 = &v11[4 * v10];
          if (v6)
            operator delete(v6);
        }
        else
        {
          *(_DWORD *)v3 = v4;
          v5 = v3 + 4;
        }
        v15 = v5;
        v2 = v21;
        v3 = v5;
      }
      ++v4;
    }
    while (v2 > v4);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 216))(a1, &__p);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 0x50000000000, 0x50000000000);
  if (__p)
  {
    v15 = (char *)__p;
    operator delete(__p);
  }
  if (v19[0])
    operator delete(v19[0]);
  if (v20)
    operator delete(v20);
}

void sub_1ADECB460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;
  void *v14;

  v13 = *(void **)(v11 - 112);
  if (v13)
    operator delete(v13);
  v14 = *(void **)(v11 - 88);
  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__push_back_slow_path<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[48 * v4];
  v16 = &v10[48 * v9];
  std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::pair[abi:ne180100]((uint64_t)v14, a2);
  v15 = v14 + 48;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADECB594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  return a1;
}

uint64_t std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 48;
      std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::pair[abi:ne180100](v7 - 48, v9);
      v7 = *((_QWORD *)&v15 + 1) - 48;
      *((_QWORD *)&v15 + 1) -= 48;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1ADECB714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 24);
    if (v3)
    {
      *(_QWORD *)(v1 + 32) = v3;
      operator delete(v3);
    }
    v1 += 48;
  }
}

uint64_t std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 48;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 48;
    }
  }
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>> &,std::__wrap_iter<int *>>(int *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>> &,std::__wrap_iter<int *>>(_BOOL8 result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v6;
  unint64_t v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (int *)(result + 4 * (v4 >> 1));
    v9 = (int *)(a2 - 4);
    result = fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(a3, *v8, *(_DWORD *)(a2 - 4));
    if (result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (int *)(v6 + 4 * v7);
        result = fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(a3, *v8, v10);
        v9 = v11;
      }
      while (result);
      *v11 = v10;
    }
  }
  return result;
}

BOOL fst::ShortestPathCompare<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v6;
  int *v7;
  int *v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  _BOOL8 v20;
  float v21;
  float v22;
  uint64_t v24;
  float v25;
  void *__p;
  _BYTE *v27;
  uint64_t v28;
  float v29;
  void *v30;
  _BYTE *v31;
  int v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;

  v6 = **a1;
  v7 = (int *)(v6 + 48 * a2);
  v8 = (int *)(v6 + 48 * a3);
  v9 = *v7;
  if ((_DWORD)v9 == *((_DWORD *)a1 + 4))
  {
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v37);
  }
  else
  {
    v10 = *a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[1][1] - v10) >> 3) <= v9)
    {
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v37);
    }
    else
    {
      v11 = (int *)(v10 + 40 * (int)v9);
      v37 = *v11;
      v38 = *(_QWORD *)(v11 + 1);
      v40 = 0;
      v41 = 0;
      v39 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, *((const void **)v11 + 2), *((_QWORD *)v11 + 3), (uint64_t)(*((_QWORD *)v11 + 3) - *((_QWORD *)v11 + 2)) >> 2);
    }
  }
  v12 = *v8;
  if ((_DWORD)v12 == *((_DWORD *)a1 + 4))
  {
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v32);
  }
  else
  {
    v13 = *a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[1][1] - v13) >> 3) <= v12)
    {
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v32);
    }
    else
    {
      v14 = (int *)(v13 + 40 * (int)v12);
      v32 = *v14;
      v33 = *(_QWORD *)(v14 + 1);
      v35 = 0;
      v36 = 0;
      v34 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v34, *((const void **)v14 + 2), *((_QWORD *)v14 + 3), (uint64_t)(*((_QWORD *)v14 + 3) - *((_QWORD *)v14 + 2)) >> 2);
    }
  }
  fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v37, v6 + 48 * a2 + 8, &v28);
  fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v32, v6 + 48 * a3 + 8, &v24);
  v15 = *((_DWORD *)a1 + 4);
  v16 = *v8;
  v17 = (uint64_t)(a1 + 3);
  if (*v7 != v15 || v16 == v15)
  {
    if (*v7 == v15 || v16 != v15)
    {
      v20 = fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(v17, (uint64_t)&v24, (uint64_t)&v28);
      goto LABEL_39;
    }
    if (!fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(v17, (uint64_t)&v24, (uint64_t)&v28))
    {
LABEL_38:
      v20 = 0;
      goto LABEL_39;
    }
    v21 = *((float *)a1 + 5);
    v20 = 1;
    if (*(float *)&v24 <= (float)(v21 + *(float *)&v28)
      && *(float *)&v28 <= (float)(v21 + *(float *)&v24)
      && (*((float *)&v28 + 1) == *((float *)&v24 + 1) && v29 == v25
       || vabds_f32(*((float *)&v28 + 1) + v29, *((float *)&v24 + 1) + v25) <= v21)
      && v31 - (_BYTE *)v30 == v27 - (_BYTE *)__p)
    {
      v20 = memcmp(v30, __p, v31 - (_BYTE *)v30) != 0;
    }
  }
  else
  {
    if (fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::operator()(v17, (uint64_t)&v24, (uint64_t)&v28))
    {
      v20 = 1;
      goto LABEL_39;
    }
    v20 = 0;
    v22 = *((float *)a1 + 5);
    if (*(float *)&v24 <= (float)(v22 + *(float *)&v28) && *(float *)&v28 <= (float)(v22 + *(float *)&v24))
    {
      if ((*((float *)&v28 + 1) == *((float *)&v24 + 1) && v29 == v25
         || vabds_f32(*((float *)&v28 + 1) + v29, *((float *)&v24 + 1) + v25) <= v22)
        && v31 - (_BYTE *)v30 == v27 - (_BYTE *)__p)
      {
        v20 = memcmp(v30, __p, v31 - (_BYTE *)v30) == 0;
        goto LABEL_39;
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  return v20;
}

void sub_1ADECBCA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a21)
    operator delete(a21);
  v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(_QWORD *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  void *__p[2];
  char v18;
  char v19;

  *a1 = &unk_1E5D1DCC8;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1[1] + 8) |= 4uLL;
  }
  v13 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v13, a2, a3, a4, a5);
  v14 = (_DWORD *)a1[1];
  if (v14)
  {
    v15 = v14[14] - 1;
    v14[14] = v15;
    if (!v15)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  }
  a1[1] = v13;
  return a1;
}

void sub_1ADECBF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  _DWORD *v20;
  int v21;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D273C8;
  v20 = (_DWORD *)v18[1];
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D273C8;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeterminizeFst(v4, a1, a2);
  return v4;
}

void sub_1ADECC120(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D20128;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C328;
  *a2 = v4;
  return result;
}

void sub_1ADECC1DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  fst *v13;
  _QWORD *v14;
  uint64_t *v15;
  void *__p[2];
  char v18;
  char v19;

  v10 = fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>((uint64_t)a1, a2, a5);
  *(_QWORD *)v10 = &unk_1E5D20870;
  *(_DWORD *)(v10 + 144) = *(_DWORD *)(a5 + 16);
  *(_QWORD *)(v10 + 152) = a3;
  *(_QWORD *)(v10 + 160) = a4;
  v11 = *(_QWORD **)(a5 + 32);
  if (!v11)
  {
    v11 = (_QWORD *)operator new();
    *v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  }
  a1[22] = v11;
  v12 = *(_QWORD **)(a5 + 40);
  if (!v12)
  {
    v12 = (_QWORD *)operator new();
    *v12 = 0;
    v12[2] = v12 + 1;
    v12[3] = v12 + 1;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v12 + 4), 0, v12 + 2, v12 + 3);
    v12[11] = 0;
    v12[12] = 0;
    v12[13] = 0;
  }
  a1[23] = v12;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v14 = (_QWORD *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"DeterminizeFst: argument not an acceptor", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  v15 = (uint64_t *)a1[20];
  if (v15)
    std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__clear[abi:ne180100](v15);
  return a1;
}

void sub_1ADECC3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D21E68;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::CacheBaseImpl(a1, a3) = &unk_1E5D21E68;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v8 = *(_DWORD *)(a3 + 24) != 1 || *(_BYTE *)(a3 + 28) != 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::DeterminizeProperties(v6, *(_DWORD *)(a3 + 20) != 0, v8) & 0x3FFFFFFF0004;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 40) = v11;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v13 = *(_QWORD *)(a1 + 48);
  if (v13 != v12)
  {
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v12)
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    else
      v14 = 0;
    *(_QWORD *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_1ADECC5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v2, a1);
  return v2;
}

void sub_1ADECC6F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::Expand(_QWORD *a1, int a2)
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD **v6;
  BOOL v7;
  _QWORD **v8;
  _QWORD *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  v4 = v8;
  if (v8 != v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, (uint64_t)(v4 + 5));
      v5 = v4[1];
      if (v5)
      {
        do
        {
          v6 = (_QWORD **)v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD **)v4[2];
          v7 = *v6 == v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1ADECC7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t State;
  int v7;
  uint64_t v8;
  void *__p;
  _BYTE *v10;
  _DWORD v11[3];
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if (v2 == -1)
    return 0xFFFFFFFFLL;
  v3 = v2;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v7);
  v11[0] = v3;
  v11[2] = v7;
  v12 = v8;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v13, __p, (uint64_t)v10, (v10 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = -1;
  *(_QWORD *)v4 = std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> const&>(v4, 0, (uint64_t)v11);
  *(_BYTE *)(v4 + 8) = 0;
  State = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, (uint64_t ***)v4);
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  return State;
}

void sub_1ADECC8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t ***v5;
  _QWORD *result;
  uint64_t **i;
  int v8;
  uint64_t v9;
  void *v10;
  _BYTE *v11;
  uint64_t v12;
  void *v13[2];
  void *v14;
  void *v15;
  void *v16[2];
  void *__p;
  void *v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v5 = *(uint64_t ****)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 88) + 8 * a2);
  result = fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((_QWORD *)a3);
  for (i = *v5; i; i = (uint64_t **)*i)
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(v13, *(_QWORD *)(a1 + 136), *((unsigned int *)i + 2));
    fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)(i + 2), (uint64_t)v13, v16);
    fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)a3, (uint64_t)v16, (uint64_t)&v19);
    *(_DWORD *)a3 = v19;
    *(_QWORD *)(a3 + 4) = v20;
    if (&v19 != (int *)a3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 16), v21, (uint64_t)v22, (v22 - v21) >> 2);
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    if (v14)
    {
      v15 = v14;
      operator delete(v14);
    }
    v8 = *(_DWORD *)a3;
    v9 = *(_QWORD *)(a3 + 4);
    v11 = 0;
    v12 = 0;
    v10 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v10, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
    v19 = v8;
    v20 = v9;
    v22 = 0;
    v23 = 0;
    v21 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, v10, (uint64_t)v11, (v11 - (_BYTE *)v10) >> 2);
    *(_DWORD *)a3 = v19;
    *(_QWORD *)(a3 + 4) = v20;
    if (&v19 != (int *)a3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 16), v21, (uint64_t)v22, (v22 - v21) >> 2);
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    if (v10)
    {
      v11 = v10;
      operator delete(v10);
    }
    result = (_QWORD *)fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member(a3);
    if ((result & 1) == 0)
      *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return result;
}

void sub_1ADECCAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;
  void **v23;
  uint64_t v24;
  void *v26;
  void *v27;

  v26 = *(void **)(v24 - 88);
  if (v26)
  {
    *(_QWORD *)(v24 - 80) = v26;
    operator delete(v26);
  }
  if (__p)
    operator delete(__p);
  v27 = *v23;
  if (*v23)
  {
    *(_QWORD *)(v22 + 24) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D22668;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B640;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorCacheStore((_QWORD *)v4, (_BYTE *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 72) = v5 == 0;
  *(_DWORD *)(v4 + 76) = -1;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = *(_BYTE *)a2;
  if (v5 <= 0x1FA0)
    v5 = 8096;
  *(_QWORD *)(v4 + 96) = v5;
  *(_BYTE *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

void sub_1ADECCC6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorCacheStore(_QWORD *a1, _BYTE *a2)
{
  *(_BYTE *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1ADECCD28(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  std::__list_imp<char *>::clear(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B640;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~FstImpl((uint64_t)a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::~VectorCacheStore(_QWORD *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  if (a2)
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  return a1;
}

void sub_1ADECCE4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADECCEB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D20870;
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = a1[23];
  if (v3)
  {
    v4 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1AF44D190](v4, 0x10E0C400200E20DLL);
  }
  *a1 = &unk_1E5D21E68;
  v5 = a1[17];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheBaseImpl(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + 88;
  v2 = *(_QWORD **)(a1 + 88);
  v3 = *(_QWORD *)(v4 + 8);
  if ((int)((unint64_t)(v3 - (_QWORD)v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::clear((_QWORD **)v2[v5]);
        MEMORY[0x1AF44D190](v6, 0x1020C405F07FB98);
        v2 = *(_QWORD **)(a1 + 88);
        v3 = *(_QWORD *)(a1 + 96);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 32);
  return a1;
}

void std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::clear(_QWORD **a1)
{
  _QWORD *i;
  _QWORD *v3;

  for (i = *a1; i; i = v3)
  {
    v3 = (_QWORD *)*i;
    std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::__delete_node[abi:ne180100]<>((int)a1, i);
  }
  *a1 = 0;
}

void std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::__delete_node[abi:ne180100]<>(int a1, _QWORD *__p)
{
  void *v3;

  v3 = (void *)__p[4];
  if (v3)
  {
    __p[5] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  size_t *v8;
  size_t v9;
  fst *v10;
  _QWORD *v11;
  void *__p[2];
  char v14;
  char v15;

  v4 = fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeterminizeFstImplBase((uint64_t)a1, a2);
  *(_QWORD *)v4 = &unk_1E5D20870;
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  v5 = (_QWORD *)operator new();
  if (a1[17])
    v6 = a1[17];
  else
    v6 = **(_QWORD **)(a2 + 176);
  *v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 88))(v6, 0);
  a1[22] = v5;
  v7 = (_QWORD *)operator new();
  v8 = *(size_t **)(a2 + 184);
  v9 = *v8;
  *v7 = *v8;
  fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable((uint64_t)(v7 + 1), v9);
  a1[23] = v7;
  if (*(_QWORD *)(a2 + 160))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFsaImpl: cannot copy with out_dist vector", 52);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  return a1;
}

void sub_1ADECD1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D21E68;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D21E68;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v4)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 40) = v6;
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *(_QWORD *)(a1 + 48) = v9;
  }
  return a1;
}

void sub_1ADECD3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v13[8];
  unint64_t v14;

  *(_QWORD *)a1 = &unk_1E5D22668;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B640;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v13[0] = *(_BYTE *)(a1 + 104);
  v14 = v7;
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::VectorCacheStore((_QWORD *)v6, v13);
  v8 = v14;
  *(_BYTE *)(v6 + 72) = v14 == 0;
  *(_DWORD *)(v6 + 76) = -1;
  *(_QWORD *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 88) = v13[0];
  if (v8 <= 0x1FA0)
    v8 = 8096;
  *(_QWORD *)(v6 + 96) = v8;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v9 = 1;
  else
    v9 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v9;
  if (((a3 ^ 1) & 1) == 0)
  {
    v10 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::operator=(v6, v10);
    v11 = *(_OWORD *)(v10 + 104);
    *(_OWORD *)(v6 + 88) = *(_OWORD *)(v10 + 88);
    *(_OWORD *)(v6 + 104) = v11;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1ADECD560(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  char *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x58uLL);
        fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::CacheState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*>>((_QWORD *)(a1 + 56), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
  *(_QWORD *)(a1 + 80) = *(unsigned int *)(a2 + 80);
  return a1;
}

void sub_1ADECD844(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADECD8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(a1, v4, v6);
      v6 += 56;
      v4 = v12 + 56;
      v12 += 56;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1ADECD978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(_QWORD *a1, int a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  void *__p;
  _BYTE *v19;
  _DWORD v20[3];
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[3];
  _DWORD *v26;
  unint64_t v27;

  v5 = **(uint64_t ****)(*(_QWORD *)(a1[23] + 88) + 8 * a2);
  if (!v5)
    goto LABEL_21;
  do
  {
    v6 = *((unsigned int *)v5 + 2);
    v7 = a1[17];
    v27 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, v6, v25);
    while (1)
    {
      if (!v25[0])
      {
        if (v27 >= v25[2])
          goto LABEL_18;
        goto LABEL_8;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v25[0] + 24))(v25[0]))
        break;
      if (v25[0])
      {
        v8 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v25[0] + 32))();
        goto LABEL_9;
      }
LABEL_8:
      v8 = (_DWORD *)(v25[1] + 56 * v27);
LABEL_9:
      v9 = v8[12];
      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)(v5 + 2), (uint64_t)(v8 + 2), &v16);
      v20[0] = v9;
      v20[2] = v16;
      v21 = v17;
      v23 = 0;
      v24 = 0;
      v22 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, __p, (uint64_t)v19, (v19 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v19 = __p;
        operator delete(__p);
      }
      fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::FilterArc(a1[22], v8, (uint64_t)(v5 + 1), (uint64_t)v20, (uint64_t)a3);
      if (v22)
      {
        v23 = v22;
        operator delete(v22);
      }
      if (v25[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v25[0] + 40))(v25[0]);
      else
        ++v27;
    }
    if (v25[0])
    {
      (*(void (**)(void))(*(_QWORD *)v25[0] + 8))();
      goto LABEL_20;
    }
LABEL_18:
    if (v26)
      --*v26;
LABEL_20:
    v5 = (uint64_t **)*v5;
  }
  while (v5);
LABEL_21:
  v12 = (_QWORD *)*a3;
  v10 = a3 + 1;
  v11 = v12;
  if (v12 != v10)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v11 + 5));
      v13 = (_QWORD *)v11[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v11[2];
          v15 = *v14 == (_QWORD)v11;
          v11 = v14;
        }
        while (!v15);
      }
      v11 = v14;
    }
    while (v14 != v10);
  }
}

void sub_1ADECDBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_DWORD *a23)
{
  if (a20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  }
  else if (a23)
  {
    --*a23;
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *MutableState;
  _DWORD v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  int State;

  __p = 0;
  v10 = 0;
  v11 = 0;
  v7[0] = *(_DWORD *)a3;
  v7[1] = v7[0];
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)&v8, a3 + 8);
  State = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, *(uint64_t ****)(a3 + 48));
  MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::PushArc(MutableState, (uint64_t)v7);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_1ADECDCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetArcs(uint64_t a1, int a2)
{
  char *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = *((_QWORD *)MutableState + 7);
  v6 = *((_QWORD *)MutableState + 8) - v5;
  if (v6)
  {
    v7 = v6 / 56;
    v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 48);
    do
    {
      v11 = *v9;
      v9 += 14;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 20) |= 0xAu;
}

uint64_t fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::FilterArc(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t *v11;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  void *__p;
  _BYTE *v17;
  uint64_t v18;

  v13 = a2;
  v7 = std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, &v13);
  if (*((_DWORD *)v7 + 10) == -1)
  {
    fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeArc((uint64_t)&v13, a2);
    v8 = v14;
    *((_DWORD *)v7 + 10) = (_DWORD)v13;
    *((_DWORD *)v7 + 12) = v8;
    *(uint64_t *)((char *)v7 + 52) = v15;
    if (v7 + 5 != (uint64_t *)&v13)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v7 + 64, (char *)__p, (uint64_t)v17, (v17 - (_BYTE *)__p) >> 2);
    v9 = v18;
    v10 = __p;
    v7[11] = v18;
    if (v10)
    {
      v17 = v10;
      operator delete(v10);
      v9 = v7[11];
    }
    *(_BYTE *)(v9 + 8) = 0;
  }
  v11 = (uint64_t *)v7[11];
  *v11 = (uint64_t)std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> const&>((uint64_t)v11, *v11, a4);
  return 1;
}

void sub_1ADECDE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *i;
  double v11;
  int v12;
  uint64_t v13;
  void *__p;
  _BYTE *v15;

  v4 = *(uint64_t ***)(a2 + 48);
  std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v4);
  v5 = *v4;
  if (*v4)
  {
    v6 = (int *)(a2 + 8);
    v7 = *v4;
    do
    {
      fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)(a2 + 8), (uint64_t)(v7 + 2), (uint64_t)&v12);
      *(_DWORD *)(a2 + 8) = v12;
      *(_QWORD *)(a2 + 12) = v13;
      if (v6 != &v12)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 + 24), (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      if (v5 == v7 || *((_DWORD *)v7 + 2) != *((_DWORD *)v5 + 2))
      {
        v8 = (uint64_t *)*v7;
        v5 = v7;
      }
      else
      {
        fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)v5 + 4, (uint64_t)(v7 + 2), (uint64_t)&v12);
        *((_DWORD *)v5 + 4) = v12;
        *(uint64_t *)((char *)v5 + 20) = v13;
        if (v5 + 2 != (uint64_t *)&v12)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v5 + 32, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 2);
        if (__p)
        {
          v15 = __p;
          operator delete(__p);
        }
        if (!fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Member((uint64_t)(v5 + 2)))
          *(_QWORD *)(a1 + 8) |= 4uLL;
        v8 = (uint64_t *)*v7;
        v9 = (_QWORD *)*v5;
        *v5 = *(_QWORD *)*v5;
        std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::__delete_node[abi:ne180100]<>((int)v4, v9);
      }
      v7 = v8;
    }
    while (v8);
    for (i = *v4; i; i = (uint64_t *)*i)
    {
      fst::Divide<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)(i + 2), (uint64_t)v6, 0, (uint64_t)&v12);
      *((_DWORD *)i + 4) = v12;
      HIDWORD(v11) = HIDWORD(v13);
      *(uint64_t *)((char *)i + 20) = v13;
      if (i + 2 != (uint64_t *)&v12)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)i + 32, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      LODWORD(v11) = *(_DWORD *)(a1 + 144);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Quantize((uint64_t)(i + 2), (uint64_t)&v12, v11);
      *((_DWORD *)i + 4) = v12;
      *(uint64_t *)((char *)i + 20) = v13;
      if (i + 2 != (uint64_t *)&v12)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)i + 32, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1ADECE09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

_QWORD *std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = **a2;
  v6[10] = -1;
  result = fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((_QWORD *)v6 + 6);
  *((_QWORD *)v6 + 11) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADECE1F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[8];
    if (v3)
    {
      __p[9] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *a2;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((_QWORD *)(a1 + 8));
  v3 = operator new();
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = -1;
  *(_QWORD *)(a1 + 48) = v3;
  return a1;
}

void sub_1ADECE2B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;

  v5 = (char *)operator new(0x38uLL);
  *(_QWORD *)v5 = a2;
  *((_DWORD *)v5 + 2) = *(_DWORD *)a3;
  *((_DWORD *)v5 + 4) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(v5 + 20) = *(_QWORD *)(a3 + 12);
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v5 + 4, *(const void **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  return v5;
}

void sub_1ADECE33C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::Divide<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL4 v23;
  size_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  void *v32;
  _BYTE *v33;
  uint64_t v34;
  float v35;
  void *__p;
  _BYTE *v37;
  uint64_t v38;

  v8 = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero();
  LODWORD(__p) = 0;
  LODWORD(__p) = *(_DWORD *)a1;
  LODWORD(v32) = 0;
  LODWORD(v32) = *(_DWORD *)v8;
  if (*(float *)&__p == *(float *)&v32)
  {
    LODWORD(__p) = 0;
    LODWORD(__p) = *(_DWORD *)(a1 + 4);
    LODWORD(v32) = 0;
    LODWORD(v32) = *(_DWORD *)(a1 + 8);
    LODWORD(v29) = 0;
    LODWORD(v29) = *(_DWORD *)(v8 + 4);
    v35 = 0.0;
    v35 = *(float *)(v8 + 8);
    if (*(float *)&__p == *(float *)&v29 && *(float *)&v32 == v35)
    {
      v9 = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero();
      LODWORD(__p) = 0;
      LODWORD(__p) = *(_DWORD *)a2;
      LODWORD(v32) = 0;
      LODWORD(v32) = *(_DWORD *)v9;
      if (*(float *)&__p != *(float *)&v32)
        goto LABEL_7;
      LODWORD(__p) = 0;
      LODWORD(__p) = *(_DWORD *)(a2 + 4);
      LODWORD(v32) = 0;
      LODWORD(v32) = *(_DWORD *)(a2 + 8);
      LODWORD(v29) = 0;
      LODWORD(v29) = *(_DWORD *)(v9 + 4);
      v35 = 0.0;
      v35 = *(float *)(v9 + 8);
      if (*(float *)&__p != *(float *)&v29 || *(float *)&v32 != v35)
      {
LABEL_7:
        fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((_QWORD *)a4);
        return;
      }
      if (kaldi::g_kaldi_verbose_level < -1)
LABEL_60:
        exit(1);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Division by zero [0/0] in CompactLatticeWeightTpl", 49);
LABEL_59:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      goto LABEL_60;
    }
  }
  v10 = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero();
  LODWORD(__p) = 0;
  v11 = *(float *)a2;
  LODWORD(__p) = *(_DWORD *)a2;
  LODWORD(v32) = 0;
  LODWORD(v32) = *(_DWORD *)v10;
  if (*(float *)&__p == *(float *)&v32)
  {
    LODWORD(__p) = 0;
    LODWORD(__p) = *(_DWORD *)(a2 + 4);
    LODWORD(v32) = 0;
    LODWORD(v32) = *(_DWORD *)(a2 + 8);
    LODWORD(v29) = 0;
    LODWORD(v29) = *(_DWORD *)(v10 + 4);
    v35 = 0.0;
    v35 = *(float *)(v10 + 8);
    if (*(float *)&__p == *(float *)&v29 && *(float *)&v32 == v35)
    {
      if (kaldi::g_kaldi_verbose_level < -1)
        goto LABEL_60;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error: division by zero in CompactLatticeWeightTpl::Divide()", 60);
      goto LABEL_59;
    }
  }
  v12 = *(float *)a1;
  v13 = NAN;
  if (*(float *)a1 != -INFINITY)
  {
    v14 = LODWORD(v11) & 0x7FFFFFFF;
    v15 = v12 - v11;
    if (v12 == INFINITY)
      v15 = INFINITY;
    if (v14 <= 2139095039)
      v13 = v15;
    else
      v13 = NAN;
  }
  v16 = *(float *)(a2 + 8);
  v17 = *(float *)(a1 + 4) - *(float *)(a2 + 4);
  v18 = *(float *)(a1 + 8) - v16;
  if (v17 == -INFINITY || v18 == -INFINITY)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
    }
    v21 = INFINITY;
    v22 = INFINITY;
  }
  else
  {
    v23 = v17 == INFINITY;
    if (v18 == INFINITY)
      v23 = 1;
    if (v23)
      v21 = INFINITY;
    else
      v21 = *(float *)(a1 + 8) - v16;
    if (v23)
      v22 = INFINITY;
    else
      v22 = *(float *)(a1 + 4) - *(float *)(a2 + 4);
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v32, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v24 = v30 - (_BYTE *)v29;
  v25 = (v30 - (_BYTE *)v29) >> 2;
  v26 = (char *)v32;
  v27 = (uint64_t)v33;
  if (v25 > (v33 - (_BYTE *)v32) >> 2)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error in Divide (CompactLatticeWeightTpl): cannot divide, length mismatch.", 74);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    exit(1);
  }
  if (a3 == 1)
  {
    v28 = &v33[-4 * v25];
    if (!memcmp(v29, v28, v24))
    {
      __p = 0;
      v37 = 0;
      v38 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v26, v27 - 4 * v25, (v28 - v26) >> 2);
      *(float *)a4 = v13;
      *(float *)(a4 + 4) = v22;
      *(float *)(a4 + 8) = v21;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a4 + 16), __p, (uint64_t)v37, (v37 - (_BYTE *)__p) >> 2);
      goto LABEL_40;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
LABEL_55:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error in Divide (CompactLatticeWeighTpl): cannot divide, data mismatch.", 71);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
LABEL_56:
    exit(1);
  }
  if (a3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Cannot divide CompactLatticeWeightTpl with DIVIDE_ANY.", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    goto LABEL_56;
  }
  if (memcmp(v29, v32, v24))
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      goto LABEL_56;
    goto LABEL_55;
  }
  __p = 0;
  v37 = 0;
  v38 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, &v26[4 * v25], v27, (v27 - (uint64_t)&v26[4 * v25]) >> 2);
  *(float *)a4 = v13;
  *(float *)(a4 + 4) = v22;
  *(float *)(a4 + 8) = v21;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a4 + 16), __p, (uint64_t)v37, (v37 - (_BYTE *)__p) >> 2);
LABEL_40:
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
}

void sub_1ADECE8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a17);
  _Unwind_Resume(a1);
}

_QWORD *fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Quantize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  int v7;
  uint64_t v8;

  LODWORD(a3) = 981467136;
  fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Quantize(a1, (uint64_t)&v7, a3);
  v5 = v8;
  *(_DWORD *)a2 = v7;
  *(_QWORD *)(a2 + 4) = v5;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a2 + 16), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
}

uint64_t fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Quantize@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  float v3;
  float32x2_t v4;
  float v5;
  float32x2_t v6;

  v3 = *(float *)result;
  if ((*(_DWORD *)result & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    v3 = floorf((float)(v3 / *(float *)&a3) + 0.5) * *(float *)&a3;
  v4 = *(float32x2_t *)(result + 4);
  v5 = vaddv_f32(v4);
  v6 = (float32x2_t)0x7F0000007FLL;
  if (v5 != -INFINITY)
  {
    if (v5 == INFINITY)
      v6 = (float32x2_t)vdup_n_s32(0x7F800000u);
    else
      v6 = vmul_n_f32(vrndm_f32(vadd_f32(vdiv_f32(v4, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0)), (float32x2_t)0x3F0000003F000000)), *(float *)&a3);
  }
  *(float *)a2 = v3;
  *(float32x2_t *)(a2 + 4) = v6;
  return result;
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, uint64_t ***a2)
{
  uint64_t State;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[16];
  void *__p;
  void *v12;

  State = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::FindState(*(_QWORD **)(a1 + 184), (uint64_t)a2);
  v5 = State;
  if (*(_QWORD *)(a1 + 152))
  {
    v6 = *(uint64_t **)(a1 + 160);
    if (0xCCCCCCCCCCCCCCCDLL * ((v6[1] - *v6) >> 3) <= (int)State)
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, (uint64_t)v10);
      v7 = v6[1];
      if (v7 >= v6[2])
      {
        v8 = std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>(v6, (uint64_t)v10);
      }
      else
      {
        std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>((uint64_t)v6, (uint64_t)v10);
        v8 = v7 + 40;
      }
      v6[1] = v8;
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_1ADECEB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::FindState(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Id;
  uint64_t v4;
  int v6[2];

  *(_QWORD *)v6 = a2;
  v2 = (a1[12] - a1[11]) >> 3;
  Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, v6, 1);
  if ((_DWORD)Id != (_DWORD)v2)
  {
    v4 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::clear(*(_QWORD ***)v6);
      MEMORY[0x1AF44D190](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::DefaultCommonDivisor<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **i;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  void *v10[2];
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *__p;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;

  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero((_QWORD *)a3);
  for (i = *a2; i; i = (uint64_t **)*i)
  {
    v7 = *((int *)i + 2);
    v8 = **(_QWORD **)(a1 + 152);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) - v8) >> 3) <= v7)
    {
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v17);
    }
    else
    {
      v9 = (int *)(v8 + 40 * (int)v7);
      v17 = *v9;
      v18 = *(_QWORD *)(v9 + 1);
      v20 = 0;
      v21 = 0;
      v19 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v19, *((const void **)v9 + 2), *((_QWORD *)v9 + 3), (uint64_t)(*((_QWORD *)v9 + 3) - *((_QWORD *)v9 + 2)) >> 2);
    }
    fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)(i + 2), (uint64_t)&v17, v10);
    fst::Plus<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((float *)a3, (uint64_t)v10, (uint64_t)&v13);
    *(_DWORD *)a3 = v13;
    *(_QWORD *)(a3 + 4) = v14;
    if (&v13 != (int *)a3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 16), (char *)__p, (uint64_t)v16, (v16 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (v11)
    {
      v12 = v11;
      operator delete(v11);
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
  }
}

void sub_1ADECED58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  void **v24;
  void *v26;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a22)
    operator delete(a22);
  v26 = *v24;
  if (*v24)
  {
    *(_QWORD *)(v23 + 24) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;

  a1[13] = a2;
  v6 = (uint64_t)(a1 + 3);
  v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7)
    return *((unsigned int *)v7 + 4);
  if (!a3)
    return 0xFFFFFFFFLL;
  v9 = a1[10];
  v10 = (_QWORD *)a1[11];
  v11 = ((uint64_t)v10 - v9) >> 3;
  v23 = v11;
  v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v12 - v9;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1))
      v15 = v11 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    else
      v17 = 0;
    v18 = &v17[8 * v11];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = *a2;
    v13 = v18 + 8;
    v21 = (char *)a1[10];
    v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = *a2;
    v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int ***v6;
  unint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;

  v4 = *a2;
  if ((int)v4 < -1)
  {
    v7 = 0;
  }
  else
  {
    v5 = a1[4];
    if ((_DWORD)v4 == -1)
      v6 = *(unsigned int ****)(v5 + 104);
    else
      v6 = (unsigned int ***)(*(_QWORD *)(v5 + 80) + 8 * v4);
    v7 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v5, *v6);
  }
  v8 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v8)
    return 0;
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v7;
    if (v7 >= *(_QWORD *)&v8)
      v11 = v7 % *(_QWORD *)&v8;
  }
  else
  {
    v11 = (*(_QWORD *)&v8 - 1) & v7;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = a1 + 6;
    do
    {
      v15 = v13[1];
      if (v15 == v7)
      {
        if ((fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v14, *((_DWORD *)v13 + 4), *a2) & 1) != 0)return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(_QWORD *)&v8)
            v15 %= *(_QWORD *)&v8;
        }
        else
        {
          v15 &= *(_QWORD *)&v8 - 1;
        }
        if (v15 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v6;

  if (a2 < -1 || a3 < -1)
    return a2 == a3;
  v3 = *a1;
  if (a2 == -1)
    v4 = *(uint64_t **)(v3 + 104);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 80) + 8 * a2);
  if (a3 == -1)
    v6 = *(uint64_t **)(v3 + 104);
  else
    v6 = (uint64_t *)(*(_QWORD *)(v3 + 80) + 8 * a3);
  return fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::operator==(*v4, *v6);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(uint64_t a1, unsigned int **a2)
{
  uint64_t v2;
  unsigned int *i;
  unint64_t v4;

  v2 = *((char *)a2 + 8);
  for (i = *a2; i; i = *(unsigned int **)i)
  {
    v4 = (int)i[2];
    v2 ^= fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Hash(i + 4) ^ (2 * v2) ^ (32 * v4) ^ (v4 >> 59);
  }
  return v2;
}

uint64_t fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Hash(unsigned int *a1)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[1];
  v3 = a1[2];
  v4 = __CFADD__(v3, v2);
  v5 = v3 + v2;
  v6 = 0x100000000;
  if (!v4)
    v6 = 0;
  result = (v6 | v5) ^ (32 * *a1);
  v9 = a1 + 4;
  v8 = (int *)*((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)v9 + 1) - (_QWORD)v8;
  if (v10)
  {
    v11 = v10 >> 2;
    if (v11 <= 1)
      v11 = 1;
    v12 = 6967;
    do
    {
      v13 = *v8++;
      result += v12 * v13;
      v12 *= 7499;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::operator==(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (*(unsigned __int8 *)(a2 + 8) != *(unsigned __int8 *)(a1 + 8))
    return 0;
  v2 = (_QWORD *)a2;
  v3 = (_QWORD *)a1;
  while (1)
  {
    v2 = (_QWORD *)*v2;
    v3 = (_QWORD *)*v3;
    if (!v2 || v3 == 0)
      break;
    if (!fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::operator==((uint64_t)(v2 + 1), (uint64_t)(v3 + 1)))return 0;
  }
  return (v2 != 0) ^ (v3 == 0);
}

BOOL fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::operator==(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(float *)(a1 + 8) == *(float *)(a2 + 8)
    && *(float *)(a1 + 12) == *(float *)(a2 + 12)
    && *(float *)(a1 + 16) == *(float *)(a2 + 16)
    && (v3 = a1 + 24,
        v2 = *(const void **)(a1 + 24),
        v4 = *(_QWORD *)(v3 + 8) - (_QWORD)v2,
        v6 = a2 + 24,
        v5 = *(const void **)(a2 + 24),
        v4 == *(_QWORD *)(v6 + 8) - (_QWORD)v5))
  {
    return memcmp(v2, v5, v4) == 0;
  }
  else
  {
    return 0;
  }
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned int ***v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  if ((int)v7 < -1)
  {
    v10 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((_DWORD)v7 == -1)
      v9 = *(unsigned int ****)(v8 + 104);
    else
      v9 = (unsigned int ***)(*(_QWORD *)(v8 + 80) + 8 * v7);
    v10 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v8, *v9);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_44:
    *v24 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADECF4C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__construct_one_at_end[abi:ne180100]<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v3 = *(_DWORD *)a2;
  *(_QWORD *)(v3 + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v3 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 40;
  return result;
}

void sub_1ADECF534(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__push_back_slow_path<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[40 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  v12 = *(_QWORD *)(a2 + 4);
  *((_QWORD *)v11 + 2) = 0;
  v11 += 16;
  *(_QWORD *)(v11 - 12) = v12;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v16 += 40;
  std::vector<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADECF64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  char *MutableState;
  char *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *((_DWORD *)MutableState + 20);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 20) = v5 | 4;
      v6 = *((_QWORD *)MutableState + 8) - *((_QWORD *)MutableState + 7) + *(_QWORD *)(a1 + 112) + 88;
      *(_QWORD *)(a1 + 112) = v6;
      *(_BYTE *)(a1 + 104) = 1;
      if (v6 > *(_QWORD *)(a1 + 96))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1[9];
  v3 = (uint64_t)(a1 + 9);
  v5 = *(_QWORD *)(v3 - 8);
  if (v5 >= v4)
  {
    result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> const&>(a1 + 7, a2);
  }
  else
  {
    std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(v3, *(_QWORD *)(v3 - 8), a2);
    result = v5 + 56;
    a1[8] = v5 + 56;
  }
  a1[8] = result;
  return result;
}

void sub_1ADECF738(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  char *result;
  uint64_t v5;
  char *MutableState;

  v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2)
    return *(char **)(a1 + 80);
  if (!*(_BYTE *)(a1 + 72))
    return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 76) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
    *((_DWORD *)MutableState + 20) |= 4u;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::reserve((uint64_t *)MutableState + 7, 0x80uLL);
    return *(char **)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(v5 + 84))
  {
    *(_DWORD *)(v5 + 80) &= ~4u;
    *(_BYTE *)(a1 + 72) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 76) = a2;
  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Reset(v5);
  result = *(char **)(a1 + 80);
  *((_DWORD *)result + 20) |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *MutableState;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  fst *v27;
  _QWORD *v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37[2];
  char v38;
  char v39;
  char v40;
  void *__p[2];
  char v42;

  if (*(_BYTE *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0)
        operator delete(__p[0]);
    }
    v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      v18 = *(_DWORD *)(v17 + 16);
      if (v18)
        v19 = v18 - 1;
      else
        v19 = *(_DWORD *)(a1 + 76);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(a1, v19);
      v21 = *(_QWORD *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 21))
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v22 = *((_DWORD *)MutableState + 20);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              v23 = *((_QWORD *)MutableState + 8) - *((_QWORD *)MutableState + 7) + 88;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Delete((_QWORD *)a1);
            v17 = *(_QWORD *)(a1 + 56);
            continue;
          }
        }
        else
        {
          v22 = *((_DWORD *)MutableState + 20);
          if ((v22 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      *((_DWORD *)MutableState + 20) &= ~8u;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 112) <= v16)
    {
      v24 = *(_QWORD *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          v25 = *(_QWORD *)(a1 + 96);
          do
          {
            v25 *= 2;
            v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(_QWORD *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        v28 = (_QWORD *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      v30 = (_QWORD *)fst::cerr(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0)
        operator delete(v37[0]);
    }
  }
}

void sub_1ADECFBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Reset(uint64_t a1)
{
  int v2;
  uint64_t v3;
  void *__p;
  _BYTE *v5;

  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v2);
  *(_DWORD *)a1 = v2;
  *(_QWORD *)(a1 + 4) = v3;
  if (&v2 != (int *)a1)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 16), (char *)__p, (uint64_t)v5, (v5 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100]((uint64_t *)(a1 + 56));
}

void sub_1ADECFCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 104) && (*(_BYTE *)(a2 + 80) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56) + *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v4;
    if (v4 > *(_QWORD *)(a1 + 96))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GC(a1, (char *)a2, 0, 0.666);
  }
}

void std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[8];
    if (v4)
    {
      a2[9] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

_QWORD *fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v7;
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  _BYTE *v15;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(&v12, a1, a2);
    v7 = v12;
    v8 = v13;
    v10 = 0;
    v11 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v14, (uint64_t)v15, (v15 - (_BYTE *)v14) >> 2);
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal(a1, a2, &v7);
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    if (v14)
    {
      v15 = v14;
      operator delete(v14);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final(a1, a2, a3);
}

void sub_1ADECFE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  char *MutableState;
  int v5;
  uint64_t v6;
  void *__p;
  _BYTE *v8;
  uint64_t v9;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  v5 = *a3;
  v6 = *(_QWORD *)(a3 + 1);
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)a3 + 2), *((_QWORD *)a3 + 3), (uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 2);
  *(_DWORD *)MutableState = v5;
  *(_QWORD *)(MutableState + 4) = v6;
  if (MutableState != (char *)&v5)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(MutableState + 16, (char *)__p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  *((_DWORD *)MutableState + 20) |= 9u;
}

void sub_1ADECFF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::DeterminizeFst(_QWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  *a1 = &unk_1E5D1DCC8;
  a1[1] = 0;
  v4 = *(_DWORD **)(a2 + 8);
  if (a3)
  {
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(a2 + 8));
    v5 = (_DWORD *)a1[1];
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    ++v4[14];
  }
  a1[1] = v4;
  return a1;
}

void sub_1ADECFFF4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D273C8;
  v3 = v1[1];
  if (v3)
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v3);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *((_QWORD *)v19 + 7);
    v9 = 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)v19 + 8) - v8) >> 3);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        v14 = *v12;
        v12 += 14;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADED01A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 84);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADED022C(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,float>>,std::reverse_iterator<std::pair<std::string,float>*>,std::reverse_iterator<std::pair<std::string,float>*>,std::reverse_iterator<std::pair<std::string,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,float>>,std::reverse_iterator<std::pair<std::string,float>*>,std::reverse_iterator<std::pair<std::string,float>*>,std::reverse_iterator<std::pair<std::string,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,float>>,std::reverse_iterator<std::pair<std::string,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,float>>,std::reverse_iterator<std::pair<std::string,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *kaldi::quasar::CoreMLClassifier::CoreMLClassifier(_QWORD *a1, uint64_t *a2)
{
  void ***v4;
  void **v5;
  void *v6;
  void *v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  _QWORD *v15;
  id v16;
  const char *v17;
  size_t v18;
  _QWORD v19[34];
  id v20;

  *a1 = &off_1E5D33410;
  v4 = (void ***)(a1 + 1);
  v5 = (void **)operator new();
  *v5 = 0;
  *v4 = v5;
  v6 = (void *)MEMORY[0x1E0C9E938];
  v7 = (void *)MEMORY[0x1E0C99E98];
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "fileURLWithPath:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = 0;
  objc_msgSend(v6, "modelWithContentsOfURL:error:", v10, &v20);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v20;
  v13 = **v4;
  **v4 = (void *)v11;

  if (!**v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not load ", 15);
    objc_msgSend(v12, "description");
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v17 = (const char *)objc_msgSend(v16, "UTF8String");
    v18 = strlen(v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }

  return a1;
}

void sub_1ADED0518(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  id **v2;
  void *v3;

  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](v2, 0);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLClassifier::~CoreMLClassifier(id **this)
{
  *this = (id *)&off_1E5D33410;
  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](this + 1, 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  *this = (id *)&off_1E5D33410;
  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](this + 1, 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::CoreMLClassifier::PredictProba(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t result;
  int v6;
  id v7;
  uint64_t i;
  std::string *v9;
  __int128 v10;
  void *v11;
  void **v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  id v25;
  void *v26;
  int v27;
  _QWORD *v28;
  id v29;
  const char *v30;
  size_t v31;
  _QWORD *v32;
  id v33;
  const char *v34;
  size_t v35;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  id v45;
  void *__p[2];
  int64_t v47;
  id v48;
  std::string v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  result = kaldi::MatrixBase<float>::NumRows(a2);
  if ((int)result >= 1)
  {
    v6 = 0;
    do
    {
      v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      for (i = 0; i < (int)kaldi::MatrixBase<float>::NumCols(a2); ++i)
      {
        std::to_string(&v49, i);
        v9 = std::string::insert(&v49, 0, "i");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v47 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        objc_msgSend(MEMORY[0x1E0C9E920], "featureValueWithDouble:", *(float *)(*(_QWORD *)a2 + 4 * v6 * *(_DWORD *)(a2 + 16) + 4 * i));
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v47 >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setObject:forKeyedSubscript:", v11, v13);

        if (SHIBYTE(v47) < 0)
          operator delete(__p[0]);
      }
      v14 = objc_alloc(MEMORY[0x1E0C9E900]);
      v48 = 0;
      v15 = objc_msgSend(v14, "initWithDictionary:error:", v7, &v48);
      v16 = v48;
      v38 = (void *)v15;
      if (!v15)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"CoreML feature provider creation failed: ", 41);
        objc_msgSend(v16, "description");
        v29 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v30 = (const char *)objc_msgSend(v29, "UTF8String");
        v31 = strlen(v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v30, v31);

        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      v17 = **(void ***)(a1 + 8);
      v45 = v16;
      objc_msgSend(v17, "predictionFromFeatures:error:", v15, &v45);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = v45;

      if (!v39)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"CoreML feature provider creation failed: ", 41);
        objc_msgSend(v37, "description");
        v33 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v34 = (const char *)objc_msgSend(v33, "UTF8String");
        v35 = strlen(v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, v35);

        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      objc_msgSend(v39, "featureValueForName:", CFSTR("classProbability"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "dictionaryValue");
      v40 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v40)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"classProbability", 16);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      if (v6)
      {
        v19 = objc_msgSend(v40, "count");
        if (v19 != (int)kaldi::MatrixBase<float>::NumCols((uint64_t)a3))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[classProbability count] == out->NumCols()", 42);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
      }
      else
      {
        v20 = kaldi::MatrixBase<float>::NumRows(a2);
        kaldi::Matrix<float>::Resize(a3, v20, objc_msgSend(v40, "count"), 1, 0);
      }
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v21 = v40;
      v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v41, v50, 16);
      if (v22)
      {
        v23 = *(_QWORD *)v42;
        do
        {
          for (j = 0; j != v22; ++j)
          {
            if (*(_QWORD *)v42 != v23)
              objc_enumerationMutation(v21);
            v25 = *(id *)(*((_QWORD *)&v41 + 1) + 8 * j);
            objc_msgSend(v21, "objectForKeyedSubscript:", v25);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "floatValue");
            *(_DWORD *)(*(_QWORD *)a3 + 4 * a3[2].i32[0] * v6 + 4 * (int)objc_msgSend(v25, "intValue")) = v27;

          }
          v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v41, v50, 16);
        }
        while (v22);
      }

      result = kaldi::MatrixBase<float>::NumRows(a2);
      ++v6;
    }
    while (v6 < (int)result);
  }
  return result;
}

void sub_1ADED0B18(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1ADED0B34()
{
  JUMPOUT(0x1ADED0B54);
}

void sub_1ADED0B3C()
{
  void *v0;

  JUMPOUT(0x1ADED0B50);
}

uint64_t quasar::FstToStrings(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, char a5)
{
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  __int128 *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 *v25;
  float *v26;
  uint64_t v27;
  float *v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  char v32;
  __int128 v33;
  void *v34;
  void **v35;
  std::string *v36;
  std::string::size_type size;
  float v38;
  _DWORD *v39;
  std::string *v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  uint64_t i;
  uint64_t v45;
  int v46;
  uint64_t (**v48)(void **);
  uint64_t v49;
  float v50;
  std::string v51;
  uint64_t v52;
  _DWORD *v53;
  unint64_t v54;
  void *__p[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _QWORD v72[4];
  __int128 v73;

  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v48);
  quasar::ShortestPathFst(a1, &v48, a4, a5);
  v10 = (_DWORD *)v49;
  if (*(_DWORD *)(v49 + 88) == -1)
  {
    v45 = 0;
    v48 = (uint64_t (**)(void **))&unk_1E5D256C0;
LABEL_63:
    v46 = v10[14] - 1;
    v10[14] = v46;
    if (!v46)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    return v45;
  }
  v73 = 0u;
  memset(v72, 0, sizeof(v72));
  LODWORD(v52) = v48[3]((void **)&v48);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v56 = 0;
  LODWORD(v51.__r_.__value_.__l.__data_) = 0;
  std::deque<quasar::SearchState<std::string>>::emplace_back<int,std::string,int>(v72, &v52, (__int128 *)__p, (int *)&v51);
  if (SBYTE7(v56) < 0)
    operator delete(__p[0]);
  v11 = *((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1))
  {
    while (v11 < 0xF4241)
    {
      v12 = v11 + v73 - 1;
      v13 = *(_QWORD *)(v72[1] + 8 * (v12 / 0x66));
      v14 = v12 % 0x66;
      v15 = *(int *)(v13 + 40 * (v12 % 0x66));
      LODWORD(__p[0]) = ((float (*)(uint64_t (***)(void **), uint64_t))v48[4])(&v48, v15);
      LODWORD(v52) = 2139095040;
      if (*(float *)__p != INFINITY)
      {
        v16 = *(float *)(v13 + 40 * v14 + 32);
        v17 = ((float (*)(uint64_t (***)(void **), uint64_t))v48[4])(&v48, v15);
        v18 = (__int128 *)(v13 + 40 * v14 + 8);
        *(float *)__p = v16 + v17;
        v19 = a2[1];
        if (v19 >= a2[2])
        {
          v20 = std::vector<std::pair<std::string,float>>::__emplace_back_slow_path<std::string const&,float>(a2, v18, __p);
        }
        else
        {
          std::vector<std::pair<std::string,float>>::__construct_one_at_end[abi:ne180100]<std::string const&,float>((uint64_t)a2, v18, (float *)__p);
          v20 = v19 + 32;
        }
        a2[1] = v20;
      }
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 64) + 8 * v15) + 24);
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 64) + 8 * v15) + 32) - v21;
      if (v22)
      {
        v23 = v22 >> 4;
        v24 = v13 + 40 * v14;
        v25 = (__int128 *)(v24 + 8);
        v26 = (float *)(v24 + 32);
        if (v23 <= 1)
          v27 = 1;
        else
          v27 = v23;
        v28 = (float *)(v21 + 12);
        while (1)
        {
          memset(&v51, 0, sizeof(v51));
          v29 = *(_QWORD *)(v28 - 3);
          v30 = HIDWORD(v29);
          if (!HIDWORD(v29))
            goto LABEL_23;
          if (a3 != 2)
            break;
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v56 = 0;
          v31 = operator new(4uLL);
          *v31 = v30;
          __p[1] = v31 + 1;
          *(_QWORD *)&v56 = v31 + 1;
          __p[0] = v31;
          v32 = fst::LabelsToUTF8String<int>((uint64_t *)__p, (uint64_t)&v51);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if ((v32 & 1) != 0)
            goto LABEL_23;
          if (quasar::gLogLevel >= 1)
          {
            v70 = 0u;
            v71 = 0u;
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v60 = 0u;
            v61 = 0u;
            v59 = 0u;
            v57 = 0u;
            v58 = 0u;
            *(_OWORD *)__p = 0u;
            v56 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LabelsToUTF8String: Bad code point: ", 36);
            std::ostream::operator<<();
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
          }
          v43 = 0;
LABEL_46:
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v51.__r_.__value_.__l.__data_);
          if ((v43 & 1) == 0)
          {
            __p[0] = &v52;
            std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_61;
          }
          v28 += 4;
          if (!--v27)
            goto LABEL_54;
        }
        if (a3 == 1)
          std::string::operator=(&v51, v29 << 24 >> 56);
LABEL_23:
        if (*((char *)v25 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
        }
        else
        {
          v33 = *v25;
          *(_QWORD *)&v56 = *((_QWORD *)v25 + 2);
          *(_OWORD *)__p = v33;
        }
        v34 = (void *)BYTE7(v56);
        if ((SBYTE7(v56) & 0x80u) == 0)
          v35 = __p;
        else
          v35 = (void **)__p[0];
        if (SBYTE7(v56) < 0)
          v34 = __p[1];
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &v51;
        else
          v36 = (std::string *)v51.__r_.__value_.__r.__words[0];
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
        else
          size = v51.__r_.__value_.__l.__size_;
        std::string::__insert_with_size<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((std::string *)__p, (uint64_t)v34 + (_QWORD)v35, (char *)v36, (char *)v36 + size, size);
        v38 = *v26 + *(v28 - 1);
        v50 = v38;
        v39 = v53;
        if ((unint64_t)v53 >= v54)
        {
          v42 = std::vector<quasar::SearchState<std::string>>::__emplace_back_slow_path<int const&,std::string&,float>(&v52, v28, (__int128 *)__p, (int *)&v50);
        }
        else
        {
          *v53 = *(_DWORD *)v28;
          v40 = (std::string *)(v39 + 2);
          if (SBYTE7(v56) < 0)
          {
            std::string::__init_copy_ctor_external(v40, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            v41 = *(_OWORD *)__p;
            *((_QWORD *)v39 + 3) = v56;
            *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
          }
          *((float *)v39 + 8) = v38;
          v42 = (uint64_t)(v39 + 10);
        }
        v53 = (_DWORD *)v42;
        if (SBYTE7(v56) < 0)
          operator delete(__p[0]);
        v43 = 1;
        goto LABEL_46;
      }
LABEL_54:
      std::deque<quasar::SearchState<std::string>>::pop_back(v72);
      for (i = (uint64_t)v53;
            i != v52;
            std::deque<quasar::SearchState<std::string>>::emplace_back<quasar::SearchState<std::string>>(v72, i))
      {
        i -= 40;
      }
      __p[0] = &v52;
      std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v11 = *((_QWORD *)&v73 + 1);
      if (!*((_QWORD *)&v73 + 1))
        goto LABEL_58;
    }
    if (quasar::gLogLevel >= 1)
    {
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v59 = 0u;
      v57 = 0u;
      v58 = 0u;
      *(_OWORD *)__p = 0u;
      v56 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Too many states on the stack. There may be a cycle.", 51);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
LABEL_61:
    v45 = 0;
  }
  else
  {
LABEL_58:
    v45 = 1;
  }
  std::deque<quasar::SearchState<std::string>>::~deque[abi:ne180100](v72);
  v10 = (_DWORD *)v49;
  v48 = (uint64_t (**)(void **))&unk_1E5D256C0;
  if (v49)
    goto LABEL_63;
  return v45;
}

void sub_1ADED10C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  int v29;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  std::deque<quasar::SearchState<std::string>>::~deque[abi:ne180100]((_QWORD *)(v27 - 160));
  if (a11)
  {
    v29 = a11[14] - 1;
    a11[14] = v29;
    if (!v29)
      (*(void (**)(_DWORD *))(*(_QWORD *)a11 + 8))(a11);
  }
  _Unwind_Resume(a1);
}

void quasar::ShortestPathFst(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  char v6;
  uint64_t v7;
  int v8;

  if (a3)
  {
    v6 = 0;
  }
  else
  {
    a3 = 1;
    v6 = 1;
    a4 = 0;
  }
  fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, (uint64_t)a2, a3, 0, v6, -1, a4, INFINITY);
  v8 = 2;
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a2, &v8);
  v7 = (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 120))(a2);
  (*(void (**)(void *, uint64_t))(*(_QWORD *)a2 + 280))(a2, v7);
  fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2, 1, -1, INFINITY, 0.00097656);
}

uint64_t quasar::FstToSymLabels(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  _DWORD *v8;
  uint64_t v9;
  int v10;
  void *v12;
  _DWORD *v13;

  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v12);
  quasar::ShortestPathFst(a1, &v12, a3, a4);
  v8 = v13;
  if (v13[22] == -1)
  {
    v9 = 0;
    v12 = &unk_1E5D256C0;
  }
  else
  {
    v9 = quasar::VisitState<std::vector<int>>(&v12, a2);
    v8 = v13;
    v12 = &unk_1E5D256C0;
    if (!v13)
      return v9;
  }
  v10 = v8[14] - 1;
  v8[14] = v10;
  if (!v10)
    (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  return v9;
}

void sub_1ADED135C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
    fst::NbestAsFsts<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a10);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::VisitState<std::vector<int>>(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void **v18;
  uint64_t *v19;
  float *v20;
  uint64_t v21;
  float *v22;
  float v23;
  float *v24;
  void *v25;
  char *i;
  uint64_t v27;
  float v29;
  std::vector<int> __src;
  void *v31;
  char *v32;
  uint64_t v33;
  void *__p[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[4];
  __int128 v52;

  v52 = 0u;
  memset(v51, 0, sizeof(v51));
  LODWORD(v31) = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v35 = 0;
  LODWORD(__src.__begin_) = 0;
  std::deque<quasar::SearchState<std::vector<int>>>::emplace_back<int,std::vector<int>,int>(v51, &v31, (uint64_t)__p, (int *)&__src);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v4 = *((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    while (v4 < 0xF4241)
    {
      v5 = v4 + v52 - 1;
      v6 = *(_QWORD *)(v51[1] + 8 * (v5 / 0x66));
      v7 = v5 % 0x66;
      v8 = *(int *)(v6 + 40 * (v5 % 0x66));
      LODWORD(__p[0]) = (*(float (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v8);
      LODWORD(v31) = 2139095040;
      if (*(float *)__p != INFINITY)
      {
        v9 = *(float *)(v6 + 40 * v7 + 32);
        v10 = (*(float (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v8);
        v11 = v6 + 40 * v7 + 8;
        *(float *)__p = v9 + v10;
        v12 = a2[1];
        if (v12 >= a2[2])
        {
          v13 = std::vector<std::pair<std::vector<int>,float>>::__emplace_back_slow_path<std::vector<int> const&,float>(a2, v11, __p);
        }
        else
        {
          std::vector<std::pair<std::vector<int>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&,float>((uint64_t)a2, v11, (float *)__p);
          v13 = v12 + 32;
        }
        a2[1] = v13;
      }
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v35 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v8) + 24);
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v8) + 32) - v14;
      if (v15)
      {
        v16 = v15 >> 4;
        v17 = v6 + 40 * v7;
        v18 = (const void **)(v17 + 8);
        v19 = (uint64_t *)(v17 + 16);
        v20 = (float *)(v17 + 32);
        if (v16 <= 1)
          v21 = 1;
        else
          v21 = v16;
        v22 = (float *)(v14 + 12);
        do
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          if (*((_DWORD *)v22 - 2))
          {
            *(float *)&__src.__begin_ = *(v22 - 2);
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v31, (char *)&__src, (uint64_t)&__src.__begin_ + 4, 1uLL);
          }
          memset(&__src, 0, sizeof(__src));
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__src, *v18, *v19, (*v19 - (uint64_t)*v18) >> 2);
          std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__src, (uint64_t)__src.__end_, (char *)v31, v32, (v32 - (_BYTE *)v31) >> 2);
          v23 = *v20 + *(v22 - 1);
          v29 = v23;
          v24 = (float *)__p[1];
          if (__p[1] >= (void *)v35)
          {
            v25 = (void *)std::vector<quasar::SearchState<std::vector<int>>>::__emplace_back_slow_path<int const&,std::vector<int>&,float>((uint64_t *)__p, v22, (uint64_t)&__src, (int *)&v29);
          }
          else
          {
            *(float *)__p[1] = *v22;
            *((_QWORD *)v24 + 2) = 0;
            *((_QWORD *)v24 + 3) = 0;
            *((_QWORD *)v24 + 1) = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v24 + 1, __src.__begin_, (uint64_t)__src.__end_, __src.__end_ - __src.__begin_);
            v24[8] = v23;
            v25 = v24 + 10;
          }
          __p[1] = v25;
          if (__src.__begin_)
          {
            __src.__end_ = __src.__begin_;
            operator delete(__src.__begin_);
          }
          if (v31)
          {
            v32 = (char *)v31;
            operator delete(v31);
          }
          v22 += 4;
          --v21;
        }
        while (v21);
      }
      std::deque<quasar::SearchState<std::vector<int>>>::pop_back(v51);
      for (i = (char *)__p[1];
            i != __p[0];
            std::deque<quasar::SearchState<std::vector<int>>>::emplace_back<quasar::SearchState<std::vector<int>>>(v51, (uint64_t)i))
      {
        i -= 40;
      }
      v31 = __p;
      std::vector<quasar::SearchState<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      v4 = *((_QWORD *)&v52 + 1);
      if (!*((_QWORD *)&v52 + 1))
        goto LABEL_29;
    }
    if (quasar::gLogLevel >= 1)
    {
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Too many states on the stack. There may be a cycle.", 51);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    v27 = 0;
  }
  else
  {
LABEL_29:
    v27 = 1;
  }
  std::deque<quasar::SearchState<std::vector<int>>>::~deque[abi:ne180100](v51);
  return v27;
}

void sub_1ADED1714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  std::deque<quasar::SearchState<std::vector<int>>>::~deque[abi:ne180100]((_QWORD *)(v18 - 160));
  _Unwind_Resume(a1);
}

uint64_t quasar::FstHasAnyOutput(uint64_t a1)
{
  _DWORD *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _DWORD *v11;
  void **v12;

  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v10);
  quasar::ShortestPathFst(a1, &v10, 0, 0);
  v2 = v11;
  if (v11[22] == -1)
  {
    v4 = 0;
    v10 = &unk_1E5D256C0;
LABEL_8:
    v5 = v2[14] - 1;
    v2[14] = v5;
    if (!v5)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    return v4;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v3 = quasar::VisitState<std::vector<int>>(&v10, &v7);
  if (v8 == v7)
    v4 = 0;
  else
    v4 = v3;
  v12 = (void **)&v7;
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  v2 = v11;
  v10 = &unk_1E5D256C0;
  if (v11)
    goto LABEL_8;
  return v4;
}

void sub_1ADED1890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  uint64_t v13;
  uint64_t v14;
  int v16;

  *(_QWORD *)(v14 - 24) = v13;
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 24));
  if (a13)
  {
    v16 = a13[14] - 1;
    a13[14] = v16;
    if (!v16)
      (*(void (**)(_DWORD *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<quasar::SearchState<std::string>>::emplace_back<int,std::string,int>(_QWORD *a1, _DWORD *a2, __int128 *a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  int v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v8 = a1[2];
  v9 = a1[1];
  v10 = 102 * ((v8 - v9) >> 3) - 1;
  if (v8 == v9)
    v10 = 0;
  v11 = a1[5] + a1[4];
  if (v10 == v11)
  {
    std::deque<quasar::SearchState<std::string>>::__add_back_capacity(a1);
    v9 = a1[1];
    v11 = a1[5] + a1[4];
  }
  v12 = *(_QWORD *)(v9 + 8 * (v11 / 0x66));
  v13 = v11 % 0x66;
  v14 = (_DWORD *)(v12 + 40 * (v11 % 0x66));
  v15 = *a4;
  *v14 = *a2;
  v16 = (std::string *)(v14 + 2);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v17 = *a3;
    v16->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  *(float *)(v12 + 40 * v13 + 32) = (float)v15;
  v18 = a1[4];
  v19 = a1[5] + 1;
  a1[5] = v19;
  v20 = v18 + v19;
  v21 = a1[1];
  v22 = (_QWORD *)(v21 + 8 * (v20 / 0x66));
  v23 = *v22 + 40 * (v20 % 0x66);
  if (a1[2] == v21)
    v23 = 0;
  if (v23 == *v22)
    v23 = *(v22 - 1) + 4080;
  return v23 - 40;
}

void std::deque<quasar::SearchState<std::string>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADED1CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float std::vector<std::pair<std::string,float>>::__construct_one_at_end[abi:ne180100]<std::string const&,float>(uint64_t a1, __int128 *a2, float *a3)
{
  uint64_t v5;
  __int128 v6;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
  }
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1ADED1DAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,float>>::__emplace_back_slow_path<std::string const&,float>(uint64_t *a1, __int128 *a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[2];
  std::string *v18;
  char *v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v20 = a1 + 2;
  if (v11)
    v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[8 * v5];
  v17[0] = v12;
  v17[1] = v13;
  v18 = v13;
  v19 = (char *)&v12[8 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v13 = v18;
  }
  else
  {
    v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v12[8 * v5 + 6] = *a3;
  v18 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,float>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1ADED1EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::LabelsToUTF8String<int>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  uint64_t v12;
  char v13;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  v4 = *a1;
  if (a1[1] == *a1)
  {
LABEL_17:
    std::stringbuf::str();
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v12;
    v7 = 1;
  }
  else
  {
    v5 = 0;
    while (1)
    {
      v6 = *(_DWORD *)(v4 + 4 * v5);
      if ((v6 & 0x80000000) != 0)
        break;
      if (v6 > 0x7F)
      {
        if (v6 > 0x7FF)
        {
          if (HIWORD(v6))
          {
            if (v6 >> 21)
            {
              if (v6 >> 26)
              {
                LOBYTE(__p[0]) = (v6 >> 30) | 0xFC;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
                LOBYTE(__p[0]) = HIBYTE(v6) & 0x3F | 0x80;
              }
              else
              {
                LOBYTE(__p[0]) = HIBYTE(v6) | 0xF8;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
              LOBYTE(__p[0]) = (v6 >> 18) & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
              LOBYTE(__p[0]) = (v6 >> 12) & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
              LOBYTE(__p[0]) = (v6 >> 6) & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
              LOBYTE(__p[0]) = v6 & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
            }
            else
            {
              LOBYTE(__p[0]) = (v6 >> 18) | 0xF0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
              LOBYTE(__p[0]) = (v6 >> 12) & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
              LOBYTE(__p[0]) = (v6 >> 6) & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
              LOBYTE(__p[0]) = v6 & 0x3F | 0x80;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
            }
          }
          else
          {
            LOBYTE(__p[0]) = (v6 >> 12) | 0xE0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
            LOBYTE(__p[0]) = (v6 >> 6) & 0x3F | 0x80;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
            LOBYTE(__p[0]) = v6 & 0x3F | 0x80;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
          }
        }
        else
        {
          LOBYTE(__p[0]) = (v6 >> 6) | 0xC0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
          LOBYTE(__p[0]) = v6 & 0x3F | 0x80;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
        }
      }
      else
      {
        LOBYTE(__p[0]) = *(_DWORD *)(v4 + 4 * v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
      }
      ++v5;
      v4 = *a1;
      if (v5 >= (a1[1] - *a1) >> 2)
        goto LABEL_17;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LabelsToUTF8String: Invalid character found: ", 45);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    v7 = 0;
  }
  v14[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v16);
  return v7;
}

void sub_1ADED22A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t std::string::__insert_with_size<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  std::string *p_p;
  uint64_t v12;
  std::string __p;

  v6 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = a2 - (_QWORD)this;
    if (__n_add)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = this;
      goto LABEL_6;
    }
    return (uint64_t)v6 + v7;
  }
  v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  v7 = a2 - this->__r_.__value_.__r.__words[0];
  if (!__n_add)
  {
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  size = this->__r_.__value_.__l.__size_;
LABEL_6:
  if (v9 > (std::string *)a3 || (char *)&v9->__r_.__value_.__l.__data_ + size + 1 <= a3)
    return std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v7, a3, a4);
  std::string::__init_with_sentinel[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__p, a3, a4);
  v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = __p.__r_.__value_.__l.__size_;
  v12 = std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1ADED23EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::string::__init_with_sentinel[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  std::string::value_type *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_1ADED245C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_1ADED2478(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::SearchState<std::string>>::__emplace_back_slow_path<int const&,std::string&,float>(uint64_t *a1, _DWORD *a2, __int128 *a3, int *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  char *v15;
  int v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v21[2];
  char *v22;
  char *v23;
  uint64_t *v24;

  v5 = *a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x333333333333333)
    v13 = 0x666666666666666;
  else
    v13 = v7;
  v24 = a1 + 2;
  if (v13)
    v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v11, v13);
  else
    v14 = 0;
  v15 = (char *)&v14[10 * v6];
  v21[0] = v14;
  v21[1] = v15;
  v22 = v15;
  v23 = (char *)&v14[10 * v13];
  v16 = *a4;
  *(_DWORD *)v15 = *a2;
  v17 = (std::string *)(v15 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    v15 = v22;
  }
  else
  {
    v18 = *a3;
    *((_QWORD *)v15 + 3) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
  }
  v14[10 * v6 + 8] = v16;
  v22 = v15 + 40;
  std::vector<quasar::SearchState<std::string>>::__swap_out_circular_buffer(a1, v21);
  v19 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)v21);
  return v19;
}

void sub_1ADED25CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::SearchState<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SearchState<std::string>>,std::reverse_iterator<quasar::SearchState<std::string>*>,std::reverse_iterator<quasar::SearchState<std::string>*>,std::reverse_iterator<quasar::SearchState<std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SearchState<std::string>>,std::reverse_iterator<quasar::SearchState<std::string>*>,std::reverse_iterator<quasar::SearchState<std::string>*>,std::reverse_iterator<quasar::SearchState<std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      *(_DWORD *)(v8 - 40) = *(_DWORD *)(a3 + v7 - 40);
      v10 = *(_OWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_OWORD *)(v8 - 32) = v10;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 40;
    }
    while (a3 + v7 != a5);
    *((_QWORD *)&v16 + 1) = a7 + v7;
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SearchState<std::string>>,std::reverse_iterator<quasar::SearchState<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SearchState<std::string>>,std::reverse_iterator<quasar::SearchState<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PronChoice>,std::reverse_iterator<quasar::PronChoice*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::deque<quasar::SearchState<std::string>>::pop_back(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[5] - 1;
  v3 = v2 + a1[4];
  v4 = *(_QWORD *)(a1[1] + 8 * (v3 / 0x66));
  v5 = v3 % 0x66;
  if (*(char *)(v4 + 40 * v5 + 31) < 0)
  {
    operator delete(*(void **)(v4 + 40 * v5 + 8));
    v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return std::deque<quasar::SearchState<std::string>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<quasar::SearchState<std::string>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 102 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x66)
    a2 = 1;
  if (v5 < 0xCC)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::deque<quasar::SearchState<std::string>>::emplace_back<quasar::SearchState<std::string>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<quasar::SearchState<std::string>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  *(_DWORD *)v8 = *(_DWORD *)a2;
  v9 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v8 + 8) = v9;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(a2 + 32);
  v10 = a1[4];
  v11 = a1[5] + 1;
  a1[5] = v11;
  v12 = v10 + v11;
  v13 = a1[1];
  v14 = (_QWORD *)(v13 + 8 * (v12 / 0x66));
  v15 = *v14 + 40 * (v12 % 0x66);
  if (a1[2] == v13)
    v15 = 0;
  if (v15 == *v14)
    v15 = *(v14 - 1) + 4080;
  return v15 - 40;
}

uint64_t std::deque<quasar::SearchState<std::string>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x66];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 31) < 0)
        {
          operator delete(*(void **)(v8 + 8));
          v7 = (unint64_t)*v6;
        }
        v8 += 40;
        if (v8 - v7 == 4080)
        {
          v10 = (unint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 51;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_18;
    v13 = 102;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<quasar::SearchState<std::vector<int>>>::emplace_back<int,std::vector<int>,int>(_QWORD *a1, _DWORD *a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v8 = a1[2];
  v9 = a1[1];
  v10 = 102 * ((v8 - v9) >> 3) - 1;
  if (v8 == v9)
    v10 = 0;
  v11 = a1[5] + a1[4];
  if (v10 == v11)
  {
    std::deque<quasar::SearchState<std::vector<int>>>::__add_back_capacity(a1);
    v9 = a1[1];
    v11 = a1[5] + a1[4];
  }
  v12 = *(_QWORD *)(v9 + 8 * (v11 / 0x66)) + 40 * (v11 % 0x66);
  v13 = (float)*a4;
  *(_DWORD *)v12 = *a2;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 8) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v12 + 8), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(float *)(v12 + 32) = v13;
  v14 = a1[4];
  v15 = a1[5] + 1;
  a1[5] = v15;
  v16 = v14 + v15;
  v17 = a1[1];
  v18 = (_QWORD *)(v17 + 8 * (v16 / 0x66));
  v19 = *v18 + 40 * (v16 % 0x66);
  if (a1[2] == v17)
    v19 = 0;
  if (v19 == *v18)
    v19 = *(v18 - 1) + 4080;
  return v19 - 40;
}

void std::deque<quasar::SearchState<std::vector<int>>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADED2E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float std::vector<std::pair<std::vector<int>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&,float>(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v5, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1ADED2F34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::__emplace_back_slow_path<std::vector<int> const&,float>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v13, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1ADED3028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<quasar::SearchState<std::vector<int>>>::__emplace_back_slow_path<int const&,std::vector<int>&,float>(uint64_t *a1, _DWORD *a2, uint64_t a3, int *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD v19[2];
  char *v20;
  char *v21;
  uint64_t *v22;

  v5 = *a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x333333333333333)
    v13 = 0x666666666666666;
  else
    v13 = v7;
  v22 = a1 + 2;
  if (v13)
    v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v11, v13);
  else
    v14 = 0;
  v15 = (char *)&v14[10 * v6];
  v19[0] = v14;
  v19[1] = v15;
  v20 = v15;
  v21 = (char *)&v14[10 * v13];
  v16 = *a4;
  *(_DWORD *)v15 = *a2;
  *((_QWORD *)v15 + 2) = 0;
  *((_QWORD *)v15 + 3) = 0;
  *((_QWORD *)v15 + 1) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v15 + 1, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v14[10 * v6 + 8] = v16;
  v20 += 40;
  std::vector<quasar::SearchState<std::vector<int>>>::__swap_out_circular_buffer(a1, v19);
  v17 = a1[1];
  std::__split_buffer<quasar::SearchState<std::vector<int>>>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_1ADED32BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::SearchState<std::vector<int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::SearchState<std::vector<int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SearchState<std::vector<int>>>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SearchState<std::vector<int>>>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_DWORD *)(a3 - 40);
      a3 -= 40;
      *(_DWORD *)(v7 - 40) = v8;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 32);
      v7 = *((_QWORD *)&v14 + 1) - 40;
      *((_QWORD *)&v14 + 1) -= 40;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SearchState<std::vector<int>>>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SearchState<std::vector<int>>>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SearchState<std::vector<int>>>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SearchState<std::vector<int>>>,std::reverse_iterator<quasar::SearchState<std::vector<int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(_QWORD *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<quasar::SearchState<std::vector<int>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<quasar::SearchState<std::vector<int>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<quasar::SearchState<std::vector<int>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 40;
    v5 = *(void **)(v2 - 32);
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
}

uint64_t std::deque<quasar::SearchState<std::vector<int>>>::pop_back(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;

  v2 = a1[5] - 1;
  v3 = v2 + a1[4];
  v4 = *(_QWORD *)(a1[1] + 8 * (v3 / 0x66));
  v5 = v3 % 0x66;
  v6 = *(void **)(v4 + 40 * v5 + 8);
  if (v6)
  {
    *(_QWORD *)(v4 + 40 * v5 + 16) = v6;
    operator delete(v6);
    v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return std::deque<quasar::SearchState<std::string>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<quasar::SearchState<std::vector<int>>>::emplace_back<quasar::SearchState<std::vector<int>>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<quasar::SearchState<std::vector<int>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  *(_DWORD *)v8 = *(_DWORD *)a2;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(a2 + 32);
  v9 = a1[4];
  v10 = a1[5] + 1;
  a1[5] = v10;
  v11 = v9 + v10;
  v12 = a1[1];
  v13 = (_QWORD *)(v12 + 8 * (v11 / 0x66));
  v14 = *v13 + 40 * (v11 % 0x66);
  if (a1[2] == v12)
    v14 = 0;
  if (v14 == *v13)
    v14 = *(v13 - 1) + 4080;
  return v14 - 40;
}

void std::vector<quasar::SearchState<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::SearchState<std::vector<int>>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<quasar::SearchState<std::vector<int>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::deque<quasar::SearchState<std::vector<int>>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x66];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)(v8 + 8);
        if (v10)
        {
          *(_QWORD *)(v8 + 16) = v10;
          operator delete(v10);
          v7 = (unint64_t)*v6;
        }
        v8 += 40;
        if (v8 - v7 == 4080)
        {
          v11 = (unint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 51;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_18;
    v14 = 102;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t *kaldi::GetHmmAsFst(int **a1, uint64_t a2, kaldi::HmmTopology *a3, uint64_t a4, _QWORD *a5)
{
  int *v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  int v25;
  int v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  float TransitionLogProbIgnoringSelfLoops;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  int v66;
  uint64_t *v67;
  void *v68;
  uint64_t v69;
  unsigned __int8 v70;
  void *__p;
  char *v72;
  char *v73;
  std::vector<int> v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;

  if (*(_BYTE *)(a4 + 4))
  {
    v9 = *a1;
    v10 = (char *)a1[1] - (char *)*a1;
    if ((unint64_t)v10 >= 8)
    {
      v11 = (unint64_t)(v10 >> 2) >> 1;
      if (v11 <= 1)
        v11 = 1;
      v12 = &v9[(v10 >> 2) - 1];
      do
      {
        v13 = *v9;
        *v9++ = *v12;
        *v12-- = v13;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    v10 = (char *)a1[1] - (char *)*a1;
  }
  if ((**(unsigned int (***)(uint64_t))a2)(a2) != ((unint64_t)v10 >> 2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Context size mismatch, ilabel-info [from context FST is ", 56);
    v63 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)", context-dependency object expects ", 36);
    (**(void (***)(uint64_t))a2)(a2);
    std::ostream::operator<<();
    goto LABEL_85;
  }
  v14 = (*a1)[(*(int (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2)];
  if (!v14)
  {
    if (*(_BYTE *)(a4 + 4))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v75, "phone == 0.  Possibly you are trying to get a reversed FST with a non-central \"central position\" P (i.e. asymmetric context), but forgot to initialize the ContextFst object with P as N-1-P (or it could be a simpler problem)");
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v75, "phone == 0.  Some mismatch happened, or there is a code error.");
    }
LABEL_85:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v75);
  }
  v67 = (uint64_t *)kaldi::HmmTopology::TopologyForPhone(a3, v14);
  v15 = kaldi::HmmTopology::NumPdfClasses(a3, v14);
  std::vector<int>::vector(&v74, v15);
  begin = v74.__begin_;
  end = v74.__end_;
  v18 = v74.__end_ - v74.__begin_;
  if ((int)v18 >= 1)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      if (((*(uint64_t (**)(uint64_t, int **, uint64_t, int *))(*(_QWORD *)a2 + 16))(a2, a1, v20, &begin[v19]) & 1) == 0)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        if (a1[1] != *a1)
        {
          v55 = 0;
          do
          {
            v56 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(v75) = 32;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)&v75, 1);
            ++v55;
          }
          while (v55 < a1[1] - *a1);
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"GetHmmAsFst: context-dependency object could not produce ", 57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"an answer: pdf-class = ", 23);
        v58 = (_QWORD *)std::ostream::operator<<();
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" ctx-window = ", 14);
        std::stringbuf::str();
        if ((v70 & 0x80u) == 0)
          v60 = &v68;
        else
          v60 = v68;
        if ((v70 & 0x80u) == 0)
          v61 = v70;
        else
          v61 = v69;
        v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)".  This probably points to either a coding error in some graph-building process, a mismatch of topology with context-dependency object, the wrong FST being passed on a command-line, or something of  that general nature.", 219);
        if ((char)v70 < 0)
          operator delete(v68);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v75);
      }
      ++v20;
      begin = v74.__begin_;
      end = v74.__end_;
      ++v19;
    }
    while (v20 < (int)((unint64_t)((char *)v74.__end_ - (char *)v74.__begin_) >> 2));
    v18 = v74.__end_ - v74.__begin_;
  }
  LODWORD(v75) = v14;
  v77 = 0;
  v78 = 0;
  v76 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v76, begin, (uint64_t)end, v18);
  if (a5
    && (v21 = std::__hash_table<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::__unordered_map_hasher<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,kaldi::HmmCacheHash,std::equal_to<std::pair<int,std::vector<int>>>,true>,std::__unordered_map_equal<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::equal_to<std::pair<int,std::vector<int>>>,kaldi::HmmCacheHash,true>,std::allocator<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>>>::find<std::pair<int,std::vector<int>>>(a5, (uint64_t)&v75)) != 0)
  {
    v22 = (uint64_t *)v21[6];
  }
  else
  {
    v23 = (uint64_t *)operator new();
    v66 = v14;
    v64 = a5;
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v23);
    v24 = 0;
    __p = 0;
    v72 = 0;
    v73 = 0;
    do
    {
      v25 = (*(uint64_t (**)(uint64_t *))(*v23 + 200))(v23);
      v26 = v25;
      v27 = v72;
      if (v72 >= v73)
      {
        v29 = (char *)__p;
        v30 = (v72 - (_BYTE *)__p) >> 2;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v32 = v73 - (_BYTE *)__p;
        if ((v73 - (_BYTE *)__p) >> 1 > v31)
          v31 = v32 >> 1;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
          v33 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v73, v33);
          v29 = (char *)__p;
          v27 = v72;
        }
        else
        {
          v34 = 0;
        }
        v35 = &v34[4 * v30];
        *(_DWORD *)v35 = v26;
        v28 = v35 + 4;
        while (v27 != v29)
        {
          v36 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *((_DWORD *)v35 - 1) = v36;
          v35 -= 4;
        }
        __p = v35;
        v72 = v28;
        v73 = &v34[4 * v33];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_DWORD *)v72 = v25;
        v28 = v27 + 4;
      }
      v72 = v28;
      ++v24;
    }
    while (v24 < (v67[1] - *v67) >> 5);
    (*(void (**)(uint64_t *, _QWORD))(*v23 + 176))(v23, *(unsigned int *)__p);
    (*(void (**)(uint64_t *, _QWORD, float))(*v23 + 184))(v23, *((unsigned int *)v72 - 1), 0.0);
    v37 = *v67;
    v38 = v67[1];
    if ((int)((unint64_t)(v38 - *v67) >> 5) >= 1)
    {
      v39 = 0;
      do
      {
        v40 = *(int *)(v37 + 32 * v39);
        if ((_DWORD)v40 == -1)
        {
          v41 = -1;
          v42 = -1;
        }
        else
        {
          v41 = v74.__begin_[v40];
          v42 = v74.__begin_[*(int *)(v37 + 32 * v39 + 4)];
        }
        v43 = *(_QWORD *)(v37 + 32 * v39 + 8);
        if ((int)((unint64_t)(*(_QWORD *)(v37 + 32 * v39 + 16) - v43) >> 3) >= 1)
        {
          v44 = 0;
          v45 = 0;
          do
          {
            v46 = *(unsigned int *)(v43 + v44);
            if (v39 != v46)
            {
              if ((_DWORD)v40 == -1)
              {
                TransitionLogProbIgnoringSelfLoops = logf(*(float *)(v43 + v44 + 4));
                v48 = 0;
              }
              else
              {
                v47 = kaldi::TransitionModel::TupleToTransitionState(a3, v66, v39, v41, v42);
                v48 = kaldi::TransitionModel::PairToTransitionId(a3, v47, v45);
                TransitionLogProbIgnoringSelfLoops = kaldi::TransitionModel::GetTransitionLogProbIgnoringSelfLoops(a3, v48);
              }
              v50 = *((unsigned int *)__p + v39);
              v51 = *((_DWORD *)__p + (int)v46);
              LODWORD(v68) = v48;
              HIDWORD(v68) = v48;
              *(float *)&v69 = -TransitionLogProbIgnoringSelfLoops;
              HIDWORD(v69) = v51;
              (*(void (**)(uint64_t *, uint64_t, void **))(*v23 + 208))(v23, v50, &v68);
              v37 = *v67;
            }
            ++v45;
            v52 = v37 + 32 * v39;
            v43 = *(_QWORD *)(v52 + 8);
            v44 += 8;
          }
          while (v45 < (int)((unint64_t)(*(_QWORD *)(v52 + 16) - v43) >> 3));
          v38 = v67[1];
        }
        ++v39;
      }
      while (v39 < (int)((unint64_t)(v38 - v37) >> 5));
    }
    if (*(_BYTE *)(a4 + 4))
    {
      v53 = (uint64_t)v64;
      v22 = (uint64_t *)operator new();
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v22);
      fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)v23, v22, 1);
      fst::RemoveEpsLocal<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)v22);
      if (*(_BYTE *)(a4 + 5))
        fst::PushInLog<(fst::ReweightType)0>((uint64_t)v22, 1u, *(float *)(a4 + 8));
      (*(void (**)(uint64_t *))(*v23 + 8))(v23);
    }
    else
    {
      fst::RemoveEpsLocal<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)v23);
      v22 = v23;
      v53 = (uint64_t)v64;
    }
    if (*(float *)a4 != 1.0)
      fst::ApplyProbabilityScale<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)v22, *(float *)a4);
    if (v53)
    {
      v68 = &v75;
      std::__hash_table<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::__unordered_map_hasher<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,kaldi::HmmCacheHash,std::equal_to<std::pair<int,std::vector<int>>>,true>,std::__unordered_map_equal<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::equal_to<std::pair<int,std::vector<int>>>,kaldi::HmmCacheHash,true>,std::allocator<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>>>::__emplace_unique_key_args<std::pair<int,std::vector<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<int,std::vector<int>> const&>,std::tuple<>>(v53, (uint64_t)&v75, (uint64_t)&std::piecewise_construct, (_DWORD **)&v68)[6] = v22;
    }
    if (__p)
    {
      v72 = (char *)__p;
      operator delete(__p);
    }
  }
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  if (v74.__begin_)
  {
    v74.__end_ = v74.__begin_;
    operator delete(v74.__begin_);
  }
  return v22;
}

void sub_1ADED3FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::ostringstream::~ostringstream((uint64_t)va);
  JUMPOUT(0x1ADED4008);
}

void sub_1ADED3FCC()
{
  JUMPOUT(0x1ADED4008);
}

void sub_1ADED3FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55)
{
  if (__p)
    operator delete(__p);
  if (a54)
    operator delete(a54);
  if (a50)
    operator delete(a50);
  _Unwind_Resume(exception_object);
}

_DWORD *fst::PushInLog<(fst::ReweightType)0>(uint64_t a1, unsigned int a2, float a3)
{
  _DWORD *v6;
  _DWORD *result;
  int v8;
  int v9;
  _DWORD *v10;
  uint64_t v11[2];
  void *v12;
  _DWORD *v13;
  _QWORD v14[2];

  v14[0] = &unk_1E5D1AE10;
  v14[1] = a1;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v12);
  v11[0] = (uint64_t)&unk_1E5D21B88;
  v11[1] = (uint64_t)&v12;
  fst::Push<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::ReweightType)0>((uint64_t)v14, v11, a2, a3);
  v6 = v13;
  ++v13[14];
  result = *(_DWORD **)(a1 + 8);
  if (result && (v8 = result[14] - 1, (result[14] = v8) == 0))
  {
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    v10 = v13;
    *(_QWORD *)(a1 + 8) = v6;
    v12 = &unk_1E5D256C0;
    v6 = v10;
    if (!v10)
      return result;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v6;
    v12 = &unk_1E5D256C0;
  }
  v9 = v6[14] - 1;
  v6[14] = v9;
  if (!v9)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void sub_1ADED4134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>();
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::GetHmmAsFstSimple(_QWORD *a1, void (***a2)(unsigned int (***)(_QWORD)), kaldi::HmmTopology *a3, float a4)
{
  unsigned int (***v6)(_QWORD);
  uint64_t v8;
  int v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  float v37;
  uint64_t v38;
  int v39;
  _QWORD *v41;
  _DWORD v44[4];
  int v45;
  int v46;
  void *__p;
  char *v48;
  char *v49;

  v6 = (unsigned int (***)(_QWORD))a2;
  v8 = (a1[1] - *a1) >> 2;
  if (((unsigned int (*)(_QWORD))**a2)(a2) != (_DWORD)v8)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Context size mismatch, ilabel-info [from context FST is ", 56);
    v41 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", context-dependency object expects ", 36);
    (**a2)((unsigned int (***)(_QWORD))a2);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  v9 = *(_DWORD *)(*a1 + 4 * (int)(*v6)[1](v6));
  v10 = (uint64_t *)kaldi::HmmTopology::TopologyForPhone(a3, v9);
  v11 = (_QWORD *)operator new();
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v11);
  v48 = 0;
  v49 = 0;
  __p = 0;
  if (v10[1] == *v10)
  {
    v25 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 200))(v11);
      v14 = v13;
      v15 = v48;
      if (v48 >= v49)
      {
        v17 = (char *)__p;
        v18 = (v48 - (_BYTE *)__p) >> 2;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v20 = v49 - (_BYTE *)__p;
        if ((v49 - (_BYTE *)__p) >> 1 > v19)
          v19 = v20 >> 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v49, v21);
          v17 = (char *)__p;
          v15 = v48;
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[4 * v18];
        *(_DWORD *)v23 = v14;
        v16 = v23 + 4;
        while (v15 != v17)
        {
          v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        __p = v23;
        v48 = v16;
        v49 = &v22[4 * v21];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_DWORD *)v48 = v13;
        v16 = v15 + 4;
      }
      v48 = v16;
      ++v12;
    }
    while (v12 < (v10[1] - *v10) >> 5);
    v25 = (unsigned int *)__p;
  }
  (*(void (**)(_QWORD *, _QWORD))(*v11 + 176))(v11, *v25);
  (*(void (**)(_QWORD *, _QWORD, float))(*v11 + 184))(v11, *((unsigned int *)v48 - 1), 0.0);
  v26 = *v10;
  if ((int)((unint64_t)(v10[1] - *v10) >> 5) >= 1)
  {
    v27 = 0;
    do
    {
      v28 = (unsigned int *)(v26 + 32 * v27);
      v29 = *v28;
      v46 = 0;
      v30 = v28[1];
      v45 = 0;
      if ((_DWORD)v29 == -1)
      {
        v45 = -1;
        v46 = -1;
      }
      else
      {
        ((void (*)(unsigned int (***)(_QWORD), _QWORD *, uint64_t, int *))(*v6)[2])(v6, a1, v29, &v46);
        ((void (*)(unsigned int (***)(_QWORD), _QWORD *, uint64_t, int *))(*v6)[2])(v6, a1, v30, &v45);
        v26 = *v10;
      }
      v31 = *(_QWORD *)(v26 + 32 * v27 + 8);
      if ((int)((unint64_t)(*(_QWORD *)(v26 + 32 * v27 + 16) - v31) >> 3) >= 1)
      {
        v32 = 0;
        v33 = 0;
        do
        {
          v34 = *(int *)(v31 + v32);
          if ((_DWORD)v29 == -1)
          {
            v37 = logf(*(float *)(v31 + v32 + 4));
            v36 = 0;
          }
          else
          {
            v35 = kaldi::TransitionModel::TupleToTransitionState(a3, v9, v27, v46, v45);
            v36 = kaldi::TransitionModel::PairToTransitionId(a3, v35, v33);
            v37 = kaldi::TransitionModel::GetTransitionLogProb(a3, v36) * a4;
          }
          v38 = *((unsigned int *)__p + v27);
          v39 = *((_DWORD *)__p + v34);
          v44[0] = v36;
          v44[1] = v36;
          *(float *)&v44[2] = -v37;
          v44[3] = v39;
          (*(void (**)(_QWORD *, uint64_t, _DWORD *))(*v11 + 208))(v11, v38, v44);
          ++v33;
          v26 = *v10;
          v31 = *(_QWORD *)(*v10 + 32 * v27 + 8);
          v32 += 8;
        }
        while (v33 < (int)((unint64_t)(*(_QWORD *)(*v10 + 32 * v27 + 16) - v31) >> 3));
        v6 = (unsigned int (***)(_QWORD))a2;
      }
      ++v27;
    }
    while (v27 < (int)((unint64_t)(v10[1] - v26) >> 5));
  }
  if (__p)
  {
    v48 = (char *)__p;
    operator delete(__p);
  }
  return v11;
}

void sub_1ADED454C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::GetHTransducer(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, int a6)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::vector<int>::size_type v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *HmmAsFst;
  int v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  char *v42;
  int v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v51;
  void *__p;
  void *v53;
  uint64_t v54;
  std::vector<int>::value_type __x[2];
  uint64_t v56;
  uint64_t v57;
  std::vector<int> v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  char *v63;
  _OWORD v64[2];
  int v65;

  v12 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  memset(v64, 0, sizeof(v64));
  v65 = 1065353216;
  v59 = 0;
  std::vector<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::allocator<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>::vector(&v62, v12, &v59);
  v59 = 0;
  v60 = 0;
  v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v59, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  a5[1] = *a5;
  v14 = *(_QWORD *)(a3 + 144);
  v13 = *(_QWORD *)(a3 + 152);
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  memset(&v58, 0, sizeof(v58));
  if ((a6 & 0x80000000) == 0)
  {
    __x[0] = 0;
    std::vector<int>::resize(&v58, v16, __x);
    v15 = *a1;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  }
  if ((int)v16 >= 2)
  {
    v17 = (unint64_t)(v13 - v14) >> 2;
    v51 = (uint64_t)(a5 + 2);
    v18 = 1;
    do
    {
      v19 = v15 + 24 * v18;
      if (*(_QWORD *)(v19 + 8) - *(_QWORD *)v19 == 4 && **(int **)v19 <= 0)
      {
        v26 = a5[1];
        v25 = (unint64_t)a5[2];
        if ((unint64_t)v26 >= v25)
        {
          v34 = *a5;
          v35 = (v26 - *a5) >> 2;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v37 = v25 - (_QWORD)v34;
          if (v37 >> 1 > v36)
            v36 = v37 >> 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v51, v38);
            v34 = *a5;
            v26 = a5[1];
          }
          else
          {
            v39 = 0;
          }
          v42 = &v39[4 * v35];
          *(_DWORD *)v42 = v17;
          v27 = v42 + 4;
          while (v26 != v34)
          {
            v43 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v42 - 1) = v43;
            v42 -= 4;
          }
          *a5 = v42;
          a5[1] = v27;
          a5[2] = &v39[4 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_DWORD *)v26 = v17;
          v27 = v26 + 4;
        }
        a5[1] = v27;
        v44 = (_QWORD *)operator new();
        fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v44);
        (*(void (**)(_QWORD *))(*v44 + 200))(v44);
        (*(void (**)(_QWORD *))(*v44 + 200))(v44);
        (*(void (**)(_QWORD *, _QWORD))(*v44 + 176))(v44, 0);
        (*(void (**)(_QWORD *, uint64_t, float))(*v44 + 184))(v44, 1, 0.0);
        __x[0] = v17;
        __x[1] = v17;
        v56 = 0x100000000;
        (*(void (**)(_QWORD *, _QWORD, std::vector<int>::value_type *))(*v44 + 208))(v44, 0, __x);
        LODWORD(v17) = v17 + 1;
        *((_QWORD *)v62 + v18) = v44;
      }
      else
      {
        *(_QWORD *)__x = 0;
        v56 = 0;
        v57 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, *(const void **)v19, *(_QWORD *)(v19 + 8), (uint64_t)(*(_QWORD *)(v19 + 8) - *(_QWORD *)v19) >> 2);
        __p = 0;
        v53 = 0;
        v54 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)__x, v56, (v56 - *(_QWORD *)__x) >> 2);
        HmmAsFst = kaldi::GetHmmAsFst((int **)&__p, a2, (kaldi::HmmTopology *)a3, a4, v64);
        if (__p)
        {
          v53 = __p;
          operator delete(__p);
        }
        if ((a6 & 0x80000000) == 0)
        {
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
          if (*(_DWORD *)(*(_QWORD *)__x + 4 * v21) >= a6)
          {
            v58.__begin_[v18] = v17;
            v23 = a5[1];
            v22 = (unint64_t)a5[2];
            if ((unint64_t)v23 >= v22)
            {
              v28 = *a5;
              v29 = (v23 - *a5) >> 2;
              v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v31 = v22 - (_QWORD)v28;
              if (v31 >> 1 > v30)
                v30 = v31 >> 1;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                v32 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v32 = v30;
              if (v32)
              {
                v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v51, v32);
                v28 = *a5;
                v23 = a5[1];
              }
              else
              {
                v33 = 0;
              }
              v40 = &v33[4 * v29];
              *(_DWORD *)v40 = v17;
              v24 = v40 + 4;
              while (v23 != v28)
              {
                v41 = *((_DWORD *)v23 - 1);
                v23 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }
              *a5 = v40;
              a5[1] = v24;
              a5[2] = &v33[4 * v32];
              if (v28)
                operator delete(v28);
            }
            else
            {
              *(_DWORD *)v23 = v17;
              v24 = v23 + 4;
            }
            a5[1] = v24;
            LODWORD(v17) = v17 + 1;
          }
        }
        *((_QWORD *)v62 + v18) = HmmAsFst;
        if (*(_QWORD *)__x)
        {
          v56 = *(_QWORD *)__x;
          operator delete(*(void **)__x);
        }
      }
      ++v18;
      v15 = *a1;
    }
    while (v18 < (int)(-1431655765 * ((unint64_t)(a1[1] - *a1) >> 3)));
  }
  v45 = fst::MakeLoopFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(&v62, &v58);
  v46 = 126 - 2 * __clz((v63 - (_BYTE *)v62) >> 3);
  if (v63 == v62)
    v47 = 0;
  else
    v47 = v46;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const**,false>((uint64_t)v62, (unint64_t *)v63, (uint64_t)__x, v47, 1);
  v48 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::LatticeStringRepository<int>::Entry const**>,std::__wrap_iter<fst::LatticeStringRepository<int>::Entry const**>,std::__equal_to &>((uint64_t *)v62, (uint64_t *)v63);
  v49 = (uint64_t *)v62;
  if (v63 != (char *)v48)
    v63 = (char *)v48;
  while (v49 != v48)
  {
    if (*v49)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)*v49 + 8))(*v49);
      *v49 = 0;
    }
    ++v49;
  }
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v62)
  {
    v63 = (char *)v62;
    operator delete(v62);
  }
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)v64);
  return v45;
}

void sub_1ADED4AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&a25);
  _Unwind_Resume(a1);
}

_QWORD *fst::MakeLoopFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t i;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _BOOL4 v19;
  BOOL v20;
  unsigned int v21;
  _DWORD *v22;
  unsigned int v23;
  int v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v30;
  int v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  std::vector<int> v38;
  uint64_t v39;
  _OWORD v40[2];
  int v41;
  uint64_t *v42;

  v3 = (_QWORD *)operator new();
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v3);
  v4 = (*(uint64_t (**)(_QWORD *))(*v3 + 200))(v3);
  (*(void (**)(_QWORD *, uint64_t))(*v3 + 176))(v3, v4);
  v32 = v4;
  (*(void (**)(_QWORD *, uint64_t, float))(*v3 + 184))(v3, v4, 0.0);
  memset(v40, 0, sizeof(v40));
  v41 = 1065353216;
  v5 = *a1;
  if ((int)((a1[1] - *a1) >> 3) >= 1)
  {
    v6 = 0;
    v30 = a1;
    while (1)
    {
      v39 = 0;
      v7 = *(_QWORD *)(v5 + 8 * v6);
      v39 = v7;
      if (!v7)
        goto LABEL_54;
      if (v6 >= (uint64_t)(a2[1] - *a2) >> 2 || !*(_DWORD *)(*a2 + 4 * v6))
      {
        v8 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(v40, &v39);
        if (v8)
        {
          v34 = *(_OWORD *)(v8 + 3);
          DWORD1(v34) = v6;
          (*(void (**)(_QWORD *, _QWORD, __int128 *))(*v3 + 208))(v3, 0, &v34);
          goto LABEL_54;
        }
        v7 = v39;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, 0x10000, 1);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 160))(v39);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
      if ((_DWORD)v10 != -1)
        break;
LABEL_54:
      ++v6;
      v5 = *a1;
      if ((uint64_t)v6 >= (int)((a1[1] - *a1) >> 3))
        goto LABEL_55;
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39 + 64))(v39, 0x2000000000, 1) == 0x2000000000
      && (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 40))(v39, v10) == 1)
    {
      LODWORD(v34) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 32))(v39, v10);
      LODWORD(v38.__begin_) = 2139095040;
      v11 = *(float *)&v34 == INFINITY;
    }
    else
    {
      v11 = 0;
    }
    std::vector<int>::vector(&v38, v9);
    v12 = v10;
    if (v9 >= 1)
    {
      for (i = 0; i != v9; ++i)
      {
        if (v10 == i && v11)
        {
          v38.__begin_[v10] = v32;
        }
        else
        {
          v15 = (*(uint64_t (**)(_QWORD *))(*v3 + 200))(v3);
          v38.__begin_[i] = v15;
        }
      }
    }
    if (!v11)
    {
      v16 = v38.__begin_[(int)v10];
      LODWORD(v34) = 0;
      *(_QWORD *)((char *)&v34 + 4) = v6;
      HIDWORD(v34) = v16;
      *(_QWORD *)&v33 = &v39;
      v17 = std::__hash_table<std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::__unordered_map_hasher<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::hash<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::equal_to<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,true>,std::__unordered_map_equal<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::equal_to<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::hash<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,true>,std::allocator<std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__emplace_unique_key_args<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::piecewise_construct_t const&,std::tuple<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const* const&>,std::tuple<>>((uint64_t)v40, &v39, (uint64_t)&std::piecewise_construct, (_QWORD **)&v33);
      *(_OWORD *)(v17 + 3) = v34;
      (*(void (**)(_QWORD *, _QWORD, __int128 *))(*v3 + 208))(v3, 0, &v34);
    }
    if (v9 < 1)
      goto LABEL_51;
    v18 = 0;
LABEL_27:
    v37 = 0;
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v39 + 136))(v39, v18, &v34);
    v19 = v18 == v12;
    v20 = v19 && v11;
    if (v19 && v11)
      v21 = v6;
    else
      v21 = 0;
    while (1)
    {
      if ((_QWORD)v34)
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v34 + 24))(v34))
        {
          if ((_QWORD)v34)
          {
            (*(void (**)(void))(*(_QWORD *)v34 + 8))();
            goto LABEL_45;
          }
LABEL_43:
          if (v36)
            --*v36;
LABEL_45:
          LODWORD(v34) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 32))(v39, v18);
          LODWORD(v33) = 2139095040;
          if (*(float *)&v34 != INFINITY)
          {
            if (v6 >= (uint64_t)(a2[1] - *a2) >> 2)
              v26 = 0;
            else
              v26 = *(_DWORD *)(*a2 + 4 * v6);
            v27 = v38.__begin_[v18];
            *(float *)&v28 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 32))(v39, v18);
            *(_QWORD *)&v34 = v26;
            *((_QWORD *)&v34 + 1) = __PAIR64__(v32, v28);
            (*(void (**)(_QWORD *, uint64_t, __int128 *))(*v3 + 208))(v3, v27, &v34);
          }
          if (++v18 == v9)
          {
LABEL_51:
            if (v38.__begin_)
            {
              v38.__end_ = v38.__begin_;
              operator delete(v38.__begin_);
            }
            a1 = v30;
            goto LABEL_54;
          }
          goto LABEL_27;
        }
        if ((_QWORD)v34)
        {
          v22 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v34 + 32))();
          goto LABEL_36;
        }
      }
      else if (v37 >= v35)
      {
        goto LABEL_43;
      }
      v22 = (_DWORD *)(*((_QWORD *)&v34 + 1) + 16 * v37);
LABEL_36:
      v23 = v22[2];
      v24 = v38.__begin_[v22[3]];
      LODWORD(v33) = *v22;
      *(_QWORD *)((char *)&v33 + 4) = __PAIR64__(v23, v21);
      HIDWORD(v33) = v24;
      (*(void (**)(_QWORD *, _QWORD, __int128 *))(*v3 + 208))(v3, v38.__begin_[v18], &v33);
      if (v20)
      {
        v42 = &v39;
        v25 = std::__hash_table<std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::__unordered_map_hasher<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::hash<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::equal_to<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,true>,std::__unordered_map_equal<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::equal_to<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::hash<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,true>,std::allocator<std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__emplace_unique_key_args<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::piecewise_construct_t const&,std::tuple<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const* const&>,std::tuple<>>((uint64_t)v40, &v39, (uint64_t)&std::piecewise_construct, &v42);
        *(_OWORD *)(v25 + 3) = v33;
      }
      if ((_QWORD)v34)
        (*(void (**)(_QWORD))(*(_QWORD *)v34 + 40))(v34);
      else
        ++v37;
    }
  }
LABEL_55:
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v40);
  return v3;
}

void sub_1ADED5078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void kaldi::AddSelfLoops(kaldi::TransitionModel *a1, uint64_t a2, int a3, _QWORD *a4, float a5)
{
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  int *begin;
  uint64_t v23;
  int v24;
  float NonSelfLoopLogProb;
  float v26;
  float v27;
  float v28;
  BOOL v29;
  float v30;
  float v31;
  BOOL v34;
  float v35;
  int v36;
  float TransitionLogProb;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  float v47;
  float v48;
  float v49;
  BOOL v50;
  float v51;
  int v52;
  unsigned int v53;
  float v54;
  uint64_t v55;
  std::vector<int>::value_type __x;
  int v57[4];
  std::vector<int> v58;
  unint64_t v59;
  kaldi::TransitionModel *v60;
  uint64_t v61;

  (*(void (**)(_QWORD *))(*a4 + 24))(a4);
  if (a3)
  {
    v60 = a1;
    v61 = a2;
    fst::MakePrecedingInputSymbolsSameClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,kaldi::TidToTstateMapper>(1, (uint64_t)a4, (uint64_t)&v60);
    __x = -1;
    v10 = (*(uint64_t (**)(_QWORD *))(*a4 + 160))(a4);
    std::vector<int>::vector(&v58, v10, &__x);
    v11 = *(_QWORD *)(a4[1] + 72) - *(_QWORD *)(a4[1] + 64);
    if ((int)(v11 >> 3) >= 1)
    {
      v12 = 0;
      v13 = (v11 >> 3);
      do
      {
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)a4);
        v14 = *(_QWORD *)(*(_QWORD *)(a4[1] + 64) + 8 * v12);
        v15 = *(_QWORD *)(v14 + 24);
        if (*(_QWORD *)(v14 + 32) != v15)
        {
          v16 = 0;
          v17 = 0;
          do
          {
            v18 = (int *)(v15 + v16);
            v19 = v18[3];
            v20 = kaldi::TidToTstateMapper::operator()((uint64_t)&v60, *v18);
            if (v58.__begin_[v19] == __x)
              v58.__begin_[v19] = v20;
            ++v17;
            v15 = *(_QWORD *)(v14 + 24);
            v16 += 16;
          }
          while (v17 < (*(_QWORD *)(v14 + 32) - v15) >> 4);
        }
        ++v12;
      }
      while (v12 != v13);
    }
    v21 = (*(uint64_t (**)(_QWORD *))(*a4 + 24))(a4);
    begin = v58.__begin_;
    if (v58.__begin_[v21] != -1)
    {
      (*(void (**)(_QWORD *))(*a4 + 24))(a4);
      begin = v58.__begin_;
    }
    if ((int)((unint64_t)((char *)v58.__end_ - (char *)begin) >> 2) < 1)
      goto LABEL_44;
    v23 = 0;
    do
    {
      v24 = begin[v23];
      if (v24 >= 1)
      {
        NonSelfLoopLogProb = kaldi::TransitionModel::GetNonSelfLoopLogProb(a1, v24);
        v26 = (*(float (**)(_QWORD *, uint64_t))(*a4 + 32))(a4, v23);
        v27 = -(float)(NonSelfLoopLogProb * a5);
        v28 = NAN;
        if (v26 != -INFINITY && v27 != -INFINITY)
        {
          v28 = INFINITY;
          v29 = v26 == INFINITY || v27 == INFINITY;
          v30 = v27 + v26;
          if (!v29)
            v28 = v30;
        }
        (*(void (**)(_QWORD *, uint64_t, float))(*a4 + 184))(a4, v23, v28);
        (*(void (**)(_QWORD *, uint64_t, uint64_t *))(*a4 + 296))(a4, v23, &v55);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v55 + 24))(v55))
        {
          *(_OWORD *)v57 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 32))(v55);
          v31 = INFINITY;
          if (*(float *)&v57[2] != INFINITY && v27 != INFINITY)
            v31 = v27 + *(float *)&v57[2];
          v34 = v27 == -INFINITY || *(float *)&v57[2] == -INFINITY;
          v35 = NAN;
          if (!v34)
            v35 = v31;
          *(float *)&v57[2] = v35;
          (*(void (**)(uint64_t, int *))(*(_QWORD *)v55 + 88))(v55, v57);
          (*(void (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55);
        }
        if (v55)
          (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
        v36 = kaldi::TransitionModel::SelfLoopOf(a1, v24);
        if (v36)
        {
          TransitionLogProb = kaldi::TransitionModel::GetTransitionLogProb(a1, v36);
          v57[0] = v36;
          v57[1] = 0;
          *(float *)&v57[2] = -(float)(TransitionLogProb * a5);
          v57[3] = v23;
          (*(void (**)(_QWORD *, uint64_t, int *))(*a4 + 208))(a4, v23, v57);
        }
      }
      ++v23;
      begin = v58.__begin_;
    }
    while (v23 < (int)((unint64_t)((char *)v58.__end_ - (char *)v58.__begin_) >> 2));
    if (v58.__begin_)
    {
LABEL_44:
      v58.__end_ = begin;
      operator delete(begin);
    }
  }
  else
  {
    v60 = a1;
    v61 = a2;
    fst::MakeFollowingInputSymbolsSameClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,kaldi::TidToTstateMapper>(1, (uint64_t)a4, (uint64_t)&v60);
    v38 = (*(uint64_t (**)(_QWORD *))(*a4 + 160))(a4);
    if (v38 >= 1)
    {
      v39 = 0;
      v40 = v38;
      do
      {
        v58.__begin_ = (std::vector<int>::pointer)&unk_1E5D213B0;
        v59 = 0;
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)a4);
        v41 = a4[1];
        v58.__end_ = *(std::vector<int>::pointer *)(*(_QWORD *)(v41 + 64) + 8 * v39);
        v58.__end_cap_.__value_ = (int *)(v41 + 8);
        v42 = v59;
        v43 = *((_QWORD *)v58.__end_ + 3);
        v44 = *((_QWORD *)v58.__end_ + 4) - v43;
        v45 = -1;
        while (v42 < v44 >> 4)
        {
          *(_OWORD *)v57 = *(_OWORD *)(v43 + 16 * v42);
          v46 = kaldi::TidToTstateMapper::operator()((uint64_t)&v60, v57[0]);
          if (v45 == -1)
            v45 = v46;
          if (v45 >= 1)
          {
            v47 = kaldi::TransitionModel::GetNonSelfLoopLogProb(a1, v45);
            v48 = NAN;
            if (*(float *)&v57[2] != -INFINITY)
            {
              v49 = -(float)(v47 * a5);
              if (v49 != -INFINITY)
              {
                v48 = INFINITY;
                v50 = v49 == INFINITY || *(float *)&v57[2] == INFINITY;
                v51 = *(float *)&v57[2] + v49;
                if (!v50)
                  v48 = v51;
              }
            }
            *(float *)&v57[2] = v48;
            fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v58, (__n128 *)v57);
          }
          v42 = ++v59;
          v43 = *((_QWORD *)v58.__end_ + 3);
          v44 = *((_QWORD *)v58.__end_ + 4) - v43;
        }
        LODWORD(v58.__begin_) = (*(float (**)(_QWORD *, uint64_t))(*a4 + 32))(a4, v39);
        v57[0] = 2139095040;
        if (*(float *)&v58.__begin_ == INFINITY && (v45 - 1) <= 0xFFFFFFFD)
        {
          v52 = kaldi::TransitionModel::SelfLoopOf(a1, v45);
          if (v52)
          {
            v53 = v52;
            v54 = kaldi::TransitionModel::GetTransitionLogProb(a1, v52);
            v58.__begin_ = (std::vector<int>::pointer)v53;
            *(float *)&v58.__end_ = -(float)(v54 * a5);
            HIDWORD(v58.__end_) = v39;
            (*(void (**)(_QWORD *, uint64_t, std::vector<int> *))(*a4 + 208))(a4, v39, &v58);
          }
        }
        ++v39;
      }
      while (v39 != v40);
    }
  }
}

void sub_1ADED562C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::SplitToPhones(kaldi::TransitionModel *a1, uint64_t a2, uint64_t *a3)
{
  int IsReordered;
  int *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  int v17;
  int v18;
  int v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int *v56;
  char *v57;
  unint64_t v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  char v68;
  char v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *__p;
  unint64_t *v75;
  char *v76;

  std::vector<std::vector<int>>::__clear[abi:ne180100](a3);
  IsReordered = kaldi::IsReordered(a1, (int **)a2);
  v7 = *(int **)a2;
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    v68 = 1;
    return v68 & 1;
  }
  v8 = IsReordered;
  v9 = 0;
  __p = 0;
  v75 = 0;
  v76 = 0;
  v70 = 1;
  do
  {
    v10 = v9 + 1;
    if (kaldi::TransitionModel::IsFinal(a1, v7[v9]))
    {
      if (!v8)
      {
        v16 = v75;
        if (v75 >= (unint64_t *)v76)
        {
          v29 = (unint64_t *)__p;
          v30 = ((char *)v75 - (_BYTE *)__p) >> 3;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v32 = v76 - (_BYTE *)__p;
          if ((v76 - (_BYTE *)__p) >> 2 > v31)
            v31 = v32 >> 2;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v76, v33);
            v29 = (unint64_t *)__p;
            v16 = v75;
          }
          else
          {
            v34 = 0;
          }
          v45 = (unint64_t *)&v34[8 * v30];
          *v45 = v10;
          v15 = v45 + 1;
          while (v16 != v29)
          {
            v46 = *--v16;
            *--v45 = v46;
          }
          __p = v45;
          v75 = v15;
          v76 = &v34[8 * v33];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *v75 = v10;
          v15 = v16 + 1;
        }
        goto LABEL_77;
      }
      v11 = *(int **)a2;
      if (v10 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2)
      {
        while (kaldi::TransitionModel::IsSelfLoop(a1, v11[v9 + 1]))
        {
          kaldi::TransitionModel::TransitionIdToTransitionState(a1, *(_DWORD *)(*(_QWORD *)a2 + 4 * v9));
          kaldi::TransitionModel::TransitionIdToTransitionState(a1, *(_DWORD *)(*(_QWORD *)a2 + 4 * v9 + 4));
          v11 = *(int **)a2;
          v12 = v9 + 1;
          v13 = v9 + 2 >= (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
          ++v9;
          if (v13)
          {
            v10 = v12 + 1;
            v9 = v12;
            goto LABEL_43;
          }
        }
        v10 = v9 + 1;
      }
LABEL_43:
      v35 = v75;
      if (v75 >= (unint64_t *)v76)
      {
        v37 = (unint64_t *)__p;
        v38 = ((char *)v75 - (_BYTE *)__p) >> 3;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v40 = v76 - (_BYTE *)__p;
        if ((v76 - (_BYTE *)__p) >> 2 > v39)
          v39 = v40 >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v76, v41);
          v37 = (unint64_t *)__p;
          v35 = v75;
        }
        else
        {
          v42 = 0;
        }
        v47 = (unint64_t *)&v42[8 * v38];
        *v47 = v10;
        v36 = v47 + 1;
        while (v35 != v37)
        {
          v48 = *--v35;
          *--v47 = v48;
        }
        __p = v47;
        v75 = v36;
        v76 = &v42[8 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *v75 = v10;
        v36 = v35 + 1;
      }
      v75 = v36;
      v10 = v9 + 1;
    }
    else
    {
      if (v10 == (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2)
      {
        v14 = v75;
        if (v75 >= (unint64_t *)v76)
        {
          v20 = (unint64_t *)__p;
          v26 = ((char *)v75 - (_BYTE *)__p) >> 3;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v28 = v76 - (_BYTE *)__p;
          if ((v76 - (_BYTE *)__p) >> 2 > v27)
            v27 = v28 >> 2;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v27;
          if (v24)
          {
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v76, v24);
            v20 = (unint64_t *)__p;
            v14 = v75;
          }
          else
          {
            v25 = 0;
          }
          v43 = (unint64_t *)&v25[8 * v26];
          *v43 = v10;
          v15 = v43 + 1;
          while (v14 != v20)
          {
            v44 = *--v14;
            *--v43 = v44;
          }
          goto LABEL_74;
        }
        goto LABEL_12;
      }
      v17 = kaldi::TransitionModel::TransitionIdToTransitionState(a1, *(_DWORD *)(*(_QWORD *)a2 + 4 * v9));
      v18 = kaldi::TransitionModel::TransitionIdToTransitionState(a1, *(_DWORD *)(*(_QWORD *)a2 + 4 * v10));
      if (v17 != v18)
      {
        v19 = kaldi::TransitionModel::TransitionStateToPhone(a1, v17);
        if (v19 != kaldi::TransitionModel::TransitionStateToPhone(a1, v18))
        {
          v14 = v75;
          if (v75 >= (unint64_t *)v76)
          {
            v20 = (unint64_t *)__p;
            v21 = ((char *)v75 - (_BYTE *)__p) >> 3;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v23 = v76 - (_BYTE *)__p;
            if ((v76 - (_BYTE *)__p) >> 2 > v22)
              v22 = v23 >> 2;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v76, v24);
              v20 = (unint64_t *)__p;
              v14 = v75;
            }
            else
            {
              v25 = 0;
            }
            v43 = (unint64_t *)&v25[8 * v21];
            *v43 = v10;
            v15 = v43 + 1;
            while (v14 != v20)
            {
              v49 = *--v14;
              *--v43 = v49;
            }
LABEL_74:
            __p = v43;
            v75 = v15;
            v76 = &v25[8 * v24];
            if (v20)
              operator delete(v20);
LABEL_76:
            v70 = 0;
LABEL_77:
            v75 = v15;
            goto LABEL_78;
          }
LABEL_12:
          *v14 = v10;
          v15 = v14 + 1;
          goto LABEL_76;
        }
      }
    }
LABEL_78:
    v7 = *(int **)a2;
    v9 = v10;
  }
  while (v10 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v50 = (unint64_t *)__p;
  if (v75 == __p)
  {
    if (__p)
      goto LABEL_107;
  }
  else
  {
    v51 = 0;
    v52 = 0;
    do
    {
      v71 = 0;
      v72 = 0;
      v73 = 0;
      std::vector<std::vector<int>>::push_back[abi:ne180100](a3, (uint64_t)&v71);
      if (v71)
      {
        v72 = v71;
        operator delete(v71);
      }
      v53 = kaldi::TransitionModel::TransitionIdToTransitionState(a1, *(_DWORD *)(*(_QWORD *)a2 + 4 * v52));
      v54 = kaldi::TransitionModel::TransitionStateToPhone(a1, v53);
      if (**(_DWORD **)kaldi::HmmTopology::TopologyForPhone(a1, v54) != -1)
        v70 &= kaldi::TransitionModel::TransitionStateToHmmState(a1, v53) == 0;
      while (1)
      {
        v50 = (unint64_t *)__p;
        if (v52 >= *((_QWORD *)__p + v51))
          break;
        v55 = a3[1];
        v56 = *(int **)a2;
        v57 = *(char **)(v55 - 16);
        v58 = *(_QWORD *)(v55 - 8);
        if ((unint64_t)v57 >= v58)
        {
          v60 = *(char **)(v55 - 24);
          v61 = (v57 - v60) >> 2;
          if ((unint64_t)(v61 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v62 = v58 - (_QWORD)v60;
          v63 = (uint64_t)(v58 - (_QWORD)v60) >> 1;
          if (v63 <= v61 + 1)
            v63 = v61 + 1;
          if (v62 >= 0x7FFFFFFFFFFFFFFCLL)
            v64 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v64 = v63;
          if (v64)
          {
            v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v55 - 8, v64);
            v60 = *(char **)(v55 - 24);
            v57 = *(char **)(v55 - 16);
          }
          else
          {
            v65 = 0;
          }
          v66 = &v65[4 * v61];
          *(_DWORD *)v66 = v56[v52];
          v59 = v66 + 4;
          while (v57 != v60)
          {
            v67 = *((_DWORD *)v57 - 1);
            v57 -= 4;
            *((_DWORD *)v66 - 1) = v67;
            v66 -= 4;
          }
          *(_QWORD *)(v55 - 24) = v66;
          *(_QWORD *)(v55 - 16) = v59;
          *(_QWORD *)(v55 - 8) = &v65[4 * v64];
          if (v60)
            operator delete(v60);
        }
        else
        {
          *(_DWORD *)v57 = v56[v52];
          v59 = v57 + 4;
        }
        *(_QWORD *)(v55 - 16) = v59;
        ++v52;
      }
      v52 = *((_QWORD *)__p + v51++);
    }
    while (v51 < ((char *)v75 - (_BYTE *)__p) >> 3);
LABEL_107:
    v75 = v50;
    operator delete(v50);
  }
  v68 = v70;
  return v68 & 1;
}

void sub_1ADED5C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::IsReordered(kaldi::TransitionModel *this, int **a2)
{
  int *v4;
  int *v5;
  uint64_t v6;
  int v7;
  BOOL IsSelfLoop;
  BOOL v9;
  int v10;

  v4 = *a2;
  v5 = a2[1];
  if ((unint64_t)((char *)v5 - (char *)*a2) >= 5)
  {
    v6 = 0;
    do
    {
      v7 = kaldi::TransitionModel::TransitionIdToTransitionState(this, v4[v6]);
      if (v7 != kaldi::TransitionModel::TransitionIdToTransitionState(this, (*a2)[v6 + 1]))
      {
        IsSelfLoop = kaldi::TransitionModel::IsSelfLoop(this, (*a2)[v6]);
        v9 = kaldi::TransitionModel::IsSelfLoop(this, (*a2)[v6 + 1]);
        if (IsSelfLoop)
          return 1;
        if (v9)
          return 0;
      }
      ++v6;
      v4 = *a2;
      v5 = a2[1];
    }
    while (v6 + 1 < (unint64_t)(v5 - *a2));
  }
  if (v4 == v5)
    return 0;
  v10 = kaldi::TransitionModel::IsSelfLoop(this, *v4);
  return kaldi::TransitionModel::IsSelfLoop(this, *(a2[1] - 1)) & ~v10;
}

uint64_t kaldi::ConvertAlignment(kaldi::TransitionModel *a1, kaldi::HmmTopology *a2, void (***a3)(unsigned int (***)(_QWORD)), _QWORD *a4, uint64_t *a5, std::vector<unsigned int> *this, int a7, int a8, char a9)
{
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v27;
  std::vector<unsigned int>::pointer begin;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v37;
  _QWORD v38[3];
  void **v39;

  if (a7 == 1 || (a9 & 1) == 0)
    return kaldi::ConvertAlignmentInternal(a1, a2, a3, (uint64_t)a4, a7 - 1, a7, a5, this);
  std::vector<std::vector<int>>::vector(v38, a7);
  if (a7 < 1)
  {
LABEL_8:
    this->__end_ = this->__begin_;
    std::vector<int>::reserve(this, (uint64_t)(a4[1] - *a4) >> 2);
    v19 = (uint64_t)(a4[1] - *a4) >> 2;
    v20 = v19 % a7 + v19 / a7;
    if ((int)v20 >= 1)
    {
      v21 = 0;
      v37 = (int)v20;
      do
      {
        v22 = (a7 - 1);
        if (a7 >= 1)
        {
          do
          {
            v23 = (uint64_t *)(v38[0] + 24 * v22);
            v24 = *v23;
            if (v21 < (int)((unint64_t)(v23[1] - *v23) >> 2))
            {
              end = this->__end_;
              value = this->__end_cap_.__value_;
              if (end >= value)
              {
                begin = this->__begin_;
                v29 = end - this->__begin_;
                v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v31 = (char *)value - (char *)begin;
                if (v31 >> 1 > v30)
                  v30 = v31 >> 1;
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                  v32 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v32 = v30;
                if (v32)
                {
                  v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this->__end_cap_, v32);
                  begin = this->__begin_;
                  end = this->__end_;
                }
                else
                {
                  v33 = 0;
                }
                v34 = (unsigned int *)&v33[4 * v29];
                *v34 = *(_DWORD *)(v24 + 4 * v21);
                v27 = v34 + 1;
                while (end != begin)
                {
                  v35 = *--end;
                  *--v34 = v35;
                }
                this->__begin_ = v34;
                this->__end_ = v27;
                this->__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
                if (begin)
                  operator delete(begin);
              }
              else
              {
                *end = *(_DWORD *)(v24 + 4 * v21);
                v27 = end + 1;
              }
              this->__end_ = v27;
            }
            v18 = v22-- <= 0;
          }
          while (!v18);
        }
        ++v21;
      }
      while (v21 < v37);
    }
    v39 = (void **)v38;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v39);
    return 1;
  }
  else
  {
    v16 = (a7 - 1);
    v17 = 24 * v16;
    while ((kaldi::ConvertAlignmentInternal(a1, a2, a3, (uint64_t)a4, v16, a7, a5, (std::vector<unsigned int> *)(v38[0] + v17)) & 1) != 0)
    {
      v17 -= 24;
      v18 = v16-- < 1;
      if (v18)
        goto LABEL_8;
    }
    v39 = (void **)v38;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v39);
    return 0;
  }
}

void sub_1ADED6048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ConvertAlignmentInternal(kaldi::TransitionModel *a1, kaldi::HmmTopology *a2, void (***a3)(unsigned int (***)(_QWORD)), uint64_t a4, int a5, int a6, uint64_t *a7, std::vector<unsigned int> *this)
{
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::vector<int>::pointer begin;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  std::vector<int>::pointer v29;
  uint64_t v30;
  _QWORD *v31;
  std::vector<int>::pointer v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  std::vector<int>::pointer v40;
  std::vector<unsigned int>::pointer v41;
  uint64_t v42;
  int v43;
  int v44;
  int *v45;
  char v46;
  std::vector<unsigned int>::pointer v47;
  char v48;
  int64_t v49;
  char v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  int v54;
  int64_t v55;
  int64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  std::vector<int>::pointer v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  char v88;
  uint64_t *v89;
  char **v90;
  int v91;
  uint64_t v92;
  uint64_t i;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  _QWORD *v105;
  void **v106;
  uint64_t v107;
  int IsReordered;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  std::vector<int>::size_type v113;
  int *v115;
  uint64_t v116;
  uint64_t v117;
  std::vector<int>::size_type __n;
  void (***v119)(unsigned int (***)(_QWORD));
  kaldi::TransitionModel *v120;
  int v121;
  std::vector<int> v122;
  _QWORD v123[3];
  std::vector<int> v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *__p[2];
  unsigned __int8 v129;
  std::vector<int> v130;
  std::vector<int> v131;
  std::vector<unsigned int> v132;

  this->__end_ = this->__begin_;
  std::vector<int>::reserve(this, (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  v125 = 0;
  v126 = 0;
  v127 = 0;
  if ((kaldi::SplitToPhones(a1, a4, &v125) & 1) == 0)
  {
    v28 = 0;
    goto LABEL_108;
  }
  v15 = (v126 - v125) >> 3;
  v16 = 0xAAAAAAAAAAAAAAABLL * v15;
  __n = -1431655765 * (int)v15;
  v119 = a3;
  std::vector<int>::vector(&v124, __n);
  if (v16 << 32)
  {
    v17 = 0;
    v18 = 0;
    v19 = __n <= 1 ? 1 : __n;
    do
    {
      v20 = kaldi::TransitionModel::TransitionIdToPhone(a1, **(_DWORD **)(v125 + v17));
      v124.__begin_[v18++] = v20;
      v17 += 24;
    }
    while (v19 != v18);
    if (a7)
    {
      v21 = 0;
      v22 = *a7;
      v23 = (unint64_t)(a7[1] - *a7) >> 2;
      begin = v124.__begin_;
      do
      {
        v25 = begin[v21];
        if ((v25 & 0x80000000) != 0 || (int)v25 >= (int)v23 || (v26 = *(_DWORD *)(v22 + 4 * v25), v26 == -1))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v130);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"ConvertAlignment: could not map phone ", 38);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v130);
        }
        begin[v21++] = v26;
      }
      while (v19 != v21);
    }
  }
  IsReordered = kaldi::IsReordered(a1, (int **)a4);
  std::vector<std::vector<int>>::vector(v123, __n);
  if (a6 == 1 && kaldi::HmmTopology::operator==((uint64_t)a1, (uint64_t)a2))
  {
    if ((int)v16 >= 1)
    {
      v27 = 0;
      do
      {
        std::vector<int>::resize((std::vector<unsigned int> *)(v123[0] + v27), (uint64_t)(*(_QWORD *)(v125 + v27 + 8) - *(_QWORD *)(v125 + v27)) >> 2);
        v27 += 24;
      }
      while (24 * v16 != v27);
    }
    goto LABEL_68;
  }
  std::vector<int>::vector(&v131, __n);
  memset(&v132, 0, sizeof(v132));
  v29 = v131.__begin_;
  if ((int)v16 >= 1)
  {
    v30 = v16;
    v31 = (_QWORD *)(v125 + 8);
    v32 = v131.__begin_;
    do
    {
      *v32++ = (*v31 - *(v31 - 1)) >> 2;
      v31 += 3;
      --v30;
    }
    while (v30);
  }
  v33 = (char *)v131.__end_ - (char *)v29;
  v34 = (int)(v131.__end_ - v29);
  std::vector<int>::vector(&v130, v34);
  std::vector<int>::resize(&v132, v34);
  v35 = v33 >> 2;
  v36 = (v33 >> 2);
  if ((int)(v33 >> 2) >= 1)
  {
    v37 = 0;
    do
    {
      v38 = kaldi::HmmTopology::MinLength(a2, v124.__begin_[v37]);
      v130.__begin_[v37++] = v38;
    }
    while (v36 != v37);
    v39 = 0;
    v40 = v131.__begin_;
    v41 = v132.__begin_;
    v42 = v36;
    do
    {
      v43 = (v39 + a5) / a6;
      v44 = *v40++;
      v39 += v44;
      *v41++ = (v39 + a5) / a6 - v43;
      --v42;
    }
    while (v42);
  }
  v45 = v130.__begin_;
  v46 = 1;
  v47 = v132.__begin_;
  do
  {
    v48 = v46;
    if ((v46 & 1) == 0)
      break;
    if ((int)v35 < 1)
    {
      v52 = 0;
      v50 = 0;
      goto LABEL_53;
    }
    v49 = 0;
    v50 = 0;
    v51 = 1;
    v52 = 1;
    while (1)
    {
      v53 = v47[v49];
      if (v53 < v45[v49])
        break;
      ++v49;
LABEL_49:
      v52 = v49 < v34;
      ++v51;
      if (v49 == v36)
        goto LABEL_53;
    }
    if (v49)
    {
      v54 = 0;
      v55 = v49;
      while (1)
      {
        v56 = v55 - 1;
        v57 = v47[(v55 - 1)];
        if (v57 > v45[(v55 - 1)])
          break;
        v54 += v57;
        --v55;
        if (v56 + 1 < 2)
          goto LABEL_37;
      }
      v58 = v55 - 1;
    }
    else
    {
LABEL_37:
      v58 = -1;
      v54 = 0x7FFFFFFF;
    }
    if (v49 + 1 < v34)
    {
      v59 = 0;
      v60 = v51;
      while (1)
      {
        v61 = v47[v60];
        if (v61 > v45[v60])
          break;
        v59 += v61;
        if (v36 == ++v60)
          goto LABEL_47;
      }
      if (v59 < v54)
        v58 = v60;
    }
LABEL_47:
    if (v58 != -1)
    {
      v47[v49] = v53 + 1;
      --v47[v58];
      v50 = 1;
      ++v49;
      goto LABEL_49;
    }
    v50 = 1;
LABEL_53:
    v46 = v50;
  }
  while (!v52);
  if (v45)
  {
    v130.__end_ = v45;
    operator delete(v45);
  }
  if ((v48 & 1) != 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v130);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"Failed to produce suitable phone lengths", 40);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v130);
    }
  }
  else if ((int)v16 >= 1)
  {
    v62 = 0;
    do
    {
      std::vector<int>::resize((std::vector<unsigned int> *)(v123[0] + 24 * v62), (int)v132.__begin_[v62]);
      ++v62;
    }
    while (v62 != v16);
  }
  if (v132.__begin_)
  {
    v132.__end_ = v132.__begin_;
    operator delete(v132.__begin_);
  }
  if (v131.__begin_)
  {
    v131.__end_ = v131.__begin_;
    operator delete(v131.__begin_);
  }
  if ((v48 & 1) != 0)
  {
    v28 = 0;
    goto LABEL_106;
  }
LABEL_68:
  v63 = ((uint64_t (*)(_QWORD))**v119)(v119);
  v64 = ((uint64_t (*)(_QWORD))(*v119)[1])(v119);
  v65 = v63 + v16;
  if (v63 + (int)v16 > -v63)
  {
    v113 = v63;
    v66 = -v63;
    v67 = v64;
    v68 = v63;
    v69 = -4 * v63;
    v120 = a2;
    v110 = v63;
    v111 = v64;
    v112 = v65;
    v109 = v63;
    do
    {
      v70 = v66 + v67;
      if (__n > v66 + v67)
      {
        LODWORD(v130.__begin_) = 0;
        std::vector<int>::vector(&v122, v113, (const std::vector<int>::value_type *)&v130);
        v71 = v125;
        if (v63 >= 1)
        {
          v72 = 0;
          v73 = 0xAAAAAAAAAAAAAAABLL * ((v126 - v125) >> 3);
          v74 = v122.__begin_;
          v75 = (char *)v124.__begin_ + v69;
          do
          {
            if (v73 > v66 + v72)
              v74[v72] = *(_DWORD *)&v75[4 * v72];
            ++v72;
          }
          while (v68 != v72);
        }
        v117 = v69;
        v76 = v71 + 24 * v70;
        v77 = v123[0];
        v115 = *(int **)v76;
        v116 = *(_QWORD *)(v76 + 8);
        v78 = ((uint64_t (*)(_QWORD))(*v119)[1])(v119);
        v79 = kaldi::TransitionModel::TransitionIdToPhone(a1, **(_DWORD **)v76);
        v121 = v122.__begin_[v78];
        v80 = (uint64_t *)kaldi::HmmTopology::TopologyForPhone(a1, v79);
        v81 = (uint64_t *)kaldi::HmmTopology::TopologyForPhone(v120, v121);
        v82 = *v80;
        v83 = v80[1];
        v84 = v83 - *v80;
        v85 = *v81;
        if (v84 == v81[1] - *v81)
        {
          if (v82 == v83)
          {
            v88 = 0;
          }
          else
          {
            do
            {
              v86 = kaldi::HmmTopology::HmmState::operator==(v82, v85);
              v82 += 32;
              v85 += 32;
            }
            while (v82 != v83 && v86);
            v88 = !v86;
          }
        }
        else
        {
          v88 = 1;
        }
        v89 = (uint64_t *)(v77 + 24 * v70);
        v90 = (char **)(v89 + 1);
        if ((v88 & 1) != 0 || v89[1] - *v89 != *(_QWORD *)(v76 + 8) - *(_QWORD *)v76)
        {
          kaldi::GetRandomAlignmentForPhone(v119, v120, (uint64_t)&v122, v89);
          if (IsReordered)
            kaldi::ChangeReorderingOfAlignment((uint64_t)v120, v89);
        }
        else
        {
          v91 = kaldi::HmmTopology::NumPdfClasses(v120, v121);
          std::vector<int>::vector((std::vector<int> *)&v132, v91);
          if (v91 >= 1)
          {
            v92 = 0;
            for (i = 0; i != v91; ++i)
            {
              if ((((uint64_t (*)(void (***)(unsigned int (***)(_QWORD)), std::vector<int> *, uint64_t, unsigned int *))(*v119)[2])(v119, &v122, i, &v132.__begin_[v92]) & 1) == 0)
              {
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v131);
                kaldi::WriteIntegerByteArray<int>(&v131, 0, 0, v122.__end_ - v122.__begin_, (uint64_t)v122.__begin_);
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v130);
                v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"tree did not succeed in converting phone window ", 48);
                std::stringbuf::str();
                if ((v129 & 0x80u) == 0)
                  v106 = __p;
                else
                  v106 = (void **)__p[0];
                if ((v129 & 0x80u) == 0)
                  v107 = v129;
                else
                  v107 = (uint64_t)__p[1];
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)v106, v107);
                if ((char)v129 < 0)
                  operator delete(__p[0]);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v130);
              }
              ++v92;
            }
          }
          if ((v116 - (_QWORD)v115) << 30)
          {
            v94 = 0;
            if ((unint64_t)(int)((v116 - (uint64_t)v115) >> 2) <= 1)
              v95 = 1;
            else
              v95 = (int)((v116 - (uint64_t)v115) >> 2);
            do
            {
              v96 = *(_DWORD *)(*(_QWORD *)v76 + 4 * v94);
              v97 = kaldi::TransitionModel::TransitionIdToTransitionState(a1, v96);
              v98 = kaldi::TransitionModel::TransitionStateToForwardPdfClass(a1, v97);
              v99 = kaldi::TransitionModel::TransitionStateToSelfLoopPdfClass(a1, v97);
              v100 = kaldi::TransitionModel::TransitionIdToHmmState(a1, v96);
              v101 = kaldi::TransitionModel::TransitionIdToTransitionIndex(a1, v96);
              if (v98 >= (unint64_t)(v132.__end_ - v132.__begin_))
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v130);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v130, (uint64_t)"ConvertAlignment: error converting alignment, possibly different topologies?", 76);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v130);
              }
              v102 = v101;
              v103 = kaldi::TransitionModel::TupleToTransitionState(v120, v121, v100, v132.__begin_[v98], v132.__begin_[v99]);
              *(_DWORD *)(*v89 + 4 * v94++) = kaldi::TransitionModel::PairToTransitionId(v120, v103, v102);
            }
            while (v95 != v94);
          }
          if (v132.__begin_)
          {
            v132.__end_ = v132.__begin_;
            operator delete(v132.__begin_);
          }
          v90 = (char **)(v89 + 1);
        }
        std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)this, (uint64_t)this->__end_, (char *)*v89, *v90, (uint64_t)&(*v90)[-*v89] >> 2);
        v65 = v112;
        v67 = v111;
        v68 = v109;
        v63 = v110;
        v69 = v117;
        if (v122.__begin_)
        {
          v122.__end_ = v122.__begin_;
          operator delete(v122.__begin_);
        }
      }
      ++v66;
      v69 += 4;
    }
    while (v65 != (_DWORD)v66);
  }
  v28 = 1;
LABEL_106:
  v130.__begin_ = (std::vector<int>::pointer)v123;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
  if (v124.__begin_)
  {
    v124.__end_ = v124.__begin_;
    operator delete(v124.__begin_);
  }
LABEL_108:
  v130.__begin_ = (std::vector<int>::pointer)&v125;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
  return v28;
}

void sub_1ADED6A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,char a34)
{
  if (__p)
    operator delete(__p);
  STACK[0x208] = (unint64_t)&a34;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x208]);
  _Unwind_Resume(a1);
}

void sub_1ADED6A88()
{
  JUMPOUT(0x1ADED6AB4);
}

void kaldi::AddTransitionProbs(kaldi *a1, _QWORD *a2, uint64_t a3, float a4, float a5)
{
  int *v10;
  int *v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  signed __int32 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t i;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v24;
  _DWORD *v25;
  unint64_t v26;
  unint64_t v27;
  __int32 *v28;
  _DWORD *v29;
  __int32 v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  _QWORD *v35;
  _QWORD v36[34];
  __n128 v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v10 = (int *)a2[1];
  if ((int *)*a2 != v10)
  {
    v11 = (int *)(*a2 + 4);
    do
    {
      if (v11 == v10)
        break;
      v13 = *(v11 - 1);
      v12 = *v11++;
    }
    while (v12 > v13);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a3 + 8) + 64);
  if ((int)(v14 >> 3) >= 1)
  {
    v15 = 0;
    v16 = ((*((_QWORD *)a1 + 19) - *((_QWORD *)a1 + 18)) >> 2) - 1;
    v17 = (v14 >> 3);
    do
    {
      v38 = &unk_1E5D213B0;
      v41 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a3);
      v18 = *(_QWORD *)(a3 + 8);
      v19 = *(_QWORD *)(*(_QWORD *)(v18 + 64) + 8 * v15);
      v39 = v19;
      v40 = v18 + 8;
      for (i = v41; ; i = ++v41)
      {
        v22 = v19 + 24;
        v21 = *(_QWORD *)(v19 + 24);
        if (i >= (*(_QWORD *)(v22 + 8) - v21) >> 4)
          break;
        v37 = *(__n128 *)(v21 + 16 * i);
        if (v37.n128_i32[0] >= 1 && (signed __int32)v37.n128_u32[0] <= v16)
        {
          kaldi::GetScaledTransitionLogProb(a1, (const kaldi::TransitionModel *)v37.n128_u32[0], a4, a5);
          v32 = NAN;
          if (v37.n128_f32[2] != -INFINITY && v31 != INFINITY)
          {
            v32 = INFINITY;
            v33 = v37.n128_f32[2] == INFINITY || v31 == -INFINITY;
            v34 = v37.n128_f32[2] - v31;
            if (!v33)
              v32 = v34;
          }
          v37.n128_f32[2] = v32;
        }
        else if (v37.n128_u32[0])
        {
          v24 = (_DWORD *)*a2;
          v25 = (_DWORD *)a2[1];
          if (v25 == (_DWORD *)*a2)
            goto LABEL_34;
          v26 = ((uint64_t)v25 - *a2) >> 2;
          do
          {
            v27 = v26 >> 1;
            v28 = &v24[v26 >> 1];
            v30 = *v28;
            v29 = v28 + 1;
            v26 += ~(v26 >> 1);
            if (v30 < v37.n128_i32[0])
              v24 = v29;
            else
              v26 = v27;
          }
          while (v26);
          if (v24 == v25 || v37.n128_i32[0] < *v24)
          {
LABEL_34:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AddTransitionProbs: invalid symbol ", 35);
            v35 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" on graph input side.", 21);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
          }
        }
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v38, &v37);
        v19 = v39;
      }
      ++v15;
    }
    while (v15 != v17);
  }
}

void kaldi::GetScaledTransitionLogProb(kaldi *this, const kaldi::TransitionModel *a2, float a3, float a4)
{
  int v4;
  int v6;

  v4 = (int)a2;
  if (a3 == a4)
  {
    kaldi::TransitionModel::GetTransitionLogProb(this, (int)a2);
  }
  else if (kaldi::TransitionModel::IsSelfLoop(this, (int)a2))
  {
    kaldi::TransitionModel::GetTransitionLogProb(this, v4);
  }
  else
  {
    v6 = kaldi::TransitionModel::TransitionIdToTransitionState(this, v4);
    kaldi::TransitionModel::GetNonSelfLoopLogProb(this, v6);
    kaldi::TransitionModel::GetTransitionLogProbIgnoringSelfLoops(this, v4);
  }
}

void kaldi::AddTransitionProbs(kaldi *a1, uint64_t a2, float a3, float a4)
{
  unint64_t v4;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  float v18;
  _DWORD *v19;
  unint64_t v20;
  int v21;
  float v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v26[34];
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a2 + 8) + 64);
  if ((int)(v4 >> 3) >= 1)
  {
    v9 = 0;
    v10 = ((*((_QWORD *)a1 + 19) - *((_QWORD *)a1 + 18)) >> 2) - 1;
    v25 = (v4 >> 3);
    do
    {
      v33 = &unk_1E5D21420;
      v36 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a2);
      v11 = *(_QWORD *)(a2 + 8);
      v12 = *(_QWORD *)(*(_QWORD *)(v11 + 64) + 8 * v9);
      v34 = v12;
      v35 = v11 + 8;
      for (i = v36; ; i = ++v36)
      {
        v15 = v12 + 48;
        v14 = *(_QWORD *)(v12 + 48);
        if (i >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v15 + 8) - v14) >> 4))
          break;
        v16 = (uint64_t *)(v14 + 48 * i);
        v27 = *v16;
        v28 = v16[1];
        v30 = 0;
        v31 = 0;
        v29 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, (const void *)v16[2], v16[3], (v16[3] - v16[2]) >> 2);
        v32 = *((_DWORD *)v16 + 10);
        v17 = HIDWORD(v28);
        LODWORD(v18) = v28;
        v19 = v29;
        if (v30 != (_BYTE *)v29)
        {
          v20 = 0;
          do
          {
            v21 = v19[v20];
            if (v21 < 1 || v21 > v10)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"AddTransitionProbs: invalid symbol ", 35);
              v24 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" on lattice input side.", 23);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
            }
            kaldi::GetScaledTransitionLogProb(a1, (const kaldi::TransitionModel *)v19[v20], a3, a4);
            v18 = v18 - v23;
            ++v20;
            v19 = v29;
          }
          while (v20 < (v30 - (_BYTE *)v29) >> 2);
        }
        v28 = __PAIR64__(v17, LODWORD(v18));
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v33, (float *)&v27);
        if (v29)
        {
          v30 = v29;
          operator delete(v29);
        }
        v12 = v34;
      }
      ++v9;
    }
    while (v9 != v25);
  }
}

void sub_1ADED700C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 184);
  if (v3)
  {
    *(_QWORD *)(v1 - 176) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

_QWORD *kaldi::GetRandomAlignmentForPhone(void (***a1)(unsigned int (***)(_QWORD)), kaldi::HmmTopology *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *HmmAsFstSimple;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  std::vector<unsigned int>::pointer begin;
  unint64_t v18;
  unsigned int v19;
  __int128 v20;
  unsigned int *value;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  _QWORD *result;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  std::vector<unsigned int> __p;
  __int16 v32;
  char v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  uint64_t v41;

  v9 = *a4;
  v8 = a4[1];
  v40 = 0;
  v41 = 0;
  v39 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v39, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  HmmAsFstSimple = kaldi::GetHmmAsFstSimple(&v39, a1, a2, 0.0);
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(HmmAsFstSimple, 1, -1, INFINITY, 0.00097656);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v37);
  memset(&__p, 0, sizeof(__p));
  fst::GetInputSymbols<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>((uint64_t)HmmAsFstSimple, 0, &__p);
  v11 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)&v37);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v37);
  v12 = v38;
  *((_DWORD *)v38 + 22) = v11;
  v13 = (*(uint64_t (**)(_QWORD *))(*v12 + 24))(v12);
  v14 = (unint64_t)(v8 - v9) >> 2;
  v12[1] = v13 & 0xCCFFFFF0007 | (((v13 >> 35) & 1) << 37) | v12[1] & 4;
  if ((int)v14 < 1)
  {
    v16 = v11;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)&v37);
      begin = __p.__begin_;
      if (__p.__end_ != __p.__begin_)
      {
        v18 = 0;
        do
        {
          LODWORD(v36) = begin[v18];
          *(_QWORD *)((char *)&v36 + 4) = v36;
          HIDWORD(v36) = v16;
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v37);
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(v38, v11, (float *)&v36);
          ++v18;
          begin = __p.__begin_;
        }
        while (v18 < __p.__end_ - __p.__begin_);
      }
      ++v15;
      v11 = v16;
    }
    while (v15 != (_DWORD)v14);
  }
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal((uint64_t)&v37, v16, 0.0);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v36);
  LOBYTE(__p.__begin_) = 1;
  HIDWORD(__p.__begin_) = 0;
  fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)HmmAsFstSimple, (uint64_t)&v37, (uint64_t)&v36, (uint64_t)&__p);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v34);
  v19 = time(0);
  srand(v19);
  __p.__begin_ = (std::vector<unsigned int>::pointer)&v33;
  LODWORD(__p.__end_) = 0x7FFFFFFF;
  __p.__end_cap_.__value_ = (unsigned int *)1;
  v32 = 0;
  fst::RandGen<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)&v36, &v34, (uint64_t *)&__p);
  if (((*(_QWORD *)(v35 + 72) - *(_QWORD *)(v35 + 64)) & 0x7FFFFFFF8) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error generating random alignment (wrong length?): ", 51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"requested length is ", 20);
    v29 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" versus min-length ", 19);
    v30 = ((uint64_t (*)(_QWORD))(*a1)[1])(a1);
    kaldi::HmmTopology::MinLength(a2, *(_DWORD *)(*(_QWORD *)a3 + 4 * v30));
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  memset(&__p, 0, sizeof(__p));
  fst::GetLinearSymbolSequence<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>((uint64_t)&v34, (char *)&__p, 0, 0, 0);
  v20 = *(_OWORD *)&__p.__begin_;
  *(_OWORD *)&__p.__begin_ = *(_OWORD *)a4;
  *(_OWORD *)a4 = v20;
  value = __p.__end_cap_.__value_;
  __p.__end_cap_.__value_ = (unsigned int *)a4[2];
  a4[2] = (uint64_t)value;
  (*(void (**)(_QWORD *))(*HmmAsFstSimple + 8))(HmmAsFstSimple);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  v34 = &unk_1E5D256C0;
  v22 = v35;
  if (v35)
  {
    v23 = *(_DWORD *)(v35 + 56) - 1;
    *(_DWORD *)(v35 + 56) = v23;
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  *(_QWORD *)&v36 = &unk_1E5D256C0;
  v24 = *((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v25 = *(_DWORD *)(*((_QWORD *)&v36 + 1) + 56) - 1;
    *(_DWORD *)(*((_QWORD *)&v36 + 1) + 56) = v25;
    if (!v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  v37 = &unk_1E5D256C0;
  result = v38;
  if (v38)
  {
    v27 = *((_DWORD *)v38 + 14) - 1;
    *((_DWORD *)v38 + 14) = v27;
    if (!v27)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1ADED73EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  int v17;

  *(_QWORD *)(v10 - 160) = &unk_1E5D256C0;
  v12 = *(_DWORD **)(v10 - 152);
  if (v12)
  {
    v13 = v12[14] - 1;
    v12[14] = v13;
    if (!v13)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
  }
  *(_QWORD *)(v10 - 144) = &unk_1E5D256C0;
  v14 = *(_DWORD **)(v10 - 136);
  if (v14)
  {
    v15 = v14[14] - 1;
    v14[14] = v15;
    if (!v15)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  }
  *(_QWORD *)(v10 - 128) = &unk_1E5D256C0;
  v16 = *(_DWORD **)(v10 - 120);
  if (v16)
  {
    v17 = v16[14] - 1;
    v16[14] = v17;
    if (!v17)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
  }
  _Unwind_Resume(exception_object);
}

void fst::GetInputSymbols<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>(uint64_t a1, char a2, std::vector<unsigned int> *a3)
{
  uint64_t v6;
  int *v7;
  _QWORD *i;
  int v9;
  _QWORD v10[3];
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  _QWORD *v17[2];

  v17[0] = 0;
  v17[1] = 0;
  v16 = (uint64_t *)v17;
  v15 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v13);
  while (1)
  {
    if (!v13)
    {
      if ((int)v15 >= v14)
        goto LABEL_27;
LABEL_7:
      v6 = v15;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13))
      break;
    if (!v13)
      goto LABEL_7;
    v6 = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 24))();
LABEL_8:
    v12 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v6, v10);
    while (1)
    {
      if (!v10[0])
      {
        if (v12 >= v10[2])
          goto LABEL_20;
LABEL_14:
        v7 = (int *)(v10[1] + 16 * v12);
        goto LABEL_15;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v10[0] + 24))(v10[0]))
        break;
      if (!v10[0])
        goto LABEL_14;
      v7 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v10[0] + 32))();
LABEL_15:
      std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v16, v7, v7);
      if (v10[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v10[0] + 40))(v10[0]);
      else
        ++v12;
    }
    if (v10[0])
    {
      (*(void (**)(void))(*(_QWORD *)v10[0] + 8))();
      goto LABEL_22;
    }
LABEL_20:
    if (v11)
      --*v11;
LABEL_22:
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
    else
      ++v15;
  }
  if (v13)
    (*(void (**)(void))(*(_QWORD *)v13 + 8))();
LABEL_27:
  if ((a2 & 1) == 0)
  {
    for (i = v17[0]; i; i = (_QWORD *)*i)
    {
      v9 = *((_DWORD *)i + 7);
      if (v9 <= 0)
      {
        if ((v9 & 0x80000000) == 0)
        {
          LODWORD(v10[0]) = 0;
          std::__tree<int>::__erase_unique<int>((uint64_t)&v16, (int *)v10);
          break;
        }
        ++i;
      }
    }
  }
  kaldi::CopySetToVector<int>(&v16, a3);
  std::__sort<std::__less<int,int> &,int *>();
  std::__tree<int>::destroy((uint64_t)&v16, v17[0]);
}

void sub_1ADED7708(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1 - 56, *(_QWORD **)(v1 - 48));
  _Unwind_Resume(a1);
}

uint64_t fst::RandGen<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  void *v12[2];
  void *__p;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18[8];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;

  v6 = operator new();
  v7 = *a3;
  v8 = *((_DWORD *)a3 + 2);
  *(_QWORD *)v6 = a1;
  *(_QWORD *)(v6 + 8) = v7;
  *(_DWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 24) = v6 + 32;
  v9 = a3[2];
  LOWORD(v8) = *((_WORD *)a3 + 12);
  v18[0] = 1;
  v19 = 0;
  v20 = v6;
  v21 = v9;
  v22 = v8;
  fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RandGenFst(&v16, a1, (uint64_t)v18);
  if (*((_BYTE *)a3 + 24))
  {
    (*(void (**)(void *, void **))(*(_QWORD *)a2 + 168))(a2, &v16);
  }
  else
  {
    v12[1] = a2;
    __p = 0;
    v14 = 0;
    v15 = 0;
    fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)&v16, v12, 0);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
  v16 = &unk_1E5D26038;
  result = v17;
  if (v17)
  {
    v11 = *(_DWORD *)(v17 + 56) - 1;
    *(_DWORD *)(v17 + 56) = v11;
    if (!v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADED7898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  int v16;

  if (__p)
    operator delete(__p);
  if (a15)
  {
    v16 = a15[14] - 1;
    a15[14] = v16;
    if (!v16)
      (*(void (**)(_DWORD *))(*(_QWORD *)a15 + 8))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ChangeReorderingOfAlignment(uint64_t this, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  kaldi::TransitionModel *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v2 = *a2;
  v3 = a2[1] - *a2;
  v4 = (unint64_t)v3 >> 2;
  if (((unint64_t)v3 >> 2))
  {
    v6 = (kaldi::TransitionModel *)this;
    LODWORD(v7) = 0;
    v8 = (int)(v3 >> 2);
    do
    {
      v9 = (int)v7;
      v10 = *(_DWORD *)(v2 + 4 * (int)v7);
      v11 = kaldi::TransitionModel::TransitionIdToTransitionState(v6, v10);
      this = kaldi::TransitionModel::IsSelfLoop(v6, v10);
      v12 = this;
      v7 = (int)v7 + 1;
      do
      {
        if (v8 == v7)
        {
          LODWORD(v7) = v4;
          goto LABEL_10;
        }
        this = kaldi::TransitionModel::TransitionIdToTransitionState(v6, *(_DWORD *)(*a2 + 4 * v7));
        if ((_DWORD)this != v11)
          goto LABEL_10;
        this = kaldi::TransitionModel::IsSelfLoop(v6, *(_DWORD *)(*a2 + 4 * v7++));
      }
      while ((this & 1) != 0);
      if (!v12)
        LODWORD(v7) = v7 - 1;
LABEL_10:
      v2 = *a2;
      v13 = *(_DWORD *)(*a2 + 4 * v9);
      *(_DWORD *)(*a2 + 4 * v9) = *(_DWORD *)(*a2 + 4 * ((int)v7 - 1));
      *(_DWORD *)(v2 + 4 * ((int)v7 - 1)) = v13;
    }
    while ((_DWORD)v7 != (_DWORD)v4);
  }
  return this;
}

void fst::MakePrecedingInputSymbolsSameClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,kaldi::TidToTstateMapper>(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int *v8;
  std::vector<int>::pointer begin;
  unint64_t v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  unint64_t v33;
  _OWORD *v34;
  int v35;
  _QWORD *v36;
  int v37;
  int v38;
  uint64_t v39;
  int *v40;
  int v41;
  int v42;
  int v43[2];
  int v44[6];
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  unint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  void *__p;
  char *v54;
  char *v55;
  _QWORD v56[2];
  void *v57;
  _DWORD *v58;
  unint64_t v59;
  void *v60;
  void *v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  std::vector<int>::value_type __x;
  std::vector<int> v66;

  memset(&v66, 0, sizeof(v66));
  __x = -1;
  if (a1)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v6 = v5;
    if (v5 < 0)
      goto LABEL_114;
    std::vector<int>::resize(&v66, (v5 + 1), &__x);
    v66.__begin_[v6] = 0;
  }
  v63 = 0;
  v64 = 0;
  v62 = (uint64_t *)&v63;
  LODWORD(v47) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v45);
LABEL_5:
  if (!v45)
  {
    if ((int)v47 >= (int)v46)
      goto LABEL_36;
    goto LABEL_10;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45))
  {
    if (v45)
    {
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v45 + 24))();
LABEL_11:
      v59 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, v7, v56);
      while (1)
      {
        if (v56[0])
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v56[0] + 24))(v56[0]))
          {
            if (v56[0])
            {
              (*(void (**)(void))(*(_QWORD *)v56[0] + 8))();
              goto LABEL_31;
            }
LABEL_29:
            if (v58)
              --*v58;
LABEL_31:
            if (v45)
              (*(void (**)(uint64_t))(*(_QWORD *)v45 + 32))(v45);
            else
              LODWORD(v47) = v47 + 1;
            goto LABEL_5;
          }
          if (v56[0])
          {
            v8 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v56[0] + 32))();
            goto LABEL_18;
          }
        }
        else if (v59 >= (unint64_t)v57)
        {
          goto LABEL_29;
        }
        v8 = (int *)(v56[1] + 16 * v59);
LABEL_18:
        begin = v66.__begin_;
        v11 = v8 + 3;
        v10 = v8[3];
        if (v10 >= v66.__end_ - v66.__begin_)
        {
          std::vector<int>::resize(&v66, (int)v10 + 1, &__x);
          v10 = *v11;
          begin = v66.__begin_;
        }
        v12 = begin[v10];
        v13 = *v8;
        if (v12 == __x)
        {
          v14 = kaldi::TidToTstateMapper::operator()(a3, v13);
          v66.__begin_[*v11] = v14;
        }
        else if (v12 != kaldi::TidToTstateMapper::operator()(a3, v13))
        {
          std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v62, v8 + 3, v8 + 3);
        }
        if (v56[0])
          (*(void (**)(_QWORD))(*(_QWORD *)v56[0] + 40))(v56[0]);
        else
          ++v59;
      }
    }
LABEL_10:
    v7 = v47;
    goto LABEL_11;
  }
  if (v45)
    (*(void (**)(void))(*(_QWORD *)v45 + 8))();
LABEL_36:
  if (!v64)
    goto LABEL_113;
  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v56, &v62);
  __p = 0;
  v54 = 0;
  v55 = 0;
  LODWORD(v52) = 0;
  (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)a2 + 128))(a2, &v50);
  while (2)
  {
    if (!v50)
    {
      if ((int)v52 >= (int)v51)
        goto LABEL_85;
      goto LABEL_43;
    }
    if (!(*(unsigned int (**)(uint64_t *))(*v50 + 16))(v50))
    {
      if (v50)
      {
        v15 = (*(uint64_t (**)(void))(*v50 + 24))();
        goto LABEL_44;
      }
LABEL_43:
      v15 = v52;
LABEL_44:
      v49 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, v15, &v45);
      v16 = v15;
LABEL_45:
      if (v45)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45))
        {
          if (v45)
          {
            (*(void (**)(void))(*(_QWORD *)v45 + 8))();
            goto LABEL_80;
          }
LABEL_78:
          if (v48)
            --*v48;
LABEL_80:
          if (v50)
            (*(void (**)(uint64_t *))(*v50 + 32))(v50);
          else
            LODWORD(v52) = v52 + 1;
          continue;
        }
        if (v45)
        {
          v17 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v45 + 32))();
          goto LABEL_51;
        }
      }
      else if (v49 >= v47)
      {
        goto LABEL_78;
      }
      v17 = (_DWORD *)(v46 + 16 * v49);
LABEL_51:
      if (*v17 && kaldi::ConstIntegerSet<int>::count((uint64_t)v56, v17[3]))
      {
        if (v45)
          v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 48))(v45);
        else
          v18 = v49;
        v19 = v54;
        if (v54 >= v55)
        {
          v21 = (v54 - (_BYTE *)__p) >> 4;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v23 = v55 - (_BYTE *)__p;
          if ((v55 - (_BYTE *)__p) >> 3 > v22)
            v22 = v23 >> 3;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
            v24 = 0xFFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v55, v24);
          else
            v25 = 0;
          v26 = &v25[16 * v21];
          *(_QWORD *)v26 = v16;
          *((_QWORD *)v26 + 1) = v18;
          v28 = (char *)__p;
          v27 = v54;
          v29 = v26;
          if (v54 != __p)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 16;
              v27 -= 16;
            }
            while (v27 != v28);
            v27 = (char *)__p;
          }
          v20 = v26 + 16;
          __p = v29;
          v54 = v26 + 16;
          v55 = &v25[16 * v24];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_QWORD *)v54 = v16;
          *((_QWORD *)v19 + 1) = v18;
          v20 = v19 + 16;
        }
        v54 = v20;
      }
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
      else
        ++v49;
      goto LABEL_45;
    }
    break;
  }
  if (v50)
    (*(void (**)(void))(*v50 + 8))();
LABEL_85:
  v30 = 0;
  v31 = (unsigned int *)__p;
  v51 = 0;
  v52 = 0;
  v50 = (uint64_t *)&v51;
  while (2)
  {
    v32 = v31[4 * v30];
    v49 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, v32, &v45);
    v33 = *((_QWORD *)__p + 2 * v30 + 1);
    if (v45)
    {
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v45 + 64))(v45, v33);
      if (v45)
      {
        v34 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 32))(v45);
        goto LABEL_92;
      }
      v33 = v49;
    }
    else
    {
      v49 = *((_QWORD *)__p + 2 * v30 + 1);
    }
    v34 = (_OWORD *)(v46 + 16 * v33);
LABEL_92:
    *(_OWORD *)v44 = *v34;
    v35 = kaldi::TidToTstateMapper::operator()(a3, v44[0]);
    v43[0] = v44[3];
    v43[1] = v35;
    v36 = v51;
    if (v51)
    {
      while (2)
      {
        v37 = *((_DWORD *)v36 + 7);
        if (v44[3] >= v37)
        {
          if (v37 < v44[3])
            goto LABEL_97;
          v38 = *((_DWORD *)v36 + 8);
          if (v35 >= v38)
          {
            if (v38 >= v35)
              goto LABEL_100;
LABEL_97:
            ++v36;
          }
        }
        v36 = (_QWORD *)*v36;
        if (!v36)
          break;
        continue;
      }
    }
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    v40 = v43;
    *((_DWORD *)std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(&v50, v43, (uint64_t)&std::piecewise_construct, (_QWORD **)&v40)+ 9) = v39;
    v40 = 0;
    v41 = 0;
    v42 = v44[3];
    (*(void (**)(uint64_t, uint64_t, int **))(*(_QWORD *)a2 + 208))(a2, v39, &v40);
LABEL_100:
    v40 = v43;
    v44[3] = *((_DWORD *)std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(&v50, v43, (uint64_t)&std::piecewise_construct, (_QWORD **)&v40)+ 9);
    (*(void (**)(uint64_t, uint64_t, int **))(*(_QWORD *)a2 + 296))(a2, v32, &v40);
    (*(void (**)(int *, _QWORD))(*(_QWORD *)v40 + 64))(v40, *((_QWORD *)__p + 2 * v30 + 1));
    (*(void (**)(int *, int *))(*(_QWORD *)v40 + 88))(v40, v44);
    if (v40)
      (*(void (**)(int *))(*(_QWORD *)v40 + 8))(v40);
    if (v45)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    }
    else if (v48)
    {
      --*v48;
    }
    ++v30;
    v31 = (unsigned int *)__p;
    if (v30 < (v54 - (_BYTE *)__p) >> 4)
      continue;
    break;
  }
  std::__tree<int>::destroy((uint64_t)&v50, v51);
  if (__p)
  {
    v54 = (char *)__p;
    operator delete(__p);
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v57)
    operator delete(v57);
LABEL_113:
  std::__tree<int>::destroy((uint64_t)&v62, v63);
LABEL_114:
  if (v66.__begin_)
  {
    v66.__end_ = v66.__begin_;
    operator delete(v66.__begin_);
  }
}

void sub_1ADED812C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  if (__p)
    operator delete(__p);
  kaldi::ConstIntegerSet<int>::~ConstIntegerSet(&a27);
  std::__tree<int>::destroy(v30 - 144, *(_QWORD **)(v30 - 136));
  v32 = *(void **)(v30 - 112);
  if (v32)
  {
    *(_QWORD *)(v30 - 104) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::TidToTstateMapper::operator()(uint64_t a1, int a2)
{
  kaldi::TransitionModel *v4;
  int **v6;
  int *v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  int *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD v17[34];

  if (a2 == -1)
    return 0xFFFFFFFFLL;
  if (a2 >= 1)
  {
    v4 = *(kaldi::TransitionModel **)a1;
    if ((int)(((*(_QWORD *)(*(_QWORD *)a1 + 152) - *(_QWORD *)(*(_QWORD *)a1 + 144)) >> 2) - 1) >= a2)
    {
      if (!kaldi::TransitionModel::IsSelfLoop(v4, a2))
        return kaldi::TransitionModel::TransitionIdToTransitionState(*(kaldi::TransitionModel **)a1, a2);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "AddSelfLoops: graph already has self-loops.");
LABEL_20:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
    goto LABEL_8;
  }
  if (a2)
  {
LABEL_8:
    v6 = *(int ***)(a1 + 8);
    v7 = *v6;
    v8 = v6[1];
    if (v8 == v7)
      goto LABEL_18;
    v9 = v8 - v7;
    do
    {
      v10 = v9 >> 1;
      v11 = &v7[v9 >> 1];
      v13 = *v11;
      v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (v13 < a2)
        v7 = v12;
      else
        v9 = v10;
    }
    while (v9);
    if (v7 == v8 || *v7 > a2)
    {
LABEL_18:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Label ", 6);
      v14 = (_QWORD *)std::ostream::operator<<();
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" neither 0, nor a disambiguation symbol ", 40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(#transition id = ", 18);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, ").");
      goto LABEL_20;
    }
  }
  return 0;
}

uint64_t kaldi::ConstIntegerSet<int>::ConstIntegerSet(uint64_t a1, _QWORD *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  kaldi::CopySetToVector<int>(a2, (std::vector<unsigned int> *)(a1 + 40));
  kaldi::ConstIntegerSet<int>::InitInternal((int *)a1);
  return a1;
}

void sub_1ADED8490(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v2;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 48) = v6;
    operator delete(v6);
  }
  if (*v3)
    operator delete(*v3);
  _Unwind_Resume(exception_object);
}

void fst::MakeFollowingInputSymbolsSameClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,kaldi::TidToTstateMapper>(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char v21;
  char *v22;
  int v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  void *__p;
  char *v56;
  char *v57;

  __p = 0;
  v56 = 0;
  v57 = 0;
  LODWORD(v54) = 0;
  (*(void (**)(uint64_t, char **))(*(_QWORD *)a2 + 128))(a2, &v52);
  while (1)
  {
    if (!v52)
    {
      if ((int)v54 >= (int)v53)
        goto LABEL_59;
LABEL_7:
      v6 = v54;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(char *))(*(_QWORD *)v52 + 16))(v52))
      break;
    if (!v52)
      goto LABEL_7;
    v6 = (*(uint64_t (**)(void))(*(_QWORD *)v52 + 24))();
LABEL_8:
    v51 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, v6, &v47);
    v7 = -1;
    while (1)
    {
      if (!v47)
      {
        if (v51 >= v49)
        {
          v12 = 0;
          goto LABEL_27;
        }
        goto LABEL_14;
      }
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
      v9 = v47;
      if ((v8 & 1) != 0)
        break;
      if (v47)
      {
        v10 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v47 + 32))();
        goto LABEL_15;
      }
LABEL_14:
      v10 = (int *)(v48 + 16 * v51);
LABEL_15:
      v11 = *v10;
      if (v7 == -1)
      {
        v7 = kaldi::TidToTstateMapper::operator()(a3, v11);
      }
      else if (v7 != kaldi::TidToTstateMapper::operator()(a3, v11))
      {
        v12 = 1;
        v9 = v47;
        if (v47)
          goto LABEL_25;
        goto LABEL_27;
      }
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47);
      else
        ++v51;
    }
    v12 = 0;
    if (v47)
    {
LABEL_25:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      goto LABEL_29;
    }
LABEL_27:
    if (v50)
      --*v50;
LABEL_29:
    if (a1 && (v7 + 1) >= 2)
    {
      LODWORD(v47) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v6);
      LODWORD(v46) = 2139095040;
      if (*(float *)&v47 == INFINITY)
        v21 = v12;
      else
        v21 = 1;
      if ((v21 & 1) != 0)
      {
LABEL_32:
        v13 = v56;
        if (v56 >= v57)
        {
          v15 = (char *)__p;
          v16 = (v56 - (_BYTE *)__p) >> 2;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v18 = v57 - (_BYTE *)__p;
          if ((v57 - (_BYTE *)__p) >> 1 > v17)
            v17 = v18 >> 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v57, v19);
            v15 = (char *)__p;
            v13 = v56;
          }
          else
          {
            v20 = 0;
          }
          v22 = &v20[4 * v16];
          *(_DWORD *)v22 = v6;
          v14 = v22 + 4;
          while (v13 != v15)
          {
            v23 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            v22 -= 4;
          }
          __p = v22;
          v56 = v14;
          v57 = &v20[4 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_DWORD *)v56 = v6;
          v14 = v13 + 4;
        }
        v56 = v14;
      }
    }
    else if (v12)
    {
      goto LABEL_32;
    }
    if (v52)
      (*(void (**)(char *))(*(_QWORD *)v52 + 32))(v52);
    else
      LODWORD(v54) = (_DWORD)v54 + 1;
  }
  if (v52)
    (*(void (**)(void))(*(_QWORD *)v52 + 8))();
LABEL_59:
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v24 = v56;
  if (v56 == __p)
    goto LABEL_103;
  v25 = 0;
  v26 = 0;
  v24 = (char *)__p;
  while (2)
  {
    v27 = *(unsigned int *)&v24[4 * v26];
    v53 = v25;
    v51 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, v27, &v47);
    while (2)
    {
      if (!v47)
      {
        if (v51 >= v49)
          goto LABEL_89;
        goto LABEL_67;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47))
      {
        if (v47)
        {
          v28 = (_OWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v47 + 32))();
LABEL_68:
          v29 = v53;
          if (v53 >= v54)
          {
            v31 = (v53 - v52) >> 4;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 60)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v33 = v54 - v52;
            if ((v54 - v52) >> 3 > v32)
              v32 = v33 >> 3;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
              v34 = 0xFFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v54, v34);
            else
              v35 = 0;
            v36 = &v35[16 * v31];
            *(_OWORD *)v36 = *v28;
            v38 = v52;
            v37 = v53;
            v39 = v36;
            if (v53 != v52)
            {
              do
              {
                *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
                v39 -= 16;
                v37 -= 16;
              }
              while (v37 != v38);
              v37 = v52;
            }
            v30 = v36 + 16;
            v52 = v39;
            v53 = v36 + 16;
            v54 = &v35[16 * v34];
            if (v37)
              operator delete(v37);
          }
          else
          {
            *(_OWORD *)v53 = *v28;
            v30 = v29 + 16;
          }
          v53 = v30;
          if (v47)
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47);
          else
            ++v51;
          continue;
        }
LABEL_67:
        v28 = (_OWORD *)(v48 + 16 * v51);
        goto LABEL_68;
      }
      break;
    }
    if (v47)
    {
      (*(void (**)(void))(*(_QWORD *)v47 + 8))();
      goto LABEL_91;
    }
LABEL_89:
    if (v50)
      --*v50;
LABEL_91:
    v25 = v52;
    v40 = v53;
    if (v53 == v52)
    {
      v25 = v53;
    }
    else
    {
      v41 = 0;
      v42 = 0;
      do
      {
        if (*(_DWORD *)&v25[v41])
        {
          v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
          v44 = *(_DWORD *)&v25[v41 + 12];
          v47 = *(unsigned int *)&v25[v41];
          LODWORD(v48) = 0;
          HIDWORD(v48) = v44;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 208))(a2, v43, &v47);
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 296))(a2, v27, &v46);
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v46 + 64))(v46, v42);
          v45 = *(_DWORD *)&v25[v41 + 4];
          LODWORD(v47) = 0;
          HIDWORD(v47) = v45;
          LODWORD(v48) = *(_DWORD *)&v25[v41 + 8];
          HIDWORD(v48) = v43;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v46 + 88))(v46, &v47);
          if (v46)
            (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
          v25 = v52;
          v40 = v53;
        }
        ++v42;
        v41 += 16;
      }
      while (v42 < (v40 - v25) >> 4);
    }
    ++v26;
    v24 = (char *)__p;
    if (v26 < (v56 - (_BYTE *)__p) >> 2)
      continue;
    break;
  }
  if (v25)
  {
    v53 = v25;
    operator delete(v25);
    v24 = (char *)__p;
  }
LABEL_103:
  if (v24)
  {
    v56 = v24;
    operator delete(v24);
  }
}

void sub_1ADED8A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::__unordered_map_hasher<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,kaldi::HmmCacheHash,std::equal_to<std::pair<int,std::vector<int>>>,true>,std::__unordered_map_equal<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::equal_to<std::pair<int,std::vector<int>>>,kaldi::HmmCacheHash,true>,std::allocator<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>>>::find<std::pair<int,std::vector<int>>>(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int v5;
  int v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;

  v3 = *(int **)(a2 + 8);
  v4 = *(int **)(a2 + 16);
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *v3++;
      v5 = v6 + 7853 * v5;
    }
    while (v3 != v4);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v5 + 103049 * *(_DWORD *)a2;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v5 + 103049 * *(_DWORD *)a2;
    if (*(_QWORD *)&v7 <= v8)
      v11 = v8 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v8;
  }
  v12 = *(_QWORD **)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = (_QWORD *)*v12;
  if (*v12)
  {
    v14 = (uint64_t)(a1 + 4);
    do
    {
      v15 = v13[1];
      if (v15 == v8)
      {
        if (std::equal_to<std::pair<int,std::vector<int>>>::operator()[abi:ne180100](v14, (uint64_t)(v13 + 2), a2))
          return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(_QWORD *)&v7)
            v15 %= *(_QWORD *)&v7;
        }
        else
        {
          v15 &= *(_QWORD *)&v7 - 1;
        }
        if (v15 != v11)
          return 0;
      }
      v13 = (_QWORD *)*v13;
    }
    while (v13);
  }
  return v13;
}

BOOL std::equal_to<std::pair<int,std::vector<int>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  size_t v5;
  const void *v6;

  if (*(_DWORD *)a2 == *(_DWORD *)a3
    && (v4 = *(const void **)(a2 + 8),
        v5 = *(_QWORD *)(a2 + 16) - (_QWORD)v4,
        v6 = *(const void **)(a3 + 8),
        v5 == *(_QWORD *)(a3 + 16) - (_QWORD)v6))
  {
    return memcmp(v4, v6, v5) == 0;
  }
  else
  {
    return 0;
  }
}

void fst::Push<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::ReweightType)0>(uint64_t a1, uint64_t *a2, unsigned int a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  float *v15;
  int *p_p;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD v24[3];
  float v25;
  int v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  void *__p;
  uint64_t v33;
  char v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38[3];
  uint64_t v39;

  if ((a3 & 3) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(*a2 + 168))(a2, a1);
    fst::Push<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a2, 0, (a3 >> 2) & 1, a4);
  }
  else if ((a3 & 2) != 0)
  {
    memset(v38, 0, sizeof(v38));
    fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFst(&v36);
    fst::ArcMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(a1, (uint64_t)&v36);
    if ((a3 & 1) != 0)
    {
      fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)&v36, v38, 1, a4);
    }
    else
    {
      fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::ArcTpl<fst::LogWeightTpl<float>,int>>>::ArcMapFst(&__p, a1, (uint64_t)&v28);
      fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::ArcMapFst(&v28, (uint64_t)&__p, (uint64_t)&v39);
      fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)&v28, v38, 1, a4);
      v28 = &unk_1E5D23CA0;
      v11 = v29;
      if (v29)
      {
        v12 = *(_DWORD *)(v29 + 56) - 1;
        *(_DWORD *)(v29 + 56) = v12;
        if (!v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      __p = &unk_1E5D24010;
      v13 = v33;
      if (v33)
      {
        v14 = *(_DWORD *)(v33 + 56) - 1;
        *(_DWORD *)(v33 + 56) = v14;
        if (!v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    v15 = (float *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
    *(float *)&__p = *v15;
    std::list<int>::list(&v33, (uint64_t)(v15 + 2));
    v35 = v15[8];
    if ((a3 & 0xC) != 0)
    {
      fst::ComputeTotalWeight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)&v36, v38, 1, (uint64_t)&v28);
      LODWORD(__p) = (_DWORD)v28;
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v33, v30, (uint64_t)&v29);
      v35 = v31;
      std::__list_imp<char *>::clear(&v29);
      if ((a3 & 8) != 0)
        p_p = (int *)&__p;
      else
        p_p = (int *)fst::StringWeight<int,(fst::StringType)0>::One();
      v26 = *p_p;
      std::list<int>::list(v27, (uint64_t)(p_p + 2));
      v17 = v35;
      if ((a3 & 4) == 0)
        v17 = 0.0;
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v28, &v26, v17);
      LODWORD(__p) = (_DWORD)v28;
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v33, v30, (uint64_t)&v29);
      v35 = v31;
      std::__list_imp<char *>::clear(&v29);
      std::__list_imp<char *>::clear(v27);
    }
    fst::Reweight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t *)&v36, v38, 0);
    if ((a3 & 0xC) != 0)
    {
      v23 = (int)__p;
      std::list<int>::list(v24, (uint64_t)&v33);
      v25 = v35;
      fst::RemoveWeight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)&v36, (uint64_t)&v23, 0);
      std::__list_imp<char *>::clear(v24);
    }
    fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFst(&v28, (uint64_t)&v36);
    v39 = 0;
    fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>((uint64_t)&v28, (uint64_t)a2, (uint64_t)&v39);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v18);
    v28 = &unk_1E5D26B88;
    v19 = v29;
    if (v29)
    {
      v20 = *(_DWORD *)(v29 + 56) - 1;
      *(_DWORD *)(v29 + 56) = v20;
      if (!v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    std::__list_imp<char *>::clear(&v33);
    v36 = &unk_1E5D25BC0;
    v21 = v37;
    if (v37)
    {
      v22 = *(_DWORD *)(v37 + 56) - 1;
      *(_DWORD *)(v37 + 56) = v22;
      if (!v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    __p = v38;
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "WARNING");
    v8 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)&__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Push: pushing type is set to 0: ", 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"pushing neither labels nor weights.", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v28);
    if (v34 < 0)
      operator delete(__p);
    (*(void (**)(uint64_t *, uint64_t))(*a2 + 168))(a2, a1);
  }
}

void sub_1ADED9100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _DWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  int v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;
  int v35;

  if (a20)
  {
    v31 = a20[14] - 1;
    a20[14] = v31;
    if (!v31)
      (*(void (**)(_DWORD *))(*(_QWORD *)a20 + 8))(a20);
  }
  __p = &unk_1E5D24010;
  v32 = a25;
  if (a25)
  {
    v33 = *(_DWORD *)(a25 + 56) - 1;
    *(_DWORD *)(a25 + 56) = v33;
    if (!v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  *(_QWORD *)(v29 - 128) = &unk_1E5D25BC0;
  v34 = *(_DWORD **)(v29 - 120);
  if (v34)
  {
    v35 = v34[14] - 1;
    v34[14] = v35;
    if (!v35)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
  }
  __p = (void *)(v29 - 112);
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1ADED9268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  fst::LogMessage::~LogMessage((fst::LogMessage *)va);
  JUMPOUT(0x1ADED9274);
}

_QWORD *fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t *a2, char a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  float v12;
  _DWORD *v13;
  _QWORD *result;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  void ***v19;
  uint64_t v20;
  float v21;
  char v22;
  int v23;
  void ***v24;
  int v25;
  float v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void **v33[9];

  if ((a3 & 1) != 0)
  {
    fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFst(&v31);
    fst::Reverse<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, (uint64_t *)&v31, 1);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>((uint64_t)v33, (uint64_t)&v31);
    v24 = v33;
    v25 = -1;
    v27 = 0;
    v26 = a4;
    fst::ShortestDistance<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>((uint64_t)&v31, &v28, (uint64_t)&v24);
    v8 = *a2;
    v7 = a2[1];
    if (v7 != *a2)
    {
      do
      {
        v9 = v7 - 40;
        std::__list_imp<char *>::clear((_QWORD *)(v7 - 32));
        v7 = v9;
      }
      while (v9 != v8);
    }
    a2[1] = v8;
    v10 = v28;
    if (v29 - v28 == 40
      && (*(_DWORD *)v28 && (*(_DWORD *)v28 == -2 ? (v11 = *(_QWORD *)(v28 + 24) == 0) : (v11 = 0), v11)
       || (v12 = *(float *)(v28 + 32), v12 >= -INFINITY) && v12 <= -INFINITY))
    {
      v13 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::NoWeight();
      std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::resize(a2, 1uLL, v13);
    }
    else
    {
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - *a2) >> 3);
      if (v15 < 0xCCCCCCCCCCCCCCCDLL * ((v29 - v28) >> 3) - 1)
      {
        do
        {
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Reverse((_DWORD *)(v10 + 40 * v15 + 40), (uint64_t)&v19);
          v16 = a2[1];
          if (v16 >= a2[2])
          {
            v17 = std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>(a2, &v19);
          }
          else
          {
            *(_DWORD *)v16 = (_DWORD)v19;
            std::list<int>::list((_QWORD *)(v16 + 8), (uint64_t)&v20);
            *(_DWORD *)(v16 + 32) = v23;
            v17 = v16 + 40;
            a2[1] = v16 + 40;
          }
          a2[1] = v17;
          std::__list_imp<char *>::clear(&v20);
          v10 = v28;
          v15 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
        }
        while (v15 < -1 - 0x3333333333333333 * ((v29 - v28) >> 3));
      }
    }
    fst::AutoQueue<int>::~AutoQueue(v33);
    v33[0] = (void **)&v28;
    std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__destroy_vector::operator()[abi:ne180100](v33);
    v31 = &unk_1E5D25080;
    result = (_QWORD *)v32;
    if (v32)
    {
      v18 = *(_DWORD *)(v32 + 56) - 1;
      *(_DWORD *)(v32 + 56) = v18;
      if (!v18)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  else
  {
    fst::AutoQueue<int>::AutoQueue<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>((uint64_t)v33, a1);
    v19 = v33;
    HIDWORD(v20) = -1;
    v22 = 0;
    v21 = a4;
    fst::ShortestDistance<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>(a1, a2, (uint64_t)&v19);
    return fst::AutoQueue<int>::~AutoQueue(v33);
  }
  return result;
}

void sub_1ADED94FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  fst::AutoQueue<int>::~AutoQueue((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D23CA0;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::ComputeTotalWeight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _DWORD *v7;
  _DWORD *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD v22[3];
  float v23;
  _BYTE v24[8];
  _QWORD v25[3];
  float v26;
  int v27;
  _QWORD v28[3];
  int v29;
  int v30;
  _QWORD v31[4];

  if (a3)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) <= (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
      v7 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
    else
      v7 = (_DWORD *)(*a2 + 40 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1));
    *(_DWORD *)a4 = *v7;
    result = std::list<int>::list((_QWORD *)(a4 + 8), (uint64_t)(v7 + 2));
    *(_DWORD *)(a4 + 32) = v7[8];
  }
  else
  {
    v8 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
    *(_DWORD *)a4 = *v8;
    result = std::list<int>::list((_QWORD *)(a4 + 8), (uint64_t)(v8 + 2));
    *(_DWORD *)(a4 + 32) = v8[8];
    v10 = *a2;
    if (a2[1] != *a2)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(&v21, a1, v12);
        fst::Times<int,(fst::StringType)0>((int *)(v10 + v11), (uint64_t)&v21, (uint64_t)&v30);
        v13 = *(float *)(v10 + v11 + 32);
        v14 = NAN;
        if (v13 != -INFINITY)
        {
          v14 = NAN;
          if (v23 != -INFINITY)
          {
            v14 = INFINITY;
            v15 = v23 == INFINITY || v13 == INFINITY;
            v16 = v13 + v23;
            if (!v15)
              v14 = v16;
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v24, &v30, v14);
        std::__list_imp<char *>::clear(v31);
        fst::Plus<int>(a4, (uint64_t)v24, (uint64_t)&v30);
        v17 = *(float *)(a4 + 32);
        v18 = v26;
        if (v17 != INFINITY)
        {
          if (v26 == INFINITY)
          {
            v18 = *(float *)(a4 + 32);
          }
          else if (v17 <= v26)
          {
            v20 = expf(-(float)(v26 - v17));
            v18 = v17 - logf(v20 + 1.0);
          }
          else
          {
            v19 = expf(-(float)(v17 - v26));
            v18 = v18 - logf(v19 + 1.0);
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v27, &v30, v18);
        std::__list_imp<char *>::clear(v31);
        *(_DWORD *)a4 = v27;
        if (&v27 != (int *)a4)
          std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a4 + 8), v28[1], (uint64_t)v28);
        *(_DWORD *)(a4 + 32) = v29;
        std::__list_imp<char *>::clear(v28);
        std::__list_imp<char *>::clear(v25);
        result = std::__list_imp<char *>::clear(v22);
        ++v12;
        v10 = *a2;
        v11 += 40;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > v12);
    }
  }
  return result;
}

void sub_1ADED98B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10)
{
  _QWORD *v10;
  _QWORD *v11;

  std::__list_imp<char *>::clear(v11);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(a10);
  std::__list_imp<char *>::clear(a9);
  _Unwind_Resume(a1);
}

void sub_1ADED9908()
{
  JUMPOUT(0x1ADED98F8);
}

uint64_t fst::Reweight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t *a1, _QWORD *a2, int a3)
{
  uint64_t result;
  fst *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  BOOL v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  BOOL v29;
  _BOOL4 v30;
  uint64_t v31;
  float v32;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  BOOL v45;
  _BOOL4 v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t *v60;
  BOOL v61;
  _BOOL4 v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  float v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  uint64_t *v78;
  float v79;
  uint64_t v81;
  float v82;
  float v83;
  uint64_t *v84;
  int v85;
  uint64_t *v86;
  float v87;
  unint64_t v89;
  unint64_t v90;
  unsigned int v92;
  int v93;
  _QWORD v94[3];
  float v95;
  _BYTE v96[8];
  _QWORD v97[4];
  _BYTE v98[8];
  uint64_t v99;
  _BYTE v100[8];
  _QWORD v101[4];
  float v102;
  _QWORD v103[3];
  float v104;
  float v105;
  _QWORD v106[3];
  float v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  void *v113;
  uint64_t v114;
  uint64_t v115[2];
  float v116;
  float v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  _QWORD v129[4];

  result = (*(uint64_t (**)(uint64_t *))(*a1 + 160))(a1);
  if (!(_DWORD)result)
    return result;
  if (a3 == 1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&v113, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&v113, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v120, (uint64_t)&v113);
    v7 = (_QWORD *)fst::cerr(v6);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Reweight: Reweighting to the final states requires ", 51);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Weight to be right distributive: ", 33);
    v51 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Type();
    v52 = *(char *)(v51 + 23);
    if (v52 >= 0)
      v53 = v51;
    else
      v53 = *(_QWORD *)v51;
    if (v52 >= 0)
      v54 = *(unsigned __int8 *)(v51 + 23);
    else
      v54 = *(_QWORD *)(v51 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, v53, v54);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v120);
    if (SHIBYTE(v115[0]) < 0)
      operator delete(v113);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 192))(a1, 4, 4);
  }
  v127 = 0;
  (*(void (**)(uint64_t *, uint64_t *))(*a1 + 128))(a1, &v125);
  while (1)
  {
    if (v125)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v125 + 16))(v125))
        goto LABEL_91;
      if (v125)
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125);
        goto LABEL_12;
      }
    }
    else if (v127 >= v126)
    {
      goto LABEL_91;
    }
    v8 = v127;
LABEL_12:
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) == v8)
      break;
    v9 = v8;
    v10 = *a2 + 40 * v8;
    v120 = *(_DWORD *)v10;
    std::list<int>::list(&v121, v10 + 8);
    v124 = *(float *)(v10 + 32);
    v11 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
    if (v120)
      v12 = v123 + 1;
    else
      v12 = 0;
    if (*(_DWORD *)v11)
      v13 = *(_QWORD *)(v11 + 24) + 1;
    else
      v13 = 0;
    if (v12 != v13)
      goto LABEL_33;
    v14 = 0;
    v15 = v122;
    v16 = (uint64_t *)(v11 + 16);
    v17 = v120 && v120 == *(_DWORD *)v11;
    v18 = !v17;
    while (1)
    {
      v19 = *v16;
      if ((v14 & 1) == 0 && v18)
        break;
      if ((uint64_t *)v15 == &v121)
        goto LABEL_32;
      if (*(_DWORD *)(v15 + 16) != *(_DWORD *)(v19 + 16))
        goto LABEL_33;
      v15 = *(_QWORD *)(v15 + 8);
      v16 = (uint64_t *)(v19 + 8);
      v14 = 1;
    }
    if (v120)
      goto LABEL_33;
LABEL_32:
    *(float *)&v113 = v124;
    LODWORD(v108) = 0;
    LODWORD(v108) = *(_DWORD *)(v11 + 32);
    if (v124 != *(float *)&v108)
    {
LABEL_33:
      (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 296))(a1, v9, &v119);
      while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v119 + 24))(v119))
      {
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 32))(v119);
        v113 = *(void **)v20;
        LODWORD(v114) = *(_DWORD *)(v20 + 8);
        std::list<int>::list(v115, v20 + 16);
        v21 = *(int *)(v20 + 48);
        v117 = *(float *)(v20 + 40);
        v118 = v21;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) > v21)
        {
          v22 = *a2 + 40 * (int)v21;
          LODWORD(v108) = *(_DWORD *)v22;
          std::list<int>::list(&v109, v22 + 8);
          v112 = *(float *)(v22 + 32);
          v23 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
          if ((_DWORD)v108)
            v24 = v111 + 1;
          else
            v24 = 0;
          if (*(_DWORD *)v23)
            v25 = *(_QWORD *)(v23 + 24) + 1;
          else
            v25 = 0;
          if (v24 != v25)
            goto LABEL_56;
          v26 = 0;
          v27 = v110;
          v28 = (uint64_t *)(v23 + 16);
          v29 = (_DWORD)v108 && (_DWORD)v108 == *(_DWORD *)v23;
          v30 = !v29;
          while (1)
          {
            v31 = *v28;
            if ((v26 & 1) == 0 && v30)
              break;
            if ((uint64_t *)v27 == &v109)
              goto LABEL_55;
            if (*(_DWORD *)(v27 + 16) != *(_DWORD *)(v31 + 16))
              goto LABEL_56;
            v27 = *(_QWORD *)(v27 + 8);
            v28 = (uint64_t *)(v31 + 8);
            v26 = 1;
          }
          if ((_DWORD)v108)
            goto LABEL_56;
LABEL_55:
          v105 = v112;
          v102 = 0.0;
          v102 = *(float *)(v23 + 32);
          if (v112 != v102)
          {
LABEL_56:
            if (!a3)
            {
              fst::Times<int,(fst::StringType)0>((int *)&v114, (uint64_t)&v108, (uint64_t)&v128);
              v32 = NAN;
              if (v117 != -INFINITY)
              {
                v32 = NAN;
                if (v112 != -INFINITY)
                {
                  v32 = INFINITY;
                  if (v112 != INFINITY && v117 != INFINITY)
                    v32 = v117 + v112;
                }
              }
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v102, (int *)&v128, v32);
              std::__list_imp<char *>::clear(v129);
              fst::DivideLeft<int,(fst::StringType)0>((int *)&v102, &v120, (uint64_t)&v128);
              v34 = NAN;
              if (v104 != -INFINITY)
              {
                if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
                {
                  v34 = INFINITY;
                  if (v104 != INFINITY)
                    v34 = v104 - v124;
                }
                else
                {
                  v34 = NAN;
                }
              }
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v105, (int *)&v128, v34);
              std::__list_imp<char *>::clear(v129);
              *(float *)&v114 = v105;
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v115, v106[1], (uint64_t)v106);
              v117 = v107;
              std::__list_imp<char *>::clear(v106);
              std::__list_imp<char *>::clear(v103);
            }
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v119 + 88))(v119, &v113);
          }
          std::__list_imp<char *>::clear(&v109);
        }
        std::__list_imp<char *>::clear(v115);
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 40))(v119);
      }
      if (v119)
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
      if (!a3)
      {
        (*(void (**)(void **__return_ptr, uint64_t *, uint64_t))(*a1 + 32))(&v113, a1, v9);
        fst::DivideLeft<int,(fst::StringType)0>((int *)&v113, &v120, (uint64_t)&v108);
        v35 = NAN;
        if (v116 != -INFINITY)
        {
          if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            v35 = INFINITY;
            if (v116 != INFINITY)
              v35 = v116 - v124;
          }
          else
          {
            v35 = NAN;
          }
        }
        fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v100, (int *)&v108, v35);
        std::__list_imp<char *>::clear(&v109);
        (*(void (**)(uint64_t *, uint64_t, _BYTE *))(*a1 + 184))(a1, v9, v100);
        std::__list_imp<char *>::clear(v101);
        std::__list_imp<char *>::clear(&v114);
      }
    }
    std::__list_imp<char *>::clear(&v121);
    if (v125)
      (*(void (**)(uint64_t))(*(_QWORD *)v125 + 32))(v125);
    else
      ++v127;
  }
  while (1)
  {
LABEL_91:
    if (!v125)
    {
      if (v127 >= v126)
        break;
      goto LABEL_88;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 16))(v125) & 1) != 0)
      break;
    if (!v125)
      goto LABEL_90;
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125);
LABEL_88:
    if (v125)
      (*(void (**)(uint64_t))(*(_QWORD *)v125 + 32))(v125);
    else
LABEL_90:
      ++v127;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3) <= (*(int (**)(uint64_t *))(*a1 + 24))(a1))
    v36 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  else
    v36 = *a2 + 40 * (*(int (**)(uint64_t *))(*a1 + 24))(a1);
  v120 = *(_DWORD *)v36;
  std::list<int>::list(&v121, v36 + 8);
  v124 = *(float *)(v36 + 32);
  v37 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
  v39 = a1;
  if (v120)
    v40 = v123 + 1;
  else
    v40 = 0;
  if (*(_DWORD *)v37)
    v41 = *(_QWORD *)(v37 + 24) + 1;
  else
    v41 = 0;
  if (v40 != v41)
    goto LABEL_127;
  v42 = 0;
  v43 = v122;
  v44 = (uint64_t *)(v37 + 16);
  v45 = v120 && v120 == *(_DWORD *)v37;
  v46 = !v45;
  v47 = !v46;
  while (1)
  {
    v48 = *v44;
    if ((v42 & 1) == 0 && !v47)
      break;
    if ((uint64_t *)v43 == &v121)
      goto LABEL_126;
    if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v48 + 16))
      goto LABEL_127;
    v43 = *(_QWORD *)(v43 + 8);
    v44 = (uint64_t *)(v48 + 8);
    v42 = 1;
  }
  if (v120)
    goto LABEL_127;
LABEL_126:
  *(float *)&v113 = v124;
  LODWORD(v108) = 0;
  LODWORD(v108) = *(_DWORD *)(v37 + 32);
  v38.n128_f32[0] = v124;
  if (v124 != *(float *)&v108)
  {
LABEL_127:
    v55 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
    if (v120)
      v56 = v123 + 1;
    else
      v56 = 0;
    if (*(_DWORD *)v55)
      v57 = *(_QWORD *)(v55 + 24) + 1;
    else
      v57 = 0;
    if (v56 != v57)
      goto LABEL_148;
    v58 = 0;
    v59 = v122;
    v60 = (uint64_t *)(v55 + 16);
    v61 = v120 && v120 == *(_DWORD *)v55;
    v62 = !v61;
    v63 = !v62;
    while (1)
    {
      v64 = *v60;
      if ((v58 & 1) == 0 && !v63)
        break;
      if ((uint64_t *)v59 == &v121)
        goto LABEL_147;
      if (*(_DWORD *)(v59 + 16) != *(_DWORD *)(v64 + 16))
        goto LABEL_148;
      v59 = *(_QWORD *)(v59 + 8);
      v60 = (uint64_t *)(v64 + 8);
      v58 = 1;
    }
    if (v120)
      goto LABEL_148;
LABEL_147:
    *(float *)&v113 = v124;
    LODWORD(v108) = 0;
    LODWORD(v108) = *(_DWORD *)(v55 + 32);
    v38.n128_f32[0] = v124;
    if (v124 != *(float *)&v108)
    {
LABEL_148:
      v65 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x2000000000, 1);
      v66 = *a1;
      if ((v65 & 0x2000000000) != 0)
      {
        v92 = (*(uint64_t (**)(uint64_t *))(v66 + 24))(a1);
        (*(void (**)(uint64_t *))(*a1 + 296))(a1);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v128 + 24))(v128))
        {
          v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v128 + 32))(v128);
          v113 = *(void **)v71;
          LODWORD(v114) = *(_DWORD *)(v71 + 8);
          std::list<int>::list(v115, v71 + 16);
          v72 = *(_DWORD *)(v71 + 48);
          v117 = *(float *)(v71 + 40);
          v118 = v72;
          if (a3)
          {
            v73 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
            fst::Divide<int>((int *)v73, &v120, 1, (uint64_t)&v102);
            v74 = *(float *)(v73 + 32);
            v75 = NAN;
            if (v74 != -INFINITY)
            {
              if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              {
                v75 = INFINITY;
                if (v74 != INFINITY)
                  v75 = v74 - v124;
              }
              else
              {
                v75 = NAN;
              }
            }
            fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v105, (int *)&v102, v75);
            std::__list_imp<char *>::clear(v103);
            fst::Times<int,(fst::StringType)0>((int *)&v105, (uint64_t)&v114, (uint64_t)&v102);
            v79 = NAN;
            if (v107 != -INFINITY)
            {
              v79 = NAN;
              if (v117 != -INFINITY)
              {
                v79 = INFINITY;
                if (v117 != INFINITY && v107 != INFINITY)
                  v79 = v107 + v117;
              }
            }
            fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v108, (int *)&v102, v79);
            std::__list_imp<char *>::clear(v103);
            LODWORD(v114) = v108;
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v115, v110, (uint64_t)&v109);
            v117 = v112;
            std::__list_imp<char *>::clear(&v109);
            v78 = v106;
          }
          else
          {
            fst::Times<int,(fst::StringType)0>(&v120, (uint64_t)&v114, (uint64_t)&v105);
            v76 = NAN;
            if (v124 != -INFINITY)
            {
              v76 = NAN;
              if (v117 != -INFINITY)
              {
                v76 = INFINITY;
                if (v117 != INFINITY && v124 != INFINITY)
                  v76 = v124 + v117;
              }
            }
            fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v108, (int *)&v105, v76);
            std::__list_imp<char *>::clear(v106);
            LODWORD(v114) = v108;
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v115, v110, (uint64_t)&v109);
            v117 = v112;
            v78 = &v109;
          }
          std::__list_imp<char *>::clear(v78);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 88))(v128, &v113);
          std::__list_imp<char *>::clear(v115);
          (*(void (**)(uint64_t))(*(_QWORD *)v128 + 40))(v128);
        }
        if (v128)
          (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
        v39 = a1;
        if (a3)
        {
          v81 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
          fst::Divide<int>((int *)v81, &v120, 1, (uint64_t)&v108);
          v82 = *(float *)(v81 + 32);
          v83 = NAN;
          if (v82 != -INFINITY)
          {
            if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              v83 = INFINITY;
              if (v82 != INFINITY)
                v83 = v82 - v124;
            }
            else
            {
              v83 = NAN;
            }
          }
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v113, (int *)&v108, v83);
          std::__list_imp<char *>::clear(&v109);
          (*(void (**)(uint64_t *__return_ptr, uint64_t *, _QWORD))(*a1 + 32))(&v108, a1, v92);
          fst::Times<int,(fst::StringType)0>((int *)&v113, (uint64_t)&v108, (uint64_t)&v105);
          v87 = NAN;
          if (v116 != -INFINITY)
          {
            v87 = NAN;
            if (v112 != -INFINITY)
            {
              v87 = INFINITY;
              if (v112 != INFINITY && v116 != INFINITY)
                v87 = v116 + v112;
            }
          }
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v96, (int *)&v105, v87);
          std::__list_imp<char *>::clear(v106);
          (*(void (**)(uint64_t *, _QWORD, _BYTE *))(*a1 + 184))(a1, v92, v96);
          std::__list_imp<char *>::clear(v97);
          v84 = &v109;
        }
        else
        {
          (*(void (**)(void **__return_ptr, uint64_t *, _QWORD))(*a1 + 32))(&v113, a1, v92);
          fst::Times<int,fst::LogWeightTpl<float>,(fst::GallicType)0>((uint64_t)&v120, (uint64_t)&v113, (uint64_t)v98);
          (*(void (**)(uint64_t *, _QWORD, _BYTE *))(*a1 + 184))(a1, v92, v98);
          v84 = &v99;
        }
        std::__list_imp<char *>::clear(v84);
        v86 = &v114;
      }
      else
      {
        v67 = (*(uint64_t (**)(uint64_t *))(v66 + 200))(a1);
        if (a3)
        {
          v68 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
          fst::Divide<int>((int *)v68, &v120, 1, (uint64_t)&v113);
          v69 = *(float *)(v68 + 32);
          v70 = NAN;
          if (v69 != -INFINITY)
          {
            if ((LODWORD(v124) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
            {
              v70 = INFINITY;
              if (v69 != INFINITY)
                v70 = v69 - v124;
            }
            else
            {
              v70 = NAN;
            }
          }
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v108, (int *)&v113, v70);
          std::__list_imp<char *>::clear(&v114);
        }
        else
        {
          LODWORD(v108) = v120;
          std::list<int>::list(&v109, (uint64_t)&v121);
          v112 = v124;
        }
        v93 = v108;
        std::list<int>::list(v94, (uint64_t)&v109);
        v95 = v112;
        v85 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
        v113 = 0;
        LODWORD(v114) = v93;
        std::list<int>::list(v115, (uint64_t)v94);
        v117 = v95;
        v118 = v85;
        std::__list_imp<char *>::clear(v94);
        v39 = a1;
        (*(void (**)(uint64_t *, uint64_t, void **))(*a1 + 208))(a1, v67, &v113);
        (*(void (**)(uint64_t *, uint64_t))(*v39 + 176))(v39, v67);
        std::__list_imp<char *>::clear(v115);
        v86 = &v109;
      }
      std::__list_imp<char *>::clear(v86);
    }
  }
  v89 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, __n128))(*v39 + 64))(v39, 0x3FFFFFFF0007, 0, v38);
  v90 = fst::ReweightProperties(v89);
  (*(void (**)(uint64_t *, unint64_t, uint64_t))(*v39 + 192))(v39, v90, 0x3FFFFFFF0007);
  std::__list_imp<char *>::clear(&v121);
  result = v125;
  if (v125)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  return result;
}

void sub_1ADEDA80C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  std::__list_imp<char *>::clear((_QWORD *)(v3 - 240));
  std::__list_imp<char *>::clear(v2);
  v5 = *(_QWORD *)(v3 - 144);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

_QWORD *fst::RemoveWeight<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  float v36;
  float v37;
  uint64_t v38;
  _QWORD v39[4];
  float v40;
  _QWORD v41[3];
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[2];
  float v46;
  float v47;
  int v48;
  uint64_t v49;
  _BYTE v50[8];
  _QWORD v51[4];
  _QWORD *v52;
  uint64_t v53;
  unsigned int v54;

  result = (_QWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
  v7 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
    v8 = *(_QWORD *)(a2 + 24) + 1;
  else
    v8 = 0;
  if (*(_DWORD *)result)
    v9 = result[3] + 1;
  else
    v9 = 0;
  if (v8 == v9)
  {
    v10 = 0;
    v11 = (uint64_t *)(a2 + 16);
    v12 = result + 2;
    if (v7)
      v13 = v7 == *(_DWORD *)result;
    else
      v13 = 0;
    v14 = !v13;
    v15 = v14 ^ 1;
    while (1)
    {
      v16 = *v11;
      v17 = *v12;
      if ((v10 & 1) == 0 && !v15)
        break;
      if (v16 == a2 + 8)
        goto LABEL_21;
      if (*(_DWORD *)(v16 + 16) != *(_DWORD *)(v17 + 16))
        goto LABEL_22;
      v11 = (uint64_t *)(v16 + 8);
      v12 = (uint64_t *)(v17 + 8);
      v10 = 1;
    }
    if (v7)
      goto LABEL_22;
LABEL_21:
    LODWORD(v43) = 0;
    LODWORD(v43) = *(_DWORD *)(a2 + 32);
    v40 = 0.0;
    v40 = *((float *)result + 8);
    if (*(float *)&v43 == v40)
      return result;
  }
LABEL_22:
  result = (_QWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  v18 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
    v19 = *(_QWORD *)(a2 + 24) + 1;
  else
    v19 = 0;
  if (*(_DWORD *)result)
    v20 = result[3] + 1;
  else
    v20 = 0;
  if (v19 == v20)
  {
    v21 = 0;
    v22 = (uint64_t *)(a2 + 16);
    v23 = result + 2;
    if (v18)
      v24 = v18 == *(_DWORD *)result;
    else
      v24 = 0;
    v25 = !v24;
    v26 = v25 ^ 1;
    while (1)
    {
      v27 = *v22;
      v28 = *v23;
      if ((v21 & 1) == 0 && !v26)
        break;
      if (v27 == a2 + 8)
        goto LABEL_42;
      if (*(_DWORD *)(v27 + 16) != *(_DWORD *)(v28 + 16))
        goto LABEL_43;
      v22 = (uint64_t *)(v27 + 8);
      v23 = (uint64_t *)(v28 + 8);
      v21 = 1;
    }
    if (v18)
      goto LABEL_43;
LABEL_42:
    LODWORD(v43) = 0;
    LODWORD(v43) = *(_DWORD *)(a2 + 32);
    v40 = 0.0;
    v40 = *((float *)result + 8);
    if (*(float *)&v43 == v40)
      return result;
  }
LABEL_43:
  if (a3)
  {
    v54 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 128))(a1, &v52);
    while (1)
    {
      result = v52;
      if (!v52)
        break;
      v29 = (*(uint64_t (**)(_QWORD *))(*v52 + 16))(v52);
      result = v52;
      if (v29)
      {
        if (v52)
          return (_QWORD *)(*(uint64_t (**)(void))(*v52 + 8))();
        return result;
      }
      if (!v52)
        goto LABEL_51;
      v30 = (*(uint64_t (**)(void))(*v52 + 24))();
      if (v52)
        v31 = (*(uint64_t (**)(_QWORD *))(*v52 + 24))(v52);
      else
        v31 = v54;
LABEL_52:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v43, a1, v31);
      fst::Divide<int>((int *)&v43, (int *)a2, 1, (uint64_t)&v40);
      v32 = NAN;
      if (v46 != -INFINITY)
      {
        if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v32 = INFINITY;
          if (v46 != INFINITY)
            v32 = v46 - *(float *)(a2 + 32);
        }
        else
        {
          v32 = NAN;
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)v50, (int *)&v40, v32);
      std::__list_imp<char *>::clear(v41);
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 184))(a1, v30, v50);
      std::__list_imp<char *>::clear(v51);
      std::__list_imp<char *>::clear(&v44);
      if (v52)
        (*(void (**)(_QWORD *))(*v52 + 32))(v52);
      else
        ++v54;
    }
    if ((int)v54 >= (int)v53)
      return result;
LABEL_51:
    v30 = v54;
    v31 = v54;
    goto LABEL_52;
  }
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v33, &v49);
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49))
  {
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49);
    v43 = *(_QWORD *)v34;
    LODWORD(v44) = *(_DWORD *)(v34 + 8);
    std::list<int>::list(v45, v34 + 16);
    v35 = *(_DWORD *)(v34 + 48);
    v47 = *(float *)(v34 + 40);
    v48 = v35;
    fst::DivideLeft<int,(fst::StringType)0>((int *)&v44, (int *)a2, (uint64_t)&v52);
    v36 = NAN;
    if (v47 != -INFINITY)
    {
      if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v36 = INFINITY;
        if (v47 != INFINITY)
          v36 = v47 - *(float *)(a2 + 32);
      }
      else
      {
        v36 = NAN;
      }
    }
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v40, (int *)&v52, v36);
    std::__list_imp<char *>::clear(&v53);
    *(float *)&v44 = v40;
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v45, v41[1], (uint64_t)v41);
    v47 = v42;
    std::__list_imp<char *>::clear(v41);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v49 + 88))(v49, &v43);
    std::__list_imp<char *>::clear(v45);
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
  }
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v43, a1, v33);
  fst::DivideLeft<int,(fst::StringType)0>((int *)&v43, (int *)a2, (uint64_t)&v40);
  v37 = NAN;
  if (v46 != -INFINITY)
  {
    if ((*(_DWORD *)(a2 + 32) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v37 = INFINITY;
      if (v46 != INFINITY)
        v37 = v46 - *(float *)(a2 + 32);
    }
    else
    {
      v37 = NAN;
    }
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v38, (int *)&v40, v37);
  std::__list_imp<char *>::clear(v41);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v33, &v38);
  std::__list_imp<char *>::clear(v39);
  return std::__list_imp<char *>::clear(&v44);
}

void sub_1ADEDAFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  std::__list_imp<char *>::clear((_QWORD *)(v12 + 8));
  std::__list_imp<char *>::clear(va);
  _Unwind_Resume(a1);
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D26B88;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D25BC0;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D28E70;
  a1[1] = v2;
  return a1;
}

void sub_1ADEDB1A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D25BC0;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

_QWORD *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  _QWORD *result;

  v4 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *v4;
  result = std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v4 + 2));
  *(_DWORD *)(a3 + 32) = v4[8];
  return result;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D28E70;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 56);
  v4 = *v5;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1ADEDB4FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

_QWORD *fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  _QWORD *v6;
  int v8;
  _QWORD v9[3];
  int v10;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v8 = *a3;
  std::list<int>::list(v9, (uint64_t)(a3 + 2));
  v10 = a3[8];
  fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(v6, a2, &v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1ADEDB5FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteArcs(*(_QWORD **)(a1 + 8), a2);
}

void fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  return std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D21570;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1ADEDBA90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D228D0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1D000;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1ADEDBB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FE00;
  v2 = (_QWORD *)a1[9];
  if (v2 != (_QWORD *)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD *)a1[8];
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(v2[v3++]);
      v2 = (_QWORD *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D228D0;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADEDBDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADEDBEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1ADEDBFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>,fst::MutableFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1ADEDC060(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __str;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22[4];
  uint64_t v23;
  int v24;
  unsigned int v25;

  *(_QWORD *)a1 = &unk_1E5D228D0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1D000;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v25 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v23);
  while (1)
  {
    if (!v23)
    {
      if ((int)v25 >= v24)
        goto LABEL_45;
LABEL_25:
      v14 = v25;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23))
      break;
    if (!v23)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::AddState((_QWORD *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v21, a2, v14);
    fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(a1, v14, (int *)&v21);
    std::__list_imp<char *>::clear(v22);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 56), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __str.__r_.__value_.__r.__words[2])
          goto LABEL_38;
LABEL_32:
        v16 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v20);
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0]))
        break;
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_32;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_33:
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__str.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v19)
      --*v19;
LABEL_40:
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
    else
      ++v25;
  }
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1ADEDC434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  _QWORD *v16;

  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorFstBaseImpl(v16);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v4;
  int v5;
  int v7;
  _QWORD v8[3];
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
  v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  v5 = a3[8];
  v9 = v5;
  *(_DWORD *)v4 = v7;
  if ((int *)v4 != &v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v4 + 8), v8[1], (uint64_t)v8);
    v5 = v9;
  }
  *(_DWORD *)(v4 + 32) = v5;
  return std::__list_imp<char *>::clear(v8);
}

void sub_1ADEDC55C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADEDC618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>,std::reverse_iterator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_QWORD *)(v12 - 56) = *(_QWORD *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((_QWORD *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADEDC73C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  if (!*a2)
    ++a1[5];
  if (!a2[1])
    ++a1[6];
  v3 = a1 + 7;
  v4 = a1[8];
  if (v4 >= a1[9])
  {
    result = std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const&>((uint64_t)v3, (uint64_t)a2);
    result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

_QWORD *std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  result = std::list<int>::list((_QWORD *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1ADEDC828(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[56 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((_QWORD *)v11 + 2, a2 + 16);
  v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADEDC964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1ADEDCA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::vector<unsigned int>::pointer end;
  unsigned int *v47;
  std::vector<unsigned int>::pointer begin;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  unsigned int *v54;
  unsigned int v55;
  std::vector<unsigned int>::pointer v56;
  unsigned int *v57;
  std::vector<unsigned int>::pointer v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  unsigned int *v64;
  unsigned int v65;
  unint64_t v66;
  std::vector<unsigned int>::pointer v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  std::vector<unsigned int>::pointer v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t *v83;
  BOOL v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t *v92;
  BOOL v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _DWORD *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  std::vector<unsigned int> v106;
  std::vector<unsigned int> v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  float v116;
  float v117;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v115 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v111 = (uint64_t *)&v115;
      fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, &v108, 0);
      v8 = v115;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0)
      goto LABEL_211;
    v11 = a2 & 0xC0000;
    v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0)
      v12 = 0x10425A850000;
    v13 = v8 | v12;
    v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0)
      v13 |= 0x100000uLL;
    v115 = v13;
    memset(&v107, 0, sizeof(v107));
    memset(&v106, 0, sizeof(v106));
    v105 = 0;
    v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v103);
    v16 = 0;
LABEL_12:
    if (!v103)
    {
      if ((int)v105 >= v104)
        goto LABEL_203;
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103))
    {
      if (v103)
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v103 + 24))();
LABEL_18:
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17);
        v110 = (uint64_t)&v110;
        v111 = &v110;
        v112 = 0;
        LODWORD(v109) = 0;
        v107.__end_ = v107.__begin_;
        v106.__end_ = v106.__begin_;
        if (v11)
          std::vector<int>::reserve(&v107, v18);
        if (v14)
          std::vector<int>::reserve(&v106, v18);
        v102 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v17, &v98);
        v19 = 1;
        while (1)
        {
          if (v98)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98))
            {
              if (v98)
              {
                (*(void (**)(void))(*(_QWORD *)v98 + 8))();
              }
              else
              {
LABEL_132:
                if (v101)
                  --*v101;
              }
              v15 = a1;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14)
                  goto LABEL_152;
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v106.__end_ - (char *)v106.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  v72 = v106.__end_ - v106.__begin_;
                  if (v72 <= 2)
                    v72 = 2;
                  v73 = v106.__begin_ + 1;
                  v74 = *v106.__begin_;
                  v75 = v72 - 1;
                  while (1)
                  {
                    v77 = *v73++;
                    v76 = v77;
                    if (v77 == v74)
                      break;
                    v74 = v76;
                    if (!--v75)
                      goto LABEL_152;
                  }
                  v115 = v115 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              v66 = v107.__end_ - v107.__begin_;
              if (v66 <= 2)
                v66 = 2;
              v67 = v107.__begin_ + 1;
              v68 = *v107.__begin_;
              v69 = v66 - 1;
              while (1)
              {
                v71 = *v67++;
                v70 = v71;
                if (v71 == v68)
                  break;
                v68 = v70;
                if (!--v69)
                  goto LABEL_141;
              }
              v115 = v115 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14)
                goto LABEL_142;
LABEL_152:
              if (v16 >= 1)
                v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v98, a1, v17);
              v78 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
              if ((_DWORD)v98)
                v79 = (char *)v101 + 1;
              else
                v79 = 0;
              if (*(_DWORD *)v78)
                v80 = *(_QWORD *)(v78 + 24) + 1;
              else
                v80 = 0;
              if (v79 != (char *)v80)
                goto LABEL_174;
              v81 = 0;
              v82 = v100;
              v83 = (uint64_t *)(v78 + 16);
              v84 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v78;
              v85 = !v84;
              while (1)
              {
                v86 = *v83;
                if ((v81 & 1) == 0 && v85)
                  break;
                if ((uint64_t *)v82 == &v99)
                  goto LABEL_173;
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16))
                  goto LABEL_174;
                v82 = *(_QWORD *)(v82 + 8);
                v83 = (uint64_t *)(v86 + 8);
                v81 = 1;
              }
              if ((_DWORD)v98)
                goto LABEL_174;
LABEL_173:
              v117 = *(float *)&v102;
              v116 = 0.0;
              v116 = *(float *)(v78 + 32);
              if (*(float *)&v102 == v116)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 40))(a1, v17, *(float *)&v102) != 1)v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              else
              {
LABEL_174:
                v87 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
                if ((_DWORD)v98)
                  v88 = (char *)v101 + 1;
                else
                  v88 = 0;
                if (*(_DWORD *)v87)
                  v89 = *(_QWORD *)(v87 + 24) + 1;
                else
                  v89 = 0;
                if (v88 != (char *)v89)
                  goto LABEL_194;
                v90 = 0;
                v91 = v100;
                v92 = (uint64_t *)(v87 + 16);
                v93 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v87;
                v94 = !v93;
                while (1)
                {
                  v95 = *v92;
                  if ((v90 & 1) == 0 && v94)
                    break;
                  if ((uint64_t *)v91 == &v99)
                    goto LABEL_193;
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16))
                    goto LABEL_194;
                  v91 = *(_QWORD *)(v91 + 8);
                  v92 = (uint64_t *)(v95 + 8);
                  v90 = 1;
                }
                if ((_DWORD)v98)
                  goto LABEL_194;
LABEL_193:
                v117 = *(float *)&v102;
                v116 = 0.0;
                v116 = *(float *)(v87 + 32);
                if (*(float *)&v102 != v116)
LABEL_194:
                  v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                ++v16;
              }
              std::__list_imp<char *>::clear(&v99);
              std::__list_imp<char *>::clear(&v110);
              if (v103)
                (*(void (**)(uint64_t))(*(_QWORD *)v103 + 32))(v103);
              else
                ++v105;
              goto LABEL_12;
            }
            if (v98)
            {
              v20 = (*(uint64_t (**)(void))(*(_QWORD *)v98 + 32))();
              goto LABEL_29;
            }
          }
          else if (v102 >= v100)
          {
            goto LABEL_132;
          }
          v20 = v99 + 56 * v102;
LABEL_29:
          v21 = *(_DWORD *)v20;
          v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            v115 = v115 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22)
                goto LABEL_35;
              goto LABEL_39;
            }
            v23 = v115;
          }
          else
          {
            v23 = v115 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          v115 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0)
              goto LABEL_40;
            goto LABEL_44;
          }
LABEL_39:
          v115 = v115 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v108)
              v115 = v115 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            if (v22 < SHIDWORD(v108))
              v115 = v115 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
          }
LABEL_44:
          v24 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
          v25 = *(_DWORD *)(v20 + 8);
          if (v25)
            v26 = *(_QWORD *)(v20 + 32) + 1;
          else
            v26 = 0;
          if (*(_DWORD *)v24)
            v27 = *(_QWORD *)(v24 + 24) + 1;
          else
            v27 = 0;
          if (v26 != v27)
            goto LABEL_64;
          v28 = 0;
          v29 = (uint64_t *)(v20 + 24);
          v30 = (uint64_t *)(v24 + 16);
          v31 = v25 && v25 == *(_DWORD *)v24;
          v32 = !v31;
          while (1)
          {
            v33 = *v29;
            v34 = *v30;
            if ((v28 & 1) == 0 && v32)
              break;
            if (v33 == v20 + 16)
              goto LABEL_63;
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16))
              goto LABEL_64;
            v29 = (uint64_t *)(v33 + 8);
            v30 = (uint64_t *)(v34 + 8);
            v28 = 1;
          }
          if (v25)
            goto LABEL_64;
LABEL_63:
          v117 = 0.0;
          v117 = *(float *)(v20 + 40);
          v116 = 0.0;
          v116 = *(float *)(v24 + 32);
          if (v117 != v116)
          {
LABEL_64:
            v35 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
            v25 = *(_DWORD *)(v20 + 8);
            if (v25)
              v36 = *(_QWORD *)(v20 + 32) + 1;
            else
              v36 = 0;
            if (*(_DWORD *)v35)
              v37 = *(_QWORD *)(v35 + 24) + 1;
            else
              v37 = 0;
            if (v36 != v37)
              goto LABEL_84;
            v38 = 0;
            v39 = (uint64_t *)(v20 + 24);
            v40 = (uint64_t *)(v35 + 16);
            v41 = v25 && v25 == *(_DWORD *)v35;
            v42 = !v41;
            while (1)
            {
              v43 = *v39;
              v44 = *v40;
              if ((v38 & 1) == 0 && v42)
                break;
              if (v43 == v20 + 16)
                goto LABEL_83;
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16))
                goto LABEL_84;
              v39 = (uint64_t *)(v43 + 8);
              v40 = (uint64_t *)(v44 + 8);
              v38 = 1;
            }
            if (v25)
              goto LABEL_84;
LABEL_83:
            v117 = 0.0;
            v117 = *(float *)(v20 + 40);
            v116 = 0.0;
            v116 = *(float *)(v35 + 32);
            if (v117 != v116)
LABEL_84:
              v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17)
            v115 = v115 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          if (v45 != (_DWORD)v17 + 1)
            v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          v108 = *(_QWORD *)v20;
          LODWORD(v109) = v25;
          if (&v108 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v110, *(_QWORD *)(v20 + 24), v20 + 16);
            v45 = *(_DWORD *)(v20 + 48);
          }
          v113 = *(_DWORD *)(v20 + 40);
          v114 = v45;
          if (v11)
          {
            end = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              begin = v107.__begin_;
              v49 = v107.__end_ - v107.__begin_;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_213;
              v51 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v52);
                begin = v107.__begin_;
                end = v107.__end_;
              }
              else
              {
                v53 = 0;
              }
              v54 = (unsigned int *)&v53[4 * v49];
              *v54 = *(_DWORD *)v20;
              v47 = v54 + 1;
              while (end != begin)
              {
                v55 = *--end;
                *--v54 = v55;
              }
              v107.__begin_ = v54;
              v107.__end_ = v47;
              v107.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v107.__end_ = *(_DWORD *)v20;
              v47 = end + 1;
            }
            v107.__end_ = v47;
          }
          if (v14)
          {
            v56 = v106.__end_;
            if (v106.__end_ >= v106.__end_cap_.__value_)
            {
              v58 = v106.__begin_;
              v59 = v106.__end_ - v106.__begin_;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62)
LABEL_213:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v61 = (char *)v106.__end_cap_.__value_ - (char *)v106.__begin_;
              if (((char *)v106.__end_cap_.__value_ - (char *)v106.__begin_) >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v62 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v106.__end_cap_, v62);
                v58 = v106.__begin_;
                v56 = v106.__end_;
              }
              else
              {
                v63 = 0;
              }
              v64 = (unsigned int *)&v63[4 * v59];
              *v64 = *(_DWORD *)(v20 + 4);
              v57 = v64 + 1;
              while (v56 != v58)
              {
                v65 = *--v56;
                *--v64 = v65;
              }
              v106.__begin_ = v64;
              v106.__end_ = v57;
              v106.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *v106.__end_ = *(_DWORD *)(v20 + 4);
              v57 = v56 + 1;
            }
            v106.__end_ = v57;
          }
          if (v98)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v98 + 40))(v98);
            v19 = 0;
          }
          else
          {
            v19 = 0;
            ++v102;
          }
        }
      }
LABEL_17:
      v17 = v105;
      goto LABEL_18;
    }
    if (v103)
      (*(void (**)(void))(*(_QWORD *)v103 + 8))();
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
    {
      v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v106.__begin_)
    {
      v106.__end_ = v106.__begin_;
      operator delete(v106.__begin_);
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    v8 = v115;
LABEL_211:
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1ADEDD50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 48);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 48);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 48);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 48), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 56 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19968;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1ADEDDC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19968;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::FinishState(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t result;
  unint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int *i;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  float v32;
  float v33;
  uint64_t v34;
  _QWORD v35[3];
  float v36;
  float v37;
  float v38;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v34);
  v6 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  if ((_DWORD)v34)
    v7 = v35[2] + 1;
  else
    v7 = 0;
  if (*(_DWORD *)v6)
    v8 = *(_QWORD *)(v6 + 24) + 1;
  else
    v8 = 0;
  if (v7 == v8)
  {
    v9 = 0;
    v10 = v35[1];
    v11 = (uint64_t *)(v6 + 16);
    if ((_DWORD)v34)
      v12 = (_DWORD)v34 == *(_DWORD *)v6;
    else
      v12 = 0;
    v13 = !v12;
    v14 = v13 ^ 1;
    while (1)
    {
      v15 = *v11;
      if ((v9 & 1) == 0 && !v14)
        break;
      if ((_QWORD *)v10 == v35)
        goto LABEL_42;
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16))
        goto LABEL_21;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = (uint64_t *)(v15 + 8);
      v9 = 1;
    }
    if ((_DWORD)v34)
      goto LABEL_21;
LABEL_42:
    v38 = v36;
    v37 = 0.0;
    v37 = *(float *)(v6 + 32);
    v32 = v36;
    v33 = v37;
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  v17 = a2;
  *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  v18 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17))
    goto LABEL_36;
  v19 = 0;
  v20 = *(_QWORD **)(a1 + 80);
  v21 = v20[1];
  v22 = **(_QWORD **)(a1 + 16);
  v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    v24 = *v23--;
    v19 |= *(_QWORD *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while ((_DWORD)v24 != a2);
  v25 = *(_QWORD **)a1;
  v26 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v21 - 4); ; --i)
  {
    v28 = *i;
    if (v25)
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    result = v28 >> 6;
    v29 = 1 << v28;
    if ((v19 & 1) == 0)
      break;
    *(_QWORD *)(v22 + 8 * result) |= v29;
    *(_QWORD *)(v26 + 8 * result) &= ~v29;
    if ((_DWORD)v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(_QWORD *)(v26 + 8 * result) &= ~v29;
  if ((_DWORD)v28 != a2)
    goto LABEL_33;
  v20[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    v30 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
      *(_QWORD *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3))
      *(_DWORD *)(v18 + 4 * a3) = v31;
  }
  return result;
}

void sub_1ADEDDFE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19968;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19968;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19968;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADEDE060(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A920;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADEDE148(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A920;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADEDE554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::SetFromFst<fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    v10 = v27 + 56 * v28;
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v25 = 0x4000;
    if (v13 > 0x4000)
      v25 = v13;
    *(_QWORD *)(a1 + 8) = v25;
    v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(uint64_t **)(a1 + 16);
    v15 = *(uint64_t **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[7 * v13];
  v16 = v26;
  v17 = v27;
  v19 = v28;
  v18 = v29;
  if (v29)
    ++*v29;
  v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    v24 = v15 - 7;
    *v24 = *(_QWORD *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(_QWORD *)(v23 + 24), v23 + 16);
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 56 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1ADEDE7B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::WriteFst<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _BYTE v34[8];
  void *v35[2];
  void *v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string __p[5];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)v35 = 0u;
  *(_OWORD *)v36 = 0u;
  v6 = -1;
  v40 = 0;
  v41 = 0;
  v39 = -1;
  v39 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v40 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v40 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v43;
    if (v43 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v9, (uint64_t)v34);
  v31 = v9;
  v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v12 = 0;
    v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(__p);
      std::__list_imp<char *>::clear(&__p[0].__r_.__value_.__l.__size_);
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      v14 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v12);
      v16 = *(_QWORD *)(v14 + 56);
      v15 = *(_QWORD *)(v14 + 64);
      if (v15 == v16)
        v17 = 0;
      else
        v17 = *(_DWORD **)(v14 + 56);
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1)
          v18 = 1;
        else
          v18 = (v15 - v16) / 56;
        v19 = v17;
        do
        {
          v20 = *v19;
          v19 += 14;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(v17 + 2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_30:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v33);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_33;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      updated = 1;
      goto LABEL_33;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v29 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_30;
  }
  v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_33:
  if (SHIBYTE(v37) < 0)
    operator delete(v36[1]);
  if (SHIBYTE(v36[0]) < 0)
    operator delete(v35[0]);
  return updated;
}

void sub_1ADEDEC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a17);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1ADEDF104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::ArcTpl<fst::LogWeightTpl<float>,int>::Type();
    std::operator+<char>();
    fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::Type(void)::type = v2;
  }
  return fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::Type(void)::type;
}

void sub_1ADEDF1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1ADEDF494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(_QWORD *a1, int a2, int *a3)
{
  int *v6;
  unint64_t v7;
  int v9;
  _QWORD v10[3];
  int v11;
  int v12;
  _QWORD v13[3];
  int v14;
  int v15;
  _QWORD v16[3];
  int v17;
  int v18;
  _QWORD v19[3];
  int v20;

  v6 = *(int **)(a1[8] + 8 * a2);
  v18 = *v6;
  std::list<int>::list(v19, (uint64_t)(v6 + 2));
  v20 = v6[8];
  v15 = *a3;
  std::list<int>::list(v16, (uint64_t)(a3 + 2));
  v17 = a3[8];
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal((uint64_t)a1, a2, &v15);
  std::__list_imp<char *>::clear(v16);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v12 = v18;
  std::list<int>::list(v13, (uint64_t)v19);
  v14 = v20;
  v9 = *a3;
  std::list<int>::list(v10, (uint64_t)(a3 + 2));
  v11 = a3[8];
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>(v7, &v12, &v9);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(v13);
  return std::__list_imp<char *>::clear(v19);
}

void sub_1ADEDF654(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(_QWORD *a1, int a2, int *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 56))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 56);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>(v8, a2, a3, v7);
  return fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  int64x2_t v32;
  int64x2_t v33;
  std::vector<int>::value_type __x;
  std::vector<int> v35;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v35, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v35.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v35.__begin_[v12] == -1)
      {
        fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(_QWORD *)(v11 + 8 * v12));
      }
      else
      {
        v35.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v17 = *(int64x2_t *)(v16 + 40);
      v18 = *(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56);
      if (v18)
        v19 = *(_QWORD *)(v16 + 56);
      else
        v19 = 0;
      if (v18)
      {
        v20 = 0;
        v21 = 0;
        v22 = (int *)(v19 + 48);
        v23 = v19 + 16;
        do
        {
          v24 = v35.__begin_[*v22];
          if (v24 == -1)
          {
            v27 = *((_QWORD *)v22 - 6);
            v28.i64[0] = v27;
            v28.i64[1] = HIDWORD(v27);
            v17 = vaddq_s64(v17, vceqzq_s64(v28));
          }
          else
          {
            *v22 = v24;
            if (v20 != v21)
            {
              v32 = v17;
              v25 = v19 + 56 * v21;
              *(_QWORD *)v25 = *((_QWORD *)v22 - 6);
              *(_DWORD *)(v25 + 8) = *(v22 - 10);
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v25 + 16), *((_QWORD *)v22 - 3), v23);
              v26 = v19 + 56 * v21;
              *(_DWORD *)(v26 + 40) = *(v22 - 2);
              *(_DWORD *)(v26 + 48) = *v22;
              v14 = *v4;
              v17 = v32;
            }
            ++v21;
          }
          ++v20;
          v16 = *(_QWORD *)(v14 + 8 * v15);
          v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56)) >> 3);
          v22 += 14;
          v23 += 56;
        }
        while (v20 < v29);
        v33 = v17;
      }
      else
      {
        v33 = *(int64x2_t *)(v16 + 40);
        v21 = 0;
        v29 = 0;
      }
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs((_QWORD *)v16, v29 - v21);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 40) = v33;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v30 = *(int *)(a1 + 88);
  if ((_DWORD)v30 == -1)
  {
    v31 = v35.__begin_;
    if (!v35.__begin_)
      return;
  }
  else
  {
    v31 = v35.__begin_;
    *(_DWORD *)(a1 + 88) = v35.__begin_[v30];
  }
  v35.__end_ = v31;
  operator delete(v31);
}

void sub_1ADEDF980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)
                                                             - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 56 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  unsigned int v11;
  int v12;
  fst *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  _QWORD v19[3];
  int v20;
  void *__p[2];
  char v22;
  char v23;
  _QWORD v24[2];
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  _QWORD v29[3];
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 288))(a2, 0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result == -1)
  {
    if ((v5 & 4) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1) != 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 248))(a2, v7);
  }
  LODWORD(v29[0]) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v27);
  while (!v27)
  {
    if (SLODWORD(v29[0]) >= v28)
      goto LABEL_14;
LABEL_9:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
    else
      ++LODWORD(v29[0]);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27))
    goto LABEL_9;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
LABEL_14:
  v38 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v36);
  while (2)
  {
    if (!v36)
    {
      if ((int)v38 >= v37)
        goto LABEL_53;
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36))
    {
      if (v36)
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
        goto LABEL_21;
      }
LABEL_20:
      v8 = v38;
LABEL_21:
      if ((_DWORD)v8 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v8);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 256))(a2, v8, v9);
      v35 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v8, &v31);
LABEL_24:
      if (v31)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31))
        {
          if (v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            goto LABEL_37;
          }
LABEL_35:
          if (v34)
            --*v34;
LABEL_37:
          *(float *)&v11 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v8);
          v31 = 0;
          v32 = v11 | 0xFFFFFFFF00000000;
          fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v31, (uint64_t)&v27);
          if (v27)
          {
            v12 = FLAGS_fst_error_fatal;
            if (FLAGS_fst_error_fatal)
            {
              std::string::basic_string[abi:ne180100]<0>(v24, "FATAL");
              v13 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)v24);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
              v13 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)__p);
            }
            v14 = (_QWORD *)fst::cerr(v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
            if (v12)
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
              if (v25 < 0)
              {
                v15 = (void *)v24[0];
                goto LABEL_46;
              }
            }
            else
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
              if (v22 < 0)
              {
                v15 = __p[0];
LABEL_46:
                operator delete(v15);
              }
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
          }
          v18 = v28;
          std::list<int>::list(v19, (uint64_t)v29);
          v20 = v30;
          (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 184))(a2, v8, &v18);
          std::__list_imp<char *>::clear(v19);
          std::__list_imp<char *>::clear(v29);
          if (v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
          else
            ++v38;
          continue;
        }
        if (v31)
        {
          v10 = (float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
          goto LABEL_30;
        }
      }
      else if (v35 >= v33)
      {
        goto LABEL_35;
      }
      v10 = (float *)(v32 + 16 * v35);
LABEL_30:
      fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()(v10, (uint64_t)&v27);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 208))(a2, v8, &v27);
      std::__list_imp<char *>::clear(v29);
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
      else
        ++v35;
      goto LABEL_24;
    }
    break;
  }
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
LABEL_53:
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v17 = fst::ProjectProperties(v5, 1);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v17 & 0x3FFCFFFF0007 | v16, 0x3FFFFFFF0007);
}

void sub_1ADEDFFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a24);
  if (a20 < 0)
    operator delete(__p);
  std::__list_imp<char *>::clear(v35);
  v38 = *(_QWORD *)(v36 - 112);
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  _Unwind_Resume(a1);
}

_QWORD *fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()@<X0>(float *a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  float v5;
  int v6;
  uint64_t *v7;
  int *v8;
  _DWORD *v9;
  int *v10;
  int v11;
  int *v12;
  int v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];
  int v18;
  int v19;
  _QWORD v20[3];
  int v21;
  _DWORD v22[8];
  int v23;
  _QWORD v24[3];
  int v25;
  int v26;
  _QWORD v27[3];
  int v28;
  _DWORD v29[9];
  float v30;

  if (*((_DWORD *)a1 + 3) == -1)
  {
    v30 = 0.0;
    v30 = a1[2];
    v29[8] = 2139095040;
    if (v30 == INFINITY)
    {
      v12 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
      v23 = *v12;
      v7 = v24;
      std::list<int>::list(v24, (uint64_t)(v12 + 2));
      v25 = v12[8];
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = v23;
      std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v24);
      *(_DWORD *)(a2 + 40) = v25;
      *(_DWORD *)(a2 + 48) = -1;
      return std::__list_imp<char *>::clear(v7);
    }
    v8 = (int *)fst::StringWeight<int,(fst::StringType)0>::One();
    v26 = *v8;
    v7 = v27;
    std::list<int>::list(v27, (uint64_t)(v8 + 2));
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v28, &v26, a1[2]);
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = v28;
    v9 = v29;
    std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v29);
    *(_DWORD *)(a2 + 40) = v29[6];
    *(_DWORD *)(a2 + 48) = -1;
    goto LABEL_7;
  }
  v5 = *a1;
  v4 = *((_DWORD *)a1 + 1);
  if (!v4)
  {
    v10 = (int *)fst::StringWeight<int,(fst::StringType)0>::One();
    v19 = *v10;
    v7 = v20;
    std::list<int>::list(v20, (uint64_t)(v10 + 2));
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v21, &v19, a1[2]);
    v11 = *((_DWORD *)a1 + 3);
    *(float *)a2 = v5;
    *(float *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v21;
    v9 = v22;
    std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v22);
    *(_DWORD *)(a2 + 40) = v22[6];
    *(_DWORD *)(a2 + 48) = v11;
LABEL_7:
    std::__list_imp<char *>::clear(v9);
    return std::__list_imp<char *>::clear(v7);
  }
  fst::StringWeight<int,(fst::StringType)0>::StringWeight((uint64_t)&v14, v4);
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v16, &v14, a1[2]);
  v6 = *((_DWORD *)a1 + 3);
  *(float *)a2 = v5;
  *(float *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v16;
  std::list<int>::list((_QWORD *)(a2 + 16), (uint64_t)v17);
  *(_DWORD *)(a2 + 40) = v18;
  *(_DWORD *)(a2 + 48) = v6;
  std::__list_imp<char *>::clear(v17);
  v7 = &v15;
  return std::__list_imp<char *>::clear(v7);
}

void sub_1ADEE02B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t i;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  int *v35;
  unint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  int v42;
  uint64_t v43;
  int v44;
  int *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t *v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  _BOOL4 v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char v59;
  float v60;
  void **v62;
  int v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v71;
  unsigned int v72;
  char v73[8];
  uint64_t v74[4];
  float v75;
  _QWORD v76[3];
  float v77;
  uint64_t v78;
  uint64_t v79[4];
  int v80;
  uint64_t v81[3];
  float v82;
  float v83;
  uint64_t v84[3];
  float v85;
  void *__p;
  _DWORD *v87;
  unint64_t v88;
  _DWORD *v89;
  unint64_t v90;
  int v91;
  _QWORD v92[3];
  float v93;
  int v94;
  _QWORD v95[3];
  int v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _DWORD *v103;
  unint64_t v104;
  void **p_p;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  float v109;
  float v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114[4];

  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
    (*(void (**)(uint64_t *, _QWORD))(*a2 + 248))(a2, (v8 + 1));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v10 = 0;
  v112 = 0;
  v72 = v9;
  if ((a3 & 1) != 0)
    goto LABEL_95;
  LODWORD(v102) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v100);
  for (i = 0xFFFFFFFFLL; ; i = v14)
  {
    if (v100)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 16))(v100);
      v13 = v100;
      if ((v12 & 1) != 0)
        goto LABEL_39;
      if (v100)
      {
        v14 = (*(uint64_t (**)(void))(*(_QWORD *)v100 + 24))();
        goto LABEL_11;
      }
    }
    else if ((int)v102 >= (int)v101)
    {
      goto LABEL_41;
    }
    v14 = v102;
LABEL_11:
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&p_p, a1, v14);
    v15 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
    v16 = (_DWORD)p_p ? (uint64_t)v108 + 1 : 0;
    v17 = *(_DWORD *)v15 ? *(_QWORD *)(v15 + 24) + 1 : 0;
    if (v16 != v17)
      break;
    v18 = 0;
    v19 = v107;
    v20 = (uint64_t *)(v15 + 16);
    if ((_DWORD)p_p)
      v21 = (_DWORD)p_p == *(_DWORD *)v15;
    else
      v21 = 0;
    v22 = !v21;
    while (1)
    {
      v23 = *v20;
      if ((v18 & 1) == 0 && v22 == 1)
        break;
      if ((uint64_t *)v19 == &v106)
        goto LABEL_36;
      if (*(_DWORD *)(v19 + 16) != *(_DWORD *)(v23 + 16))
        goto LABEL_30;
      v19 = *(_QWORD *)(v19 + 8);
      v20 = (uint64_t *)(v23 + 8);
      v18 = 1;
    }
    if ((_DWORD)p_p)
      break;
LABEL_36:
    *(float *)&__p = v109;
    v83 = 0.0;
    v83 = *(float *)(v15 + 32);
    v24 = v109;
    std::__list_imp<char *>::clear(&v106);
    if (v24 != v83)
      goto LABEL_31;
    v14 = i;
LABEL_32:
    if (v100)
      (*(void (**)(uint64_t))(*(_QWORD *)v100 + 32))(v100);
    else
      LODWORD(v102) = v102 + 1;
  }
LABEL_30:
  std::__list_imp<char *>::clear(&v106);
LABEL_31:
  if ((_DWORD)i == -1)
    goto LABEL_32;
  i = 0xFFFFFFFFLL;
  v13 = v100;
LABEL_39:
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_41:
  if ((_DWORD)i != -1)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&p_p, a1, i);
    v25 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
    if ((_DWORD)p_p)
      v26 = (char *)v108 + 1;
    else
      v26 = 0;
    if (*(_DWORD *)v25)
      v27 = *(_QWORD *)(v25 + 24) + 1;
    else
      v27 = 0;
    if (v26 != (char *)v27)
      goto LABEL_63;
    v28 = 0;
    v29 = v107;
    v30 = (uint64_t *)(v25 + 16);
    v31 = (_DWORD)p_p && (_DWORD)p_p == *(_DWORD *)v25;
    v32 = !v31;
    v33 = !v32;
    while (1)
    {
      v34 = *v30;
      if ((v28 & 1) == 0 && !v33)
        break;
      if ((uint64_t *)v29 == &v106)
        goto LABEL_80;
      if (*(_DWORD *)(v29 + 16) != *(_DWORD *)(v34 + 16))
        goto LABEL_63;
      v29 = *(_QWORD *)(v29 + 8);
      v30 = (uint64_t *)(v34 + 8);
      v28 = 1;
    }
    if (!(_DWORD)p_p)
    {
LABEL_80:
      *(float *)&v100 = v109;
      LODWORD(__p) = 0;
      LODWORD(__p) = *(_DWORD *)(v25 + 32);
      v41 = v109;
      std::__list_imp<char *>::clear(&v106);
      if (v41 == *(float *)&__p)
      {
        v42 = 0;
        v71 = 0;
        goto LABEL_96;
      }
    }
    else
    {
LABEL_63:
      std::__list_imp<char *>::clear(&v106);
    }
    __p = 0;
    v87 = 0;
    v88 = 0;
    p_p = &__p;
    v106 = 0;
    v107 = 0;
    v108 = &v112;
    fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, (uint64_t *)&p_p, 0);
    v35 = (int *)__p;
    if (__p != v87)
    {
      v36 = 0;
      do
      {
        v37 = *v35++;
        if (v37 == *((_DWORD *)__p + (int)i))
          ++v36;
      }
      while (v35 != v87);
      if (v36 > 1)
        goto LABEL_90;
    }
    v104 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, i, &v100);
    while (2)
    {
      while (2)
      {
        if (v100)
        {
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 24))(v100);
          v39 = v100;
          if ((v38 & 1) != 0)
            goto LABEL_84;
          if (v100)
          {
            v40 = (*(uint64_t (**)(void))(*(_QWORD *)v100 + 32))();
            v39 = v100;
            if (*(_DWORD *)(v40 + 48) == (_DWORD)i)
            {
              i = 0xFFFFFFFFLL;
LABEL_84:
              if (v39)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
                goto LABEL_88;
              }
LABEL_86:
              if (v103)
                --*v103;
LABEL_88:
              if ((_DWORD)i != -1)
              {
                v10 = 0x2000000000;
                goto LABEL_91;
              }
LABEL_90:
              v10 = 0;
              i = 0xFFFFFFFFLL;
LABEL_91:
              if (__p)
              {
                v87 = __p;
                operator delete(__p);
              }
              if ((_DWORD)i != -1)
              {
                v71 = v10;
                v42 = 0;
                goto LABEL_96;
              }
              goto LABEL_95;
            }
            if (v100)
            {
              (*(void (**)(void))(*(_QWORD *)v100 + 40))();
              continue;
            }
            goto LABEL_79;
          }
        }
        else if (v104 >= v102)
        {
          goto LABEL_86;
        }
        break;
      }
      if (*(_DWORD *)(v101 + 56 * v104 + 48) == (_DWORD)i)
      {
        i = 0xFFFFFFFFLL;
        goto LABEL_86;
      }
LABEL_79:
      ++v104;
      continue;
    }
  }
  v10 = 0;
LABEL_95:
  v71 = v10;
  i = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
  v42 = 1;
LABEL_96:
  v99 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v97);
  while (2)
  {
    if (!v97)
    {
      if ((int)v99 >= v98)
        goto LABEL_165;
      goto LABEL_102;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 16))(v97))
    {
      if (v97)
      {
        v43 = (*(uint64_t (**)(void))(*(_QWORD *)v97 + 24))();
LABEL_103:
        v44 = v43 + v42;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v44)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if ((_DWORD)v43 == v72)
        {
          v45 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
          v94 = *v45;
          std::list<int>::list(v95, (uint64_t)(v45 + 2));
          v96 = v45[8];
          (*(void (**)(uint64_t *, _QWORD, int *))(*a2 + 184))(a2, (v43 + v42), &v94);
          std::__list_imp<char *>::clear(v95);
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v100, a1, v43);
        v46 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
        if ((_DWORD)v100)
          v47 = (char *)v103 + 1;
        else
          v47 = 0;
        if (*(_DWORD *)v46)
          v48 = *(_QWORD *)(v46 + 24) + 1;
        else
          v48 = 0;
        if (v47 == (char *)v48)
        {
          v49 = 0;
          v50 = v102;
          v51 = (uint64_t *)(v46 + 16);
          if ((_DWORD)v100)
            v52 = (_DWORD)v100 == *(_DWORD *)v46;
          else
            v52 = 0;
          v53 = !v52;
          while (1)
          {
            v54 = *v51;
            if ((v49 & 1) == 0 && v53 == 1)
              break;
            if ((uint64_t *)v50 == &v101)
              goto LABEL_128;
            if (*(_DWORD *)(v50 + 16) != *(_DWORD *)(v54 + 16))
              goto LABEL_127;
            v50 = *(_QWORD *)(v50 + 8);
            v51 = (uint64_t *)(v54 + 8);
            v49 = 1;
          }
          if ((_DWORD)v100)
            goto LABEL_127;
LABEL_128:
          LODWORD(p_p) = v104;
          LODWORD(__p) = 0;
          LODWORD(__p) = *(_DWORD *)(v46 + 32);
          v55 = *(float *)&v104 != *(float *)&__p;
        }
        else
        {
LABEL_127:
          v55 = 1;
        }
        if ((v42 & v55) == 1)
        {
          fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Reverse(&v100, (uint64_t)&v91);
          p_p = 0;
          LODWORD(v106) = v91;
          std::list<int>::list(&v107, (uint64_t)v92);
          v110 = v93;
          v111 = v43 + v42;
          std::__list_imp<char *>::clear(v92);
          (*(void (**)(uint64_t *, _QWORD, void ***))(*a2 + 208))(a2, 0, &p_p);
          std::__list_imp<char *>::clear(&v107);
        }
        v90 = 0;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v43, &__p);
LABEL_132:
        if (__p)
        {
          if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
          {
            if (__p)
            {
              (*(void (**)(void))(*(_QWORD *)__p + 8))();
              goto LABEL_160;
            }
LABEL_158:
            if (v89)
              --*v89;
LABEL_160:
            std::__list_imp<char *>::clear(&v101);
            if (v97)
              (*(void (**)(uint64_t))(*(_QWORD *)v97 + 32))(v97);
            else
              ++v99;
            continue;
          }
          if (__p)
          {
            v56 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
LABEL_138:
            v57 = *(_DWORD *)(v56 + 48);
            fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Reverse((_DWORD *)(v56 + 8), (uint64_t)&v83);
            v58 = (v57 + v42);
            if ((_DWORD)v58 == (_DWORD)i)
              v59 = v42;
            else
              v59 = 1;
            if ((v59 & 1) == 0)
            {
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v78, a1, i);
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Reverse(&v78, (uint64_t)&v80);
              fst::Times<int,(fst::StringType)1>(&v80, (uint64_t)&v83, (uint64_t)&v113);
              v60 = NAN;
              if (v82 != -INFINITY)
              {
                v60 = NAN;
                if (v85 != -INFINITY)
                {
                  v60 = INFINITY;
                  if (v85 != INFINITY && v82 != INFINITY)
                    v60 = v82 + v85;
                }
              }
              fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::GallicWeight((uint64_t)&p_p, &v113, v60);
              std::__list_imp<char *>::clear(v114);
              v83 = *(float *)&p_p;
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v84, v107, (uint64_t)&v106);
              v85 = v109;
              std::__list_imp<char *>::clear(&v106);
              std::__list_imp<char *>::clear(v81);
              std::__list_imp<char *>::clear(v79);
            }
            v62 = *(void ***)v56;
            v75 = v83;
            std::list<int>::list(v76, (uint64_t)v84);
            v77 = v85;
            p_p = v62;
            *(float *)&v106 = v75;
            std::list<int>::list(&v107, (uint64_t)v76);
            v110 = v77;
            v111 = v44;
            std::__list_imp<char *>::clear(v76);
            while (1)
            {
              v63 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              v64 = *a2;
              if (v63 > (int)v58)
                break;
              (*(void (**)(uint64_t *))(v64 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void ***))(v64 + 208))(a2, v58, &p_p);
            std::__list_imp<char *>::clear(&v107);
            std::__list_imp<char *>::clear(v84);
            if (__p)
              (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
            else
              ++v90;
            goto LABEL_132;
          }
        }
        else if (v90 >= v88)
        {
          goto LABEL_158;
        }
        v56 = (uint64_t)&v87[14 * v90];
        goto LABEL_138;
      }
LABEL_102:
      v43 = v99;
      goto LABEL_103;
    }
    break;
  }
  if (v97)
    (*(void (**)(void))(*(_QWORD *)v97 + 8))();
LABEL_165:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, i);
  if ((_DWORD)i == v72)
    v65 = v42;
  else
    v65 = 1;
  if ((v65 & 1) == 0)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(&p_p, a1, v72);
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Reverse(&p_p, (uint64_t)v73);
    (*(void (**)(uint64_t *, _QWORD, char *))(*a2 + 184))(a2, v72, v73);
    std::__list_imp<char *>::clear(v74);
    std::__list_imp<char *>::clear(&v106);
  }
  v66 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  v67 = v112 | v66;
  v68 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0) | v71;
  v69 = fst::ReverseProperties(v67, v42);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v68 | v69, 0x3FFFFFFF0007);
}

void sub_1ADEE0E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D25080;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  uint64_t v20;
  fst *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  fst *v28;
  _QWORD *v29;
  fst *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  fst *v39;
  _QWORD *v40;
  _QWORD *v41;
  fst *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t result;
  void *__p[2];
  char v48;
  char v49;
  __int16 v50;
  void *v51[3];
  uint64_t v52[2];
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v5 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v6 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v20 = operator new();
    *(_DWORD *)(v20 + 8) = 5;
    *(_BYTE *)(v20 + 12) = 0;
    *(_QWORD *)v20 = &unk_1E5D1EEB0;
    *(_QWORD *)(v20 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v20;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v52, "INFO");
    v21 = fst::LogMessage::LogMessage((fst *)v51, (uint64_t)v52);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"AutoQueue: using state-order discipline", 39);
    goto LABEL_17;
  }
  if ((v6 & 0x800000000) != 0)
  {
    v24 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(v24, a2);
    *(_QWORD *)(a1 + 16) = v24;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v52, "INFO");
    v25 = fst::LogMessage::LogMessage((fst *)v51, (uint64_t)v52);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"AutoQueue: using top-order discipline", 37);
LABEL_17:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v51);
    if (SHIBYTE(v53) < 0)
    {
      v23 = (void *)v52[0];
LABEL_46:
      operator delete(v23);
    }
    return a1;
  }
  v55 = 0;
  v52[0] = (uint64_t)v5;
  v52[1] = 0;
  v53 = 0;
  v54 = &v55;
  fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a2, v52, 0);
  v7 = *(int **)(a1 + 48);
  v8 = *(int **)(a1 + 56);
  if (v7 != v8)
  {
    v9 = v7 + 1;
    if (v7 + 1 != v8)
    {
      v10 = *v7;
      v11 = v7 + 1;
      do
      {
        v13 = *v11++;
        v12 = v13;
        v14 = v10 < v13;
        if (v10 <= v13)
          v10 = v12;
        if (v14)
          v7 = v9;
        v9 = v11;
      }
      while (v11 != v8);
    }
  }
  v15 = *v7;
  v16 = *v7 + 1;
  std::vector<fst::QueueType>::vector(v51, v16);
  v50 = 0;
  fst::AutoQueue<int>::SccQueueType<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>(a2, v5, (uint64_t)v51, 0, &v50, (_BYTE *)&v50 + 1);
  if (HIBYTE(v50))
  {
    v17 = operator new();
    *(_DWORD *)(v17 + 8) = 2;
    *(_BYTE *)(v17 + 12) = 0;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_QWORD *)v17 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v17;
    if (FLAGS_v < 2)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v18 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v19 = (_QWORD *)fst::cerr(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_24:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
    if (v48 < 0)
      operator delete(__p[0]);
LABEL_44:
    v23 = v51[0];
    if (v51[0])
    {
      v51[1] = v51[0];
      goto LABEL_46;
    }
    return a1;
  }
  if ((_BYTE)v50)
  {
    v27 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue(v27, (uint64_t)v5);
    *(_QWORD *)(a1 + 16) = v27;
    if (FLAGS_v < 2)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v28 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"AutoQueue: using top-order discipline", 37);
    goto LABEL_24;
  }
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v30 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v31 = (_QWORD *)fst::cerr(v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
    if (v48 < 0)
      operator delete(__p[0]);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v16);
  if (v15 < 0)
  {
LABEL_43:
    v45 = operator new();
    *(_DWORD *)(v45 + 8) = 6;
    *(_BYTE *)(v45 + 12) = 0;
    *(_QWORD *)v45 = &unk_1E5D22CF0;
    *(_QWORD *)(v45 + 16) = v4;
    *(_QWORD *)(v45 + 24) = v5;
    *(_QWORD *)(v45 + 32) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v45 + 48) = 0;
    *(_QWORD *)(v45 + 56) = 0;
    *(_QWORD *)(v45 + 40) = 0;
    *(_QWORD *)(a1 + 16) = v45;
    goto LABEL_44;
  }
  v32 = 0;
  while (1)
  {
    v33 = *((_DWORD *)v51[0] + v32);
    if (v33)
      break;
    *(_QWORD *)(*v4 + 8 * v32) = 0;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v42 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v43 = (_QWORD *)fst::cerr(v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"AutoQueue: SCC #", 16);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": using trivial discipline", 26);
LABEL_40:
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
      if (v48 < 0)
        operator delete(__p[0]);
    }
LABEL_42:
    if (v16 == ++v32)
      goto LABEL_43;
  }
  if (v33 == 2)
  {
    v38 = operator new();
    *(_DWORD *)(v38 + 8) = 2;
    *(_BYTE *)(v38 + 12) = 0;
    *(_OWORD *)(v38 + 16) = 0u;
    *(_OWORD *)(v38 + 32) = 0u;
    *(_OWORD *)(v38 + 48) = 0u;
    *(_QWORD *)v38 = &unk_1E5D27B60;
    *(_QWORD *)(*v4 + 8 * v32) = v38;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v39 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v40 = (_QWORD *)fst::cerr(v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"AutoQueue: SCC #", 16);
      v41 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": using LIFO disciplle", 22);
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  if (v33 != 3)
  {
    v34 = operator new();
    *(_DWORD *)(v34 + 8) = 1;
    *(_BYTE *)(v34 + 12) = 0;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_QWORD *)v34 = &unk_1E5D23A28;
    *(_QWORD *)(*v4 + 8 * v32) = v34;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v35 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v36 = (_QWORD *)fst::cerr(v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: SCC #", 16);
      v37 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": using FIFO disciplle", 22);
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  result = operator new();
  __break(1u);
  return result;
}

void sub_1ADEE167C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  void **v28;
  void *v30;
  void *v31;

  if (a14 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  v30 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v26 + 56) = v30;
    operator delete(v30);
  }
  v31 = *v27;
  if (*v27)
  {
    *(_QWORD *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::TopOrderVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1ADEE18E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::TopOrderVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 56 * v12[5];
            v18 = *(int *)(v17 + 48);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 48);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 48);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *,std::allocator<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D19968;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADEE2030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19968;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::Times<int,fst::LogWeightTpl<float>,(fst::GallicType)0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  BOOL v9;
  float v10;
  int v12;
  _QWORD v13[3];

  fst::Times<int,(fst::StringType)0>((int *)a1, a2, (uint64_t)&v12);
  v6 = *(float *)(a1 + 32);
  v7 = NAN;
  if (v6 != -INFINITY)
  {
    v8 = *(float *)(a2 + 32);
    v7 = NAN;
    if (v8 != -INFINITY)
    {
      v7 = INFINITY;
      v9 = v8 == INFINITY || v6 == INFINITY;
      v10 = v6 + v8;
      if (!v9)
        v7 = v10;
    }
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight(a3, &v12, v7);
  return std::__list_imp<char *>::clear(v13);
}

void sub_1ADEE217C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D28330;
  a1[1] = v2;
  return a1;
}

void sub_1ADEE21E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D25080;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

_QWORD *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  _QWORD *result;

  v4 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *v4;
  result = std::list<int>::list((_QWORD *)(a3 + 8), (uint64_t)(v4 + 2));
  *(_DWORD *)(a3 + 32) = v4[8];
  return result;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0x6DB6DB6DB6DB6DB7
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 64)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56)) >> 3);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D28330;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 56);
  v4 = *v5;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 3);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1ADEE2538(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

_QWORD *fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  _QWORD *v6;
  int v8;
  _QWORD v9[3];
  int v10;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v8 = *a3;
  std::list<int>::list(v9, (uint64_t)(a3 + 2));
  v10 = a3[8];
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(v6, a2, &v8);
  return std::__list_imp<char *>::clear(v9);
}

void sub_1ADEE2638(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(uint64_t a1, int a2, int *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::DeleteArcs(*(_QWORD **)(a1 + 8), a2);
}

void fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  return std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D21180;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1ADEE2ACC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D226D8;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CE08;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1ADEE2BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FC08;
  v2 = (_QWORD *)a1[9];
  if (v2 != (_QWORD *)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD *)a1[8];
    do
    {
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(v2[v3++]);
      v2 = (_QWORD *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D226D8;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADEE2E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADEE2EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1ADEE2FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>,fst::MutableFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1ADEE309C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __str;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22[4];
  uint64_t v23;
  int v24;
  unsigned int v25;

  *(_QWORD *)a1 = &unk_1E5D226D8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CE08;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v25 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v23);
  while (1)
  {
    if (!v23)
    {
      if ((int)v25 >= v24)
        goto LABEL_45;
LABEL_25:
      v14 = v25;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23))
      break;
    if (!v23)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::AddState((_QWORD *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v21, a2, v14);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(a1, v14, (int *)&v21);
    std::__list_imp<char *>::clear(v22);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 56), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__str);
    while (1)
    {
      if (!__str.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __str.__r_.__value_.__r.__words[2])
          goto LABEL_38;
LABEL_32:
        v16 = (_DWORD *)(__str.__r_.__value_.__l.__size_ + 56 * v20);
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 24))(__str.__r_.__value_.__r.__words[0]))
        break;
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_32;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 32))();
LABEL_33:
      fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__str.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__str.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v19)
      --*v19;
LABEL_40:
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
    else
      ++v25;
  }
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1ADEE3470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  _QWORD *v16;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::~VectorFstBaseImpl(v16);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  uint64_t v4;
  int v5;
  int v7;
  _QWORD v8[3];
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
  v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  v5 = a3[8];
  v9 = v5;
  *(_DWORD *)v4 = v7;
  if ((int *)v4 != &v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v4 + 8), v8[1], (uint64_t)v8);
    v5 = v9;
  }
  *(_DWORD *)(v4 + 32) = v5;
  return std::__list_imp<char *>::clear(v8);
}

void sub_1ADEE3598(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADEE3654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>*>,std::reverse_iterator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_QWORD *)(v12 - 56) = *(_QWORD *)(a3 + v11 - 56);
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      std::list<int>::list((_QWORD *)(a7 + v11 - 40), a3 + v11 - 40);
      *(_DWORD *)(v12 - 16) = *(_DWORD *)(a3 + v11 - 16);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADEE3778(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  if (!*a2)
    ++a1[5];
  if (!a2[1])
    ++a1[6];
  v3 = a1 + 7;
  v4 = a1[8];
  if (v4 >= a1[9])
  {
    result = std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::__push_back_slow_path<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> const&>((uint64_t)v3, (uint64_t)a2);
    result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

_QWORD *std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  result = std::list<int>::list((_QWORD *)(v4 + 16), a2 + 16);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = v4 + 56;
  return result;
}

void sub_1ADEE3864(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::__push_back_slow_path<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[56 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  std::list<int>::list((_QWORD *)v11 + 2, a2 + 16);
  v12 = &v10[56 * v4];
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v12 + 12) = *(_DWORD *)(a2 + 48);
  v16 += 56;
  std::vector<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADEE39A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1ADEE3AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::vector<unsigned int>::pointer end;
  unsigned int *v47;
  std::vector<unsigned int>::pointer begin;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  unsigned int *v54;
  unsigned int v55;
  std::vector<unsigned int>::pointer v56;
  unsigned int *v57;
  std::vector<unsigned int>::pointer v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  unsigned int *v64;
  unsigned int v65;
  unint64_t v66;
  std::vector<unsigned int>::pointer v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  std::vector<unsigned int>::pointer v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  uint64_t *v83;
  BOOL v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t *v92;
  BOOL v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _DWORD *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  std::vector<unsigned int> v106;
  std::vector<unsigned int> v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  float v116;
  float v117;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v8 = v7;
  if (!a4
    || (v9 = v7 & 0x3FFFFFFF0000 | (2 * v7) & 0x2AAAAAAA0000 | (v7 >> 1) & 0x155555550000 | 7, (a2 & ~v9) != 0))
  {
    v8 = v7 & 7;
    v115 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if ((a2 & 0xF3C00000000) != 0 && v10)
    {
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v111 = (uint64_t *)&v115;
      fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(a1, &v108, 0);
      v8 = v115;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0)
      goto LABEL_211;
    v11 = a2 & 0xC0000;
    v12 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0)
      v12 = 0x10425A850000;
    v13 = v8 | v12;
    v14 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0)
      v13 |= 0x100000uLL;
    v115 = v13;
    memset(&v107, 0, sizeof(v107));
    memset(&v106, 0, sizeof(v106));
    v105 = 0;
    v15 = a1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v103);
    v16 = 0;
LABEL_12:
    if (!v103)
    {
      if ((int)v105 >= v104)
        goto LABEL_203;
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103))
    {
      if (v103)
      {
        v17 = (*(uint64_t (**)(void))(*(_QWORD *)v103 + 24))();
LABEL_18:
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17);
        v110 = (uint64_t)&v110;
        v111 = &v110;
        v112 = 0;
        LODWORD(v109) = 0;
        v107.__end_ = v107.__begin_;
        v106.__end_ = v106.__begin_;
        if (v11)
          std::vector<int>::reserve(&v107, v18);
        if (v14)
          std::vector<int>::reserve(&v106, v18);
        v102 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 136))(v15, v17, &v98);
        v19 = 1;
        while (1)
        {
          if (v98)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98))
            {
              if (v98)
              {
                (*(void (**)(void))(*(_QWORD *)v98 + 8))();
              }
              else
              {
LABEL_132:
                if (v101)
                  --*v101;
              }
              v15 = a1;
              if (!v11
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_141:
                if (!v14)
                  goto LABEL_152;
LABEL_142:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v106.__end_ - (char *)v106.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  v72 = v106.__end_ - v106.__begin_;
                  if (v72 <= 2)
                    v72 = 2;
                  v73 = v106.__begin_ + 1;
                  v74 = *v106.__begin_;
                  v75 = v72 - 1;
                  while (1)
                  {
                    v77 = *v73++;
                    v76 = v77;
                    if (v77 == v74)
                      break;
                    v74 = v76;
                    if (!--v75)
                      goto LABEL_152;
                  }
                  v115 = v115 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_152;
              }
              v66 = v107.__end_ - v107.__begin_;
              if (v66 <= 2)
                v66 = 2;
              v67 = v107.__begin_ + 1;
              v68 = *v107.__begin_;
              v69 = v66 - 1;
              while (1)
              {
                v71 = *v67++;
                v70 = v71;
                if (v71 == v68)
                  break;
                v68 = v70;
                if (!--v69)
                  goto LABEL_141;
              }
              v115 = v115 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v14)
                goto LABEL_142;
LABEL_152:
              if (v16 >= 1)
                v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v98, a1, v17);
              v78 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
              if ((_DWORD)v98)
                v79 = (char *)v101 + 1;
              else
                v79 = 0;
              if (*(_DWORD *)v78)
                v80 = *(_QWORD *)(v78 + 24) + 1;
              else
                v80 = 0;
              if (v79 != (char *)v80)
                goto LABEL_174;
              v81 = 0;
              v82 = v100;
              v83 = (uint64_t *)(v78 + 16);
              v84 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v78;
              v85 = !v84;
              while (1)
              {
                v86 = *v83;
                if ((v81 & 1) == 0 && v85)
                  break;
                if ((uint64_t *)v82 == &v99)
                  goto LABEL_173;
                if (*(_DWORD *)(v82 + 16) != *(_DWORD *)(v86 + 16))
                  goto LABEL_174;
                v82 = *(_QWORD *)(v82 + 8);
                v83 = (uint64_t *)(v86 + 8);
                v81 = 1;
              }
              if ((_DWORD)v98)
                goto LABEL_174;
LABEL_173:
              v117 = *(float *)&v102;
              v116 = 0.0;
              v116 = *(float *)(v78 + 32);
              if (*(float *)&v102 == v116)
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 40))(a1, v17, *(float *)&v102) != 1)v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              else
              {
LABEL_174:
                v87 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
                if ((_DWORD)v98)
                  v88 = (char *)v101 + 1;
                else
                  v88 = 0;
                if (*(_DWORD *)v87)
                  v89 = *(_QWORD *)(v87 + 24) + 1;
                else
                  v89 = 0;
                if (v88 != (char *)v89)
                  goto LABEL_194;
                v90 = 0;
                v91 = v100;
                v92 = (uint64_t *)(v87 + 16);
                v93 = (_DWORD)v98 && (_DWORD)v98 == *(_DWORD *)v87;
                v94 = !v93;
                while (1)
                {
                  v95 = *v92;
                  if ((v90 & 1) == 0 && v94)
                    break;
                  if ((uint64_t *)v91 == &v99)
                    goto LABEL_193;
                  if (*(_DWORD *)(v91 + 16) != *(_DWORD *)(v95 + 16))
                    goto LABEL_194;
                  v91 = *(_QWORD *)(v91 + 8);
                  v92 = (uint64_t *)(v95 + 8);
                  v90 = 1;
                }
                if ((_DWORD)v98)
                  goto LABEL_194;
LABEL_193:
                v117 = *(float *)&v102;
                v116 = 0.0;
                v116 = *(float *)(v87 + 32);
                if (*(float *)&v102 != v116)
LABEL_194:
                  v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                ++v16;
              }
              std::__list_imp<char *>::clear(&v99);
              std::__list_imp<char *>::clear(&v110);
              if (v103)
                (*(void (**)(uint64_t))(*(_QWORD *)v103 + 32))(v103);
              else
                ++v105;
              goto LABEL_12;
            }
            if (v98)
            {
              v20 = (*(uint64_t (**)(void))(*(_QWORD *)v98 + 32))();
              goto LABEL_29;
            }
          }
          else if (v102 >= v100)
          {
            goto LABEL_132;
          }
          v20 = v99 + 56 * v102;
LABEL_29:
          v21 = *(_DWORD *)v20;
          v22 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 != *(_DWORD *)(v20 + 4))
          {
            v115 = v115 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            v22 = *(_DWORD *)(v20 + 4);
          }
          if (v21 | v22)
          {
            if (v21)
            {
              if (v22)
                goto LABEL_35;
              goto LABEL_39;
            }
            v23 = v115;
          }
          else
          {
            v23 = v115 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          v115 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (v22)
          {
LABEL_35:
            if ((v19 & 1) == 0)
              goto LABEL_40;
            goto LABEL_44;
          }
LABEL_39:
          v115 = v115 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v19 & 1) == 0)
          {
LABEL_40:
            if (v21 < (int)v108)
              v115 = v115 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
            if (v22 < SHIDWORD(v108))
              v115 = v115 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
          }
LABEL_44:
          v24 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::One();
          v25 = *(_DWORD *)(v20 + 8);
          if (v25)
            v26 = *(_QWORD *)(v20 + 32) + 1;
          else
            v26 = 0;
          if (*(_DWORD *)v24)
            v27 = *(_QWORD *)(v24 + 24) + 1;
          else
            v27 = 0;
          if (v26 != v27)
            goto LABEL_64;
          v28 = 0;
          v29 = (uint64_t *)(v20 + 24);
          v30 = (uint64_t *)(v24 + 16);
          v31 = v25 && v25 == *(_DWORD *)v24;
          v32 = !v31;
          while (1)
          {
            v33 = *v29;
            v34 = *v30;
            if ((v28 & 1) == 0 && v32)
              break;
            if (v33 == v20 + 16)
              goto LABEL_63;
            if (*(_DWORD *)(v33 + 16) != *(_DWORD *)(v34 + 16))
              goto LABEL_64;
            v29 = (uint64_t *)(v33 + 8);
            v30 = (uint64_t *)(v34 + 8);
            v28 = 1;
          }
          if (v25)
            goto LABEL_64;
LABEL_63:
          v117 = 0.0;
          v117 = *(float *)(v20 + 40);
          v116 = 0.0;
          v116 = *(float *)(v24 + 32);
          if (v117 != v116)
          {
LABEL_64:
            v35 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
            v25 = *(_DWORD *)(v20 + 8);
            if (v25)
              v36 = *(_QWORD *)(v20 + 32) + 1;
            else
              v36 = 0;
            if (*(_DWORD *)v35)
              v37 = *(_QWORD *)(v35 + 24) + 1;
            else
              v37 = 0;
            if (v36 != v37)
              goto LABEL_84;
            v38 = 0;
            v39 = (uint64_t *)(v20 + 24);
            v40 = (uint64_t *)(v35 + 16);
            v41 = v25 && v25 == *(_DWORD *)v35;
            v42 = !v41;
            while (1)
            {
              v43 = *v39;
              v44 = *v40;
              if ((v38 & 1) == 0 && v42)
                break;
              if (v43 == v20 + 16)
                goto LABEL_83;
              if (*(_DWORD *)(v43 + 16) != *(_DWORD *)(v44 + 16))
                goto LABEL_84;
              v39 = (uint64_t *)(v43 + 8);
              v40 = (uint64_t *)(v44 + 8);
              v38 = 1;
            }
            if (v25)
              goto LABEL_84;
LABEL_83:
            v117 = 0.0;
            v117 = *(float *)(v20 + 40);
            v116 = 0.0;
            v116 = *(float *)(v35 + 32);
            if (v117 != v116)
LABEL_84:
              v115 = v115 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          }
          v45 = *(_DWORD *)(v20 + 48);
          if (v45 <= (int)v17)
            v115 = v115 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          if (v45 != (_DWORD)v17 + 1)
            v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          v108 = *(_QWORD *)v20;
          LODWORD(v109) = v25;
          if (&v108 != (uint64_t *)v20)
          {
            std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(&v110, *(_QWORD *)(v20 + 24), v20 + 16);
            v45 = *(_DWORD *)(v20 + 48);
          }
          v113 = *(_DWORD *)(v20 + 40);
          v114 = v45;
          if (v11)
          {
            end = v107.__end_;
            if (v107.__end_ >= v107.__end_cap_.__value_)
            {
              begin = v107.__begin_;
              v49 = v107.__end_ - v107.__begin_;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_213;
              v51 = (char *)v107.__end_cap_.__value_ - (char *)v107.__begin_;
              if (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107.__end_cap_, v52);
                begin = v107.__begin_;
                end = v107.__end_;
              }
              else
              {
                v53 = 0;
              }
              v54 = (unsigned int *)&v53[4 * v49];
              *v54 = *(_DWORD *)v20;
              v47 = v54 + 1;
              while (end != begin)
              {
                v55 = *--end;
                *--v54 = v55;
              }
              v107.__begin_ = v54;
              v107.__end_ = v47;
              v107.__end_cap_.__value_ = (unsigned int *)&v53[4 * v52];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v107.__end_ = *(_DWORD *)v20;
              v47 = end + 1;
            }
            v107.__end_ = v47;
          }
          if (v14)
          {
            v56 = v106.__end_;
            if (v106.__end_ >= v106.__end_cap_.__value_)
            {
              v58 = v106.__begin_;
              v59 = v106.__end_ - v106.__begin_;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62)
LABEL_213:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v61 = (char *)v106.__end_cap_.__value_ - (char *)v106.__begin_;
              if (((char *)v106.__end_cap_.__value_ - (char *)v106.__begin_) >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v62 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v106.__end_cap_, v62);
                v58 = v106.__begin_;
                v56 = v106.__end_;
              }
              else
              {
                v63 = 0;
              }
              v64 = (unsigned int *)&v63[4 * v59];
              *v64 = *(_DWORD *)(v20 + 4);
              v57 = v64 + 1;
              while (v56 != v58)
              {
                v65 = *--v56;
                *--v64 = v65;
              }
              v106.__begin_ = v64;
              v106.__end_ = v57;
              v106.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *v106.__end_ = *(_DWORD *)(v20 + 4);
              v57 = v56 + 1;
            }
            v106.__end_ = v57;
          }
          if (v98)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v98 + 40))(v98);
            v19 = 0;
          }
          else
          {
            v19 = 0;
            ++v102;
          }
        }
      }
LABEL_17:
      v17 = v105;
      goto LABEL_18;
    }
    if (v103)
      (*(void (**)(void))(*(_QWORD *)v103 + 8))();
LABEL_203:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15) != -1
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
    {
      v115 = v115 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v106.__begin_)
    {
      v106.__end_ = v106.__begin_;
      operator delete(v106.__begin_);
    }
    if (v107.__begin_)
    {
      v107.__end_ = v107.__begin_;
      operator delete(v107.__begin_);
    }
    v8 = v115;
LABEL_211:
    v9 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v9;
  return v8;
}

void sub_1ADEE4548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 48);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 48);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 48);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 48), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 56 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19800;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1ADEE4CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19800;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

unint64_t fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::FinishState(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t result;
  unint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int *i;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  float v32;
  float v33;
  uint64_t v34;
  _QWORD v35[3];
  float v36;
  float v37;
  float v38;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v34);
  v6 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>::Zero();
  if ((_DWORD)v34)
    v7 = v35[2] + 1;
  else
    v7 = 0;
  if (*(_DWORD *)v6)
    v8 = *(_QWORD *)(v6 + 24) + 1;
  else
    v8 = 0;
  if (v7 == v8)
  {
    v9 = 0;
    v10 = v35[1];
    v11 = (uint64_t *)(v6 + 16);
    if ((_DWORD)v34)
      v12 = (_DWORD)v34 == *(_DWORD *)v6;
    else
      v12 = 0;
    v13 = !v12;
    v14 = v13 ^ 1;
    while (1)
    {
      v15 = *v11;
      if ((v9 & 1) == 0 && !v14)
        break;
      if ((_QWORD *)v10 == v35)
        goto LABEL_42;
      if (*(_DWORD *)(v10 + 16) != *(_DWORD *)(v15 + 16))
        goto LABEL_21;
      v10 = *(_QWORD *)(v10 + 8);
      v11 = (uint64_t *)(v15 + 8);
      v9 = 1;
    }
    if ((_DWORD)v34)
      goto LABEL_21;
LABEL_42:
    v38 = v36;
    v37 = 0.0;
    v37 = *(float *)(v6 + 32);
    v32 = v36;
    v33 = v37;
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
    if (v32 == v33)
    {
      v17 = a2;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_21:
    result = (unint64_t)std::__list_imp<char *>::clear(v35);
  }
  v17 = a2;
  *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
LABEL_23:
  v18 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * v17) != *(_DWORD *)(v18 + 4 * v17))
    goto LABEL_36;
  v19 = 0;
  v20 = *(_QWORD **)(a1 + 80);
  v21 = v20[1];
  v22 = **(_QWORD **)(a1 + 16);
  v23 = (int *)(((v21 - *v20) & 0xFFFFFFFFFFFFFFFCLL) + *v20 - 4);
  do
  {
    v24 = *v23--;
    v19 |= *(_QWORD *)(v22 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24;
  }
  while ((_DWORD)v24 != a2);
  v25 = *(_QWORD **)a1;
  v26 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v21 - 4); ; --i)
  {
    v28 = *i;
    if (v25)
      *(_DWORD *)(*v25 + 4 * v28) = *(_DWORD *)(a1 + 48);
    result = v28 >> 6;
    v29 = 1 << v28;
    if ((v19 & 1) == 0)
      break;
    *(_QWORD *)(v22 + 8 * result) |= v29;
    *(_QWORD *)(v26 + 8 * result) &= ~v29;
    if ((_DWORD)v28 == a2)
    {
      v20[1] = i;
      goto LABEL_35;
    }
LABEL_33:
    ;
  }
  *(_QWORD *)(v26 + 8 * result) &= ~v29;
  if ((_DWORD)v28 != a2)
    goto LABEL_33;
  v20[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_35:
  ++*(_DWORD *)(a1 + 48);
LABEL_36:
  if (a3 != -1)
  {
    v30 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v30 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
      *(_QWORD *)(v30 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v31 = *(_DWORD *)(v18 + 4 * v17);
    if (v31 < *(_DWORD *)(v18 + 4 * a3))
      *(_DWORD *)(v18 + 4 * a3) = v31;
  }
  return result;
}

void sub_1ADEE501C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<char *>::clear((_QWORD *)(v1 + 8));
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19800;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19800;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19800;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADEE509C(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A7B8;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADEE5184(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A7B8;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADEE5590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v26);
  if (!v26 && (a4 & 1) == 0)
  {
    v10 = v27 + 56 * v28;
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v25 = 0x4000;
    if (v13 > 0x4000)
      v25 = v13;
    *(_QWORD *)(a1 + 8) = v25;
    v15 = (uint64_t *)malloc_type_malloc(56 * v25, 0x1020040540EBC04uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(uint64_t **)(a1 + 16);
    v15 = *(uint64_t **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[7 * v13];
  v16 = v26;
  v17 = v27;
  v19 = v28;
  v18 = v29;
  if (v29)
    ++*v29;
  v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    v24 = v15 - 7;
    *v24 = *(_QWORD *)v23;
    *((_DWORD *)v24 + 2) = *(_DWORD *)(v23 + 8);
    if (v15 - 7 != (uint64_t *)v23)
      std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>(v15 - 5, *(_QWORD *)(v23 + 24), v23 + 16);
    *((_DWORD *)v15 - 4) = *(_DWORD *)(v23 + 40);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 56 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1ADEE57F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _BYTE v34[8];
  void *v35[2];
  void *v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string __p[5];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)v35 = 0u;
  *(_OWORD *)v36 = 0u;
  v6 = -1;
  v40 = 0;
  v41 = 0;
  v39 = -1;
  v39 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v40 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v40 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v43;
    if (v43 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v9, (uint64_t)v34);
  v31 = v9;
  v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v12 = 0;
    v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(__p, a1, v12);
      fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(__p);
      std::__list_imp<char *>::clear(&__p[0].__r_.__value_.__l.__size_);
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      v14 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v12);
      v16 = *(_QWORD *)(v14 + 56);
      v15 = *(_QWORD *)(v14 + 64);
      if (v15 == v16)
        v17 = 0;
      else
        v17 = *(_DWORD **)(v14 + 56);
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 56) <= 1)
          v18 = 1;
        else
          v18 = (v15 - v16) / 56;
        v19 = v17;
        do
        {
          v20 = *v19;
          v19 += 14;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::PairWeight<fst::StringWeight<int,(fst::StringType)1>,fst::LogWeightTpl<float>>::Write(v17 + 2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[12];
          std::ostream::write();
          v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_30:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v33);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_33;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      updated = 1;
      goto LABEL_33;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v29 = fst::LogMessage::LogMessage((fst *)&v33, (uint64_t)__p);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_30;
  }
  v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_33:
  if (SHIBYTE(v37) < 0)
    operator delete(v36[1]);
  if (SHIBYTE(v36[0]) < 0)
    operator delete(v35[0]);
  return updated;
}

void sub_1ADEE5C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a17);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1ADEE6140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::Type();
    std::operator+<char>();
    fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Type(void)::type = v2;
  }
  return fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Type(void)::type;
}

void sub_1ADEE6230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1ADEE64D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal(_QWORD *a1, int a2, int *a3)
{
  int *v6;
  unint64_t v7;
  int v9;
  _QWORD v10[3];
  int v11;
  int v12;
  _QWORD v13[3];
  int v14;
  int v15;
  _QWORD v16[3];
  int v17;
  int v18;
  _QWORD v19[3];
  int v20;

  v6 = *(int **)(a1[8] + 8 * a2);
  v18 = *v6;
  std::list<int>::list(v19, (uint64_t)(v6 + 2));
  v20 = v6[8];
  v15 = *a3;
  std::list<int>::list(v16, (uint64_t)(a3 + 2));
  v17 = a3[8];
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::SetFinal((uint64_t)a1, a2, &v15);
  std::__list_imp<char *>::clear(v16);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v12 = v18;
  std::list<int>::list(v13, (uint64_t)v19);
  v14 = v20;
  v9 = *a3;
  std::list<int>::list(v10, (uint64_t)(a3 + 2));
  v11 = a3[8];
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>(v7, &v12, &v9);
  std::__list_imp<char *>::clear(v10);
  std::__list_imp<char *>::clear(v13);
  return std::__list_imp<char *>::clear(v19);
}

void sub_1ADEE6690(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::AddArc(_QWORD *a1, int a2, int *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 64);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 56))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 56);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>(v8, a2, a3, v7);
  return fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  int64x2_t v32;
  int64x2_t v33;
  std::vector<int>::value_type __x;
  std::vector<int> v35;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v35, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v35.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v35.__begin_[v12] == -1)
      {
        fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Destroy(*(_QWORD *)(v11 + 8 * v12));
      }
      else
      {
        v35.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(_QWORD *)(v14 + 8 * v15);
      v17 = *(int64x2_t *)(v16 + 40);
      v18 = *(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56);
      if (v18)
        v19 = *(_QWORD *)(v16 + 56);
      else
        v19 = 0;
      if (v18)
      {
        v20 = 0;
        v21 = 0;
        v22 = (int *)(v19 + 48);
        v23 = v19 + 16;
        do
        {
          v24 = v35.__begin_[*v22];
          if (v24 == -1)
          {
            v27 = *((_QWORD *)v22 - 6);
            v28.i64[0] = v27;
            v28.i64[1] = HIDWORD(v27);
            v17 = vaddq_s64(v17, vceqzq_s64(v28));
          }
          else
          {
            *v22 = v24;
            if (v20 != v21)
            {
              v32 = v17;
              v25 = v19 + 56 * v21;
              *(_QWORD *)v25 = *((_QWORD *)v22 - 6);
              *(_DWORD *)(v25 + 8) = *(v22 - 10);
              std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(v25 + 16), *((_QWORD *)v22 - 3), v23);
              v26 = v19 + 56 * v21;
              *(_DWORD *)(v26 + 40) = *(v22 - 2);
              *(_DWORD *)(v26 + 48) = *v22;
              v14 = *v4;
              v17 = v32;
            }
            ++v21;
          }
          ++v20;
          v16 = *(_QWORD *)(v14 + 8 * v15);
          v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v16 + 64) - *(_QWORD *)(v16 + 56)) >> 3);
          v22 += 14;
          v23 += 56;
        }
        while (v20 < v29);
        v33 = v17;
      }
      else
      {
        v33 = *(int64x2_t *)(v16 + 40);
        v21 = 0;
        v29 = 0;
      }
      fst::VectorState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::DeleteArcs((_QWORD *)v16, v29 - v21);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 40) = v33;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v30 = *(int *)(a1 + 88);
  if ((_DWORD)v30 == -1)
  {
    v31 = v35.__begin_;
    if (!v35.__begin_)
      return;
  }
  else
  {
    v31 = v35.__begin_;
    *(_DWORD *)(a1 + 88) = v35.__begin_[v30];
  }
  v35.__end_ = v31;
  operator delete(v31);
}

void sub_1ADEE69BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                  * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)
                                                             - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)) >> 3));
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 56 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::VectorState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,std::allocator<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::Flags_()
{
  return 15;
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  uint64_t v20;
  fst *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  fst *v28;
  _QWORD *v29;
  fst *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  fst *v39;
  _QWORD *v40;
  _QWORD *v41;
  fst *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t result;
  void *__p[2];
  char v48;
  char v49;
  __int16 v50;
  void *v51[3];
  uint64_t v52[2];
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v5 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v6 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v20 = operator new();
    *(_DWORD *)(v20 + 8) = 5;
    *(_BYTE *)(v20 + 12) = 0;
    *(_QWORD *)v20 = &unk_1E5D1EEB0;
    *(_QWORD *)(v20 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v20;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v52, "INFO");
    v21 = fst::LogMessage::LogMessage((fst *)v51, (uint64_t)v52);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"AutoQueue: using state-order discipline", 39);
    goto LABEL_17;
  }
  if ((v6 & 0x800000000) != 0)
  {
    v24 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(v24, a2);
    *(_QWORD *)(a1 + 16) = v24;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v52, "INFO");
    v25 = fst::LogMessage::LogMessage((fst *)v51, (uint64_t)v52);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"AutoQueue: using top-order discipline", 37);
LABEL_17:
    fst::LogMessage::~LogMessage((fst::LogMessage *)v51);
    if (SHIBYTE(v53) < 0)
    {
      v23 = (void *)v52[0];
LABEL_46:
      operator delete(v23);
    }
    return a1;
  }
  v55 = 0;
  v52[0] = (uint64_t)v5;
  v52[1] = 0;
  v53 = 0;
  v54 = &v55;
  fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::SccVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(a2, v52, 0);
  v7 = *(int **)(a1 + 48);
  v8 = *(int **)(a1 + 56);
  if (v7 != v8)
  {
    v9 = v7 + 1;
    if (v7 + 1 != v8)
    {
      v10 = *v7;
      v11 = v7 + 1;
      do
      {
        v13 = *v11++;
        v12 = v13;
        v14 = v10 < v13;
        if (v10 <= v13)
          v10 = v12;
        if (v14)
          v7 = v9;
        v9 = v11;
      }
      while (v11 != v8);
    }
  }
  v15 = *v7;
  v16 = *v7 + 1;
  std::vector<fst::QueueType>::vector(v51, v16);
  v50 = 0;
  fst::AutoQueue<int>::SccQueueType<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::AnyArcFilter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>,fst::NaturalLess<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>>(a2, v5, (uint64_t)v51, 0, &v50, (_BYTE *)&v50 + 1);
  if (HIBYTE(v50))
  {
    v17 = operator new();
    *(_DWORD *)(v17 + 8) = 2;
    *(_BYTE *)(v17 + 12) = 0;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_QWORD *)v17 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v17;
    if (FLAGS_v < 2)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v18 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v19 = (_QWORD *)fst::cerr(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_24:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
    if (v48 < 0)
      operator delete(__p[0]);
LABEL_44:
    v23 = v51[0];
    if (v51[0])
    {
      v51[1] = v51[0];
      goto LABEL_46;
    }
    return a1;
  }
  if ((_BYTE)v50)
  {
    v27 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue(v27, (uint64_t)v5);
    *(_QWORD *)(a1 + 16) = v27;
    if (FLAGS_v < 2)
      goto LABEL_44;
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v28 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"AutoQueue: using top-order discipline", 37);
    goto LABEL_24;
  }
  if (FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v30 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
    v31 = (_QWORD *)fst::cerr(v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
    if (v48 < 0)
      operator delete(__p[0]);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v16);
  if (v15 < 0)
  {
LABEL_43:
    v45 = operator new();
    *(_DWORD *)(v45 + 8) = 6;
    *(_BYTE *)(v45 + 12) = 0;
    *(_QWORD *)v45 = &unk_1E5D22CF0;
    *(_QWORD *)(v45 + 16) = v4;
    *(_QWORD *)(v45 + 24) = v5;
    *(_QWORD *)(v45 + 32) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v45 + 48) = 0;
    *(_QWORD *)(v45 + 56) = 0;
    *(_QWORD *)(v45 + 40) = 0;
    *(_QWORD *)(a1 + 16) = v45;
    goto LABEL_44;
  }
  v32 = 0;
  while (1)
  {
    v33 = *((_DWORD *)v51[0] + v32);
    if (v33)
      break;
    *(_QWORD *)(*v4 + 8 * v32) = 0;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v42 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v43 = (_QWORD *)fst::cerr(v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"AutoQueue: SCC #", 16);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)": using trivial discipline", 26);
LABEL_40:
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v49);
      if (v48 < 0)
        operator delete(__p[0]);
    }
LABEL_42:
    if (v16 == ++v32)
      goto LABEL_43;
  }
  if (v33 == 2)
  {
    v38 = operator new();
    *(_DWORD *)(v38 + 8) = 2;
    *(_BYTE *)(v38 + 12) = 0;
    *(_OWORD *)(v38 + 16) = 0u;
    *(_OWORD *)(v38 + 32) = 0u;
    *(_OWORD *)(v38 + 48) = 0u;
    *(_QWORD *)v38 = &unk_1E5D27B60;
    *(_QWORD *)(*v4 + 8 * v32) = v38;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v39 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v40 = (_QWORD *)fst::cerr(v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"AutoQueue: SCC #", 16);
      v41 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)": using LIFO disciplle", 22);
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  if (v33 != 3)
  {
    v34 = operator new();
    *(_DWORD *)(v34 + 8) = 1;
    *(_BYTE *)(v34 + 12) = 0;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_QWORD *)v34 = &unk_1E5D23A28;
    *(_QWORD *)(*v4 + 8 * v32) = v34;
    if (FLAGS_v >= 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v35 = fst::LogMessage::LogMessage((fst *)&v49, (uint64_t)__p);
      v36 = (_QWORD *)fst::cerr(v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: SCC #", 16);
      v37 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)": using FIFO disciplle", 22);
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  result = operator new();
  __break(1u);
  return result;
}

void sub_1ADEE70CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void **v27;
  void **v28;
  void *v30;
  void *v31;

  if (a14 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  v30 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v26 + 56) = v30;
    operator delete(v30);
  }
  v31 = *v27;
  if (*v27)
  {
    *(_QWORD *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::TopOrderVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1ADEE7330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::TopOrderVisitor<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::AnyArcFilter<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 56 * v12[5];
            v18 = *(int *)(v17 + 48);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 48);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 48);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D19800;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADEE7A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19800;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[40 * v9];
  *(_DWORD *)v11 = *a2;
  std::list<int>::list((_QWORD *)v11 + 1, (uint64_t)(a2 + 2));
  *((_DWORD *)v11 + 8) = a2[8];
  v15 += 40;
  std::vector<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADEE7C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::ArcMapFst(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v8[8];
  uint64_t v9;

  v6 = operator new();
  v8[0] = 1;
  v9 = 0;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::ArcMapFstImpl(v6, a2, a3, (uint64_t)v8);
  *a1 = &unk_1E5D22D78;
  a1[1] = v6;
  return a1;
}

void sub_1ADEE7CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

void fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D23CA0;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D22D78;
  return v4;
}

void sub_1ADEE7E6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::StateIterator(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1ADEE7EF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::ArcMapFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheBaseImpl(a1, a4) = &unk_1E5D1B1A8;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(_QWORD *)(a1 + 144) = operator new();
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Init(a1);
  return a1;
}

void sub_1ADEE7FA8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

unint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Init(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  unint64_t v7;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 112))(*(_QWORD *)(a1 + 136));
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v2)
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      v4 = 0;
    *(_QWORD *)(a1 + 40) = v4;
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = 0;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if ((_DWORD)result == -1)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 0x3FFFFFFF0004, 0);
    result = fst::ProjectProperties(v7, 1);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | result & 0x3FFCFFFF0007;
    if (*(_DWORD *)(a1 + 156) == 2)
      *(_DWORD *)(a1 + 160) = 0;
  }
  return result;
}

void sub_1ADEE8100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0)|| (fst::ProjectProperties(0, 1) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D228D0;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B790;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorCacheStore((_QWORD *)v4, (_BYTE *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 72) = v5 == 0;
  *(_DWORD *)(v4 + 76) = -1;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = *(_BYTE *)a2;
  if (v5 <= 0x1FA0)
    v5 = 8096;
  *(_QWORD *)(v4 + 96) = v5;
  *(_BYTE *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

void sub_1ADEE82B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorCacheStore(_QWORD *a1, _BYTE *a2)
{
  *(_BYTE *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1ADEE8370(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  std::__list_imp<char *>::clear(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B790;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl((uint64_t)a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::~VectorCacheStore(_QWORD *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~ArcMapFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D1B1A8;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3)
      MEMORY[0x1AF44D190](v3, 0xC400A2AC0F1);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl((_QWORD *)a1);
}

_QWORD *fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  int *v7;
  int v8;
  int *v9;
  _QWORD *v10;
  int v11;
  _BOOL4 v13;
  float v14;
  fst *v15;
  _QWORD *v16;
  int *v17;
  _QWORD *v18;
  _BOOL4 v20;
  float v21;
  _QWORD *v22;
  int *v23;
  int v25;
  _QWORD v26[3];
  int v27;
  int v28;
  _QWORD v29[3];
  int v30;
  int v31;
  _QWORD v32[3];
  int v33;
  int v34;
  _QWORD v35[3];
  int v36;
  int v37;
  _QWORD v38[3];
  int v39;
  void *v40;
  float v41;
  int v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  _BYTE v47[24];
  int v48;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    v6 = *(_DWORD *)(a1 + 156);
    if (v6 == 1)
    {
      v8 = *(_DWORD *)(a1 + 160);
      if (v8 != a2)
      {
        v20 = v8 != -1 && v8 <= a2;
        v21 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v20));
        v40 = 0;
        v41 = v21;
        v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          v23 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
          v28 = *v23;
          v22 = v29;
          std::list<int>::list(v29, (uint64_t)(v23 + 2));
          v30 = v23[8];
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v28);
        }
        else
        {
          v31 = v46;
          v22 = v32;
          std::list<int>::list(v32, (uint64_t)v47);
          v33 = v48;
          fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v31);
        }
        std::__list_imp<char *>::clear(v22);
        v18 = v47;
        goto LABEL_35;
      }
      v9 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
      v34 = *v9;
      v10 = v35;
      std::list<int>::list(v35, (uint64_t)(v9 + 2));
      v36 = v9[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v34);
    }
    else
    {
      if (v6 != 2)
      {
        v11 = *(_DWORD *)(a1 + 160);
        v13 = v11 != -1 && v11 <= a2;
        v14 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v13));
        v40 = 0;
        v41 = v14;
        v42 = -1;
        fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v40, (uint64_t)&v45);
        if (v45)
        {
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(&v40, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(&v40, "ERROR");
          v15 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&v40);
          v16 = (_QWORD *)fst::cerr(v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ArcMapFst: non-zero arc labels for superfinal arc", 49);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
          if (v43 < 0)
            operator delete(v40);
          *(_QWORD *)(a1 + 8) |= 4uLL;
        }
        v37 = v46;
        std::list<int>::list(v38, (uint64_t)v47);
        v39 = v48;
        fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v37);
        std::__list_imp<char *>::clear(v38);
        v18 = v47;
        goto LABEL_35;
      }
      if (*(_DWORD *)(a1 + 160) == a2)
        v7 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
      else
        v7 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
      v17 = v7;
      v25 = *v7;
      v10 = v26;
      std::list<int>::list(v26, (uint64_t)(v7 + 2));
      v27 = v17[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v25);
    }
    v18 = v10;
LABEL_35:
    std::__list_imp<char *>::clear(v18);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1ADEE87A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v1 - 105));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  std::__list_imp<char *>::clear((_QWORD *)(v1 - 88));
  _Unwind_Resume(a1);
}

_QWORD *fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  char *MutableState;
  int v5;
  _QWORD *result;
  int v7;
  _QWORD v8[3];
  int v9;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  v7 = *a3;
  std::list<int>::list(v8, (uint64_t)(a3 + 2));
  v5 = a3[8];
  v9 = v5;
  *(_DWORD *)MutableState = v7;
  if (MutableState != (char *)&v7)
  {
    std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)MutableState + 1, v8[1], (uint64_t)v8);
    v5 = v9;
  }
  *((_DWORD *)MutableState + 8) = v5;
  result = std::__list_imp<char *>::clear(v8);
  *((_DWORD *)MutableState + 20) |= 9u;
  return result;
}

void sub_1ADEE88BC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  char *MutableState;
  char *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *((_DWORD *)MutableState + 20);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 20) = v5 | 4;
      v6 = *((_QWORD *)MutableState + 8) - *((_QWORD *)MutableState + 7) + *(_QWORD *)(a1 + 112) + 88;
      *(_QWORD *)(a1 + 112) = v6;
      *(_BYTE *)(a1 + 104) = 1;
      if (v6 > *(_QWORD *)(a1 + 96))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  char *result;
  uint64_t v5;
  char *MutableState;

  v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2)
    return *(char **)(a1 + 80);
  if (!*(_BYTE *)(a1 + 72))
    return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 76) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
    *((_DWORD *)MutableState + 20) |= 4u;
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::reserve((uint64_t *)MutableState + 7, 0x80uLL);
    return *(char **)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(v5 + 84))
  {
    *(_DWORD *)(v5 + 80) &= ~4u;
    *(_BYTE *)(a1 + 72) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 76) = a2;
  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Reset(v5);
  result = *(char **)(a1 + 80);
  *((_DWORD *)result + 20) |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *MutableState;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  fst *v27;
  _QWORD *v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37[2];
  char v38;
  char v39;
  char v40;
  void *__p[2];
  char v42;

  if (*(_BYTE *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0)
        operator delete(__p[0]);
    }
    v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      v18 = *(_DWORD *)(v17 + 16);
      if (v18)
        v19 = v18 - 1;
      else
        v19 = *(_DWORD *)(a1 + 76);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::GetMutableState(a1, v19);
      v21 = *(_QWORD *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 21))
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v22 = *((_DWORD *)MutableState + 20);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              v23 = *((_QWORD *)MutableState + 8) - *((_QWORD *)MutableState + 7) + 88;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>>::Delete((_QWORD *)a1);
            v17 = *(_QWORD *)(a1 + 56);
            continue;
          }
        }
        else
        {
          v22 = *((_DWORD *)MutableState + 20);
          if ((v22 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      *((_DWORD *)MutableState + 20) &= ~8u;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 112) <= v16)
    {
      v24 = *(_QWORD *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          v25 = *(_QWORD *)(a1 + 96);
          do
          {
            v25 *= 2;
            v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(_QWORD *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        v28 = (_QWORD *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      v30 = (_QWORD *)fst::cerr(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0)
        operator delete(v37[0]);
    }
  }
}

void sub_1ADEE8DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

char *fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    v14 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v14);
  }
  else
  {
    v8 = *(char **)(v6 + 8 * a2);
    if (v8)
      return v8;
  }
  v8 = (char *)operator new(0x58uLL);
  v9 = (_DWORD *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  *(_DWORD *)v8 = *v9;
  std::list<int>::list((_QWORD *)v8 + 1, (uint64_t)(v9 + 2));
  *((_DWORD *)v8 + 8) = v9[8];
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = v8;
  if (*(_BYTE *)a1)
  {
    v10 = operator new(0x18uLL);
    v10[4] = a2;
    v12 = *(_QWORD *)(a1 + 32);
    v11 = (_QWORD *)(a1 + 32);
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *v11 = v10;
    ++v11[2];
  }
  return v8;
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Reset(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  v3 = result;
  *(_DWORD *)a1 = *(_DWORD *)result;
  if (result != a1)
    result = (uint64_t)std::list<int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<int,void *>,std::__list_const_iterator<int,void *>>((uint64_t *)(a1 + 8), *(_QWORD *)(result + 16), result + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v3 + 32);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4 != v5)
  {
    do
    {
      v6 = v4 - 56;
      result = (uint64_t)std::__list_imp<char *>::clear((_QWORD *)(v4 - 40));
      v4 = v6;
    }
    while (v6 != v5);
  }
  *(_QWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 64) - *(_QWORD *)(*(_QWORD *)v5 + 56)) >> 3);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Expand(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v7;
  __int128 *v8;
  int v9;
  int v10;
  uint64_t *MutableState;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  float v24;
  float v25;
  int v26;
  int v27;
  _BOOL4 v29;
  unsigned int v30;
  int v31;
  int v32;
  _BOOL4 v34;
  unsigned int v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  BOOL v44;
  _BOOL4 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  int v51;
  _QWORD v52[3];
  float v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  unint64_t v58;
  float v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  int v67;
  __int128 v68;

  v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetArcs(a1, a2);
    return;
  }
  v5 = *(_QWORD *)(a1 + 136);
  v7 = v4 != -1 && v4 <= a2;
  v58 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v5 + 136))(v5, (a2 - v7), &v54);
  while (1)
  {
    if (!v54)
    {
      if (v58 >= v56)
        goto LABEL_28;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54))
      break;
    if (v54)
    {
      v8 = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)v54 + 32))();
      goto LABEL_16;
    }
LABEL_15:
    v8 = (__int128 *)(v55 + 16 * v58);
LABEL_16:
    v68 = *v8;
    v9 = HIDWORD(v68);
    v10 = *(_DWORD *)(a1 + 160);
    if (v10 != -1 && v10 <= SHIDWORD(v68))
      v9 = HIDWORD(v68) + 1;
    if (v9 >= *(_DWORD *)(a1 + 164))
      *(_DWORD *)(a1 + 164) = v9 + 1;
    HIDWORD(v68) = v9;
    fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v68, (uint64_t)&v61);
    MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(MutableState, (uint64_t)&v61);
    std::__list_imp<char *>::clear(&v63);
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54);
    else
      ++v58;
  }
  if (v54)
  {
    (*(void (**)(void))(*(_QWORD *)v54 + 8))();
    goto LABEL_30;
  }
LABEL_28:
  if (v57)
    --*v57;
LABEL_30:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
LABEL_52:
    v26 = *(_DWORD *)(a1 + 156);
    if (v26 == 1)
    {
      v32 = *(_DWORD *)(a1 + 160);
      v34 = v32 != -1 && v32 <= a2;
      *(float *)&v35 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v34));
      v54 = 0;
      v55 = v35 | 0xFFFFFFFF00000000;
      fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v54, (uint64_t)&v61);
      if (v61)
      {
        v36 = *(_DWORD *)(a1 + 160);
        if (v36 == -1)
        {
          v36 = *(_DWORD *)(a1 + 164);
          *(_DWORD *)(a1 + 160) = v36;
          *(_DWORD *)(a1 + 164) = v36 + 1;
        }
        v67 = v36;
        v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(v37, (uint64_t)&v61);
      }
      v14 = &v63;
      goto LABEL_96;
    }
    if (v26 != 2)
      goto LABEL_97;
    v27 = *(_DWORD *)(a1 + 160);
    v29 = v27 != -1 && v27 <= a2;
    *(float *)&v30 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v29));
    v54 = 0;
    v55 = v30 | 0xFFFFFFFF00000000;
    fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v54, (uint64_t)&v61);
    if (v61)
    {
      v31 = v62;
    }
    else
    {
      v38 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
      v31 = v62;
      if ((_DWORD)v62)
        v39 = v65 + 1;
      else
        v39 = 0;
      if (*(_DWORD *)v38)
        v40 = *(_QWORD *)(v38 + 24) + 1;
      else
        v40 = 0;
      if (v39 == v40)
      {
        v41 = 0;
        v42 = v64;
        v43 = (uint64_t *)(v38 + 16);
        v44 = (_DWORD)v62 && (_DWORD)v62 == *(_DWORD *)v38;
        v45 = !v44;
        v46 = !v45;
        while (1)
        {
          v47 = *v43;
          if ((v41 & 1) == 0 && !v46)
            break;
          if ((uint64_t *)v42 == &v63)
            goto LABEL_93;
          if (*(_DWORD *)(v42 + 16) != *(_DWORD *)(v47 + 16))
            goto LABEL_94;
          v42 = *(_QWORD *)(v42 + 8);
          v43 = (uint64_t *)(v47 + 8);
          v41 = 1;
        }
        if ((_DWORD)v62)
          goto LABEL_94;
LABEL_93:
        *(float *)&v54 = v66;
        LODWORD(v68) = 0;
        LODWORD(v68) = *(_DWORD *)(v38 + 32);
        if (v66 == *(float *)&v68)
          goto LABEL_95;
      }
    }
LABEL_94:
    v48 = v61;
    v51 = v31;
    std::list<int>::list(v52, (uint64_t)&v63);
    v53 = v66;
    v49 = *(_DWORD *)(a1 + 160);
    v54 = v48;
    LODWORD(v55) = v51;
    std::list<int>::list(&v56, (uint64_t)v52);
    v59 = v53;
    v60 = v49;
    v50 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(v50, (uint64_t)&v54);
    std::__list_imp<char *>::clear(&v56);
    std::__list_imp<char *>::clear(v52);
LABEL_95:
    v14 = &v63;
LABEL_96:
    std::__list_imp<char *>::clear(v14);
    goto LABEL_97;
  }
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Final(a1, a2, (uint64_t)&v61);
  v13 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  v14 = &v62;
  if ((_DWORD)v61)
    v15 = v64 + 1;
  else
    v15 = 0;
  if (*(_DWORD *)v13)
    v16 = *(_QWORD *)(v13 + 24) + 1;
  else
    v16 = 0;
  if (v15 != v16)
    goto LABEL_96;
  v17 = 0;
  v18 = v63;
  v19 = (uint64_t *)(v13 + 16);
  if ((_DWORD)v61)
    v20 = (_DWORD)v61 == *(_DWORD *)v13;
  else
    v20 = 0;
  v21 = !v20;
  v22 = v21 ^ 1;
  while (1)
  {
    v23 = *v19;
    if ((v17 & 1) == 0 && !v22)
      break;
    if ((uint64_t *)v18 == &v62)
      goto LABEL_51;
    if (*(_DWORD *)(v18 + 16) != *(_DWORD *)(v23 + 16))
      goto LABEL_96;
    v18 = *(_QWORD *)(v18 + 8);
    v19 = (uint64_t *)(v23 + 8);
    v17 = 1;
  }
  if ((_DWORD)v61)
    goto LABEL_96;
LABEL_51:
  LODWORD(v54) = v65;
  LODWORD(v68) = 0;
  LODWORD(v68) = *(_DWORD *)(v13 + 32);
  v24 = *(float *)&v65;
  v25 = *(float *)&v68;
  std::__list_imp<char *>::clear(&v62);
  if (v24 == v25)
    goto LABEL_52;
LABEL_97:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetArcs(a1, a2);
}

void sub_1ADEE94F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::__list_imp<char *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetArcs(uint64_t a1, int a2)
{
  char *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = *((_QWORD *)MutableState + 7);
  v6 = *((_QWORD *)MutableState + 8) - v5;
  if (v6)
  {
    v7 = v6 / 56;
    v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 48);
    do
    {
      v11 = *v9;
      v9 += 14;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 20) |= 0xAu;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 104) && (*(_BYTE *)(a2 + 80) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56) + *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v4;
    if (v4 > *(_QWORD *)(a1 + 96))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GC(a1, (char *)a2, 0, 0.666);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 7;
  v4 = a1[8];
  if (v4 >= a1[9])
  {
    result = std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__push_back_slow_path<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const&>(v3, a2);
  }
  else
  {
    std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__construct_one_at_end[abi:ne180100]<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const&>((uint64_t)v3, a2);
    result = v4 + 56;
  }
  a1[8] = result;
  return result;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 40);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 48);
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D23CA0;
  if (a3)
  {
    v5 = operator new();
    fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::ArcMapFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADEE9834(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D1B1A8;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  *(_QWORD *)(a1 + 144) = operator new();
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Init(a1);
  return a1;
}

void sub_1ADEE98DC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v13[8];
  unint64_t v14;

  *(_QWORD *)a1 = &unk_1E5D228D0;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B790;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v13[0] = *(_BYTE *)(a1 + 104);
  v14 = v7;
  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::VectorCacheStore((_QWORD *)v6, v13);
  v8 = v14;
  *(_BYTE *)(v6 + 72) = v14 == 0;
  *(_DWORD *)(v6 + 76) = -1;
  *(_QWORD *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 88) = v13[0];
  if (v8 <= 0x1FA0)
    v8 = 8096;
  *(_QWORD *)(v6 + 96) = v8;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v9 = 1;
  else
    v9 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v9;
  if (((a3 ^ 1) & 1) == 0)
  {
    v10 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::operator=(v6, v10);
    v11 = *(_OWORD *)(v10 + 104);
    *(_OWORD *)(v6 + 88) = *(_OWORD *)(v10 + 88);
    *(_OWORD *)(v6 + 104) = v11;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1ADEE9A68(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  char *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x58uLL);
        fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::list<int>::list((_QWORD *)(a1 + 8), a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*>>((_QWORD *)(a1 + 56), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
  *(_QWORD *)(a1 + 80) = *(unsigned int *)(a2 + 80);
  return a1;
}

void sub_1ADEE9D34(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*>,std::__wrap_iter<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADEE9DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0> const*,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a2 + v7;
      v9 = a4 + v7;
      *(_QWORD *)v9 = *(_QWORD *)(a2 + v7);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + v7 + 8);
      std::list<int>::list((_QWORD *)(a4 + v7 + 16), a2 + v7 + 16);
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(a2 + v7 + 40);
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (v8 + 56 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADEE9E58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 40;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1C7E8;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1ADEE9EEC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CheckSuperfinal(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  int v6;
  uint64_t v7;
  _QWORD v8[5];

  v1 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v1 + 156) == 1)
  {
    v2 = result;
    if (!*(_BYTE *)(result + 44))
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        if ((result & 1) != 0)
          return result;
        v1 = *(_QWORD *)(v2 + 8);
      }
      else if (*(_DWORD *)(v2 + 32) >= *(_DWORD *)(v2 + 24))
      {
        return result;
      }
      v3 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 136) + 32))(*(_QWORD *)(v1 + 136), *(unsigned int *)(v2 + 40));
      v4 = 0;
      v5 = v3;
      v6 = -1;
      fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((float *)&v4, (uint64_t)&v7);
      if (v7)
        *(_BYTE *)(v2 + 44) = 1;
      return (uint64_t)std::__list_imp<char *>::clear(v8);
    }
  }
  return result;
}

_QWORD *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1C7E8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~StateIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1C7E8;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Done_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) & 1) != 0)
      return *(_BYTE *)(a1 + 44) == 0;
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(_BYTE *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Next(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  ++*(_DWORD *)(a1 + 40);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if ((result & 1) == 0)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
        return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CheckSuperfinal(a1);
      }
LABEL_6:
      ++*(_DWORD *)(a1 + 32);
      return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CheckSuperfinal(a1);
    }
  }
  else if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 24))
  {
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 44))
    *(_BYTE *)(a1 + 44) = 0;
  return result;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Reset(uint64_t a1)
{
  uint64_t v2;

  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  else
    *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  return fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CheckSuperfinal(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ToGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;

  v4 = operator new();
  v6[0] = FLAGS_fst_default_cache_gc;
  v7 = FLAGS_fst_default_cache_gc_limit;
  v8 = 0x33A800000;
  v9 = 0;
  v10 = 0;
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFstImpl(v4, a2, (uint64_t)v6);
  *a1 = &unk_1E5D1E668;
  a1[1] = v4;
  return a1;
}

void sub_1ADEEA2A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D26B88;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Start(uint64_t a1)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D1E668;
  return v4;
}

void sub_1ADEEA458(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D203A8;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C5A8;
  *a2 = v4;
  return result;
}

void sub_1ADEEA514(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  fst *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v21;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheBaseImpl(a1, a3) = &unk_1E5D21850;
  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  v7 = *(_DWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a3 + 20);
  v8 = *(_DWORD *)(a3 + 28);
  v9 = *(_WORD *)(a3 + 32);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 136) = v6;
  *(_DWORD *)(a1 + 144) = v7;
  *(_DWORD *)(a1 + 156) = v8;
  *(_WORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "factor_weight");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::FactorWeightProperties(v10) & 0x3FFFFFFF0004;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 40) = v13;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v15 = *(_QWORD *)(a1 + 48);
  if (v15 != v14)
  {
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v14)
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    else
      v16 = 0;
    *(_QWORD *)(a1 + 48) = v16;
  }
  if (!*(_DWORD *)(a1 + 148))
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "WARNING");
    v17 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)&__str);
    v18 = (_QWORD *)fst::cerr(v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"FactorWeightFst: factor mode is set to 0: ", 42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"factoring neither arc weights nor final weights.", 48);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1ADEEA75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  void **v19;
  void *v21;

  if (a18 < 0)
    operator delete(__p);
  v21 = *v19;
  if (*v19)
  {
    v18[30] = v21;
    operator delete(v21);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)(v19 - 5));
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

void fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFstImpl(uint64_t a1)
{
  fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::~FactorWeightFstImpl(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &unk_1E5D21850;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(_QWORD *)(a1 + 240) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table(a1 + 192);
  v5 = (void **)(a1 + 168);
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl((_QWORD *)a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Start(uint64_t a1)
{
  uint64_t result;
  int v3;
  int *v4;
  int State;
  int v6;
  _QWORD v7[3];
  int v8;
  int v9[4];
  _QWORD v10[3];
  int v11;

  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 4))
  {
    *(_BYTE *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result != -1)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
    v4 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
    v6 = *v4;
    std::list<int>::list(v7, (uint64_t)(v4 + 2));
    v8 = v4[8];
    v9[0] = v3;
    v9[2] = v6;
    std::list<int>::list(v10, (uint64_t)v7);
    v11 = v8;
    State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, v9);
    std::__list_imp<char *>::clear(v10);
    std::__list_imp<char *>::clear(v7);
    *(_DWORD *)(a1 + 64) = State;
    *(_BYTE *)(a1 + 60) = 1;
    if (*(_DWORD *)(a1 + 68) <= State)
      *(_DWORD *)(a1 + 68) = State + 1;
    return *(unsigned int *)(a1 + 64);
  }
  return result;
}

void sub_1ADEEAA04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FindState(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40[4];
  _QWORD v41[3];
  int v42;
  int v43;
  float v44;

  if ((*(_BYTE *)(a1 + 148) & 2) != 0)
    goto LABEL_27;
  v4 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
  v5 = a2[2];
  v6 = v5 ? *((_QWORD *)a2 + 4) + 1 : 0;
  v7 = *(_DWORD *)v4 ? *(_QWORD *)(v4 + 24) + 1 : 0;
  if (v6 != v7)
    goto LABEL_27;
  v8 = 0;
  v9 = (uint64_t *)(a2 + 6);
  v10 = (uint64_t *)(v4 + 16);
  v11 = v5 && v5 == *(_DWORD *)v4;
  v12 = !v11;
  v13 = !v12;
  while (1)
  {
    v14 = *v9;
    v15 = *v10;
    if ((v8 & 1) == 0 && !v13)
      break;
    if ((int *)v14 == a2 + 4)
      goto LABEL_22;
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16))
      goto LABEL_27;
    v9 = (uint64_t *)(v14 + 8);
    v10 = (uint64_t *)(v15 + 8);
    v8 = 1;
  }
  if (v5)
    goto LABEL_27;
LABEL_22:
  v40[0] = 0;
  v40[0] = a2[10];
  v44 = 0.0;
  v44 = *(float *)(v4 + 32);
  v16 = *a2;
  if (*(float *)v40 != v44 || v16 == -1)
  {
LABEL_27:
    v18 = std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::find<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>((_QWORD *)(a1 + 192), a2);
    if (v18)
    {
      return *((unsigned int *)v18 + 16);
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 176);
      v20 = (uint64_t *)(a1 + 168);
      v19 = -1431655765 * ((v21 - *(_QWORD *)(a1 + 168)) >> 4);
      if (v21 >= *(_QWORD *)(a1 + 184))
      {
        v22 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element const&>(v20, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element const&>((uint64_t)v20, a2);
        v22 = v21 + 48;
      }
      *(_QWORD *)(a1 + 176) = v22;
      v23 = a2[2];
      v40[0] = *a2;
      v40[2] = v23;
      std::list<int>::list(v41, (uint64_t)(a2 + 4));
      v42 = a2[10];
      v43 = v19;
      std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::__emplace_unique_key_args<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::pair<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element const,int>>(a1 + 192, v40, v40);
      std::__list_imp<char *>::clear(v41);
    }
  }
  else
  {
    v25 = v16;
    v26 = *(char **)(a1 + 232);
    v27 = *(char **)(a1 + 240);
    v28 = (v27 - v26) >> 2;
    if (v28 <= v16)
    {
      v29 = (_QWORD *)(a1 + 248);
      do
      {
        if ((unint64_t)v27 >= *v29)
        {
          v31 = v28 + 1;
          if ((v28 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v32 = *v29 - (_QWORD)v26;
          if (v32 >> 1 > v31)
            v31 = v32 >> 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
            v33 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 248, v33);
            v26 = *(char **)(a1 + 232);
            v27 = *(char **)(a1 + 240);
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[4 * v28];
          *(_DWORD *)v35 = -1;
          v30 = v35 + 4;
          while (v27 != v26)
          {
            v36 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          *(_QWORD *)(a1 + 232) = v35;
          *(_QWORD *)(a1 + 240) = v30;
          *(_QWORD *)(a1 + 248) = &v34[4 * v33];
          if (v26)
          {
            operator delete(v26);
            v26 = *(char **)(a1 + 232);
          }
          else
          {
            v26 = v35;
          }
        }
        else
        {
          *(_DWORD *)v27 = -1;
          v30 = v27 + 4;
        }
        *(_QWORD *)(a1 + 240) = v30;
        v28 = (v30 - v26) >> 2;
        v16 = *a2;
        v27 = v30;
      }
      while (v28 <= *a2);
      v25 = v16;
    }
    if (*(_DWORD *)&v26[4 * v25] == -1)
    {
      v37 = *(_QWORD *)(a1 + 176);
      *(_DWORD *)&v26[4 * v25] = -1431655765 * ((v37 - *(_QWORD *)(a1 + 168)) >> 4);
      v38 = (uint64_t *)(a1 + 168);
      if (v37 >= *(_QWORD *)(a1 + 184))
      {
        v39 = std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element const&>(v38, a2);
      }
      else
      {
        std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element const&>((uint64_t)v38, a2);
        v39 = v37 + 48;
      }
      *(_QWORD *)(a1 + 176) = v39;
      v16 = *a2;
      v26 = *(char **)(a1 + 232);
    }
    return *(unsigned int *)&v26[4 * v16];
  }
  return v19;
}

void sub_1ADEEAD28(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__construct_one_at_end[abi:ne180100]<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element const&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v4 = *a2;
  *(_DWORD *)(v4 + 8) = a2[2];
  result = std::list<int>::list((_QWORD *)(v4 + 16), (uint64_t)(a2 + 4));
  *(_DWORD *)(v4 + 40) = a2[10];
  *(_QWORD *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1ADEEAD94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__push_back_slow_path<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = (char *)&v10[12 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = (char *)&v10[12 * v9];
  *(_DWORD *)v11 = *a2;
  *((_DWORD *)v11 + 2) = a2[2];
  std::list<int>::list((_QWORD *)v11 + 2, (uint64_t)(a2 + 4));
  v10[12 * v4 + 10] = a2[10];
  v15 += 48;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADEEAEB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element*>,std::reverse_iterator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      *(_DWORD *)(v12 - 48) = *(_DWORD *)(a3 + v11 - 48);
      *(_DWORD *)(v12 - 40) = *(_DWORD *)(a3 + v11 - 40);
      std::list<int>::list((_QWORD *)(a7 + v11 - 32), a3 + v11 - 32);
      *(_DWORD *)(v12 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 48;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1ADEEAFCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 + 16;
    do
    {
      std::__list_imp<char *>::clear((_QWORD *)(v4 + v2));
      v2 += 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int *v6;
  int *v7;
  int v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  BOOL v13;
  int v14;
  int *v15;
  _QWORD *v16;
  int v18;
  _QWORD v19[3];
  int v20;
  int v21;
  _QWORD v22[3];
  float v23;
  uint64_t v24;
  _QWORD v25[3];
  float v26;
  char v27;
  int v28;
  _QWORD v29[3];
  float v30;
  int v31;
  uint64_t v32[3];

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    v6 = (int *)(*(_QWORD *)(a1 + 168) + 48 * a2);
    v8 = *v6;
    v7 = v6 + 2;
    if (v8 == -1)
    {
      v28 = *v7;
      std::list<int>::list(v29, (uint64_t)(v7 + 2));
      v30 = *((float *)v7 + 8);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v24);
      fst::Times<int,(fst::StringType)0>(v7, (uint64_t)&v24, (uint64_t)&v31);
      v9 = *((float *)v7 + 8);
      v10 = NAN;
      if (v9 != -INFINITY)
      {
        v10 = NAN;
        if (v26 != -INFINITY)
        {
          v10 = INFINITY;
          v11 = v26 == INFINITY || v9 == INFINITY;
          v12 = v9 + v26;
          if (!v11)
            v10 = v12;
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v28, &v31, v10);
      std::__list_imp<char *>::clear(v32);
      std::__list_imp<char *>::clear(v25);
    }
    LODWORD(v24) = v28;
    std::list<int>::list(v25, (uint64_t)v29);
    v26 = v30;
    if (v28)
      v13 = (unint64_t)(v29[2] + 1) >= 2;
    else
      v13 = 0;
    v14 = !v13;
    v27 = v14;
    if ((*(_BYTE *)(a1 + 148) & 1) == 0 || v14)
    {
      v21 = v28;
      v16 = v22;
      std::list<int>::list(v22, (uint64_t)v29);
      v23 = v30;
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v21);
    }
    else
    {
      v15 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
      v18 = *v15;
      v16 = v19;
      std::list<int>::list(v19, (uint64_t)(v15 + 2));
      v20 = v15[8];
      fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetFinal(a1, a2, &v18);
    }
    std::__list_imp<char *>::clear(v16);
    std::__list_imp<char *>::clear(v25);
    std::__list_imp<char *>::clear(v29);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::Final(a1, a2, a3);
}

void sub_1ADEEB204(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  std::__list_imp<char *>::clear(v3);
  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 64) - *(_QWORD *)(*(_QWORD *)v5 + 56)) >> 3);
}

_QWORD *fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Expand(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  float v7;
  float v8;
  int v11;
  int v12;
  int State;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int *v18;
  uint64_t v19;
  uint64_t *MutableState;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  float v31;
  uint64_t v33;
  BOOL v34;
  char v35;
  int v36;
  uint64_t *v37;
  float v39;
  float v40;
  int v42;
  _QWORD v43[3];
  float v44;
  int v45;
  _QWORD v46[3];
  float v47;
  int v48;
  _QWORD v49[3];
  float v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  float v54;
  int v55;
  int v56;
  _QWORD v57[3];
  float v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  float v62;
  int v63;
  _QWORD v64[4];
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  _QWORD v69[3];
  int v70;
  float v71;
  _QWORD v72[3];
  int v73;
  char v74;
  int v75;
  _QWORD v76[3];
  int v77;
  uint64_t v78;
  _QWORD v79[2];
  _DWORD *v80;
  unint64_t v81;
  int v82;
  int v83;
  _QWORD v84[3];
  float v85;

  v3 = *(_QWORD *)(a1 + 168) + 48 * a2;
  v82 = *(_DWORD *)v3;
  v83 = *(_DWORD *)(v3 + 8);
  std::list<int>::list(v84, v3 + 16);
  v85 = *(float *)(v3 + 40);
  if (v82 == -1)
    goto LABEL_33;
  v4 = *(_QWORD *)(a1 + 136);
  v81 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4);
  v5 = &v66;
  while (1)
  {
    if (!v78)
    {
      if (v81 >= v79[1])
        goto LABEL_31;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v78 + 24))(v78))
      break;
    if (v78)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 32))(v78);
      goto LABEL_9;
    }
LABEL_8:
    v6 = v79[0] + 56 * v81;
LABEL_9:
    fst::Times<int,(fst::StringType)0>(&v83, v6 + 8, (uint64_t)&v59);
    v7 = NAN;
    if (v85 != -INFINITY)
    {
      v8 = *(float *)(v6 + 40);
      v7 = NAN;
      if (v8 != -INFINITY)
      {
        v7 = INFINITY;
        if (v8 != INFINITY && v85 != INFINITY)
          v7 = v85 + v8;
      }
    }
    fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v75, (int *)&v59, v7);
    std::__list_imp<char *>::clear(&v60);
    v71 = *(float *)&v75;
    std::list<int>::list(v72, (uint64_t)v76);
    v73 = v77;
    v11 = *(float *)&v75 == 0.0 || (unint64_t)(v76[2] + 1) < 2;
    v74 = v11;
    if ((*(_BYTE *)(a1 + 148) & 2) == 0 || v11)
    {
      v16 = v5;
      v17 = *(_DWORD *)(v6 + 48);
      v18 = (int *)fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::One();
      v68 = *v18;
      std::list<int>::list(v69, (uint64_t)(v18 + 2));
      v70 = v18[8];
      LODWORD(v59) = v17;
      LODWORD(v60) = v68;
      std::list<int>::list(v61, (uint64_t)v69);
      v63 = v70;
      LODWORD(v18) = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, (int *)&v59);
      v5 = v16;
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v69);
      v19 = *(_QWORD *)v6;
      v65 = v75;
      std::list<int>::list(v16, (uint64_t)v76);
      v67 = v77;
      v59 = v19;
      LODWORD(v60) = v65;
      std::list<int>::list(v61, (uint64_t)v16);
      v63 = v67;
      LODWORD(v64[0]) = (_DWORD)v18;
      MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(MutableState, (uint64_t)&v59);
      std::__list_imp<char *>::clear(v61);
      std::__list_imp<char *>::clear(v16);
    }
    else
    {
      fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Value((int *)&v71, (uint64_t)&v59);
      v12 = *(_DWORD *)(v6 + 48);
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Quantize((float *)&v63, (uint64_t)&v56, *(float *)(a1 + 144));
      LODWORD(v51) = v12;
      LODWORD(v52) = v56;
      std::list<int>::list(v53, (uint64_t)v57);
      v54 = v58;
      State = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v57);
      v14 = *(_QWORD *)v6;
      v48 = v59;
      std::list<int>::list(v49, (uint64_t)&v60);
      v50 = v62;
      v51 = v14;
      LODWORD(v52) = v48;
      std::list<int>::list(v53, (uint64_t)v49);
      v54 = v50;
      v55 = State;
      v15 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(v15, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v49);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v76);
    if (v78)
      (*(void (**)(uint64_t))(*(_QWORD *)v78 + 40))(v78);
    else
      ++v81;
  }
  if (v78)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
    goto LABEL_33;
  }
LABEL_31:
  if (v80)
    --*v80;
LABEL_33:
  if ((*(_BYTE *)(a1 + 148) & 1) != 0)
  {
    if (v82 == -1)
      goto LABEL_65;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v59);
    v21 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
    v22 = (_DWORD)v59 ? v61[1] + 1 : 0;
    v23 = *(_DWORD *)v21 ? *(_QWORD *)(v21 + 24) + 1 : 0;
    if (v22 == v23)
    {
      v24 = 0;
      v25 = v61[0];
      v26 = (uint64_t *)(v21 + 16);
      if ((_DWORD)v59)
        v27 = (_DWORD)v59 == *(_DWORD *)v21;
      else
        v27 = 0;
      v28 = !v27;
      v29 = v28 ^ 1;
      while (1)
      {
        v30 = *v26;
        if ((v24 & 1) == 0 && !v29)
          break;
        if ((uint64_t *)v25 == &v60)
          goto LABEL_77;
        if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(v30 + 16))
          goto LABEL_55;
        v25 = *(_QWORD *)(v25 + 8);
        v26 = (uint64_t *)(v30 + 8);
        v24 = 1;
      }
      if ((_DWORD)v59)
        goto LABEL_55;
LABEL_77:
      *(float *)&v51 = v62;
      v71 = 0.0;
      v71 = *(float *)(v21 + 32);
      v39 = v62;
      v40 = v71;
      std::__list_imp<char *>::clear(&v60);
      if (v39 == v40)
        goto LABEL_76;
    }
    else
    {
LABEL_55:
      std::__list_imp<char *>::clear(&v60);
    }
    if (v82 == -1)
    {
LABEL_65:
      LODWORD(v78) = v83;
      std::list<int>::list(v79, (uint64_t)v84);
      *(float *)&v81 = v85;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 32))(&v59);
      fst::Times<int,(fst::StringType)0>(&v83, (uint64_t)&v59, (uint64_t)&v51);
      v31 = NAN;
      if (v85 != -INFINITY)
      {
        v31 = NAN;
        if (v62 != -INFINITY)
        {
          v31 = INFINITY;
          if (v62 != INFINITY && v85 != INFINITY)
            v31 = v85 + v62;
        }
      }
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v78, (int *)&v51, v31);
      std::__list_imp<char *>::clear(&v52);
      std::__list_imp<char *>::clear(&v60);
    }
    v33 = *(_QWORD *)(a1 + 152);
    v71 = *(float *)&v78;
    std::list<int>::list(v72, (uint64_t)v79);
    v73 = v81;
    if ((_DWORD)v78)
      v34 = (unint64_t)v80 + 1 >= 2;
    else
      v34 = 0;
    v35 = !v34;
    v74 = v35;
    if (v34)
    {
      fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Value((int *)&v71, (uint64_t)&v59);
      fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Quantize((float *)&v63, (uint64_t)&v45, *(float *)(a1 + 144));
      LODWORD(v51) = -1;
      LODWORD(v52) = v45;
      std::list<int>::list(v53, (uint64_t)v46);
      v54 = v47;
      v36 = fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FindState(a1, (int *)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v46);
      v42 = v59;
      std::list<int>::list(v43, (uint64_t)&v60);
      v44 = v62;
      v51 = v33;
      LODWORD(v52) = v42;
      std::list<int>::list(v53, (uint64_t)v43);
      v54 = v44;
      v55 = v36;
      v37 = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::PushArc(v37, (uint64_t)&v51);
      std::__list_imp<char *>::clear(v53);
      std::__list_imp<char *>::clear(v43);
      std::__list_imp<char *>::clear(v64);
      std::__list_imp<char *>::clear(&v60);
      v74 = 1;
    }
    std::__list_imp<char *>::clear(v72);
    std::__list_imp<char *>::clear(v79);
  }
LABEL_76:
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::SetArcs(a1, a2);
  return std::__list_imp<char *>::clear(v84);
}

void sub_1ADEEBA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  _QWORD *v48;

  std::__list_imp<char *>::clear((_QWORD *)(v47 + 8));
  std::__list_imp<char *>::clear(&a47);
  std::__list_imp<char *>::clear(v48);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Value@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  _QWORD v18[2];
  uint64_t v19;
  int v20;
  _QWORD v21[4];
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD v31[2];
  uint64_t v32;
  int v33;
  _QWORD v34[4];
  int v35;
  _QWORD v36[3];
  char v37;

  v35 = *a1;
  std::list<int>::list(v36, (uint64_t)(a1 + 2));
  if (*a1)
    v4 = (unint64_t)(*((_QWORD *)a1 + 3) + 1) >= 2;
  else
    v4 = 0;
  v5 = !v4;
  v37 = v5;
  fst::StringFactor<int,(fst::StringType)0>::Value((uint64_t)&v35, (uint64_t)&v22);
  v30 = v22;
  v31[0] = v31;
  v31[1] = v31;
  v32 = 0;
  v6 = v25;
  if (v25)
  {
    v8 = v23;
    v7 = v24;
    v9 = *v24;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v23 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    v10 = v31[0];
    *(_QWORD *)(v31[0] + 8) = v7;
    *v7 = v10;
    v31[0] = v8;
    *(_QWORD *)(v8 + 8) = v31;
    v32 = v6;
    v25 = 0;
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v33, &v30, *((float *)a1 + 8));
  std::__list_imp<char *>::clear(v31);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  fst::StringFactor<int,(fst::StringType)0>::Value((uint64_t)&v35, (uint64_t)&v22);
  v17 = v26;
  v18[0] = v18;
  v18[1] = v18;
  v19 = 0;
  v11 = v29;
  if (v29)
  {
    v13 = v27;
    v12 = v28;
    v14 = *v28;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v27 + 8);
    **(_QWORD **)(v13 + 8) = v14;
    v15 = v18[0];
    *(_QWORD *)(v18[0] + 8) = v12;
    *v12 = v15;
    v18[0] = v13;
    *(_QWORD *)(v13 + 8) = v18;
    v19 = v11;
    v29 = 0;
  }
  fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::GallicWeight((uint64_t)&v20, &v17, 0.0);
  std::__list_imp<char *>::clear(v18);
  std::__list_imp<char *>::clear(&v27);
  std::__list_imp<char *>::clear(&v23);
  std::pair<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>&,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>&,0>(a2, &v33, &v20);
  std::__list_imp<char *>::clear(v21);
  std::__list_imp<char *>::clear(v34);
  return std::__list_imp<char *>::clear(v36);
}

void sub_1ADEEBE14(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  std::__list_imp<char *>::clear((_QWORD *)(v2 + 8));
  std::__list_imp<char *>::clear((_QWORD *)(v3 - 120));
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int v5;
  _QWORD v6[3];
  int v7;

  fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1ADEEBEE4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::pair[abi:ne180100]<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>&,fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>&,0>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = *a2;
  std::list<int>::list((_QWORD *)(a1 + 8), (uint64_t)(a2 + 2));
  *(_DWORD *)(a1 + 32) = a2[8];
  *(_DWORD *)(a1 + 40) = *a3;
  std::list<int>::list((_QWORD *)(a1 + 48), (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 72) = a3[8];
  return a1;
}

void sub_1ADEEBF60(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::ProductWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int v5;
  _QWORD v6[3];
  int v7;

  fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Quantize(a1, (uint64_t)&v5, a3);
  *(_DWORD *)a2 = v5;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v6);
  *(_DWORD *)(a2 + 32) = v7;
  return std::__list_imp<char *>::clear(v6);
}

void sub_1ADEEBFCC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::PairWeight<fst::StringWeight<int,(fst::StringType)0>,fst::LogWeightTpl<float>>::Quantize@<X0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v6;
  float v8;
  _QWORD v9[3];

  v8 = *a1;
  std::list<int>::list(v9, (uint64_t)(a1 + 2));
  v6 = a1[8];
  if ((LODWORD(v6) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    v6 = floorf((float)(v6 / a3) + 0.5) * a3;
  *(float *)a2 = v8;
  std::list<int>::list((_QWORD *)(a2 + 8), (uint64_t)v9);
  *(float *)(a2 + 32) = v6;
  return std::__list_imp<char *>::clear(v9);
}

void sub_1ADEEC084(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 40);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 48);
}

_QWORD *fst::ImplToFst<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>,fst::Fst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D26B88;
  if (a3)
  {
    v5 = operator new();
    fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADEEC1D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40B21EFC33);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::FactorWeightFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D21850;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  v5 = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a2 + 148);
  v6 = *(_DWORD *)(a2 + 156);
  v7 = *(_WORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 136) = v4;
  *(_DWORD *)(a1 + 144) = v5;
  *(_DWORD *)(a1 + 156) = v6;
  *(_WORD *)(a1 + 160) = v7;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "factor_weight");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    else
      v10 = 0;
    *(_QWORD *)(a1 + 40) = v10;
  }
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 48) = v13;
  }
  return a1;
}

void sub_1ADEEC384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  void *v16;
  void **v17;
  void *v19;

  if (a15 < 0)
    operator delete(__p);
  v19 = *v17;
  if (*v17)
  {
    v15[30] = v19;
    operator delete(v19);
  }
  std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,int>>>::~__hash_table((uint64_t)v16 + 24);
  __p = v16;
  std::vector<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element,std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)1>>::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *((_QWORD *)v19 + 7);
    v9 = 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)v19 + 8) - v8) >> 3);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        v14 = *v12;
        v12 += 14;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while (v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADEEC568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 84);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::FactorWeightFst<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 21);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Expand(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADEEC5EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 84);
  _Unwind_Resume(a1);
}

uint64_t fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasArcs(a1, a2) & 1) == 0)fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::InitArcIterator(a1, a2, a3);
}

uint64_t fst::ArcMap<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>,fst::ArcTpl<fst::LogWeightTpl<float>,int>,fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v6);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 288))(a2, 0);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result == -1)
  {
    if ((v7 & 4) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    return result;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v9 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1) != -1;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)a2 + 248))(a2, v9);
  }
  LODWORD(v23) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v21);
  while (!v21)
  {
    if ((int)v23 >= (int)v22)
      goto LABEL_14;
LABEL_9:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    else
      LODWORD(v23) = v23 + 1;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
    goto LABEL_9;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_14:
  v32 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v30);
  LODWORD(v10) = -1;
  while (2)
  {
    if (!v30)
    {
      if ((int)v32 >= v31)
        goto LABEL_47;
      goto LABEL_20;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30))
    {
      if (v30)
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
        goto LABEL_21;
      }
LABEL_20:
      v11 = v32;
LABEL_21:
      if ((_DWORD)v11 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v11);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 256))(a2, v11, v12);
      v25 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v11, &v21);
LABEL_24:
      if (v21)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
        {
          if (v21)
          {
            (*(void (**)(void))(*(_QWORD *)v21 + 8))();
            goto LABEL_37;
          }
LABEL_35:
          if (v24)
            --*v24;
LABEL_37:
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v18, a1, v11);
          v21 = 0;
          LODWORD(v22) = v18;
          std::list<int>::list(&v23, (uint64_t)v19);
          v26 = v20;
          v27 = -1;
          v28 = fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((int *)a3, (int *)&v21);
          v29 = v15;
          std::__list_imp<char *>::clear(&v23);
          std::__list_imp<char *>::clear(v19);
          if (v28)
          {
            if ((_DWORD)v10 == -1)
            {
              v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
              (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v10, 0.0);
            }
            HIDWORD(v29) = v10;
            (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a2 + 208))(a2, v11, &v28);
            (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v11, INFINITY);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v11, *(float *)&v29);
          }
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
          else
            ++v32;
          continue;
        }
        if (v21)
        {
          v13 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v21 + 32))();
          goto LABEL_30;
        }
      }
      else if (v25 >= v23)
      {
        goto LABEL_35;
      }
      v13 = (int *)(v22 + 56 * v25);
LABEL_30:
      v28 = fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()((int *)a3, v13);
      v29 = v14;
      (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a2 + 208))(a2, v11, &v28);
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
      else
        ++v25;
      goto LABEL_24;
    }
    break;
  }
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
LABEL_47:
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v17 = v7 & 0x2EBC21080007;
  if (*(_BYTE *)(a3 + 4))
    v17 = v7 & 0x2EBC21080003 | 4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v17 | v16, 0x3FFFFFFF0007);
}

void sub_1ADEECB68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  std::__list_imp<char *>::clear(v2);
  std::__list_imp<char *>::clear(v1);
  v5 = *(_QWORD *)(v3 - 104);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

unint64_t fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)0>::operator()(int *a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *__p[2];
  char v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  float v29[5];
  char v30;

  if (a2[12] != -1)
    goto LABEL_24;
  v4 = fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>::Zero();
  v5 = a2[2];
  v6 = v5 ? *((_QWORD *)a2 + 4) + 1 : 0;
  v7 = *(_DWORD *)v4 ? *(_QWORD *)(v4 + 24) + 1 : 0;
  if (v6 != v7)
    goto LABEL_24;
  v8 = 0;
  v9 = (uint64_t *)(a2 + 6);
  v10 = (uint64_t *)(v4 + 16);
  v11 = v5 && v5 == *(_DWORD *)v4;
  v12 = !v11;
  v13 = !v12;
  while (1)
  {
    v14 = *v9;
    v15 = *v10;
    if ((v8 & 1) == 0 && !v13)
      break;
    if ((int *)v14 == a2 + 4)
      goto LABEL_22;
    if (*(_DWORD *)(v14 + 16) != *(_DWORD *)(v15 + 16))
      goto LABEL_24;
    v9 = (uint64_t *)(v14 + 8);
    v10 = (uint64_t *)(v15 + 8);
    v8 = 1;
  }
  if (v5)
    goto LABEL_24;
LABEL_22:
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = a2[10];
  v29[0] = 0.0;
  v29[0] = *(float *)(v4 + 32);
  if (*(float *)__p == v29[0])
  {
    v16 = 0;
    v17 = *a2;
  }
  else
  {
LABEL_24:
    v28 = -1;
    if (!fst::FromGallicMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>::Extract<(fst::GallicType)1>((unsigned int *)a2 + 2, &v27, &v28)|| (v17 = *a2, *a2 != a2[1]))
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v18 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
      v19 = (_QWORD *)fst::cerr(v18);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"FromGallicMapper: unrepresentable weight: ", 42);
      fst::CompositeWeightWriter::CompositeWeightWriter((uint64_t)v29, v20);
      if (*FLAGS_fst_weight_parentheses)
      {
        v30 = *FLAGS_fst_weight_parentheses;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)v29, (uint64_t)&v30, 1);
      }
      fst::CompositeWeightWriter::WriteElement<fst::StringWeight<int,(fst::StringType)1>>((uint64_t)v29, a2 + 2);
      fst::CompositeWeightWriter::WriteElement<fst::LogWeightTpl<float>>((uint64_t)v29, (float *)a2 + 10);
      if (*FLAGS_fst_weight_parentheses)
      {
        v30 = *(_BYTE *)(FLAGS_fst_weight_parentheses + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)v29, (uint64_t)&v30, 1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for arc with ilabel = ", 23);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", olabel = ", 11);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", nextstate = ", 14);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
      if (v25 < 0)
        operator delete(__p[0]);
      *((_BYTE *)a1 + 4) = 1;
      v17 = *a2;
    }
    if (!v17 && v28 && a2[12] == -1)
      v17 = *a1;
    v16 = (unint64_t)v28 << 32;
  }
  return v16 | v17;
}

void sub_1ADEECEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::__unordered_map_hasher<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,kaldi::HmmCacheHash,std::equal_to<std::pair<int,std::vector<int>>>,true>,std::__unordered_map_equal<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::equal_to<std::pair<int,std::vector<int>>>,kaldi::HmmCacheHash,true>,std::allocator<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>>>::__emplace_unique_key_args<std::pair<int,std::vector<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<int,std::vector<int>> const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  int *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _DWORD **v28;
  _QWORD *v29;

  v7 = *(int **)(a2 + 8);
  v8 = *(int **)(a2 + 16);
  if (v7 == v8)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = *v7++;
      v9 = v10 + 7853 * v9;
    }
    while (v7 != v8);
  }
  v11 = v9 + 103049 * *(_DWORD *)a2;
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13)
    goto LABEL_25;
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v4 = v11;
    if (v13 <= v11)
      v4 = v11 % v13;
  }
  else
  {
    v4 = (v13 - 1) & v11;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v16)
    goto LABEL_25;
  v17 = (_QWORD *)*v16;
  if (!*v16)
    goto LABEL_25;
  v28 = a4;
  do
  {
    v18 = v17[1];
    if (v18 == v12)
    {
      if (std::equal_to<std::pair<int,std::vector<int>>>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v17 + 2), a2))
        return v17;
      goto LABEL_23;
    }
    if (v15 > 1)
    {
      if (v18 >= v13)
        v18 %= v13;
    }
    else
    {
      v18 &= v13 - 1;
    }
    if (v18 != v4)
      break;
LABEL_23:
    v17 = (_QWORD *)*v17;
  }
  while (v17);
  a4 = v28;
LABEL_25:
  std::__hash_table<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::__unordered_map_hasher<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,kaldi::HmmCacheHash,std::equal_to<std::pair<int,std::vector<int>>>,true>,std::__unordered_map_equal<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::equal_to<std::pair<int,std::vector<int>>>,kaldi::HmmCacheHash,true>,std::allocator<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::pair<int,std::vector<int>> const&>,std::tuple<>>(a1, v12, a4, (uint64_t)&v29);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    v13 = *(_QWORD *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v13 <= v12)
        v4 = v12 % v13;
      else
        v4 = v12;
    }
    else
    {
      v4 = (v13 - 1) & v12;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *v29 = *v25;
    *v25 = v29;
  }
  else
  {
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v29)
    {
      v26 = *(_QWORD *)(*v29 + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v26 >= v13)
          v26 %= v13;
      }
      else
      {
        v26 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v29;
    }
  }
  v17 = v29;
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_1ADEED170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::__unordered_map_hasher<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,kaldi::HmmCacheHash,std::equal_to<std::pair<int,std::vector<int>>>,true>,std::__unordered_map_equal<std::pair<int,std::vector<int>>,std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>,std::equal_to<std::pair<int,std::vector<int>>>,kaldi::HmmCacheHash,true>,std::allocator<std::__hash_value_type<std::pair<int,std::vector<int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::pair<int,std::vector<int>> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = *a3;
  *((_DWORD *)v8 + 4) = **a3;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 3, *((const void **)v9 + 1), *((_QWORD *)v9 + 2), (uint64_t)(*((_QWORD *)v9 + 2) - *((_QWORD *)v9 + 1)) >> 2);
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADEED21C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::allocator<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1ADEED29C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::__unordered_map_hasher<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::hash<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::equal_to<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,true>,std::__unordered_map_equal<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::equal_to<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::hash<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,true>,std::allocator<std::__hash_value_type<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__emplace_unique_key_args<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*,std::piecewise_construct_t const&,std::tuple<fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const* const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADEED4F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const**,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  char v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  BOOL v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;

  v8 = (unint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 < *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,fst::LatticeStringRepository<int>::Entry const**>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) >= *v9)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(v9, (uint64_t *)a2);
            v9 = (unint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const**>(v9, v17);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const**>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const**,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v22 = v9 + 1;
        v24 = v9 == a2 || v22 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v24)
          {
            v25 = 0;
            v26 = v9;
            do
            {
              v28 = *v26;
              v27 = v26[1];
              v26 = v22;
              if (v27 < v28)
              {
                v29 = v25;
                while (1)
                {
                  *(unint64_t *)((char *)v9 + v29 + 8) = v28;
                  if (!v29)
                    break;
                  v28 = *(unint64_t *)((char *)v9 + v29 - 8);
                  v29 -= 8;
                  if (v27 >= v28)
                  {
                    v30 = (unint64_t *)((char *)v9 + v29 + 8);
                    goto LABEL_42;
                  }
                }
                v30 = v9;
LABEL_42:
                *v30 = v27;
              }
              v22 = v26 + 1;
              v25 += 8;
            }
            while (v26 + 1 != a2);
          }
        }
        else if (!v24)
        {
          do
          {
            v32 = *v8;
            v31 = v8[1];
            v8 = v22;
            if (v31 < v32)
            {
              do
              {
                *v22 = v32;
                v32 = *(v22 - 2);
                --v22;
              }
              while (v31 < v32);
              *v22 = v31;
            }
            v22 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const**>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__tree<int>::__erase_unique<int>(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 28);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28))
    return 0;
  std::__tree<std::string>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

_QWORD *fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~RandGenFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D26038;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RandGenFst(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RandGenFstImpl(v6, a2, a3);
  *a1 = &unk_1E5D19AD0;
  a1[1] = v6;
  return a1;
}

void sub_1ADEEDB44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40C5740FB1);
  _Unwind_Resume(a1);
}

void fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~RandGenFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D26038;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Final(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D19AD0;
  return v4;
}

void sub_1ADEEDCFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D1FFE8;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C068;
  *a2 = v4;
  return result;
}

void sub_1ADEEDDB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RandGenFstImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  fst *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a3) = &unk_1E5D1E518;
  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 152) = v8;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 184) = *(_WORD *)(a3 + 32);
  *(_DWORD *)(a1 + 188) = -1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "randgen");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = (fst *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::RandGenProperties(v9, *(unsigned __int8 *)(a1 + 184)) & 0x3FFFFFFF0004;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v11 = *(_QWORD *)(a1 + 40);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 40) = v12;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v14 = *(_QWORD *)(a1 + 48);
  if (v14 != v13)
  {
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v13)
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    else
      v15 = 0;
    *(_QWORD *)(a1 + 48) = v15;
  }
  return a1;
}

void sub_1ADEEDF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  void **v16;
  void *v18;

  if (a15 < 0)
    operator delete(__p);
  v18 = *v16;
  if (*v16)
  {
    v15[21] = v18;
    operator delete(v18);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~RandGenFstImpl(_QWORD *a1)
{
  fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~RandGenFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~RandGenFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *a1 = &unk_1E5D1E518;
  v3 = a1[20];
  v2 = a1[21];
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x1AF44D190](v5, 0x1060C401AE92110);
        v3 = a1[20];
        v2 = a1[21];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[17];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[18];
  if (v7)
  {
    std::__tree<int>::destroy(v7 + 24, *(_QWORD **)(v7 + 32));
    MEMORY[0x1AF44D190](v7, 0x1060C40DCB6D5DELL);
  }
  v8 = (void *)a1[20];
  if (v8)
  {
    a1[21] = v8;
    operator delete(v8);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Start(uint64_t a1)
{
  uint64_t result;
  int v3;
  char **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 4))
  {
    *(_BYTE *)(a1 + 60) = 1;
    return *(unsigned int *)(a1 + 64);
  }
  if (*(_BYTE *)(a1 + 60))
    return *(unsigned int *)(a1 + 64);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if ((_DWORD)result != -1)
  {
    v3 = result;
    v4 = (char **)(a1 + 160);
    v5 = (*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3;
    *(_DWORD *)(a1 + 64) = v5;
    *(_BYTE *)(a1 + 60) = 1;
    if (*(_DWORD *)(a1 + 68) <= (int)v5)
      *(_DWORD *)(a1 + 68) = v5 + 1;
    v6 = operator new();
    v7 = *(_QWORD *)(a1 + 176);
    v8 = *(_QWORD *)(a1 + 152);
    *(_DWORD *)v6 = v3;
    *(_QWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    v9 = *(uint64_t **)(a1 + 168);
    if ((unint64_t)v9 >= v7)
    {
      v10 = ((char *)v9 - *v4) >> 3;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v12 = v7 - (_QWORD)*v4;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 176, v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v6;
      v17 = v15 + 1;
      v19 = *(char **)(a1 + 160);
      v18 = *(char **)(a1 + 168);
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v15 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      *(_QWORD *)(a1 + 160) = v15;
      *(_QWORD *)(a1 + 168) = v17;
      *(_QWORD *)(a1 + 176) = v16;
      if (v18)
        operator delete(v18);
      *(_QWORD *)(a1 + 168) = v17;
    }
    else
    {
      *v9 = v6;
      *(_QWORD *)(a1 + 168) = v9 + 1;
    }
    return *(unsigned int *)(a1 + 64);
  }
  return result;
}

float fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Final(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0)fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return **(float **)v5;
}

void fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Expand(uint64_t a1, int a2)
{
  int v4;
  char *MutableState;
  char **v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  float v20;
  unint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int v59;
  char *v60;
  __int128 v61;
  _QWORD v62[3];
  _DWORD *v63;
  unint64_t v64;

  v4 = *(_DWORD *)(a1 + 188);
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  if (v4 == a2)
  {
    *(_DWORD *)MutableState = 0;
    *((_DWORD *)MutableState + 12) |= 9u;
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  *(_DWORD *)MutableState = 2139095040;
  *((_DWORD *)MutableState + 12) |= 9u;
  v6 = (char **)(a1 + 160);
  v7 = *(unsigned int **)(*(_QWORD *)(a1 + 160) + 8 * a2);
  fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Sample(*(_QWORD **)(a1 + 144), v7);
  v8 = *(_QWORD *)(a1 + 136);
  v9 = *v7;
  v64 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v8 + 136))(v8, v9, v62);
  v10 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 40))(*(_QWORD *)(a1 + 136), *v7);
  v11 = *(_QWORD *)(a1 + 144);
  v12 = (_QWORD *)(v11 + 32);
  v13 = *(_QWORD **)(v11 + 48);
  if (v13 != v12)
  {
    v14 = v10;
    do
    {
      v15 = v13[4];
      v16 = v13[5];
      v17 = (double)v16 / (double)*((unint64_t *)v7 + 1);
      if (v15 < v14)
      {
        if (v62[0])
        {
          (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)v62[0] + 64))(v62[0], v15);
          if (v62[0])
          {
            v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v62[0] + 32))(v62[0]);
LABEL_19:
            if (*(_BYTE *)(a1 + 184))
            {
              v22 = log(v17);
              v23 = -v22;
            }
            else
            {
              v23 = 0.0;
            }
            v24 = (*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3;
            *(_QWORD *)&v61 = *(_QWORD *)v18;
            *((_QWORD *)&v61 + 1) = __PAIR64__(v24, LODWORD(v23));
            v25 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
            fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v25, &v61);
            v26 = operator new();
            v27 = v26;
            v28 = *((_QWORD *)v7 + 2) + 1;
            *(_DWORD *)v26 = *(_DWORD *)(v18 + 12);
            *(_QWORD *)(v26 + 8) = v16;
            *(_QWORD *)(v26 + 16) = v28;
            *(_QWORD *)(v26 + 24) = v15;
            *(_QWORD *)(v26 + 32) = v7;
            v30 = *(uint64_t **)(a1 + 168);
            v29 = *(_QWORD *)(a1 + 176);
            if ((unint64_t)v30 >= v29)
            {
              v32 = ((char *)v30 - *v6) >> 3;
              if ((unint64_t)(v32 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v33 = v29 - (_QWORD)*v6;
              v34 = v33 >> 2;
              if (v33 >> 2 <= (unint64_t)(v32 + 1))
                v34 = v32 + 1;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v34;
              if (v35)
                v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 176, v35);
              else
                v36 = 0;
              v37 = (uint64_t *)&v36[8 * v32];
              *v37 = v27;
              v31 = v37 + 1;
              v39 = *(char **)(a1 + 160);
              v38 = *(char **)(a1 + 168);
              if (v38 != v39)
              {
                do
                {
                  v40 = *((_QWORD *)v38 - 1);
                  v38 -= 8;
                  *--v37 = v40;
                }
                while (v38 != v39);
                v38 = *v6;
              }
              *(_QWORD *)(a1 + 160) = v37;
              *(_QWORD *)(a1 + 168) = v31;
              *(_QWORD *)(a1 + 176) = &v36[8 * v35];
              if (v38)
                operator delete(v38);
            }
            else
            {
              *v30 = v26;
              v31 = v30 + 1;
            }
            *(_QWORD *)(a1 + 168) = v31;
            goto LABEL_39;
          }
          v21 = v64;
        }
        else
        {
          v64 = v13[4];
          v21 = v15;
        }
        v18 = v62[1] + 16 * v21;
        goto LABEL_19;
      }
      if (*(_BYTE *)(a1 + 184))
      {
        if (!*(_BYTE *)(a1 + 185))
          v17 = v17 * (double)*(unint64_t *)(a1 + 152);
        v19 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        v20 = log(v17);
        *(float *)v19 = -v20;
        *((_DWORD *)v19 + 12) |= 9u;
        goto LABEL_39;
      }
      if (*(_DWORD *)(a1 + 188) == -1)
      {
        *(_DWORD *)(a1 + 188) = (*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3;
        v45 = operator new();
        v46 = v45;
        *(_DWORD *)v45 = -1;
        *(_OWORD *)(v45 + 8) = 0u;
        *(_OWORD *)(v45 + 24) = 0u;
        v48 = *(uint64_t **)(a1 + 168);
        v47 = *(_QWORD *)(a1 + 176);
        if ((unint64_t)v48 >= v47)
        {
          v50 = ((char *)v48 - *v6) >> 3;
          if ((unint64_t)(v50 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v51 = v47 - (_QWORD)*v6;
          v52 = v51 >> 2;
          if (v51 >> 2 <= (unint64_t)(v50 + 1))
            v52 = v50 + 1;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v53 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v53 = v52;
          if (v53)
            v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 176, v53);
          else
            v54 = 0;
          v55 = (uint64_t *)&v54[8 * v50];
          *v55 = v46;
          v49 = v55 + 1;
          v57 = *(char **)(a1 + 160);
          v56 = *(char **)(a1 + 168);
          if (v56 != v57)
          {
            do
            {
              v58 = *((_QWORD *)v56 - 1);
              v56 -= 8;
              *--v55 = v58;
            }
            while (v56 != v57);
            v56 = *v6;
          }
          *(_QWORD *)(a1 + 160) = v55;
          *(_QWORD *)(a1 + 168) = v49;
          *(_QWORD *)(a1 + 176) = &v54[8 * v53];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *v48 = v45;
          v49 = v48 + 1;
        }
        *(_QWORD *)(a1 + 168) = v49;
        if (!v16)
          goto LABEL_39;
      }
      else if (!v16)
      {
        goto LABEL_39;
      }
      do
      {
        v59 = *(_DWORD *)(a1 + 188);
        *(_QWORD *)&v61 = 0;
        DWORD2(v61) = 0;
        HIDWORD(v61) = v59;
        v60 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v60, &v61);
        --v16;
      }
      while (v16);
LABEL_39:
      v41 = *(_QWORD *)(a1 + 144);
      v42 = *(_QWORD **)(v41 + 48);
      v43 = (_QWORD *)v42[1];
      if (v43)
      {
        do
        {
          v13 = v43;
          v43 = (_QWORD *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v42[2];
          v44 = *v13 == (_QWORD)v42;
          v42 = v13;
        }
        while (!v44);
      }
      *(_QWORD *)(v41 + 48) = v13;
    }
    while (v13 != (_QWORD *)(v41 + 32));
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
  if (v62[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v62[0] + 8))(v62[0]);
  }
  else if (v63)
  {
    --*v63;
  }
}

void sub_1ADEEE7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Sample(_QWORD *a1, unsigned int *a2)
{
  uint64_t **v4;
  _QWORD *v5;
  uint64_t result;
  float v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t *v11;

  v4 = (uint64_t **)(a1 + 3);
  v5 = a1 + 4;
  std::__tree<int>::destroy((uint64_t)(a1 + 3), (_QWORD *)a1[4]);
  a1[3] = v5;
  a1[5] = 0;
  *v5 = 0;
  if ((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *a2)
    || (v7 = (*(float (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, *a2),
        result = 0,
        *(float *)&v11 = v7,
        LODWORD(v10) = 2139095040,
        v7 != INFINITY))
  {
    if (*((_QWORD *)a2 + 2) == *((_DWORD *)a1 + 4))
    {
      result = 0;
    }
    else
    {
      if (*((_QWORD *)a2 + 1))
      {
        v8 = 0;
        do
        {
          v10 = fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(a1[1], *a1, *a2);
          v11 = &v10;
          v9 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4, &v10, (uint64_t)&std::piecewise_construct, (uint64_t **)&v11);
          ++v9[5];
          ++v8;
        }
        while (v8 < *((_QWORD *)a2 + 1));
      }
      result = 1;
    }
  }
  a1[6] = a1[3];
  return result;
}

unint64_t fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;

  v5 = rand();
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  if ((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3) == INFINITY)
    v7 = v6;
  else
    v7 = v6 + 1;
  return (unint64_t)((double)v5 * 4.65661287e-10 * (double)v7);
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 16);
}

_QWORD *fst::ImplToFst<fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D26038;
  if (a3)
  {
    v5 = operator new();
    fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RandGenFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADEEEBA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40C5740FB1);
  _Unwind_Resume(a1);
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::RandGenFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D1E518;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  v4 = operator new();
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(uint64_t **)(a2 + 144);
  v7 = *(_QWORD *)(a2 + 152);
  if (!v5)
    v5 = *v6;
  *(_QWORD *)v4 = v5;
  *(_QWORD *)(v4 + 8) = v6[1];
  *(_DWORD *)(v4 + 16) = *((_DWORD *)v6 + 4);
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 24) = v4 + 32;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = v4 + 32;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = v4;
  *(_QWORD *)(a1 + 152) = v7;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_DWORD *)(a1 + 188) = -1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "randgen");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    else
      v10 = 0;
    *(_QWORD *)(a1 + 40) = v10;
  }
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 48) = v13;
  }
  return a1;
}

void sub_1ADEEED70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  void **v16;
  void *v18;

  if (a15 < 0)
    operator delete(__p);
  v18 = *v16;
  if (*v16)
  {
    v15[21] = v18;
    operator delete(v18);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  char *v20;
  unint64_t v21;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::ArcIterator(&v20, *(_QWORD *)(a1 + 8), v6);
    v7 = v21;
    v8 = *((_QWORD *)v20 + 3);
    v9 = *((_QWORD *)v20 + 4) - v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      v11 = v9 >> 4;
      v12 = *(_DWORD *)(v10 + 68);
      v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        v15 = *v13;
        v13 += 4;
        v14 = v15;
        if (v12 <= v15)
        {
          v12 = v14 + 1;
          *(_DWORD *)(v10 + 68) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      v21 = v11;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v16 = *(_DWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_DWORD *)(v17 + 68);
    --*((_DWORD *)v20 + 13);
    v4 = v16 >= v18;
    if (v16 < v18)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v17);
  }
  while (v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADEEEF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 52);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::RandGenFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Expand(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADEEEFA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::RandGenFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSampler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UniformArcSelector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v32;
  std::vector<char>::pointer end;
  char *v34;
  uint64_t v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v5 = a1;
  fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  if (v48 == -1)
    return;
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 64))(v5, 1, 0);
  if (v47)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(v5);
  else
    v6 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v6 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)v5 + 128))(v5, __x);
  if (v48 >= (int)v6)
    goto LABEL_103;
  v46 = v5;
  v7 = v48;
  do
  {
    v58.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(v5, v7, v8 + 8);
    *(_QWORD *)v49 = v8;
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(v56, v49);
    v9 = *((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v10 = 1;
      while (1)
      {
        v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                     + (((unint64_t)(v9 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v9 + v57 - 1) & 0x1FF));
        v12 = *(int *)v11;
        v13 = v58.__end_ - v58.__begin_;
        if (v58.__end_ - v58.__begin_ <= v12)
        {
          v6 = v12 + 1;
          v49[0] = 0;
          if (v12 + 1 <= v13)
          {
            if (v12 + 1 < v13)
              v58.__end_ = &v58.__begin_[v6];
          }
          else
          {
            std::vector<char>::__append(&v58, v12 + 1 - v13, v49);
          }
        }
        if ((v10 & 1) == 0)
        {
LABEL_31:
          v58.__begin_[v12] = 2;
          v20 = v11[1];
          if (v20)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          }
          else
          {
            v21 = (_DWORD *)v11[4];
            if (v21)
              --*v21;
          }
          v11[6] = v55;
          v55 = v11;
          --*((_QWORD *)&v57 + 1);
          std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
          if (!*((_QWORD *)&v57 + 1))
            goto LABEL_61;
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState(a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (!v25)
          {
            ++*(_QWORD *)(v22 + 40);
            goto LABEL_58;
          }
          goto LABEL_39;
        }
        v14 = v11[1];
        if (v14)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
            goto LABEL_31;
          v15 = v11[1];
          if (v15)
          {
            v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
            goto LABEL_28;
          }
        }
        else if (v11[5] >= v11[3])
        {
          goto LABEL_31;
        }
        v16 = v11[2] + 16 * v11[5];
LABEL_28:
        v17 = *(int *)(v16 + 12);
        begin = v58.__begin_;
        v19 = v58.__end_ - v58.__begin_;
        if (v58.__end_ - v58.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v49[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v58.__end_ = &v58.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v58, (int)v6 - v19, v49);
            v17 = *(int *)(v16 + 12);
            begin = v58.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::BackArc((uint64_t)a2);
          v25 = v11[1];
          if (!v25)
          {
            ++v11[5];
            goto LABEL_58;
          }
LABEL_39:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
          goto LABEL_58;
        }
        if (v26 == 2)
        {
          fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::OutputPath((uint64_t)a2);
          v27 = v11[1];
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
          else
            ++v11[5];
LABEL_57:
          v10 = 1;
          goto LABEL_58;
        }
        if ((fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TreeArc(a2, v12, v16) & 1) != 0)
        {
          v58.__begin_[*(int *)(v16 + 12)] = 1;
          v28 = (uint64_t)v55;
          if (v55)
          {
            v55 = (_QWORD *)v55[6];
          }
          else
          {
            v28 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
            *(_QWORD *)(v28 + 48) = 0;
          }
          *(_DWORD *)v28 = *(_DWORD *)(v16 + 12);
          *(_QWORD *)(v28 + 40) = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 136))(v5);
          *(_QWORD *)v49 = v28;
          std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(v56, v49);
          goto LABEL_57;
        }
        v10 = 0;
LABEL_58:
        v9 = *((_QWORD *)&v57 + 1);
        if (!*((_QWORD *)&v57 + 1))
          goto LABEL_61;
      }
    }
    v10 = 1;
LABEL_61:
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v48)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v29 = &v58.__begin_[(int)v7];
      v30 = (int)v6 - (uint64_t)(int)v7;
      while (*v29++)
      {
        v7 = (v7 + 1);
        if (!--v30)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v7 != (_DWORD)v6)
      continue;
    while (1)
    {
      if (*(_QWORD *)__x)
      {
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
          goto LABEL_101;
        if (*(_QWORD *)__x)
        {
          v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
          goto LABEL_78;
        }
      }
      else if (v52 >= v51)
      {
        goto LABEL_101;
      }
      v32 = v52;
LABEL_78:
      if (v32 == (_DWORD)v6)
        break;
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v35 = a3;
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v34 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v34;
      v58.__end_cap_.__value_ = &v41[v40];
      a3 = v35;
      if (end)
        operator delete(end);
      v5 = v46;
    }
    else
    {
      *v58.__end_ = 0;
      v34 = end + 1;
    }
    v58.__end_ = v34;
    v6 = (v6 + 1);
LABEL_101:
    ;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_103:
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADEEF6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InitVisit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  *(_QWORD *)a1 = a2;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 224))(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 8);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 280))(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 288))(v6, v7);
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 4, 0);
  if (result)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), 4, 4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16);
  return result;
}

void fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinishState(_QWORD *a1, uint64_t a2, int a3)
{
  if (a3 != -1 && (*(float (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1) == INFINITY)
    a1[3] -= 16;
}

uint64_t fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::TreeArc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  if ((*(float (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, *(unsigned int *)(a3 + 12)) == INFINITY)
  {
    v5 = a1[4];
    v6 = (_OWORD *)a1[3];
    if ((unint64_t)v6 >= v5)
    {
      v8 = a1[2];
      v9 = ((uint64_t)v6 - v8) >> 4;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = v5 - v8;
      if (v11 >> 3 > v10)
        v10 = v11 >> 3;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 4), v12);
      else
        v13 = 0;
      v14 = &v13[16 * v9];
      v15 = &v13[16 * v12];
      *(_OWORD *)v14 = *(_OWORD *)a3;
      v7 = v14 + 16;
      v17 = (char *)a1[2];
      v16 = (char *)a1[3];
      if (v16 != v17)
      {
        do
        {
          *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
          v14 -= 16;
          v16 -= 16;
        }
        while (v16 != v17);
        v16 = (char *)a1[2];
      }
      a1[2] = v14;
      a1[3] = v7;
      a1[4] = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v6 = *(_OWORD *)a3;
      v7 = v6 + 1;
    }
    a1[3] = v7;
  }
  else
  {
    fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::OutputPath((uint64_t)a1);
  }
  return 1;
}

uint64_t fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::BackArc(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"RandGenVisitor: cyclic input", 28);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), 4, 4);
  return 0;
}

void sub_1ADEEFA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::RandGenVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::OutputPath(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int v12;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8)) == -1)
  {
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 200))(*(_QWORD *)(a1 + 8));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8), v2);
  }
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v4 = v3;
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
  {
    v7 = v3;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 200))(*(_QWORD *)(a1 + 8));
      v8 = *(_QWORD *)(a1 + 8);
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + v5);
      v11 = 0;
      v12 = v7;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v8 + 208))(v8, v4, &v10);
      ++v6;
      v5 += 16;
      v4 = v7;
    }
    while (v6 < (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, float))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8), v7, 0.0);
}

uint64_t quasar::LmLoader2::LmLoader2(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::string::size_type v4;

  if (*((char *)a2 + 23) < 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    if (v4)
    {
      std::string::__init_copy_ctor_external((std::string *)a1, *(const std::string::value_type **)a2, v4);
      goto LABEL_7;
    }
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "lm-personalize");
    goto LABEL_7;
  }
  if (!*((_BYTE *)a2 + 23))
    goto LABEL_6;
  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
LABEL_7:
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  return a1;
}

void quasar::LmLoader2::~LmLoader2(quasar::LmLoader2 *this)
{
  if (*((_BYTE *)this + 96))
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void quasar::LmLoader2::fetchOrLoadModel(quasar::SystemConfig *this@<X2>, uint64_t a2@<X0>, const std::string *a3@<X1>, _QWORD *a4@<X8>)
{
  uint64_t SpeechModelInfo;
  std::string *v9;
  uint64_t PtreeOptional;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *v18;
  std::string::size_type size;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type v23;
  unsigned __int8 *v24;
  const std::string *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  std::string::size_type v29;
  int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  quasar::LmModel2 **v33;
  quasar::LmModel2 *v34;
  clockid_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39[3];
  char v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  std::string v59;

  SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo(this);
  if (*(char *)(SpeechModelInfo + 143) < 0)
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)(SpeechModelInfo + 120), *(_QWORD *)(SpeechModelInfo + 128));
  else
    v59 = *(std::string *)(SpeechModelInfo + 120);
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)this, a2);
  if (quasar::gLogLevel >= 4)
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"enabled ", 8);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" modelLanguage ", 15);
    v13 = *(char *)(a2 + 79);
    if (v13 >= 0)
      v14 = a2 + 56;
    else
      v14 = *(_QWORD *)(a2 + 56);
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a2 + 79);
    else
      v15 = *(_QWORD *)(a2 + 64);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" requestLanguage ", 17);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v59;
    else
      v18 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    else
      size = v59.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, size);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v42);
  }
  if (!PtreeOptional)
    goto LABEL_89;
  v20 = *(unsigned __int8 *)(a2 + 79);
  if (*(char *)(a2 + 79) < 0)
    v21 = *(_QWORD *)(a2 + 64);
  else
    v21 = *(unsigned __int8 *)(a2 + 79);
  if (!v21)
  {
LABEL_39:
    v40 = 1;
    kaldi::Timer::Reset((kaldi::Timer *)v39, (clockid_t)v9);
    v41 = 0;
    v26 = *(_BYTE *)(a2 + 55);
    if (v26 < 0)
      v27 = *(_QWORD *)(a2 + 40);
    else
      v27 = *(unsigned __int8 *)(a2 + 55);
    if (v27)
    {
      if (v26 >= 0)
        v28 = *(unsigned __int8 *)(a2 + 55);
      else
        v28 = *(_QWORD *)(a2 + 40);
      v29 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      v30 = (char)v29;
      if ((v29 & 0x80u) != 0)
        v29 = a3->__r_.__value_.__l.__size_;
      if (v28 == v29)
      {
        if (v30 >= 0)
          v25 = a3;
        else
          v25 = (const std::string *)a3->__r_.__value_.__r.__words[0];
        if ((*(_BYTE *)(a2 + 55) & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(a2 + 32), v25, *(_QWORD *)(a2 + 40)))
          {
            if (*(_BYTE *)(a2 + 24))
              goto LABEL_66;
            goto LABEL_69;
          }
        }
        else
        {
          if (!*(_BYTE *)(a2 + 55))
          {
            if (*(_BYTE *)(a2 + 24))
              goto LABEL_62;
            goto LABEL_69;
          }
          v31 = (unsigned __int8 *)(a2 + 32);
          v32 = *(unsigned __int8 *)(a2 + 55);
          while (*v31 == v25->__r_.__value_.__s.__data_[0])
          {
            ++v31;
            v25 = (const std::string *)((char *)v25 + 1);
            if (!--v32)
              goto LABEL_60;
          }
        }
      }
      *(_BYTE *)(a2 + 24) = 1;
    }
LABEL_60:
    if (*(_BYTE *)(a2 + 24))
    {
      if ((v26 & 0x80) == 0)
      {
LABEL_62:
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 55) = 0;
LABEL_67:
        if (*(char *)(a2 + 79) < 0)
        {
          **(_BYTE **)(a2 + 56) = 0;
          *(_QWORD *)(a2 + 64) = 0;
        }
        else
        {
          *(_BYTE *)(a2 + 56) = 0;
          *(_BYTE *)(a2 + 79) = 0;
        }
        if (*(_BYTE *)(a2 + 96))
        {
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 80);
          *(_BYTE *)(a2 + 96) = 0;
        }
        *(_BYTE *)(a2 + 24) = 0;
        v33 = (quasar::LmModel2 **)(a2 + 80);
LABEL_75:
        std::string::operator=((std::string *)(a2 + 32), a3);
        quasar::loadLmFromDirectory(a2 + 32, (uint64_t)&v59, a2 + 56, (uint64_t)v33);
        if (!*(_BYTE *)(a2 + 96))
        {
LABEL_88:
          kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)v25);
          goto LABEL_89;
        }
LABEL_76:
        if (quasar::gLogLevel >= 4)
        {
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v48 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Have result", 11);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v42);
        }
        v34 = *v33;
        if (*v33)
        {
          if (quasar::gLogLevel >= 4)
          {
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v48 = 0u;
            v46 = 0u;
            v47 = 0u;
            v44 = 0u;
            v45 = 0u;
            v42 = 0u;
            v43 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Result is model", 15);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v42);
            v34 = *v33;
          }
          if (quasar::LmModel2::isCompatible(v34, this))
          {
            if (quasar::gLogLevel >= 4)
            {
              v57 = 0u;
              v58 = 0u;
              v55 = 0u;
              v56 = 0u;
              v53 = 0u;
              v54 = 0u;
              v51 = 0u;
              v52 = 0u;
              v49 = 0u;
              v50 = 0u;
              v48 = 0u;
              v46 = 0u;
              v47 = 0u;
              v44 = 0u;
              v45 = 0u;
              v42 = 0u;
              v43 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Model is compatible with recognizer. Returning it. Elapsed ", 59);
              kaldi::Timer::GetSeconds((kaldi::Timer *)5, v35);
              std::ostream::operator<<();
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v42);
            }
            v36 = *(_QWORD *)(a2 + 88);
            *a4 = *(_QWORD *)(a2 + 80);
            a4[1] = v36;
            if (v36)
            {
              v37 = (unint64_t *)(v36 + 8);
              do
                v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }
            goto LABEL_92;
          }
        }
        goto LABEL_88;
      }
LABEL_66:
      **(_BYTE **)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      goto LABEL_67;
    }
LABEL_69:
    v33 = (quasar::LmModel2 **)(a2 + 80);
    if (*(_BYTE *)(a2 + 96))
      goto LABEL_76;
    goto LABEL_75;
  }
  if ((v20 & 0x80u) == 0)
    v22 = *(unsigned __int8 *)(a2 + 79);
  else
    v22 = *(_QWORD *)(a2 + 64);
  v23 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v23 = v59.__r_.__value_.__l.__size_;
  if (v22 != v23)
    goto LABEL_89;
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v59;
  else
    v9 = (std::string *)v59.__r_.__value_.__r.__words[0];
  if ((v20 & 0x80) == 0)
  {
    if (*(_BYTE *)(a2 + 79))
    {
      v24 = (unsigned __int8 *)(a2 + 56);
      while (*v24 == v9->__r_.__value_.__s.__data_[0])
      {
        ++v24;
        v9 = (std::string *)((char *)v9 + 1);
        if (!--v20)
          goto LABEL_39;
      }
      goto LABEL_89;
    }
    goto LABEL_39;
  }
  if (!memcmp(*(const void **)(a2 + 56), v9, *(_QWORD *)(a2 + 64)))
    goto LABEL_39;
LABEL_89:
  if (quasar::gLogLevel >= 4)
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Returning nullptr. Elapsed ", 27);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v42);
  }
  *a4 = 0;
  a4[1] = 0;
LABEL_92:
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
}

void sub_1ADEF01F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 - 105) < 0)
    operator delete(*(void **)(v15 - 128));
  _Unwind_Resume(exception_object);
}

void quasar::LmLoader2::loadForRecognition(quasar::SystemConfig *this@<X2>, uint64_t a2@<X0>, const std::string *a3@<X1>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v23;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  if (quasar::gLogLevel >= 4)
  {
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"task=", 5);
    v13 = *(char *)(a4 + 23);
    if (v13 >= 0)
      v14 = a4;
    else
      v14 = *(_QWORD *)a4;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a4 + 23);
    else
      v15 = *(_QWORD *)(a4 + 8);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" appName=", 9);
    v18 = *(char *)(a5 + 23);
    if (v18 >= 0)
      v19 = a5;
    else
      v19 = *(_QWORD *)a5;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a5 + 23);
    else
      v20 = *(_QWORD *)(a5 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v26);
  }
  v21 = *(char *)(a4 + 23);
  if (v21 < 0)
  {
    if (*(_QWORD *)(a4 + 8) != 9)
      goto LABEL_24;
    a4 = *(_QWORD *)a4;
  }
  else if (v21 != 9)
  {
    goto LABEL_24;
  }
  if (*(_QWORD *)a4 != 0x6F69746174636944 || *(_BYTE *)(a4 + 8) != 110)
    goto LABEL_24;
  v23 = *(char *)(a5 + 23);
  if (v23 < 0)
  {
    if (*(_QWORD *)(a5 + 8) != 19)
      goto LABEL_24;
    a5 = *(_QWORD *)a5;
  }
  else if (v23 != 19)
  {
    goto LABEL_24;
  }
  if (*(_QWORD *)a5 == 0x6C7070612E6D6F63
    && *(_QWORD *)(a5 + 8) == 0x656C69626F4D2E65
    && *(_QWORD *)(a5 + 11) == 0x534D53656C69626FLL)
  {
    quasar::LmLoader2::fetchOrLoadModel(this, a2, a3, a6);
    return;
  }
LABEL_24:
  if (quasar::gLogLevel >= 4)
  {
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Not loading custom-lm because task or app doesn't support it.", 61);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v26);
  }
  *a6 = 0;
  a6[1] = 0;
}

void sub_1ADEF0470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmLoader2::invalidate(uint64_t this)
{
  *(_BYTE *)(this + 24) = 1;
  return this;
}

uint64_t quasar::corrective_reranking::TransformerClassifier::TransformerClassifier(uint64_t a1, uint64_t a2)
{
  quasar::TransformerForClassification **v3;
  uint64_t v4;
  quasar::corrective_reranking::TransformerTokenUtilities **v5;
  quasar::TransformerForClassification *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  quasar::corrective_reranking::TransformerTokenUtilities *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v20[17];

  *(_DWORD *)a1 = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (quasar::TransformerForClassification **)(a1 + 8);
  v4 = a1 + 16;
  v5 = (quasar::corrective_reranking::TransformerTokenUtilities **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  if (*(_DWORD *)(a2 + 48) < *(_DWORD *)(a2 + 52))
  {
    memset(v20, 0, sizeof(v20));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"maxLength must be equal or bigger than truncationLength", 55);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v20);
  }
  v7 = (quasar::TransformerForClassification *)operator new();
  quasar::TransformerForClassification::TransformerForClassification(v7, a2);
  std::unique_ptr<quasar::TransformerForClassification>::reset[abi:ne180100](v3, v7);
  std::allocate_shared[abi:ne180100]<quasar::TransformerTokenizer,std::allocator<quasar::TransformerTokenizer>,std::string const&,void>(a2 + 24, v20);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v4, v20);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v20[0] + 1);
  if (*((_QWORD *)&v20[0] + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v20[0] + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = operator new();
  v12 = (quasar::corrective_reranking::TransformerTokenUtilities *)v11;
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v20[0] = *(_QWORD *)(a1 + 16);
  *((_QWORD *)&v20[0] + 1) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  quasar::corrective_reranking::TransformerTokenUtilities::TransformerTokenUtilities(v11, v20, *(_DWORD *)(a2 + 52));
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v20[0] + 1);
  if (*((_QWORD *)&v20[0] + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v20[0] + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::unique_ptr<quasar::corrective_reranking::TransformerTokenUtilities>::reset[abi:ne180100](v5, v12);
  return a1;
}

void sub_1ADEF0684(_Unwind_Exception *a1)
{
  uint64_t v1;
  quasar::corrective_reranking::TransformerTokenUtilities **v2;
  quasar::TransformerForClassification **v3;
  uint64_t v4;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 40);
  std::unique_ptr<quasar::corrective_reranking::TransformerTokenUtilities>::reset[abi:ne180100](v2, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4);
  std::unique_ptr<quasar::TransformerForClassification>::reset[abi:ne180100](v3, 0);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TransformerClassifier::~TransformerClassifier(quasar::corrective_reranking::TransformerTokenUtilities **this)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 5));
  std::unique_ptr<quasar::corrective_reranking::TransformerTokenUtilities>::reset[abi:ne180100](this + 4, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
  std::unique_ptr<quasar::TransformerForClassification>::reset[abi:ne180100](this + 1, 0);
}

float quasar::corrective_reranking::TransformerClassifier::classifyIntent(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8;
  unsigned __int8 **v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned __int8 **v17;
  signed int v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  float v30;
  void *__p[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  std::string __str;
  void *v50;
  char v51;
  std::string v52;
  std::string v53;
  const void *v54[2];
  unsigned __int8 v55;
  const void *v56[2];
  char v57;
  void **v58;

  std::string::basic_string[abi:ne180100]<0>(v56, "<Intent Classification> ");
  std::string::basic_string[abi:ne180100]<0>(v54, " ** ");
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v53 = *(std::string *)a2;
  if (a4)
  {
    v8 = *(_DWORD *)a1;
    v9 = (unsigned __int8 **)a1[4];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v56, v54, (uint64_t)&v52);
    v10 = *(char *)(a3 + 23);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)a3;
    else
      v11 = *(const std::string::value_type **)a3;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a3 + 23);
    else
      v12 = *(_QWORD *)(a3 + 8);
    v13 = std::string::append(&v52, v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    quasar::corrective_reranking::TransformerTokenUtilities::tokenize(v9, (uint64_t)&__str, 0, (uint64_t *)__p);
    v16 = __p[0];
    v15 = __p[1];
    v58 = __p;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v58);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    v17 = (unsigned __int8 **)a1[4];
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    v18 = v8 - ((unint64_t)(v15 - v16) >> 5);
    quasar::corrective_reranking::TransformerTokenUtilities::truncateAdjacentTexts(v17, (uint64_t)&v53, (uint64_t)__p, v18, 1, &__str);
    if (SBYTE7(v33) < 0)
      operator delete(__p[0]);
    std::string::operator=(&v53, &__str);
    if (v18 <= 0 && quasar::gLogLevel >= 2)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"WARNING: Context window of ", 27);
      v19 = (_QWORD *)std::ostream::operator<<();
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" is too short to fit the displayed text and utterance. ", 55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Proceed with empty displayed text, and full spoken text which will be truncated by the Transformer tokenizer.", 109);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
    if (v51 < 0)
      operator delete(v50);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v56, (const void **)&v53.__r_.__value_.__l.__data_, (uint64_t)&v52);
  if ((v55 & 0x80u) == 0)
    v21 = (const std::string::value_type *)v54;
  else
    v21 = (const std::string::value_type *)v54[0];
  if ((v55 & 0x80u) == 0)
    v22 = v55;
  else
    v22 = (std::string::size_type)v54[1];
  v23 = std::string::append(&v52, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = *(char *)(a3 + 23);
  if (v25 >= 0)
    v26 = (const std::string::value_type *)a3;
  else
    v26 = *(const std::string::value_type **)a3;
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a3 + 23);
  else
    v27 = *(_QWORD *)(a3 + 8);
  v28 = std::string::append(&__str, v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(_QWORD *)&v33 = *((_QWORD *)&v28->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = quasar::corrective_reranking::TransformerClassifier::sequenceClassification(a1, (uint64_t)__p);
  if (SBYTE7(v33) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if ((char)v55 < 0)
    operator delete((void *)v54[0]);
  if (v57 < 0)
    operator delete((void *)v56[0]);
  return v30;
}

void sub_1ADEF0A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 113) < 0)
    operator delete(*(void **)(v14 - 136));
  if (*(char *)(v14 - 89) < 0)
    operator delete(*(void **)(v14 - 112));
  _Unwind_Resume(exception_object);
}

void sub_1ADEF0B64()
{
  JUMPOUT(0x1ADEF0B48);
}

float quasar::corrective_reranking::TransformerClassifier::sequenceClassification(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  float v6;
  unsigned __int8 *v7;
  std::string *v9;
  std::string *v10;
  uint64_t v11[3];
  int32x2_t v12[5];
  int32x2_t v13[5];
  int32x2_t *v14;
  char v15;
  std::string v16;
  __int128 v17;

  *(_QWORD *)&v17 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t)(a1 + 5);
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 5, (unsigned __int8 *)a2);
  if (v5)
    return *((float *)v5 + 10);
  kaldi::Matrix<float>::Matrix((uint64_t)v13);
  kaldi::Matrix<float>::Matrix((uint64_t)v12);
  v7 = (unsigned __int8 *)a1[2];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v16 = *(std::string *)a2;
  v9 = 0;
  v10 = 0;
  v11[0] = 0;
  v14 = (int32x2_t *)&v9;
  v15 = 0;
  v9 = (std::string *)operator new(0x18uLL);
  v10 = v9;
  v11[0] = (uint64_t)&v9[1];
  v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v11, (__int128 *)&v16, &v17, v9);
  quasar::TransformerTokenizer::encode(v7, (uint64_t *)&v9, v13, v12, 1, *(unsigned int *)a1, 1);
  v14 = (int32x2_t *)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  kaldi::Matrix<float>::Matrix((uint64_t)&v9);
  quasar::TransformerForClassification::run(a1[1], 0, (uint64_t)v13, (uint64_t)v12, (int32x2_t *)&v9);
  LODWORD(v16.__r_.__value_.__l.__data_) = HIDWORD(v9->__r_.__value_.__r.__words[0]);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::string const&,float &>(v4, (unsigned __int8 *)a2, a2, (float *)&v16);
  v6 = *(float *)&v16.__r_.__value_.__l.__data_;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v9);
  kaldi::Matrix<float>::~Matrix((uint64_t)v12);
  kaldi::Matrix<float>::~Matrix((uint64_t)v13);
  return v6;
}

void sub_1ADEF0D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1ADEF0D88()
{
  JUMPOUT(0x1ADEF0D78);
}

void sub_1ADEF0D90()
{
  JUMPOUT(0x1ADEF0D80);
}

float quasar::corrective_reranking::TransformerClassifier::validateEdit(uint64_t *a1, const void **a2, uint64_t a3, uint64_t a4)
{
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  float v26;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  void *__p[2];
  std::string::size_type v33;
  std::string::value_type *v34;
  std::string::size_type v35;
  unsigned __int8 v36;
  const void *v37[2];
  char v38;

  std::string::basic_string[abi:ne180100]<0>(v37, "<Edit Validation> ");
  std::string::basic_string[abi:ne180100]<0>(&v34, " ** ");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v37, a2, (uint64_t)&v28);
  if ((v36 & 0x80u) == 0)
    v8 = (const std::string::value_type *)&v34;
  else
    v8 = v34;
  if ((v36 & 0x80u) == 0)
    v9 = v36;
  else
    v9 = v35;
  v10 = std::string::append(&v28, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = *(char *)(a3 + 23);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)a3;
  else
    v13 = *(const std::string::value_type **)a3;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a3 + 23);
  else
    v14 = *(_QWORD *)(a3 + 8);
  v15 = std::string::append(&v29, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((v36 & 0x80u) == 0)
    v17 = (const std::string::value_type *)&v34;
  else
    v17 = v34;
  if ((v36 & 0x80u) == 0)
    v18 = v36;
  else
    v18 = v35;
  v19 = std::string::append(&v30, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = *(char *)(a4 + 23);
  if (v21 >= 0)
    v22 = (const std::string::value_type *)a4;
  else
    v22 = *(const std::string::value_type **)a4;
  if (v21 >= 0)
    v23 = *(unsigned __int8 *)(a4 + 23);
  else
    v23 = *(_QWORD *)(a4 + 8);
  v24 = std::string::append(&v31, v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v33 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = quasar::corrective_reranking::TransformerClassifier::sequenceClassification(a1, (uint64_t)__p);
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if ((char)v36 < 0)
    operator delete(v34);
  if (v38 < 0)
    operator delete((void *)v37[0]);
  return v26;
}

void sub_1ADEF0F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a42 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  if (*(char *)(v42 - 65) < 0)
    operator delete(*(void **)(v42 - 88));
  _Unwind_Resume(exception_object);
}

float quasar::corrective_reranking::TransformerClassifier::validateParse(uint64_t *a1, __int128 *a2, __int128 **a3)
{
  float v6;
  std::string v8;
  void *__p;
  char v10;
  std::string v11;
  void *v12[2];
  char v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  quasar::corrective_reranking::TextEdit::TextEdit((quasar::corrective_reranking::TextEdit *)v12, (const quasar::corrective_reranking::Parse *)a3);
  quasar::corrective_reranking::detokenize(a3 + 4, &v11);
  quasar::corrective_reranking::TransformerTokenUtilities::buildTruncatedExistingAndResultingTexts(a1[4], a2, (uint64_t)&v11, (unsigned __int8 *)v12, &v8);
  v6 = quasar::corrective_reranking::TransformerClassifier::validateEdit(a1, (const void **)&v8.__r_.__value_.__l.__data_, (uint64_t)&v11, (uint64_t)&__p);
  if (v10 < 0)
    operator delete(__p);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v18 < 0)
    operator delete(v17);
  if (v16 && v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v13 < 0)
    operator delete(v12[0]);
  return v6;
}

void sub_1ADEF1140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a10);
  if (a21 < 0)
    operator delete(__p);
  quasar::corrective_reranking::TextEdit::~TextEdit(&a22);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TransformerClassifier::classifyCapitalization(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string __p;
  __int128 v12;
  std::string *p_p;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (char *)a2;
  else
    v7 = *(char **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  quasar::utf8::convertToLowerCaseOrEmpty(v7, v8, &__p);
  quasar::corrective_reranking::tokenize((uint64_t)&__p, 0, &v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::corrective_reranking::TransformerClassifier::tokenClassification(a1, a2, 1, (uint64_t *)&__p);
  quasar::corrective_reranking::TransformerTokenUtilities::mapTransformerTokenizationToIcu((uint64_t *)&__p, (quasar::QsrText **)&v12, a3);
  v9 = *a3;
  v10 = a3[1];
  while (v9 != v10)
  {
    *(_DWORD *)(v9 + 56) = quasar::corrective_reranking::tokenCasingFromScores((uint64_t *)(v9 + 24));
    v9 += 64;
  }
  p_p = &__p;
  std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1ADEF1258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  *(_QWORD *)(v16 - 40) = &__p;
  std::vector<quasar::corrective_reranking::TokenClassification>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 40));
  __p = &a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::TransformerClassifier::tokenClassification@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t v9;
  int32x2_t v10;
  unsigned int *v11;
  void **v12;
  unsigned int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unsigned int *v19;
  unsigned int v20;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer begin;
  uint64_t CircleRegion;
  std::vector<std::string>::pointer v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  std::string::size_type v28;
  int v29;
  int v30;
  const void *v31;
  std::vector<std::string>::pointer v32;
  uint64_t v34;
  void *__p;
  void *v36;
  char *v37;
  std::vector<std::string> v38;
  void **p_p;
  void **v40;
  void **v41;
  int32x2_t v42[5];
  int32x2_t v43[5];
  std::string v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  kaldi::Matrix<float>::Matrix((uint64_t)v43);
  kaldi::Matrix<float>::Matrix((uint64_t)v42);
  v8 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v44 = *(std::string *)a2;
  __p = 0;
  v36 = 0;
  v37 = 0;
  p_p = &__p;
  LOBYTE(v40) = 0;
  __p = operator new(0x18uLL);
  v36 = __p;
  v37 = (char *)__p + 24;
  v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v37, (__int128 *)&v44, &v45, (std::string *)__p);
  quasar::TransformerTokenizer::encode(v8, (uint64_t *)&__p, v43, v42, 1, *a1, 1);
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  kaldi::Matrix<float>::Matrix((uint64_t)&v44);
  quasar::TransformerForClassification::run(*((_QWORD *)a1 + 1), 1, (uint64_t)v43, (uint64_t)v42, (int32x2_t *)&v44);
  v9 = 0;
  p_p = 0;
  v40 = 0;
  v41 = 0;
  while (v9 < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v43))
  {
    v10 = v43[0];
    v11 = (unsigned int *)v40;
    if (v40 >= v41)
    {
      v13 = (unsigned int *)p_p;
      v14 = ((char *)v40 - (char *)p_p) >> 2;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v16 = (char *)v41 - (char *)p_p;
      if (((char *)v41 - (char *)p_p) >> 1 > v15)
        v15 = v16 >> 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v41, v17);
        v13 = (unsigned int *)p_p;
        v11 = (unsigned int *)v40;
      }
      else
      {
        v18 = 0;
      }
      v19 = (unsigned int *)&v18[4 * v14];
      *v19 = (int)*(float *)(*(_QWORD *)&v10 + 4 * v9);
      v12 = (void **)(v19 + 1);
      while (v11 != v13)
      {
        v20 = *--v11;
        *--v19 = v20;
      }
      p_p = (void **)v19;
      v40 = v12;
      v41 = (void **)&v18[4 * v17];
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_DWORD *)v40 = (int)*(float *)(*(_QWORD *)v43 + 4 * v9);
      v12 = (void **)(v11 + 1);
    }
    v40 = v12;
    ++v9;
  }
  quasar::TransformerTokenizer::convertIdsToTokens(*((quasar::TransformerTokenizer **)a1 + 2), (unsigned int **)&p_p, 0, &v38);
  begin = v38.__begin_;
  end = v38.__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) != (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v44)
    || (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v44) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"tokens.size() == logits.NumRows() && logits.NumCols() > 0", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  CircleRegion = quasar::GeoRegion::getCircleRegion(*((quasar::GeoRegion **)a1 + 2));
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v24 = v38.__begin_;
  if (v38.__end_ != v38.__begin_)
  {
    v25 = (_QWORD *)CircleRegion;
    v26 = 0;
    v27 = 0;
    do
    {
      if (!a3
        || !std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v25, (unsigned __int8 *)&v24[v26]))
      {
        v28 = v44.__r_.__value_.__r.__words[0];
        v29 = v44.__r_.__value_.__r.__words[2];
        v30 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v44);
        v31 = (const void *)(v28 + 4 * v29 * (int)v27);
        v32 = v38.__begin_;
        __p = 0;
        v36 = 0;
        v37 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v31, (uint64_t)v31 + 4 * v30, v30);
        v34 = 0;
        std::vector<quasar::corrective_reranking::TokenClassification>::emplace_back<std::string &,std::vector<float>,quasar::corrective_reranking::TextRange>(a4, (uint64_t)&v32[v26], (uint64_t)&__p, (uint64_t)&v34);
        if (__p)
        {
          v36 = __p;
          operator delete(__p);
        }
      }
      ++v27;
      v24 = v38.__begin_;
      ++v26;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v38.__end_ - (char *)v38.__begin_) >> 3) > v27);
  }
  __p = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (p_p)
  {
    v40 = p_p;
    operator delete(p_p);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)&v44);
  kaldi::Matrix<float>::~Matrix((uint64_t)v42);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v43);
}

void sub_1ADEF1728(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADEF1774);
}

void quasar::corrective_reranking::TransformerClassifier::clearCache(quasar::corrective_reranking::TransformerClassifier *this)
{
  _OWORD v2[17];

  if (quasar::gLogLevel >= 5)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Clearing transformer classifier cache, size=", 44);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 40);
}

void sub_1ADEF1810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::TokenClassification>::emplace_back<std::string &,std::vector<float>,quasar::corrective_reranking::TextRange>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v10 = a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  v11 = *(_QWORD *)(v8 - 8);
  if (v11 >= v10)
  {
    v13 = (uint64_t)(v11 - *a1) >> 6;
    if ((unint64_t)(v13 + 1) >> 58)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v9 - *a1;
    v15 = v14 >> 5;
    if (v14 >> 5 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0)
      v16 = 0x3FFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    v23 = v8;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>(v8, v16);
    else
      v17 = 0;
    v19 = v17;
    v20 = &v17[64 * v13];
    v22 = &v17[64 * v16];
    quasar::corrective_reranking::TokenClassification::TokenClassification(v20, a2, a3, a4);
    v21 = v20 + 64;
    std::vector<quasar::corrective_reranking::TokenClassification>::__swap_out_circular_buffer(a1, &v19);
    v12 = a1[1];
    std::__split_buffer<quasar::corrective_reranking::TokenClassification>::~__split_buffer(&v19);
  }
  else
  {
    quasar::corrective_reranking::TokenClassification::TokenClassification(*(_QWORD *)(v8 - 8), a2, a3, a4);
    v12 = v11 + 64;
    a1[1] = v11 + 64;
  }
  a1[1] = v12;
  return v12 - 64;
}

void sub_1ADEF1938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

quasar::TransformerForClassification *std::unique_ptr<quasar::TransformerForClassification>::reset[abi:ne180100](quasar::TransformerForClassification **a1, quasar::TransformerForClassification *a2)
{
  quasar::TransformerForClassification *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::TransformerForClassification::~TransformerForClassification(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

quasar::corrective_reranking::TransformerTokenUtilities *std::unique_ptr<quasar::corrective_reranking::TransformerTokenUtilities>::reset[abi:ne180100](quasar::corrective_reranking::TransformerTokenUtilities **a1, quasar::corrective_reranking::TransformerTokenUtilities *a2)
{
  quasar::corrective_reranking::TransformerTokenUtilities *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::corrective_reranking::TransformerTokenUtilities::~TransformerTokenUtilities(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

std::string *std::allocate_shared[abi:ne180100]<quasar::TransformerTokenizer,std::allocator<quasar::TransformerTokenizer>,std::string const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  std::string *v4;
  std::string *result;

  v4 = (std::string *)operator new(0xF8uLL);
  result = std::__shared_ptr_emplace<quasar::TransformerTokenizer>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::TransformerTokenizer>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1ADEF1A14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::TransformerTokenizer>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::TransformerTokenizer>,0>(std::string *a1, uint64_t a2)
{
  char v4;

  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5CFFD90;
  a1->__r_.__value_.__l.__size_ = 0;
  std::allocator<quasar::TransformerTokenizer>::construct[abi:ne180100]<quasar::TransformerTokenizer,std::string const&>((uint64_t)&v4, a1 + 1, a2);
  return a1;
}

void sub_1ADEF1A74(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::TransformerTokenizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFD90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::TransformerTokenizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFD90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::TransformerTokenizer>::__on_zero_shared(uint64_t a1)
{
  quasar::TransformerTokenizer::~TransformerTokenizer((quasar::TransformerTokenizer *)(a1 + 24));
}

void std::allocator<quasar::TransformerTokenizer>::construct[abi:ne180100]<quasar::TransformerTokenizer,std::string const&>(uint64_t a1, std::string *a2, uint64_t a3)
{
  int v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  __int128 v12;
  char v13;
  __int128 v14;
  char v15;

  std::string::basic_string[abi:ne180100]<0>(&v14, "[UNK]");
  std::string::basic_string[abi:ne180100]<0>(&v12, "[SEP]");
  std::string::basic_string[abi:ne180100]<0>(v10, "[PAD]");
  std::string::basic_string[abi:ne180100]<0>(v8, "[CLS]");
  std::string::basic_string[abi:ne180100]<0>(__p, "[MASK]");
  quasar::TransformerTokenizer::TransformerTokenizer(a2, a3, 1, 1, &v14, &v12, (uint64_t)v10, (__int128 *)v8, (uint64_t)__p, 1, v5, 0);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v13 < 0)
    operator delete((void *)v12);
  if (v15 < 0)
    operator delete((void *)v14);
}

void sub_1ADEF1BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  if (*(char *)(v29 - 33) < 0)
    operator delete(*(void **)(v29 - 56));
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::string const&,float &>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, float *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::string const&,float &>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_1ADEF1EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

float std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::string const&,float &>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  std::string *v11;
  float result;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)a5 = v10;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  v11 = (std::string *)(v10 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v10 + 4) = *(_QWORD *)(a3 + 16);
  }
  result = *a4;
  *((float *)v10 + 10) = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_1ADEF1F7C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *StorageAccessor::EspressoStorageAccessor::GetDataView<float>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  unint64_t Data;
  uint64_t v7;
  const void *v8;
  std::runtime_error *exception;
  unint64_t v11;

  v11 = a2;
  StorageAccessor::EspressoStorageAccessor::EnsureLoaded((StorageAccessor::EspressoStorageAccessor *)a1);
  v5 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((_QWORD *)(a1 + 40), &v11);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "blobv1 identifier not found");
    __cxa_throw(exception, (struct type_info *)off_1E5CFD1A8, MEMORY[0x1E0DE42B0]);
  }
  Data = StorageAccessor::MMapFileAccessor::ReadData(*(StorageAccessor::MMapFileAccessor **)(a1 + 32), v5[3], v5[4]);
  if ((unint64_t)v7 >= 4)
    v8 = (const void *)Data;
  else
    v8 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(a3, v8, (uint64_t)v8 + (v7 & 0xFFFFFFFFFFFFFFFCLL), v7 >> 2);
}

void sub_1ADEF2040(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void StorageAccessor::EspressoStorageAccessor::EnsureLoaded(StorageAccessor::EspressoStorageAccessor *this)
{
  unint64_t *v1;
  unint64_t v2;
  StorageAccessor::EspressoStorageAccessor **v3;
  StorageAccessor::EspressoStorageAccessor *v4;
  StorageAccessor::EspressoStorageAccessor ****v5;
  StorageAccessor::EspressoStorageAccessor ***v6;

  v4 = this;
  v1 = (unint64_t *)((char *)this + 24);
  v3 = &v4;
  v2 = atomic_load(v1);
  if (v2 != -1)
  {
    v6 = &v3;
    v5 = &v6;
    std::__call_once(v1, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<StorageAccessor::EspressoStorageAccessor::EnsureLoaded(void)::$_1 &&>>);
  }
}

_QWORD *StorageAccessor::EspressoStorageAccessor::GetDataView<signed char>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  unint64_t Data;
  size_t v7;
  size_t v8;
  const void *v9;
  std::runtime_error *exception;
  unint64_t v12;

  v12 = a2;
  StorageAccessor::EspressoStorageAccessor::EnsureLoaded((StorageAccessor::EspressoStorageAccessor *)a1);
  v5 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((_QWORD *)(a1 + 40), &v12);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "blobv1 identifier not found");
    __cxa_throw(exception, (struct type_info *)off_1E5CFD1A8, MEMORY[0x1E0DE42B0]);
  }
  Data = StorageAccessor::MMapFileAccessor::ReadData(*(StorageAccessor::MMapFileAccessor **)(a1 + 32), v5[3], v5[4]);
  v8 = v7;
  a3[1] = 0;
  a3[2] = 0;
  if (v7)
    v9 = (const void *)Data;
  else
    v9 = 0;
  *a3 = 0;
  return std::vector<signed char>::__init_with_size[abi:ne180100]<signed char const*,signed char const*>(a3, v9, (uint64_t)v9 + v8, v8);
}

void sub_1ADEF2148(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *StorageAccessor::EspressoStorageAccessor::GetDataView<unsigned char>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  unint64_t Data;
  size_t v7;
  size_t v8;
  const void *v9;
  std::runtime_error *exception;
  unint64_t v12;

  v12 = a2;
  StorageAccessor::EspressoStorageAccessor::EnsureLoaded((StorageAccessor::EspressoStorageAccessor *)a1);
  v5 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((_QWORD *)(a1 + 40), &v12);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "blobv1 identifier not found");
    __cxa_throw(exception, (struct type_info *)off_1E5CFD1A8, MEMORY[0x1E0DE42B0]);
  }
  Data = StorageAccessor::MMapFileAccessor::ReadData(*(StorageAccessor::MMapFileAccessor **)(a1 + 32), v5[3], v5[4]);
  v8 = v7;
  a3[1] = 0;
  a3[2] = 0;
  if (v7)
    v9 = (const void *)Data;
  else
    v9 = 0;
  *a3 = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a3, v9, (uint64_t)v9 + v8, v8);
}

void sub_1ADEF21FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *StorageAccessor::EspressoStorageAccessor::SetDataView<float>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::runtime_error *exception;
  _QWORD v10[2];
  unint64_t v11;

  v11 = a2;
  StorageAccessor::EspressoStorageAccessor::EnsureLoaded((StorageAccessor::EspressoStorageAccessor *)a1);
  v5 = *a3;
  v6 = a3[1] - *a3;
  if (!v6)
    v5 = 0;
  v10[0] = v5;
  v10[1] = v6;
  v7 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((_QWORD *)(a1 + 40), &v11);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "blobv1 identifier not found");
    __cxa_throw(exception, (struct type_info *)off_1E5CFD1A8, MEMORY[0x1E0DE42B0]);
  }
  return StorageAccessor::MMapFileAccessor::WriteData(*(_QWORD **)(a1 + 32), v7[3], (uint64_t)v10);
}

void sub_1ADEF22A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *StorageAccessor::EspressoStorageAccessor::SetDataView<signed char>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::runtime_error *exception;
  _QWORD v10[2];
  unint64_t v11;

  v11 = a2;
  StorageAccessor::EspressoStorageAccessor::EnsureLoaded((StorageAccessor::EspressoStorageAccessor *)a1);
  v5 = *a3;
  v6 = a3[1] - *a3;
  if (!v6)
    v5 = 0;
  v10[0] = v5;
  v10[1] = v6;
  v7 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((_QWORD *)(a1 + 40), &v11);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "blobv1 identifier not found");
    __cxa_throw(exception, (struct type_info *)off_1E5CFD1A8, MEMORY[0x1E0DE42B0]);
  }
  return StorageAccessor::MMapFileAccessor::WriteData(*(_QWORD **)(a1 + 32), v7[3], (uint64_t)v10);
}

void sub_1ADEF234C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *StorageAccessor::EspressoStorageAccessor::SetDataView<unsigned char>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::runtime_error *exception;
  _QWORD v10[2];
  unint64_t v11;

  v11 = a2;
  StorageAccessor::EspressoStorageAccessor::EnsureLoaded((StorageAccessor::EspressoStorageAccessor *)a1);
  v5 = *a3;
  v6 = a3[1] - *a3;
  if (!v6)
    v5 = 0;
  v10[0] = v5;
  v10[1] = v6;
  v7 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((_QWORD *)(a1 + 40), &v11);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "blobv1 identifier not found");
    __cxa_throw(exception, (struct type_info *)off_1E5CFD1A8, MEMORY[0x1E0DE42B0]);
  }
  return StorageAccessor::MMapFileAccessor::WriteData(*(_QWORD **)(a1 + 32), v7[3], (uint64_t)v10);
}

void sub_1ADEF23F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void StorageAccessor::EspressoStorageAccessor::~EspressoStorageAccessor(StorageAccessor::MMapFileAccessor **this)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(this + 5));
  std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](this + 4, 0);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

double StorageAccessor::EspressoStorageAccessor::EspressoStorageAccessor(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  double result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  return result;
}

StorageAccessor::MMapFileAccessor *std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100](StorageAccessor::MMapFileAccessor **a1, StorageAccessor::MMapFileAccessor *a2)
{
  StorageAccessor::MMapFileAccessor *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    StorageAccessor::MMapFileAccessor::~MMapFileAccessor(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<StorageAccessor::EspressoStorageAccessor::EnsureLoaded(void)::$_1 &&>>(uint64_t ****a1)
{
  uint64_t v1;
  StorageAccessor::MMapFileAccessor *v2;
  unint64_t *Data;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _OWORD v12[2];
  int v13;
  _QWORD *v14;

  v1 = ****a1;
  v2 = (StorageAccessor::MMapFileAccessor *)operator new();
  StorageAccessor::MMapFileAccessor::MMapFileAccessor(v2, v1);
  Data = (unint64_t *)StorageAccessor::MMapFileAccessor::ReadData(v2, 0, 8);
  v4 = *Data;
  memset(v12, 0, sizeof(v12));
  v13 = 1065353216;
  if (v4)
  {
    v5 = 0;
    v6 = 8;
    v7 = (16 * v4) | 8;
    do
    {
      v8 = (_QWORD *)StorageAccessor::MMapFileAccessor::ReadData(v2, v6, 16);
      v14 = v8;
      v9 = std::__hash_table<std::__hash_value_type<unsigned long long,StorageAccessor::EspressoStorageAccessor::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,StorageAccessor::EspressoStorageAccessor::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,StorageAccessor::EspressoStorageAccessor::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,StorageAccessor::EspressoStorageAccessor::FileInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v12, v8, (uint64_t)&std::piecewise_construct, &v14);
      v9[3] = v7;
      v10 = v8[1];
      v9[4] = v10;
      v7 += v10;
      ++v5;
      v6 += 16;
    }
    while (v5 < *Data);
  }
  std::unique_ptr<StorageAccessor::MMapFileAccessor>::reset[abi:ne180100]((StorageAccessor::MMapFileAccessor **)(v1 + 32), v2);
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__move_assign(v1 + 40, (uint64_t *)v12);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v12);
}

void sub_1ADEF25E0(_Unwind_Exception *a1)
{
  StorageAccessor::MMapFileAccessor *v1;

  StorageAccessor::MMapFileAccessor::~MMapFileAccessor(v1);
  MEMORY[0x1AF44D190]();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,StorageAccessor::EspressoStorageAccessor::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,StorageAccessor::EspressoStorageAccessor::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,StorageAccessor::EspressoStorageAccessor::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,StorageAccessor::EspressoStorageAccessor::FileInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADEF2834(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<signed char>::__init_with_size[abi:ne180100]<signed char const*,signed char const*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADEF28A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADEF291C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADEF2A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1ADEF2C64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADEF2D58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADEF2E8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::registerParams(quasar::OnlineLatticeBiglmLmeFasterDecoder *this, quasar::SystemConfig *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  _BYTE *v8;
  _BOOL4 v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *__p[2];
  char v15;
  std::string v16;

  quasar::OnlineLatticeBiglmFasterDecoder::registerParams(this, a2);
  std::string::basic_string[abi:ne180100]<0>(&v16, "cache-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Cache size for lazy replace operation");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)this + 2880, (uint64_t)__p, 0, 1, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "enable-lme");
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable LME");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)this + 2884, (uint64_t)__p, 0, 1, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "lme-sym-start-key");
  std::string::basic_string[abi:ne180100]<0>(__p, "Starting key value for LME symbols");
  quasar::SystemConfig::Register<long long>((uint64_t)a2, (const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)this + 2888, (uint64_t)__p, 0, 1, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "supported-lme-template-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "Comma-delimited LME template names");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)this + 2896, (uint64_t)__p, 0, 1, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "small-lm-prune-lme");
  std::string::basic_string[abi:ne180100]<0>(__p, "enable smallG pruning for lme phone tokens");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)this + 2885, (uint64_t)__p, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "classLM-fst-file-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of classLM FST filenames, use comma to separate multiple ones");
  v4 = (char *)this + 3040;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)this + 3040, (uint64_t)__p, 0, 19, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "classLM-template-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of classLM templates, in the same order as the classLM-fst-file-list");
  v5 = (char *)this + 3064;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)this + 3064, (uint64_t)__p, 0, 19, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "classLM-nnlm-file-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of class Nnlm filenames, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)this + 3136, (uint64_t)__p, 0, 19, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "classLM-nnlm-template-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of classNNLM templates");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)this + 3088, (uint64_t)__p, 0, 19, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "classLM-nnlm-scale-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of classNNLM scales");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)this + 3112, (uint64_t)__p, 0, 19, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "classLM-start-name-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of classLM start names, in the same order as the classLM-fst-file-list");
  v6 = (char *)this + 3160;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)this + 3160, (uint64_t)__p, 0, 19, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "classLM-end-name-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "list of classLM end names, in the same order as the classLM-fst-file-list");
  v7 = (char *)this + 3184;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)this + 3184, (uint64_t)__p, 0, 19, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "split-lme-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "When set to true, the combined lme tokens will be splitted into multiple tokens when we write final result.");
  v8 = (char *)this + 2886;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)v8, (uint64_t)__p, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (*((char *)a2 + 279) < 0)
    std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)a2 + 32), *((_QWORD *)a2 + 33));
  else
    v16 = *(std::string *)((char *)a2 + 256);
  std::string::basic_string[abi:ne180100]<0>(__p, "en");
  if (quasar::startsWith((unsigned __int8 *)&v16, (unsigned __int8 *)__p))
  {
    v9 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "es");
    if (quasar::startsWith((unsigned __int8 *)&v16, (unsigned __int8 *)v12))
    {
      v9 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v10, "fr_FR");
      v9 = quasar::startsWith((unsigned __int8 *)&v16, (unsigned __int8 *)v10);
      if (v11 < 0)
        operator delete(v10[0]);
    }
    if (v13 < 0)
      operator delete(v12[0]);
  }
  if ((v15 & 0x80000000) == 0)
  {
    if (!v9)
      goto LABEL_67;
    goto LABEL_66;
  }
  operator delete(__p[0]);
  if (v9)
LABEL_66:
    *v8 = 1;
LABEL_67:
  MEMORY[0x1AF44C914](v4, "");
  MEMORY[0x1AF44C914](v5, "");
  MEMORY[0x1AF44C914](v6, "");
  MEMORY[0x1AF44C914](v7, "");
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1ADEF3634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(quasar::OnlineLatticeBiglmLmeFasterDecoder *this)
{
  unsigned __int8 *v2;
  unsigned __int8 *i;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type size;
  void **v11;
  void *v12;
  void *v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  void **v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  BOOL v24;
  void *v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void **v34;
  uint64_t *MultiChainMultiAudioBuffer;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int *v50;
  int *v51;
  int *v52;
  int *v53;
  int v54;
  _BOOL4 v55;
  char *v56;
  char *v57;
  _BOOL4 v58;
  int v59;
  int v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73[2];
  char v74;
  void *__p[2];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  std::string v92;
  void *v93[2];
  char v94;
  __int128 *v95[2];
  char v96;
  __int128 v97;
  uint64_t v98;
  void **v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[3];
  _QWORD *v103;
  _QWORD v104[3];
  _QWORD *v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  quasar::OnlineLatticeBiglmFasterDecoder::finishInit(this);
  std::string::basic_string[abi:ne180100]<0>(&v99, ",");
  quasar::splitStringSimple((uint64_t)this + 2896, (uint64_t *)&v99, (uint64_t *)__p);
  if (SHIBYTE(v101) < 0)
    operator delete(v99);
  v2 = (unsigned __int8 *)__p[0];
  for (i = (unsigned __int8 *)__p[1]; v2 != i; v2 += 24)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 2936, v2, (uint64_t)v2);
  v99 = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v99);
  v4 = (uint64_t *)*((_QWORD *)this + 369);
  memset(&v92, 0, sizeof(v92));
  v5 = 0;
  if (v4)
  {
    v6 = v4;
    do
    {
      ++v5;
      v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(&v92, v4, 0, v5);
  v7 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v92.__r_.__value_.__l.__size_ - v92.__r_.__value_.__r.__words[0]) >> 3));
  if (v92.__r_.__value_.__l.__size_ == v92.__r_.__value_.__r.__words[0])
    v8 = 0;
  else
    v8 = v7;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v92.__r_.__value_.__l.__data_, (const void **)v92.__r_.__value_.__l.__size_, (uint64_t)__p, v8, 1);
  size = v92.__r_.__value_.__l.__size_;
  v9 = v92.__r_.__value_.__r.__words[0];
  if (v92.__r_.__value_.__r.__words[0] != v92.__r_.__value_.__l.__size_)
  {
    v11 = 0;
    while (1)
    {
      v99 = 0;
      if (!v11)
        goto LABEL_38;
      v11 = (void **)((char *)v11 + 1);
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 272), __p);
      if ((SBYTE7(v76) & 0x80u) == 0)
        v12 = (void *)BYTE7(v76);
      else
        v12 = __p[1];
      v13 = (void *)*(unsigned __int8 *)(v9 + 23);
      v14 = (char)v13;
      if ((char)v13 < 0)
        v13 = *(void **)(v9 + 8);
      if (v12 != v13)
        break;
      if (v14 >= 0)
        v15 = (unsigned __int8 *)v9;
      else
        v15 = *(unsigned __int8 **)v9;
      if ((BYTE7(v76) & 0x80) != 0)
      {
        v25 = __p[0];
        v26 = memcmp(__p[0], v15, (size_t)__p[1]);
        operator delete(v25);
        if (v26)
          goto LABEL_38;
      }
      else if (BYTE7(v76))
      {
        v16 = BYTE7(v76) - 1;
        v17 = __p;
        do
        {
          v19 = *(unsigned __int8 *)v17;
          v17 = (void **)((char *)v17 + 1);
          v18 = v19;
          v21 = *v15++;
          v20 = v21;
          v23 = v16-- != 0;
          v24 = v18 == v20;
        }
        while (v18 == v20 && v23);
        if ((BYTE7(v76) & 0x80) == 0)
          goto LABEL_32;
LABEL_35:
        operator delete(__p[0]);
        if (v24)
          goto LABEL_39;
        goto LABEL_38;
      }
LABEL_39:
      v99 = v11;
      if (v11 == (void **)-1)
      {
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
        v67 = *(char *)(v9 + 23);
        if (v67 >= 0)
          v68 = v9;
        else
          v68 = *(_QWORD *)v9;
        if (v67 >= 0)
          v69 = *(unsigned __int8 *)(v9 + 23);
        else
          v69 = *(_QWORD *)(v9 + 8);
        v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, v68, v69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      __p[0] = (void *)v9;
      std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 377, (const void **)v9, (uint64_t)&std::piecewise_construct, (__int128 **)__p)[7] = (uint64_t)v11;
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)this + 2976, (unint64_t *)&v99, &v99);
      if (quasar::gLogLevel >= 4)
      {
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Cached template ID ", 19);
        v27 = (_QWORD *)std::ostream::operator<<();
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for ", 5);
        v29 = *(char *)(v9 + 23);
        if (v29 >= 0)
          v30 = v9;
        else
          v30 = *(_QWORD *)v9;
        if (v29 >= 0)
          v31 = *(unsigned __int8 *)(v9 + 23);
        else
          v31 = *(_QWORD *)(v9 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      v9 += 24;
      if (v9 == size)
        goto LABEL_49;
    }
    v24 = 0;
    if ((BYTE7(v76) & 0x80) != 0)
      goto LABEL_35;
LABEL_32:
    if (v24)
      goto LABEL_39;
LABEL_38:
    v11 = (void **)quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 272), v9);
    goto LABEL_39;
  }
LABEL_49:
  if (*((char *)this + 3063) < 0)
  {
    if (!*((_QWORD *)this + 381))
      goto LABEL_68;
    goto LABEL_53;
  }
  if (*((_BYTE *)this + 3063))
  {
LABEL_53:
    v99 = 0;
    v100 = 0;
    v101 = 0;
    v97 = 0uLL;
    v98 = 0;
    kaldi::SplitStringToVector((const std::string *)((char *)this + 3040), ",", 1, (uint64_t)&v99);
    kaldi::SplitStringToVector((const std::string *)((char *)this + 3064), ",", 1, (uint64_t)&v97);
    v32 = v97;
    if (*((_QWORD *)&v97 + 1) - (_QWORD)v97 != v100 - (_QWORD)v99)
    {
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"The number of classLM templates = ", 34);
      v71 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)", which does not match the number of classLM Fst files = ", 57);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (*((_QWORD *)&v97 + 1) == (_QWORD)v97)
    {
LABEL_67:
      __p[0] = &v97;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v99;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      goto LABEL_68;
    }
    v33 = 0;
    while (1)
    {
      v34 = v99;
      MultiChainMultiAudioBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
      v104[0] = &off_1E5D3E7F8;
      v104[1] = this;
      v105 = v104;
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::loadMasterLmOrCreatePlaceholder((uint64_t)&v34[3 * v33], v32 + 24 * v33, MultiChainMultiAudioBuffer, (uint64_t)v104, __p);
      v95[0] = (__int128 *)(v97 + 24 * v33);
      v36 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 406, (const void **)v95[0], (uint64_t)&std::piecewise_construct, v95);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v36 + 7), (__int128 *)__p);
      v37 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v38 = (unint64_t *)((char *)__p[1] + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = v105;
      if (v105 == v104)
        break;
      if (v105)
      {
        v41 = 5;
LABEL_65:
        (*(void (**)(void))(*v40 + 8 * v41))();
      }
      ++v33;
      v32 = v97;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v97 + 1) - v97) >> 3) <= v33)
        goto LABEL_67;
    }
    v40 = v104;
    v41 = 4;
    goto LABEL_65;
  }
LABEL_68:
  if (*((char *)this + 3159) < 0)
    v42 = *((_QWORD *)this + 393);
  else
    v42 = *((unsigned __int8 *)this + 3159);
  if (*((char *)this + 3111) < 0)
    v43 = *((_QWORD *)this + 387);
  else
    v43 = *((unsigned __int8 *)this + 3111);
  if ((v42 == 0) != (v43 == 0))
  {
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ClassNNLM doesn't have either tag or model provided.", 52);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if ((*((_BYTE *)this + 3159) & 0x80) == 0)
  {
    if (!*((_BYTE *)this + 3159))
      goto LABEL_93;
LABEL_79:
    v99 = 0;
    v100 = 0;
    v101 = 0;
    kaldi::SplitStringToVector((const std::string *)((char *)this + 3136), ",", 1, (uint64_t)&v99);
    if (0xAAAAAAAAAAAAAAABLL * ((v100 - (uint64_t)v99) >> 3) >= 2)
    {
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"classnnlm file list can only support one neural net ", 52);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    v44 = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
    v102[0] = &off_1E5D3E850;
    v102[1] = this;
    v103 = v102;
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::loadMasterLmOrCreatePlaceholder((uint64_t)this + 3136, (uint64_t)__p, v44, (uint64_t)v102, &v97);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 3296, &v97);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
    if (*((_QWORD *)&v97 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v103;
    if (v103 == v102)
    {
      v49 = 4;
      v48 = v102;
    }
    else
    {
      if (!v103)
      {
LABEL_90:
        if (SBYTE7(v76) < 0)
          operator delete(__p[0]);
        __p[0] = &v99;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        goto LABEL_93;
      }
      v49 = 5;
    }
    (*(void (**)(void))(*v48 + 8 * v49))();
    goto LABEL_90;
  }
  if (*((_QWORD *)this + 393))
    goto LABEL_79;
LABEL_93:
  v50 = (int *)((char *)this + 3320);
  v51 = (int *)((char *)this + 3324);
  v52 = (int *)((char *)this + 3328);
  v53 = (int *)((char *)this + 3332);
  *(_OWORD *)((char *)this + 3320) = 0u;
  v54 = 1;
  do
  {
    while (1)
    {
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 272), v73);
      std::string::basic_string[abi:ne180100]<0>(__p, "/");
      if (quasar::startsWith((unsigned __int8 *)v73, (unsigned __int8 *)__p))
      {
        std::string::basic_string[abi:ne180100]<0>(&v99, "_S/");
        if (quasar::endsWith((uint64_t *)v73, (uint64_t *)&v99))
        {
          v55 = 1;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v97, "_B/");
          if (quasar::endsWith((uint64_t *)v73, (uint64_t *)&v97))
          {
            v55 = 1;
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v95, "_I/");
            if (quasar::endsWith((uint64_t *)v73, (uint64_t *)v95))
            {
              v55 = 1;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v93, "_E/");
              v55 = quasar::endsWith((uint64_t *)v73, (uint64_t *)v93);
              if (v94 < 0)
                operator delete(v93[0]);
            }
            if (v96 < 0)
              operator delete(v95[0]);
          }
          if (SHIBYTE(v98) < 0)
            operator delete((void *)v97);
        }
        if (SHIBYTE(v101) < 0)
          operator delete(v99);
      }
      else
      {
        v55 = 0;
      }
      if (SBYTE7(v76) < 0)
      {
        operator delete(__p[0]);
        if (v55)
        {
LABEL_112:
          v56 = (char *)this + 3320;
          v57 = (char *)this + 3324;
          if (!*v50)
            goto LABEL_113;
          goto LABEL_114;
        }
      }
      else if (v55)
      {
        goto LABEL_112;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "/WORD-DIS-");
      if (quasar::startsWith((unsigned __int8 *)v73, (unsigned __int8 *)__p))
      {
        std::string::basic_string[abi:ne180100]<0>(&v99, "/");
        v58 = quasar::endsWith((uint64_t *)v73, (uint64_t *)&v99);
        if (SHIBYTE(v101) < 0)
          operator delete(v99);
      }
      else
      {
        v58 = 0;
      }
      if (SBYTE7(v76) < 0)
      {
        operator delete(__p[0]);
        if (!v58)
          goto LABEL_125;
LABEL_122:
        v56 = (char *)this + 3328;
        v57 = (char *)this + 3332;
        if (!*v52)
LABEL_113:
          *(_DWORD *)v56 = v54;
LABEL_114:
        *(_DWORD *)v57 = v54++;
        LOBYTE(v58) = 1;
        goto LABEL_125;
      }
      if (v58)
        goto LABEL_122;
LABEL_125:
      if (v74 < 0)
        break;
      if (!v58)
        goto LABEL_129;
    }
    operator delete(v73[0]);
  }
  while (v58);
LABEL_129:
  v59 = *((_DWORD *)this + 830);
  if (*((float *)this + 128) == 3.4028e38)
    goto LABEL_135;
  if (v59 != 1)
  {
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Expected range start to be symbol id ", 37);
    v72 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" and a phone word: ", 19);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v60 = *v53;
  if (*v53 != v54 - 1)
  {
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Expected range end to be a disambiguation symbol: ", 50);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (!*((_BYTE *)this + 2885))
  {
    *((_DWORD *)this + 129) = 1;
    *((_DWORD *)this + 130) = v60;
    if (quasar::gLogLevel >= 4)
    {
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Disabling small LM pruning for symbols [", 40);
      v61 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)",", 1);
      v62 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"]", 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      v59 = *v50;
LABEL_135:
      if (v59 != 1)
        goto LABEL_140;
    }
  }
  if (*v51 < 1 || *v51 >= *v52 || *v52 > *v53 || *v53 != v54 - 1)
  {
LABEL_140:
    *(_QWORD *)v50 = 0;
    *((_QWORD *)this + 416) = 0;
  }
  if (quasar::gLogLevel >= 4)
  {
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"lmePhoneWordSymStart ", 21);
    v63 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" lmePhoneWordSymEnd ", 20);
    v64 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" lmeDisambigSymStart ", 21);
    v65 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" lmeDisambigSymEnd ", 19);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  quasar::OnlineLatticeBiglmLmeFasterDecoder::findClassLmSymbols(this, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__move_assign((uint64_t)this + 3208, (uint64_t *)__p);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__p);
  __p[0] = &v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADEF450C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADEF461CLL);
}

void sub_1ADEF452C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v14 = *(_QWORD **)(v13 - 112);
  if (v14 == (_QWORD *)(v13 - 136))
  {
    v15 = 4;
    v14 = (_QWORD *)(v13 - 136);
  }
  else
  {
    if (!v14)
    {
LABEL_6:
      a13 = (void **)(v13 - 216);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
      a13 = (void **)(v13 - 192);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
      JUMPOUT(0x1ADEF460CLL);
    }
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  goto LABEL_6;
}

void sub_1ADEF45B8()
{
  JUMPOUT(0x1ADEF4610);
}

void sub_1ADEF45C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  JUMPOUT(0x1ADEF460CLL);
}

void sub_1ADEF4608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  *(_QWORD *)(v47 - 192) = &a47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 192));
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::findClassLmSymbols(quasar::OnlineLatticeBiglmLmeFasterDecoder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  __int128 *v6;
  __int128 v7;
  float v8;
  std::string::size_type size;
  void *v10;
  std::string *v11;
  std::string::size_type v12;
  void *v13;
  std::string *v14;
  int v15;
  void *v16;
  void *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  void *v23;
  int v24;
  int v25;
  void *v26;
  void *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;
  void *v33;
  int v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  char *v42;
  void *v43;
  unint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  int v48;
  int v49;
  void *v51;
  int v52;
  uint64_t v53;
  int v54;
  char *v55;
  void *v56;
  unint64_t v57;
  int v58;
  char *v59;
  uint64_t v60;
  int v61;
  int v62;
  void *v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  std::string::size_type v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  int v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  char *v89;
  int v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  std::string v104;
  void *__p[2];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _DWORD *v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _DWORD *v128[3];

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 3088), ",", 1, (uint64_t)&v125);
  kaldi::SplitStringToFloats<float>((uint64_t)this + 3112, ",", 1, &v122);
  if (v123 == (_BYTE *)v122)
  {
    v3 = v125;
    v4 = v126;
  }
  else
  {
    v3 = v125;
    v4 = v126;
    if (0xAAAAAAAAAAAAAAABLL * ((v126 - v125) >> 3) != (v123 - (_BYTE *)v122) >> 2)
    {
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not match classLM scale number", 36);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
  }
  if (v4 != v3)
  {
    for (i = 0; 0xAAAAAAAAAAAAAAABLL * ((v126 - v125) >> 3) > i; ++i)
    {
      v6 = (__int128 *)(v3 + 24 * i);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v7 = *v6;
        v104.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v7;
      }
      v103 = 0;
      v103 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 272), (uint64_t)&v104);
      if (v123 == (_BYTE *)v122)
        v8 = 1.0;
      else
        v8 = *(float *)&v122[i];
      v100 = &v103;
      *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 409, &v103, (uint64_t)&std::piecewise_construct, (unsigned int **)&v100)+ 8) = v8;
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      else
        size = v104.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v100, size + 6);
      if (v102 >= 0)
        v10 = &v100;
      else
        v10 = v100;
      if (size)
      {
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &v104;
        else
          v11 = (std::string *)v104.__r_.__value_.__r.__words[0];
        memmove(v10, v11, size);
      }
      strcpy((char *)v10 + size, "-start");
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      else
        v12 = v104.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v97, v12 + 4);
      if (v99 >= 0)
        v13 = &v97;
      else
        v13 = v97;
      if (v12)
      {
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v104;
        else
          v14 = (std::string *)v104.__r_.__value_.__r.__words[0];
        memmove(v13, v14, v12);
      }
      strcpy((char *)v13 + v12, "-end");
      v15 = v103 + 1;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 272), __p);
      if ((SBYTE7(v106) & 0x80u) == 0)
        v16 = (void *)BYTE7(v106);
      else
        v16 = __p[1];
      v17 = (void *)HIBYTE(v99);
      if (v99 < 0)
        v17 = (void *)v98;
      if (v16 == v17)
      {
        if (v99 >= 0)
          v18 = (unsigned __int8 *)&v97;
        else
          v18 = (unsigned __int8 *)v97;
        if ((BYTE7(v106) & 0x80) != 0)
        {
          v23 = __p[0];
          v24 = memcmp(__p[0], v18, (size_t)__p[1]);
          operator delete(v23);
          if (!v24)
            goto LABEL_58;
        }
        else
        {
          if (!BYTE7(v106))
            goto LABEL_58;
          v19 = 0;
          do
          {
            v20 = *((unsigned __int8 *)__p + v19);
            v21 = v18[v19];
          }
          while (v20 == v21 && BYTE7(v106) - 1 != v19++);
          if (v20 == v21)
            goto LABEL_58;
        }
      }
      else if ((BYTE7(v106) & 0x80) != 0)
      {
        operator delete(__p[0]);
      }
      v15 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 272), (uint64_t)&v97);
      if (v15 == -1)
      {
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v116 = 0u;
        v117 = 0u;
        v114 = 0u;
        v115 = 0u;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v108 = 0u;
        v109 = 0u;
        v106 = 0u;
        v107 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
        if (v99 >= 0)
          v69 = &v97;
        else
          v69 = v97;
        if (v99 >= 0)
          v70 = HIBYTE(v99);
        else
          v70 = v98;
        v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
LABEL_58:
      v25 = v103 + 2;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 272), __p);
      if ((SBYTE7(v106) & 0x80u) == 0)
        v26 = (void *)BYTE7(v106);
      else
        v26 = __p[1];
      v27 = (void *)HIBYTE(v102);
      if (v102 < 0)
        v27 = (void *)v101;
      if (v26 != v27)
      {
        if ((BYTE7(v106) & 0x80) != 0)
          operator delete(__p[0]);
LABEL_80:
        v25 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 272), (uint64_t)&v100);
        if (v25 == -1)
        {
          v120 = 0u;
          v121 = 0u;
          v118 = 0u;
          v119 = 0u;
          v116 = 0u;
          v117 = 0u;
          v114 = 0u;
          v115 = 0u;
          v112 = 0u;
          v113 = 0u;
          v110 = 0u;
          v111 = 0u;
          v108 = 0u;
          v109 = 0u;
          v106 = 0u;
          v107 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
          if (v102 >= 0)
            v73 = &v100;
          else
            v73 = v100;
          if (v102 >= 0)
            v74 = HIBYTE(v102);
          else
            v74 = v101;
          v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"\" in base symbol table", 22);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        goto LABEL_81;
      }
      if (v102 >= 0)
        v28 = (unsigned __int8 *)&v100;
      else
        v28 = (unsigned __int8 *)v100;
      if ((BYTE7(v106) & 0x80) != 0)
      {
        v33 = __p[0];
        v34 = memcmp(__p[0], v28, (size_t)__p[1]);
        operator delete(v33);
        if (v34)
          goto LABEL_80;
      }
      else if (BYTE7(v106))
      {
        v29 = 0;
        do
        {
          v30 = *((unsigned __int8 *)__p + v29);
          v31 = v28[v29];
        }
        while (v30 == v31 && BYTE7(v106) - 1 != v29++);
        if (v30 != v31)
          goto LABEL_80;
      }
LABEL_81:
      v128[0] = &v103;
      v35 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a2, &v103, (uint64_t)&std::piecewise_construct, v128);
      *((_DWORD *)v35 + 5) = v25;
      *((_DWORD *)v35 + 6) = v15;
      if (SHIBYTE(v99) < 0)
        operator delete(v97);
      if (SHIBYTE(v102) < 0)
        operator delete(v100);
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
      v3 = v125;
    }
  }
  if (*((char *)this + 3087) < 0)
  {
    if (!*((_QWORD *)this + 384))
      goto LABEL_155;
  }
  else if (!*((_BYTE *)this + 3087))
  {
    goto LABEL_155;
  }
  if (*((char *)this + 3183) < 0)
  {
    if (!*((_QWORD *)this + 396))
      goto LABEL_155;
  }
  else if (!*((_BYTE *)this + 3183))
  {
    goto LABEL_155;
  }
  if (*((char *)this + 3207) < 0)
  {
    if (!*((_QWORD *)this + 399))
      goto LABEL_155;
    goto LABEL_100;
  }
  if (*((_BYTE *)this + 3207))
  {
LABEL_100:
    memset(&v104, 0, sizeof(v104));
    v100 = 0;
    v101 = 0;
    v102 = 0;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    kaldi::SplitStringToVector((const std::string *)((char *)this + 3064), ",", 1, (uint64_t)&v104);
    kaldi::SplitStringToVector((const std::string *)((char *)this + 3160), ",", 1, (uint64_t)&v100);
    kaldi::SplitStringToVector((const std::string *)((char *)this + 3184), ",", 1, (uint64_t)&v97);
    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v101 - (uint64_t)v100) >> 3) != v36
      || 0xAAAAAAAAAAAAAAABLL * ((v98 - (uint64_t)v97) >> 3) != v36)
    {
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)" Expected number of classLM symbols for base/start/end match: ", 62);
      v94 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)" ", 1);
      v95 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)" ", 1);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (v104.__r_.__value_.__l.__size_ == v104.__r_.__value_.__r.__words[0])
    {
LABEL_154:
      __p[0] = &v97;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v100;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v104;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      goto LABEL_155;
    }
    v37 = 0;
    if (v36 <= 1)
      v38 = 1;
    else
      v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]) >> 3);
    while (1)
    {
      v39 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 272), v104.__r_.__value_.__r.__words[0] + 24 * v37);
      v40 = v39;
      if (v39 == -1)
      {
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v116 = 0u;
        v117 = 0u;
        v114 = 0u;
        v115 = 0u;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v108 = 0u;
        v109 = 0u;
        v106 = 0u;
        v107 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
        v77 = v104.__r_.__value_.__r.__words[0] + 24 * v37;
        v78 = *(char *)(v77 + 23);
        if (v78 >= 0)
          v79 = v104.__r_.__value_.__r.__words[0] + 24 * v37;
        else
          v79 = *(_QWORD *)v77;
        if (v78 >= 0)
          v80 = *(unsigned __int8 *)(v77 + 23);
        else
          v80 = *(_QWORD *)(v77 + 8);
        v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, v79, v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      v41 = v39 + 1;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 272), __p);
      v42 = (char *)v97 + 24 * v37;
      if ((SBYTE7(v106) & 0x80u) == 0)
        v43 = (void *)BYTE7(v106);
      else
        v43 = __p[1];
      v44 = v42[23];
      v45 = (char)v44;
      if ((v44 & 0x80u) != 0)
        v44 = *((_QWORD *)v42 + 1);
      if (v43 == (void *)v44)
      {
        if (v45 >= 0)
          v46 = (char *)v97 + 24 * v37;
        else
          v46 = *(char **)v42;
        if ((BYTE7(v106) & 0x80) != 0)
        {
          v51 = __p[0];
          v52 = memcmp(__p[0], v46, (size_t)__p[1]);
          operator delete(v51);
          if (!v52)
            goto LABEL_130;
        }
        else
        {
          if (!BYTE7(v106))
            goto LABEL_130;
          v47 = 0;
          do
          {
            v48 = *((unsigned __int8 *)__p + v47);
            v49 = v46[v47];
          }
          while (v48 == v49 && BYTE7(v106) - 1 != v47++);
          if (v48 == v49)
            goto LABEL_130;
        }
      }
      else if ((BYTE7(v106) & 0x80) != 0)
      {
        operator delete(__p[0]);
      }
      v53 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 272), (uint64_t)v97 + 24 * v37);
      v41 = v53;
      if (v53 == -1)
      {
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v116 = 0u;
        v117 = 0u;
        v114 = 0u;
        v115 = 0u;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v108 = 0u;
        v109 = 0u;
        v106 = 0u;
        v107 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
        v83 = (char *)v97 + 24 * v37;
        v84 = v83[23];
        if (v84 >= 0)
          v85 = (char *)v97 + 24 * v37;
        else
          v85 = *(char **)v83;
        if (v84 >= 0)
          v86 = v83[23];
        else
          v86 = *((_QWORD *)v83 + 1);
        v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v85, v86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
LABEL_130:
      v54 = v40 + 2;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 272), __p);
      v55 = (char *)v100 + 24 * v37;
      if ((SBYTE7(v106) & 0x80u) == 0)
        v56 = (void *)BYTE7(v106);
      else
        v56 = __p[1];
      v57 = v55[23];
      v58 = (char)v57;
      if ((v57 & 0x80u) != 0)
        v57 = *((_QWORD *)v55 + 1);
      if (v56 != (void *)v57)
      {
        if ((BYTE7(v106) & 0x80) != 0)
          operator delete(__p[0]);
LABEL_152:
        v66 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 272), (uint64_t)v100 + 24 * v37);
        v54 = v66;
        if (v66 == -1)
        {
          v120 = 0u;
          v121 = 0u;
          v118 = 0u;
          v119 = 0u;
          v116 = 0u;
          v117 = 0u;
          v114 = 0u;
          v115 = 0u;
          v112 = 0u;
          v113 = 0u;
          v110 = 0u;
          v111 = 0u;
          v108 = 0u;
          v109 = 0u;
          v106 = 0u;
          v107 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
          v89 = (char *)v100 + 24 * v37;
          v90 = v89[23];
          if (v90 >= 0)
            v91 = (char *)v100 + 24 * v37;
          else
            v91 = *(char **)v89;
          if (v90 >= 0)
            v92 = v89[23];
          else
            v92 = *((_QWORD *)v89 + 1);
          v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v91, v92);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\" in base symbol table", 22);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        goto LABEL_153;
      }
      if (v58 >= 0)
        v59 = (char *)v100 + 24 * v37;
      else
        v59 = *(char **)v55;
      if ((BYTE7(v106) & 0x80) != 0)
      {
        v64 = __p[0];
        v65 = memcmp(__p[0], v59, (size_t)__p[1]);
        operator delete(v64);
        if (v65)
          goto LABEL_152;
      }
      else if (BYTE7(v106))
      {
        v60 = 0;
        do
        {
          v61 = *((unsigned __int8 *)__p + v60);
          v62 = v59[v60];
        }
        while (v61 == v62 && BYTE7(v106) - 1 != v60++);
        if (v61 != v62)
          goto LABEL_152;
      }
LABEL_153:
      LODWORD(__p[0]) = v40;
      v128[0] = __p;
      v67 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a2, (int *)__p, (uint64_t)&std::piecewise_construct, v128);
      *((_DWORD *)v67 + 5) = v54;
      *((_DWORD *)v67 + 6) = v41;
      if (++v37 == v38)
        goto LABEL_154;
    }
  }
LABEL_155:
  if (v122)
  {
    v123 = v122;
    operator delete(v122);
  }
  __p[0] = &v125;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADEF5234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void *v30;
  uint64_t v31;
  void **v32;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  v30 = *(void **)(v28 - 176);
  if (v30)
  {
    *(_QWORD *)(v28 - 168) = v30;
    operator delete(v30);
  }
  v32 = (void **)(v28 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v31);
  _Unwind_Resume(a1);
}

uint64_t **quasar::OnlineLatticeBiglmLmeFasterDecoder::setUpDecoderPassData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **result;

  quasar::OnlineLatticeBiglmFasterDecoder::setUpDecoderPassData(a1, a2, a3);
  if (a2 + 408 != a1 + 3208)
  {
    *(_DWORD *)(a2 + 440) = *(_DWORD *)(a1 + 3240);
    std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<int,std::pair<int,int>>,void *> *>>((_QWORD *)(a2 + 408), *(_QWORD **)(a1 + 3224), 0);
  }
  result = (uint64_t **)(a2 + 368);
  if (a2 + 368 != a1 + 3272)
    return std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,float>,std::__tree_node<std::__value_type<int,float>,void *> *,long>>(result, *(_QWORD **)(a1 + 3272), (_QWORD *)(a1 + 3280));
  return result;
}

uint64_t quasar::OnlineLatticeBiglmLmeFasterDecoder::setUpDecoding(kaldi::quasar::Vocab *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *i;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *j;
  _QWORD *v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *size;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  clockid_t v54;
  double v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::string *v60;
  __int128 v61;
  uint64_t v63;
  uint64_t *v64;
  _QWORD **v65;
  uint64_t v66;
  std::string v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::string v70;
  void *__p[2];
  char v72;
  void *v73;
  std::__shared_weak_count *v74;
  void *v75[2];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;

  (*(void (**)(kaldi::quasar::Vocab *))(*(_QWORD *)a1 + 240))(a1);
  v66 = a2;
  (*(void (**)(kaldi::quasar::Vocab *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 224))(a1, a2, a4);
  if (quasar::gLogLevel >= 4)
  {
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v77 = 0u;
    *(_OWORD *)v75 = 0u;
    v76 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"split lme tokens: ", 18);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v75);
  }
  *(_BYTE *)(*(_QWORD *)a3 + 1088) = *((_BYTE *)a1 + 2886);
  v8 = (char *)operator new(0x48uLL);
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &unk_1E5D420C8;
  *((_QWORD *)v8 + 1) = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  v75[1] = v8;
  *(_OWORD *)(v8 + 24) = 0u;
  v75[0] = v8 + 24;
  v65 = (_QWORD **)((char *)a1 + 2408);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a1 + 2408, (__int128 *)v75);
  v9 = (std::__shared_weak_count *)v75[1];
  if (v75[1])
  {
    v10 = (unint64_t *)((char *)v75[1] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v63 = a3;
  v64 = a4;
  v12 = (uint64_t *)*((_QWORD *)a1 + 278);
  for (i = (uint64_t *)*((_QWORD *)a1 + 279); v12 != i; v12 += 2)
  {
    v14 = *v65;
    v15 = *(_DWORD *)(v66 + 448);
    v16 = *v12;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v16, (uint64_t)__p, &v73);
    LODWORD(v75[0]) = v15;
    v75[1] = v73;
    *(_QWORD *)&v76 = v74;
    if (v74)
    {
      p_shared_owners = (unint64_t *)&v74->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    DWORD2(v76) = -1;
    v19 = (uint64_t *)*((_QWORD *)a1 + 365);
    v20 = *((_DWORD *)a1 + 720);
    v21 = *(_QWORD *)(v66 + 216);
    if (v21)
    {
      std::set<int>::set[abi:ne180100]((uint64_t *)&v70, v21 + 32);
    }
    else
    {
      *(_OWORD *)&v70.__r_.__value_.__r.__words[1] = 0uLL;
      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70.__r_.__value_.__l.__size_;
    }
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(v14, (unsigned int *)v75, v19, 0, 0, v20, 0x20000uLL, (uint64_t)&v70);
    std::__tree<int>::destroy((uint64_t)&v70, (_QWORD *)v70.__r_.__value_.__l.__size_);
    v22 = (std::__shared_weak_count *)v76;
    if ((_QWORD)v76)
    {
      v23 = (unint64_t *)(v76 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v74;
    if (v74)
    {
      v26 = (unint64_t *)&v74->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v72 < 0)
      operator delete(__p[0]);
  }
  v28 = (uint64_t *)*((_QWORD *)a1 + 284);
  for (j = (uint64_t *)*((_QWORD *)a1 + 285); v28 != j; v28 += 2)
  {
    v30 = *v65;
    v31 = *v28;
    std::string::basic_string[abi:ne180100]<0>(v75, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v31, (uint64_t)v75, &v70);
    v32 = (const void *)v70.__r_.__value_.__r.__words[0];
    v33 = *((_QWORD *)a1 + 365);
    v34 = *(_QWORD *)(v33 + 48);
    if (v34)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v34, (uint64_t)__p, &v68);
      v35 = v68;
    }
    else
    {
      v35 = 0;
    }
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(v30, v32, (unsigned int **)v33, (_QWORD *)(v66 + 408), (__int32 **)(v33 + 24), (uint64_t)a1 + 3272, v35, 0, *((float *)a1 + 576), 0, 0x20000uLL, (uint64_t)a1 + 2976);
    if (v34)
    {
      v36 = v69;
      if (v69)
      {
        v37 = (unint64_t *)&v69->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (v72 < 0)
        operator delete(__p[0]);
    }
    size = (std::__shared_weak_count *)v70.__r_.__value_.__l.__size_;
    if (v70.__r_.__value_.__l.__size_)
    {
      v40 = (unint64_t *)(v70.__r_.__value_.__l.__size_ + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (SBYTE7(v76) < 0)
      operator delete(v75[0]);
  }
  v42 = v64;
  v43 = *v64;
  if (*((float *)a1 + 574) > 0.0)
  {
    v44 = *(_QWORD *)(v43 + 24);
    v45 = *(uint64_t **)(v44 + 272);
    v46 = *(uint64_t **)(v44 + 280);
    if (v45 != v46)
    {
      do
      {
        v47 = *v45;
        v48 = *((_QWORD *)a1 + 301);
        v49 = *((_QWORD *)a1 + 365);
        v50 = *(unsigned int *)(v66 + 448);
        v51 = *((unsigned int *)a1 + 720);
        v52 = *(_QWORD *)(v66 + 216);
        if (v52)
        {
          std::set<int>::set[abi:ne180100]((uint64_t *)v75, v52 + 32);
        }
        else
        {
          v75[1] = 0;
          *(_QWORD *)&v76 = 0;
          v75[0] = &v75[1];
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v48, v49, v50, 0, 0, v51, v75, v66 + 408, 0x20000);
        std::__tree<int>::destroy((uint64_t)v75, (_QWORD *)v75[1]);
        v45 += 2;
      }
      while (v45 != v46);
      v42 = v64;
      v43 = *v64;
    }
  }
  quasar::SpeechRequestData::getRecogRequestTimer(v43, v75);
  v53 = (double *)v75[0];
  v55 = (kaldi::Timer::GetSeconds((kaldi::Timer *)5, v54) - *v53 - *((double *)a1 + 414)) * 1000.0;
  v56 = (std::__shared_weak_count *)v75[1];
  if (v75[1])
  {
    v57 = (unint64_t *)((char *)v75[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = *(_QWORD *)(*(_QWORD *)v63 + 424);
  *(double *)(v59 + 16) = v55 + *(double *)(v59 + 16);
  kaldi::quasar::Vocab::OOvWord(a1, &v70);
  v60 = std::string::append(&v70, ":lmeLoadingTime");
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  *(_QWORD *)&v76 = *((_QWORD *)&v60->__r_.__value_.__l + 2);
  *(_OWORD *)v75 = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v67, v55);
  quasar::SpeechRequestResultData::addDump(v59, (__int128 *)v75, &v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SBYTE7(v76) < 0)
    operator delete(v75[0]);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  return (*(uint64_t (**)(kaldi::quasar::Vocab *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 192))(a1, v66, v63, v42);
}

void sub_1ADEF594C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a21 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::loadLmeData(std::string::size_type a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  uint64_t *v4;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  double *v21;
  clockid_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *LmeDataStreams;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  int v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  BOOL v87;
  int v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  clockid_t v100;
  __n128 v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  __int128 *v106;
  uint64_t *v107;
  uint64_t *v108;
  __int128 v109;
  std::__shared_weak_count *size;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  _QWORD *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  __int128 v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  clockid_t v133;
  __n128 v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  std::string::size_type v157;
  int *v158;
  std::__shared_weak_count *v159;
  int v160;
  __int128 v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  __int128 v164[2];
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  uint64_t v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  std::string v185;
  __int128 v186;
  __int128 v187;
  uint64_t *v188;
  _QWORD *v189[2];
  __int128 v190;
  __int128 v191;
  int v192;
  unint64_t v193;
  std::__shared_weak_count *v194;

  v4 = (uint64_t *)a4;
  v7 = a1;
  if (*(_BYTE *)(a1 + 2884) && (quasar::SpeechRequestData::isLoadLmeProfile(*a4) & 1) == 0)
  {
    v147 = *(_QWORD *)(v7 + 2920);
    if (a2 + 320 != v147)
    {
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__assign_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(a2 + 320, *(_QWORD *)v147, *(_QWORD *)(v147 + 8), (uint64_t)(*(_QWORD *)(v147 + 8) - *(_QWORD *)v147) >> 5);
      v147 = *(_QWORD *)(v7 + 2920);
    }
    std::allocate_shared[abi:ne180100]<quasar::SymbolTableList,std::allocator<quasar::SymbolTableList>,quasar::SymbolTableList&,void>(*(uint64_t **)(v147 + 88), v164);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 472, v164);
    v148 = (std::__shared_weak_count *)*((_QWORD *)&v164[0] + 1);
    if (*((_QWORD *)&v164[0] + 1))
    {
      v149 = (unint64_t *)(*((_QWORD *)&v164[0] + 1) + 8);
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    v151 = *(_QWORD *)(v7 + 2920);
    v152 = (uint64_t *)(*a3 + 584);
    if (v152 != (uint64_t *)(v151 + 64))
      std::vector<quasar::LmeInfo>::__assign_with_size[abi:ne180100]<quasar::LmeInfo*,quasar::LmeInfo*>(v152, *(__int128 **)(v151 + 64), *(__int128 **)(v151 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v151 + 72) - *(_QWORD *)(v151 + 64)) >> 3));
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 320);
    v8 = *(_QWORD *)(a2 + 328);
    if (v8 != v9)
    {
      do
      {
        v10 = v8 - 32;
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v8 - 24);
        v8 = v10;
      }
      while (v10 != v9);
    }
    *(_QWORD *)(a2 + 328) = v9;
    *(_QWORD *)(a2 + 352) = *(_QWORD *)(a2 + 344);
    std::__tree<int>::destroy(a2 + 368, *(_QWORD **)(a2 + 376));
    *(_QWORD *)(a2 + 376) = 0;
    *(_QWORD *)(a2 + 384) = 0;
    *(_QWORD *)(a2 + 368) = a2 + 376;
    v164[0] = 0uLL;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a2 + 392, v164);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v164[0] + 1);
    if (*((_QWORD *)&v164[0] + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v164[0] + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    std::vector<quasar::LmeInfo>::__clear[abi:ne180100]((uint64_t *)(*a3 + 584));
    quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(*a3 + 472));
    v14 = *(uint64_t **)(*a3 + 472);
    v15 = *(std::__shared_weak_count **)(v7 + 2184);
    v193 = *(_QWORD *)(v7 + 2176);
    v194 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    quasar::SymbolTableList::addSymbolTable(v14, &v193, 0, -1);
    v18 = v194;
    if (v194)
    {
      v19 = (unint64_t *)&v194->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (*(_BYTE *)(v7 + 2884))
    {
      quasar::SpeechRequestData::getRecogRequestTimer(*v4, v164);
      v21 = *(double **)&v164[0];
      *(double *)(v7 + 3312) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v22) - *v21;
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v164[0] + 1);
      if (*((_QWORD *)&v164[0] + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v164[0] + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v153 = (_QWORD *)(a2 + 392);
      v154 = a2;
      v190 = 0u;
      v191 = 0u;
      v192 = 1065353216;
      v189[0] = 0;
      v189[1] = 0;
      v188 = (uint64_t *)v189;
      v155 = a3;
      if (*(_BYTE *)(v7 + 2884))
      {
        v26 = 0;
        v27 = (_QWORD *)(v7 + 2936);
        v157 = v7;
        v156 = v4;
        do
        {
          LmeDataStreams = (_QWORD *)quasar::SpeechRequestData::getLmeDataStreams((quasar::SpeechRequestData *)*v4);
          if (v26 >= (uint64_t)(LmeDataStreams[1] - *LmeDataStreams) >> 4)
            break;
          v29 = *(_OWORD *)(*(_QWORD *)quasar::SpeechRequestData::getLmeDataStreams((quasar::SpeechRequestData *)*v4)
                          + 16 * v26);
          v187 = v29;
          v30 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
          if (*((_QWORD *)&v29 + 1))
          {
            v31 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
            v186 = v29;
            do
              v33 = __ldxr(v31);
            while (__stxr(v33 + 1, v31));
          }
          else
          {
            v186 = (unint64_t)v29;
          }
          v34 = quasar::OnlineLatticeBiglmLmeFasterDecoder::readAndCheckLmeData(v7, (uint64_t **)&v186, v26, *(unsigned __int8 *)(*(_QWORD *)(*v4 + 24) + 737));
          if (v30)
          {
            v35 = (unint64_t *)&v30->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          memset(&v185, 0, sizeof(v185));
          v37 = v187;
          if ((v34 & 0xFFFFFFFD) != 1)
          {
            v45 = *a3;
            LODWORD(v164[0]) = *(_DWORD *)(v187 + 40);
            *(_QWORD *)((char *)v164 + 4) = v34;
            goto LABEL_120;
          }
          v39 = *(_QWORD **)v187;
          v38 = *(std::__shared_weak_count **)(v187 + 8);
          v183 = *(_QWORD *)v187;
          v184 = v38;
          if (v38)
          {
            v40 = (unint64_t *)&v38->__shared_owners_;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
          }
          std::string::operator=(&v185, (const std::string *)(v37 + 16));
          v182 = 0;
          LODWORD(v180) = v39[20];
          *(_QWORD *)&v164[0] = &v180;
          v182 = *((int *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v188, (int *)&v180, (uint64_t)&std::piecewise_construct, (unsigned int **)v164)+ 8);
          v43 = v39[20];
          v42 = v39[21];
          LODWORD(v180) = v43;
          *(_QWORD *)&v164[0] = &v180;
          v44 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v188, (int *)&v180, (uint64_t)&std::piecewise_construct, (unsigned int **)v164);
          *((_DWORD *)v44 + 8) += v42 - v43 + 1;
          if (v182)
          {
            std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<quasar::QsrTextSymbolTable> const&,long long &,void>(v39 + 28, &v182, &v180);
          }
          else
          {
            v46 = (std::__shared_weak_count *)v39[29];
            v180 = v39[28];
            v181 = v46;
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
          }
          if (quasar::gLogLevel >= 4)
          {
            v178 = 0u;
            v179 = 0u;
            v176 = 0u;
            v177 = 0u;
            v174 = 0u;
            v175 = 0u;
            v172 = 0u;
            v173 = 0u;
            v170 = 0u;
            v171 = 0u;
            v168 = 0u;
            v169 = 0u;
            v166 = 0u;
            v167 = 0u;
            v165 = 0u;
            memset(v164, 0, sizeof(v164));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"LME container ", 14);
            v49 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)": offset ", 9);
            v50 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" firstKey ", 10);
            v51 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" lastKey ", 9);
            std::ostream::operator<<();
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v164);
          }
          v52 = *(uint64_t **)(*a3 + 472);
          v162 = v180;
          v163 = v181;
          if (v181)
          {
            v53 = (unint64_t *)&v181->__shared_owners_;
            do
              v54 = __ldxr(v53);
            while (__stxr(v54 + 1, v53));
          }
          v55 = quasar::SymbolTableList::addSymbolTable(v52, &v162, v182 + v39[20], v26);
          v56 = v55;
          v57 = v163;
          if (!v163)
            goto LABEL_58;
          v58 = (unint64_t *)&v163->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
            if (v56)
            {
LABEL_59:
              v60 = *(unsigned __int8 **)(v183 + 200);
              v61 = (unsigned __int8 *)(v183 + 208);
              if (v60 != (unsigned __int8 *)(v183 + 208))
              {
                v62 = 0;
                while (1)
                {
                  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v27, v60 + 32))
                  {
                    v63 = *((_QWORD *)v60 + 7);
                    if (v63)
                    {
                      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63) & 0x80000000) == 0)
                      {
                        v64 = *((_QWORD *)v60 + 7);
                        v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64);
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 40))(v64, v65))
                        {
                          *(_QWORD *)&v164[0] = v60 + 32;
                          v66 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v190, v60 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)v164);
                          v67 = v182;
                          if (v182)
                          {
                            v68 = *((_QWORD *)v60 + 7);
                            v160 = v182;
                            std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::quasar::OffsetOutputLabelMapper,void>(v68, &v160, &v161);
                            v164[0] = v161;
                            v161 = 0uLL;
                          }
                          else
                          {
                            v76 = *((_QWORD *)v60 + 8);
                            *(_QWORD *)&v164[0] = *((_QWORD *)v60 + 7);
                            *((_QWORD *)&v164[0] + 1) = v76;
                            if (v76)
                            {
                              v77 = (unint64_t *)(v76 + 8);
                              do
                                v78 = __ldxr(v77);
                              while (__stxr(v78 + 1, v77));
                            }
                          }
                          std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)v66 + 5, v164);
                          v79 = (std::__shared_weak_count *)*((_QWORD *)&v164[0] + 1);
                          if (!*((_QWORD *)&v164[0] + 1))
                            goto LABEL_89;
                          v80 = (unint64_t *)(*((_QWORD *)&v164[0] + 1) + 8);
                          do
                            v81 = __ldaxr(v80);
                          while (__stlxr(v81 - 1, v80));
                          if (!v81)
                          {
                            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                            std::__shared_weak_count::__release_weak(v79);
                            if (v67)
                            {
LABEL_90:
                              v82 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
                              if (*((_QWORD *)&v161 + 1))
                              {
                                v83 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
                                do
                                  v84 = __ldaxr(v83);
                                while (__stlxr(v84 - 1, v83));
                                if (!v84)
                                {
                                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                  std::__shared_weak_count::__release_weak(v82);
                                }
                              }
                            }
                          }
                          else
                          {
LABEL_89:
                            if (v67)
                              goto LABEL_90;
                          }
                          v62 = 1;
                          goto LABEL_97;
                        }
                      }
                    }
                    if (quasar::gLogLevel >= 4)
                    {
                      v178 = 0u;
                      v179 = 0u;
                      v176 = 0u;
                      v177 = 0u;
                      v174 = 0u;
                      v175 = 0u;
                      v172 = 0u;
                      v173 = 0u;
                      v170 = 0u;
                      v171 = 0u;
                      v168 = 0u;
                      v169 = 0u;
                      v166 = 0u;
                      v167 = 0u;
                      v165 = 0u;
                      memset(v164, 0, sizeof(v164));
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
                      v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"Ignoring null or arc-less FST for template ", 43);
                      v70 = (char)v60[55];
                      if (v70 >= 0)
                        v71 = (uint64_t)(v60 + 32);
                      else
                        v71 = *((_QWORD *)v60 + 4);
                      if (v70 >= 0)
                        v72 = v60[55];
                      else
                        v72 = *((_QWORD *)v60 + 5);
LABEL_81:
                      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v71, v72);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" in stream # ", 13);
                      v75 = (_QWORD *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)".", 1);
                      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v164);
                    }
                  }
                  else if (quasar::gLogLevel >= 4)
                  {
                    v178 = 0u;
                    v179 = 0u;
                    v176 = 0u;
                    v177 = 0u;
                    v174 = 0u;
                    v175 = 0u;
                    v172 = 0u;
                    v173 = 0u;
                    v170 = 0u;
                    v171 = 0u;
                    v168 = 0u;
                    v169 = 0u;
                    v166 = 0u;
                    v167 = 0u;
                    v165 = 0u;
                    memset(v164, 0, sizeof(v164));
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
                    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"Ignoring unsupported template ", 30);
                    v73 = (char)v60[55];
                    if (v73 >= 0)
                      v71 = (uint64_t)(v60 + 32);
                    else
                      v71 = *((_QWORD *)v60 + 4);
                    if (v73 >= 0)
                      v72 = v60[55];
                    else
                      v72 = *((_QWORD *)v60 + 5);
                    goto LABEL_81;
                  }
LABEL_97:
                  v85 = (unsigned __int8 *)*((_QWORD *)v60 + 1);
                  if (v85)
                  {
                    do
                    {
                      v86 = v85;
                      v85 = *(unsigned __int8 **)v85;
                    }
                    while (v85);
                  }
                  else
                  {
                    do
                    {
                      v86 = (unsigned __int8 *)*((_QWORD *)v60 + 2);
                      v87 = *(_QWORD *)v86 == (_QWORD)v60;
                      v60 = v86;
                    }
                    while (!v87);
                  }
                  v60 = v86;
                  if (v86 == v61)
                    goto LABEL_107;
                }
              }
              v62 = 0;
LABEL_107:
              v88 = v62 & 1;
              a3 = v155;
              goto LABEL_108;
            }
          }
          else
          {
LABEL_58:
            if (v55)
              goto LABEL_59;
          }
          v88 = 0;
          v34 = 6;
LABEL_108:
          v89 = v181;
          if (v181)
          {
            v90 = (unint64_t *)&v181->__shared_owners_;
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
            if (!v91)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
          v92 = v184;
          if (v184)
          {
            v93 = (unint64_t *)&v184->__shared_owners_;
            do
              v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
          v45 = *a3;
          LODWORD(v164[0]) = *(_DWORD *)(v187 + 40);
          *(_QWORD *)((char *)v164 + 4) = __PAIR64__(v88, v34);
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v164[1], v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
            v4 = v156;
            v7 = v157;
            goto LABEL_121;
          }
          v4 = v156;
          v7 = v157;
LABEL_120:
          v164[1] = *(_OWORD *)&v185.__r_.__value_.__l.__data_;
          *(_QWORD *)&v165 = *((_QWORD *)&v185.__r_.__value_.__l + 2);
LABEL_121:
          std::vector<quasar::LmeInfo>::emplace_back<quasar::LmeInfo>((uint64_t *)(v45 + 584), (uint64_t *)v164);
          if (SBYTE7(v165) < 0)
            operator delete(*(void **)&v164[1]);
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v185.__r_.__value_.__l.__data_);
          v95 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
          if (*((_QWORD *)&v187 + 1))
          {
            v96 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
          ++v26;
        }
        while (*(_BYTE *)(v7 + 2884));
      }
      v98 = (_QWORD *)quasar::SpeechRequestData::getLmeDataStreams((quasar::SpeechRequestData *)*v4);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*a3 + 592) - *(_QWORD *)(*a3 + 584)) >> 3) != (uint64_t)(v98[1] - *v98) >> 4
        && quasar::gLogLevel >= 2)
      {
        v178 = 0u;
        v179 = 0u;
        v176 = 0u;
        v177 = 0u;
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v165 = 0u;
        memset(v164, 0, sizeof(v164));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"lmeDataStreams and lmeInfos size mismatch. Should NEVER happen", 62);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v164);
      }
      quasar::SpeechRequestData::getRecogRequestTimer(*v4, v164);
      v101.n128_f64[0] = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v100);
      v102 = v154 + 320;
      v103 = (std::__shared_weak_count *)*((_QWORD *)&v164[0] + 1);
      if (*((_QWORD *)&v164[0] + 1))
      {
        v104 = (unint64_t *)(*((_QWORD *)&v164[0] + 1) + 8);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v103->__on_zero_shared)(v103, v101);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = (__int128 *)v191;
      if ((_QWORD)v191)
      {
        v158 = (int *)(v7 + 3332);
        do
        {
          if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(v7 + 2936), (unsigned __int8 *)v106 + 16))
          {
            v107 = (uint64_t *)*((_QWORD *)v106 + 5);
            v108 = (uint64_t *)*((_QWORD *)v106 + 6);
            if (v107 != v108)
            {
              *(_OWORD *)&v185.__r_.__value_.__l.__data_ = 0uLL;
              if ((unint64_t)((char *)v108 - (char *)v107) >= 0x11 && *(_DWORD *)(v7 + 3328) && *v158)
              {
                std::allocate_shared[abi:ne180100]<fst::quasar::MergeTrieFst,std::allocator<fst::quasar::MergeTrieFst>,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,void>((uint64_t)v106 + 40, (int *)(v7 + 3328), v158, v106 + 1, v164);
                v109 = v164[0];
                v164[0] = 0uLL;
                size = (std::__shared_weak_count *)v185.__r_.__value_.__l.__size_;
                *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v109;
                if (size)
                {
                  v111 = (unint64_t *)&size->__shared_owners_;
                  do
                    v112 = __ldaxr(v111);
                  while (__stlxr(v112 - 1, v111));
                  if (!v112)
                  {
                    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                    std::__shared_weak_count::__release_weak(size);
                  }
                }
                v113 = (std::__shared_weak_count *)*((_QWORD *)&v164[0] + 1);
                if (*((_QWORD *)&v164[0] + 1))
                {
                  v114 = (unint64_t *)(*((_QWORD *)&v164[0] + 1) + 8);
                  do
                    v115 = __ldaxr(v114);
                  while (__stlxr(v115 - 1, v114));
                  if (!v115)
                  {
                    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                    std::__shared_weak_count::__release_weak(v113);
                  }
                }
              }
              else
              {
                std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v185, v107);
              }
              v120 = *(_DWORD *)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at(v7 + 3016, (const void **)v106 + 2);
              v121 = *(_OWORD *)&v185.__r_.__value_.__l.__data_;
              v159 = (std::__shared_weak_count *)v185.__r_.__value_.__l.__size_;
              if (v185.__r_.__value_.__l.__size_)
              {
                v122 = (unint64_t *)(v185.__r_.__value_.__l.__size_ + 8);
                do
                  v123 = __ldxr(v122);
                while (__stxr(v123 + 1, v122));
                LODWORD(v164[0]) = v120;
                *(__int128 *)((char *)v164 + 8) = v121;
                do
                  v124 = __ldxr(v122);
                while (__stxr(v124 + 1, v122));
              }
              else
              {
                LODWORD(v164[0]) = v120;
                *((_QWORD *)&v164[0] + 1) = v185.__r_.__value_.__r.__words[0];
                *(_QWORD *)&v164[1] = 0;
              }
              DWORD2(v164[1]) = 0;
              std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100]((uint64_t *)v102, (uint64_t)v164);
              v125 = *(std::__shared_weak_count **)&v164[1];
              if (*(_QWORD *)&v164[1])
              {
                v126 = (unint64_t *)(*(_QWORD *)&v164[1] + 8);
                do
                  v127 = __ldaxr(v126);
                while (__stlxr(v127 - 1, v126));
                if (!v127)
                {
                  ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                  std::__shared_weak_count::__release_weak(v125);
                }
              }
              if (v159)
              {
                v128 = (unint64_t *)&v159->__shared_owners_;
                do
                  v129 = __ldaxr(v128);
                while (__stlxr(v129 - 1, v128));
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                  std::__shared_weak_count::__release_weak(v159);
                }
              }
              v130 = (std::__shared_weak_count *)v185.__r_.__value_.__l.__size_;
              if (v185.__r_.__value_.__l.__size_)
              {
                v131 = (unint64_t *)(v185.__r_.__value_.__l.__size_ + 8);
                do
                  v132 = __ldaxr(v131);
                while (__stlxr(v132 - 1, v131));
                if (!v132)
                {
                  ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                  std::__shared_weak_count::__release_weak(v130);
                }
              }
            }
          }
          else if (quasar::gLogLevel >= 4)
          {
            v178 = 0u;
            v179 = 0u;
            v176 = 0u;
            v177 = 0u;
            v174 = 0u;
            v175 = 0u;
            v172 = 0u;
            v173 = 0u;
            v170 = 0u;
            v171 = 0u;
            v168 = 0u;
            v169 = 0u;
            v166 = 0u;
            v167 = 0u;
            v165 = 0u;
            memset(v164, 0, sizeof(v164));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
            v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"Ignoring unsupported template ", 30);
            v117 = *((char *)v106 + 39);
            if (v117 >= 0)
              v118 = (uint64_t)(v106 + 1);
            else
              v118 = *((_QWORD *)v106 + 2);
            if (v117 >= 0)
              v119 = *((unsigned __int8 *)v106 + 39);
            else
              v119 = *((_QWORD *)v106 + 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, v118, v119);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v164);
          }
          v106 = *(__int128 **)v106;
        }
        while (v106);
      }
      quasar::SpeechRequestData::getRecogRequestTimer(*v4, v164);
      v134.n128_f64[0] = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v133);
      v135 = (std::__shared_weak_count *)*((_QWORD *)&v164[0] + 1);
      if (*((_QWORD *)&v164[0] + 1))
      {
        v136 = (unint64_t *)(*((_QWORD *)&v164[0] + 1) + 8);
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v135->__on_zero_shared)(v135, v134);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      if (quasar::gLogLevel >= 4)
      {
        v178 = 0u;
        v179 = 0u;
        v176 = 0u;
        v177 = 0u;
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v165 = 0u;
        memset(v164, 0, sizeof(v164));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"lmeMergeInitTime ", 17);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v164);
      }
      quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(v7, v155, (quasar::SpeechRequestData **)v4, (uint64_t *)v102, v154 + 344, (quasar::Location *)(v154 + 232), (std::vector<std::string> **)v164);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v154 + 456, v164);
      v138 = (std::__shared_weak_count *)*((_QWORD *)&v164[0] + 1);
      if (*((_QWORD *)&v164[0] + 1))
      {
        v139 = (unint64_t *)(*((_QWORD *)&v164[0] + 1) + 8);
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      quasar::OnlineLatticeBiglmLmeFasterDecoder::appendEmptyFsts((_QWORD *)v7, (uint64_t *)v102);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v153, (uint64_t *)(v7 + 3296));
      quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies::clear(*(quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies **)(v7 + 2920));
      v141 = *(_QWORD *)(v7 + 2920);
      if (v141 != v102)
      {
        std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__assign_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(v141, *(_QWORD *)(v154 + 320), *(_QWORD *)(v154 + 328), (uint64_t)(*(_QWORD *)(v154 + 328) - *(_QWORD *)(v154 + 320)) >> 5);
        v102 = *(_QWORD *)(v7 + 2920);
      }
      if (v102 + 24 != v154 + 344)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v102 + 24), *(char **)(v154 + 344), *(_QWORD *)(v154 + 352), (uint64_t)(*(_QWORD *)(v154 + 352) - *(_QWORD *)(v154 + 344)) >> 2);
        v102 = *(_QWORD *)(v7 + 2920);
      }
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v102 + 48), (uint64_t *)(v7 + 3296));
      v142 = *v155;
      v143 = (uint64_t *)(*(_QWORD *)(v7 + 2920) + 64);
      if (v143 != (uint64_t *)(*v155 + 584))
      {
        std::vector<quasar::LmeInfo>::__assign_with_size[abi:ne180100]<quasar::LmeInfo*,quasar::LmeInfo*>(v143, *(__int128 **)(v142 + 584), *(__int128 **)(v142 + 592), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v142 + 592) - *(_QWORD *)(v142 + 584)) >> 3));
        v142 = *v155;
      }
      std::allocate_shared[abi:ne180100]<quasar::SymbolTableList,std::allocator<quasar::SymbolTableList>,quasar::SymbolTableList&,void>(*(uint64_t **)(v142 + 472), v164);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*(_QWORD *)(v7 + 2920) + 88, v164);
      v144 = (std::__shared_weak_count *)*((_QWORD *)&v164[0] + 1);
      if (*((_QWORD *)&v164[0] + 1))
      {
        v145 = (unint64_t *)(*((_QWORD *)&v164[0] + 1) + 8);
        do
          v146 = __ldaxr(v145);
        while (__stlxr(v146 - 1, v145));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
        }
      }
      std::__tree<int>::destroy((uint64_t)&v188, v189[0]);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::~__hash_table((uint64_t)&v190);
    }
  }
}

void sub_1ADEF6A70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1 - 216, *(_QWORD **)(v1 - 208));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::~__hash_table(v1 - 192);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeBiglmLmeFasterDecoder::readAndCheckLmeData(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t *v4;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::string *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  BOOL v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  std::string *v67;
  std::string::size_type size;
  _QWORD *v69;
  _QWORD *v70;
  std::string *v71;
  std::string::size_type v72;
  _QWORD *v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  std::string v79;
  std::string v80;
  std::string v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;

  v4 = *a2;
  if (!*a2)
  {
    if (quasar::gLogLevel >= 4)
    {
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME container ", 14);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is null.", 9);
      goto LABEL_18;
    }
    return 2;
  }
  if (quasar::gLogLevel >= 4)
  {
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Reading LME container ", 22);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" for user ", 10);
    v10 = *((char *)*a2 + 39);
    if (v10 >= 0)
      v11 = (uint64_t)(*a2 + 2);
    else
      v11 = (*a2)[2];
    if (v10 >= 0)
      v12 = *((unsigned __int8 *)*a2 + 39);
    else
      v12 = (*a2)[3];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
    v4 = *a2;
  }
  v13 = *v4;
  if (!*v4)
  {
    if (quasar::gLogLevel >= 4)
    {
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME container data ", 19);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is null.", 9);
      goto LABEL_18;
    }
    return 2;
  }
  v14 = *(unsigned int *)(v13 + 268);
  if ((_DWORD)v14 == 2)
  {
    if (quasar::gLogLevel >= 4)
    {
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is null.", 9);
LABEL_18:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
      return 2;
    }
    return 2;
  }
  if ((v14 & 0xFFFFFFFD) == 4)
    return v14;
  v19 = *(unsigned __int8 *)(v13 + 199);
  if ((v19 & 0x80u) == 0)
    v20 = *(unsigned __int8 *)(v13 + 199);
  else
    v20 = *(_QWORD *)(v13 + 184);
  v21 = *(unsigned __int8 *)(a1 + 231);
  v22 = (char)v21;
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a1 + 216);
  if (v20 != v21)
    goto LABEL_38;
  if (v22 >= 0)
    v23 = (unsigned __int8 *)(a1 + 208);
  else
    v23 = *(unsigned __int8 **)(a1 + 208);
  if ((v19 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(v13 + 176), v23, *(_QWORD *)(v13 + 184)))
    {
LABEL_38:
      if (quasar::gLogLevel >= 2)
      {
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream ", 16);
        v25 = (_QWORD *)std::ostream::operator<<();
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" has phone set version ", 23);
        v27 = *(char *)(v13 + 199);
        if (v27 >= 0)
          v28 = v13 + 176;
        else
          v28 = *(_QWORD *)(v13 + 176);
        if (v27 >= 0)
          v29 = *(unsigned __int8 *)(v13 + 199);
        else
          v29 = *(_QWORD *)(v13 + 184);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" which is different from model phone set version ", 49);
        v32 = *(char *)(a1 + 231);
        if (v32 >= 0)
          v33 = a1 + 208;
        else
          v33 = *(_QWORD *)(a1 + 208);
        if (v32 >= 0)
          v34 = *(unsigned __int8 *)(a1 + 231);
        else
          v34 = *(_QWORD *)(a1 + 216);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)". This data stream will not be used.", 36);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v82);
      }
      return 5;
    }
  }
  else if (*(_BYTE *)(v13 + 199))
  {
    v24 = (unsigned __int8 *)(v13 + 176);
    while (*v24 == *v23)
    {
      ++v24;
      ++v23;
      if (!--v19)
        goto LABEL_53;
    }
    goto LABEL_38;
  }
LABEL_53:
  if (*(unsigned __int8 *)(v13 + 392) != *(unsigned __int8 *)(a1 + 360))
  {
    if (quasar::gLogLevel < 4)
      return 5;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream useWordpiece=", 29);
    v59 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" does not match model (model useWordpiece=", 42);
    v60 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"). This data stream will not be used.", 37);
LABEL_111:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
    return 5;
  }
  if (!*(_BYTE *)(v13 + 392)
    || *(int *)(v13 + 8) < 16
    || !std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(v13 + 296), (unsigned __int8 *)(a1 + 336)))
  {
    goto LABEL_74;
  }
  if (quasar::gLogLevel >= 4)
  {
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream assetPath=", 26);
    v37 = *(char *)(v13 + 319);
    if (v37 >= 0)
      v38 = v13 + 296;
    else
      v38 = *(_QWORD *)(v13 + 296);
    if (v37 >= 0)
      v39 = *(unsigned __int8 *)(v13 + 319);
    else
      v39 = *(_QWORD *)(v13 + 304);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v38, v39);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" does not match model (lmeAssetPath=", 36);
    v42 = *(char *)(a1 + 359);
    if (v42 >= 0)
      v43 = a1 + 336;
    else
      v43 = *(_QWORD *)(a1 + 336);
    if (v42 >= 0)
      v44 = *(unsigned __int8 *)(a1 + 359);
    else
      v44 = *(_QWORD *)(a1 + 344);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v43, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)")", 1);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
  }
  if (!a4)
  {
    if (quasar::gLogLevel < 4)
      return 5;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"This data stream will not be used.", 34);
    goto LABEL_111;
  }
  if (quasar::gLogLevel >= 4)
  {
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Check is disabled! Continuing on the assumption that the LME data is actually compatible", 88);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
  }
LABEL_74:
  v46 = *(_QWORD *)(v13 + 160);
  if (v46 == -1 || (v47 = *(_QWORD *)(v13 + 168), v47 == -1))
  {
    if (quasar::gLogLevel >= 4)
    {
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Bad LME data (empty): stream=", 29);
      v61 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", symTableFirstKey=", 19);
      v62 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)", symTableLastKey=", 18);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
    }
    return 6;
  }
  if (v47 < v46)
    goto LABEL_114;
  v48 = *(_QWORD *)(v13 + 224);
  v49 = (*(uint64_t (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(v48 + 96) + 112))(*(_QWORD *)(v48 + 96), v23);
  if ((v49 & 0x8000000000000000) == 0)
    v49 += *(_QWORD *)(v48 + 120);
  if (v47 != v49 - 1)
  {
LABEL_114:
    if (quasar::gLogLevel >= 1)
    {
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Bad LME data (invalid last key): stream=", 40);
      v63 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)", symTableFirstKey=", 19);
      v64 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)", symTableLastKey=", 18);
      v65 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)", symTable->AvailableKey()=", 27);
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 224) + 96) + 112))(*(_QWORD *)(*(_QWORD *)(v13 + 224) + 96));
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v82);
    }
    return 6;
  }
  if ((_DWORD)v14 == 1)
  {
    if (!*(_QWORD *)(a1 + 320) || (v50 = *(_QWORD **)(v13 + 240), v50 == (_QWORD *)(v13 + 248)))
    {
LABEL_106:
      if (*(_DWORD *)(v13 + 264) >= *(_DWORD *)(a1 + 328))
        return 1;
      if (quasar::gLogLevel >= 4)
      {
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"G2P model version ", 18);
        v58 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" in blob is older than datapack's version ", 42);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
      }
    }
    else
    {
      while (1)
      {
        if (*((char *)v50 + 55) < 0)
          std::string::__init_copy_ctor_external(&v81, (const std::string::value_type *)v50[4], v50[5]);
        else
          v81 = *(std::string *)(v50 + 4);
        if (*((char *)v50 + 79) < 0)
          std::string::__init_copy_ctor_external(&v80, (const std::string::value_type *)v50[7], v50[8]);
        else
          v80 = *(std::string *)(v50 + 7);
        memset(&v79, 0, sizeof(v79));
        v51 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 256, (const void **)&v81.__r_.__value_.__l.__data_);
        if (a1 + 264 == v51)
          v52 = &v81;
        else
          v52 = (std::string *)(v51 + 56);
        std::string::operator=(&v79, v52);
        v53 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 304, (const void **)&v79.__r_.__value_.__l.__data_);
        v54 = v53;
        if (a1 + 312 == v53)
        {
          if (quasar::gLogLevel < 4)
            goto LABEL_143;
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v82 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
          v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Category ", 9);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = &v81;
          else
            v67 = (std::string *)v81.__r_.__value_.__r.__words[0];
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          else
            size = v81.__r_.__value_.__l.__size_;
          v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, size);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" in blob is not supported by datapack.", 38);
          goto LABEL_142;
        }
        if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(v53 + 56), (unsigned __int8 *)&v80))
        {
          break;
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v81.__r_.__value_.__l.__data_);
        v55 = (_QWORD *)v50[1];
        if (v55)
        {
          do
          {
            v56 = v55;
            v55 = (_QWORD *)*v55;
          }
          while (v55);
        }
        else
        {
          do
          {
            v56 = (_QWORD *)v50[2];
            v57 = *v56 == (_QWORD)v50;
            v50 = v56;
          }
          while (!v57);
        }
        v50 = v56;
        if (v56 == (_QWORD *)(v13 + 248))
          goto LABEL_106;
      }
      if (quasar::gLogLevel < 4)
        goto LABEL_143;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Category ", 9);
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = &v81;
      else
        v71 = (std::string *)v81.__r_.__value_.__r.__words[0];
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
      else
        v72 = v81.__r_.__value_.__l.__size_;
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" in blob uses different enumeration type (", 42);
      v75 = *(char *)(v54 + 79);
      if (v75 >= 0)
        v76 = v54 + 56;
      else
        v76 = *(_QWORD *)(v54 + 56);
      if (v75 >= 0)
        v77 = *(unsigned __int8 *)(v54 + 79);
      else
        v77 = *(_QWORD *)(v54 + 64);
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, v76, v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)") in datapack.", 14);
LABEL_142:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
LABEL_143:
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
    }
    return 3;
  }
  return v14;
}

void sub_1ADEF76E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::string::size_type a1@<X0>, uint64_t *a2@<X1>, quasar::SpeechRequestData **a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, quasar::Location *a6@<X5>, std::vector<std::string> **a7@<X8>)
{
  std::__assoc_sub_state **Location;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t RegionId;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::vector<std::string> *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  std::vector<std::string> *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  const void **v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  std::string *v41;
  std::string::size_type size;
  uint64_t v43;
  int v44;
  __int128 v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::string *v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  const void **v61;
  const void ***v62;
  BOOL v63;
  uint64_t v64;
  std::vector<std::string> *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  std::string::size_type i;
  std::string::size_type v70;
  _QWORD *v71;
  int v72;
  int64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  std::string *v77;
  std::string::size_type v78;
  int v79;
  unint64_t v80;
  _DWORD *v81;
  _DWORD *v82;
  _DWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  int v90;
  uint64_t v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  uint64_t v95;
  std::vector<std::string> **v96;
  std::string v97;
  std::string v98;
  __int128 v99;
  std::string v100;
  void *__p[4];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  const void **v117;
  _QWORD *v118[2];
  uint64_t *v119[3];
  void *v120[2];
  uint64_t v121;
  _QWORD v122[3];
  _QWORD *v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  std::string v128;
  std::string *v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  Location = (std::__assoc_sub_state **)quasar::SpeechRequestData::getLocation(*a3);
  *(double *)a6 = quasar::Location::fromSharedFuture(Location);
  *((_QWORD *)a6 + 1) = v15;
  v16 = *(_QWORD *)(*a2 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "geoLocationStatus");
  quasar::Location::statusAsString(a6, &v128);
  quasar::SpeechRequestResultData::addDumpAA(v16, (__int128 *)__p, &v128);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v120[0] = 0;
  v120[1] = 0;
  v121 = 0;
  v17 = *(_QWORD *)(a1 + 408);
  RegionId = quasar::SpeechRequestData::getRegionId(*a3);
  quasar::Geography::getGeoContext(v17, a6, (uint64_t)v120, RegionId, a7);
  quasar::OnlineLatticeBiglmLmeFasterDecoder::logGeoLmMetrics(a1, *a2, a6, (unsigned __int8 *)v120, (uint64_t)*a7);
  v96 = a7;
  quasar::OnlineLatticeBiglmLmeFasterDecoder::mergeRegionalClassLms((_QWORD *)(a1 + 3248), (const void ***)*a7, (uint64_t *)v119);
  v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E5D3E8A8;
  v128.__r_.__value_.__l.__size_ = a1;
  v129 = &v128;
  v19 = *(uint64_t **)(a1 + 2224);
  v20 = *(uint64_t **)(a1 + 2232);
  while (v19 != v20)
  {
    v21 = *v19;
    v22 = *a2;
    v23 = *a7;
    v24 = (uint64_t)v129;
    if (!v129)
      goto LABEL_10;
    if (v129 != &v128)
    {
      v24 = (*(uint64_t (**)(void))(v129->__r_.__value_.__r.__words[0] + 16))();
LABEL_10:
      v127 = (_BYTE *)v24;
      goto LABEL_12;
    }
    v127 = v126;
    (*(void (**)(std::string *, _BYTE *))(v128.__r_.__value_.__r.__words[0] + 24))(&v128, v126);
LABEL_12:
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::resolvePlaceholder(v21, v119, (uint64_t *)(v22 + 424), (uint64_t)&v23[2], (uint64_t)v126, 1);
    v25 = v127;
    if (v127 == v126)
    {
      v25 = v126;
      v26 = 4;
    }
    else
    {
      if (!v127)
        goto LABEL_17;
      v26 = 5;
    }
    (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_17:
    v19 += 2;
  }
  v27 = *(uint64_t **)(a1 + 2272);
  v28 = *(uint64_t **)(a1 + 2280);
  if (v27 != v28)
  {
    while (1)
    {
      v29 = *v27;
      v30 = *v96;
      v31 = *a2;
      v124[0] = &off_1E5D3E900;
      v125 = v124;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::resolvePlaceholder(v29, (uint64_t **)&v30[1], (uint64_t *)(v31 + 424), (uint64_t)&v30[2], (uint64_t)v124, 0);
      v32 = v125;
      if (v125 == v124)
        break;
      if (v125)
      {
        v33 = 5;
LABEL_23:
        (*(void (**)(void))(*v32 + 8 * v33))();
      }
      v27 += 2;
      if (v27 == v28)
        goto LABEL_25;
    }
    v32 = v124;
    v33 = 4;
    goto LABEL_23;
  }
LABEL_25:
  quasar::OnlineLatticeBiglmLmeFasterDecoder::filterOutUnsupportedPlaceholders(a1, (const void ***)v119, (uint64_t)&v117);
  v34 = v117;
  if (v117 != (const void **)v118)
  {
    do
    {
      if (quasar::gLogLevel >= 4)
      {
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        v107 = 0u;
        v108 = 0u;
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v102 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ClassLM template ", 17);
        v36 = *((char *)v34 + 55);
        if (v36 >= 0)
          v37 = (uint64_t)(v34 + 4);
        else
          v37 = (uint64_t)v34[4];
        if (v36 >= 0)
          v38 = *((unsigned __int8 *)v34 + 55);
        else
          v38 = (uint64_t)v34[5];
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" assigned to FST from ", 22);
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr((uint64_t)v34[7], &v100);
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v100;
        else
          v41 = (std::string *)v100.__r_.__value_.__r.__words[0];
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
        else
          size = v100.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, size);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v100.__r_.__value_.__l.__data_);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      v43 = (uint64_t)v34[7];
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v43, (uint64_t)__p, &v97);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v44 = *(_DWORD *)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at(a1 + 3016, v34 + 4);
      v45 = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
      v99 = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
      if (v97.__r_.__value_.__l.__size_)
      {
        v46 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        LODWORD(__p[0]) = v44;
        *(_OWORD *)&__p[1] = v45;
        do
          v48 = __ldxr(v46);
        while (__stxr(v48 + 1, v46));
      }
      else
      {
        LODWORD(__p[0]) = v44;
        __p[1] = v97.__r_.__value_.__l.__data_;
        __p[2] = 0;
      }
      LODWORD(__p[3]) = 1;
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](a4, (uint64_t)__p);
      v49 = (std::__shared_weak_count *)__p[2];
      if (__p[2])
      {
        v50 = (unint64_t *)((char *)__p[2] + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
      if (*((_QWORD *)&v99 + 1))
      {
        v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = *(_QWORD *)(*a2 + 424);
      std::operator+<char>();
      v56 = std::string::append(&v100, "]");
      v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      __p[2] = (void *)v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr((uint64_t)v34[7], &v98);
      quasar::SpeechRequestResultData::addDumpAA(v55, (__int128 *)__p, &v98);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      v58 = (std::__shared_weak_count *)v97.__r_.__value_.__l.__size_;
      if (v97.__r_.__value_.__l.__size_)
      {
        v59 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = (const void **)v34[1];
      if (v61)
      {
        do
        {
          v62 = (const void ***)v61;
          v61 = (const void **)*v61;
        }
        while (v61);
      }
      else
      {
        do
        {
          v62 = (const void ***)v34[2];
          v63 = *v62 == v34;
          v34 = (const void **)v62;
        }
        while (!v63);
      }
      v34 = (const void **)v62;
    }
    while (v62 != v118);
  }
  memset(&v100, 0, sizeof(v100));
  kaldi::SplitStringToVector((const std::string *)(a1 + 3088), ",", 1, (uint64_t)&v100);
  if (v100.__r_.__value_.__r.__words[0] != v100.__r_.__value_.__l.__size_)
  {
    v64 = *(_QWORD *)(a1 + 3296);
    if (v64)
    {
      v65 = *v96;
      v66 = *a2;
      v122[0] = &off_1E5D3E958;
      v123 = v122;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::resolvePlaceholder(v64, (uint64_t **)&v65[1], (uint64_t *)(v66 + 424), (uint64_t)&v65[2], (uint64_t)v122, 0);
      v67 = v123;
      if (v123 == v122)
      {
        v68 = 4;
        v67 = v122;
      }
      else
      {
        if (!v123)
          goto LABEL_85;
        v68 = 5;
      }
      (*(void (**)(void))(*v67 + 8 * v68))();
    }
  }
LABEL_85:
  v70 = v100.__r_.__value_.__l.__size_;
  for (i = v100.__r_.__value_.__r.__words[0]; i != v70; i += 24)
  {
    if (quasar::gLogLevel >= 4)
    {
      v115 = 0u;
      v116 = 0u;
      v113 = 0u;
      v114 = 0u;
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v102 = 0u;
      memset(__p, 0, sizeof(__p));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ClassLM template ", 17);
      v72 = *(char *)(i + 23);
      if (v72 >= 0)
        v73 = i;
      else
        v73 = *(_QWORD *)i;
      if (v72 >= 0)
        v74 = *(unsigned __int8 *)(i + 23);
      else
        v74 = *(_QWORD *)(i + 8);
      v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" assigned to NNLM from ", 23);
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(*(_QWORD *)(a1 + 3296), &v98);
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v98;
      else
        v77 = (std::string *)v98.__r_.__value_.__r.__words[0];
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      else
        v78 = v98.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v79 = *(_DWORD *)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at(a1 + 3016, (const void **)i);
    v81 = *(_DWORD **)(a5 + 8);
    v80 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v81 >= v80)
    {
      v83 = *(_DWORD **)a5;
      v84 = ((uint64_t)v81 - *(_QWORD *)a5) >> 2;
      v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v86 = v80 - (_QWORD)v83;
      if (v86 >> 1 > v85)
        v85 = v86 >> 1;
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
        v87 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v87 = v85;
      if (v87)
      {
        v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v87);
        v83 = *(_DWORD **)a5;
        v81 = *(_DWORD **)(a5 + 8);
      }
      else
      {
        v88 = 0;
      }
      v89 = &v88[4 * v84];
      *(_DWORD *)v89 = v79;
      v82 = v89 + 4;
      while (v81 != v83)
      {
        v90 = *--v81;
        *((_DWORD *)v89 - 1) = v90;
        v89 -= 4;
      }
      *(_QWORD *)a5 = v89;
      *(_QWORD *)(a5 + 8) = v82;
      *(_QWORD *)(a5 + 16) = &v88[4 * v87];
      if (v83)
        operator delete(v83);
    }
    else
    {
      *v81 = v79;
      v82 = v81 + 1;
    }
    *(_QWORD *)(a5 + 8) = v82;
    v91 = *(_QWORD *)(*a2 + 424);
    std::operator+<char>();
    v92 = std::string::append(&v98, "]");
    v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    __p[2] = (void *)v92->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(*(_QWORD *)(a1 + 3296), &v97);
    quasar::SpeechRequestResultData::addDumpAA(v91, (__int128 *)__p, &v97);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
  }
  __p[0] = &v100;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&v117, v118[0]);
  v94 = v129;
  if (v129 == &v128)
  {
    v95 = 4;
    v94 = &v128;
  }
  else
  {
    if (!v129)
      goto LABEL_130;
    v95 = 5;
  }
  (*(void (**)(void))(v94->__r_.__value_.__r.__words[0] + 8 * v95))();
LABEL_130:
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)v119, v119[1]);
  if (SHIBYTE(v121) < 0)
    operator delete(v120[0]);
}

void sub_1ADEF8098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61)
{
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;

  v64 = *(_QWORD **)(v62 - 208);
  if (v64 == v61)
  {
    v65 = 4;
    v64 = (_QWORD *)(v62 - 232);
  }
  else
  {
    if (!v64)
      goto LABEL_6;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_6:
  a23 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&a57, (_QWORD *)a58);
  v66 = *(_QWORD **)(v62 - 112);
  if (v66 == (_QWORD *)(v62 - 136))
  {
    v67 = 4;
    v66 = (_QWORD *)(v62 - 136);
  }
  else
  {
    if (!v66)
      goto LABEL_11;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_11:
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&a60, (_QWORD *)a61);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a11);
  if (*(char *)(v62 - 233) < 0)
    operator delete(*(void **)(v62 - 256));
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::appendEmptyFsts(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _DWORD *i;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;

  v2 = a1[379];
  if (v2)
  {
    if (v2 != (a2[1] - *a2) >> 5)
    {
      v4 = (_QWORD *)a1[377];
      v5 = a1 + 378;
      if (v4 != a1 + 378)
      {
        do
        {
          v6 = *((_DWORD *)v4 + 14);
          for (i = (_DWORD *)*a2; i != (_DWORD *)a2[1]; i += 8)
          {
            if (*i == v6)
              goto LABEL_13;
          }
          v15 = 0;
          v16 = 0;
          v14 = v6;
          v17 = -1;
          std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](a2, (uint64_t)&v14);
          v8 = v16;
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
LABEL_13:
          v11 = (_QWORD *)v4[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v4[2];
              v13 = *v12 == (_QWORD)v4;
              v4 = v12;
            }
            while (!v13);
          }
          v4 = v12;
        }
        while (v12 != v5);
      }
    }
  }
}

void sub_1ADEF84A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeBiglmLmeFasterDecoder::logGeoLmMetrics(uint64_t a1, uint64_t a2, quasar::Location *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t result;
  _BYTE *v11;
  _BOOL4 isUndefined;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void **v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  _BOOL4 v27;
  uint64_t v29;
  std::string __p;
  void *v31[2];
  char v32;

  result = quasar::Geography::wasConfigLoaded(*(quasar::Geography **)(a1 + 408));
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(a2 + 424) + 128) = 1;
    if (quasar::Location::isKnown(a3))
    {
      v11 = *(_BYTE **)(a2 + 424);
      v11[129] = 1;
    }
    else if (quasar::Location::isDenied(a3))
    {
      v11 = *(_BYTE **)(a2 + 424);
      v11[130] = 1;
    }
    else
    {
      isUndefined = quasar::Location::isUndefined(a3);
      v11 = *(_BYTE **)(a2 + 424);
      if (isUndefined)
        v11[131] = 1;
    }
    v13 = (*(_QWORD *)(a5 + 16) | *(_QWORD *)(a5 + 40)) != 0;
    std::string::basic_string[abi:ne180100]<0>(v31, "geoContextFound");
    std::to_string(&__p, v13);
    quasar::SpeechRequestResultData::addDumpAA((uint64_t)v11, (__int128 *)v31, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v32 < 0)
      operator delete(v31[0]);
    *(_BYTE *)(*(_QWORD *)(a2 + 424) + 132) = v13;
    result = quasar::Geography::getGeoMemoriesConfig(*(quasar::Geography **)(a1 + 408));
    if (*(_BYTE *)result)
    {
      v14 = *(_QWORD *)(a2 + 424);
      *(_BYTE *)(v14 + 133) = 1;
      v15 = a4[23];
      if ((v15 & 0x80u) != 0)
        v15 = *((_QWORD *)a4 + 1);
      v16 = v15 != 0;
      std::string::basic_string[abi:ne180100]<0>(v31, "geoLastRegionIdWasCached");
      std::to_string(&__p, v16);
      quasar::SpeechRequestResultData::addDumpAA(v14, (__int128 *)v31, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v32 < 0)
        operator delete(v31[0]);
      v17 = *(unsigned __int8 *)(a5 + 71);
      if ((v17 & 0x80u) == 0)
        v18 = *(unsigned __int8 *)(a5 + 71);
      else
        v18 = *(_QWORD *)(a5 + 56);
      v19 = a4[23];
      v20 = (char)v19;
      if ((v19 & 0x80u) != 0)
        v19 = *((_QWORD *)a4 + 1);
      if (v18 == v19)
      {
        v21 = (const void **)(a5 + 48);
        if (v20 >= 0)
          v22 = a4;
        else
          v22 = *(unsigned __int8 **)a4;
        if ((v17 & 0x80) != 0)
        {
          v27 = memcmp(*v21, v22, *(_QWORD *)(a5 + 56)) != 0;
        }
        else if (*(_BYTE *)(a5 + 71))
        {
          v23 = v17 - 1;
          do
          {
            v25 = *(unsigned __int8 *)v21;
            v21 = (const void **)((char *)v21 + 1);
            v24 = v25;
            v26 = *v22++;
            v27 = v24 != v26;
          }
          while (v24 == v26 && v23-- != 0);
        }
        else
        {
          v27 = 0;
        }
      }
      else
      {
        v27 = 1;
      }
      v29 = *(_QWORD *)(a2 + 424);
      std::string::basic_string[abi:ne180100]<0>(v31, "geoLastRegionIdCacheMiss");
      std::to_string(&__p, v27);
      quasar::SpeechRequestResultData::addDumpAA(v29, (__int128 *)v31, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v32 < 0)
        operator delete(v31[0]);
      *(_BYTE *)(*(_QWORD *)(a2 + 424) + 134) = v27;
      result = quasar::Location::isUndefined(a3);
      if ((_DWORD)result)
      {
        if (v13)
          *(_BYTE *)(*(_QWORD *)(a2 + 424) + 135) = 1;
      }
    }
  }
  return result;
}

void sub_1ADEF875C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::mergeRegionalClassLms(_QWORD *a1@<X0>, const void ***a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::string::size_type size;
  uint64_t v9;
  char v10;
  char v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::string *v24;
  std::string::size_type v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  std::string v61;

  std::map<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::map[abi:ne180100](a3, a2);
  v7 = (_QWORD *)*a1;
  v5 = a1 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(v6[7], &v61);
      size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v61.__r_.__value_.__l.__size_;
      if (size)
      {
        if (!std::__tree<std::string>::__count_unique<std::string>((uint64_t)a3, (const void **)&v61.__r_.__value_.__l.__data_))
        {
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Using location-specific classLM slot for template=", 50);
          v32 = *((char *)v6 + 55);
          if (v32 >= 0)
            v33 = (uint64_t)(v6 + 4);
          else
            v33 = v6[4];
          if (v32 >= 0)
            v34 = *((unsigned __int8 *)v6 + 55);
          else
            v34 = v6[5];
          v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": placeholder ", 14);
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = &v61;
          else
            v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
          else
            v38 = v61.__r_.__value_.__l.__size_;
          v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" not found in regional map", 26);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v44);
        }
        v9 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a3, (const void **)&v61.__r_.__value_.__l.__data_);
        if (a3 + 1 == (uint64_t *)v9)
        {
          v9 = 0;
          v10 = 0;
          v43 = 0;
        }
        else
        {
          std::__tree<std::string>::__remove_node_pointer((uint64_t **)a3, (uint64_t *)v9);
          v10 = 1;
        }
        v42 = (void *)v9;
        BYTE1(v43) = v10;
        std::string::operator=((std::string *)(v9 + 32), (const std::string *)(v6 + 4));
        std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__node_handle_insert_unique[abi:ne180100]<std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>,std::__insert_return_type<std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>*,long>>,std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>>>((uint64_t **)a3, (uint64_t *)&v42, (uint64_t)&v40);
        v17 = v41;
        if (v41)
        {
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)v41 + 32);
          operator delete(v17);
          v41 = 0;
        }
        if (quasar::gLogLevel >= 4)
        {
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Using location-specific classLM slot for template=", 50);
          v19 = *((char *)v6 + 55);
          if (v19 >= 0)
            v20 = (uint64_t)(v6 + 4);
          else
            v20 = v6[4];
          if (v19 >= 0)
            v21 = *((unsigned __int8 *)v6 + 55);
          else
            v21 = v6[5];
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", using placeholder ", 20);
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &v61;
          else
            v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
          else
            v25 = v61.__r_.__value_.__l.__size_;
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" from regional map", 18);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v44);
        }
        v27 = v42;
        if (v42)
        {
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)v42 + 32);
          operator delete(v27);
        }
      }
      else
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>> const&>((uint64_t **)a3, (const void **)v6 + 4, (__int128 *)v6 + 2);
        if ((v11 & 1) != 0 && quasar::gLogLevel >= 4)
        {
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Using decoder-specific classLM slot for template=", 49);
          v13 = *((char *)v6 + 55);
          if (v13 >= 0)
            v14 = (uint64_t)(v6 + 4);
          else
            v14 = v6[4];
          if (v13 >= 0)
            v15 = *((unsigned __int8 *)v6 + 55);
          else
            v15 = v6[5];
          v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", location-specific slot not available", 38);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v44);
        }
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      v28 = (_QWORD *)v6[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v6[2];
          v30 = *v29 == (_QWORD)v6;
          v6 = v29;
        }
        while (!v30);
      }
      v6 = v29;
    }
    while (v29 != v5);
  }
}

void sub_1ADEF8B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  if (*(char *)(v8 - 89) < 0)
    operator delete(*(void **)(v8 - 112));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v7, *(_QWORD **)(v7 + 8));
  _Unwind_Resume(a1);
}

void sub_1ADEF8B54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 - 89) < 0)
    operator delete(*(void **)(v2 - 112));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1ADEF8B5C()
{
  JUMPOUT(0x1ADEF8B90);
}

void sub_1ADEF8B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:ne180100]((void **)va);
  JUMPOUT(0x1ADEF8B80);
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::filterOutUnsupportedPlaceholders(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  const void ***v4;
  const void **v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const void **v11;
  const void ***v12;
  BOOL v13;
  _OWORD v14[17];

  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    v6 = (_QWORD *)(a1 + 2936);
    do
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v6, (unsigned __int8 *)v5 + 32))
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>> const&>((uint64_t **)a3, v5 + 4, (__int128 *)v5 + 2);
      }
      else if (quasar::gLogLevel >= 4)
      {
        memset(v14, 0, sizeof(v14));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Filtering out unsupported / unused placeholder ", 47);
        v8 = *((char *)v5 + 55);
        if (v8 >= 0)
          v9 = (uint64_t)(v5 + 4);
        else
          v9 = (uint64_t)v5[4];
        if (v8 >= 0)
          v10 = *((unsigned __int8 *)v5 + 55);
        else
          v10 = (uint64_t)v5[5];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v14);
      }
      v11 = (const void **)v5[1];
      if (v11)
      {
        do
        {
          v12 = (const void ***)v11;
          v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (const void ***)v5[2];
          v13 = *v12 == v5;
          v5 = (const void **)v12;
        }
        while (!v13);
      }
      v5 = (const void **)v12;
    }
    while (v12 != v4);
  }
}

void sub_1ADEF8CE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3E7F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3E7F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 368) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 368));
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3E850;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3E850;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  quasar::ModelLoader::readNeuralNetworkLm(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 368), a2, *(_QWORD *)(a1 + 8) + 2192, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 2220), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 2216), a3, 0.0);
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3E8A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3E8A8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::operator()@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  if (*(_BYTE *)(result[1] + 2300))
  {
    result = std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,void>(&v7);
    *(_OWORD *)a3 = v7;
  }
  else
  {
    v4 = a2[1];
    *(_QWORD *)a3 = *a2;
    *(_QWORD *)(a3 + 8) = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  return result;
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3E900;
  return result;
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3E900;
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::operator()(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3E958;
  return result;
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3E958;
}

void std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::operator()(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target_type()
{
}

void quasar::rescoring::GetDecoder<quasar::OnlineLmRescoringDecoder>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19[17];

  *a2 = 0;
  a2[1] = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
    goto LABEL_5;
  while (!*(_QWORD *)v3
  {
    v3 += 16;
    if (v3 == v4)
      goto LABEL_5;
  }
  v8 = *(std::__shared_weak_count **)(v3 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (*(_QWORD *)v3
  {
    *(_QWORD *)&v19[0] = v12;
    v13 = *(_QWORD *)(v3 + 8);
    *((_QWORD *)&v19[0] + 1) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    v19[0] = 0uLL;
  }
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, v19);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v19[0] + 1);
  if (*((_QWORD *)&v19[0] + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (!*a2)
  {
LABEL_5:
    memset(v19, 0, sizeof(v19));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Unable to extract decoder of type ", 34);
    v6 = strlen((const char *)((unint64_t)"N6quasar24OnlineLmRescoringDecoderE" & 0x7FFFFFFFFFFFFFFFLL));
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (unint64_t)"N6quasar24OnlineLmRescoringDecoderE" & 0x7FFFFFFFFFFFFFFFLL, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" from decoder chain.", 20);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v19);
  }
}

void sub_1ADEF935C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::rescoring::GetNumberOfRescoringLanguageModels(quasar::rescoring *this, const quasar::OnlineLmRescoringDecoder *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _OWORD v8[17];

  v3 = *((_QWORD *)this + 78);
  v4 = *((_QWORD *)this + 77);
  if (v3 != v4 && quasar::gLogLevel >= 2)
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Using NNLMs during rescoring may lead to thread starvation within LibBNNS. ", 75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"See rdar://problem/102243606 for more information.", 50);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v8);
    v3 = *((_QWORD *)this + 78);
    v4 = *((_QWORD *)this + 77);
  }
  return ((v3 - v4) >> 4) + ((uint64_t)(*((_QWORD *)this + 75) - *((_QWORD *)this + 74)) >> 4);
}

void sub_1ADEF9430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::JapaneseDerivedEnumerator::JapaneseDerivedEnumerator(uint64_t a1, __int128 *a2, quasar::SystemConfig *a3, uint64_t a4)
{
  quasar::PTree *Child;
  std::string *v9;
  uint64_t v10;
  void **v11;
  uint64_t SpeechModelInfo;
  __int128 v13;
  uint64_t v14;
  void *v16;
  char v17;
  char v18;
  void *__p[2];
  char v20;
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  __int128 v24;

  *(_QWORD *)&v24 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "tag-sequences");
  Child = (quasar::PTree *)quasar::PTree::getChild(a4, (__int128 *)__p);
  quasar::SimpleNameEnumerator::SimpleNameEnumerator((_QWORD *)a1, a2, Child);
  if (v20 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &off_1E5D398D8;
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[1],0>(__p, "\\contact-first-derived", "");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[1],0>(v21, "\\contact-last-derived", "");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[15],0>(v22, "\\contact-last-derived", "\\contact-first");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[23],0>(v23, "\\contact-last", "\\contact-first-derived");
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v16 = (void *)(a1 + 56);
  v17 = 0;
  v9 = (std::string *)operator new(0xC0uLL);
  *(_QWORD *)(a1 + 72) = v9 + 8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v9;
  v10 = 0;
  *(_QWORD *)(a1 + 64) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>(a1 + 72, (__int128 *)__p, &v24, v9);
  do
  {
    v11 = &__p[v10];
    if (SHIBYTE(v23[v10 + 5]) < 0)
      operator delete(v11[21]);
    if (*((char *)v11 + 167) < 0)
      operator delete(v11[18]);
    v10 -= 6;
  }
  while (v10 != -24);
  SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo(a3);
  if (*(char *)(SpeechModelInfo + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)(SpeechModelInfo + 120), *(_QWORD *)(SpeechModelInfo + 128));
  }
  else
  {
    v13 = *(_OWORD *)(SpeechModelInfo + 120);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(SpeechModelInfo + 136);
    *(_OWORD *)(a1 + 80) = v13;
  }
  v14 = operator new();
  *(_OWORD *)(v14 + 8) = xmmword_1AE1402C0;
  *(_DWORD *)(v14 + 24) = 0;
  *(_QWORD *)v14 = &unk_1E5D40240;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 1065185444;
  std::string::basic_string[abi:ne180100]<0>(__p, "Japanese derived");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a3, 179, 0, (uint64_t)__p);
  if (v20 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "derived-frequency-scale");
  std::string::basic_string[abi:ne180100]<0>(&v16, "Frequency of original word is multiplied by this number to obtain frequency of derived word.");
  quasar::SystemConfig::Register<float>((uint64_t)a3, (const void **)__p, a1 + 296, (uint64_t)&v16, 0, 258, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v18 < 0)
    operator delete(v16);
  if (v20 < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::readPtreeAtPrefix(a3, 0, 0);
  return a1;
}

void sub_1ADEF974C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void **v23;
  uint64_t v24;

  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(v24);
  if (*(char *)(v22 + 103) < 0)
    operator delete(*v23);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  quasar::SimpleNameEnumerator::~SimpleNameEnumerator((void **)v22);
  _Unwind_Resume(a1);
}

void quasar::JapaneseDerivedEnumerator::~JapaneseDerivedEnumerator(void **this)
{
  void **v2;

  *this = &off_1E5D398D8;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)(this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  v2 = this + 7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = off_1E5D37CE8;
  v2 = this + 4;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::NameEnumerator::~NameEnumerator(this);
}

{
  quasar::JapaneseDerivedEnumerator::~JapaneseDerivedEnumerator(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::JapaneseDerivedEnumerator::preprocessWord(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *p_str;
  int *v10;
  int v11;
  std::basic_string<char32_t> *v12;
  unsigned int v13;
  int v14;
  int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int *v22;
  int *v23;
  int v24;
  int *v25;
  std::basic_string<char32_t>::size_type v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int *v33;
  std::basic_string<char32_t>::size_type v34;
  char *v35;
  size_t v36;
  void **v37;
  const void *v38;
  unint64_t v39;
  uint64_t v40;
  std::basic_string<char32_t>::size_type v41;
  char *v42;
  size_t v43;
  void **v44;
  const void *v45;
  unint64_t v46;
  uint64_t v47;
  std::basic_string<char32_t>::size_type v48;
  int *v49;
  std::basic_string<char32_t>::size_type v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  std::basic_string<char32_t>::size_type v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  unsigned int v61;
  void *__p[2];
  char v63;
  std::basic_string<char32_t> v64;
  void *v65;
  int *v66;
  int *v67;
  void *v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  std::basic_string<char32_t> __str;

  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = a2[1];
  v60 = a2;
  if ((v4 & 0x80u) != 0)
  {
    a2 = (uint64_t *)*a2;
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    v7 = a2;
    while (*v7 != 64)
    {
      ++v7;
      if (!--v6)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    memset(&__str, 0, sizeof(__str));
    v58 = a1 + 104;
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(a1 + 104, (int *)a2, (int *)((char *)a2 + v4), (std::basic_string<char32_t> *)v68);
    v59 = a3;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str.__r_.__value_.__r.__words[2] = v69;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v68;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    size = BYTE7(v69);
    if ((SBYTE7(v69) & 0x80u) == 0)
      p_str = &__str;
    else
      p_str = (std::basic_string<char32_t> *)__str.__r_.__value_.__r.__words[0];
    if (SBYTE7(v69) < 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      v10 = 0;
      v11 = 5;
      v12 = (std::basic_string<char32_t> *)((char *)p_str + 4 * size);
      do
      {
        v13 = p_str->__r_.__value_.__s.__data_[0];
        v14 = 1;
        if (p_str->__r_.__value_.__s.__data_[0] != 12540 && v13 - 12449 >= 0x5A)
        {
          if (v13 - 12352 >= 0x60)
          {
            v14 = 2;
            if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1AE18D040, (uint32x4_t)vaddq_s32(vdupq_n_s32(v13), (int32x4_t)xmmword_1AE18D030)))) & 1) == 0&& (v13 - 13312) >> 6 >= 0x67&& (v13 - 0x20000) >> 5 >= 0x537&& (v13 - 173824) >> 5 >= 0x89&& (v13 & 0xFFFFFF00) != 0x3300&& (v13 & 0xFFFFFF80) != 0x2E80)
            {
              if (v13 - 48 >= 0xA)
              {
                if (u_isalpha(p_str->__r_.__value_.__s.__data_[0]))
                  v14 = 4;
                else
                  v14 = 5;
                v10 = v66;
              }
              else
              {
                v14 = 3;
              }
            }
          }
          else
          {
            v14 = 0;
          }
        }
        if (v13 == 12540 && v11 == 0)
          v11 = 0;
        else
          v11 = v14;
        if (v10 >= v67)
        {
          v16 = (int *)v65;
          v17 = ((char *)v10 - (_BYTE *)v65) >> 2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = (char *)v67 - (_BYTE *)v65;
          if (((char *)v67 - (_BYTE *)v65) >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67, v20);
            v16 = (int *)v65;
            v10 = v66;
          }
          else
          {
            v21 = 0;
          }
          v22 = (int *)&v21[4 * v17];
          *v22 = v11;
          v23 = v22 + 1;
          while (v10 != v16)
          {
            v24 = *--v10;
            *--v22 = v24;
          }
          v65 = v22;
          v66 = v23;
          v67 = (int *)&v21[4 * v20];
          if (v16)
            operator delete(v16);
          v10 = v23;
        }
        else
        {
          *v10++ = v11;
        }
        v66 = v10;
        p_str = (std::basic_string<char32_t> *)((char *)p_str + 4);
      }
      while (p_str != v12);
      v25 = (int *)v65;
      v26 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      v27 = ((char *)v10 - (_BYTE *)v65) >> 2;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v26 = __str.__r_.__value_.__l.__size_;
      if (v27 != v26)
      {
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v72 = 0u;
        v70 = 0u;
        v71 = 0u;
        *(_OWORD *)v68 = 0u;
        v69 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Unable to get character type for some characters in the orthography", 67);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v68);
      }
      v28 = a3;
      if (v65 != v10)
      {
        v29 = 1;
        if ((unint64_t)((char *)v10 - (_BYTE *)v65) < 5)
        {
          v31 = 0;
        }
        else
        {
          v30 = 0;
          v31 = 0;
          do
          {
            v32 = v30;
            v33 = &v25[v30++];
            if (*v33 != v33[1])
            {
              if (*v33 < 3)
              {
                std::basic_string<char32_t>::basic_string(&v64, &__str, v31, v32 - v31 + 1, (std::allocator<char32_t> *)__p);
                v34 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
                if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v35 = (char *)&v64;
                else
                  v35 = (char *)v64.__r_.__value_.__r.__words[0];
                if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v34 = v64.__r_.__value_.__l.__size_;
                std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v58, v35, &v35[4 * v34], (std::string *)v68);
                if (*((char *)v60 + 47) >= 0)
                  v36 = *((unsigned __int8 *)v60 + 47);
                else
                  v36 = v60[4];
                std::string::basic_string[abi:ne180100]((uint64_t)__p, v36 + 8);
                if (v63 >= 0)
                  v37 = __p;
                else
                  v37 = (void **)__p[0];
                if (v36)
                {
                  if (*((char *)v60 + 47) >= 0)
                    v38 = v60 + 3;
                  else
                    v38 = (const void *)v60[3];
                  memmove(v37, v38, v36);
                }
                strcpy((char *)v37 + v36, "-derived");
                v61 = 1;
                v28 = v59;
                v39 = v59[1];
                if (v39 >= v59[2])
                {
                  v40 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string,std::string,int>(v59, (uint64_t)v68, (uint64_t)__p, &v61);
                }
                else
                {
                  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,std::string,int>((uint64_t)(v59 + 2), v59[1], (uint64_t)v68, (uint64_t)__p, &v61);
                  v40 = v39 + 80;
                  v59[1] = v39 + 80;
                }
                v59[1] = v40;
                if (v63 < 0)
                  operator delete(__p[0]);
                if (SBYTE7(v69) < 0)
                  operator delete(v68[0]);
                if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v64.__r_.__value_.__l.__data_);
                v25 = (int *)v65;
                v10 = v66;
              }
              v31 = v30;
            }
            v27 = v10 - v25;
          }
          while (v27 > v30 + 1);
          v29 = v30 + 1;
        }
        if (v27 != v29 - v31 && v25[v31] <= 2)
        {
          std::basic_string<char32_t>::basic_string(&v64, &__str, v31, v29 - v31, (std::allocator<char32_t> *)__p);
          v41 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v42 = (char *)&v64;
          else
            v42 = (char *)v64.__r_.__value_.__r.__words[0];
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v41 = v64.__r_.__value_.__l.__size_;
          std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v58, v42, &v42[4 * v41], (std::string *)v68);
          if (*((char *)v60 + 47) >= 0)
            v43 = *((unsigned __int8 *)v60 + 47);
          else
            v43 = v60[4];
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v43 + 8);
          if (v63 >= 0)
            v44 = __p;
          else
            v44 = (void **)__p[0];
          if (v43)
          {
            if (*((char *)v60 + 47) >= 0)
              v45 = v60 + 3;
            else
              v45 = (const void *)v60[3];
            memmove(v44, v45, v43);
          }
          strcpy((char *)v44 + v43, "-derived");
          v61 = 1;
          v46 = v28[1];
          if (v46 >= v28[2])
          {
            v47 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string,std::string,int>(v28, (uint64_t)v68, (uint64_t)__p, &v61);
          }
          else
          {
            std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,std::string,int>((uint64_t)(v28 + 2), v28[1], (uint64_t)v68, (uint64_t)__p, &v61);
            v47 = v46 + 80;
            v28[1] = v46 + 80;
          }
          v28[1] = v47;
          if (v63 < 0)
            operator delete(__p[0]);
          if (SBYTE7(v69) < 0)
            operator delete(v68[0]);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v64.__r_.__value_.__l.__data_);
          v25 = (int *)v65;
        }
        v48 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v48 = __str.__r_.__value_.__l.__size_;
        if (v48 == 4)
        {
          if (v25 == v66)
          {
LABEL_130:
            std::basic_string<char32_t>::basic_string(&v64, &__str, 0, 2uLL, (std::allocator<char32_t> *)__p);
            v50 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v51 = (char *)&v64;
            else
              v51 = (char *)v64.__r_.__value_.__r.__words[0];
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v50 = v64.__r_.__value_.__l.__size_;
            std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v58, v51, &v51[4 * v50], (std::string *)v68);
            LODWORD(__p[0]) = 1;
            v52 = v28[1];
            if (v52 >= v28[2])
            {
              v53 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string,char const(&)[22],int>(v28, (uint64_t)v68, "\\contact-last-derived", (unsigned int *)__p);
            }
            else
            {
              std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,char const(&)[22],int>((_DWORD)v28 + 16, v28[1], (uint64_t)v68, "\\contact-last-derived", (unsigned int *)__p);
              v53 = v52 + 80;
              v28[1] = v52 + 80;
            }
            v28[1] = v53;
            if (SBYTE7(v69) < 0)
              operator delete(v68[0]);
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v64.__r_.__value_.__l.__data_);
            std::basic_string<char32_t>::basic_string(&v64, &__str, 2uLL, 2uLL, (std::allocator<char32_t> *)__p);
            v54 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v55 = (char *)&v64;
            else
              v55 = (char *)v64.__r_.__value_.__r.__words[0];
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v54 = v64.__r_.__value_.__l.__size_;
            std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(v58, v55, &v55[4 * v54], (std::string *)v68);
            LODWORD(__p[0]) = 1;
            v56 = v28[1];
            if (v56 >= v28[2])
            {
              v57 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string,char const(&)[23],int>(v28, (uint64_t)v68, "\\contact-first-derived", (unsigned int *)__p);
            }
            else
            {
              std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,char const(&)[23],int>((_DWORD)v28 + 16, v28[1], (uint64_t)v68, "\\contact-first-derived", (unsigned int *)__p);
              v57 = v56 + 80;
              v28[1] = v56 + 80;
            }
            v28[1] = v57;
            if (SBYTE7(v69) < 0)
              operator delete(v68[0]);
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v64.__r_.__value_.__l.__data_);
            v25 = (int *)v65;
          }
          else
          {
            v49 = v25;
            while (*v49 == 2)
            {
              if (++v49 == v66)
                goto LABEL_130;
            }
          }
        }
      }
      if (v25)
      {
        v66 = v25;
        operator delete(v25);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1ADEFA19C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = v0;
  JUMPOUT(0x1ADEFA1ACLL);
}

void sub_1ADEFA2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  uint64_t v61;

  if (__p)
    operator delete(__p);
  if (*(char *)(v61 - 105) < 0)
    operator delete(a61);
  _Unwind_Resume(exception_object);
}

void quasar::JapaneseDerivedEnumerator::preprocess(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21[2];
  __int128 v22;
  __int128 v23;
  void *__p[2];
  __int128 v25;
  _OWORD v26[12];
  uint64_t *v27;
  _QWORD *v28[2];

  v28[0] = 0;
  v28[1] = 0;
  v27 = (uint64_t *)v28;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v5 = *a2 + 24;
    do
    {
      std::pair<std::string,quasar::LmeDataFactoryBase::Word>::pair[abi:ne180100]<true,0>((std::string *)v21, (__int128 *)v5, (__int128 *)(v5 - 24));
      std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::LmeDataFactoryBase::Word>>(&v27, (const void **)v21, (__int128 *)v21);
      v7 = v6;
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v26, *((char **)&v26[0] + 1));
      if (SBYTE7(v25) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v23) < 0)
        operator delete(*((void **)&v22 + 1));
      if (SBYTE7(v22) < 0)
        operator delete(v21[0]);
      if ((v7 & 1) == 0)
      {
        memset(v26, 0, sizeof(v26));
        *(_OWORD *)__p = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        *(_OWORD *)v21 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Tag with multiple words: ", 25);
        v18 = *(char *)(v5 + 23);
        if (v18 >= 0)
          v19 = v5;
        else
          v19 = *(_QWORD *)v5;
        if (v18 >= 0)
          v20 = *(unsigned __int8 *)(v5 + 23);
        else
          v20 = *(_QWORD *)(v5 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v21);
      }
      v8 = v5 + 56;
      v5 += 80;
    }
    while (v8 != v4);
  }
  std::string::basic_string[abi:ne180100]<0>(v21, "\\contact-first");
  v9 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)v21);
  if (SBYTE7(v22) < 0)
    operator delete(v21[0]);
  if (v28 != (_QWORD **)v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "\\contact-first-phonetic");
    v10 = (_QWORD **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)v21);
    if (SBYTE7(v22) < 0)
      operator delete(v21[0]);
    if (v28 != v10)
    {
      LODWORD(v21[0]) = 1;
      v11 = a2[1];
      if (v11 >= a2[2])
      {
        v12 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,char const(&)[23],int>(a2, v9 + 56, "\\contact-first-derived", (unsigned int *)v21);
      }
      else
      {
        std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,char const(&)[23],int>((_DWORD)a2 + 16, a2[1], v9 + 56, "\\contact-first-derived", (unsigned int *)v21);
        v12 = v11 + 80;
        a2[1] = v11 + 80;
      }
      a2[1] = v12;
    }
    quasar::JapaneseDerivedEnumerator::preprocessWord(a1, (uint64_t *)(v9 + 56), a2);
  }
  std::string::basic_string[abi:ne180100]<0>(v21, "\\contact-last");
  v13 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)v21);
  if (SBYTE7(v22) < 0)
    operator delete(v21[0]);
  if (v28 != (_QWORD **)v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "\\contact-last-phonetic");
    v14 = (_QWORD **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v27, (const void **)v21);
    if (SBYTE7(v22) < 0)
      operator delete(v21[0]);
    if (v28 != v14)
    {
      LODWORD(v21[0]) = 1;
      v15 = a2[1];
      if (v15 >= a2[2])
      {
        v16 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,char const(&)[22],int>(a2, v13 + 56, "\\contact-last-derived", (unsigned int *)v21);
      }
      else
      {
        std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,char const(&)[22],int>((_DWORD)a2 + 16, a2[1], v13 + 56, "\\contact-last-derived", (unsigned int *)v21);
        v16 = v15 + 80;
        a2[1] = v15 + 80;
      }
      a2[1] = v16;
    }
    quasar::JapaneseDerivedEnumerator::preprocessWord(a1, (uint64_t *)(v13 + 56), a2);
  }
  std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word>>>::destroy((uint64_t)&v27, v28[0]);
}

void sub_1ADEFA660()
{
  JUMPOUT(0x1ADEFA678);
}

void sub_1ADEFA66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,quasar::LmeDataFactoryBase::Word>::~pair((uint64_t)&a9);
  JUMPOUT(0x1ADEFA678);
}

void quasar::JapaneseDerivedEnumerator::addDerivedEnumerations(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  void *p_p;
  uint64_t v18;
  uint64_t j;
  __int128 *v20;
  __int128 *k;
  __int128 v22;
  void *v23;
  uint64_t v24;
  uint64_t m;
  __int128 *i;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *__p;
  uint64_t v31;
  unsigned __int8 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  std::string *v50;
  uint64_t v51;
  std::string v52;
  std::string v53;
  std::string v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a3 + 23) >= 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  v10 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a4, a2);
  v11 = v10;
  if (v9)
  {
    v27 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a4, (const void **)a3);
    if (a4 + 8 != v11 && a4 + 8 != v27)
    {
      v12 = *(__int128 **)(v11 + 56);
      for (i = *(__int128 **)(v11 + 64); v12 != i; v12 += 5)
      {
        v13 = *(__int128 **)(v27 + 56);
        v14 = *(__int128 **)(v27 + 64);
        while (v13 != v14)
        {
          std::to_string(&v52, *(float *)(a1 + 296) * (float)*((int *)v12 + 12));
          if (*((char *)v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
          }
          else
          {
            v15 = *v12;
            v53.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
            *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v15;
          }
          if (*((char *)v13 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
          }
          else
          {
            v16 = *v13;
            v54.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
            *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v16;
          }
          v50 = &v52;
          v51 = 3;
          if (quasar::gLogLevel >= 6)
          {
            v48 = 0u;
            v49 = 0u;
            v46 = 0u;
            v47 = 0u;
            v44 = 0u;
            v45 = 0u;
            v42 = 0u;
            v43 = 0u;
            v40 = 0u;
            v41 = 0u;
            v39 = 0u;
            v37 = 0u;
            v38 = 0u;
            v35 = 0u;
            v36 = 0u;
            v33 = 0u;
            v34 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
            v28 = " ";
            v29 = 1;
            quasar::join<std::initializer_list<std::string>>((uint64_t *)&v50, (uint64_t *)&v28);
            if ((v32 & 0x80u) == 0)
              p_p = &__p;
            else
              p_p = __p;
            if ((v32 & 0x80u) == 0)
              v18 = v32;
            else
              v18 = v31;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)p_p, v18);
            if ((char)v32 < 0)
              operator delete(__p);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
          }
          std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_impl<std::initializer_list<std::string>>(a5, (uint64_t)&v50);
          for (j = 0; j != -9; j -= 3)
          {
            if (SHIBYTE(v54.__r_.__value_.__r.__words[j + 2]) < 0)
              operator delete(*(void **)((char *)&v54.__r_.__value_.__l.__data_ + j * 8));
          }
          v13 += 5;
        }
      }
    }
  }
  else if (a4 + 8 != v10)
  {
    v20 = *(__int128 **)(v10 + 56);
    for (k = *(__int128 **)(v10 + 64); v20 != k; v20 += 5)
    {
      std::to_string(&v52, *(float *)(a1 + 296) * (float)*((int *)v20 + 12));
      if (*((char *)v20 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
      }
      else
      {
        v22 = *v20;
        v53.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v22;
      }
      v50 = &v52;
      v51 = 2;
      if (quasar::gLogLevel >= 6)
      {
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
        v28 = " ";
        v29 = 1;
        quasar::join<std::initializer_list<std::string>>((uint64_t *)&v50, (uint64_t *)&v28);
        if ((v32 & 0x80u) == 0)
          v23 = &__p;
        else
          v23 = __p;
        if ((v32 & 0x80u) == 0)
          v24 = v32;
        else
          v24 = v31;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)v23, v24);
        if ((char)v32 < 0)
          operator delete(__p);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
      }
      std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_impl<std::initializer_list<std::string>>(a5, (uint64_t)&v50);
      for (m = 0; m != -6; m -= 3)
      {
        if (SHIBYTE(v53.__r_.__value_.__r.__words[m + 2]) < 0)
          operator delete(*(void **)((char *)&v52 + m * 8 + 24));
      }
    }
  }
}

void sub_1ADEFAA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 153) < 0)
    operator delete(*(void **)(v20 - 176));
  _Unwind_Resume(exception_object);
}

void quasar::JapaneseDerivedEnumerator::addEnumerations(uint64_t a1, __int128 **a2, uint64_t **a3)
{
  __int128 *v6;
  __int128 *v7;
  BOOL v8;
  char v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t *v12;
  std::string *v13;
  uint64_t p_size;
  const void **v15;
  const void **v16;
  const void **v17;
  void *__p[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 *v35;

  if (quasar::gLogLevel >= 6)
  {
    v6 = *a2;
    v7 = a2[1];
    if (*a2 != v7)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "-derived");
        v8 = quasar::endsWith((uint64_t *)v6 + 3, (uint64_t *)__p);
        if (SBYTE7(v19) < 0)
          operator delete(__p[0]);
        v9 = quasar::gLogLevel < 6 || v8;
        if ((v9 & 1) == 0)
        {
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          v27 = 0u;
          v28 = 0u;
          v25 = 0u;
          v26 = 0u;
          v23 = 0u;
          v24 = 0u;
          v21 = 0u;
          v22 = 0u;
          v19 = 0u;
          v20 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          quasar::operator<<(__p, (uint64_t)v6);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
        }
        v6 += 5;
      }
      while (v6 != v7);
    }
  }
  quasar::SimpleNameEnumerator::addEnumerations(a1, a2, a3);
  __p[1] = 0;
  *(_QWORD *)&v19 = 0;
  __p[0] = &__p[1];
  v10 = *a2;
  v11 = a2[1];
  if (*a2 != v11)
  {
    do
    {
      v35 = (__int128 *)((char *)v10 + 24);
      v12 = std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)__p, (const void **)v10 + 3, (uint64_t)&std::piecewise_construct, &v35);
      v13 = (std::string *)v12[8];
      if ((unint64_t)v13 >= v12[9])
      {
        p_size = std::vector<quasar::LmeDataFactoryBase::Word>::__push_back_slow_path<quasar::LmeDataFactoryBase::Word const&>(v12 + 7, v10);
      }
      else
      {
        std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>((_DWORD)v12 + 72, v13, v10);
        p_size = (uint64_t)&v13[3].__r_.__value_.__l.__size_;
        v12[8] = (uint64_t)&v13[3].__r_.__value_.__l.__size_;
      }
      v12[8] = p_size;
      v10 += 5;
    }
    while (v10 != v11);
  }
  v15 = *(const void ***)(a1 + 56);
  v16 = *(const void ***)(a1 + 64);
  while (v15 != v16)
  {
    v17 = v15 + 3;
    quasar::JapaneseDerivedEnumerator::addDerivedEnumerations(a1, v15, (uint64_t)(v15 + 3), (uint64_t)__p, a3);
    v15 = v17 + 3;
  }
  std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
}

void sub_1ADEFAD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADEFAD8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[23],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADEFADDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string,std::string,int>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v10 = 0x333333333333333;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[80 * v5];
  v17 = &v11[80 * v10];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,std::string,int>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v14);
  return v12;
}

void sub_1ADEFAF08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,std::string,int>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)v7 = *(_OWORD *)a3;
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)__p = *(_OWORD *)a4;
  v6 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  quasar::LmeDataFactoryBase::Word::Word(a2, v7, __p, *a5);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
}

void sub_1ADEFAFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::allocator<quasar::PersonalizedLmData>::construct[abi:ne180100]<quasar::PersonalizedLmData,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,BOOL,BOOL>((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string,char const(&)[22],int>(uint64_t *a1, uint64_t a2, char *a3, unsigned int *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v10 = 0x333333333333333;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[80 * v5];
  v17 = &v11[80 * v10];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,char const(&)[22],int>((_DWORD)a1 + 16, (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v14);
  return v12;
}

void sub_1ADEFB0D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,char const(&)[22],int>(int a1, uint64_t a2, uint64_t a3, char *__s, unsigned int *a5)
{
  void *__p[2];
  char v8;
  void *v9[2];
  uint64_t v10;

  *(_OWORD *)v9 = *(_OWORD *)a3;
  v10 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::LmeDataFactoryBase::Word::Word(a2, v9, __p, *a5);
  if (v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
}

void sub_1ADEFB168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string,char const(&)[23],int>(uint64_t *a1, uint64_t a2, char *a3, unsigned int *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v10 = 0x333333333333333;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[80 * v5];
  v17 = &v11[80 * v10];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,char const(&)[23],int>((_DWORD)a1 + 16, (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v14);
  return v12;
}

void sub_1ADEFB2AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string,char const(&)[23],int>(int a1, uint64_t a2, uint64_t a3, char *__s, unsigned int *a5)
{
  void *__p[2];
  char v8;
  void *v9[2];
  uint64_t v10;

  *(_OWORD *)v9 = *(_OWORD *)a3;
  v10 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::LmeDataFactoryBase::Word::Word(a2, v9, __p, *a5);
  if (v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
}

void sub_1ADEFB340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,char const(&)[23],int>(uint64_t *a1, uint64_t a2, char *a3, unsigned int *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v10 = 0x333333333333333;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[80 * v5];
  v17 = &v11[80 * v10];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,char const(&)[23],int>((_DWORD)a1 + 16, (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v14);
  return v12;
}

void sub_1ADEFB484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,char const(&)[23],int>(int a1, uint64_t a2, uint64_t a3, char *__s, unsigned int *a5)
{
  void *__p[2];
  char v9;
  std::string v10;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v10 = *(std::string *)a3;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::LmeDataFactoryBase::Word::Word(a2, &v10, __p, *a5);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_1ADEFB534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string &,char const(&)[22],int>(uint64_t *a1, uint64_t a2, char *a3, unsigned int *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v10 = 0x333333333333333;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[80 * v5];
  v17 = &v11[80 * v10];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,char const(&)[22],int>((_DWORD)a1 + 16, (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v14);
  return v12;
}

void sub_1ADEFB678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string &,char const(&)[22],int>(int a1, uint64_t a2, uint64_t a3, char *__s, unsigned int *a5)
{
  void *__p[2];
  char v9;
  std::string v10;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v10 = *(std::string *)a3;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::LmeDataFactoryBase::Word::Word(a2, &v10, __p, *a5);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_1ADEFB728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void kaldi::LatticeScoreCache::~LatticeScoreCache(kaldi::LatticeScoreCache *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  void **v6[35];

  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    v2 = *(_QWORD *)this;
    v3 = *((_QWORD *)this + 1);
    if (*(_QWORD *)this != v3)
    {
      v4 = 0;
      do
      {
        v4 += *(_DWORD *)(v2 + 24);
        v2 += 40;
      }
      while (v2 != v3);
    }
    if (kaldi::g_kaldi_verbose_level > 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v6, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Lattice score cache indices = ", 30);
      v5 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" vals = ", 8);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v6);
    }
  }
  v6[0] = (void **)this;
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100](v6);
}

float *kaldi::LatticeScoreCache::CacheScore(kaldi::LatticeScoreCache *this, int a2, int a3, float a4)
{
  uint64_t v5;
  float *result;
  int v9;
  int *v10;

  v9 = a3;
  v5 = *(_QWORD *)this;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) <= a2)
  {
    std::vector<std::unordered_map<int,float>>::resize((uint64_t *)this, a2 + 1);
    v5 = *(_QWORD *)this;
  }
  v10 = &v9;
  result = (float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v5 + 40 * a2, &v9, (uint64_t)&std::piecewise_construct, &v10);
  result[5] = a4;
  return result;
}

uint64_t std::vector<std::unordered_map<int,float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  result = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((result - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return std::vector<std::unordered_map<int,float>>::__append(a1, v6);
  if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (result != v7)
      result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(result - 40);
    a1[1] = v7;
  }
  return result;
}

float kaldi::LatticeScoreCache::GetScore(kaldi::LatticeScoreCache *this, unsigned int a2, int a3)
{
  uint64_t *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v8[34];
  int v9;

  v9 = a3;
  if ((a2 & 0x80000000) != 0 || 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) <= a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Supplied frame ", 15);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" is out of range of cache which is in [0,", 41);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, ")");
    goto LABEL_7;
  }
  v3 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(*(_QWORD *)this + 40 * a2), &v9);
  if (!v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Pdf ", 4);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" is not in cache for frame ", 27);
    std::ostream::operator<<();
LABEL_7:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return *((float *)v3 + 5);
}

uint64_t *kaldi::LatticeScoreCache::ScaleAcousticScores(uint64_t *this, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  float *i;

  v2 = *this;
  v3 = this[1];
  v4 = v3 - *this;
  if (v3 != *this)
  {
    v5 = 0;
    v6 = v4 / 40;
    if (v6 <= 1)
      v6 = 1;
    do
    {
      for (i = *(float **)(v2 + 40 * v5 + 16); i; i = *(float **)i)
        i[5] = i[5] * a2;
      ++v5;
    }
    while (v5 != v6);
  }
  return this;
}

uint64_t std::vector<std::unordered_map<int,float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 40 * a2;
      do
      {
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 1065353216;
        v7 += 40;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[40 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[40 * v11];
    v15 = &v14[40 * a2];
    do
    {
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 8) = 1065353216;
      v14 += 40;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1ADEFBC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::PhraseBookOptions::options@<X0>(quasar::PhraseBookOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x40uLL);
  a2[1] = result + 8;
  a2[2] = result + 8;
  *result = (char *)this + 16;
  result[1] = (char *)this + 160;
  result[2] = (char *)this + 320;
  result[3] = (char *)this + 464;
  result[4] = (char *)this + 608;
  result[5] = (char *)this + 768;
  result[6] = (char *)this + 912;
  result[7] = (char *)this + 1072;
  *a2 = result;
  return result;
}

double quasar::PhraseBookFactory::createPhraseBook@<D0>(std::string *this@<X0>, std::string::value_type a2@<W1>, __int128 *a3@<X2>, unsigned __int8 a4@<W3>, _OWORD *a5@<X8>)
{
  std::string::size_type size;
  std::string::size_type v11;
  double result;
  _OWORD v13[17];

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    size = this->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (!std::string::compare(this, size - 5, 5uLL, ".dict"))
  {
    quasar::SharedPhraseBook::getPhraseBook((uint64_t)this, a2, a3, a4, (uint64_t *)v13);
  }
  else
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      v11 = this->__r_.__value_.__l.__size_;
    else
      v11 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (std::string::compare(this, v11 - 3, 3uLL, ".db"))
    {
      memset(v13, 0, sizeof(v13));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Phrasebook file type unknown");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v13);
    }
    quasar::DatabasePhraseBook::getPhraseBook((uint64_t)this, a2, (uint64_t)a3, v13);
  }
  result = *(double *)v13;
  *a5 = v13[0];
  return result;
}

void quasar::PhraseBookBlock::updateConfiguration(_QWORD *a1, const quasar::SystemConfig *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  const std::string *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a1 + 21;
  quasar::ProcessingBlock::updateConfiguration((uint64_t)a1 + *(_QWORD *)(*a1 - 24), a2, a3, a4);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v6 = (const std::string *)quasar::OptionValue<std::string>::value(v5);
  kaldi::SplitStringToVector(v6, ",", 1, (uint64_t)&v12);
  v7 = v12;
  for (i = v13; v7 != i; v7 += 24)
  {
    if (*(char *)(v7 + 23) < 0)
      v9 = *(_QWORD *)(v7 + 8);
    else
      v9 = *(unsigned __int8 *)(v7 + 23);
    if (!std::string::compare((const std::string *)v7, v9 - 3, 3uLL, ".db"))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "DatabasePhraseBook");
      quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 238, 0, (uint64_t)__p);
      if (v11 < 0)
        operator delete(__p[0]);
    }
  }
  __p[0] = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADEFBEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::PhraseBookBlock::updateConfiguration(_QWORD *a1, const quasar::SystemConfig *a2, uint64_t a3, uint64_t a4)
{
  quasar::PhraseBookBlock::updateConfiguration((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 48)), a2, a3, a4);
}

void quasar::PhraseBookBlock::init(quasar::PhraseBookBlock *this)
{
  uint64_t v2;
  int v3;
  const std::string *v5;
  __int128 *v6;
  __int128 *v7;
  int64x2_t *v8;
  __int128 v9;
  int v10;
  __int128 *v11;
  unsigned __int8 *v12;
  _OWORD *v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  __int128 v26;
  int64x2_t v27;
  uint64_t v28;
  std::string __p;
  __int128 v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 **v34;
  int64x2_t v35;
  uint64_t v36;
  char *v37;

  v2 = quasar::OptionValue<std::string>::value((_QWORD *)this + 77);
  v3 = *(char *)(v2 + 23);
  if (v3 < 0)
  {
    if (*(_QWORD *)(v2 + 8) != 7)
      goto LABEL_10;
    v2 = *(_QWORD *)v2;
  }
  else if (v3 != 7)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v2 == 1634953572 && *(_DWORD *)(v2 + 3) == 1701601889)
  {
    *((_BYTE *)this + 1248) = 1;
    return;
  }
LABEL_10:
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v5 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)this + 21);
  kaldi::SplitStringToVector(v5, ",", 1, (uint64_t)&v31);
  v6 = v31;
  v7 = v32;
  if (v31 != v32)
  {
    v8 = (int64x2_t *)((char *)this + 1224);
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v9 = *v6;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      v10 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 3);
      v11 = (__int128 *)quasar::OptionValue<std::string>::value((_QWORD *)this + 115);
      v12 = (unsigned __int8 *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 135);
      quasar::PhraseBookFactory::createPhraseBook(&__p, v10 != 0, v11, *v12, &v30);
      v13 = (_OWORD *)*((_QWORD *)this + 154);
      v14 = *((_QWORD *)this + 155);
      if ((unint64_t)v13 >= v14)
      {
        v16 = ((uint64_t)v13 - v8->i64[0]) >> 4;
        if ((unint64_t)(v16 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = v14 - v8->i64[0];
        v18 = v17 >> 3;
        if (v17 >> 3 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        v37 = (char *)this + 1240;
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 1240, v19);
        v22 = &v20[16 * v16];
        *(_OWORD *)v22 = v30;
        v30 = 0uLL;
        v23 = (_QWORD *)*((_QWORD *)this + 154);
        v24 = (_QWORD *)*((_QWORD *)this + 153);
        if (v23 == v24)
        {
          v27 = vdupq_n_s64((unint64_t)v23);
          v25 = &v20[16 * v16];
        }
        else
        {
          v25 = &v20[16 * v16];
          do
          {
            v26 = *((_OWORD *)v23 - 1);
            v23 -= 2;
            *((_OWORD *)v25 - 1) = v26;
            v25 -= 16;
            *v23 = 0;
            v23[1] = 0;
          }
          while (v23 != v24);
          v27 = *v8;
        }
        v15 = v22 + 16;
        *((_QWORD *)this + 153) = v25;
        *((_QWORD *)this + 154) = v22 + 16;
        v35 = v27;
        v28 = *((_QWORD *)this + 155);
        *((_QWORD *)this + 155) = &v20[16 * v21];
        v36 = v28;
        v34 = (__int128 **)v27.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v34);
      }
      else
      {
        *v13 = v30;
        v15 = v13 + 1;
      }
      *((_QWORD *)this + 154) = v15;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v6 = (__int128 *)((char *)v6 + 24);
    }
    while (v6 != v7);
  }
  v34 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
}

void sub_1ADEFC16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, uint64_t a17, char a18)
{
  a16 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::PhraseBookBlock::init(quasar::PhraseBookBlock *this)
{
  quasar::PhraseBookBlock::init((quasar::PhraseBookBlock *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)));
}

void quasar::PhraseBookBlock::process(uint64_t a1, uint64_t a2, quasar::TranslationPhraseInternal **a3)
{
  _QWORD *v4;
  quasar::TranslationPhraseInternal *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (***v9)(std::pair<std::string, std::string> **__return_ptr);
  int v10;
  int *v11;
  __int128 v12;
  BOOL v13;
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  __int128 v15;
  _QWORD *v16;
  const std::string *v17;
  const std::string *v18;
  std::string::size_type size;
  std::string::size_type v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  std::string *v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  std::string::__raw *p_second;
  std::string::size_type v35;
  __int128 v36;
  unint64_t v37;
  std::string *v38;
  std::string *v39;
  uint64_t v40;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  _QWORD *v42;
  int v43;
  void *v44[2];
  char v45;
  std::string v46;
  uint64_t **v47[8];
  std::string v48;
  std::string v49;
  uint64_t v50;
  std::string __p;
  uint64_t v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  std::string v59;
  std::string *v60;
  std::string *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t **v64;
  const std::string *v65;
  const std::string *v66;
  uint64_t v67;
  uint64_t v68;
  std::string *v69;
  unint64_t v70;
  std::vector<std::pair<std::string, std::string>> v71;
  void *v72[2];
  char v73;

  v4 = (_QWORD *)a1;
  if (*(_BYTE *)(a1 + 1248) || (v5 = *a3, *a3 == a3[1]) || !*((_BYTE *)v5 + 128))
  {
    quasar::ProcessingBlock::send((uint64_t)v4 + *(_QWORD *)(*v4 - 24), (uint64_t)a3, 0);
    return;
  }
  quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v72, v5);
  memset(&v71, 0, sizeof(v71));
  v6 = v4[153];
  v7 = v4[154];
  if (v6 == v7)
    goto LABEL_102;
  v8 = v6 + 16;
  do
  {
    v9 = *(void (****)(std::pair<std::string, std::string> **__return_ptr))(v8 - 16);
    v10 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value(v4 + 97);
    v11 = (int *)quasar::OptionValue<int>::value(v4 + 41);
    quasar::GenericPhraseBook::lookup(v9, v10 != 0, *v11, (std::vector<std::pair<std::string, std::string>> *)&v59);
    std::vector<std::pair<std::string,std::string>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string>*>,std::__wrap_iter<std::pair<std::string,std::string>*>>(&v71, v71.__end_, (std::string *)v59.__r_.__value_.__l.__data_, (__int128 *)v59.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59.__r_.__value_.__l.__size_ - v59.__r_.__value_.__r.__words[0]) >> 4));
    v12 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    if ((_QWORD)v12 != *((_QWORD *)&v12 + 1))
      break;
    v13 = v8 == v7;
    v8 += 16;
  }
  while (!v13);
  v42 = v4 + 41;
  begin = v71.__begin_;
  end = v71.__end_;
  if (v71.__begin_ == v71.__end_)
  {
LABEL_102:
    quasar::ProcessingBlock::send((uint64_t)v4 + *(_QWORD *)(*v4 - 24), (uint64_t)a3, 0);
    goto LABEL_103;
  }
  v43 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  while (v43 < *(_DWORD *)quasar::OptionValue<int>::value(v42))
  {
    v65 = 0;
    v66 = 0;
    v67 = 0;
    if (SHIBYTE(begin->first.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v59, begin->first.__r_.__value_.__l.__data_, begin->first.__r_.__value_.__l.__size_);
    }
    else
    {
      v15 = *(_OWORD *)&begin->first.__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = begin->first.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v15;
    }
    kaldi::SplitStringToVector(&v59, " ", 1, (uint64_t)&v65);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    v16 = v4;
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v59);
    v63 = 0;
    HIDWORD(v59.__r_.__value_.__r.__words[0]) = 1148846080;
    v18 = v65;
    v17 = v66;
    while (v18 != v17)
    {
      memset(&__p, 0, sizeof(__p));
      memset(&v49, 0, sizeof(v49));
      LOWORD(v50) = 0;
      v52 = 3212836864;
      v53 = -1;
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0;
      v58 = -1;
      std::string::operator=(&v49, v18);
      LOBYTE(v50) = 1;
      *((_QWORD *)&v55 + 1) = 0;
      LODWORD(v52) = 1148846080;
      size = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        v21 = (void *)__p.__r_.__value_.__r.__words[0];
        v22 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v24 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v23)
          v23 = v24 >> 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v25);
          size = __p.__r_.__value_.__l.__size_;
          v21 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[4 * v22];
        *(_DWORD *)v27 = -1;
        v20 = (std::string::size_type)(v27 + 4);
        while ((void *)size != v21)
        {
          v28 = *(_DWORD *)(size - 4);
          size -= 4;
          *((_DWORD *)v27 - 1) = v28;
          v27 -= 4;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
        __p.__r_.__value_.__l.__size_ = v20;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v26[4 * v25];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_DWORD *)__p.__r_.__value_.__l.__size_ = -1;
        v20 = size + 4;
      }
      __p.__r_.__value_.__l.__size_ = v20;
      v29 = v61;
      if ((unint64_t)v61 >= v62)
      {
        v30 = (std::string *)std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)&v60, (const quasar::TranslationTokenInternal *)&v49);
      }
      else
      {
        quasar::TranslationTokenInternal::TranslationTokenInternal(v61, (const quasar::TranslationTokenInternal *)&v49);
        v30 = (std::string *)((char *)v29 + 136);
      }
      v61 = v30;
      if ((_QWORD)v56)
      {
        *((_QWORD *)&v56 + 1) = v56;
        operator delete((void *)v56);
      }
      if (SBYTE7(v55) < 0)
        operator delete((void *)v54);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      ++v18;
    }
    if (v60 != v61)
      v61[-5].__r_.__value_.__s.__data_[8] = 0;
    v31 = quasar::MetaInfo::get((quasar::TranslationPhraseInternal *)((char *)*a3 + 192));
    v32 = v31;
    LODWORD(v49.__r_.__value_.__l.__data_) = *(_DWORD *)v31;
    if (*(char *)(v31 + 31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v49.__r_.__value_.__r.__words[1], *(const std::string::value_type **)(v31 + 8), *(_QWORD *)(v31 + 16));
    }
    else
    {
      v33 = *(_OWORD *)(v31 + 8);
      v50 = *(_QWORD *)(v31 + 24);
      *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = v33;
    }
    memset(&__p, 0, sizeof(__p));
    std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&__p, *(_QWORD *)(v32 + 32), *(_QWORD *)(v32 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v32 + 40) - *(_QWORD *)(v32 + 32)) >> 3));
    LOBYTE(v52) = *(_BYTE *)(v32 + 56);
    p_second = (std::string::__raw *)&begin->second;
    if ((SHIBYTE(begin->second.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v35 = HIBYTE(begin->second.__r_.__value_.__r.__words[2]);
      v4 = v16;
      if (!*((_BYTE *)&begin->second.__r_.__value_.__s + 23))
        goto LABEL_59;
      goto LABEL_58;
    }
    v35 = begin->second.__r_.__value_.__l.__size_;
    v4 = v16;
    if (v35)
    {
      p_second = (std::string::__raw *)p_second->__words[0];
LABEL_58:
      quasar::MetaInfo::fromJson(p_second, v35, (quasar::MetaInfo *)v47);
      quasar::MetaInfo::update(&v64, v47);
      quasar::MetaInfo::~MetaInfo((quasar::MetaInfo::Impl **)v47);
    }
LABEL_59:
    std::string::basic_string[abi:ne180100]<0>(&v48, "input");
    quasar::PTree::PTree(v47, v72);
    quasar::PTree::putChild((uint64_t)&v49, (uint64_t)&v48, (uint64_t)v47, 1);
    quasar::PTree::~PTree((quasar::PTree *)v47);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v48, "output");
    if (SHIBYTE(begin->first.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v46, begin->first.__r_.__value_.__l.__data_, begin->first.__r_.__value_.__l.__size_);
    }
    else
    {
      v36 = *(_OWORD *)&begin->first.__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = begin->first.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v36;
    }
    quasar::PTree::PTree(v47, &v46);
    quasar::PTree::putChild((uint64_t)&v49, (uint64_t)&v48, (uint64_t)v47, 1);
    quasar::PTree::~PTree((quasar::PTree *)v47);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v48, "cost");
    std::string::basic_string[abi:ne180100]<0>(&v46, "0,0");
    quasar::PTree::PTree(v47, &v46);
    quasar::PTree::putChild((uint64_t)&v49, (uint64_t)&v48, (uint64_t)v47, 1);
    quasar::PTree::~PTree((quasar::PTree *)v47);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v48, "norm_cost");
    std::string::basic_string[abi:ne180100]<0>(&v46, "0");
    quasar::PTree::PTree(v47, &v46);
    quasar::PTree::putChild((uint64_t)&v49, (uint64_t)&v48, (uint64_t)v47, 1);
    quasar::PTree::~PTree((quasar::PTree *)v47);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v48, "status");
    std::string::basic_string[abi:ne180100]<0>(&v46, "phrasebook_exact");
    quasar::PTree::PTree(v47, &v46);
    quasar::PTree::putChild((uint64_t)&v49, (uint64_t)&v48, (uint64_t)v47, 1);
    quasar::PTree::~PTree((quasar::PTree *)v47);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v48, "1000");
    if (0xF0F0F0F0F0F0F0F1 * (((char *)v61 - (char *)v60) >> 3) >= 2)
    {
      v37 = 1;
      do
      {
        std::string::append(&v48, " 1000");
        ++v37;
      }
      while (0xF0F0F0F0F0F0F0F1 * (((char *)v61 - (char *)v60) >> 3) > v37);
    }
    std::string::basic_string[abi:ne180100]<0>(&v46, "word confidences");
    quasar::PTree::PTree(v47, &v48);
    quasar::PTree::putChild((uint64_t)&v49, (uint64_t)&v46, (uint64_t)v47, 1);
    quasar::PTree::~PTree((quasar::PTree *)v47);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v46, "sentence confidence");
    std::string::basic_string[abi:ne180100]<0>(v44, "1000");
    quasar::PTree::PTree(v47, v44);
    quasar::PTree::putChild((uint64_t)&v49, (uint64_t)&v46, (uint64_t)v47, 1);
    quasar::PTree::~PTree((quasar::PTree *)v47);
    if (v45 < 0)
      operator delete(v44[0]);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v46, "low confidence");
    std::string::basic_string[abi:ne180100]<0>(v44, "false");
    quasar::PTree::PTree(v47, v44);
    quasar::PTree::putChild((uint64_t)&v49, (uint64_t)&v46, (uint64_t)v47, 1);
    quasar::PTree::~PTree((quasar::PTree *)v47);
    if (v45 < 0)
      operator delete(v44[0]);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    quasar::MetaInfo::update((quasar::MetaInfo::Impl **)&v64, (const quasar::PTree *)&v49);
    v38 = v69;
    if ((unint64_t)v69 >= v70)
    {
      v39 = (std::string *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(&v68, (const quasar::TranslationPhraseInternal *)&v59);
    }
    else
    {
      quasar::TranslationPhraseInternal::TranslationPhraseInternal(v69, (const quasar::TranslationPhraseInternal *)&v59);
      v39 = (std::string *)((char *)v38 + 200);
    }
    v69 = v39;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    ++v43;
    quasar::PTree::~PTree((quasar::PTree *)&v49);
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v59);
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
    if (++begin == end)
      break;
  }
  v40 = *(_QWORD *)(*v4 - 24);
  std::string::basic_string[abi:ne180100]<0>(&v59, "final");
  quasar::ProcessingBlock::send((uint64_t)v4 + v40, (const void **)&v59.__r_.__value_.__l.__data_, (uint64_t)&v68, 0);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
LABEL_103:
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  if (v73 < 0)
    operator delete(v72[0]);
}

void sub_1ADEFCAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (a56 < 0)
    operator delete(__p);
  __p = (void *)(v56 - 176);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a34 = v56 - 152;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  if (*(char *)(v56 - 105) < 0)
    operator delete(*(void **)(v56 - 128));
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::PhraseBookBlock::process(_QWORD *a1, uint64_t a2, quasar::TranslationPhraseInternal **a3)
{
  quasar::PhraseBookBlock::process((uint64_t)a1 + *(_QWORD *)(*a1 - 96), a2, a3);
}

uint64_t quasar::PhraseBookBlock::minConfigVersion(quasar::PhraseBookBlock *this)
{
  return 133;
}

uint64_t `virtual thunk to'quasar::PhraseBookBlock::minConfigVersion(quasar::PhraseBookBlock *this)
{
  return 133;
}

void quasar::ConfiguredProcessingBlock<quasar::PhraseBookOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1ADEFCDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::PhraseBookOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PhraseBookOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::PhraseBookOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PhraseBookOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::PhraseBookBlock::~PhraseBookBlock(quasar::PhraseBookBlock *this)
{
  char **v2;
  void **v3;

  *(_QWORD *)this = off_1E5D359F8;
  v2 = (char **)((char *)this + 1256);
  *((_QWORD *)this + 157) = off_1E5D35AA8;
  v3 = (void **)((char *)this + 1224);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)this = off_1E5D040F0;
  *((_QWORD *)this + 157) = &unk_1E5D04178;
  quasar::PhraseBookOptions::~PhraseBookOptions((quasar::PhraseBookBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;
  void **v3;

  *(_QWORD *)this = off_1E5D359F8;
  v2 = (char **)((char *)this + 1256);
  *((_QWORD *)this + 157) = off_1E5D35AA8;
  v3 = (void **)((char *)this + 1224);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)this = off_1E5D040F0;
  *((_QWORD *)this + 157) = &unk_1E5D04178;
  quasar::PhraseBookOptions::~PhraseBookOptions((quasar::PhraseBookBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](this, 0x10F3C40C6145FEFLL);
}

const char *quasar::PhraseBookBlock::blockType(quasar::PhraseBookBlock *this)
{
  return "PhraseBookBlock";
}

void `virtual thunk to'quasar::PhraseBookBlock::~PhraseBookBlock(quasar::PhraseBookBlock *this)
{
  char *v1;
  void **v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D359F8;
  *((_QWORD *)v1 + 157) = off_1E5D35AA8;
  v2 = (void **)(v1 + 1224);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(_QWORD *)v1 = off_1E5D040F0;
  *((_QWORD *)v1 + 157) = &unk_1E5D04178;
  quasar::PhraseBookOptions::~PhraseBookOptions((quasar::PhraseBookOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 157);
}

{
  char *v1;
  void **v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D359F8;
  *((_QWORD *)v1 + 157) = off_1E5D35AA8;
  v2 = (void **)(v1 + 1224);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(_QWORD *)v1 = off_1E5D040F0;
  *((_QWORD *)v1 + 157) = &unk_1E5D04178;
  quasar::PhraseBookOptions::~PhraseBookOptions((quasar::PhraseBookOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 157);
  MEMORY[0x1AF44D190](v1, 0x10F3C40C6145FEFLL);
}

const char *`virtual thunk to'quasar::PhraseBookBlock::blockType(quasar::PhraseBookBlock *this)
{
  return "PhraseBookBlock";
}

quasar::LmePackedProns *quasar::LmePackedProns::LmePackedProns(quasar::LmePackedProns *this, const quasar::LmeDataFactoryBase::PronSet *a2, fst::SymbolTable *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char **v8;
  unint64_t v9;
  char *v10;
  __int16 v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  const void *v23;
  size_t v24;
  char *v25;
  __int16 v26;
  int v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int16 v37;
  _WORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  unint64_t v52;
  _WORD *v53;
  _WORD *v54;
  _WORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int16 v63;
  _QWORD *v64;
  _QWORD *v65;
  BOOL v66;
  void *__p[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  quasar::Bitmap::~Bitmap(a2);
  v6 = v5 + 1;
  v7 = (_QWORD *)*v5;
  if ((_QWORD *)*v5 == v5 + 1)
    return this;
  v8 = (char **)((char *)this + 16);
  while (quasar::isPronTypeEmbedding(*((_DWORD *)v7 + 8)))
  {
    if (*((char *)v7 + 63) < 0)
      v9 = v7[6];
    else
      v9 = *((unsigned __int8 *)v7 + 63);
    std::vector<unsigned short>::resize((uint64_t)this, (v9 >> 1) + 3);
    v22 = *(_QWORD *)this;
    *(_WORD *)v22 = *((_WORD *)v7 + 16) ^ 0x8000;
    *(_DWORD *)(v22 + 2) = *((_DWORD *)v7 + 16);
    if (*((char *)v7 + 63) < 0)
    {
      v23 = (const void *)v7[5];
      v24 = v7[6];
    }
    else
    {
      v23 = v7 + 5;
      v24 = *((unsigned __int8 *)v7 + 63);
    }
    memcpy((void *)(v22 + 6), v23, v24);
LABEL_86:
    v64 = (_QWORD *)v7[1];
    if (v64)
    {
      do
      {
        v65 = v64;
        v64 = (_QWORD *)*v64;
      }
      while (v64);
    }
    else
    {
      do
      {
        v65 = (_QWORD *)v7[2];
        v66 = *v65 == (_QWORD)v7;
        v7 = v65;
      }
      while (!v66);
    }
    v7 = v65;
    if (v65 == v6)
      return this;
  }
  v10 = (char *)quasar::PronTypeToSeparator(*((_DWORD *)v7 + 8));
  std::string::basic_string[abi:ne180100]<0>(__p, v10);
  quasar::splitAndTrimNoEmpty((const std::string *)(v7 + 5), (char *)__p, &v85);
  if (SBYTE7(v69) < 0)
    operator delete(__p[0]);
  std::vector<unsigned short>::reserve((void **)this, 3 - 0x5555555555555555 * ((v86 - v85) >> 3));
  v11 = *((_WORD *)v7 + 16) + 0x8000;
  v13 = (char *)*((_QWORD *)this + 1);
  v12 = (char *)*((_QWORD *)this + 2);
  if (v13 >= v12)
  {
    v15 = *(char **)this;
    v16 = (uint64_t)&v13[-*(_QWORD *)this];
    if (v16 <= -3)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v17 = v16 >> 1;
    v18 = v12 - v15;
    if (v18 <= (v16 >> 1) + 1)
      v19 = v17 + 1;
    else
      v19 = v18;
    if (v18 >= 0x7FFFFFFFFFFFFFFELL)
      v20 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
    {
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)this + 16, v20);
      v15 = *(char **)this;
      v13 = (char *)*((_QWORD *)this + 1);
    }
    else
    {
      v21 = 0;
    }
    v25 = &v21[2 * v17];
    *(_WORD *)v25 = v11;
    v14 = v25 + 2;
    while (v13 != v15)
    {
      v26 = *((_WORD *)v13 - 1);
      v13 -= 2;
      *((_WORD *)v25 - 1) = v26;
      v25 -= 2;
    }
    v12 = &v21[2 * v20];
    *(_QWORD *)this = v25;
    *((_QWORD *)this + 1) = v14;
    *((_QWORD *)this + 2) = v12;
    if (v15)
    {
      operator delete(v15);
      v12 = *v8;
    }
  }
  else
  {
    *(_WORD *)v13 = v11;
    v14 = v13 + 2;
  }
  *((_QWORD *)this + 1) = v14;
  v27 = *((_DWORD *)v7 + 16);
  if (v14 >= v12)
  {
    v29 = *(char **)this;
    v30 = (uint64_t)&v14[-*(_QWORD *)this];
    if (v30 <= -3)
      goto LABEL_98;
    v31 = v30 >> 1;
    v32 = v12 - v29;
    if (v32 <= (v30 >> 1) + 1)
      v33 = v31 + 1;
    else
      v33 = v32;
    if (v32 >= 0x7FFFFFFFFFFFFFFELL)
      v34 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    if (v34)
    {
      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)this + 16, v34);
      v29 = *(char **)this;
      v14 = (char *)*((_QWORD *)this + 1);
    }
    else
    {
      v35 = 0;
    }
    v36 = &v35[2 * v31];
    *(_WORD *)v36 = v27;
    v28 = v36 + 2;
    while (v14 != v29)
    {
      v37 = *((_WORD *)v14 - 1);
      v14 -= 2;
      *((_WORD *)v36 - 1) = v37;
      v36 -= 2;
    }
    v12 = &v35[2 * v34];
    *(_QWORD *)this = v36;
    *((_QWORD *)this + 1) = v28;
    *((_QWORD *)this + 2) = v12;
    if (v29)
    {
      operator delete(v29);
      v12 = *v8;
    }
  }
  else
  {
    *(_WORD *)v14 = v27;
    v28 = v14 + 2;
  }
  *((_QWORD *)this + 1) = v28;
  if (v28 >= v12)
  {
    v39 = *(char **)this;
    v40 = (uint64_t)&v28[-*(_QWORD *)this];
    if (v40 < -2)
LABEL_98:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v41 = v40 >> 1;
    v42 = v12 - v39;
    if (v42 <= (v40 >> 1) + 1)
      v43 = v41 + 1;
    else
      v43 = v42;
    if (v42 >= 0x7FFFFFFFFFFFFFFELL)
      v44 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v44 = v43;
    if (v44)
    {
      v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)this + 16, v44);
      v39 = *(char **)this;
      v28 = (char *)*((_QWORD *)this + 1);
    }
    else
    {
      v45 = 0;
    }
    v46 = &v45[2 * v41];
    *(_WORD *)v46 = HIWORD(v27);
    v38 = v46 + 2;
    while (v28 != v39)
    {
      v47 = *((_WORD *)v28 - 1);
      v28 -= 2;
      *((_WORD *)v46 - 1) = v47;
      v46 -= 2;
    }
    *(_QWORD *)this = v46;
    *((_QWORD *)this + 1) = v38;
    *((_QWORD *)this + 2) = &v45[2 * v44];
    if (v39)
      operator delete(v39);
  }
  else
  {
    *(_WORD *)v28 = HIWORD(v27);
    v38 = v28 + 2;
  }
  *((_QWORD *)this + 1) = v38;
  v48 = v85;
  v49 = v86;
  while (1)
  {
    if (v48 == v49)
    {
      __p[0] = &v85;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      goto LABEL_86;
    }
    v50 = (*(uint64_t (**)(fst::SymbolTable *, uint64_t))(*(_QWORD *)a3 + 32))(a3, v48);
    v51 = v50;
    if (v50 >= 0x8000)
      break;
    v53 = (_WORD *)*((_QWORD *)this + 1);
    v52 = *((_QWORD *)this + 2);
    if ((unint64_t)v53 >= v52)
    {
      v55 = *(_WORD **)this;
      v56 = (uint64_t)v53 - *(_QWORD *)this;
      if (v56 <= -3)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v57 = v56 >> 1;
      v58 = v52 - (_QWORD)v55;
      if (v58 <= (v56 >> 1) + 1)
        v59 = v57 + 1;
      else
        v59 = v58;
      if (v58 >= 0x7FFFFFFFFFFFFFFELL)
        v60 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v60 = v59;
      if (v60)
      {
        v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)this + 16, v60);
        v55 = *(_WORD **)this;
        v53 = (_WORD *)*((_QWORD *)this + 1);
      }
      else
      {
        v61 = 0;
      }
      v62 = &v61[2 * v57];
      *(_WORD *)v62 = v51;
      v54 = v62 + 2;
      while (v53 != v55)
      {
        v63 = *--v53;
        *((_WORD *)v62 - 1) = v63;
        v62 -= 2;
      }
      *(_QWORD *)this = v62;
      *((_QWORD *)this + 1) = v54;
      *((_QWORD *)this + 2) = &v61[2 * v60];
      if (v55)
        operator delete(v55);
    }
    else
    {
      *v53 = v50;
      v54 = v53 + 1;
    }
    *((_QWORD *)this + 1) = v54;
    v48 += 24;
  }
  if (quasar::gLogLevel >= 2)
  {
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LmePackedProns::LmePackedProns: Unable to assign ID to unit", 59);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
  }
  *((_QWORD *)this + 1) = *(_QWORD *)this;
  __p[0] = &v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return this;
}

void sub_1ADEFD554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  void *v19;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  __p = (void *)(v17 - 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v19 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void quasar::LmePackedProns::unpacked(quasar::LmePackedProns *this@<X0>, const fst::SymbolTable *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  const char *v21;
  std::string::size_type v22;
  unsigned __int8 v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string::size_type size;
  const std::string::value_type *p_p;
  std::string::size_type v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  void *__p;
  std::string::size_type v35;
  unsigned __int8 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  std::string v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;

  quasar::LmeDataFactoryBase::PronSet::PronSet(&v55);
  LODWORD(v6) = 0;
  while (1)
  {
    v7 = *(_QWORD *)this;
    v8 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 1;
    if (v8 <= (int)v6)
      break;
    v9 = (int)v6;
    memset(&v54, 0, sizeof(v54));
    v10 = *(__int16 *)(v7 + 2 * (int)v6);
    if (v10 < 0)
    {
      v6 = (int)v6 + 1;
      if (v8 > v9 + 1)
      {
        if (v8 <= v9 + 2)
        {
          if (quasar::gLogLevel >= 2)
          {
            v52 = 0u;
            v53 = 0u;
            v50 = 0u;
            v51 = 0u;
            v48 = 0u;
            v49 = 0u;
            v46 = 0u;
            v47 = 0u;
            v44 = 0u;
            v45 = 0u;
            v42 = 0u;
            v43 = 0u;
            v40 = 0u;
            v41 = 0u;
            v38 = 0u;
            v39 = 0u;
            v37 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"LmePackedProns::unpacked: Out of bounds2 ", 41);
            v19 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
            v20 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" ", 1);
            std::ostream::operator<<();
            quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v37);
          }
          quasar::LmeDataFactoryBase::PronSet::PronSet(a3);
          v11 = 0;
          LODWORD(v6) = v9 + 2;
        }
        else
        {
          v12 = (unsigned __int16)v10 - 0x8000;
          v13 = *(unsigned __int16 *)(v7 + 2 * (v9 + 2));
          v14 = v9 + 3;
          v33 = *(unsigned __int16 *)(v7 + 2 * v6);
          if (quasar::isPronTypeEmbedding(v12))
          {
            v15 = *(_QWORD *)this;
            v16 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 1;
            if (v16 <= v14)
            {
              LODWORD(v6) = v9 + 3;
            }
            else
            {
              v6 = v9 + 3;
              do
              {
                if (*(__int16 *)(v15 + 2 * v6) < 0)
                  break;
                ++v6;
              }
              while (v16 > v6);
              if ((int)v6 > (int)v14)
                MEMORY[0x1AF44C920](&v54, v15 + 2 * v14, 2 * ((int)v6 - (int)v14));
            }
          }
          else
          {
            v21 = quasar::PronTypeToSeparator(v12);
            LODWORD(v6) = v14;
            while ((int)v6 < (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 1)
                 && (*(__int16 *)(*(_QWORD *)this + 2 * (int)v6) & 0x80000000) == 0)
            {
              (*(void (**)(void **__return_ptr, const fst::SymbolTable *, _QWORD))(*(_QWORD *)a2 + 88))(&__p, a2, *(unsigned __int16 *)(*(_QWORD *)this + 2 * (int)v6));
              v22 = v36;
              v23 = v36;
              v24 = v35;
              if ((v36 & 0x80u) == 0)
                v25 = v36;
              else
                v25 = v35;
              if (v25)
              {
                size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
                if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = v54.__r_.__value_.__l.__size_;
                if (size)
                {
                  std::string::append(&v54, v21);
                  v22 = v36;
                  v24 = v35;
                  v23 = v36;
                }
                if ((v23 & 0x80u) == 0)
                  p_p = (const std::string::value_type *)&__p;
                else
                  p_p = (const std::string::value_type *)__p;
                if ((v23 & 0x80u) == 0)
                  v28 = v22;
                else
                  v28 = v24;
                std::string::append(&v54, p_p, v28);
                LODWORD(v6) = v6 + 1;
              }
              else
              {
                if (quasar::gLogLevel >= 2)
                {
                  v52 = 0u;
                  v53 = 0u;
                  v50 = 0u;
                  v51 = 0u;
                  v48 = 0u;
                  v49 = 0u;
                  v46 = 0u;
                  v47 = 0u;
                  v44 = 0u;
                  v45 = 0u;
                  v42 = 0u;
                  v43 = 0u;
                  v40 = 0u;
                  v41 = 0u;
                  v38 = 0u;
                  v39 = 0u;
                  v37 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"WordPronCache::unpack: Cannot find unit ", 40);
                  v29 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" ", 1);
                  (*(void (**)(const fst::SymbolTable *))(*(_QWORD *)a2 + 120))(a2);
                  std::ostream::operator<<();
                  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v37);
                }
                quasar::LmeDataFactoryBase::PronSet::PronSet(a3);
              }
              if ((char)v36 < 0)
                operator delete(__p);
              v11 = 0;
              if (!v25)
                goto LABEL_50;
            }
          }
          quasar::LmeDataFactoryBase::PronSet::insert(&v55, v12, (uint64_t)&v54, COERCE_FLOAT(v33 | (v13 << 16)));
          v11 = 1;
        }
        goto LABEL_50;
      }
      if (quasar::gLogLevel >= 2)
      {
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"LmePackedProns::unpacked: Out of bounds1 ", 41);
        v17 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
        std::ostream::operator<<();
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v37);
      }
    }
    else if (quasar::gLogLevel >= 2)
    {
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"LmePackedProns::unpacked: Unexpected value", 42);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v37);
    }
    quasar::LmeDataFactoryBase::PronSet::PronSet(a3);
    v11 = 0;
LABEL_50:
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v54.__r_.__value_.__l.__data_);
      if ((v11 & 1) == 0)
      {
LABEL_54:
        v30 = v56;
        goto LABEL_58;
      }
    }
    else if ((v11 & 1) == 0)
    {
      goto LABEL_54;
    }
  }
  v30 = v56;
  *a3 = v55;
  a3[1] = v30;
  v31 = a3 + 1;
  v32 = v57;
  a3[2] = v57;
  if (v32)
  {
    *(_QWORD *)(v30 + 16) = v31;
    v55 = &v56;
    v56 = 0;
    v57 = 0;
    v30 = 0;
  }
  else
  {
    *a3 = v31;
  }
LABEL_58:
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v55, (char *)v30);
}

void sub_1ADEFDACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 121) < 0)
    operator delete(*(void **)(v16 - 144));
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(v16 - 120, *(char **)(v16 - 112));
  _Unwind_Resume(a1);
}

uint64_t quasar::LmePackedProns::read(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD v5[34];

  if (a3 <= 17)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "lmeDataReadVersion >= 18");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  LODWORD(v5[0]) = 0;
  kaldi::ReadBasicType<int>(a2, 1, (uint64_t)v5);
  std::vector<unsigned short>::resize(a1, SLODWORD(v5[0]));
  return std::istream::read();
}

uint64_t quasar::LmePackedProns::write(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD v4[34];

  if (a3 <= 17)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "lmeDataWriteVersion >= 18");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  kaldi::WriteBasicType<int>(a2, 1);
  return std::ostream::write();
}

std::string *quasar::LmePackedWord::LmePackedWord(std::string *this, const quasar::LmeDataFactoryBase::Word *a2, fst::SymbolTable *a3)
{
  __int128 v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 12);
  quasar::LmePackedProns::LmePackedProns((quasar::LmePackedProns *)&this[2].__r_.__value_.__r.__words[1], (const quasar::LmeDataFactoryBase::Word *)((char *)a2 + 56), a3);
  return this;
}

void sub_1ADEFDD30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::LmePackedWord::unpacked(quasar::LmePackedWord *this@<X0>, const fst::SymbolTable *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD v7[3];
  std::string v8;
  std::string v9;

  if (*((char *)this + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  else
    v9 = *(std::string *)this;
  if (*((char *)this + 47) < 0)
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  else
    v8 = *(std::string *)((_BYTE *)this + 1);
  v6 = *((unsigned int *)this + 12);
  quasar::LmePackedProns::unpacked((quasar::LmePackedWord *)((char *)this + 56), a2, v7);
  quasar::LmeDataFactoryBase::Word::Word(a3, &v9, &v8, v6, v7);
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v7, (char *)v7[1]);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1ADEFDE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

fst::SymbolTable *quasar::LmePackedUserData::LmePackedUserData(fst::SymbolTable *a1, _QWORD *a2)
{
  fst::SymbolTable *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v4 = fst::SymbolTable::SymbolTable(a1);
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 2) = (char *)v4 + 24;
  *((_QWORD *)v4 + 4) = 0;
  v7 = (_QWORD *)*a2;
  v5 = a2 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      quasar::LmePackedUserData::addUnpackedEntities((uint64_t **)a1, (__int128 *)v6 + 2, (const quasar::LmeDataFactoryBase::Word ***)v6 + 7);
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v5);
  }
  return a1;
}

void sub_1ADEFDF28(_Unwind_Exception *a1)
{
  fst::SymbolTable *v1;
  uint64_t v2;

  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::destroy(v2, *((_QWORD **)v1 + 3));
  fst::SymbolTable::~SymbolTable(v1);
  _Unwind_Resume(a1);
}

void quasar::LmePackedUserData::addUnpackedEntities(uint64_t **a1, __int128 *a2, const quasar::LmeDataFactoryBase::Word ***a3)
{
  const quasar::LmeDataFactoryBase::Word **v6;
  const quasar::LmeDataFactoryBase::Word **v7;
  __int128 *v8;

  v8 = a2;
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 2, (const void **)a2, (uint64_t)&std::piecewise_construct, &v8);
  v6 = *a3;
  v7 = a3[1];
  while (v6 != v7)
  {
    quasar::LmePackedUserData::addUnpackedEntity(a1, a2, v6);
    v6 += 3;
  }
}

void quasar::LmePackedUserData::unpackedWord(quasar::LmePackedUserData *this@<X0>, const quasar::LmePackedWord *a2@<X1>, uint64_t a3@<X8>)
{
  quasar::LmePackedWord::unpacked(a2, this, a3);
}

void quasar::LmePackedUserData::unpackedEntity(fst::SymbolTable *a1@<X0>, quasar::LmePackedWord **a2@<X1>, uint64_t *a3@<X8>)
{
  quasar::LmePackedWord *v3;
  quasar::LmePackedWord *v4;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  __int128 __p;
  uint64_t v17;
  int v18;
  char **v19;
  char *v20;
  uint64_t v21;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      quasar::LmePackedWord::unpacked(v3, a1, (uint64_t)v14);
      v7 = a3[1];
      if (v7 >= a3[2])
      {
        v13 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<quasar::LmeDataFactoryBase::Word>(a3, (uint64_t)v14);
      }
      else
      {
        v8 = *(_OWORD *)v14;
        *(_QWORD *)(v7 + 16) = v15;
        *(_OWORD *)v7 = v8;
        v14[1] = 0;
        v15 = 0;
        v14[0] = 0;
        v9 = v17;
        *(_OWORD *)(v7 + 24) = __p;
        *(_QWORD *)(v7 + 40) = v9;
        v17 = 0;
        __p = 0uLL;
        *(_DWORD *)(v7 + 48) = v18;
        *(_QWORD *)(v7 + 56) = v19;
        v10 = v20;
        *(_QWORD *)(v7 + 64) = v20;
        v11 = v7 + 64;
        v12 = v21;
        *(_QWORD *)(v7 + 72) = v21;
        if (v12)
        {
          *((_QWORD *)v10 + 2) = v11;
          v19 = &v20;
          v20 = 0;
          v21 = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 56) = v11;
        }
        v13 = v7 + 80;
        a3[1] = v7 + 80;
      }
      a3[1] = v13;
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v19, v20);
      if (SHIBYTE(v17) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v15) < 0)
        operator delete(v14[0]);
      v3 = (quasar::LmePackedWord *)((char *)v3 + 80);
    }
    while (v3 != v4);
  }
}

void sub_1ADEFE110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)&a9);
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void quasar::LmePackedUserData::unpacked(quasar::LmePackedUserData *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  quasar::LmePackedWord **v6;
  quasar::LmePackedWord **v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  BOOL v11;
  __int128 *v12[3];
  __int128 **v13;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = (char *)*((_QWORD *)this + 2);
  v4 = (char *)this + 24;
  if (v3 != (char *)this + 24)
  {
    do
    {
      v12[0] = (__int128 *)(v3 + 32);
      std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, v12);
      v6 = (quasar::LmePackedWord **)*((_QWORD *)v3 + 7);
      v7 = (quasar::LmePackedWord **)*((_QWORD *)v3 + 8);
      while (v6 != v7)
      {
        v12[0] = (__int128 *)(v3 + 32);
        v8 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, v12);
        quasar::LmePackedUserData::unpackedEntity(this, v6, (uint64_t *)v12);
        std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::emplace_back<std::vector<quasar::LmeDataFactoryBase::Word>>(v8 + 7, (uint64_t)v12);
        v13 = v12;
        std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
        v6 += 3;
      }
      v9 = (char *)*((_QWORD *)v3 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char *)*((_QWORD *)v3 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v3 = v10;
    }
    while (v10 != v4);
  }
}

void sub_1ADEFE25C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::emplace_back<std::vector<quasar::LmeDataFactoryBase::Word>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v17[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::~__split_buffer(v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1ADEFE3C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::LmePackedUserData::clear(quasar::LmePackedUserData *this)
{
  _QWORD *v2;
  _BYTE v3[16];

  fst::SymbolTable::SymbolTable((fst::SymbolTable *)v3);
  fst::SymbolTable::operator=((uint64_t)this, (uint64_t)v3);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)v3);
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  this = (quasar::LmePackedUserData *)((char *)this + 24);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::destroy((uint64_t)this - 8, v2);
  *((_QWORD *)this - 1) = this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

void sub_1ADEFE428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&a9);
  _Unwind_Resume(a1);
}

void quasar::LmePackedUserData::addUnpackedEntity(uint64_t **a1, __int128 *a2, const quasar::LmeDataFactoryBase::Word **a3)
{
  const quasar::LmeDataFactoryBase::Word *v5;
  const quasar::LmeDataFactoryBase::Word *v6;
  std::string *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  std::string *v13;
  unint64_t v14;
  __int128 *v15;
  __int128 **v16;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v5 = *a3;
  v6 = a3[1];
  if (*a3 != v6)
  {
    v7 = 0;
    do
    {
      if ((unint64_t)v7 >= v14)
      {
        v7 = (std::string *)std::vector<quasar::LmePackedWord>::__emplace_back_slow_path<quasar::LmeDataFactoryBase::Word const&,fst::SymbolTable &>((uint64_t *)&v12, v5, (fst::SymbolTable *)a1);
      }
      else
      {
        quasar::LmePackedWord::LmePackedWord(v7, v5, (fst::SymbolTable *)a1);
        v7 = (std::string *)((char *)v7 + 80);
      }
      v13 = v7;
      v5 = (const quasar::LmeDataFactoryBase::Word *)((char *)v5 + 80);
    }
    while (v5 != v6);
  }
  v15 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 2, (const void **)a2, (uint64_t)&std::piecewise_construct, &v15);
  v9 = v8 + 7;
  v10 = v8[8];
  if (v10 >= v8[9])
  {
    v11 = std::vector<std::vector<quasar::LmePackedWord>>::__emplace_back_slow_path<std::vector<quasar::LmePackedWord>&>(v9, &v12);
  }
  else
  {
    std::vector<std::vector<quasar::LmePackedWord>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::LmePackedWord>&>((uint64_t)v9, &v12);
    v11 = v10 + 24;
  }
  v8[8] = v11;
  v16 = &v12;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_1ADEFE534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::LmePackedWord>::__emplace_back_slow_path<quasar::LmeDataFactoryBase::Word const&,fst::SymbolTable &>(uint64_t *a1, const quasar::LmeDataFactoryBase::Word *a2, fst::SymbolTable *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void *v15;
  std::string *v16;
  std::string::value_type *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x199999999999999)
    v11 = 0x333333333333333;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = (std::string *)&v12[80 * v5];
  v18 = &v12[80 * v11];
  quasar::LmePackedWord::LmePackedWord(v16, a2, a3);
  v17 = &v16[3].__r_.__value_.__s.__data_[8];
  std::vector<quasar::LmePackedWord>::__swap_out_circular_buffer(a1, &v15);
  v13 = a1[1];
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer(&v15);
  return v13;
}

void sub_1ADEFE658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::LmePackedWord>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmePackedWord>,std::reverse_iterator<quasar::LmePackedWord*>,std::reverse_iterator<quasar::LmePackedWord*>,std::reverse_iterator<quasar::LmePackedWord*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmePackedWord>,std::reverse_iterator<quasar::LmePackedWord*>,std::reverse_iterator<quasar::LmePackedWord*>,std::reverse_iterator<quasar::LmePackedWord*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_QWORD *)(v7 - 64) = *(_QWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 80) = 0;
      v9 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_DWORD *)(v7 - 32) = *(_DWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 80;
      *((_QWORD *)&v15 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmePackedWord>,std::reverse_iterator<quasar::LmePackedWord*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmePackedWord>,std::reverse_iterator<quasar::LmePackedWord*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,std::reverse_iterator<quasar::MetaInfo::StructuredPrediction::Span*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1ADEFE918(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::vector<quasar::LmePackedWord>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::LmePackedWord>&>(uint64_t a1, __int128 **a2)
{
  std::string *v3;
  std::string *result;

  v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<quasar::LmePackedWord>::__init_with_size[abi:ne180100]<quasar::LmePackedWord*,quasar::LmePackedWord*>(v3, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  *(_QWORD *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_1ADEFE984(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::LmePackedWord>>::__emplace_back_slow_path<std::vector<quasar::LmePackedWord>&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::LmePackedWord>::__init_with_size[abi:ne180100]<quasar::LmePackedWord*,quasar::LmePackedWord*>(v11, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  ++v15;
  std::vector<std::vector<quasar::LmePackedWord>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<quasar::LmePackedWord>>::~__split_buffer(v14);
  return v12;
}

void sub_1ADEFEA98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::LmePackedWord>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::LmePackedWord>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::LmePackedWord>>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::LmePackedWord>>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::reverse_iterator<std::vector<quasar::LmePackedWord>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::LmePackedWord>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<quasar::LmePackedWord>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<quasar::LmePackedWord>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void kaldi::quasar::TranslationUtil::ComputeBackwardAlignments(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  char **v16;
  char *v17;
  void **v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  _QWORD *v27;

  v1 = *(_QWORD **)a1;
  v27 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v27)
  {
    do
    {
      if (v1[1] != *v1)
      {
        v2 = *(_QWORD *)(*v1 + 144) - *(_QWORD *)(*v1 + 136);
        if ((int)(v2 >> 2) >= 1)
        {
          v3 = 0;
          v4 = (v2 >> 2);
          do
          {
            v5 = v1[1];
            if (*v1 == v5)
            {
              v6 = 0;
            }
            else
            {
              v6 = 0;
              v7 = 0;
              v8 = 0.0;
              v9 = *v1;
              do
              {
                v10 = *(_QWORD *)(v9 + 136);
                if (*(float *)(v10 + 4 * v3) > v8)
                {
                  v6 = v7;
                  v8 = *(float *)(v10 + 4 * v3);
                }
                ++v7;
                v9 += 240;
              }
              while (v9 != v5);
            }
            v11 = *v1 + 240 * v6;
            v14 = *(_QWORD *)(v11 + 128);
            v13 = (_QWORD *)(v11 + 128);
            v12 = v14;
            v16 = (char **)(v13 - 1);
            v15 = (char *)*(v13 - 1);
            if ((unint64_t)v15 >= v14)
            {
              v18 = (void **)(v13 - 2);
              v19 = (char *)*(v13 - 2);
              v20 = (v15 - v19) >> 2;
              v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v22 = v12 - (_QWORD)v19;
              if (v22 >> 1 > v21)
                v21 = v22 >> 1;
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
                v23 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v23 = v21;
              if (v23)
              {
                v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v13, v23);
                v15 = *v16;
                v19 = (char *)*v18;
              }
              else
              {
                v24 = 0;
              }
              v25 = &v24[4 * v20];
              *(_DWORD *)v25 = v3;
              v17 = v25 + 4;
              while (v15 != v19)
              {
                v26 = *((_DWORD *)v15 - 1);
                v15 -= 4;
                *((_DWORD *)v25 - 1) = v26;
                v25 -= 4;
              }
              *v18 = v25;
              *v16 = v17;
              *v13 = &v24[4 * v23];
              if (v19)
                operator delete(v19);
            }
            else
            {
              *(_DWORD *)v15 = v3;
              v17 = v15 + 4;
            }
            *v16 = v17;
            ++v3;
          }
          while (v3 != v4);
        }
      }
      v1 += 34;
    }
    while (v1 != v27);
  }
}

void kaldi::quasar::TranslationUtil::MergeAlignments(uint64_t a1)
{
  _QWORD *v1;
  char *v2;
  char *v3;
  char *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  unsigned int v9;
  char *v10;
  int *v11;
  int *v12;
  int *i;
  int *v14;
  int *v15;
  int *j;
  int *v17;
  int *v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  BOOL v23;
  int *v24;
  int *v25;
  int v26;
  int *v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  int *v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  int *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  char *v73;
  char **v74;
  char *v75;
  void **v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  int v84;
  _QWORD *v85;
  _QWORD *v86;
  int v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  void *__p[2];
  __int128 v93;
  __int128 v94;
  void *v95;
  void *v96[3];
  unsigned __int8 v97[24];
  _QWORD v98[4];

  v1 = *(_QWORD **)a1;
  v85 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v85)
  {
    while (1)
    {
      v86 = v1;
      v3 = (char *)*v1;
      v2 = (char *)v1[1];
      if ((char *)*v1 != v2)
        break;
LABEL_65:
      v9 = 0;
LABEL_66:
      v32 = -286331153 * ((v2 - v3) >> 4);
      v33 = v9;
      v97[0] = 0;
      std::vector<BOOL>::vector(__p, v32, v97);
      std::vector<std::vector<BOOL>>::vector(v98, v9, (uint64_t)__p);
      if (__p[0])
        operator delete(__p[0]);
      LOBYTE(v96[0]) = 0;
      std::vector<BOOL>::vector(__p, v32, (unsigned __int8 *)v96);
      std::vector<std::vector<BOOL>>::vector(v97, v9, (uint64_t)__p);
      if (__p[0])
        operator delete(__p[0]);
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::vector(v96, v9, (unsigned __int8 *)__p);
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::vector(&v95, v32, (unsigned __int8 *)__p);
      v93 = 0u;
      v94 = 0u;
      *(_OWORD *)__p = 0u;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v34 = (_QWORD *)*v86;
      v35 = (_QWORD *)v86[1];
      if ((_QWORD *)*v86 != v35)
      {
        v36 = 0;
        do
        {
          v37 = (int *)v34[11];
          v38 = (int *)v34[12];
          v39 = v36 >> 6;
          if (v37 != v38)
          {
            v40 = v98[0];
            v41 = (int *)v34[11];
            do
            {
              v42 = *v41++;
              *(_QWORD *)(*(_QWORD *)(v40 + 24 * v42) + 8 * v39) |= 1 << v36;
            }
            while (v41 != v38);
          }
          v43 = (int *)v34[14];
          v44 = (int *)v34[15];
          if (v43 != v44)
          {
            v45 = 1 << v36;
            do
            {
              v46 = *v43;
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v97 + 24 * v46) + 8 * v39) |= v45;
              if ((*(_QWORD *)(*(_QWORD *)(v98[0] + 24 * v46) + 8 * v39) & v45) != 0)
              {
                v88 = __PAIR64__(v36, v46);
                std::deque<std::pair<int,int>>::push_back(__p, &v88);
                *(_QWORD *)((char *)v96[0] + (((unint64_t)*v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v43;
                *((_QWORD *)v95 + v39) |= v45;
              }
              ++v43;
            }
            while (v43 != v44);
            v37 = (int *)v34[11];
            v43 = (int *)v34[14];
          }
          v34[12] = v37;
          v34[15] = v43;
          ++v36;
          v34 += 30;
        }
        while (v34 != v35);
        while (*((_QWORD *)&v94 + 1))
        {
          v47 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v94 >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * (v94 & 0x1FF));
          *(_QWORD *)&v94 = v94 + 1;
          --*((_QWORD *)&v94 + 1);
          if ((unint64_t)v94 >= 0x400)
          {
            operator delete(*(void **)__p[1]);
            __p[1] = (char *)__p[1] + 8;
            *(_QWORD *)&v94 = v94 - 512;
          }
          v48 = v90;
          if (v90 >= v91)
          {
            v50 = (v90 - v89) >> 3;
            if ((unint64_t)(v50 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v51 = (v91 - v89) >> 2;
            if (v51 <= v50 + 1)
              v51 = v50 + 1;
            if ((unint64_t)(v91 - v89) >= 0x7FFFFFFFFFFFFFF8)
              v52 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v52 = v51;
            if (v52)
              v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v91, v52);
            else
              v53 = 0;
            v54 = &v53[8 * v50];
            *(_QWORD *)v54 = v47;
            v49 = v54 + 8;
            v56 = v89;
            v55 = v90;
            if (v90 != v89)
            {
              do
              {
                v57 = *((_QWORD *)v55 - 1);
                v55 -= 8;
                *((_QWORD *)v54 - 1) = v57;
                v54 -= 8;
              }
              while (v55 != v56);
              v55 = v89;
            }
            v89 = v54;
            v90 = v49;
            v91 = &v53[8 * v52];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *(_QWORD *)v90 = v47;
            v49 = v48 + 8;
          }
          v58 = HIDWORD(v47);
          v90 = v49;
          v59 = -1;
          v87 = v47;
          do
          {
            v60 = (v59 + v47);
            v61 = 1 << (v59 + v47);
            v62 = -3;
            do
            {
              if ((v60 & 0x80000000) == 0 && (int)v60 < v33)
              {
                v63 = (v58 + v62 + 2);
                if ((v63 & 0x80000000) == 0 && (int)v63 < v32)
                {
                  v64 = v63 >> 6;
                  v65 = 1 << (v58 + v62 + 2);
                  if ((*((_QWORD *)v95 + (v63 >> 6)) & v65) == 0
                    && ((*(_QWORD *)(*(_QWORD *)(v98[0] + 24 * v60) + 8 * v64) & v65) != 0
                     || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v97 + 24 * v60) + 8 * v64) & v65) != 0))
                  {
                    LODWORD(v88) = v60;
                    HIDWORD(v88) = v58 + v62 + 2;
                    std::deque<std::pair<int,int>>::push_back(__p, &v88);
                    *((_QWORD *)v96[0] + (v60 >> 6)) |= v61;
                    *((_QWORD *)v95 + v64) |= v65;
                  }
                }
              }
              v62 += 2;
            }
            while (v62 < 0);
            ++v59;
            LODWORD(v47) = v87;
          }
          while (v59 != 2);
        }
      }
      v67 = v89;
      v66 = v90;
      v68 = v86;
      if (v89 != v90)
      {
        do
        {
          v69 = *v68 + 240 * *((int *)v67 + 1);
          v72 = *(_QWORD *)(v69 + 104);
          v71 = (_QWORD *)(v69 + 104);
          v70 = v72;
          v74 = (char **)(v71 - 1);
          v73 = (char *)*(v71 - 1);
          if ((unint64_t)v73 >= v72)
          {
            v76 = (void **)(v71 - 2);
            v77 = (char *)*(v71 - 2);
            v78 = (v73 - v77) >> 2;
            v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v80 = v70 - (_QWORD)v77;
            if (v80 >> 1 > v79)
              v79 = v80 >> 1;
            if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
              v81 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v81 = v79;
            if (v81)
            {
              v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v71, v81);
              v73 = *v74;
              v77 = (char *)*v76;
            }
            else
            {
              v82 = 0;
            }
            v83 = &v82[4 * v78];
            *(_DWORD *)v83 = *(_DWORD *)v67;
            v75 = v83 + 4;
            while (v73 != v77)
            {
              v84 = *((_DWORD *)v73 - 1);
              v73 -= 4;
              *((_DWORD *)v83 - 1) = v84;
              v83 -= 4;
            }
            *v76 = v83;
            *v74 = v75;
            *v71 = &v82[4 * v81];
            if (v77)
              operator delete(v77);
            v68 = v86;
          }
          else
          {
            *(_DWORD *)v73 = *(_DWORD *)v67;
            v75 = v73 + 4;
          }
          *v74 = v75;
          v67 += 8;
        }
        while (v67 != v66);
        v67 = v89;
      }
      if (v67)
      {
        v90 = v67;
        operator delete(v67);
      }
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](__p);
      if (v95)
        operator delete(v95);
      if (v96[0])
        operator delete(v96[0]);
      __p[0] = v97;
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = v98;
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v1 = v68 + 34;
      if (v1 == v85)
        return;
    }
    v4 = (char *)*v1;
    while (1)
    {
      v5 = (_DWORD *)*((_QWORD *)v4 + 11);
      v6 = (_DWORD *)*((_QWORD *)v4 + 12);
      if (v5 != v6)
      {
        while ((*v5 & 0x80000000) == 0)
        {
          if (++v5 == v6)
            goto LABEL_9;
        }
      }
      if (v5 != v6)
        break;
LABEL_9:
      v7 = (_DWORD *)*((_QWORD *)v4 + 14);
      v8 = (_DWORD *)*((_QWORD *)v4 + 15);
      if (v7 != v8)
      {
        while ((*v7 & 0x80000000) == 0)
        {
          if (++v7 == v8)
            goto LABEL_14;
        }
      }
      if (v7 != v8)
        return;
LABEL_14:
      v4 += 240;
      if (v4 == v2)
      {
        if (v3 == v2)
          goto LABEL_65;
        v9 = 0;
        v10 = (char *)*v1;
        do
        {
          v12 = (int *)*((_QWORD *)v10 + 11);
          v11 = (int *)*((_QWORD *)v10 + 12);
          if (v12 == v11)
          {
            v11 = (int *)*((_QWORD *)v10 + 11);
          }
          else
          {
            while ((*v12 & 0x80000000) == 0)
            {
              if (++v12 == v11)
                goto LABEL_30;
            }
            if (v12 != v11)
            {
              for (i = v12 + 1; i != v11; ++i)
              {
                if ((*i & 0x80000000) == 0)
                  *v12++ = *i;
              }
            }
            if (v12 != v11)
            {
              v11 = v12;
              *((_QWORD *)v10 + 12) = v12;
            }
          }
LABEL_30:
          v15 = (int *)*((_QWORD *)v10 + 14);
          v14 = (int *)*((_QWORD *)v10 + 15);
          if (v15 != v14)
          {
            while ((*v15 & 0x80000000) == 0)
            {
              if (++v15 == v14)
                goto LABEL_42;
            }
            if (v15 != v14)
            {
              for (j = v15 + 1; j != v14; ++j)
              {
                if ((*j & 0x80000000) == 0)
                  *v15++ = *j;
              }
            }
            if (v15 != v14)
            {
              *((_QWORD *)v10 + 15) = v15;
              goto LABEL_43;
            }
LABEL_42:
            v15 = v14;
          }
LABEL_43:
          v17 = (int *)*((_QWORD *)v10 + 11);
          if (v17 != v11)
          {
            v18 = v17 + 1;
            if (v17 + 1 != v11)
            {
              v19 = *v17;
              v20 = v17 + 1;
              do
              {
                v22 = *v20++;
                v21 = v22;
                v23 = v19 < v22;
                if (v19 <= v22)
                  v19 = v21;
                if (v23)
                  v17 = v18;
                v18 = v20;
              }
              while (v20 != v11);
            }
            if ((int)v9 <= *v17 + 1)
              v9 = *v17 + 1;
          }
          v24 = (int *)*((_QWORD *)v10 + 14);
          if (v24 != v15)
          {
            v25 = v24 + 1;
            if (v24 + 1 != v15)
            {
              v26 = *v24;
              v27 = v24 + 1;
              do
              {
                v29 = *v27++;
                v28 = v29;
                v30 = v26 < v29;
                if (v26 <= v29)
                  v26 = v28;
                if (v30)
                  v24 = v25;
                v25 = v27;
              }
              while (v27 != v15);
            }
            v31 = *v24;
            if ((int)v9 <= v31 + 1)
              v9 = v31 + 1;
          }
          v10 += 240;
        }
        while (v10 != v2);
        goto LABEL_66;
      }
    }
  }
}

void sub_1ADEFF60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p)
{
  uint64_t v27;

  if (__p)
    operator delete(__p);
  a17 = (void *)(v27 - 136);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (void *)(v27 - 112);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<BOOL>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      std::vector<BOOL>::vector(v6, a3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1ADEFF744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<BOOL>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<BOOL>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    v5 = *(void **)(i - 24);
    v4 = v5;
    if (v5)
      operator delete(v4);
  }
  a1[1] = v2;
}

void LHash<unsigned int const*,double>::clear(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*a1)
  {
    v4 = 1 << (*(_DWORD *)*a1 & 0x1F);
    v5 = 16;
    v6 = v4;
    do
    {
      v7 = *(_QWORD *)(*a1 + v5);
      if (v7)
        MEMORY[0x1AF44D160](v7, 0x1000C8052888210);
      v5 += 16;
      --v6;
    }
    while (v6);
    BM_free((_QWORD *)*a1, 16 * (v4 - 1) + 24);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8)
      a2 = (float)((float)(a2 + 1) / 0.8);
    LHash<char const*,unsigned int>::alloc(a1, a2);
  }
}

_QWORD *LHash<unsigned int const*,double>::~LHash(_QWORD *a1)
{
  LHash<unsigned int const*,double>::clear(a1, 0);
  return a1;
}

uint64_t LHash<unsigned int const*,double>::locate(unsigned int **a1, int *a2, _DWORD *a3)
{
  unsigned int *v3;
  _DWORD *v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  unsigned int v11;
  int *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *v3;
  v4 = v3 + 2;
  v5 = v6;
  v7 = v6 & 0x1F;
  if (v7 > 2)
  {
    if (a2)
    {
      v10 = *a2;
      if (*a2 == -1)
      {
        v14 = 12345;
      }
      else
      {
        v11 = 0;
        v12 = a2 + 1;
        do
        {
          v11 += v10 + (v11 << 12);
          v13 = *v12++;
          v10 = v13;
        }
        while (v13 != -1);
        v14 = 1103515245 * v11 + 12345;
      }
      v8 = (v14 >> (30 - v7)) & ~(-1 << v7);
    }
    else
    {
      v8 = 0;
    }
    v22 = *(int **)&v4[4 * v8 + 2];
    if (!v22)
    {
LABEL_47:
      result = 0;
      goto LABEL_50;
    }
    v23 = ~(-1 << v7);
    while (1)
    {
      if (a2)
      {
        v24 = *v22;
        if (*v22 == -1)
        {
          v25 = 0;
LABEL_45:
          if (a2[v25] == -1)
          {
            result = 1;
            goto LABEL_50;
          }
        }
        else
        {
          v25 = 0;
          v26 = 1;
          while (1)
          {
            v27 = a2[v25];
            if (v27 == -1 || v24 != v27)
              break;
            v25 = v26;
            v24 = v22[v26++];
            if (v24 == -1)
              goto LABEL_45;
          }
        }
      }
      v8 = ((_DWORD)v8 + 1) & v23;
      v22 = *(int **)&v4[4 * v8 + 2];
      if (!v22)
        goto LABEL_47;
    }
  }
  if (v5 >= 0x20)
  {
    v15 = 0;
    v8 = v5 >> 5;
    while (1)
    {
      v16 = *(int **)&v4[4 * v15 + 2];
      if (v16)
      {
        if (a2)
        {
          v17 = *v16;
          if (*v16 == -1)
          {
            v18 = 0;
LABEL_26:
            if (a2[v18] == -1)
            {
LABEL_48:
              result = 1;
              LODWORD(v8) = v15;
              goto LABEL_50;
            }
          }
          else
          {
            v18 = 0;
            v19 = 1;
            while (1)
            {
              v20 = a2[v18];
              if (v20 == -1 || v17 != v20)
                break;
              v18 = v19;
              v17 = v16[v19++];
              if (v17 == -1)
                goto LABEL_26;
            }
          }
        }
      }
      else if (!a2)
      {
        goto LABEL_48;
      }
      if (++v15 == v8)
        goto LABEL_28;
    }
  }
  LODWORD(v8) = 0;
LABEL_28:
  result = 0;
LABEL_50:
  *a3 = v8;
  return result;
}

uint64_t LHash<unsigned int const*,double>::insert(unsigned int **a1, int *a2, _BYTE *a3)
{
  int v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v20;

  if (!*a1)
    LHash<char const*,unsigned int>::alloc(a1, 1u);
  v20 = 0;
  v6 = LHash<unsigned int const*,double>::locate(a1, a2, &v20);
  *a3 = v6;
  v7 = *a1;
  if (!v6)
  {
    v8 = *v7;
    v9 = 1 << (v8 & 0x1F);
    v10 = v8 >> 5;
    if (v8 >= 0xE0)
      v11 = (float)((float)(v10 + 2) / 0.8);
    else
      v11 = (v10 + 1);
    if (v11 > v9)
    {
      LHash<char const*,unsigned int>::alloc(a1, v11);
      **a1 = v8 & 0xFFFFFFE0 | **a1 & 0x1F;
      if ((**a1 & 0x1F) >= 3)
      {
        v12 = (int **)(v7 + 4);
        v13 = 1 << (v8 & 0x1F);
        do
        {
          if (*v12)
          {
            LHash<unsigned int const*,double>::locate(a1, *v12, &v20);
            *(_OWORD *)&(*a1)[4 * v20 + 2] = *(_OWORD *)(v12 - 1);
          }
          v12 += 2;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy(*a1 + 2, v7 + 2, 16 * v10);
      }
      BM_free(v7, 16 * (v9 - 1) + 24);
      LHash<unsigned int const*,double>::locate(a1, a2, &v20);
    }
    Vocab::length((uint64_t)a2, (const unsigned int *)v11);
    v14 = operator new[]();
    v15 = *a2;
    if (*a2 == -1)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      do
      {
        *(_DWORD *)(v14 + 4 * v16) = v15;
        v16 = v17;
        v15 = a2[v17++];
      }
      while (v15 != -1);
    }
    *(_DWORD *)(v14 + 4 * v16) = -1;
    v18 = (uint64_t)&(*a1)[4 * v20];
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = v14;
    **a1 += 32;
    v7 = *a1;
  }
  return (uint64_t)&v7[4 * v20 + 2];
}

uint64_t LHashIter<unsigned int const*,double>::LHashIter(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 12) = *v4 >> 5;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
    LHashIter<unsigned int const*,double>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t LHashIter<unsigned int const*,double>::sortKeys(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  _BYTE v14[24];
  uint64_t v15;

  v2 = **(_DWORD **)a1 & 0x1F;
  v3 = operator new[]();
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16);
  do
  {
    if (*v7)
      *(_DWORD *)(v3 + 4 * v6++) = v5;
    ++v5;
    v7 += 2;
  }
  while (!(v5 >> v2));
  if (*(_QWORD *)(a1 + 16))
  {
    v8 = *(unsigned int *)(a1 + 12);
    LHashIter<char const*,unsigned int>::LHashIter((uint64_t)v14, a1);
    v9 = 126 - 2 * __clz(v8);
    if ((_DWORD)v8)
      v10 = v9;
    else
      v10 = 0;
    std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int const*,double> &,unsigned int *,false>(v4, (unsigned int *)(v4 + 4 * v8), (uint64_t)v14, v10, 1);
    if (v15)
      MEMORY[0x1AF44D160](v15, 0x50C80EE9192B6);
    v15 = 0;
  }
  *(_QWORD *)(a1 + 24) = operator new[]();
  v11 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v11)
  {
    for (i = 0; i != v11; ++i)
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * i) = *(_QWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(v4 + 4 * i) + 16);
  }
  return MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
}

void sub_1ADEFFE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x1AF44D160](a12, 0x50C80EE9192B6);
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int const*,double>::next(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;

  v2 = *(unsigned int **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v11 = 0;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 12))
    return 0;
  v10 = v2;
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int const*,double>::locate(&v10, *(int **)(v7 + 8 * v4), &v11);
  v10 = 0;
  v8 = v11;
  *a2 = *(_QWORD *)(*(_QWORD *)a1 + 16 * v11 + 16);
  v9 = *(unsigned int **)a1;
  LHash<unsigned int const*,double>::clear(&v10, 0);
  return (uint64_t)&v9[4 * v8 + 2];
}

void sub_1ADEFFEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LHash<unsigned int const*,double>::~LHash(&a9);
  _Unwind_Resume(a1);
}

_QWORD *LHash<unsigned int,LHash<unsigned int const*,double>>::alloc(_QWORD *a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  _QWORD *result;
  _DWORD *v6;

  v3 = -1;
  do
    v4 = (1 << ++v3);
  while (v4 < a2);
  result = BM_malloc(16 * (v4 - 1) + 24);
  *a1 = result;
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  v6 = (_DWORD *)(*a1 + 16);
  do
  {
    *v6 = -1;
    *((_QWORD *)v6 - 1) = 0;
    v6 += 4;
    --v4;
  }
  while (v4);
  return result;
}

void LHash<unsigned int,LHash<unsigned int const*,double>>::clear(_QWORD *a1, unsigned int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)*a1;
  if (v4)
  {
    BM_free(v4, 16 * ~(-1 << *(_DWORD *)v4) + 24);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8)
      a2 = (float)((float)(a2 + 1) / 0.8);
    LHash<unsigned int,LHash<unsigned int const*,double>>::alloc(a1, a2);
  }
}

_QWORD *LHash<unsigned int,LHash<unsigned int const*,double>>::~LHash(_QWORD *a1)
{
  LHash<unsigned int,LHash<unsigned int const*,double>>::clear(a1, 0);
  return a1;
}

uint64_t LHash<unsigned int,LHash<unsigned int const*,double>>::insert(_QWORD *a1, unsigned int a2, _BYTE *a3)
{
  int v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v17;

  if (!*a1)
    LHash<unsigned int,LHash<unsigned int const*,double>>::alloc(a1, 1u);
  v17 = 0;
  v6 = LHash<unsigned int,double>::locate((_DWORD **)a1, a2, &v17);
  *a3 = v6;
  v7 = (_QWORD *)*a1;
  if (!v6)
  {
    v8 = *(unsigned int *)v7;
    v9 = 1 << (v8 & 0x1F);
    v10 = v8 >> 5;
    if (v8 >= 0xE0)
      v11 = (float)((float)(v10 + 2) / 0.8);
    else
      v11 = v10 + 1;
    if (v11 > v9)
    {
      LHash<unsigned int,LHash<unsigned int const*,double>>::alloc(a1, v11);
      *(_DWORD *)*a1 = v8 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
      if ((*(_DWORD *)*a1 & 0x1Fu) >= 3)
      {
        v12 = (unsigned int *)(v7 + 2);
        v13 = 1 << (v8 & 0x1F);
        do
        {
          if (*v12 != -1)
          {
            LHash<unsigned int,double>::locate((_DWORD **)a1, *v12, &v17);
            *(_OWORD *)(*a1 + 16 * v17 + 8) = *(_OWORD *)(v12 - 2);
          }
          v12 += 4;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy((void *)(*a1 + 8), v7 + 1, 16 * v10);
      }
      BM_free(v7, 16 * (v9 - 1) + 24);
      LHash<unsigned int,double>::locate((_DWORD **)a1, a2, &v17);
      v7 = (_QWORD *)*a1;
    }
    LODWORD(v7[2 * v17 + 2]) = a2;
    v14 = v17;
    v7[2 * v17 + 1] = 0;
    v15 = (_DWORD *)*a1;
    *(_QWORD *)(*a1 + 16 * v14 + 8) = 0;
    *v15 += 32;
    v7 = (_QWORD *)*a1;
  }
  return (uint64_t)&v7[2 * v17 + 1];
}

uint64_t LHash<unsigned int,LHash<unsigned int const*,double>>::remove(unsigned int **a1, unsigned int a2, _QWORD *a3)
{
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;

  v16 = 0;
  result = LHash<unsigned int,double>::locate(a1, a2, &v16);
  if ((_DWORD)result)
  {
    v6 = *a1;
    (*a1)[4 * v16 + 4] = -1;
    if (a3)
    {
      *a3 = *(_QWORD *)&v6[4 * v16 + 2];
      v6 = *a1;
    }
    v7 = *v6;
    v8 = *v6 & 0x1F;
    if (v8 >= 3)
    {
      v15 = 0;
      v10 = v16 + 1;
      for (i = -1 << v8; ; i = -1 << *v6)
      {
        v16 = v10 & ~i;
        v12 = v6[4 * v16 + 4];
        if (v12 == -1)
          break;
        v13 = LHash<unsigned int,double>::locate(a1, v12, &v15);
        v6 = *a1;
        if (!v13)
        {
          v14 = v16;
          *(_OWORD *)&v6[4 * v15 + 2] = *(_OWORD *)&v6[4 * v16 + 2];
          v6 = *a1;
          (*a1)[4 * v14 + 4] = -1;
        }
        v15 = 0;
        v10 = v16 + 1;
      }
    }
    else
    {
      v9 = v7 >> 5;
      memmove(&v6[4 * v16 + 2], &v6[4 * v16 + 6], 16 * (~v16 + (v7 >> 5)));
      v6 = *a1;
      (*a1)[4 * v9] = -1;
    }
    *v6 -= 32;
    return 1;
  }
  return result;
}

uint64_t LHashIter<unsigned int,LHash<unsigned int const*,double>>::LHashIter(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 12) = *v4 >> 5;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
    LHashIter<unsigned int,LHash<unsigned int const*,double>>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t LHashIter<unsigned int,LHash<unsigned int const*,double>>::sortKeys(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  _BYTE v18[24];
  uint64_t v19;

  v2 = **(_DWORD **)a1 & 0x1F;
  v3 = operator new[]();
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = (int *)(*(_QWORD *)a1 + 16);
  do
  {
    v8 = *v7;
    v7 += 4;
    if (v8 != -1)
      *(_DWORD *)(v3 + 4 * v6++) = v5;
    ++v5;
  }
  while (!(v5 >> v2));
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = *(unsigned int *)(a1 + 12);
    LHashIter<unsigned int,double>::LHashIter((uint64_t)v18, a1);
    v10 = 126 - 2 * __clz(v9);
    if ((_DWORD)v9)
      v11 = v10;
    else
      v11 = 0;
    std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,LHash<unsigned int const*,double>> &,unsigned int *,false>(v4, (unsigned int *)(v4 + 4 * v9), (uint64_t)v18, v11, 1);
    if (v19)
      MEMORY[0x1AF44D160](v19, 0x1000C8052888210);
    v19 = 0;
  }
  v12 = (_DWORD *)operator new[]();
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(_DWORD **)a1;
    v15 = (int *)v4;
    do
    {
      v16 = *v15++;
      *v12++ = v14[4 * v16 + 4];
      --v13;
    }
    while (v13);
  }
  return MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
}

void sub_1ADF004B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x1AF44D160](a12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,LHash<unsigned int const*,double>>::next(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;

  v2 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v10 = 0;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 12))
    return 0;
  v9 = v2;
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,double>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  v8 = *(_QWORD *)a1 + 16 * v10;
  result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 16);
  return result;
}

void sub_1ADF00558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LHash<unsigned int,LHash<unsigned int const*,double>>::~LHash(&a9);
  _Unwind_Resume(a1);
}

_DWORD **Map2<unsigned int,unsigned int const*,double>::~Map2(_DWORD **a1)
{
  _QWORD *v2;
  int v4;
  _BYTE v5[24];
  uint64_t v6;

  LHashIter<unsigned int,LHash<unsigned int const*,double>>::LHashIter((uint64_t)v5, a1, 0);
  v4 = 0;
  while (1)
  {
    v2 = (_QWORD *)LHashIter<unsigned int,LHash<unsigned int const*,double>>::next((uint64_t)v5, &v4);
    if (!v2)
      break;
    LHash<unsigned int const*,double>::clear(v2, 0);
  }
  if (v6)
    MEMORY[0x1AF44D160](v6, 0x1000C8052888210);
  LHash<unsigned int,LHash<unsigned int const*,double>>::clear(a1, 0);
  return a1;
}

uint64_t Map2<unsigned int,unsigned int const*,double>::numEntries(_DWORD **a1, unsigned int a2)
{
  uint64_t result;
  _DWORD *v4;
  int v5;

  v5 = 0;
  result = LHash<unsigned int,double>::locate(a1, a2, &v5);
  if ((_DWORD)result)
  {
    v4 = *(_DWORD **)&(*a1)[4 * v5 + 2];
    if (v4)
      return *v4 >> 5;
    else
      return 0;
  }
  return result;
}

uint64_t Map2<unsigned int,unsigned int const*,double>::clear(unsigned int **a1)
{
  _QWORD *v2;
  uint64_t result;
  unsigned int i;
  _BYTE v5[24];
  uint64_t v6;

  LHashIter<unsigned int,LHash<unsigned int const*,double>>::LHashIter((uint64_t)v5, a1, 0);
  for (i = 0; ; LHash<unsigned int,LHash<unsigned int const*,double>>::remove(a1, i, 0))
  {
    v2 = (_QWORD *)LHashIter<unsigned int,LHash<unsigned int const*,double>>::next((uint64_t)v5, &i);
    if (!v2)
      break;
    LHash<unsigned int const*,double>::clear(v2, 0);
  }
  LHash<unsigned int,LHash<unsigned int const*,double>>::clear(a1, 0);
  result = v6;
  if (v6)
    return MEMORY[0x1AF44D160](v6, 0x1000C8052888210);
  return result;
}

void sub_1ADF006E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    MEMORY[0x1AF44D160](a14, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::OnlineLatticeRescalingDecoder::OnlineLatticeRescalingDecoder(uint64_t a1, __int128 *a2)
{
  _QWORD *result;

  result = (_QWORD *)quasar::Decoder::Decoder(a1, a2);
  *result = &off_1E5D3A3F8;
  return result;
}

void quasar::OnlineLatticeRescalingDecoder::finishInit(quasar::OnlineLatticeRescalingDecoder *this)
{
  float v1;
  _OWORD v2[17];

  v1 = *((float *)this + 114);
  if (v1 > 0.0 || *((float *)this + 115) > 0.0)
    *((_BYTE *)this + 465) = 1;
  if (v1 < 0.0)
    *((_DWORD *)this + 114) = *((_DWORD *)this + 112);
  if (*((float *)this + 115) < 0.0)
    *((_DWORD *)this + 115) = *((_DWORD *)this + 113);
  if (!*((_BYTE *)this + 464) && quasar::gLogLevel >= 5)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"New scales will be applied to lattice without undoing existing scales", 69);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v2);
  }
}

void sub_1ADF007FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeRescalingDecoder::runImpl(uint64_t a1, _QWORD *a2, uint64_t **a3, uint64_t a4)
{
  quasar::DecoderChainOutput *v8;
  float v9;
  float v10;
  _BOOL4 v11;
  uint64_t **v12;
  BOOL v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  int v18;
  void *v20;
  uint64_t v21;
  void *__p[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  if (*(_BYTE *)(a1 + 465)
    && fst::CompactLatticeContainsLME<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>((*a3)[19], 500000000))
  {
    if (quasar::gLogLevel >= 4)
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Rescore with LME-specific scales", 32);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v8 = (quasar::DecoderChainOutput *)*a3;
    v9 = *(float *)(a1 + 460);
    v10 = *(float *)(a1 + 456);
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Rescore with generic scales", 27);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    v8 = (quasar::DecoderChainOutput *)*a3;
    v9 = *(float *)(a1 + 452);
    v10 = *(float *)(a1 + 448);
  }
  v11 = quasar::DecoderChainOutput::scaleResultLattice(v8, v9, v10, *(_BYTE *)(a1 + 464));
  v12 = (uint64_t **)(*a3)[132];
  if (v12)
    v13 = !v11;
  else
    v13 = 1;
  if (!v13)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "rescored");
    quasar::UttInfo::addResult(v12, (uint64_t)__p, a2, *a3, *(_DWORD *)(*(_QWORD *)a4 + 16));
    if (SBYTE7(v23) < 0)
      operator delete(__p[0]);
  }
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v20);
  kaldi::CompactLatticeShortestPath((_QWORD *)(*a3)[19], (uint64_t)&v20, 0, *a3 + 56);
  if (*(_DWORD *)(v21 + 88) == -1)
  {
    if (quasar::gLogLevel >= 2)
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Best-path failed", 16);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
    v14 = 2;
  }
  else
  {
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(__p);
    fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v20, (uint64_t)__p, 1);
    v14 = quasar::Decoder::reportResults((uint64_t)__p, (uint64_t *)a3, a4, (uint64_t)a2);
    __p[0] = &unk_1E5D25580;
    v15 = __p[1];
    if (__p[1])
    {
      v16 = *((_DWORD *)__p[1] + 14) - 1;
      *((_DWORD *)__p[1] + 14) = v16;
      if (!v16)
        (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  v20 = &unk_1E5D25800;
  v17 = v21;
  if (v21)
  {
    v18 = *(_DWORD *)(v21 + 56) - 1;
    *(_DWORD *)(v21 + 56) = v18;
    if (!v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return v14;
}

void sub_1ADF00AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  _Unwind_Resume(a1);
}

BOOL fst::CompactLatticeContainsLME<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, int a2)
{
  int v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  _DWORD *v8;
  _QWORD v10[3];
  _DWORD *v11;
  unint64_t v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  if (v4 < 1)
    return 0;
  v5 = v4;
  v6 = 0;
  v7 = 1;
  while (2)
  {
    v12 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v6, v10);
    while (1)
    {
      if (!v10[0])
      {
        if (v12 >= v10[2])
          goto LABEL_16;
        goto LABEL_9;
      }
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v10[0] + 24))(v10[0]) & 1) != 0)
        break;
      if (v10[0])
      {
        v8 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v10[0] + 32))();
        goto LABEL_10;
      }
LABEL_9:
      v8 = (_DWORD *)(v10[1] + 48 * v12);
LABEL_10:
      if (*v8 >= a2)
      {
        if (v10[0])
        {
          (*(void (**)(void))(*(_QWORD *)v10[0] + 8))();
        }
        else if (v11)
        {
          --*v11;
        }
        return v7;
      }
      if (v10[0])
        (*(void (**)(void))(*(_QWORD *)v10[0] + 40))();
      else
        ++v12;
    }
    if (v10[0])
    {
      (*(void (**)(void))(*(_QWORD *)v10[0] + 8))();
      goto LABEL_18;
    }
LABEL_16:
    if (v11)
      --*v11;
LABEL_18:
    v6 = (v6 + 1);
    v7 = (int)v6 < v5;
    if ((_DWORD)v6 != v5)
      continue;
    return v7;
  }
}

void sub_1ADF00D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _DWORD **v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    quasar::InverseTextNormalizer::getNumTokens(v10);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeRescalingDecoder::supportsEager(quasar::OnlineLatticeRescalingDecoder *this)
{
  return 1;
}

double quasar::OnlineLatticeRescalingDecoder::registerParams(quasar::OnlineLatticeRescalingDecoder *this, quasar::SystemConfig *a2)
{
  double result;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(v7, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic likelihoods");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 448, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "lm-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for LM probabilities. Note: the ratio acoustic-scale/lm-scale is all that matters.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 452, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "am-scale-for-lme");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic likelihoods when lattice contains at least one LME token");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 456, (uint64_t)__p, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "lm-scale-for-lme");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for LM probabilities when lattice contains at least one LME token");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 460, (uint64_t)__p, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "undo-old-scales");
  std::string::basic_string[abi:ne180100]<0>(__p, "true by default; if set to false, apply scales on lattice without undoing existing scales");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 464, (uint64_t)__p, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  result = 0.00781250185;
  *((_OWORD *)this + 28) = xmmword_1AE18D0F0;
  *((_WORD *)this + 232) = 1;
  return result;
}

void sub_1ADF00FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeRescalingDecoder::~OnlineLatticeRescalingDecoder(void **this)
{
  quasar::Decoder::~Decoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::SpokenFormLine::parseListAndFieldNames(quasar::SpokenFormLine *this)
{
  std::string *v2;
  std::string *v3;
  _BOOL4 v4;
  _BOOL4 v5;
  std::string::size_type size;
  uint64_t v7;
  size_t v8;
  size_t v9;
  std::string::size_type v10;
  std::string *p_str;
  unsigned __int8 *v12;
  _QWORD *v13;
  int v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 *v23;
  unint64_t v24;
  uint64_t v25;
  void *__p[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  std::string __str;
  const std::string *v44[3];
  std::string *v45;
  std::string *v46;
  char v47[9];

  if (*((char *)this + 31) < 0)
  {
    if (!*((_QWORD *)this + 2))
      return;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    quasar::splitAndTrim((std::string *)((char *)this + 8), (char *)__p, (uint64_t *)&v45);
    if (SBYTE7(v27) < 0)
      operator delete(__p[0]);
    v2 = v45;
    v3 = v46;
    if (v45 == v46)
    {
LABEL_60:
      __p[0] = &v45;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      return;
    }
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "$");
      v4 = quasar::startsWith((unsigned __int8 *)v2, (unsigned __int8 *)__p);
      v5 = v4;
      if ((SBYTE7(v27) & 0x80000000) == 0)
        break;
      operator delete(__p[0]);
      if (v5)
        goto LABEL_12;
LABEL_59:
      if (++v2 == v3)
        goto LABEL_60;
    }
    if (!v4)
      goto LABEL_59;
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(__p, ".");
    quasar::splitAndTrim(v2, (char *)__p, (uint64_t *)v44);
    if (SBYTE7(v27) < 0)
      operator delete(__p[0]);
    if ((const std::string *)((char *)v44[1] - (char *)v44[0]) != (const std::string *)48)
    {
LABEL_58:
      __p[0] = v44;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      goto LABEL_59;
    }
    if (SHIBYTE(v44[0]->__r_.__value_.__r.__words[2]) < 0)
      size = v44[0]->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v44[0]->__r_.__value_.__r.__words[2]);
    std::string::basic_string(&__str, v44[0], 1uLL, size - 1, (std::allocator<char> *)v47);
    v7 = *((unsigned __int8 *)this + 87);
    if (*((char *)this + 87) < 0)
    {
      v8 = *((_QWORD *)this + 9);
      if (v8)
        goto LABEL_22;
    }
    else if (*((_BYTE *)this + 87))
    {
      v8 = *((_QWORD *)this + 9);
LABEL_22:
      if ((v7 & 0x80u) == 0)
        v9 = *((unsigned __int8 *)this + 87);
      else
        v9 = v8;
      v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v10 = __str.__r_.__value_.__l.__size_;
      if (v9 != v10)
        goto LABEL_39;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v7 & 0x80) == 0)
      {
        v12 = (unsigned __int8 *)this + 64;
        while (*v12 == p_str->__r_.__value_.__s.__data_[0])
        {
          ++v12;
          p_str = (std::string *)((char *)p_str + 1);
          if (!--v7)
            goto LABEL_53;
        }
        goto LABEL_39;
      }
      if (memcmp(*((const void **)this + 8), p_str, v8))
      {
LABEL_39:
        if (quasar::gLogLevel >= 5)
        {
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          v27 = 0u;
          v28 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"More than one lists detected in ", 32);
          v14 = *((char *)this + 31);
          if (v14 >= 0)
            v15 = (char *)this + 8;
          else
            v15 = (char *)*((_QWORD *)this + 1);
          if (v14 >= 0)
            v16 = *((unsigned __int8 *)this + 31);
          else
            v16 = *((_QWORD *)this + 2);
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", only first list [", 19);
          v19 = *((char *)this + 87);
          if (v19 >= 0)
            v20 = (char *)this + 64;
          else
            v20 = (char *)*((_QWORD *)this + 8);
          if (v19 >= 0)
            v21 = *((unsigned __int8 *)this + 87);
          else
            v21 = *((_QWORD *)this + 9);
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"] will be used.", 15);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
      }
LABEL_53:
      v23 = (__int128 *)&v44[0][1];
      v24 = *((_QWORD *)this + 12);
      if (v24 >= *((_QWORD *)this + 13))
      {
        v25 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 11, v23);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)this + 88, v23);
        v25 = v24 + 24;
      }
      *((_QWORD *)this + 12) = v25;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      goto LABEL_58;
    }
    std::string::operator=((std::string *)((char *)this + 64), &__str);
    goto LABEL_53;
  }
  if (*((_BYTE *)this + 31))
    goto LABEL_5;
}

void sub_1ADF01358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SpokenFormLine::SpokenFormLine(uint64_t a1, std::string *a2)
{
  std::string *v4;
  _BOOL4 v5;
  _BOOL4 v6;
  char v7;
  uint64_t size;
  std::string *v9;
  char *v10;
  size_t v11;
  std::string *v12;
  char *v13;
  unint64_t v14;
  std::string __p[11];
  char v17;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (std::string *)(a1 + 8);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)a1 = 1065353216;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_WORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "prior=");
  v5 = quasar::startsWith((unsigned __int8 *)a2, (unsigned __int8 *)__p);
  v6 = v5;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_24;
  }
  else if (!v5)
  {
    goto LABEL_24;
  }
  v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v7 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (v7 >= 0)
    v9 = a2;
  else
    v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (size >= 1)
  {
    v10 = (char *)v9 + size;
    v11 = size;
    v12 = v9;
    do
    {
      v13 = (char *)memchr(v12, 32, v11);
      if (!v13)
        break;
      if (*v13 == 32)
      {
        if (v13 == v10)
          break;
        v14 = v13 - (char *)v9;
        if (v14 == -1)
          break;
        std::string::basic_string(__p, a2, v14 + 1, size + ~v14, (std::allocator<char> *)&v17);
        if (*(char *)(a1 + 31) < 0)
          operator delete(v4->__r_.__value_.__l.__data_);
        *v4 = __p[0];
        std::string::basic_string(__p, a2, 6uLL, v14 - 6, (std::allocator<char> *)&v17);
        *(float *)a1 = std::stof(__p, 0);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        *(_BYTE *)(a1 + 56) = 1;
        goto LABEL_25;
      }
      v12 = (std::string *)(v13 + 1);
      v11 = v10 - (char *)v12;
    }
    while (v10 - (char *)v12 >= 1);
  }
LABEL_24:
  std::string::operator=(v4, a2);
LABEL_25:
  quasar::SpokenFormLine::parseListAndFieldNames((quasar::SpokenFormLine *)a1);
  return a1;
}

void sub_1ADF015A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  uint64_t v25;
  void **v26;
  void **v27;
  void *v30;
  void *v31;
  const char *v32;
  size_t v33;

  if (SBYTE7(a10) < 0)
    operator delete((void *)__p);
  if (a2 == 1)
  {
    v30 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      v31 = v30;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v32 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v31 + 16))(v31);
      v33 = strlen(v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v32, v33);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1ADF01580);
  }
  *(_QWORD *)&__p = v25 + 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v25 + 87) < 0)
    operator delete(*v27);
  if (*(char *)(v25 + 55) < 0)
    operator delete(*(void **)(v25 + 32));
  if (*(char *)(v25 + 31) < 0)
    operator delete(*v26);
  _Unwind_Resume(a1);
}

quasar::SpokenFormLine *quasar::SpokenFormLine::SpokenFormLine(quasar::SpokenFormLine *this, _DWORD *a2, __int128 *a3)
{
  __int128 v4;

  *(_DWORD *)this = *a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v4 = *a3;
    *((_QWORD *)this + 3) = *((_QWORD *)a3 + 2);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *((_QWORD *)this + 4) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_WORD *)this + 28) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_BYTE *)this + 56) = 1;
  quasar::SpokenFormLine::parseListAndFieldNames(this);
  return this;
}

void sub_1ADF0178C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;

  a10 = (void **)(v10 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 87) < 0)
    operator delete(*v13);
  quasar::SpokenFormLine::SpokenFormLine(v10, v12, v11);
  _Unwind_Resume(a1);
}

quasar::SpokenFormLine *quasar::SpokenFormLine::SpokenFormLine(quasar::SpokenFormLine *this, const quasar::SpokenFormLine *a2)
{
  std::string *v4;
  std::string *v5;
  std::vector<std::wstring> *v6;

  *(_DWORD *)this = 1065353216;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (std::string *)((char *)this + 32);
  *((_OWORD *)this + 4) = 0u;
  v5 = (std::string *)((char *)this + 64);
  v6 = (std::vector<std::wstring> *)((char *)this + 88);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_WORD *)this + 28) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_DWORD *)this = *(_DWORD *)a2;
  std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
  std::string::operator=(v4, (const std::string *)((char *)a2 + 32));
  *((_WORD *)this + 28) = *((_WORD *)a2 + 28);
  std::string::operator=(v5, (const std::string *)((char *)a2 + 64));
  if (this != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v6, *((std::string **)a2 + 11), *((__int128 **)a2 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3));
  return this;
}

void sub_1ADF01894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 87) < 0)
    operator delete(*v5);
  quasar::SpokenFormLine::SpokenFormLine(v2, v4, v3);
  _Unwind_Resume(a1);
}

void quasar::SpokenFormLine::removeTokenSpokenForm(const std::string *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  size_t v5;
  std::string *p_p;
  char *v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  uint64_t v14;
  std::string __p;
  _QWORD v16[3];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\");
  quasar::split((uint64_t)a1, (uint64_t *)&__p, 0, (uint64_t)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = (char *)v16[0];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16[1] - v16[0]) >> 3) < 3)
    goto LABEL_28;
  if (*(char *)(v16[0] + 47) < 0)
  {
    if (*(_QWORD *)(v16[0] + 32))
      goto LABEL_6;
    goto LABEL_27;
  }
  if (!*(_BYTE *)(v16[0] + 47))
  {
LABEL_27:
    a1 = (const std::string *)v16[0];
LABEL_28:
    std::string::operator=((std::string *)a2, a1);
    goto LABEL_29;
  }
LABEL_6:
  if (*(char *)(v16[0] + 23) >= 0)
    v5 = *(unsigned __int8 *)(v16[0] + 23);
  else
    v5 = *(_QWORD *)(v16[0] + 8);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v5 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (v4[23] >= 0)
      v7 = v4;
    else
      v7 = *(char **)v4;
    memmove(p_p, v7, v5);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v5) = 92;
  v8 = *(char *)(v16[0] + 47);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)(v16[0] + 24);
  else
    v9 = *(const std::string::value_type **)(v16[0] + 24);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v16[0] + 47);
  else
    v10 = *(_QWORD *)(v16[0] + 32);
  v11 = std::string::append(&__p, v9, v10);
  v12 = v11->__r_.__value_.__r.__words[0];
  v17[0] = v11->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  v14 = v17[0];
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v17 + 7);
  *(_BYTE *)(a2 + 23) = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_29:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1ADF01A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  if (a14 < 0)
    operator delete(__p);
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(a1);
}

void quasar::SpokenFormLine::getTokenizedLineWithPrior(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 **a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::string *p_p;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD v33[2];
  _QWORD v34[2];
  std::string __p;
  std::string v36;
  std::string v37;
  std::string v38;

  if (*(_BYTE *)(a1 + 56))
  {
    std::to_string(&v36, *(float *)a1);
    v14 = std::string::insert(&v36, 0, "prior=");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v37, " ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = *a2;
    v19 = (std::__shared_weak_count *)a2[1];
    v34[0] = v18;
    v34[1] = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    quasar::SpokenFormLine::getTokenizedLine(a1, v34, a3, a4, a5, a6, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v38, (const std::string::value_type *)p_p, size);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    a7->__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a7->__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v19)
    {
      v26 = (unint64_t *)&v19->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  else
  {
    v28 = (std::__shared_weak_count *)a2[1];
    v33[0] = *a2;
    v33[1] = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    quasar::SpokenFormLine::getTokenizedLine(a1, v33, a3, a4, a5, a6, a7);
    if (v28)
    {
      v31 = (unint64_t *)&v28->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
}

void sub_1ADF01D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::SpokenFormLine::getTokenizedLine(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned __int8 **a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  BOOL v9;
  uint64_t i;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;
  const std::string *v22;
  const std::string *v23;
  std::vector<std::string>::pointer end;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  std::string *v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  std::vector<std::string>::pointer v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  std::string *v44;
  const std::string **v45;
  const std::string **v46;
  const std::string *v47;
  const std::string *v48;
  std::vector<std::string>::pointer v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  std::string *v57;
  std::vector<std::string>::pointer v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  std::string *v66;
  std::vector<std::string>::pointer v67;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  std::string *v75;
  std::string *v76;
  __int128 *j;
  __int128 *v78;
  __int128 v79;
  __int128 *v80;
  std::string *v81;
  uint64_t *v82;
  std::string *v84;
  int v85;
  void *v86[2];
  std::string::size_type v87;
  void *v88;
  const std::string **v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  unsigned __int8 v93;
  std::vector<std::string> v94;
  int v95[2];
  __int128 *v96;
  unint64_t v97;
  std::string *v98;
  std::string *v99;
  unint64_t v100;
  _QWORD v101[5];
  void *v102[2];
  std::string::size_type v103;
  void *__p[2];
  __int128 v105;
  __int128 v106;
  _OWORD v107[3];
  _OWORD v108[11];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 57))
    v9 = a5 == 0;
  else
    v9 = 0;
  if (!v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v102, "\\EOS");
    std::string::basic_string[abi:ne180100]<0>(__p, "[");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v105 + 1, "]");
    std::string::basic_string[abi:ne180100]<0>(v107, "(");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v107[1] + 1, ")");
    std::string::basic_string[abi:ne180100]<0>(v108, "|");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v108[1] + 1, "\\EOS");
    std::unordered_set<std::string>::unordered_set((uint64_t)v101, (unsigned __int8 *)__p, 6);
    for (i = 0; i != -144; i -= 24)
    {
      if (*((char *)&v108[2] + i + 15) < 0)
        operator delete(*(void **)((char *)&v108[1] + i + 8));
    }
    v15 = *a3;
    v14 = a3[1];
    while (v15 != v14)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v101, v15, (uint64_t)v15);
      v15 += 24;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    quasar::splitAndTrimNoEmpty((const std::string *)(a1 + 8), (char *)__p, &v98);
    if (SBYTE7(v105) < 0)
      operator delete(__p[0]);
    v16 = v99;
    if ((unint64_t)v99 >= v100)
    {
      v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v98, (__int128 *)v102);
    }
    else
    {
      if (SHIBYTE(v103) < 0)
      {
        std::string::__init_copy_ctor_external(v99, (const std::string::value_type *)v102[0], (std::string::size_type)v102[1]);
      }
      else
      {
        v17 = *(_OWORD *)v102;
        v99->__r_.__value_.__r.__words[2] = v103;
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      v18 = v16 + 1;
    }
    v99 = v18;
    *(_QWORD *)v95 = 0;
    v96 = 0;
    v97 = 0;
    memset(&v94, 0, sizeof(v94));
    v19 = (uint64_t)v98;
    if (v98 != v18)
    {
      v84 = v18;
      v82 = a4;
      v20 = 0;
      while (1)
      {
        if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v101, (unsigned __int8 *)v19))
        {
          v85 = 1;
          if ((v20 & 1) == 0)
            goto LABEL_41;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "//");
          if (quasar::startsWith((unsigned __int8 *)v19, (unsigned __int8 *)__p))
          {
            v85 = 1;
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v91, "\\PM-");
            if (quasar::startsWith((unsigned __int8 *)v19, (unsigned __int8 *)&v91))
            {
              v85 = 1;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&v88, "prior=");
              v21 = quasar::startsWith((unsigned __int8 *)v19, (unsigned __int8 *)&v88)
                 || a6 + 8 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a6, (const void **)v19);
              v85 = v21;
              if (SHIBYTE(v90) < 0)
                operator delete(v88);
            }
            if ((char)v93 < 0)
              operator delete(v91);
          }
          if (SBYTE7(v105) < 0)
            operator delete(__p[0]);
          if ((v20 & 1) != v85)
          {
            if ((v20 & 1) != 0)
            {
              std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v94, v94.__end_, *(std::string **)v95, v96, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v96 - *(_QWORD *)v95) >> 3));
            }
            else
            {
LABEL_41:
              if (*(__int128 **)v95 != v96)
              {
                __p[0] = " ";
                __p[1] = (void *)1;
                quasar::join<std::vector<std::string>>((uint64_t *)v95, (uint64_t *)__p);
                v88 = 0;
                v89 = 0;
                v90 = 0;
                (*(void (**)(_QWORD, void **, void **))(*(_QWORD *)*a2 + 16))(*a2, &v91, &v88);
                if (v88 == v89)
                {
                  if (quasar::gLogLevel >= 5)
                  {
                    memset(v108, 0, sizeof(v108));
                    memset(v107, 0, sizeof(v107));
                    v105 = 0u;
                    v106 = 0u;
                    *(_OWORD *)__p = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to tokenize ", 19);
                    if ((v93 & 0x80u) == 0)
                      v34 = &v91;
                    else
                      v34 = v91;
                    if ((v93 & 0x80u) == 0)
                      v35 = v93;
                    else
                      v35 = v92;
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
                    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
                  }
                  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v94, v94.__end_, *(std::string **)v95, v96, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v96 - *(_QWORD *)v95) >> 3));
                }
                else if ((char *)v89 - (_BYTE *)v88 == 32)
                {
                  v23 = *(const std::string **)v88;
                  v22 = (const std::string *)*((_QWORD *)v88 + 1);
                  while (v23 != v22)
                  {
                    quasar::SpokenFormLine::removeTokenSpokenForm(v23, (uint64_t)v86);
                    end = v94.__end_;
                    if (v94.__end_ >= v94.__end_cap_.__value_)
                    {
                      v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94.__end_ - (char *)v94.__begin_) >> 3);
                      v27 = v26 + 1;
                      if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      if (0x5555555555555556 * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3) > v27)
                        v27 = 0x5555555555555556 * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3);
                      if (0xAAAAAAAAAAAAAAABLL * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3) >= 0x555555555555555)
                        v28 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v28 = v27;
                      *(_QWORD *)&v106 = &v94.__end_cap_;
                      if (v28)
                        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v94.__end_cap_, v28);
                      else
                        v29 = 0;
                      v30 = &v29[24 * v26];
                      __p[0] = v29;
                      __p[1] = v30;
                      *((_QWORD *)&v105 + 1) = &v29[24 * v28];
                      v31 = *(_OWORD *)v86;
                      *((_QWORD *)v30 + 2) = v87;
                      *(_OWORD *)v30 = v31;
                      v86[1] = 0;
                      v87 = 0;
                      v86[0] = 0;
                      *(_QWORD *)&v105 = v30 + 24;
                      std::vector<std::string>::__swap_out_circular_buffer(&v94, (std::__split_buffer<std::string> *)__p);
                      v32 = v94.__end_;
                      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
                      v94.__end_ = v32;
                      if (SHIBYTE(v87) < 0)
                        operator delete(v86[0]);
                    }
                    else
                    {
                      v25 = *(_OWORD *)v86;
                      v94.__end_->__r_.__value_.__r.__words[2] = v87;
                      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v25;
                      v94.__end_ = end + 1;
                    }
                    v23 = (const std::string *)((char *)v23 + 32);
                  }
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(v86, "(");
                  v36 = v94.__end_;
                  if (v94.__end_ >= v94.__end_cap_.__value_)
                  {
                    v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94.__end_ - (char *)v94.__begin_) >> 3);
                    v39 = v38 + 1;
                    if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    if (0x5555555555555556 * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3) > v39)
                      v39 = 0x5555555555555556 * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3);
                    if (0xAAAAAAAAAAAAAAABLL * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3) >= 0x555555555555555)
                      v40 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v40 = v39;
                    *(_QWORD *)&v106 = &v94.__end_cap_;
                    if (v40)
                      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v94.__end_cap_, v40);
                    else
                      v41 = 0;
                    v42 = &v41[24 * v38];
                    __p[0] = v41;
                    __p[1] = v42;
                    *((_QWORD *)&v105 + 1) = &v41[24 * v40];
                    v43 = *(_OWORD *)v86;
                    *((_QWORD *)v42 + 2) = v87;
                    *(_OWORD *)v42 = v43;
                    v86[1] = 0;
                    v87 = 0;
                    v86[0] = 0;
                    *(_QWORD *)&v105 = v42 + 24;
                    std::vector<std::string>::__swap_out_circular_buffer(&v94, (std::__split_buffer<std::string> *)__p);
                    v44 = v94.__end_;
                    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
                    v94.__end_ = v44;
                    if (SHIBYTE(v87) < 0)
                      operator delete(v86[0]);
                  }
                  else
                  {
                    v37 = *(_OWORD *)v86;
                    v94.__end_->__r_.__value_.__r.__words[2] = v87;
                    *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
                    v94.__end_ = v36 + 1;
                  }
                  v45 = (const std::string **)v88;
LABEL_84:
                  v46 = v89;
                  while (v45 != v46)
                  {
                    v47 = *v45;
                    v48 = v45[1];
                    if (*v45 != v48)
                    {
                      do
                      {
                        quasar::SpokenFormLine::removeTokenSpokenForm(v47, (uint64_t)v86);
                        v49 = v94.__end_;
                        if (v94.__end_ >= v94.__end_cap_.__value_)
                        {
                          v51 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94.__end_ - (char *)v94.__begin_) >> 3);
                          v52 = v51 + 1;
                          if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
                            std::vector<int>::__throw_length_error[abi:ne180100]();
                          if (0x5555555555555556 * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3) > v52)
                            v52 = 0x5555555555555556 * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3);
                          if (0xAAAAAAAAAAAAAAABLL * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3) >= 0x555555555555555)
                            v53 = 0xAAAAAAAAAAAAAAALL;
                          else
                            v53 = v52;
                          *(_QWORD *)&v106 = &v94.__end_cap_;
                          if (v53)
                            v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v94.__end_cap_, v53);
                          else
                            v54 = 0;
                          v55 = &v54[24 * v51];
                          __p[0] = v54;
                          __p[1] = v55;
                          *((_QWORD *)&v105 + 1) = &v54[24 * v53];
                          v56 = *(_OWORD *)v86;
                          *((_QWORD *)v55 + 2) = v87;
                          *(_OWORD *)v55 = v56;
                          v86[1] = 0;
                          v87 = 0;
                          v86[0] = 0;
                          *(_QWORD *)&v105 = v55 + 24;
                          std::vector<std::string>::__swap_out_circular_buffer(&v94, (std::__split_buffer<std::string> *)__p);
                          v57 = v94.__end_;
                          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
                          v94.__end_ = v57;
                          if (SHIBYTE(v87) < 0)
                            operator delete(v86[0]);
                        }
                        else
                        {
                          v50 = *(_OWORD *)v86;
                          v94.__end_->__r_.__value_.__r.__words[2] = v87;
                          *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
                          v94.__end_ = v49 + 1;
                        }
                        v47 = (const std::string *)((char *)v47 + 32);
                      }
                      while (v47 != v48);
                      v46 = v89;
                    }
                    v45 += 4;
                    if (v45 != v46)
                    {
                      std::string::basic_string[abi:ne180100]<0>(v86, "|");
                      v58 = v94.__end_;
                      if (v94.__end_ >= v94.__end_cap_.__value_)
                      {
                        v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94.__end_ - (char *)v94.__begin_) >> 3);
                        v61 = v60 + 1;
                        if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        if (0x5555555555555556 * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3) > v61)
                          v61 = 0x5555555555555556 * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3);
                        if (0xAAAAAAAAAAAAAAABLL * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3) >= 0x555555555555555)
                          v62 = 0xAAAAAAAAAAAAAAALL;
                        else
                          v62 = v61;
                        *(_QWORD *)&v106 = &v94.__end_cap_;
                        if (v62)
                          v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v94.__end_cap_, v62);
                        else
                          v63 = 0;
                        v64 = &v63[24 * v60];
                        __p[0] = v63;
                        __p[1] = v64;
                        *((_QWORD *)&v105 + 1) = &v63[24 * v62];
                        v65 = *(_OWORD *)v86;
                        *((_QWORD *)v64 + 2) = v87;
                        *(_OWORD *)v64 = v65;
                        v86[1] = 0;
                        v87 = 0;
                        v86[0] = 0;
                        *(_QWORD *)&v105 = v64 + 24;
                        std::vector<std::string>::__swap_out_circular_buffer(&v94, (std::__split_buffer<std::string> *)__p);
                        v66 = v94.__end_;
                        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
                        v94.__end_ = v66;
                        if (SHIBYTE(v87) < 0)
                          operator delete(v86[0]);
                      }
                      else
                      {
                        v59 = *(_OWORD *)v86;
                        v94.__end_->__r_.__value_.__r.__words[2] = v87;
                        *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
                        v94.__end_ = v58 + 1;
                      }
                      goto LABEL_84;
                    }
                  }
                  std::string::basic_string[abi:ne180100]<0>(v86, ")");
                  v67 = v94.__end_;
                  if (v94.__end_ >= v94.__end_cap_.__value_)
                  {
                    v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94.__end_ - (char *)v94.__begin_) >> 3);
                    v70 = v69 + 1;
                    if (v69 + 1 > 0xAAAAAAAAAAAAAAALL)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    if (0x5555555555555556 * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3) > v70)
                      v70 = 0x5555555555555556 * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3);
                    if (0xAAAAAAAAAAAAAAABLL * (((char *)v94.__end_cap_.__value_ - (char *)v94.__begin_) >> 3) >= 0x555555555555555)
                      v71 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v71 = v70;
                    *(_QWORD *)&v106 = &v94.__end_cap_;
                    if (v71)
                      v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v94.__end_cap_, v71);
                    else
                      v72 = 0;
                    v73 = &v72[24 * v69];
                    __p[0] = v72;
                    __p[1] = v73;
                    *((_QWORD *)&v105 + 1) = &v72[24 * v71];
                    v74 = *(_OWORD *)v86;
                    *((_QWORD *)v73 + 2) = v87;
                    *(_OWORD *)v73 = v74;
                    v86[1] = 0;
                    v87 = 0;
                    v86[0] = 0;
                    *(_QWORD *)&v105 = v73 + 24;
                    std::vector<std::string>::__swap_out_circular_buffer(&v94, (std::__split_buffer<std::string> *)__p);
                    v75 = v94.__end_;
                    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
                    v94.__end_ = v75;
                    if (SHIBYTE(v87) < 0)
                      operator delete(v86[0]);
                  }
                  else
                  {
                    v68 = *(_OWORD *)v86;
                    v94.__end_->__r_.__value_.__r.__words[2] = v87;
                    *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
                    v94.__end_ = v67 + 1;
                  }
                }
                __p[0] = &v88;
                std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                if ((char)v93 < 0)
                  operator delete(v91);
              }
            }
            v76 = *(std::string **)v95;
            for (j = v96; j != (__int128 *)v76; j = (__int128 *)((char *)j - 24))
            {
              if (*((char *)j - 1) < 0)
                operator delete(*((void **)j - 3));
            }
            v96 = (__int128 *)v76;
            goto LABEL_137;
          }
          v85 = v20;
        }
LABEL_137:
        v78 = v96;
        if ((unint64_t)v96 >= v97)
        {
          v80 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v95, (__int128 *)v19);
        }
        else
        {
          if (*(char *)(v19 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v96, *(const std::string::value_type **)v19, *(_QWORD *)(v19 + 8));
          }
          else
          {
            v79 = *(_OWORD *)v19;
            *((_QWORD *)v96 + 2) = *(_QWORD *)(v19 + 16);
            *v78 = v79;
          }
          v80 = (__int128 *)((char *)v78 + 24);
        }
        v96 = v80;
        v19 += 24;
        v20 = v85;
        if ((std::string *)v19 == v84)
        {
          a4 = v82;
          if (*(__int128 **)v95 != v80)
            std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v94, v94.__end_, *(std::string **)v95, (__int128 *)((char *)v80 - 24), 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v80 - *(_QWORD *)v95 - 24) >> 3));
          break;
        }
      }
    }
    v91 = " ";
    v92 = 1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v94, (uint64_t *)&v91);
    v81 = (std::string *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      operator delete(v81->__r_.__value_.__l.__data_);
    *(_OWORD *)&v81->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 48) = v105;
    quasar::RegexRules::applyRules(a4, (uint64_t)v81, (std::string *)__p);
    std::string::operator=(v81, (const std::string *)__p);
    if (SBYTE7(v105) < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 57) = 1;
    __p[0] = &v94;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = v95;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = &v98;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v101);
    if (SHIBYTE(v103) < 0)
      operator delete(v102[0]);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a7, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&a7->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    a7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 48);
  }
}

void sub_1ADF02908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void **p_p,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,std::__split_buffer<std::wstring> *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__pa,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a47);
  if (a57 < 0)
    operator delete(__pa);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpokenForm::SpokenForm(uint64_t a1, uint64_t a2)
{
  char v4;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  quasar::SpokenForm::loadFromFile(a1, a2, &v4);
  return a1;
}

void sub_1ADF02B60(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void quasar::SpokenForm::loadFromFile(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  std::locale::id *v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  std::string::size_type size;
  int64_t v10;
  std::string *p_str;
  _BYTE *v12;
  std::string *v13;
  _BYTE *v14;
  _BOOL4 v16;
  std::string::size_type v17;
  _BOOL4 v18;
  _BOOL4 v19;
  std::string::size_type v20;
  void **v21;
  std::string::size_type v22;
  void *v23;
  std::string *v24;
  std::string::size_type v25;
  unsigned __int8 *v26;
  std::string::size_type v27;
  std::string::size_type v28;
  void *v29;
  unsigned __int8 *v30;
  void *__p[2];
  _OWORD v32[16];
  std::string v33;
  std::string v34[2];
  std::string v35;
  std::string __str;
  void **v37;
  _QWORD v38[2];
  _QWORD v39[51];
  _QWORD v40[21];

  v40[19] = *MEMORY[0x1E0C80C00];
  memset(&__str, 0, sizeof(__str));
  std::ifstream::basic_ifstream(v38);
  *a3 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v35, "");
  memset(v34, 0, sizeof(v34));
  if (!v39[15])
  {
    if (quasar::gLogLevel >= 1)
    {
      memset(v32, 0, sizeof(v32));
      *(_OWORD *)__p = 0uLL;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to open the file to read.", 32);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    *a3 = 0;
    goto LABEL_108;
  }
  v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(v38[0] - 24)));
    v6 = std::locale::use_facet((const std::locale *)__p, v5);
    v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale((std::locale *)__p);
    v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38, (uint64_t)&__str, v7);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
      break;
    quasar::trim(&__str);
    std::string::basic_string[abi:ne180100]<0>(__p, "#");
    if (quasar::startsWith((unsigned __int8 *)&__str, (unsigned __int8 *)__p))
      goto LABEL_5;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    if (SBYTE7(v32[0]) < 0)
    {
      operator delete(__p[0]);
      if (size)
      {
LABEL_14:
        std::string::basic_string[abi:ne180100]<0>(__p, "[");
        if (quasar::startsWith((unsigned __int8 *)&__str, (unsigned __int8 *)__p))
        {
          std::string::basic_string[abi:ne180100]<0>(&v33, "]");
          if (quasar::endsWith((uint64_t *)&__str, (uint64_t *)&v33))
          {
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            else
              v10 = __str.__r_.__value_.__l.__size_;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_str = &__str;
            else
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if (v10 < 1)
            {
              v16 = 1;
            }
            else
            {
              v12 = (char *)p_str + v10;
              v13 = p_str;
              do
              {
                v14 = memchr(v13, 32, v10);
                if (!v14)
                  break;
                if (*v14 == 32)
                  goto LABEL_28;
                v13 = (std::string *)(v14 + 1);
                v10 = v12 - (_BYTE *)v13;
              }
              while (v12 - (_BYTE *)v13 > 0);
              v14 = v12;
LABEL_28:
              v16 = v14 == v12 || v14 - (_BYTE *)p_str == -1;
            }
          }
          else
          {
            v16 = 0;
          }
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v33.__r_.__value_.__l.__data_);
        }
        else
        {
          v16 = 0;
        }
        if ((SBYTE7(v32[0]) & 0x80000000) == 0)
        {
          if (v16)
            goto LABEL_41;
          goto LABEL_48;
        }
        operator delete(__p[0]);
        if (v16)
        {
LABEL_41:
          v17 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
          if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v17 = v35.__r_.__value_.__l.__size_;
          if (v17)
            quasar::SpokenFormSection::appendRawLine(v34, &v35);
          if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, v34[0].__r_.__value_.__l.__data_, v34[0].__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)&v34[0].__r_.__value_.__l.__data_;
            *(_QWORD *)&v32[0] = *((_QWORD *)&v34[0].__r_.__value_.__l + 2);
          }
          if (SBYTE7(v32[0]) < 0)
          {
            v23 = __p[1];
            operator delete(__p[0]);
            if (!v23)
              goto LABEL_79;
          }
          else if (!BYTE7(v32[0]))
          {
            goto LABEL_79;
          }
          if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, v34[0].__r_.__value_.__l.__data_, v34[0].__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)&v34[0].__r_.__value_.__l.__data_;
            *(_QWORD *)&v32[0] = *((_QWORD *)&v34[0].__r_.__value_.__l + 2);
          }
          v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          v26 = std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v33);
          std::string::operator=((std::string *)(v26 + 40), v34);
          if (v26 + 40 != (unsigned __int8 *)v34)
            std::vector<quasar::SpokenFormLine>::__assign_with_size[abi:ne180100]<quasar::SpokenFormLine*,quasar::SpokenFormLine*>((uint64_t)(v26 + 64), (quasar::SpokenFormLine *)v34[1].__r_.__value_.__l.__data_, (quasar::SpokenFormLine *)v34[1].__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7* ((uint64_t)(v34[1].__r_.__value_.__l.__size_ - v34[1].__r_.__value_.__r.__words[0]) >> 4));
          if (SBYTE7(v32[0]) < 0)
            operator delete(__p[0]);
LABEL_79:
          v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v27 = __str.__r_.__value_.__l.__size_;
          std::string::basic_string(&v33, &__str, 1uLL, v27 - 2, (std::allocator<char> *)&v37);
          quasar::SpokenFormSection::SpokenFormSection((uint64_t)__p, &v33);
          if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v34[0].__r_.__value_.__l.__data_);
          *(_OWORD *)&v34[0].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
          v34[0].__r_.__value_.__r.__words[2] = *(_QWORD *)&v32[0];
          BYTE7(v32[0]) = 0;
          LOBYTE(__p[0]) = 0;
          std::vector<quasar::SpokenFormLine>::__vdeallocate((void **)&v34[1].__r_.__value_.__l.__data_);
          v34[1] = *(std::string *)((char *)v32 + 8);
          memset((char *)v32 + 8, 0, 24);
          v37 = (void **)v32 + 1;
          std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100](&v37);
          if (SBYTE7(v32[0]) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v33.__r_.__value_.__l.__data_);
        }
        else
        {
LABEL_48:
          std::string::basic_string[abi:ne180100]<0>(__p, "\\");
          v18 = quasar::endsWith((uint64_t *)&__str, (uint64_t *)__p);
          v19 = v18;
          if (SBYTE7(v32[0]) < 0)
          {
            operator delete(__p[0]);
            if (v19)
              goto LABEL_50;
LABEL_67:
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &__str;
            else
              v24 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v25 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            else
              v25 = __str.__r_.__value_.__l.__size_;
            std::string::append(&v35, (const std::string::value_type *)v24, v25);
            quasar::SpokenFormSection::appendRawLine(v34, &v35);
            MEMORY[0x1AF44C914](&v35, "");
          }
          else
          {
            if (!v18)
              goto LABEL_67;
LABEL_50:
            v20 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v20 = __str.__r_.__value_.__l.__size_;
            std::string::basic_string((std::string *)__p, &__str, 0, v20 - 1, (std::allocator<char> *)&v33);
            if ((SBYTE7(v32[0]) & 0x80u) == 0)
              v21 = __p;
            else
              v21 = (void **)__p[0];
            if ((SBYTE7(v32[0]) & 0x80u) == 0)
              v22 = BYTE7(v32[0]);
            else
              v22 = (std::string::size_type)__p[1];
            std::string::append(&v35, (const std::string::value_type *)v21, v22);
LABEL_5:
            if (SBYTE7(v32[0]) < 0)
              operator delete(__p[0]);
          }
        }
      }
    }
    else if (size)
    {
      goto LABEL_14;
    }
  }
  v28 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v28 = v35.__r_.__value_.__l.__size_;
  if (v28)
    quasar::SpokenFormSection::appendRawLine(v34, &v35);
  if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, v34[0].__r_.__value_.__l.__data_, v34[0].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v34[0].__r_.__value_.__l.__data_;
    *(_QWORD *)&v32[0] = *((_QWORD *)&v34[0].__r_.__value_.__l + 2);
  }
  if (SBYTE7(v32[0]) < 0)
  {
    v29 = __p[1];
    operator delete(__p[0]);
    if (!v29)
      goto LABEL_108;
  }
  else if (!BYTE7(v32[0]))
  {
    goto LABEL_108;
  }
  if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, v34[0].__r_.__value_.__l.__data_, v34[0].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v34[0].__r_.__value_.__l.__data_;
    *(_QWORD *)&v32[0] = *((_QWORD *)&v34[0].__r_.__value_.__l + 2);
  }
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v30 = std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v33);
  std::string::operator=((std::string *)(v30 + 40), v34);
  if (v30 + 40 != (unsigned __int8 *)v34)
    std::vector<quasar::SpokenFormLine>::__assign_with_size[abi:ne180100]<quasar::SpokenFormLine*,quasar::SpokenFormLine*>((uint64_t)(v30 + 64), (quasar::SpokenFormLine *)v34[1].__r_.__value_.__l.__data_, (quasar::SpokenFormLine *)v34[1].__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v34[1].__r_.__value_.__l.__size_ - v34[1].__r_.__value_.__r.__words[0]) >> 4));
  if (SBYTE7(v32[0]) < 0)
    operator delete(__p[0]);
LABEL_108:
  __p[0] = &v34[1];
  std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v38[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v39);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1ADF03288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  uint64_t a67;

  quasar::SpokenFormSection::~SpokenFormSection(&a47);
  if (a59 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a67);
  if (a65 < 0)
    operator delete(a60);
  _Unwind_Resume(a1);
}

double quasar::SpokenForm::SpokenForm(quasar::SpokenForm *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  return result;
}

void quasar::SpokenFormSection::appendRawLine(_QWORD *a1, std::string *a2)
{
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[8];
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  uint64_t v12;
  void **v13;

  quasar::SpokenFormLine::SpokenFormLine((uint64_t)v5, a2);
  v3 = a1[4];
  if (v3 >= a1[5])
  {
    v4 = std::vector<quasar::SpokenFormLine>::__push_back_slow_path<quasar::SpokenFormLine>(a1 + 3, (const quasar::SpokenFormLine *)v5);
  }
  else
  {
    quasar::SpokenFormLine::SpokenFormLine((quasar::SpokenFormLine *)a1[4], (const quasar::SpokenFormLine *)v5);
    v4 = v3 + 112;
    a1[4] = v3 + 112;
  }
  a1[4] = v4;
  v13 = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v13);
  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8);
  if (v7 < 0)
    operator delete(v6);
}

void sub_1ADF03450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::SpokenFormLine::~SpokenFormLine((void **)va);
  _Unwind_Resume(a1);
}

void quasar::SpokenFormSection::~SpokenFormSection(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void quasar::SpokenForm::getSectionNames(quasar::SpokenForm *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  __int128 *v5;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v4 = 0;
    do
    {
      v5 = (__int128 *)(v2 + 2);
      if (v4 >= a2[2])
      {
        v4 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v5);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v5);
        v4 += 24;
      }
      a2[1] = v4;
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
}

void sub_1ADF03530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpokenForm::clear(quasar::SpokenForm *this)
{
  _OWORD v3[2];
  int v4;

  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::clear((uint64_t)this);
  memset(v3, 0, sizeof(v3));
  v4 = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::swap((uint64_t)v3, (uint64_t)this);
  return std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table((uint64_t)v3);
}

void quasar::SpokenFormLine::~SpokenFormLine(void **this)
{
  void **v2;

  v2 = this + 11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t std::vector<quasar::SpokenFormLine>::__push_back_slow_path<quasar::SpokenFormLine>(uint64_t *a1, const quasar::SpokenFormLine *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  quasar::SpokenFormLine *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x124924924924924)
    v9 = 0x249249249249249;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandInterpretation>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (quasar::SpokenFormLine *)&v10[112 * v4];
  v16 = &v10[112 * v9];
  quasar::SpokenFormLine::SpokenFormLine(v14, a2);
  v15 = (char *)v14 + 112;
  std::vector<quasar::SpokenFormLine>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::SpokenFormLine>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADF03704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::SpokenFormLine>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::SpokenFormLine>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SpokenFormLine>,std::reverse_iterator<quasar::SpokenFormLine*>,std::reverse_iterator<quasar::SpokenFormLine*>,std::reverse_iterator<quasar::SpokenFormLine*>>((uint64_t)(a1 + 2), a1[1], (const quasar::SpokenFormLine *)a1[1], *a1, (const quasar::SpokenFormLine *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SpokenFormLine>,std::reverse_iterator<quasar::SpokenFormLine*>,std::reverse_iterator<quasar::SpokenFormLine*>,std::reverse_iterator<quasar::SpokenFormLine*>>(uint64_t a1, uint64_t a2, const quasar::SpokenFormLine *a3, uint64_t a4, const quasar::SpokenFormLine *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  const quasar::SpokenFormLine *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (const quasar::SpokenFormLine *)((char *)v9 - 112);
      quasar::SpokenFormLine::SpokenFormLine((quasar::SpokenFormLine *)(v7 - 112), v9);
      v7 = *((_QWORD *)&v15 + 1) - 112;
      *((_QWORD *)&v15 + 1) -= 112;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,std::reverse_iterator<quasar::SpokenFormLine*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1ADF03830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,std::reverse_iterator<quasar::SpokenFormLine*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,std::reverse_iterator<quasar::SpokenFormLine*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,std::reverse_iterator<quasar::SpokenFormLine*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,std::reverse_iterator<quasar::SpokenFormLine*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::SpokenFormLine>::destroy[abi:ne180100](v3, v1);
      v1 += 112;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::SpokenFormLine>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::SpokenFormLine>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::SpokenFormLine>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 112;
    std::allocator<quasar::SpokenFormLine>::destroy[abi:ne180100](v4, i - 112);
  }
}

void std::vector<quasar::SpokenFormLine>::__assign_with_size[abi:ne180100]<quasar::SpokenFormLine*,quasar::SpokenFormLine*>(uint64_t a1, quasar::SpokenFormLine *a2, quasar::SpokenFormLine *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  quasar::SpokenFormLine *v12;
  __int128 **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<quasar::SpokenFormLine>::__vdeallocate((void **)a1);
    if (a4 > 0x249249249249249)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)) >= 0x124924924924924)
      v11 = 0x249249249249249;
    else
      v11 = v10;
    std::vector<quasar::VoiceCommandInterpretation>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*,quasar::SpokenFormLine*,quasar::SpokenFormLine*>(v8, a2, a3, *(quasar::SpokenFormLine **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = (__int128 **)((char *)a2 + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::SpokenFormLine *,quasar::SpokenFormLine *,quasar::SpokenFormLine *>((uint64_t)&v17, (__int128 **)a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*,quasar::SpokenFormLine*,quasar::SpokenFormLine*>(v8, (quasar::SpokenFormLine *)v13, a3, *(quasar::SpokenFormLine **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::SpokenFormLine *,quasar::SpokenFormLine *,quasar::SpokenFormLine *>((uint64_t)&v18, (__int128 **)a2, (__int128 **)a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 112;
      std::allocator<quasar::SpokenFormLine>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADF03ACC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADF03AD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__int128 **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::SpokenFormLine *,quasar::SpokenFormLine *,quasar::SpokenFormLine *>(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4)
{
  __int128 **v5;
  __int128 **v6;
  __int128 **v7;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 12;
  do
  {
    v7 = v6 - 12;
    *(_DWORD *)a4 = *((_DWORD *)v6 - 24);
    std::string::operator=((std::string *)(a4 + 8), (const std::string *)(v6 - 11));
    std::string::operator=((std::string *)(a4 + 32), (const std::string *)(v6 - 8));
    *(_WORD *)(a4 + 56) = *((_WORD *)v6 - 20);
    std::string::operator=((std::string *)(a4 + 64), (const std::string *)(v6 - 4));
    if ((__int128 **)a4 != v6 - 12)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a4 + 88), (std::string *)*(v6 - 1), *v6, 0xAAAAAAAAAAAAAAABLL * (((char *)*v6 - (char *)*(v6 - 1)) >> 3));
    a4 += 112;
    v6 += 14;
  }
  while (v7 + 14 != v5);
  return v5;
}

uint64_t quasar::SpokenFormSection::SpokenFormSection(uint64_t a1, const std::string *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)a1, a2);
  return a1;
}

void sub_1ADF03BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 24);
  std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

void quasar::ProcessingSource::process(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _WORD *v4;

  v3 = *(char *)(a2 + 23);
  if (v3 < 0)
  {
    if (*(_QWORD *)(a2 + 8) != 2)
    {
LABEL_7:
      quasar::ProcessingBlock::send(a1, (const void **)a2, a3, 0);
      return;
    }
    v4 = *(_WORD **)a2;
  }
  else
  {
    v4 = (_WORD *)a2;
    if (v3 != 2)
      goto LABEL_7;
  }
  if (*v4 != 28265)
    goto LABEL_7;
  quasar::ProcessingBlock::send(a1, a3, 0);
}

uint64_t quasar::ProcessingSource::minConfigVersion(quasar::ProcessingSource *this)
{
  return 35;
}

void quasar::ProcessingSource::~ProcessingSource(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this);
  JUMPOUT(0x1AF44D190);
}

const char *quasar::ProcessingSource::blockType(quasar::ProcessingSource *this)
{
  return "ProcessingSource";
}

uint64_t callBackParam(int a1, int a2, void *lpsrc, uint64_t *a4, TAllocator *a5)
{
  uint64_t v7;
  TParam *v8;
  TParam *v9;
  uint64_t v10;
  __int32 *v11;
  __int32 *v12;
  __int32 *v14;
  __int128 v15;
  _BYTE v16[1024];
  char v17;
  int v18;

  if (a4)
    v7 = *a4;
  else
    v7 = 1;
  if (*((_DWORD *)lpsrc + 2))
  {
    v14 = (__int32 *)v16;
    v15 = xmmword_1AE1418C0;
    v17 = 1;
    (*(void (**)(void *, uint64_t, __int32 **))(*(_QWORD *)lpsrc + 16))(lpsrc, v7, &v14);
    if (*((_DWORD *)lpsrc + 2) == 4)
    {
      TStringParam::getGrammarValue(v8, v7, (uint64_t)&v14);
    }
    else
    {
      (*(void (**)(void *, uint64_t, __int32 **))(*(_QWORD *)lpsrc + 16))(lpsrc, v7, &v14);
    }
    if ((unint64_t)(*((_QWORD *)&v15 + 1) + 1) >> 62)
      v10 = -1;
    else
      v10 = 4 * (*((_QWORD *)&v15 + 1) + 1);
    v11 = (__int32 *)TAllocator::allocate(a5, v10);
    if (*((_QWORD *)&v15 + 1) >= (unint64_t)v15)
    {
      if (v17)
      {
        v18 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v14, *((unint64_t *)&v15 + 1), &v18, 1uLL);
        v12 = v14;
        --*((_QWORD *)&v15 + 1);
      }
      else
      {
        v12 = v14;
        if ((_QWORD)v15)
          v14[(_QWORD)v15 - 1] = 0;
      }
    }
    else
    {
      v12 = v14;
      v14[*((_QWORD *)&v15 + 1)] = 0;
    }
    wcscpy(v11, v12);
    if (v17 && v14 != (__int32 *)v16 && v14)
      MEMORY[0x1AF44D160]();
  }
  else
  {
    TParam::getValidConfig(v9, v7);
  }
  return 1;
}

void sub_1ADF03E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackGetLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  size_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  __int32 *v10;
  __int32 *v11;
  TLocaleInfo *v12;
  __int32 *v13;
  __int128 v14;
  _BYTE v15[1024];
  char v16;
  int v17;

  if (a2 != 1 || *(_QWORD *)a1 > 1uLL)
    return 0;
  v13 = (__int32 *)v15;
  v14 = xmmword_1AE1418C0;
  v16 = 1;
  v7 = wcslen(*(const __int32 **)(a1 + 8));
  {
    v12 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v12);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v12;
  }
  TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7, (uint64_t)&v13, 0);
  if ((unint64_t)(*((_QWORD *)&v14 + 1) + 1) >> 62)
    v9 = -1;
  else
    v9 = 4 * (*((_QWORD *)&v14 + 1) + 1);
  v10 = (__int32 *)TAllocator::allocate(a5, v9);
  if (*((_QWORD *)&v14 + 1) >= (unint64_t)v14)
  {
    if (v16)
    {
      v17 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v13, *((unint64_t *)&v14 + 1), &v17, 1uLL);
      v11 = v13;
      --*((_QWORD *)&v14 + 1);
    }
    else
    {
      v11 = v13;
      if ((_QWORD)v14)
        v13[(_QWORD)v14 - 1] = 0;
    }
  }
  else
  {
    v11 = v13;
    v13[*((_QWORD *)&v14 + 1)] = 0;
  }
  wcscpy(v10, v11);
  if (v16 && v13 != (__int32 *)v15)
  {
    if (v13)
      MEMORY[0x1AF44D160]();
  }
  return 1;
}

void sub_1ADF0404C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x1AF44D190](v10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]) && a10 != v11)
  {
    if (a10)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackRomanToDigit(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  __int32 *v5;
  unint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  __int32 *v11;
  __int32 *v12;
  TLocaleInfo *v13;
  __int32 *v14;
  __int128 v15;
  _BYTE v16[1024];
  char v17;
  unint64_t v18;
  int v19;

  if (a2 != 1 || *a1 > 1uLL)
    return 0;
  v5 = (__int32 *)a1[1];
  if (*v5)
  {
    v18 = 0;
    if (romanToArabic(v5, &v18))
      return 0;
    v14 = (__int32 *)v16;
    v15 = xmmword_1AE1418C0;
    v17 = 1;
    v8 = v18;
    {
      v13 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v13);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v13;
    }
    TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v8, (uint64_t)&v14, 0);
    if ((unint64_t)(*((_QWORD *)&v15 + 1) + 1) >> 62)
      v10 = -1;
    else
      v10 = 4 * (*((_QWORD *)&v15 + 1) + 1);
    v11 = (__int32 *)TAllocator::allocate(a5, v10);
    if (*((_QWORD *)&v15 + 1) >= (unint64_t)v15)
    {
      if (v17)
      {
        v19 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v14, *((unint64_t *)&v15 + 1), &v19, 1uLL);
        v12 = v14;
        --*((_QWORD *)&v15 + 1);
      }
      else
      {
        v12 = v14;
        if ((_QWORD)v15)
          v14[(_QWORD)v15 - 1] = 0;
      }
    }
    else
    {
      v12 = v14;
      v14[*((_QWORD *)&v15 + 1)] = 0;
    }
    wcscpy(v11, v12);
    if (v17 && v14 != (__int32 *)v16)
    {
      if (v14)
        MEMORY[0x1AF44D160]();
    }
  }
  return 1;
}

void sub_1ADF04280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x1AF44D190](v9, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x418]) && a9 != v10)
  {
    if (a9)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackDigitToRoman(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  uint64_t v5;
  unsigned int *v7;
  unsigned __int8 v9;
  unsigned int v10;
  uint64_t v11;
  __int32 *v12;
  __int32 *v13;
  TLocaleInfo *v14;
  __int32 *v15;
  __int128 v16;
  _BYTE v17[1024];
  char v18;
  BOOL v19;
  int v20;

  if (a2 != 1 || *a1 > 1uLL)
    return 0;
  v7 = (unsigned int *)a1[1];
  if (!*v7)
    return 1;
  v19 = 0;
  {
    v14 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v14);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v14;
  }
  v10 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7, &v19);
  v5 = 1;
  if (!v19)
  {
    v15 = (__int32 *)v17;
    v16 = xmmword_1AE1418C0;
    v18 = 1;
    if (arabicToRoman(v10, (uint64_t)&v15))
    {
      v5 = 0;
    }
    else
    {
      if ((unint64_t)(*((_QWORD *)&v16 + 1) + 1) >> 62)
        v11 = -1;
      else
        v11 = 4 * (*((_QWORD *)&v16 + 1) + 1);
      v12 = (__int32 *)TAllocator::allocate(a5, v11);
      if (*((_QWORD *)&v16 + 1) >= (unint64_t)v16)
      {
        if (v18)
        {
          v20 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v15, *((unint64_t *)&v16 + 1), &v20, 1uLL);
          v13 = v15;
          --*((_QWORD *)&v16 + 1);
        }
        else
        {
          v13 = v15;
          if ((_QWORD)v16)
            v15[(_QWORD)v16 - 1] = 0;
        }
      }
      else
      {
        v13 = v15;
        v15[*((_QWORD *)&v16 + 1)] = 0;
      }
      wcscpy(v12, v13);
      v5 = 1;
    }
    if (v18 && v15 != (__int32 *)v17 && v15)
      MEMORY[0x1AF44D160]();
  }
  return v5;
}

void sub_1ADF044D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t callBackFormat(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  uint64_t v6;
  int *v7;
  int v8;
  const __int32 *v9;
  unsigned __int8 v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  int v14;
  TLocaleInfo *v15;
  unint64_t v16;
  const __int32 **v17;
  uint64_t v18;
  int *v19;
  TLocaleInfo *v21;
  uint64_t v22;
  __int32 *v23;
  __int32 *v24;
  TAllocator *v27;
  const __int32 **v28;
  __int32 *v29;
  __int128 v30;
  _BYTE v31[1024];
  char v32;
  int v33[3];

  if (a2 <= 1 && *a1 > 1uLL)
    return 0;
  v29 = (__int32 *)v31;
  v30 = xmmword_1AE1418C0;
  v32 = 1;
  v7 = (int *)a1[1];
  v8 = *v7;
  if (*v7)
  {
    v27 = a5;
    v28 = (const __int32 **)(a1 + 3);
    while (1)
    {
      while (1)
      {
        v9 = v7;
        if ((v10 & 1) == 0
        {
          v21 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v21);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v21;
        }
        if (v8 > 159)
          break;
        if (v8 > 0x20 || ((1 << v8) & 0x100002600) == 0)
          goto LABEL_19;
LABEL_17:
        v11 = v7[1];
        v8 = v11;
        ++v7;
        if (!v11)
          goto LABEL_49;
      }
      if (v8 >= 12288)
      {
        if (v8 == 65279 || v8 == 12288)
          goto LABEL_17;
      }
      else if (v8 == 160 || v8 == 8203)
      {
        goto LABEL_17;
      }
LABEL_19:
      v12 = *v7;
      if (!*v7)
        goto LABEL_49;
      while (1)
      {
        if ((v13 & 1) == 0
        {
          v15 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v15);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v15;
        }
        if (v12 <= 159)
        {
          if (v12 <= 0x20 && ((1 << v12) & 0x100002600) != 0)
            goto LABEL_35;
          goto LABEL_31;
        }
        if (v12 >= 12288)
          break;
        if (v12 == 160 || v12 == 8203)
          goto LABEL_35;
LABEL_31:
        v14 = v7[1];
        ++v7;
        v12 = v14;
        if (!v14)
          goto LABEL_35;
      }
      if (v12 != 12288 && v12 != 65279)
        goto LABEL_31;
LABEL_35:
      if (a2 >= 3)
      {
        v16 = 2;
        v17 = v28;
        while (1)
        {
          if ((unint64_t)*(v17 - 1) > 1)
          {
            v6 = 0;
            goto LABEL_62;
          }
          if (v7 - v9 == (int)wcslen(*v17) && !wcsncmp(v9, *v17, v7 - v9))
            break;
          v17 += 4;
          v16 += 2;
          if (v16 >= a2)
            goto LABEL_45;
        }
        v18 = 0;
        v19 = (int *)v17[2];
        while (v19[v18++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)&v29, *((unint64_t *)&v30 + 1), v19, v18 - 1);
      }
LABEL_45:
      v8 = *v7;
      if (!*v7)
      {
LABEL_49:
        if ((unint64_t)(*((_QWORD *)&v30 + 1) + 1) >> 62)
          v22 = -1;
        else
          v22 = 4 * (*((_QWORD *)&v30 + 1) + 1);
        a5 = v27;
        goto LABEL_54;
      }
    }
  }
  v22 = 4;
LABEL_54:
  v23 = (__int32 *)TAllocator::allocate(a5, v22);
  if (*((_QWORD *)&v30 + 1) >= (unint64_t)v30)
  {
    if (v32)
    {
      v33[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v29, *((unint64_t *)&v30 + 1), v33, 1uLL);
      v24 = v29;
      --*((_QWORD *)&v30 + 1);
    }
    else
    {
      v24 = v29;
      if ((_QWORD)v30)
        v29[(_QWORD)v30 - 1] = 0;
    }
  }
  else
  {
    v24 = v29;
    v29[*((_QWORD *)&v30 + 1)] = 0;
  }
  wcscpy(v23, v24);
  v6 = 1;
LABEL_62:
  if (v32)
  {
    if (v29 != (__int32 *)v31 && v29 != 0)
      MEMORY[0x1AF44D160]();
  }
  return v6;
}

void sub_1ADF048D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  MEMORY[0x1AF44D190](v13, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x438]) && a13 != a12)
  {
    if (a13)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackGetCategoryTag(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  uint64_t result;
  __int32 *v6;
  uint64_t HeadClone;
  uint64_t v9;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  __int128 v13;
  _BYTE v14[1024];
  char v15;
  int v16;

  if (a2 != 1 || *a1 > 1uLL)
    return 0;
  v6 = (__int32 *)a1[1];
  if (!*v6)
    return 1;
  HeadClone = TLexicon::findHeadClone(a3, v6);
  result = 1;
  if (HeadClone)
  {
    v12 = (__int32 *)v14;
    v13 = xmmword_1AE1418C0;
    v15 = 1;
    TWord::getCategoryTag(HeadClone, &v12);
    if ((unint64_t)(*((_QWORD *)&v13 + 1) + 1) >> 62)
      v9 = -1;
    else
      v9 = 4 * (*((_QWORD *)&v13 + 1) + 1);
    v10 = (__int32 *)TAllocator::allocate(a5, v9);
    if (*((_QWORD *)&v13 + 1) >= (unint64_t)v13)
    {
      if (v15)
      {
        v16 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v12, *((unint64_t *)&v13 + 1), &v16, 1uLL);
        v11 = v12;
        --*((_QWORD *)&v13 + 1);
      }
      else
      {
        v11 = v12;
        if ((_QWORD)v13)
          v12[(_QWORD)v13 - 1] = 0;
      }
    }
    else
    {
      v11 = v12;
      v12[*((_QWORD *)&v13 + 1)] = 0;
    }
    wcscpy(v10, v11);
    if (v15 && v12 != (__int32 *)v14)
    {
      if (v12)
        MEMORY[0x1AF44D160]();
    }
    return 1;
  }
  return result;
}

void sub_1ADF04AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackFind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  uint64_t result;
  __int32 *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  __int32 *v12;
  __int32 *v13;
  TLocaleInfo *v14;
  __int32 *v15;
  __int128 v16;
  _BYTE v17[1024];
  char v18;
  int v19;

  if (a2 != 2 || *(_QWORD *)a1 > 1uLL || *(_QWORD *)(a1 + 16) > 1uLL)
    return 0;
  v8 = wcsstr(*(__int32 **)(a1 + 8), *(const __int32 **)(a1 + 24));
  result = 1;
  if (v8)
  {
    v15 = (__int32 *)v17;
    v16 = xmmword_1AE1418C0;
    v18 = 1;
    v9 = *(_QWORD *)(a1 + 8);
    if ((v10 & 1) == 0
    {
      v14 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v14);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v14;
    }
    TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, ((uint64_t)v8 - v9) >> 2, (uint64_t)&v15, 0);
    if ((unint64_t)(*((_QWORD *)&v16 + 1) + 1) >> 62)
      v11 = -1;
    else
      v11 = 4 * (*((_QWORD *)&v16 + 1) + 1);
    v12 = (__int32 *)TAllocator::allocate(a5, v11);
    if (*((_QWORD *)&v16 + 1) >= (unint64_t)v16)
    {
      if (v18)
      {
        v19 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v15, *((unint64_t *)&v16 + 1), &v19, 1uLL);
        v13 = v15;
        --*((_QWORD *)&v16 + 1);
      }
      else
      {
        v13 = v15;
        if ((_QWORD)v16)
          v15[(_QWORD)v16 - 1] = 0;
      }
    }
    else
    {
      v13 = v15;
      v15[*((_QWORD *)&v16 + 1)] = 0;
    }
    wcscpy(v12, v13);
    if (v18 && v15 != (__int32 *)v17)
    {
      if (v15)
        MEMORY[0x1AF44D160]();
    }
    return 1;
  }
  return result;
}

void sub_1ADF04CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x1AF44D190](v10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]) && a10 != v11)
  {
    if (a10)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t callBackCopy(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  const __int32 *v8;
  unsigned int *v9;
  unsigned __int8 v10;
  int v11;
  unint64_t v13;
  TLocaleInfo *v14;
  char *v15;
  TLocaleInfo *v16;
  size_t v17;
  unsigned int *v18;
  uint64_t GlobalLocaleInfo;
  unsigned int v20;
  size_t v21;
  uint64_t v22;
  __int32 *v23;
  TLocaleInfo *v24;
  BOOL v25;

  if ((a2 & 0xFFFFFFFFFFFFFFFELL) != 2 || *a1 > 1uLL || a1[2] > 1uLL || a2 == 3 && a1[4] > 1uLL)
    return 0;
  v8 = (const __int32 *)a1[1];
  v25 = 0;
  v9 = (unsigned int *)a1[3];
  {
    v24 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v24);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v24;
  }
  v11 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9, &v25);
  if (v25)
    return 0;
  v13 = v11;
  v14 = (TLocaleInfo *)wcslen(v8);
  v15 = (char *)v14 - v13;
  if ((unint64_t)v14 >= v13)
  {
    v16 = v14;
    v17 = (size_t)v14;
    if (a2 == 3)
    {
      v18 = (unsigned int *)a1[5];
      GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo(v14);
      v20 = TLocaleInfo::stringToUInt(GlobalLocaleInfo, v18, &v25);
      if (v25)
        return 0;
      v17 = v20;
    }
    if (v17 + v13 <= (unint64_t)v16)
      v21 = v17;
    else
      v21 = (size_t)v15;
    if ((v21 + 1) >> 62)
      v22 = -1;
    else
      v22 = 4 * (v21 + 1);
    v23 = (__int32 *)TAllocator::allocate(a5, v22);
    wcsncpy(v23, &v8[v13], v21);
    v23[v21] = 0;
  }
  return 1;
}

void sub_1ADF04ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TCondition::TCondition(TCondition *this, unsigned int **a2, unint64_t a3, TLexicon *a4)
{
  int v7;
  unsigned int *v8;
  unsigned __int8 v9;
  std::exception_vtbl *v10;
  _QWORD *exception;
  TLocaleInfo *v12;
  void *__p[2];
  char v14;
  std::exception v15[3];
  char v16;

  TCondition::setEnum(this, (const TFileObject *)a2, a3);
  *((_QWORD *)this + 4) = a4;
  *(_QWORD *)this = 0;
  v7 = *((_DWORD *)this + 3);
  if (v7 == 7)
  {
    if (TFileObject::verify((TFileObject *)a2, 0, 0))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v15, (__int128 *)__p);
      v15[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
      if (v16 >= 0)
        v10 = (std::exception_vtbl *)&v15[1];
      else
        v10 = v15[1].__vftable;
      conditionalAssert((const char *)v10, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 123);
      TException::~TException(v15);
      if (v14 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v15, "");
      TException::TException(exception, (__int128 *)v15);
      *exception = &unk_1E5D16668;
    }
    LOBYTE(v15[0].__vftable) = 0;
    v8 = a2[3];
    if ((v9 & 1) == 0)
    {
      {
        v12 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v12);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v12;
      }
    }
    *(_QWORD *)this = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v8, (BOOL *)v15);
  }
  else
  {
    *((_QWORD *)this + 3) = buildRegExp((const TFileObject *)a2, a4, v7 == 2);
  }
}

void sub_1ADF050C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  MEMORY[0x1AF44D190](v21, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TCondition::setEnum(TCondition *this, const TFileObject *a2, unint64_t a3)
{
  uint64_t v6;
  const __int32 *v7;
  uint64_t v8;
  const __int32 *v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  const __int32 *v14;
  uint64_t result;
  uint64_t v16;
  const __int32 *v17;
  size_t v18;
  uint64_t v19;
  void **v20;
  const char *v21;
  _QWORD *v22;
  uint64_t v23;
  void **v24;
  const char *v25;
  _QWORD *exception;
  void *v27[2];
  char v28;
  void *__p[2];
  char v30;
  char v31;

  v6 = 0;
  v7 = (const __int32 *)*((_QWORD *)a2 + 1);
  if (a3 > 1)
    v8 = 8;
  else
    v8 = 9;
  *((_QWORD *)this + 1) = 0x900000004;
  while (1)
  {
    v9 = (const __int32 *)*(&TCondition::setEnum(TFileObject const*,unsigned long)::ppszSource + v6);
    v10 = wcslen(v9);
    if (!wcsncmp(v7, v9, v10))
      break;
    if (v8 == ++v6)
      goto LABEL_12;
  }
  *((_DWORD *)this + 3) = v6;
  if (a3 <= 1 && (_DWORD)v6 == 8)
    tknPrintf("Warning: Pron conditions are no longer supported in munge-map rules!\n", v11);
  v7 += wcslen(v9);
LABEL_12:
  v12 = *((_DWORD *)this + 3);
  if (v12 >= 2 && v12 != 7)
  {
    if (v12 == 9)
    {
      loggableFileObject((uint64_t *)a2);
      if (v30 >= 0)
        v24 = __p;
      else
        v24 = (void **)__p[0];
      tknPrintf("Error: %sInvalid attribute\n", v23, v24);
      if (v30 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(v27, "");
      TException::TException(__p, (__int128 *)v27);
      __p[0] = &unk_1E5D16668;
      if (v31 >= 0)
        v25 = (const char *)&__p[1];
      else
        v25 = (const char *)__p[1];
      conditionalAssert(v25, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 180);
      TException::~TException((std::exception *)__p);
      if (v28 < 0)
        operator delete(v27[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(exception, (__int128 *)__p);
      *exception = &unk_1E5D16668;
    }
    v16 = 0;
    v7 += 2 * (wcsncmp(v7, dword_1AE18D2A0, 2uLL) == 0);
    while (1)
    {
      v17 = (const __int32 *)*(&TCondition::setEnum(TFileObject const*,unsigned long)::ppszTokenPos + v16);
      v18 = wcslen(v17);
      if (!wcsncmp(v7, v17, v18))
        break;
      if (++v16 == 5)
        goto LABEL_17;
    }
    *((_DWORD *)this + 2) = v16;
    v7 += wcslen(v17);
  }
LABEL_17:
  v14 = &v7[2 * (wcsncmp(v7, dword_1AE18D364, 2uLL) == 0)];
  *((_BYTE *)this + 16) = 0;
  result = wcsncmp(v14, dword_1AE18D370, 3uLL);
  if (!(_DWORD)result)
  {
    v14 += 3;
    *((_BYTE *)this + 16) = 1;
  }
  if (*v14)
  {
    loggableFileObject((uint64_t *)a2);
    if (v30 >= 0)
      v20 = __p;
    else
      v20 = (void **)__p[0];
    tknPrintf("Error: %sInvalid attribute\n", v19, v20);
    if (v30 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "");
    TException::TException(__p, (__int128 *)v27);
    __p[0] = &unk_1E5D16668;
    if (v31 >= 0)
      v21 = (const char *)&__p[1];
    else
      v21 = (const char *)__p[1];
    conditionalAssert(v21, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 226);
    TException::~TException((std::exception *)__p);
    if (v28 < 0)
      operator delete(v27[0]);
    v22 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v22, (__int128 *)__p);
    *v22 = &unk_1E5D16668;
  }
  return result;
}

void sub_1ADF054F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void TCondition::~TCondition(TCondition *this)
{
  TRegExp *v1;

  v1 = (TRegExp *)*((_QWORD *)this + 3);
  if (v1)
  {
    TRegExp::~TRegExp(v1);
    MEMORY[0x1AF44D190]();
  }
}

void TCondition::getSource(uint64_t a1, uint64_t a2, int *a3, int *a4, _QWORD *a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v18;
  int v20;
  unsigned __int8 *v22;
  uint64_t v23;

  TBuffer<wchar_t>::resize((uint64_t)a5, 0);
  switch(*(_DWORD *)(a1 + 12))
  {
    case 0:
      v10 = 0;
      v11 = a5[2];
      while (a3[v10++])
        ;
      v13 = v10 - 1;
      v14 = (uint64_t)a5;
      v15 = a3;
      goto LABEL_8;
    case 1:
      v16 = 0;
      v11 = a5[2];
      while (a4[v16++])
        ;
      v13 = v16 - 1;
      v14 = (uint64_t)a5;
      v15 = a4;
LABEL_8:
      TBuffer<wchar_t>::insert(v14, v11, v15, v13);
      return;
    case 2:
      v18 = *(_DWORD *)(a2 + 48);
      if (v18 != 2 && v18 != 5)
        TWord::getTokenName(*(__int32 ***)(a2 + 56), (uint64_t)a5);
      return;
    case 3:
      v20 = *(_DWORD *)(a2 + 48);
      if (v20 != 2 && v20 != 5)
        goto LABEL_24;
      return;
    case 4:
      TWord::getCategoryTag(*(_QWORD *)(a2 + 56), a5);
      return;
    case 5:
      v22 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 16) + 16);
      if (v22)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
        if (v23)
          TLocaleInfo::multiByteToUnicode(*(_QWORD *)(a1 + 32) + 224, v22, v23 - (_QWORD)v22, (uint64_t)a5);
      }
      return;
    case 6:
      if (*(_DWORD *)(a2 + 48) == 5)
LABEL_24:
        TWord::getWrittenForm(*(__int32 ***)(a2 + 56), (uint64_t)a5);
      break;
    default:
      return;
  }
}

uint64_t TCondition::test(uint64_t a1, uint64_t a2, int *a3, int *a4, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  int v6;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int *v16;
  __int128 v17;
  _BYTE v18[1024];
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;

  if (*(_DWORD *)(a1 + 12) == 7)
  {
    LOBYTE(v6) = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this) < 0xFFFFFFFFLL * *(_QWORD *)a1 / 0x64uLL;
    return v6 & 1;
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  collectEdge(a2, *(_DWORD *)(a1 + 8), &v20);
  v9 = v20;
  v10 = v21;
  if (v21 == v20)
  {
    LOBYTE(v6) = 0;
    v9 = v21;
    if (!v21)
      return v6 & 1;
    goto LABEL_21;
  }
  v11 = 0;
  v6 = 0;
  do
  {
    v12 = v9[v11];
    if (*(_DWORD *)(v12 + 48) != 3)
    {
      v16 = (unsigned int *)v18;
      v17 = xmmword_1AE1418C0;
      v19 = 1;
      TCondition::getSource(a1, v12, a3, a4, &v16);
      if (*((_QWORD *)&v17 + 1))
      {
        v13 = *(_QWORD **)(a1 + 24);
        if (*((_QWORD *)&v17 + 1) >= (unint64_t)v17)
        {
          if (v19)
          {
            v23 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v16, *((unint64_t *)&v17 + 1), &v23, 1uLL);
            v14 = v16;
            --*((_QWORD *)&v17 + 1);
          }
          else
          {
            v14 = v16;
            if ((_QWORD)v17)
              v16[(_QWORD)v17 - 1] = 0;
          }
        }
        else
        {
          v14 = v16;
          v16[*((_QWORD *)&v17 + 1)] = 0;
        }
        v6 |= TRegExp::match(v13, v14, 0) ^ (*(_BYTE *)(a1 + 16) != 0);
      }
      if (v19 && v16 != (unsigned int *)v18 && v16)
        MEMORY[0x1AF44D160]();
      v9 = v20;
      v10 = v21;
    }
    ++v11;
  }
  while (v11 < v10 - v9);
  if (v9)
  {
LABEL_21:
    v21 = v9;
    operator delete(v9);
  }
  return v6 & 1;
}

void sub_1ADF05938(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(_QWORD *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void collectEdge(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t OutEdge;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;

  switch(a2)
  {
    case 0:
      v5 = TVertex::getInEdge(*(_QWORD *)(a1 + 16));
      if (!v5)
        return;
      v6 = v5;
LABEL_4:
      collectEdge(v6, 1, a3);
      while (1)
      {
        v6 = *(_QWORD *)v6;
        if (!v6)
          return;
        if (!*(_BYTE *)(v6 + 32))
          goto LABEL_4;
      }
    case 1:
      v7 = TVertex::getInEdge(*(_QWORD *)(a1 + 16));
      if (!v7)
        return;
      v8 = v7;
      v9 = a3 + 2;
      v10 = (uint64_t *)a3[1];
LABEL_10:
      if ((unint64_t)v10 < *v9)
      {
        *v10++ = v8;
        goto LABEL_26;
      }
      v11 = ((uint64_t)v10 - *a3) >> 3;
      if (!((unint64_t)(v11 + 1) >> 61))
      {
        v12 = *v9 - *a3;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v14);
        else
          v15 = 0;
        v16 = (uint64_t *)&v15[8 * v11];
        *v16 = v8;
        v10 = v16 + 1;
        v18 = (char *)*a3;
        v17 = (char *)a3[1];
        if (v17 != (char *)*a3)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v16 = v19;
          }
          while (v17 != v18);
          v17 = (char *)*a3;
        }
        *a3 = v16;
        a3[1] = v10;
        a3[2] = &v15[8 * v14];
        if (v17)
          operator delete(v17);
LABEL_26:
        a3[1] = v10;
        while (1)
        {
          v8 = *(_QWORD *)v8;
          if (!v8)
            return;
          if (!*(_BYTE *)(v8 + 32))
            goto LABEL_10;
        }
      }
      goto LABEL_76;
    case 2:
      OutEdge = TVertex::getOutEdge(*(_QWORD *)(a1 + 24));
      if (!OutEdge)
        return;
      v21 = OutEdge;
      v22 = a3 + 2;
      v23 = (uint64_t *)a3[1];
LABEL_32:
      if ((unint64_t)v23 < *v22)
      {
        *v23++ = v21;
        goto LABEL_48;
      }
      v24 = ((uint64_t)v23 - *a3) >> 3;
      if ((unint64_t)(v24 + 1) >> 61)
        goto LABEL_76;
      v25 = *v22 - *a3;
      v26 = v25 >> 2;
      if (v25 >> 2 <= (unint64_t)(v24 + 1))
        v26 = v24 + 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27)
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v27);
      else
        v28 = 0;
      v29 = (uint64_t *)&v28[8 * v24];
      *v29 = v21;
      v23 = v29 + 1;
      v31 = (char *)*a3;
      v30 = (char *)a3[1];
      if (v30 != (char *)*a3)
      {
        do
        {
          v32 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *--v29 = v32;
        }
        while (v30 != v31);
        v30 = (char *)*a3;
      }
      *a3 = v29;
      a3[1] = v23;
      a3[2] = &v28[8 * v27];
      if (v30)
        operator delete(v30);
LABEL_48:
      a3[1] = v23;
      while (1)
      {
        v21 = *(_QWORD *)(v21 + 8);
        if (!v21)
          return;
        if (!*(_BYTE *)(v21 + 32))
          goto LABEL_32;
      }
    case 3:
      v33 = TVertex::getOutEdge(*(_QWORD *)(a1 + 24));
      if (!v33)
        return;
      v34 = v33;
LABEL_54:
      collectEdge(v34, 2, a3);
      while (1)
      {
        v34 = *(_QWORD *)(v34 + 8);
        if (!v34)
          return;
        if (!*(_BYTE *)(v34 + 32))
          goto LABEL_54;
      }
    case 4:
      v35 = a3[2];
      v36 = (_QWORD *)a3[1];
      if ((unint64_t)v36 >= v35)
      {
        v38 = ((uint64_t)v36 - *a3) >> 3;
        if ((unint64_t)(v38 + 1) >> 61)
LABEL_76:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v39 = v35 - *a3;
        v40 = v39 >> 2;
        if (v39 >> 2 <= (unint64_t)(v38 + 1))
          v40 = v38 + 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        if (v41)
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v41);
        else
          v42 = 0;
        v43 = &v42[8 * v38];
        v44 = &v42[8 * v41];
        *(_QWORD *)v43 = a1;
        v37 = v43 + 8;
        v46 = (char *)*a3;
        v45 = (char *)a3[1];
        if (v45 != (char *)*a3)
        {
          do
          {
            v47 = *((_QWORD *)v45 - 1);
            v45 -= 8;
            *((_QWORD *)v43 - 1) = v47;
            v43 -= 8;
          }
          while (v45 != v46);
          v45 = (char *)*a3;
        }
        *a3 = v43;
        a3[1] = v37;
        a3[2] = v44;
        if (v45)
          operator delete(v45);
      }
      else
      {
        *v36 = a1;
        v37 = v36 + 1;
      }
      a3[1] = v37;
      return;
    default:
      return;
  }
}

void TRule::TRule(TRule *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4, unint64_t a5)
{
  uint64_t i;
  TCondition *v11;
  unint64_t v12;
  TCondition **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  TCondition **v20;
  char *v21;
  char *v22;
  TCondition *v23;
  uint64_t v24;
  void **v25;
  const char *v26;
  _QWORD *exception;
  uint64_t v28;
  void **v29;
  const char *v30;
  _QWORD *v31;
  uint64_t *v32;
  void *v33[2];
  char v34;
  void *__p[2];
  char v36;
  char v37;

  *((_BYTE *)this + 32) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)this, 0xAuLL);
  v32 = (uint64_t *)a2;
  for (i = *((_QWORD *)a2 + 3); i; i = *(_QWORD *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), dword_1AE18D380))
    {
      if (*((_QWORD *)this + 3))
      {
        loggableFileObject((uint64_t *)i);
        v25 = __p;
        if (v36 < 0)
          v25 = (void **)__p[0];
        tknPrintf("Error: %sRedefinition\n", v24, v25);
        if (v36 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(v33, "");
        TException::TException(__p, (__int128 *)v33);
        __p[0] = &unk_1E5D16668;
        if (v37 >= 0)
          v26 = (const char *)&__p[1];
        else
          v26 = (const char *)__p[1];
        conditionalAssert(v26, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 422);
        TException::~TException((std::exception *)__p);
        if (v34 < 0)
          operator delete(v33[0]);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(exception, (__int128 *)__p);
        *exception = &unk_1E5D16668;
      }
      *((_QWORD *)this + 3) = buildReplaceObject((const TFileObject *)i, a3, a4);
      *((_BYTE *)this + 32) = 1;
    }
    else
    {
      v11 = (TCondition *)operator new();
      TCondition::TCondition(v11, (unsigned int **)i, a5, a3);
      v13 = (TCondition **)*((_QWORD *)this + 1);
      v12 = *((_QWORD *)this + 2);
      if ((unint64_t)v13 >= v12)
      {
        v15 = ((uint64_t)v13 - *(_QWORD *)this) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v12 - *(_QWORD *)this;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 16, v18);
        else
          v19 = 0;
        v20 = (TCondition **)&v19[8 * v15];
        *v20 = v11;
        v14 = v20 + 1;
        v22 = *(char **)this;
        v21 = (char *)*((_QWORD *)this + 1);
        if (v21 != *(char **)this)
        {
          do
          {
            v23 = (TCondition *)*((_QWORD *)v21 - 1);
            v21 -= 8;
            *--v20 = v23;
          }
          while (v21 != v22);
          v21 = *(char **)this;
        }
        *(_QWORD *)this = v20;
        *((_QWORD *)this + 1) = v14;
        *((_QWORD *)this + 2) = &v19[8 * v18];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v13 = v11;
        v14 = v13 + 1;
      }
      *((_QWORD *)this + 1) = v14;
    }
  }
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
  {
    loggableFileObject(v32);
    if (v36 >= 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    tknPrintf("Error: %sRule is missing a condition\n", v28, v29);
    if (v36 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "");
    TException::TException(__p, (__int128 *)v33);
    __p[0] = &unk_1E5D16668;
    if (v37 >= 0)
      v30 = (const char *)&__p[1];
    else
      v30 = (const char *)__p[1];
    conditionalAssert(v30, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 445);
    TException::~TException((std::exception *)__p);
    if (v34 < 0)
      operator delete(v33[0]);
    v31 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v31, (__int128 *)__p);
    *v31 = &unk_1E5D16668;
  }
}

void sub_1ADF0622C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  TRule *v27;
  int v28;
  void *v29;

  if (v28 == 1)
  {
    __cxa_begin_catch(v29);
    TRule::freeMemory(v27);
    __cxa_rethrow();
  }
  JUMPOUT(0x1ADF06330);
}

void sub_1ADF0631C()
{
  uint64_t v0;
  void *v1;
  _Unwind_Exception *v2;

  __cxa_end_catch();
  v1 = *(void **)v0;
  if (*(_QWORD *)v0)
  {
    *(_QWORD *)(v0 + 8) = v1;
    operator delete(v1);
  }
  _Unwind_Resume(v2);
}

TFileObject *buildReplaceObject(const TFileObject *a1, TLexicon *a2, TAllocator *a3)
{
  const TFileObject *v6;
  TFileObject *v7;
  std::exception_vtbl *v9;
  _QWORD *exception;
  void *__p[2];
  char v12;
  std::exception v13[3];
  char v14;
  void *v15;
  __int128 v16;
  uint64_t v17;

  v15 = &unk_1AE18D3F0;
  v16 = xmmword_1AE15FCA0;
  v17 = -1;
  if (TFileObject::verify((uint64_t)a1, (uint64_t)&v15, 1uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v13, (__int128 *)__p);
    v13[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
    if (v14 >= 0)
      v9 = (std::exception_vtbl *)&v13[1];
    else
      v9 = v13[1].__vftable;
    conditionalAssert((const char *)v9, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 388);
    TException::~TException(v13);
    if (v12 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    TException::TException(exception, (__int128 *)v13);
    *exception = &unk_1E5D16668;
  }
  v6 = (const TFileObject *)*((_QWORD *)a1 + 3);
  if (!v6)
    return 0;
  v7 = 0;
  do
  {
    v7 = compileAlt(v6, v7, a2, a3);
    v6 = (const TFileObject *)*((_QWORD *)v6 + 2);
  }
  while (v6);
  return v7;
}

void sub_1ADF064A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t *TRule::freeMemory(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;

  v2 = *this;
  v1 = this[1];
  if (v1 != *this)
  {
    v3 = this;
    v4 = 0;
    do
    {
      this = *(uint64_t **)(v2 + 8 * v4);
      if (this)
      {
        TCondition::~TCondition((TCondition *)this);
        this = (uint64_t *)MEMORY[0x1AF44D190]();
        v2 = *v3;
        v1 = v3[1];
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
  return this;
}

void TRule::~TRule(TRule *this)
{
  void *v2;

  TRule::freeMemory((uint64_t *)this);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t TRule::test(uint64_t *a1, uint64_t a2, int *a3, int *a4, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  uint64_t v5;
  unint64_t v11;
  uint64_t result;

  v5 = *a1;
  if (a1[1] == *a1)
    return 1;
  v11 = 0;
  do
  {
    result = TCondition::test(*(_QWORD *)(v5 + 8 * v11), a2, a3, a4, this);
    if ((result & 1) == 0)
      break;
    ++v11;
    v5 = *a1;
  }
  while (v11 < (a1[1] - *a1) >> 3);
  return result;
}

void TGroup::TGroup(TGroup *this, const TFileObject *a2, const TLocaleInfo **a3, uint64_t a4, TLexicon *a5, TAllocator *a6, unint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int32 *v16;
  int v17;
  void **v18;
  uint64_t v19;
  void **v20;
  void *v21;
  int v22;
  void **v23;
  uint64_t v24;
  void **v25;
  void *p_p;
  __int32 *v27;
  TRule *v28;
  unint64_t v29;
  TRule **v30;
  _QWORD *v31;
  const char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  TRule **v39;
  char *v40;
  char *v41;
  TRule *v42;
  const char *v43;
  _QWORD *v44;
  const char *v45;
  _QWORD *exception;
  TAllocator *v47;
  void *v49[2];
  char v50;
  std::exception v51;
  const char *v52;
  char v53;
  void *__p;
  __int128 v55;
  _BYTE v56[1024];
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62[2];
  char v63;
  std::exception v64;
  const char *v65;
  char v66;
  void *v67;
  int64x2_t v68;
  uint64_t v69;
  int v70;
  __int32 *v71;
  __int128 v72;
  uint64_t v73;
  __int32 *v74;
  __int128 v75;
  uint64_t v76;
  __int32 *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 32) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)this, 0xAuLL);
  v72 = xmmword_1AE140A90;
  v71 = dword_1AE18D3A0;
  v75 = xmmword_1AE15FCA0;
  v73 = -1;
  v74 = dword_1AE18D3BC;
  v78 = xmmword_1AE144E70;
  v76 = -1;
  v77 = dword_1AE18D380;
  v79 = -1;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v71, 3uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "");
    TException::TException(&__p, (__int128 *)&v67);
    __p = &unk_1E5D16668;
    if (v56[7] >= 0)
      v45 = (const char *)&v55;
    else
      v45 = (const char *)v55;
    conditionalAssert(v45, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 593);
    TException::~TException((std::exception *)&__p);
    if (v68.i8[15] < 0)
      operator delete(v67);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(exception, (__int128 *)&__p);
    *exception = &unk_1E5D16668;
  }
  v13 = *((_QWORD *)a2 + 3);
  if (v13)
  {
    v47 = a6;
    while (1)
    {
      if (wcscmp(*(const __int32 **)(v13 + 8), dword_1AE18D3A0))
      {
        if (!wcscmp(*(const __int32 **)(v13 + 8), dword_1AE18D3BC))
        {
          v28 = (TRule *)operator new();
          TRule::TRule(v28, (const TFileObject *)v13, a5, a6, a7);
          v30 = (TRule **)*((_QWORD *)this + 1);
          v29 = *((_QWORD *)this + 2);
          if ((unint64_t)v30 >= v29)
          {
            v34 = ((uint64_t)v30 - *(_QWORD *)this) >> 3;
            if ((unint64_t)(v34 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v35 = v29 - *(_QWORD *)this;
            v36 = v35 >> 2;
            if (v35 >> 2 <= (unint64_t)(v34 + 1))
              v36 = v34 + 1;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
              v37 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v37 = v36;
            if (v37)
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 16, v37);
            else
              v38 = 0;
            v39 = (TRule **)&v38[8 * v34];
            *v39 = v28;
            v31 = v39 + 1;
            v41 = *(char **)this;
            v40 = (char *)*((_QWORD *)this + 1);
            if (v40 != *(char **)this)
            {
              do
              {
                v42 = (TRule *)*((_QWORD *)v40 - 1);
                v40 -= 8;
                *--v39 = v42;
              }
              while (v40 != v41);
              v40 = *(char **)this;
            }
            *(_QWORD *)this = v39;
            *((_QWORD *)this + 1) = v31;
            *((_QWORD *)this + 2) = &v38[8 * v37];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *v30 = v28;
            v31 = v30 + 1;
          }
          *((_QWORD *)this + 1) = v31;
        }
        else if (!wcscmp(*(const __int32 **)(v13 + 8), dword_1AE18D380))
        {
          *((_QWORD *)this + 3) = buildReplaceObject((const TFileObject *)v13, a5, a6);
          *((_BYTE *)this + 32) = 1;
        }
        goto LABEL_70;
      }
      v68 = vdupq_n_s64(1uLL);
      v67 = &unk_1AE18D3F0;
      v69 = -1;
      if (TFileObject::verify(v13, (uint64_t)&v67, 1uLL, 1))
      {
        std::string::basic_string[abi:ne180100]<0>(v62, "");
        TException::TException(&v64, (__int128 *)v62);
        v64.__vftable = (std::exception_vtbl *)&unk_1E5D16668;
        if (v66 >= 0)
          v43 = (const char *)&v65;
        else
          v43 = v65;
        conditionalAssert(v43, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 524);
        TException::~TException(&v64);
        if (v63 < 0)
          operator delete(v62[0]);
        v44 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(v44, (__int128 *)&__p);
        *v44 = &unk_1E5D16668;
      }
      v14 = *(_QWORD *)(v13 + 24);
      if (v14)
        break;
LABEL_70:
      v13 = *(_QWORD *)(v13 + 16);
      if (!v13)
        return;
    }
    v15 = 0;
    while (1)
    {
      if ((TFileObject::verify((TFileObject *)v14, 1, 0) & 1) == 0)
      {
        v16 = *(__int32 **)(v14 + 24);
        if (*(_DWORD *)(v14 + 40) == 2)
        {
          TRegExp::add(a3, v16, a4);
          goto LABEL_15;
        }
        if (!TLexicon::checkName((uint64_t)a5, v16, 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (*(_BYTE *)(getPropCheckTokenExistence() + 8)
            && !TLexicon::findHeadClone((uint64_t)a5, *(__int32 **)(v14 + 24)))
          {
            loggableFileObject((uint64_t *)v14);
            v22 = v59;
            v23 = (void **)v58;
            loggableUnicode(*(unsigned int **)(v14 + 24), &__p);
            v25 = &v58;
            if (v22 < 0)
              v25 = v23;
            p_p = &__p;
            if (v55 < 0)
              p_p = __p;
            tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v24, v25, p_p);
            a6 = v47;
            if (SHIBYTE(v55) < 0)
              operator delete(__p);
            if (v59 < 0)
              operator delete(v58);
          }
          __p = v56;
          v55 = xmmword_1AE1418C0;
          v57 = 1;
          TRegExp::stringToRegExp(*(_QWORD *)(v14 + 24), (uint64_t)&__p, 0, 3);
          if (*((_QWORD *)&v55 + 1) >= (unint64_t)v55)
          {
            if (v57)
            {
              v70 = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v55 + 1), &v70, 1uLL);
              v27 = (__int32 *)__p;
              --*((_QWORD *)&v55 + 1);
            }
            else
            {
              v27 = (__int32 *)__p;
              if ((_QWORD)v55)
                *((_DWORD *)__p + v55 - 1) = 0;
            }
          }
          else
          {
            v27 = (__int32 *)__p;
            *((_DWORD *)__p + *((_QWORD *)&v55 + 1)) = 0;
          }
          TRegExp::add(a3, v27, a4);
          if (v57 && __p != v56 && __p)
            MEMORY[0x1AF44D160]();
          goto LABEL_15;
        }
        loggableFileObject((uint64_t *)v14);
        v17 = v61;
        v18 = (void **)v60;
        loggableUnicode(*(unsigned int **)(v14 + 24), &__p);
        v20 = &v60;
        if (v17 < 0)
          v20 = v18;
        v21 = &__p;
        if (v55 < 0)
          v21 = __p;
        tknPrintf("Error: %s'%s' is an invalid token name.\n", v19, v20, v21);
        if (SHIBYTE(v55) < 0)
          operator delete(__p);
        if (v61 < 0)
          operator delete(v60);
      }
      v15 = 1;
LABEL_15:
      v14 = *(_QWORD *)(v14 + 16);
      if (!v14)
      {
        if ((v15 & 1) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(v49, "");
          TException::TException(&v51, (__int128 *)v49);
          v51.__vftable = (std::exception_vtbl *)&unk_1E5D16668;
          if (v53 >= 0)
            v32 = (const char *)&v52;
          else
            v32 = v52;
          conditionalAssert(v32, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 571);
          TException::~TException(&v51);
          if (v50 < 0)
            operator delete(v49[0]);
          v33 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(v33, (__int128 *)&__p);
          *v33 = &unk_1E5D16668;
        }
        goto LABEL_70;
      }
    }
  }
}

void sub_1ADF07080(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  TGroup *v39;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    TGroup::freeMemory(v39);
    __cxa_rethrow();
  }
  JUMPOUT(0x1ADF07194);
}

void sub_1ADF07184(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_1ADF0718C()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADF07194);
}

uint64_t *TGroup::freeMemory(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;

  v2 = *this;
  v1 = this[1];
  if (v1 != *this)
  {
    v3 = this;
    v4 = 0;
    do
    {
      this = *(uint64_t **)(v2 + 8 * v4);
      if (this)
      {
        TRule::~TRule((TRule *)this);
        this = (uint64_t *)MEMORY[0x1AF44D190]();
        v2 = *v3;
        v1 = v3[1];
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
  return this;
}

void TGroup::~TGroup(TGroup *this)
{
  void *v2;

  TGroup::freeMemory((uint64_t *)this);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t TGroup::munge(uint64_t *a1, uint64_t a2, int *a3, int *a4, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  uint64_t v6;
  unint64_t v11;
  uint64_t v12;

  v6 = *a1;
  if (a1[1] == *a1)
  {
LABEL_5:
    v12 = (uint64_t)(a1 + 3);
  }
  else
  {
    v11 = 0;
    while ((TRule::test(*(uint64_t **)(v6 + 8 * v11), a2, a3, a4, this) & 1) == 0)
    {
      ++v11;
      v6 = *a1;
      if (v11 >= (a1[1] - *a1) >> 3)
        goto LABEL_5;
    }
    v12 = *(_QWORD *)(*a1 + 8 * v11) + 24;
  }
  return *(_QWORD *)v12;
}

void TMungeMapManager::TMungeMapManager(TMungeMapManager *this, TInputStream *a2, TLexicon *a3)
{
  _QWORD *v6;
  char **v7;
  _QWORD *v8;
  unint64_t v9;
  std::exception_vtbl *v10;
  void (__cdecl *i)(std::exception *__hidden);
  TGroup *v12;
  unint64_t v13;
  TGroup **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  TGroup **v21;
  char *v22;
  char *v23;
  TGroup *v24;
  std::exception_vtbl *v25;
  _QWORD *exception;
  std::exception_vtbl *v27;
  _QWORD *v28;
  void *v29[2];
  char v30;
  std::exception v31[3];
  char v32;
  void *__p;
  __int128 v34;
  uint64_t v35;
  std::exception v36[3];
  char v37;

  TAllocator::TAllocator(this, 2048);
  v6[5] = 0;
  v6[6] = 0;
  v7 = (char **)(v6 + 5);
  v6[7] = 0;
  v6[8] = a3;
  v8 = (_QWORD *)operator new();
  TRegExp::TRegExp(v8, *((_QWORD *)this + 8) + 224);
  *((_QWORD *)this + 9) = v8;
  if (TInputStream::verifyHeader((uint64_t)a2, "TknMunge", (uint64_t)&pTknMungeVersion, 2))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(v36, (__int128 *)&__p);
    v36[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
    if (v37 >= 0)
      v25 = (std::exception_vtbl *)&v36[1];
    else
      v25 = v36[1].__vftable;
    conditionalAssert((const char *)v25, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 677);
    TException::~TException(v36);
    if (SHIBYTE(v34) < 0)
      operator delete(__p);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v36, "");
    TException::TException(exception, (__int128 *)v36);
    *exception = &unk_1E5D16668;
  }
  v9 = *((_QWORD *)a2 + 12);
  TFileObjectParser::TFileObjectParser((TFileObjectParser *)v36, a2);
  v10 = v36[0].__vftable;
  __p = dword_1AE18D3D0;
  v34 = xmmword_1AE15FCA0;
  v35 = -1;
  if (TFileObject::verify((uint64_t)v36[0].__vftable, (uint64_t)&__p, 1uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "");
    TException::TException(v31, (__int128 *)v29);
    v31[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
    if (v32 >= 0)
      v27 = (std::exception_vtbl *)&v31[1];
    else
      v27 = v31[1].__vftable;
    conditionalAssert((const char *)v27, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/mungemapmgr.cpp", 694);
    TException::~TException(v31);
    if (v30 < 0)
      operator delete(v29[0]);
    v28 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v31, "");
    TException::TException(v28, (__int128 *)v31);
    *v28 = &unk_1E5D16668;
  }
  for (i = v10[1].~exception; i; i = (void (__cdecl *)(std::exception *__hidden))*((_QWORD *)i + 2))
  {
    if (!wcscmp(*((const __int32 **)i + 1), dword_1AE18D3D0))
    {
      v12 = (TGroup *)operator new();
      TGroup::TGroup(v12, (const TFileObject *)i, *((const TLocaleInfo ***)this + 9), (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3, *((TLexicon **)this + 8), this, v9);
      v14 = (TGroup **)*((_QWORD *)this + 6);
      v13 = *((_QWORD *)this + 7);
      if ((unint64_t)v14 >= v13)
      {
        v16 = ((char *)v14 - *v7) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = v13 - (_QWORD)*v7;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 56, v19);
        else
          v20 = 0;
        v21 = (TGroup **)&v20[8 * v16];
        *v21 = v12;
        v15 = v21 + 1;
        v23 = (char *)*((_QWORD *)this + 5);
        v22 = (char *)*((_QWORD *)this + 6);
        if (v22 != v23)
        {
          do
          {
            v24 = (TGroup *)*((_QWORD *)v22 - 1);
            v22 -= 8;
            *--v21 = v24;
          }
          while (v22 != v23);
          v22 = *v7;
        }
        *((_QWORD *)this + 5) = v21;
        *((_QWORD *)this + 6) = v15;
        *((_QWORD *)this + 7) = &v20[8 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v14 = v12;
        v15 = v14 + 1;
      }
      *((_QWORD *)this + 6) = v15;
    }
  }
  TRegExp::doneAdding(*((TRegExp **)this + 9));
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v36);
}

void sub_1ADF077C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,std::exception a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v36);
  JUMPOUT(0x1ADF078D0);
}

void sub_1ADF078C8()
{
  JUMPOUT(0x1ADF078D0);
}

void sub_1ADF078F0(_Unwind_Exception *a1)
{
  TAllocator *v1;
  void **v2;
  uint64_t v3;
  void *v5;

  MEMORY[0x1AF44D190](v3, 0x60C40CE5A77A8);
  v5 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 6) = v5;
    operator delete(v5);
  }
  TAllocator::clear(v1);
  _Unwind_Resume(a1);
}

void sub_1ADF07918()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADF07920);
}

TRegExp *TMungeMapManager::freeMemory(TMungeMapManager *this)
{
  TRegExp *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  result = (TRegExp *)*((_QWORD *)this + 9);
  if (result)
  {
    TRegExp::~TRegExp(result);
    result = (TRegExp *)MEMORY[0x1AF44D190]();
  }
  v4 = *((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 6);
  if (v3 != v4)
  {
    v5 = 0;
    do
    {
      result = *(TRegExp **)(v4 + 8 * v5);
      if (result)
      {
        TGroup::~TGroup(result);
        result = (TRegExp *)MEMORY[0x1AF44D190]();
        v4 = *((_QWORD *)this + 5);
        v3 = *((_QWORD *)this + 6);
      }
      ++v5;
    }
    while (v5 < (v3 - v4) >> 3);
  }
  return result;
}

void TMungeMapManager::~TMungeMapManager(TMungeMapManager *this)
{
  void *v2;

  TMungeMapManager::freeMemory(this);
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  TAllocator::clear(this);
}

void TMungeMapManager::mungeWithGroups(uint64_t a1, TVertex *this, TGraph *a3, int *a4, int *a5, TSegmenter *a6, unint64_t a7, unint64_t a8, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *a9)
{
  TSegmenter *v11;
  char *v14;
  uint64_t PreviousSegment;
  uint64_t OutEdge;
  unint64_t v18;
  unsigned int v20;
  BOOL v21;
  int v22;
  _QWORD *v24;
  unsigned int *v25;
  __n128 v26;
  char *v27;
  uint64_t Segment;
  _QWORD *v29;
  unint64_t v30;
  uint64_t *v31;
  int *v32;
  int *v33;
  char v34;
  const __int32 **v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  TSegmenter *v41;
  TVertex *v42;
  int v45[2];
  __int128 v46;
  _BYTE v47[785];
  char v48;
  unsigned int *v49;
  __int128 v50;
  _BYTE v51[809];
  char v52;
  void *__p;
  __int128 *v54;
  uint64_t v55;
  int v56[2];
  __int128 v57;
  _BYTE v58[1024];
  char v59;
  int v60[3];

  v11 = a6;
  *(_QWORD *)v56 = v58;
  v57 = xmmword_1AE1418C0;
  v59 = 1;
  v14 = (char *)*((_QWORD *)this + 2);
  if (v14)
  {
    PreviousSegment = TSegmenter::getPreviousSegment(a6, v14);
    if (PreviousSegment)
    {
      if (*(_DWORD *)(PreviousSegment + 24) == 5)
        goto LABEL_6;
      a4 = *(int **)PreviousSegment;
    }
    TBuffer<wchar_t>::assign((uint64_t)v56, a4);
  }
LABEL_6:
  v54 = 0;
  __p = 0;
  v55 = 0;
  v49 = (unsigned int *)v51;
  v50 = xmmword_1AE1418C0;
  v52 = 1;
  OutEdge = TVertex::getOutEdge((uint64_t)this);
  if (OutEdge)
  {
LABEL_7:
    v18 = *(_QWORD *)(OutEdge + 40);
    if (v18 >= a7 && v18 < a8)
    {
      v20 = *(_DWORD *)(OutEdge + 48);
      v21 = v20 > 5;
      v22 = (1 << v20) & 0x2C;
      if (v21 || v22 == 0)
      {
        TWord::getTokenName(*(__int32 ***)(OutEdge + 56), (uint64_t)&v49);
        std::vector<TRegExpMatch>::resize((uint64_t)&__p, 0);
        v24 = *(_QWORD **)(a1 + 72);
        if (*((_QWORD *)&v50 + 1) >= (unint64_t)v50)
        {
          if (v52)
          {
            v45[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v49, *((unint64_t *)&v50 + 1), v45, 1uLL);
            v25 = v49;
            --*((_QWORD *)&v50 + 1);
          }
          else
          {
            v25 = v49;
            if ((_QWORD)v50)
              v49[(_QWORD)v50 - 1] = 0;
          }
        }
        else
        {
          v25 = v49;
          v49[*((_QWORD *)&v50 + 1)] = 0;
        }
        TRegExp::match(v24, v25, 0, (uint64_t)&__p);
        if (__p != v54)
        {
          *(_QWORD *)v45 = sortMatch;
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,false>((uint64_t)__p, v54, (uint64_t (**)(__int128 *, __int128 *))v45, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (_BYTE *)__p) >> 3)), 1, v26);
          *(_QWORD *)v45 = v47;
          v46 = xmmword_1AE1418C0;
          v48 = 1;
          v27 = *(char **)(*(_QWORD *)(OutEdge + 24) + 24);
          if (v27)
          {
            if (*v27)
            {
              Segment = TSegmenter::getSegment(v11, v27);
              if (*(_DWORD *)(Segment + 24) != 5)
                TBuffer<wchar_t>::assign((uint64_t)v45, *(int **)Segment);
            }
            else
            {
              TBuffer<wchar_t>::assign((uint64_t)v45, a5);
            }
          }
          v41 = v11;
          v29 = __p;
          if (v54 == __p)
            goto LABEL_67;
          v30 = 0;
          v42 = *(TVertex **)(OutEdge + 24);
          while (1)
          {
            v31 = *(uint64_t **)(*(_QWORD *)(a1 + 40) + 8 * v29[3 * v30 + 2]);
            if (*((_QWORD *)&v57 + 1) >= (unint64_t)v57)
            {
              if (v59)
              {
                v60[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)v56, *((unint64_t *)&v57 + 1), v60, 1uLL);
                v32 = *(int **)v56;
                --*((_QWORD *)&v57 + 1);
              }
              else
              {
                v32 = *(int **)v56;
                if ((_QWORD)v57)
                  *(_DWORD *)(*(_QWORD *)v56 + 4 * v57 - 4) = 0;
              }
            }
            else
            {
              v32 = *(int **)v56;
              *(_DWORD *)(*(_QWORD *)v56 + 4 * *((_QWORD *)&v57 + 1)) = 0;
            }
            if (*((_QWORD *)&v46 + 1) >= (unint64_t)v46)
            {
              if (v48)
              {
                v60[0] = 0;
                TBuffer<wchar_t>::insert((uint64_t)v45, *((unint64_t *)&v46 + 1), v60, 1uLL);
                v33 = *(int **)v45;
                --*((_QWORD *)&v46 + 1);
              }
              else
              {
                v33 = *(int **)v45;
                if ((_QWORD)v46)
                  *(_DWORD *)(*(_QWORD *)v45 + 4 * v46 - 4) = 0;
              }
            }
            else
            {
              v33 = *(int **)v45;
              *(_DWORD *)(*(_QWORD *)v45 + 4 * *((_QWORD *)&v46 + 1)) = 0;
            }
            v35 = (const __int32 **)TGroup::munge(v31, OutEdge, v32, v33, a9);
            if (v35)
              break;
            if ((v34 & 1) != 0)
            {
              v36 = TVertex::getOutEdge((uint64_t)this);
              if (v36)
              {
                v37 = 0;
LABEL_48:
                if (*(_DWORD *)(v36 + 48) != 5)
                  ++v37;
                while (1)
                {
                  v36 = *(_QWORD *)(v36 + 8);
                  if (!v36)
                    break;
                  if (!*(_BYTE *)(v36 + 32))
                    goto LABEL_48;
                }
                if (v37 >= 2)
                {
                  v38 = TVertex::getInEdge((uint64_t)v42);
                  if (v38)
                  {
                    v39 = 0;
LABEL_56:
                    if (*(_DWORD *)(v38 + 48) != 5)
                      ++v39;
                    while (1)
                    {
                      v38 = *(_QWORD *)v38;
                      if (!v38)
                        break;
                      if (!*(_BYTE *)(v38 + 32))
                        goto LABEL_56;
                    }
                    if (v39 >= 2)
                    {
                      TGraph::deleteEdge((uint64_t)a3, OutEdge);
LABEL_67:
                      if (v48 && *(_BYTE **)v45 != v47 && *(_QWORD *)v45)
                        MEMORY[0x1AF44D160]();
                      v11 = v41;
                      goto LABEL_15;
                    }
                  }
                }
              }
            }
            ++v30;
            v29 = __p;
            if (v30 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (_BYTE *)__p) >> 3))
              goto LABEL_67;
          }
          if ((v34 & 1) != 0)
            TGraph::deleteEdge((uint64_t)a3, OutEdge);
          addSequence(v35, this, v42, a3, *(TLexicon **)(a1 + 64), 0, 0, 0);
          goto LABEL_67;
        }
      }
    }
LABEL_15:
    while (1)
    {
      OutEdge = *(_QWORD *)(OutEdge + 8);
      if (!OutEdge)
        break;
      if (!*(_BYTE *)(OutEdge + 32))
        goto LABEL_7;
    }
  }
  if (v52)
  {
    if (v49 != (unsigned int *)v51 && v49 != 0)
      MEMORY[0x1AF44D160]();
  }
  if (__p)
  {
    v54 = (__int128 *)__p;
    operator delete(__p);
  }
  if (v59 && *(_BYTE **)v56 != v58)
  {
    if (*(_QWORD *)v56)
      MEMORY[0x1AF44D160]();
  }
}

void sub_1ADF07F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  void *v22;
  unint64_t v23;

  if (LOBYTE(STACK[0x460]) && a18 != a11 && a18)
    MEMORY[0x1AF44D160]();
  if (LOBYTE(STACK[0x880]))
  {
    v21 = STACK[0x468];
    if (STACK[0x468] != v18)
    {
      if (v21)
        MEMORY[0x1AF44D160](v21, 0x1000C8052888210);
    }
  }
  v22 = (void *)STACK[0x888];
  if (STACK[0x888])
  {
    STACK[0x890] = (unint64_t)v22;
    operator delete(v22);
  }
  if (LOBYTE(STACK[0xCB8]))
  {
    v23 = STACK[0x8A0];
    if (STACK[0x8A0] != v19)
    {
      if (v23)
        MEMORY[0x1AF44D160](v23, 0x1000C8052888210);
    }
  }
  _Unwind_Resume(a1);
}

BOOL sortMatch(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16);
}

void TMungeMapManager::munge(uint64_t a1, TGraph *a2, int *a3, int *a4, TSegmenter *a5, unint64_t a6, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *a7)
{
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  TVertex *v19;

  if (*a3)
    v7 = a3;
  else
    v7 = (int *)&unk_1AE18D3E8;
  if (*a4)
    v8 = a4;
  else
    v8 = (int *)&unk_1AE18D3E8;
  v9 = *((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10);
  if (v9)
  {
    v15 = 0;
    v16 = (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3;
    v17 = v9 >> 3;
    if (v17 <= 1)
      v18 = 1;
    else
      v18 = v17;
    do
    {
      v19 = *(TVertex **)(*((_QWORD *)a2 + 10) + 8 * v15);
      if (!*((_BYTE *)v19 + 32))
        TMungeMapManager::mungeWithGroups(a1, v19, a2, v7, v8, a5, a6, v16, a7);
      ++v15;
    }
    while (v18 != v15);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,false>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (result != a2)
  {
    v17 = v3;
    v18 = v4;
    v6 = result;
    v7 = result + 24;
    if (result + 24 != a2)
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v15 = *(_OWORD *)v10;
          v16 = *(_QWORD *)(v10 + 16);
          v12 = v9;
          while (1)
          {
            v13 = v6 + v12;
            *(_OWORD *)(v13 + 24) = *(_OWORD *)(v6 + v12);
            *(_QWORD *)(v13 + 40) = *(_QWORD *)(v6 + v12 + 16);
            if (!v12)
              break;
            v12 -= 24;
            result = (*a3)((uint64_t)&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              v14 = v6 + v12 + 24;
              goto LABEL_10;
            }
          }
          v14 = v6;
LABEL_10:
          *(_OWORD *)v14 = v15;
          *(_QWORD *)(v14 + 16) = v16;
        }
        v7 = v10 + 24;
        v9 += 24;
      }
      while (v10 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (result != a2)
  {
    v14 = v3;
    v15 = v4;
    v6 = result;
    v7 = result + 24;
    if (result + 24 != a2)
    {
      v9 = result - 24;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12 = *(_OWORD *)v6;
          v13 = *(_QWORD *)(v6 + 16);
          v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 48) = *(_OWORD *)(v11 + 24);
            *(_QWORD *)(v11 + 64) = *(_QWORD *)(v11 + 40);
            result = (*a3)((uint64_t)&v12, v11);
            v11 -= 24;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v11 + 48) = v12;
          *(_QWORD *)(v11 + 64) = v13;
        }
        v7 = v6 + 24;
        v9 += 24;
      }
      while (v6 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v13 = *((_QWORD *)a2 + 2);
    v14 = *a2;
    v15 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v15;
    *a3 = v14;
    *((_QWORD *)a3 + 2) = v13;
    if (!(*a4)(a2, a1))
      return 1;
    v16 = *((_QWORD *)a1 + 2);
    v17 = *a1;
    v18 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v18;
    *a2 = v17;
    *((_QWORD *)a2 + 2) = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = *((_QWORD *)a1 + 2);
    v20 = *a1;
    v21 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v21;
    *a2 = v20;
    *((_QWORD *)a2 + 2) = v19;
    if (!(*a4)(a3, a2))
      return 1;
    v22 = *((_QWORD *)a2 + 2);
    v23 = *a2;
    v24 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v24;
    *a3 = v23;
    *((_QWORD *)a3 + 2) = v22;
    return 2;
  }
  v10 = *((_QWORD *)a1 + 2);
  v11 = *a1;
  v12 = *((_QWORD *)a3 + 2);
  *a1 = *a3;
  *((_QWORD *)a1 + 2) = v12;
  *a3 = v11;
  *((_QWORD *)a3 + 2) = v10;
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRegExpMatch *,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v6;
  __int128 *v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v4 = a2;
  v16 = *a1;
  v17 = *((_QWORD *)a1 + 2);
  if (((*a3)(&v16, (__int128 *)((char *)a2 - 24)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 = (__int128 *)((char *)v6 + 24);
    while (((*a3)(&v16, v6) & 1) == 0);
  }
  else
  {
    v7 = (__int128 *)((char *)a1 + 24);
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v16, v7);
      v7 = (__int128 *)((char *)v6 + 24);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 = (__int128 *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *v6;
    v19 = *((_QWORD *)v6 + 2);
    v18 = v9;
    v10 = *v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
    *v6 = v10;
    v11 = v18;
    *((_QWORD *)v4 + 2) = v19;
    *v4 = v11;
    do
      v6 = (__int128 *)((char *)v6 + 24);
    while (!(*a3)(&v16, v6));
    do
      v4 = (__int128 *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  v12 = (__int128 *)((char *)v6 - 24);
  if ((__int128 *)((char *)v6 - 24) != a1)
  {
    v13 = *v12;
    *((_QWORD *)a1 + 2) = *((_QWORD *)v6 - 1);
    *a1 = v13;
  }
  v14 = v16;
  *((_QWORD *)v6 - 1) = v17;
  *v12 = v14;
  return v6;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRegExpMatch *,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&)>(__int128 *a1, unint64_t a2, uint64_t (**a3)(char *, __int128 *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  do
    v6 += 24;
  while (((*a3)((char *)a1 + v6, &v17) & 1) != 0);
  v7 = (unint64_t)a1 + v6;
  v8 = (uint64_t)a1 + v6 - 24;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= a2)
        break;
      a2 -= 24;
    }
    while (((*a3)((char *)a2, &v17) & 1) == 0);
  }
  else
  {
    do
      a2 -= 24;
    while (!(*a3)((char *)a2, &v17));
  }
  if (v7 < a2)
  {
    v9 = (__int128 *)((char *)a1 + v6);
    v10 = a2;
    do
    {
      v19 = *v9;
      v11 = v19;
      v20 = *((_QWORD *)v9 + 2);
      v12 = v20;
      v13 = *(_QWORD *)(v10 + 16);
      *v9 = *(_OWORD *)v10;
      *((_QWORD *)v9 + 2) = v13;
      *(_QWORD *)(v10 + 16) = v12;
      *(_OWORD *)v10 = v11;
      do
        v9 = (__int128 *)((char *)v9 + 24);
      while (((*a3)((char *)v9, &v17) & 1) != 0);
      do
        v10 -= 24;
      while (!(*a3)((char *)v10, &v17));
    }
    while ((unint64_t)v9 < v10);
    v8 = (uint64_t)v9 - 24;
  }
  if ((__int128 *)v8 != a1)
  {
    v14 = *(_OWORD *)v8;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v8 + 16);
    *a1 = v14;
  }
  v15 = v17;
  *(_QWORD *)(v8 + 16) = v18;
  *(_OWORD *)v8 = v15;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 24);
      if ((*a3)((__int128 *)(a2 - 24), (__int128 *)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v11;
        *v8 = v10;
        *(_QWORD *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      v12 = (__int128 *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v13, v12))
    {
      v19 = *(_OWORD *)v13;
      v20 = *(_QWORD *)(v13 + 16);
      v16 = v14;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (((*a3)(&v19, (__int128 *)(v17 + 24)) & 1) == 0)
        {
          v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_OWORD *)v18 = v19;
      *(_QWORD *)(v18 + 16) = v20;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (__int128 *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(_QWORD *)(a4 + 16) = v11;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v14 = *(_QWORD *)(a2 + 16);
      v15 = *(_OWORD *)a2;
      v16 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(_QWORD *)(a3 + 16) = v14;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        v17 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v14 = *(_QWORD *)(a4 + 16);
    v15 = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(_QWORD *)(a5 + 16) = v14;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v17 = *(_QWORD *)(a3 + 16);
      v18 = *(_OWORD *)a3;
      v19 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(_QWORD *)(a4 + 16) = v17;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v20 = *(_QWORD *)(a2 + 16);
        v21 = *(__n128 *)a2;
        v22 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(_QWORD *)(a3 + 16) = v20;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          v23 = a1[1].n128_u64[0];
          result = *a1;
          v24 = *(_QWORD *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v24;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,TRegExpMatch*>(__n128 *a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(uint64_t, __int8 *), __n128 a5)
{
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __n128 v26;
  __n128 *v29;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;

  if (a1 != a2)
  {
    v7 = a2;
    v9 = (char *)a2 - (char *)a1;
    v10 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__n128 *)((char *)a1 + 24 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)a1, a4, v10, v13);
        v13 = (__n128 *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, __n128 *, __n128))*a4)(v15, a1, a5))
        {
          v16 = v15[1].n128_u64[0];
          v17 = *v15;
          v18 = a1[1].n128_u64[0];
          *v15 = *a1;
          v15[1].n128_u64[0] = v18;
          *a1 = v17;
          a1[1].n128_u64[0] = v16;
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)a1, a4, v10, a1);
        }
        v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 < 25)
    {
      return v14;
    }
    else
    {
      v29 = v14;
      v19 = v9 / 0x18uLL;
      do
      {
        v30 = v7;
        v20 = 0;
        v31 = *a1;
        v32 = a1[1].n128_u64[0];
        v21 = (uint64_t)a1;
        do
        {
          v22 = v21 + 24 * v20 + 24;
          v23 = (2 * v20) | 1;
          v24 = 2 * v20 + 2;
          if (v24 < v19 && (*a4)(v21 + 24 * v20 + 24, (__int8 *)(v21 + 24 * v20 + 48)))
          {
            v22 += 24;
            v23 = v24;
          }
          v25 = *(_OWORD *)v22;
          *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
          *(_OWORD *)v21 = v25;
          v21 = v22;
          v20 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        v7 = (__n128 *)((char *)v30 - 24);
        if ((__int8 *)v22 == &v30[-2].n128_i8[8])
        {
          *(_QWORD *)(v22 + 16) = v32;
          *(__n128 *)v22 = v31;
        }
        else
        {
          v26 = *v7;
          *(_QWORD *)(v22 + 16) = v30[-1].n128_u64[1];
          *(__n128 *)v22 = v26;
          *v7 = v31;
          v30[-1].n128_u64[1] = v32;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)a1, v22 + 24, (uint64_t (**)(__int128 *, __int128 *))a4, 0xAAAAAAAAAAAAAAABLL * ((v22 + 24 - (uint64_t)a1) >> 3));
        }
      }
      while (v19-- > 2);
      return v29;
    }
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(uint64_t a1, unsigned int (**a2)(uint64_t, __int8 *), uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = (__n128 *)(a1 + 24 * v12);
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 24 * v12, &v13[1].n128_i8[8]))
      {
        v13 = (__n128 *)((char *)v13 + 24);
        v12 = v14;
      }
      if ((((uint64_t (*)(__n128 *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        do
        {
          v16 = v13;
          v17 = *v13;
          v7[1].n128_u64[0] = v13[1].n128_u64[0];
          *v7 = v17;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = (__n128 *)(a1 + 24 * v18);
          v19 = 2 * v12 + 2;
          if (v19 < a3)
          {
            if ((*a2)(a1 + 24 * v18, &v13[1].n128_i8[8]))
            {
              v13 = (__n128 *)((char *)v13 + 24);
              v18 = v19;
            }
          }
          v7 = v16;
          v12 = v18;
        }
        while (!(*a2)((uint64_t)v13, (__int8 *)&v20));
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  double result;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v17 = v4;
    v18 = v5;
    v9 = v6 >> 1;
    v10 = (__int128 *)(a1 + 24 * (v6 >> 1));
    v11 = (__int128 *)(a2 - 24);
    if ((*a3)(v10, (__int128 *)(a2 - 24)))
    {
      v15 = *v11;
      v16 = *((_QWORD *)v11 + 2);
      do
      {
        v13 = v10;
        v14 = *v10;
        *((_QWORD *)v11 + 2) = *((_QWORD *)v10 + 2);
        *v11 = v14;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__int128 *)(a1 + 24 * v9);
        v11 = v13;
      }
      while (((*a3)(v10, &v15) & 1) != 0);
      result = *(double *)&v15;
      *v13 = v15;
      *((_QWORD *)v13 + 2) = v16;
    }
  }
  return result;
}

void kaldi::quasar::EspressoV2TensorData::~EspressoV2TensorData(kaldi::quasar::EspressoV2TensorData *this)
{
  const char *last_error_message;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD v6[34];

  *(_QWORD *)this = &off_1E5D33950;
  if (*((_QWORD *)this + 4) && e5rt_tensor_desc_dtype_release()
    || *((_QWORD *)this + 5) && e5rt_tensor_desc_release()
    || *((_QWORD *)this + 6) && e5rt_buffer_object_release())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Espresso V2 failure: ", 21);
    v4 = strlen(last_error_message);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)last_error_message, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)this);
}

{
  kaldi::quasar::EspressoV2TensorData::~EspressoV2TensorData(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::EspressoV2NetworkConfig::EspressoV2NetworkConfig(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &off_1E5D33C60;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 40) = v3;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 136), "CPU");
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  return a1;
}

void sub_1ADF094F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  kaldi::quasar::ComputeEngineConfigItf *v10;

  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(v10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2NetworkConfig::Read(uint64_t a1, uint64_t *a2, char a3, uint64_t a4)
{
  uint64_t *v4;
  std::string *v8;
  int v9;
  uint64_t v10;
  size_t v11;
  unsigned __int8 *v12;
  void **v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  void **v19;
  void *v20;
  size_t v21;
  void *v22;
  int v23;
  void *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  int v30;
  void *v33;
  void *v34;
  int v35;
  BOOL v36;
  BOOL v37;
  std::string *p_str;
  uint64_t *v39;
  _QWORD *v40;
  void **v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t **v44;
  uint64_t v45;
  __int128 *v46[34];
  void *v47;
  size_t v48;
  uint64_t v49;
  std::string v50;
  const void *v51[2];
  uint64_t v52;
  std::string __str;

  memset(&__str, 0, sizeof(__str));
  v51[0] = 0;
  v51[1] = 0;
  v52 = 0;
  memset(&v50, 0, sizeof(v50));
  v4 = a2 + 4;
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) == 0)
  {
    v8 = (std::string *)(a1 + 136);
    v44 = (uint64_t **)(a1 + 88);
    v45 = a1 + 112;
    while (1)
    {
      v47 = 0;
      v48 = 0;
      v49 = 0;
      kaldi::ReadToken(a2, a3, (uint64_t)&v47);
      v9 = *(char *)(a4 + 23);
      v10 = *(_QWORD *)(a4 + 8);
      if (v9 >= 0)
        v10 = *(unsigned __int8 *)(a4 + 23);
      if (!v10 || (v49 >= 0 ? (v11 = HIBYTE(v49)) : (v11 = v48), v11 != v10))
      {
LABEL_21:
        if ((v49 & 0x8000000000000000) == 0)
        {
          v16 = 0;
          v17 = 0;
          v18 = 0;
          v19 = &v47;
          switch(HIBYTE(v49))
          {
            case 0xA:
              goto LABEL_26;
            case 0xE:
              goto LABEL_34;
            case 0x11:
              goto LABEL_42;
            case 0x12:
              goto LABEL_53;
            default:
              goto LABEL_77;
          }
        }
        goto LABEL_24;
      }
      v12 = v9 >= 0 ? (unsigned __int8 *)a4 : *(unsigned __int8 **)a4;
      if (v49 < 0)
        break;
      if (!HIBYTE(v49))
        goto LABEL_70;
      v13 = &v47;
      v14 = HIBYTE(v49);
      do
      {
        if (*(unsigned __int8 *)v13 != *v12)
          goto LABEL_21;
        v13 = (void **)((char *)v13 + 1);
        ++v12;
        --v14;
      }
      while (v14);
      v15 = 0;
      if ((v49 & 0x8000000000000000) == 0)
      {
LABEL_63:
        if (!v15)
          goto LABEL_70;
        goto LABEL_64;
      }
LABEL_19:
      operator delete(v47);
      if ((v15 & 1) == 0)
        goto LABEL_70;
LABEL_64:
      if ((*((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
        goto LABEL_70;
    }
    v20 = v47;
    if (!memcmp(v47, v12, v48))
    {
      operator delete(v20);
      goto LABEL_70;
    }
LABEL_24:
    v21 = v48;
    if (v48 == 10)
    {
      v16 = 1;
      v19 = (void **)v47;
LABEL_26:
      v22 = *v19;
      v23 = *((unsigned __int16 *)v19 + 4);
      if (v22 == (void *)0x6F6974636E75463CLL && v23 == 15982)
      {
        p_str = &__str;
LABEL_61:
        kaldi::ReadToken(a2, a3, (uint64_t)p_str);
        goto LABEL_62;
      }
      if (!v16)
        goto LABEL_77;
      v21 = v48;
    }
    if (v21 == 14)
    {
      v17 = 1;
      v19 = (void **)v47;
LABEL_34:
      v25 = *v19;
      v26 = *(uint64_t *)((char *)v19 + 6);
      if (v25 == (void *)0x5474757074754F3CLL && v26 == 0x3E726F736E655474)
      {
        kaldi::ReadToken(a2, a3, (uint64_t)v51);
        v46[0] = (__int128 *)v51;
        v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v44, v51, (uint64_t)&std::piecewise_construct, v46);
        std::string::operator=((std::string *)(v39 + 7), &__str);
        goto LABEL_62;
      }
      if (!v17)
        goto LABEL_77;
      v21 = v48;
    }
    if (v21 != 17)
    {
LABEL_51:
      if (v21 != 18)
        goto LABEL_77;
      v19 = (void **)v47;
LABEL_53:
      v33 = *v19;
      v34 = v19[1];
      v35 = *((unsigned __int16 *)v19 + 8);
      v36 = v33 == (void *)0x6361626C6C61463CLL && v34 == (void *)0x726F6674616C506BLL;
      v37 = v36 && v35 == 15981;
      p_str = v8;
      if (!v37)
      {
LABEL_77:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v46);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Unknown token ", 14);
        if (v49 >= 0)
          v41 = &v47;
        else
          v41 = (void **)v47;
        if (v49 >= 0)
          v42 = HIBYTE(v49);
        else
          v42 = v48;
        v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", a typo in config file?", 24);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v46);
      }
      goto LABEL_61;
    }
    v18 = 1;
    v19 = (void **)v47;
LABEL_42:
    v28 = *v19;
    v29 = v19[1];
    v30 = *((unsigned __int8 *)v19 + 16);
    if (v28 != (void *)0x657475706D6F433CLL || v29 != (void *)0x6D726F6674616C50 || v30 != 62)
    {
      if (!v18)
        goto LABEL_77;
      v21 = v48;
      goto LABEL_51;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&v50);
    kaldi::SplitStringToVector(&v50, "|", 1, v45);
LABEL_62:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
    v15 = 1;
    if ((v49 & 0x8000000000000000) == 0)
      goto LABEL_63;
    goto LABEL_19;
  }
LABEL_70:
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52) < 0)
    operator delete((void *)v51[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1ADF09940(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::EspressoV2NetworkConfig::CreateBNNSFallbackEngine(kaldi::quasar::EspressoV2NetworkConfig *this@<X0>, kaldi::quasar::BNNSGraphNetworkPlan **a2@<X8>)
{
  uint64_t *v3;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  v3 = (uint64_t *)((char *)this + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "bnnsir");
  kaldi::quasar::MakeComputeEngineCachePath(v3, (uint64_t *)__p, v6);
  if (v5 < 0)
    operator delete(__p[0]);
  kaldi::quasar::BNNSGraphNetworkConfig::BNNSGraphNetworkConfig(__p, v3, v6);
  kaldi::quasar::BNNSGraphNetworkConfig::CreateComputeEngine((kaldi::quasar::BNNSGraphNetworkConfig *)__p, a2);
  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig(__p);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADF09A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig((void **)va);
  if (*(char *)(v2 - 17) < 0)
    operator delete(*(void **)(v2 - 40));
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2NetworkConfig::CreateComputeEngine(kaldi::quasar::EspressoV2NetworkConfig *this@<X0>, kaldi::quasar::BNNSGraphNetworkPlan **a2@<X8>)
{
  kaldi::quasar::EspressoV2Plan *v4;

  if (kaldi::quasar::EspressoV2NetworkConfig::MilShouldUseBnnsFallback((unsigned __int8 **)this))
  {
    kaldi::quasar::EspressoV2NetworkConfig::CreateBNNSFallbackEngine(this, a2);
  }
  else
  {
    v4 = (kaldi::quasar::EspressoV2Plan *)operator new();
    kaldi::quasar::EspressoV2Plan::EspressoV2Plan(v4, this, 0);
    *a2 = v4;
  }
}

void sub_1ADF09AD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40EFF83A3CLL);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::EspressoV2NetworkConfig::MilShouldUseBnnsFallback(unsigned __int8 **this)
{
  _BOOL8 IsUniversalIntelChip;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  int v10;
  int v12;
  unsigned __int8 v13;
  _QWORD *v14;
  int v15;
  int v16;
  _BOOL4 v17;
  char v18;
  void *__p[2];
  char v20;

  IsUniversalIntelChip = kaldi::quasar::IsUniversalIntelChip((kaldi::quasar *)this);
  if (IsUniversalIntelChip || (kaldi::quasar::IsVirtualMachine((kaldi::quasar *)IsUniversalIntelChip) & 1) != 0)
    return 1;
  v4 = (uint64_t)std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char [4],std::__identity>(this[14], this[15], "ANE");
  v5 = v4;
  v6 = this[15];
  v7 = (unsigned __int16 *)(this + 17);
  v8 = *((char *)this + 159);
  if (v8 < 0)
  {
    if (this[18] != (unsigned __int8 *)3)
    {
LABEL_14:
      LOBYTE(v12) = 1;
      goto LABEL_15;
    }
    v7 = *(unsigned __int16 **)v7;
  }
  else if (v8 != 3)
  {
    goto LABEL_14;
  }
  v9 = *v7;
  v10 = *((unsigned __int8 *)v7 + 2);
  if (v9 != 20547 || v10 != 85)
    goto LABEL_14;
  std::string::basic_string[abi:ne180100]<0>(__p, "QuasarForceBnnsFallback");
  v4 = kaldi::quasar::UserDefaultsBoolCached((uint64_t *)__p);
  v12 = v4;
  if (v20 < 0)
    operator delete(__p[0]);
  if (v12)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Forced to use BNNS fallback by user default", 43);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    return 1;
  }
LABEL_15:
  if ((v13 & 1) == 0)
  {
    if ((_DWORD)v4)
    {
      kaldi::quasar::EspressoV2NetworkConfig::MilShouldUseBnnsFallback(void)const::isLowEnd = kaldi::quasar::isLowEndDevice((kaldi::quasar *)v4);
    }
  }
  if (!kaldi::quasar::EspressoV2NetworkConfig::MilShouldUseBnnsFallback(void)const::isLowEnd)
    return 0;
  v14 = (_QWORD *)kaldi::quasar::ProcessName((kaldi::quasar *)v4);
  v15 = *((char *)v14 + 23);
  if (v15 < 0)
  {
    if (v14[1] != 50)
    {
LABEL_25:
      v17 = 0;
      goto LABEL_26;
    }
    v14 = (_QWORD *)*v14;
  }
  else if (v15 != 50)
  {
    goto LABEL_25;
  }
  v16 = memcmp(v14, "com.apple.SpeechRecognitionCore.speechrecognitiond", 0x32uLL);
  v17 = v16 == 0;
  if (!v16 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Disabling milIsANEReadyOnLowEnd for speechrecognitiond", 54);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    v17 = 1;
  }
LABEL_26:
  if ((unsigned __int8 *)v5 == v6)
    v18 = 1;
  else
    v18 = v12;
  if ((v18 & 1) != 0)
    return 0;
  return !*((_BYTE *)this + 33) || v17;
}

void sub_1ADF09CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2NetworkConfig::CreateComputeEngineAllowingFallback(kaldi::quasar::EspressoV2NetworkConfig *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 *v4;
  int v5;
  int v6;
  int v7;
  _BOOL4 v9;
  kaldi::quasar::EspressoV2Plan *v10;
  kaldi::quasar::BNNSGraphNetworkPlan *v11;

  if (kaldi::quasar::EspressoV2NetworkConfig::MilShouldUseBnnsFallback((unsigned __int8 **)this))
  {
    kaldi::quasar::EspressoV2NetworkConfig::CreateBNNSFallbackEngine(this, &v11);
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v11;
    return;
  }
  v4 = (unsigned __int16 *)((char *)this + 136);
  v5 = *((char *)this + 159);
  if ((v5 & 0x80000000) == 0)
  {
    if (v5 != 3)
      goto LABEL_14;
LABEL_8:
    v6 = *v4;
    v7 = *((unsigned __int8 *)v4 + 2);
    v9 = v6 == 20547 && v7 == 85;
    goto LABEL_15;
  }
  if (*((_QWORD *)this + 18) == 3)
  {
    v4 = *(unsigned __int16 **)v4;
    goto LABEL_8;
  }
LABEL_14:
  v9 = 0;
LABEL_15:
  v10 = (kaldi::quasar::EspressoV2Plan *)operator new();
  kaldi::quasar::EspressoV2Plan::EspressoV2Plan(v10, this, v9);
  if (v9 && !*((_QWORD *)v10 + 27))
  {
    kaldi::quasar::EspressoV2NetworkConfig::CreateBNNSFallbackEngine(this, &v11);
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v11;
    (*(void (**)(kaldi::quasar::EspressoV2Plan *))(*(_QWORD *)v10 + 8))(v10);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v10;
  }
}

void sub_1ADF09E44(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2NetworkConfig::ComputeEngineUpgradeLikelyExists(kaldi::quasar::EspressoV2NetworkConfig *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  size_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  size_t v11;
  char *v12;
  void **v14;
  int v15;
  uint64_t v18[3];
  void *__p[2];
  unsigned __int8 v20;
  void **v21;

  if (!kaldi::quasar::EspressoV2NetworkConfig::MilShouldUseBnnsFallback((unsigned __int8 **)this))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ".mil");
    v3 = *((unsigned __int8 *)this + 63);
    v4 = *((_QWORD *)this + 6);
    if ((v3 & 0x80u) == 0)
      v5 = *((unsigned __int8 *)this + 63);
    else
      v5 = *((_QWORD *)this + 6);
    v6 = v20;
    if ((v20 & 0x80u) == 0)
      v7 = v20;
    else
      v7 = (size_t)__p[1];
    v9 = v5 >= v7;
    v8 = v5 - v7;
    if (!v9)
      goto LABEL_37;
    if ((v3 & 0x80) != 0)
    {
      if (v7 == -1 || v4 < v8)
LABEL_42:
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v4 - v8 >= v7)
        v11 = v7;
      else
        v11 = v4 - v8;
      v12 = (char *)*((_QWORD *)this + 5);
    }
    else
    {
      v9 = v7 != -1 && v3 >= v8;
      if (!v9)
        goto LABEL_42;
      v10 = v3 - v8;
      if (v10 >= v7)
        v11 = v7;
      else
        v11 = v10;
      v12 = (char *)this + 40;
    }
    if ((v20 & 0x80u) == 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    v15 = memcmp(&v12[v8], v14, v11);
    if (v11 == v7 && v15 == 0)
    {
      memset(v18, 0, sizeof(v18));
      v2 = kaldi::quasar::checkCompiledCacheWithProgramLibrary((uint64_t)this + 40, (unsigned __int16 **)this + 14, v18);
      v21 = (void **)v18;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
      if ((v20 & 0x80) == 0)
        return v2;
      goto LABEL_38;
    }
LABEL_37:
    v2 = 0;
    if ((v6 & 0x80) == 0)
      return v2;
LABEL_38:
    operator delete(__p[0]);
    return v2;
  }
  return 0;
}

void sub_1ADF09FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

kaldi::quasar::EspressoV2Plan *kaldi::quasar::EspressoV2Plan::EspressoV2Plan(kaldi::quasar::EspressoV2Plan *this, const kaldi::quasar::EspressoV2NetworkConfig *a2, int a3)
{
  *(_QWORD *)this = &off_1E5D32F40;
  kaldi::quasar::EspressoV2NetworkConfig::EspressoV2NetworkConfig((kaldi::quasar::EspressoV2Plan *)((char *)this + 8), a2);
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 28) = (char *)this + 232;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 264) = 0;
  kaldi::quasar::EspressoV2Plan::LoadNetwork((uint64_t)this, (uint64_t)this + 48, a3, (uint64_t *)this + 21, (uint64_t *)a2 + 23);
  return this;
}

void sub_1ADF0A078(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  void **v2;
  uint64_t v3;
  char **v4;

  std::__tree<std::string>::destroy(v3, *v4);
  kaldi::quasar::EspressoV2NetworkConfig::~EspressoV2NetworkConfig(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2Plan::LoadNetwork(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  size_t v15;
  unint64_t v16;
  _BOOL4 v17;
  BOOL v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t result;
  void **v24;
  int v25;
  void *__p[2];
  unsigned __int8 v28;

  v10 = *(_QWORD *)(a1 + 24);
  if (v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, ".mil");
  v11 = *(unsigned __int8 *)(a2 + 23);
  v12 = *(_QWORD *)(a2 + 8);
  if ((v11 & 0x80u) == 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  v14 = (char)v28;
  if ((v28 & 0x80u) == 0)
    v15 = v28;
  else
    v15 = (size_t)__p[1];
  v18 = v13 >= v15;
  v16 = v13 - v15;
  if (!v18)
  {
    v17 = 0;
    if (((char)v28 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  if ((v11 & 0x80) != 0)
  {
    if (v15 == -1 || v12 < v16)
LABEL_48:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v12 - v16 >= v15)
      v20 = v15;
    else
      v20 = v12 - v16;
    v21 = *(_QWORD *)a2;
  }
  else
  {
    v18 = v15 != -1 && v11 >= v16;
    if (!v18)
      goto LABEL_48;
    v19 = v11 - v16;
    if (v19 >= v15)
      v20 = v15;
    else
      v20 = v19;
    v21 = a2;
  }
  if ((v28 & 0x80u) == 0)
    v24 = __p;
  else
    v24 = (void **)__p[0];
  v25 = memcmp((const void *)(v21 + v16), v24, v20);
  v17 = v20 == v15 && v25 == 0;
  if (v14 < 0)
LABEL_11:
    operator delete(__p[0]);
LABEL_12:
  if (v17)
    kaldi::quasar::EspressoV2Plan::LoadNetworkMil(a1, a2, a3, a4, a5);
  else
    kaldi::quasar::EspressoV2Plan::LoadNetworkBundle(a1, a2, a4);
  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a2);
  return result;
}

void kaldi::quasar::EspressoV2Plan::~EspressoV2Plan(kaldi::quasar::EspressoV2Plan *this)
{
  _QWORD *v2;
  kaldi::quasar::EspressoV2Plan *v3;
  kaldi::quasar::EspressoV2Plan *v4;
  kaldi::quasar::EspressoV2Plan *v5;
  BOOL v6;
  const char *last_error_message;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD v11[34];

  *(_QWORD *)this = &off_1E5D32F40;
  v2 = (_QWORD *)((char *)this + 216);
  if (*((_QWORD *)this + 27))
  {
    if (e5rt_execution_stream_operation_release())
      goto LABEL_18;
    *v2 = 0;
  }
  v3 = (kaldi::quasar::EspressoV2Plan *)*((_QWORD *)this + 28);
  if (v3 != (kaldi::quasar::EspressoV2Plan *)((char *)this + 232))
  {
    while (!e5rt_execution_stream_operation_release())
    {
      v4 = (kaldi::quasar::EspressoV2Plan *)*((_QWORD *)v3 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(kaldi::quasar::EspressoV2Plan **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (kaldi::quasar::EspressoV2Plan *)*((_QWORD *)v3 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
      if (v5 == (kaldi::quasar::EspressoV2Plan *)((char *)this + 232))
        goto LABEL_12;
    }
LABEL_18:
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Espresso V2 failure: ", 21);
    v9 = strlen(last_error_message);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)last_error_message, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
LABEL_12:
  if (*((_QWORD *)this + 31))
  {
    if (e5rt_execution_stream_release())
      goto LABEL_18;
    *((_QWORD *)this + 31) = 0;
  }
  if (*((_QWORD *)this + 32))
  {
    e5rt_precompiled_compute_op_create_options_release();
    *((_QWORD *)this + 32) = 0;
  }
  std::__tree<std::string>::destroy((uint64_t)this + 224, *((char **)this + 29));
  kaldi::quasar::EspressoV2NetworkConfig::~EspressoV2NetworkConfig((void **)this + 1);
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::quasar::EspressoV2Plan::~EspressoV2Plan(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::EspressoV2Plan::LoadNetworkMil(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t *a5)
{
  int v10;
  unsigned __int16 **v11;
  BOOL v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v27[34];
  uint64_t v28;

  v28 = 0;
  if (a3)
    v10 = 2;
  else
    v10 = 0;
  v11 = (unsigned __int16 **)(a1 + 120);
  if (kaldi::quasar::compileWithProgramLibrary(a2, (unsigned __int16 **)(a1 + 120), &v28, v10, a5))
    v12 = v28 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    v17 = kaldi::quasar::EspressoV2Plan::LoadNetworkWithProgramLibrary(a1, &v28, a4);
    e5rt_program_library_release();
    if (v17)
      return;
    if (a3)
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Compilation not loadable for v2 model: ", 39);
        v18 = *(char *)(a2 + 23);
        if (v18 >= 0)
          v15 = a2;
        else
          v15 = *(_QWORD *)a2;
        if (v18 >= 0)
          v16 = *(unsigned __int8 *)(a2 + 23);
        else
          v16 = *(_QWORD *)(a2 + 8);
LABEL_26:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
        return;
      }
      return;
    }
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Loading not successful, starting forced recompilation for v2 model: ", 68);
      v20 = *(char *)(a2 + 23);
      if (v20 >= 0)
        v21 = a2;
      else
        v21 = *(_QWORD *)a2;
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(a2 + 23);
      else
        v22 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v27);
    }
    v28 = 0;
    if (kaldi::quasar::compileWithProgramLibrary(a2, v11, &v28, 1, a5) && v28)
    {
      v23 = kaldi::quasar::EspressoV2Plan::LoadNetworkWithProgramLibrary(a1, &v28, a4);
      e5rt_program_library_release();
      if (v23)
        return;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Loading not successful for v2 model: ", 37);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v26, a2);
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Forced recompilation not successful for v2 model: ", 50);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v25, a2);
    }
LABEL_40:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Compilation not successful for v2 model: ", 41);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24, a2);
    goto LABEL_40;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Compilation not yet done for v2 model: ", 39);
    v14 = *(char *)(a2 + 23);
    if (v14 >= 0)
      v15 = a2;
    else
      v15 = *(_QWORD *)a2;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a2 + 23);
    else
      v16 = *(_QWORD *)(a2 + 8);
    goto LABEL_26;
  }
}

void sub_1ADF0A6AC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_1ADF0A6E0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  JUMPOUT(0x1ADF0A6ECLL);
}

BOOL kaldi::quasar::EspressoV2Plan::LoadNetworkWithProgramLibrary(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  int precompiled_compute_operation_with_options;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  const char *v15;
  _QWORD *v16;
  size_t v17;
  _QWORD *v18;
  const char *last_error_message;
  _QWORD *v20;
  size_t v21;
  _QWORD *v22;
  __int128 *v23[34];

  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    if (*a2)
    {
      v5 = (uint64_t **)(a1 + 224);
      while (!e5rt_program_library_retain_program_function()
           && !e5rt_precompiled_compute_op_create_options_create_with_program_function())
      {
        e5rt_program_function_release();
        v23[0] = (__int128 *)v3;
        std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (const void **)v3, (uint64_t)&std::piecewise_construct, v23);
        precompiled_compute_operation_with_options = e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options();
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
          v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Loaded v2 model function '", 26);
          v8 = *(char *)(v3 + 23);
          if (v8 >= 0)
            v9 = v3;
          else
            v9 = *(_QWORD *)v3;
          if (v8 >= 0)
            v10 = *(unsigned __int8 *)(v3 + 23);
          else
            v10 = *(_QWORD *)(v3 + 8);
          v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"', status: ", 11);
          std::ostream::operator<<();
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v23);
        }
        if ((precompiled_compute_operation_with_options & 0xFFFFFFFB) == 9)
          return 0;
        if (precompiled_compute_operation_with_options)
          goto LABEL_35;
        v3 += 24;
        if (v3 == v4)
          return 1;
      }
      goto LABEL_35;
    }
LABEL_32:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "e5ProgramLibrary != NULL");
    goto LABEL_33;
  }
  if (!*(_QWORD *)(a1 + 256))
  {
    if (!*a2)
      goto LABEL_32;
    if (e5rt_program_library_retain_program_function()
      || e5rt_precompiled_compute_op_create_options_create_with_program_function())
    {
      last_error_message = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Espresso V2 failure: ", 21);
      v21 = strlen(last_error_message);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)last_error_message, v21);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "\n");
LABEL_33:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
    }
    e5rt_program_function_release();
  }
  v12 = e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options();
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Loaded v2 model, status: ", 25);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v23);
  }
  if (v12 > 0xD || ((1 << v12) & 0x2201) == 0)
  {
LABEL_35:
    v15 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Espresso V2 failure: ", 21);
    v17 = strlen(v15);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v15, v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "\n");
    goto LABEL_33;
  }
  return (v12 & 0xFFFFFFFB) != 9;
}

void sub_1ADF0AB48(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::EspressoV2Plan::LoadNetworkBundle(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  uint64_t i;
  size_t v12;
  std::string *p_p;
  const void *v14;
  int precompiled_compute_operation;
  const char *last_error_message;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::string *v21;
  unint64_t v22;
  __int128 *v23;
  std::string __p;
  uint64_t v25;
  __int128 v26[15];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v4 = *a3;
  v5 = a3[1];
  if (*a3 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "main");
    v25 = a1 + 216;
    std::vector<std::pair<std::string,e5rt_execution_stream_operation **>>::__assign_with_size[abi:ne180100]<std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **> const*>((uint64_t)&v20, &__p, v26, 1uLL);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v10 = v21;
  }
  else
  {
    v6 = (uint64_t **)(a1 + 224);
    do
    {
      v23 = (__int128 *)v4;
      v7 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)v4, (uint64_t)&std::piecewise_construct, &v23)+ 7;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
      v8 = v21;
      if ((unint64_t)v21 >= v22)
      {
        v10 = (std::string *)std::vector<std::pair<std::string,e5rt_execution_stream_operation **>>::__emplace_back_slow_path<std::string const&,e5rt_execution_stream_operation **>(&v20, (__int128 *)v4, &__p);
      }
      else
      {
        if (*(char *)(v4 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
          v7 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          v9 = *(_OWORD *)v4;
          v21->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
        }
        v8[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
        v10 = (std::string *)((char *)v8 + 32);
      }
      v21 = v10;
      v4 += 24;
    }
    while (v4 != v5);
  }
  for (i = v20; (std::string *)i != v10; i += 32)
  {
    if (*(char *)(i + 23) >= 0)
      v12 = *(unsigned __int8 *)(i + 23);
    else
      v12 = *(_QWORD *)(i + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v12 + 5);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v12)
    {
      if (*(char *)(i + 23) >= 0)
        v14 = (const void *)i;
      else
        v14 = *(const void **)i;
      memmove(p_p, v14, v12);
    }
    strcpy((char *)p_p + v12, " esop");
    precompiled_compute_operation = e5rt_execution_stream_operation_create_precompiled_compute_operation();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (precompiled_compute_operation)
    {
      last_error_message = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Espresso V2 failure: ", 21);
      v18 = strlen(last_error_message);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)last_error_message, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1ADF0AE64(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADF0AEACLL);
}

void sub_1ADF0AE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2Plan::ReduceEngineMemoryUsage(kaldi::quasar::EspressoV2Plan *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  const char *last_error_message;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD v10[34];

  *((_BYTE *)this + 264) = 0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    atomic_store(0, (unsigned __int8 *)(v2 + 8));
  if (!*((_BYTE *)this + 40) && *((_QWORD *)this + 32))
  {
    v3 = (_QWORD *)((char *)this + 216);
    if (*((_QWORD *)this + 27))
    {
      if (e5rt_execution_stream_operation_release())
        goto LABEL_14;
      *v3 = 0;
    }
    v5 = *((_QWORD *)this + 31);
    v4 = (_QWORD *)((char *)this + 248);
    if (!v5)
      goto LABEL_12;
    if (!e5rt_execution_stream_release())
    {
      *v4 = 0;
LABEL_12:
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unloaded v2 model to reduce memory", 34);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v10);
      }
      return;
    }
LABEL_14:
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Espresso V2 failure: ", 21);
    v8 = strlen(last_error_message);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)last_error_message, v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
}

void sub_1ADF0B024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2Plan::CreateData()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented CreateData from const std::vector<int32> &v");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented CreateData from const std::vector<float> &v");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented CreateData from const CuMatrixBase<BaseFloat> &m");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented CreateData from const MatrixBase<BaseFloat> &m");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::EspressoV2Plan::CreateZeroedDataInt32()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented CreateZeroedDataInt32 from const std::vector<int64> &dim_sizes");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::EspressoV2Plan::CreateZeroedDataFloat(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  void *__dst[3];

  std::vector<unsigned long>::vector(__dst, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != *(_QWORD *)a1)
    memmove(__dst[0], *(const void **)a1, v4 - *(_QWORD *)a1);
  v5 = (_QWORD *)operator new();
  kaldi::quasar::EspressoV2TensorData::EspressoV2TensorData(v5);
  *a2 = v5;
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
}

void sub_1ADF0B208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1AF44D190](v11, 0x10B3C40ACDA1BA3);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2Plan::CreateZeroedDataFloat16(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  void *__p;
  void *v8;
  uint64_t v9;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>((char *)&__p, v4, v3, v5);
  v6 = (_QWORD *)operator new();
  kaldi::quasar::EspressoV2TensorData::EspressoV2TensorData(v6);
  *a2 = v6;
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_1ADF0B2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1AF44D190](v11, 0x10B3C40ACDA1BA3);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2Plan::CopyFloat16(kaldi::quasar::EspressoV2Plan *this, const kaldi::quasar::ComputeEngineBufferItf *a2, kaldi::quasar::ComputeEngineBufferItf *a3)
{
  uint64_t v6;
  uint64_t result;
  const char *last_error_message;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  const char *v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD v16[36];

  if (a2
  {
    v6 = 0;
  }
  else
  {
    kaldi::quasar::ComputeEngineItf::CreateCopyFloat(this, a2, v16);
    v6 = v16[0];
  }
  v16[34] = 0;
  v16[35] = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Espresso V2 failure: ", 21);
    v10 = strlen(last_error_message);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)last_error_message, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (!a3
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Target type must match engine!", 30);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  result = e5rt_tensor_utils_cast_from_fp32_to_fp16();
  if ((_DWORD)result)
  {
    v12 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Espresso V2 failure: ", 21);
    v14 = strlen(v12);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v12, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void sub_1ADF0B4F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::EspressoV2Plan::CreateCopyFloat16@<X0>(kaldi::quasar::EspressoV2Plan *this@<X0>, const kaldi::quasar::ComputeEngineBufferItf *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  uint64_t result;
  const char *last_error_message;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  const char *v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;

  if (a2
  {
    v6 = 0;
  }
  else
  {
    kaldi::quasar::ComputeEngineItf::CreateCopyFloat(this, a2, &__p);
    v6 = __p;
  }
  v19 = 0;
  v20 = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Espresso V2 failure: ", 21);
    v10 = strlen(last_error_message);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)last_error_message, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  v17 = 0;
  v18 = 0;
  __p = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&__p, v20, &v20[v19], v19);
  kaldi::quasar::EspressoV2Plan::CreateZeroedDataFloat16((uint64_t **)&__p, a3);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  result = e5rt_tensor_utils_cast_from_fp32_to_fp16();
  if ((_DWORD)result)
  {
    v12 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Espresso V2 failure: ", 21);
    v14 = strlen(v12);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v12, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  if (v6)
    return (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void sub_1ADF0B6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  *v11 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2Plan::CreateCopyFloat32@<X0>(const kaldi::quasar::ComputeEngineBufferItf *lpsrc@<X1>, _QWORD *a2@<X8>)
{
  uint64_t result;
  const char *last_error_message;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  const char *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  void *__p;
  void *v14;
  uint64_t v15;

  if (!lpsrc
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "EspressoV2TensorData expected");
    goto LABEL_9;
  }
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Espresso V2 failure: ", 21);
    v7 = strlen(last_error_message);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)last_error_message, v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "\n");
LABEL_9:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  v14 = 0;
  v15 = 0;
  __p = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&__p, 0, 0, 0);
  kaldi::quasar::EspressoV2Plan::CreateZeroedDataFloat((uint64_t)&__p, a2);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  result = e5rt_tensor_utils_cast_from_fp16_to_fp32();
  if ((_DWORD)result)
  {
    v9 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Espresso V2 failure: ", 21);
    v11 = strlen(v9);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v9, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  return result;
}

void kaldi::quasar::EspressoV2Plan::CreateConcat()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented CreateConcat");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::EspressoV2Plan::CreateSplit(kaldi::quasar::EspressoV2Plan *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  _QWORD v2[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Not implemented CreateSplit");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::EspressoV2Plan::CreateSlice(kaldi::quasar::EspressoV2Plan *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  _QWORD v2[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Not implemented CreateSlice");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::EspressoV2Plan::PrepareInputsAndOutputs(uint64_t a1, uint64_t a2, const std::string **a3, const std::string **a4, uint64_t **a5, int a6)
{
  const std::string *v10;
  const std::string *v11;
  std::string::pointer data;
  std::string *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  const std::string *v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  unsigned __int8 *v21;
  const std::string *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *size;
  int v26;
  const void **v27;
  const std::string *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  const std::string *v35;
  const std::string *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  int64x2_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64x2_t v57;
  char *v58;
  _QWORD *v59;

  v10 = *a3;
  v11 = a3[1];
  if (*a3 != v11)
  {
    do
    {
      data = v10[1].__r_.__value_.__l.__data_;
      if (!data
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v56, "Unsupported input cast: %s");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v56);
      }
      kaldi::quasar::EspressoV2TensorData::BindToInput(v13, a2, v10, a6);
      v10 = (const std::string *)((char *)v10 + 32);
    }
    while (v10 != v11);
  }
  if (a5)
  {
    v14 = *a5;
    v15 = a5[1];
    v16 = v15 - *a5;
    v17 = *a4;
    if (v16 == 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3))
    {
      if (v15 == v14)
      {
LABEL_43:
        v35 = *a4;
        v36 = a4[1];
        if (*a4 != v36)
        {
          do
          {
            kaldi::quasar::EspressoV2TensorData::CreateAndBindToOutput(v35, &v55);
            v38 = a5[1];
            v37 = (unint64_t)a5[2];
            if ((unint64_t)v38 >= v37)
            {
              v41 = v38 - *a5;
              if ((unint64_t)(v41 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v42 = v37 - (_QWORD)*a5;
              v43 = v42 >> 2;
              if (v42 >> 2 <= (unint64_t)(v41 + 1))
                v43 = v41 + 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                v44 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v44 = v43;
              v59 = a5 + 2;
              if (v44)
                v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a5 + 2), v44);
              else
                v45 = 0;
              v46 = (uint64_t *)&v45[8 * v41];
              v47 = &v45[8 * v44];
              v58 = v47;
              v48 = v55;
              v55 = 0;
              *v46 = v48;
              v40 = v46 + 1;
              v57.i64[1] = (uint64_t)(v46 + 1);
              v50 = *a5;
              v49 = a5[1];
              if (v49 == *a5)
              {
                v52 = vdupq_n_s64((unint64_t)v49);
              }
              else
              {
                do
                {
                  v51 = *--v49;
                  *v49 = 0;
                  *--v46 = v51;
                }
                while (v49 != v50);
                v52 = *(int64x2_t *)a5;
                v40 = (uint64_t *)v57.i64[1];
                v47 = v58;
              }
              *a5 = v46;
              a5[1] = v40;
              v57 = v52;
              v53 = a5[2];
              a5[2] = (uint64_t *)v47;
              v58 = (char *)v53;
              v56 = v52.i64[0];
              std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v56);
            }
            else
            {
              v39 = v55;
              v55 = 0;
              *v38 = v39;
              v40 = v38 + 1;
            }
            a5[1] = v40;
            v54 = v55;
            v55 = 0;
            if (v54)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
              v40 = a5[1];
            }
            kaldi::quasar::ComputeEngineBufferItf::SetName(*(v40 - 1), v35++);
          }
          while (v35 != v36);
        }
        return;
      }
      v18 = 0;
      if (v16 <= 1)
        v19 = 1;
      else
        v19 = v15 - *a5;
      while (1)
      {
        v20 = (const void *)v14[v18];
        if (!v20)
          break;
        if (!v21)
          break;
        v22 = &v17[v18];
        v23 = v21[79];
        if ((v23 & 0x80u) == 0)
          v24 = (unsigned __int8 *)v21[79];
        else
          v24 = (unsigned __int8 *)*((_QWORD *)v21 + 8);
        size = (unsigned __int8 *)HIBYTE(v22->__r_.__value_.__r.__words[2]);
        v26 = (char)size;
        if ((char)size < 0)
          size = (unsigned __int8 *)v22->__r_.__value_.__l.__size_;
        if (v24 != size)
          break;
        v27 = (const void **)(v21 + 56);
        if (v26 >= 0)
          v28 = &v17[v18];
        else
          v28 = (const std::string *)v22->__r_.__value_.__r.__words[0];
        if ((v23 & 0x80) != 0)
        {
          if (memcmp(*v27, v28, *((_QWORD *)v21 + 8)))
            break;
        }
        else if (v21[79])
        {
          while (*(unsigned __int8 *)v27 == v28->__r_.__value_.__s.__data_[0])
          {
            v27 = (const void **)((char *)v27 + 1);
            v28 = (const std::string *)((char *)v28 + 1);
            if (!--v23)
              goto LABEL_28;
          }
          break;
        }
LABEL_28:
        if (++v18 == v19)
          goto LABEL_36;
      }
    }
    if (v15 != v14)
    {
      do
      {
        v30 = *--v15;
        v29 = v30;
        *v15 = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
      while (v15 != v14);
      v15 = *a5;
    }
    v31 = v15;
    a5[1] = v14;
    v15 = v14;
    v14 = v31;
LABEL_36:
    if (v14 != v15)
    {
      if (a6)
      {
        v32 = 0;
        v33 = 0;
        do
        {
          v34 = (void *)v14[v33];
          if (v34)
          kaldi::quasar::EspressoV2TensorData::BindToOutput((uint64_t)v34, a2, &(*a4)[v32]);
          ++v33;
          v14 = *a5;
          ++v32;
        }
        while (v33 < a5[1] - *a5);
      }
      return;
    }
    goto LABEL_43;
  }
}

void sub_1ADF0BD88()
{
  __break(1u);
}

std::string *kaldi::quasar::EspressoV2TensorData::BindToInput(std::string *result, uint64_t a2, const std::string *a3, int a4)
{
  std::string *v5;
  const void **p_size;
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type size;
  int v11;
  const std::string *v12;
  std::string::value_type *i;
  const char *last_error_message;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD v24[34];

  v5 = result;
  if (!a4)
  {
    p_size = (const void **)&result[2].__r_.__value_.__l.__size_;
    v7 = result[3].__r_.__value_.__s.__data_[7];
    v8 = result[2].__r_.__value_.__r.__words[2];
    if ((v7 & 0x80u) == 0)
      v9 = result[3].__r_.__value_.__s.__data_[7];
    else
      v9 = result[2].__r_.__value_.__r.__words[2];
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    v11 = (char)size;
    if ((size & 0x80u) != 0)
      size = a3->__r_.__value_.__l.__size_;
    if (v9 == size)
    {
      if (v11 >= 0)
        v12 = a3;
      else
        v12 = (const std::string *)a3->__r_.__value_.__r.__words[0];
      if ((v7 & 0x80) != 0)
      {
        result = (std::string *)memcmp(*p_size, v12, result[2].__r_.__value_.__r.__words[2]);
        v9 = v8;
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (!result[3].__r_.__value_.__s.__data_[7])
          return result;
        for (i = &result[2].__r_.__value_.__s.__data_[8]; *i == v12->__r_.__value_.__s.__data_[0]; ++i)
        {
          v12 = (const std::string *)((char *)v12 + 1);
          if (!--v7)
            return result;
        }
      }
    }
    if (v9)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Cannot bind to ", 15);
      v19 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
      if (v19 >= 0)
        v20 = (uint64_t)a3;
      else
        v20 = a3->__r_.__value_.__r.__words[0];
      if (v19 >= 0)
        v21 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      else
        v21 = a3->__r_.__value_.__l.__size_;
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" due to existing binding to ", 28);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, (uint64_t)p_size);
LABEL_25:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
    }
  }
  if (e5rt_execution_stream_operation_retain_input_port()
    || e5rt_io_port_bind_buffer_object()
    || e5rt_io_port_release())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Espresso V2 failure: ", 21);
    v16 = strlen(last_error_message);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)last_error_message, v16);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "\n");
    goto LABEL_25;
  }
  return std::string::operator=((std::string *)((char *)v5 + 56), a3);
}

void sub_1ADF0C034(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

std::string *kaldi::quasar::EspressoV2TensorData::CreateAndBindToOutput@<X0>(const std::string *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const char *last_error_message;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  const char *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  const char *v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD v18[35];

  v18[34] = 0;
  if (e5rt_execution_stream_operation_retain_output_port())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Espresso V2 failure: ", 21);
    v8 = strlen(last_error_message);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)last_error_message, v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  v4 = operator new();
  kaldi::quasar::EspressoV2TensorData::EspressoV2TensorData((_QWORD *)v4);
  *a2 = v4;
  if (e5rt_io_port_bind_buffer_object())
  {
    v10 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Espresso V2 failure: ", 21);
    v12 = strlen(v10);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  if (e5rt_io_port_release())
  {
    v14 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Espresso V2 failure: ", 21);
    v16 = strlen(v14);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  return std::string::operator=((std::string *)(v4 + 56), a1);
}

void sub_1ADF0C228()
{
  uint64_t v0;

  MEMORY[0x1AF44D190](v0, 0x10B3C40ACDA1BA3);
  JUMPOUT(0x1ADF0C264);
}

std::string *kaldi::quasar::EspressoV2TensorData::BindToOutput(uint64_t a1, uint64_t a2, const std::string *a3)
{
  const char *last_error_message;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD v10[35];

  v10[34] = 0;
  if (e5rt_execution_stream_operation_retain_output_port()
    || e5rt_io_port_bind_buffer_object()
    || e5rt_io_port_release())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Espresso V2 failure: ", 21);
    v8 = strlen(last_error_message);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)last_error_message, v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return std::string::operator=((std::string *)(a1 + 56), a3);
}

void kaldi::quasar::EspressoV2Plan::Run(uint64_t a1, __int128 **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 *v9;
  __int128 *v10;
  void *v11;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void **v19;
  void **v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  std::string __p;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void **v29[5];

  v26 = 0;
  v27 = 0;
  v28 = 0;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      v11 = (void *)*((_QWORD *)v9 + 3);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v12 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      v25 = v11;
      v13 = v27;
      if (v27 >= v28)
      {
        v15 = (uint64_t)(v27 - v26) >> 5;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = v28 - v26;
        if ((uint64_t)(v28 - v26) >> 4 > v16)
          v16 = v17 >> 4;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
          v18 = 0x7FFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        v29[4] = (void **)&v28;
        v19 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v28, v18);
        v20 = &v19[4 * v15];
        v29[0] = v19;
        v29[1] = v20;
        v29[3] = &v19[4 * v21];
        v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v20[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)v20 = v22;
        memset(&__p, 0, sizeof(__p));
        v20[3] = v25;
        v29[2] = v20 + 4;
        std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v26, v29);
        v23 = v27;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v29);
        v27 = v23;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v27 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v13 = v14;
        memset(&__p, 0, sizeof(__p));
        *(_QWORD *)(v13 + 24) = v25;
        v27 = v13 + 32;
      }
      v9 += 2;
    }
    while (v9 != v10);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, &v26, a3, a4, a5);
  v29[0] = (void **)&v26;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v29);
}

void sub_1ADF0C5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2Plan::Run(uint64_t a1, const std::string **a2, const std::string **a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *last_error_message;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD v17[34];

  if (*(_QWORD *)(a1 + 216))
    goto LABEL_10;
  if (!*(_QWORD *)(a1 + 256))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "_main_builder != nullptr");
    goto LABEL_16;
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a1 + 48);
  if (e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Espresso V2 failure: ", 21);
    v15 = strlen(last_error_message);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)last_error_message, v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "\n");
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  v10 = *(_QWORD *)(a1 + 24);
  if (v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, a1 + 48);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Loaded v2 model during Run", 26);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v17);
  }
LABEL_10:
  if (!*(_BYTE *)(a1 + 264))
  {
    v11 = *(_QWORD *)(a1 + 24);
    if (v11)
      atomic_store(1u, (unsigned __int8 *)(v11 + 8));
    *(_BYTE *)(a1 + 264) = 1;
  }
  return kaldi::quasar::EspressoV2Plan::RunOp(a1, *(_QWORD *)(a1 + 216), a2, a3, (uint64_t)a5, a5);
}

void sub_1ADF0C77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_1ADF0C790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::quasar::EspressoV2Plan::RunOp(uint64_t a1, uint64_t a2, const std::string **a3, const std::string **a4, uint64_t a5, uint64_t **a6)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  const char *last_error_message;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD v17[34];

  v11 = (_QWORD *)(a1 + 248);
  v10 = *(_QWORD *)(a1 + 248);
  if (v10 && (v10 = e5rt_execution_stream_reset(), (_DWORD)v10)
    || (kaldi::quasar::EspressoV2Plan::PrepareInputsAndOutputs(v10, a2, a3, a4, a6, 0), !*v11)
    && e5rt_execution_stream_create()
    || e5rt_execution_stream_encode_operation()
    || (result = e5rt_execution_stream_execute_sync(), (_DWORD)result))
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Espresso V2 failure: ", 21);
    v15 = strlen(last_error_message);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)last_error_message, v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  return result;
}

void kaldi::quasar::EspressoV2Plan::RunFunction(uint64_t a1, __int128 *a2, __int128 **a3, const std::string **a4, uint64_t a5, uint64_t **a6)
{
  __int128 *v10;
  __int128 *v11;
  void *v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void **v20;
  void **v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  std::string __p;
  void *v26;
  const std::string *v27;
  unint64_t v28;
  unint64_t v29;
  void **v30[5];

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v10 = *a3;
  v11 = a3[1];
  if (*a3 != v11)
  {
    do
    {
      v12 = (void *)*((_QWORD *)v10 + 3);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v13 = *v10;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
      }
      v26 = v12;
      v14 = v28;
      if (v28 >= v29)
      {
        v16 = (uint64_t)(v28 - (_QWORD)v27) >> 5;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v18 = v29 - (_QWORD)v27;
        if ((uint64_t)(v29 - (_QWORD)v27) >> 4 > v17)
          v17 = v18 >> 4;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
          v19 = 0x7FFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        v30[4] = (void **)&v29;
        v20 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v29, v19);
        v21 = &v20[4 * v16];
        v30[0] = v20;
        v30[1] = v21;
        v30[3] = &v20[4 * v22];
        v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v21[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)v21 = v23;
        memset(&__p, 0, sizeof(__p));
        v21[3] = v26;
        v30[2] = v21 + 4;
        std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer((uint64_t *)&v27, v30);
        v24 = v28;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v30);
        v28 = v24;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v28 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v14 = v15;
        memset(&__p, 0, sizeof(__p));
        *(_QWORD *)(v14 + 24) = v26;
        v28 = v14 + 32;
      }
      v10 += 2;
    }
    while (v10 != v11);
  }
  kaldi::quasar::EspressoV2Plan::RunFunction(a1, a2, &v27, a4, a5, a6);
  v30[0] = (void **)&v27;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v30);
}

void sub_1ADF0CB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2Plan::RunFunction(uint64_t a1, __int128 *a2, const std::string **a3, const std::string **a4, uint64_t a5, uint64_t **a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  __int128 *v15[34];

  if (*(_QWORD *)(a1 + 216))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "Default function (main) set, use Run");
    goto LABEL_6;
  }
  v15[0] = a2;
  v11 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 224), (const void **)a2, (uint64_t)&std::piecewise_construct, v15)[7];
  if (!v11)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Function not found: ", 20);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14, (uint64_t)a2);
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  return kaldi::quasar::EspressoV2Plan::RunOp(a1, v11, a3, a4, v12, a6);
}

void kaldi::quasar::EspressoV2Plan::PrepareOpChain(_QWORD *a1@<X2>, uint64_t *a2@<X3>, const std::string **a3@<X4>, uint64_t **a4@<X6>, _QWORD *a5@<X7>, uint64_t a6@<X8>, _QWORD *a7, char a8)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 **v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  int v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  const std::string *v70;
  const std::string *v71;
  int v72;
  _QWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t size;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  const char *v82;
  _QWORD *v83;
  size_t v84;
  _QWORD *v85;
  const char *v86;
  _QWORD *v87;
  size_t v88;
  _QWORD *v89;
  const char *v90;
  _QWORD *v91;
  size_t v92;
  _QWORD *v93;
  const char *v94;
  _QWORD *v95;
  size_t v96;
  _QWORD *v97;
  const char *last_error_message;
  _QWORD *v99;
  size_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v104;
  std::string v106;
  uint64_t v107;
  uint64_t *v108[3];
  const std::string *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t **v112;
  __int128 *v113;
  __int128 *v114;
  __int128 *v115;
  unint64_t *v116;
  __int128 v117;
  char *v118;
  __int128 v119;
  uint64_t v120;
  char **v121;
  char *v122[2];

  v122[0] = 0;
  v122[1] = 0;
  v121 = v122;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&> const*,std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&> const*,std::insert_iterator<std::map<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>>(*a2, a2[1], (uint64_t)&v121, (uint64_t)v122, (uint64_t)&v112);
  v102 = a6;
  v119 = 0uLL;
  v120 = 0;
  v117 = 0uLL;
  v118 = 0;
  v11 = (uint64_t)std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<>((uint64_t *)&v119);
  v12 = *a1;
  if (a1[1] == *a1)
    goto LABEL_102;
  v13 = 0;
  v104 = a1;
  do
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Initializing model inference chain, position: ", 46);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112);
      v12 = *a1;
    }
    v109 = 0;
    v110 = 0;
    v111 = 0;
    memset(v108, 0, sizeof(v108));
    v14 = (__int128 **)(*a7 + 24 * v13);
    v15 = *v14;
    v16 = v14[1];
    while (v15 != v16)
    {
      v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v121, (const void **)v15);
      v17 = v11;
      if (v122 == (char **)v11)
      {
        v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(*((_QWORD *)&v119 + 1) - 24, (const void **)v15);
        if (*((_QWORD *)&v119 + 1) - 16 == v11)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
          v78 = *((char *)v15 + 23);
          if (v78 >= 0)
            v79 = (uint64_t)v15;
          else
            v79 = *(_QWORD *)v15;
          if (v78 >= 0)
            v80 = *((unsigned __int8 *)v15 + 23);
          else
            v80 = *((_QWORD *)v15 + 1);
          v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
        }
        v18 = *(_QWORD *)(v11 + 56);
        if (*((char *)v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
        }
        else
        {
          v19 = *v15;
          v106.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
          *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v19;
        }
        v107 = v18;
        v35 = v110;
        if (v110 >= v111)
        {
          v37 = (uint64_t)(v110 - (_QWORD)v109) >> 5;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v39 = v111 - (_QWORD)v109;
          if ((uint64_t)(v111 - (_QWORD)v109) >> 4 > v38)
            v38 = v39 >> 4;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0)
            v40 = 0x7FFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          v116 = &v111;
          v41 = (__int128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v111, v40);
          v42 = &v41[2 * v37];
          v112 = (uint64_t **)v41;
          v113 = v42;
          v115 = &v41[2 * v43];
          v44 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
          *((_QWORD *)v42 + 2) = *((_QWORD *)&v106.__r_.__value_.__l + 2);
          *v42 = v44;
          memset(&v106, 0, sizeof(v106));
          *((_QWORD *)v42 + 3) = v107;
          v114 = v42 + 2;
          std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer((uint64_t *)&v109, &v112);
          v45 = v110;
          v11 = std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v112);
          v110 = v45;
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v106.__r_.__value_.__l.__data_);
        }
        else
        {
          v36 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
          *(_QWORD *)(v110 + 16) = *((_QWORD *)&v106.__r_.__value_.__l + 2);
          *(_OWORD *)v35 = v36;
          memset(&v106, 0, sizeof(v106));
          *(_QWORD *)(v35 + 24) = v107;
          v110 = v35 + 32;
        }
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112, 5);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"  binding input to intermediate output: ", 40);
          v46 = *((char *)v15 + 23);
          if (v46 >= 0)
            v33 = (uint64_t)v15;
          else
            v33 = *(_QWORD *)v15;
          if (v46 >= 0)
            v34 = *((unsigned __int8 *)v15 + 23);
          else
            v34 = *((_QWORD *)v15 + 1);
          goto LABEL_48;
        }
      }
      else
      {
        if (*(char *)(v11 + 55) < 0)
          std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)(v11 + 32), *(_QWORD *)(v11 + 40));
        else
          v106 = *(std::string *)(v11 + 32);
        v107 = *(_QWORD *)(v17 + 56);
        v20 = v110;
        if (v110 >= v111)
        {
          v22 = (uint64_t)(v110 - (_QWORD)v109) >> 5;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v24 = v111 - (_QWORD)v109;
          if ((uint64_t)(v111 - (_QWORD)v109) >> 4 > v23)
            v23 = v24 >> 4;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
            v25 = 0x7FFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          v116 = &v111;
          v26 = (__int128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v111, v25);
          v27 = &v26[2 * v22];
          v112 = (uint64_t **)v26;
          v113 = v27;
          v115 = &v26[2 * v28];
          v29 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
          *((_QWORD *)v27 + 2) = *((_QWORD *)&v106.__r_.__value_.__l + 2);
          *v27 = v29;
          memset(&v106, 0, sizeof(v106));
          *((_QWORD *)v27 + 3) = v107;
          v114 = v27 + 2;
          std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer((uint64_t *)&v109, &v112);
          v30 = v110;
          v11 = std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v112);
          v110 = v30;
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v106.__r_.__value_.__l.__data_);
        }
        else
        {
          v21 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
          *(_QWORD *)(v110 + 16) = *((_QWORD *)&v106.__r_.__value_.__l + 2);
          *(_OWORD *)v20 = v21;
          memset(&v106, 0, sizeof(v106));
          *(_QWORD *)(v20 + 24) = v107;
          v110 = v20 + 32;
        }
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112, 5);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"  binding input to provided input: ", 35);
          v32 = *((char *)v15 + 23);
          if (v32 >= 0)
            v33 = (uint64_t)v15;
          else
            v33 = *(_QWORD *)v15;
          if (v32 >= 0)
            v34 = *((unsigned __int8 *)v15 + 23);
          else
            v34 = *((_QWORD *)v15 + 1);
LABEL_48:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112);
        }
      }
      v15 = (__int128 *)((char *)v15 + 24);
    }
    a1 = v104;
    if ((a8 & 1) != 0)
    {
      v47 = (char *)v117;
      if ((_QWORD)v117 != *((_QWORD *)&v117 + 1))
      {
        if (e5rt_execution_stream_operation_bind_dependent_events())
        {
          last_error_message = (const char *)e5rt_get_last_error_message();
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
          v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Espresso V2 failure: ", 21);
          v100 = strlen(last_error_message);
          v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)last_error_message, v100);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"\n", 1);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
        }
        v47 = (char *)*((_QWORD *)&v117 + 1);
      }
      if (v47 >= v118)
      {
        v49 = (uint64_t)&v47[-v117] >> 3;
        if ((unint64_t)(v49 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v50 = (uint64_t)&v118[-v117] >> 2;
        if (v50 <= v49 + 1)
          v50 = v49 + 1;
        if ((unint64_t)&v118[-v117] >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        if (v51)
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v118, v51);
        else
          v52 = 0;
        v53 = &v52[8 * v49];
        *(_QWORD *)v53 = 0;
        v48 = v53 + 8;
        v54 = (char *)*((_QWORD *)&v117 + 1);
        v55 = (char *)v117;
        if (*((_QWORD *)&v117 + 1) != (_QWORD)v117)
        {
          do
          {
            v56 = *((_QWORD *)v54 - 1);
            v54 -= 8;
            *((_QWORD *)v53 - 1) = v56;
            v53 -= 8;
          }
          while (v54 != v55);
          v54 = (char *)v117;
        }
        *(_QWORD *)&v117 = v53;
        *((_QWORD *)&v117 + 1) = v48;
        v118 = &v52[8 * v51];
        if (v54)
          operator delete(v54);
      }
      else
      {
        *(_QWORD *)v47 = 0;
        v48 = v47 + 8;
      }
      *((_QWORD *)&v117 + 1) = v48;
      if (e5rt_async_event_create())
      {
        v86 = (const char *)e5rt_get_last_error_message();
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Espresso V2 failure: ", 21);
        v88 = strlen(v86);
        v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v86, v88);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"\n", 1);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
      }
      v11 = e5rt_execution_stream_operation_bind_completion_event();
      if ((_DWORD)v11)
      {
        v94 = (const char *)e5rt_get_last_error_message();
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Espresso V2 failure: ", 21);
        v96 = strlen(v94);
        v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)v94, v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"\n", 1);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
      }
    }
    v57 = *(_QWORD *)(v12 + 8 * v13);
    if (((uint64_t)(v104[1] - *v104) >> 3) - 1 <= v13)
    {
      kaldi::quasar::EspressoV2Plan::PrepareInputsAndOutputs(v11, v57, &v109, a3, a4, 1);
      if (e5rt_execution_stream_encode_operation())
      {
        v82 = (const char *)e5rt_get_last_error_message();
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Espresso V2 failure: ", 21);
        v84 = strlen(v82);
        v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v82, v84);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"\n", 1);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
      }
      v70 = *a3;
      v71 = a3[1];
      if (*a3 != v71)
      {
        v72 = kaldi::g_kaldi_verbose_level;
        do
        {
          if (v72 >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112, 5);
            v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"  binding final output: ", 24);
            v74 = SHIBYTE(v70->__r_.__value_.__r.__words[2]);
            if (v74 >= 0)
              v75 = (uint64_t)v70;
            else
              v75 = v70->__r_.__value_.__r.__words[0];
            if (v74 >= 0)
              size = HIBYTE(v70->__r_.__value_.__r.__words[2]);
            else
              size = v70->__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, v75, size);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112);
            v72 = kaldi::g_kaldi_verbose_level;
          }
          ++v70;
        }
        while (v70 != v71);
      }
    }
    else
    {
      kaldi::quasar::EspressoV2Plan::PrepareInputsAndOutputs(v11, v57, &v109, (const std::string **)(*a5 + 24 * v13), v108, 1);
      if (e5rt_execution_stream_encode_operation())
      {
        v90 = (const char *)e5rt_get_last_error_message();
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Espresso V2 failure: ", 21);
        v92 = strlen(v90);
        v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)v90, v92);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\n", 1);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
      }
      std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<>((uint64_t *)&v119);
      v58 = *(_QWORD *)(*a5 + 24 * v13);
      if (*(_QWORD *)(*a5 + 24 * v13 + 8) != v58)
      {
        v59 = 0;
        v60 = 0;
        do
        {
          v61 = v108[0];
          v112 = (uint64_t **)(v58 + v59);
          v62 = std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(*((_QWORD *)&v119 + 1) - 24), (const void **)(v58 + v59), (uint64_t)&std::piecewise_construct, (__int128 **)&v112);
          v63 = v61[v60];
          v61[v60] = 0;
          v64 = v62[7];
          v62[7] = v63;
          if (v64)
            (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112, 5);
            v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"  storing intermediate output: ", 31);
            v66 = *(_QWORD *)(*a5 + 24 * v13) + v59;
            v67 = *(char *)(v66 + 23);
            if (v67 >= 0)
              v68 = *(_QWORD *)(*a5 + 24 * v13) + v59;
            else
              v68 = *(_QWORD *)v66;
            if (v67 >= 0)
              v69 = *(unsigned __int8 *)(v66 + 23);
            else
              v69 = *(_QWORD *)(v66 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, v68, v69);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v112);
          }
          ++v60;
          v58 = *(_QWORD *)(*a5 + 24 * v13);
          v59 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*a5 + 24 * v13 + 8) - v58) >> 3) > v60);
      }
    }
    v112 = v108;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
    v112 = (uint64_t **)&v109;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
    ++v13;
    v12 = *v104;
  }
  while (v13 < (uint64_t)(v104[1] - *v104) >> 3);
LABEL_102:
  *(_OWORD *)v102 = v119;
  *(_QWORD *)(v102 + 16) = v120;
  v120 = 0;
  v119 = 0uLL;
  *(_OWORD *)(v102 + 24) = v117;
  *(_QWORD *)(v102 + 40) = v118;
  v112 = (uint64_t **)&v119;
  std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  std::__tree<std::string>::destroy((uint64_t)&v121, v122[0]);
}

void sub_1ADF0D6EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADF0D768);
}

void sub_1ADF0D740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a28);
  JUMPOUT(0x1ADF0D768);
}

void sub_1ADF0D764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v27;

  a17 = (void **)&a22;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a25;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a17);
  v27 = *(void **)(v25 - 176);
  if (v27)
  {
    *(_QWORD *)(v25 - 168) = v27;
    operator delete(v27);
  }
  a17 = (void **)(v25 - 144);
  std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a17);
  std::__tree<std::string>::destroy(v25 - 120, *(char **)(v25 - 112));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<>(uint64_t *a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v14[5];

  v4 = a1[2];
  v2 = a1 + 2;
  v3 = v4;
  v5 = (_QWORD *)*(v2 - 1);
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v14[4] = v2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v2, v10);
    else
      v11 = 0;
    v12 = &v11[24 * v7];
    v14[0] = v11;
    v14[1] = v12;
    v14[3] = &v11[24 * v10];
    *((_QWORD *)v12 + 2) = 0;
    *((_QWORD *)v12 + 1) = 0;
    *(_QWORD *)v12 = v12 + 8;
    v14[2] = v12 + 24;
    std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, v14);
    v6 = (_QWORD *)a1[1];
    std::__split_buffer<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(v14);
  }
  else
  {
    v5[2] = 0;
    v5[1] = 0;
    *v5 = v5 + 1;
    v6 = v5 + 3;
    a1[1] = (uint64_t)(v5 + 3);
  }
  a1[1] = (uint64_t)v6;
  return v6 - 3;
}

void sub_1ADF0D8C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2Plan::RunOpChain(uint64_t a1, uint64_t a2, uint64_t *a3, const std::string **a4, uint64_t a5, uint64_t **a6, _QWORD *a7, _QWORD *a8)
{
  _QWORD *v14;
  uint64_t result;
  const char *v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  const char *last_error_message;
  _QWORD *v21;
  size_t v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[24];
  void *__p;
  void *v29;
  void **v30[34];

  v14 = (_QWORD *)(a1 + 248);
  if (*(_QWORD *)(a1 + 248))
  {
    if (e5rt_execution_stream_reset())
    {
LABEL_11:
      last_error_message = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Espresso V2 failure: ", 21);
      v22 = strlen(last_error_message);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)last_error_message, v22);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "\n");
LABEL_12:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
    }
    if (*v14)
      goto LABEL_5;
  }
  if (e5rt_execution_stream_create())
    goto LABEL_11;
LABEL_5:
  v24 = 0;
  v25 = 0;
  v26 = 0;
  std::vector<e5rt_execution_stream_operation *>::__init_with_size[abi:ne180100]<e5rt_execution_stream_operation **,e5rt_execution_stream_operation **>(&v24, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  kaldi::quasar::EspressoV2Plan::PrepareOpChain(&v24, a3, a4, a6, a7, (uint64_t)v27, a8, 0);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  v30[0] = (void **)v27;
  std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](v30);
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  result = e5rt_execution_stream_execute_sync();
  if ((_DWORD)result)
  {
    v16 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Espresso V2 failure: ", 21);
    v18 = strlen(v16);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v16, v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "\n");
    goto LABEL_12;
  }
  return result;
}

void sub_1ADF0DAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::vector<e5rt_async_event *>>::~pair(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v4 = (void **)a1;
  std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t kaldi::quasar::EspressoV2Chain::EspressoV2Chain(uint64_t a1, _QWORD **a2, __int128 **a3, uint64_t a4)
{
  _QWORD v8[35];

  *(_QWORD *)a1 = &off_1E5D330F0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::shared_ptr<kaldi::quasar::EspressoV2Plan>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::EspressoV2Plan>*,std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>((char *)(a1 + 8), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 32), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 5000;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"EspressoV2Chain must be initialized with at least one sub-net!", 62);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  if (a4)
    *(_QWORD *)(a1 + 192) = a4;
  return a1;
}

void sub_1ADF0DCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14)
{
  quasar::Bitmap *v14;
  _QWORD **v15;
  uint64_t v16;
  char **v17;
  _QWORD **v18;
  _QWORD **v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD **v22;

  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(v21, *v19);
  std::__tree<std::string>::destroy(v20, *v17);
  std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a10, *v18);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a11, *v15);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v16, *v22);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  a14 = a12;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  quasar::Bitmap::~Bitmap(v14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2Chain::~EspressoV2Chain(kaldi::quasar::EspressoV2Chain *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;
  kaldi::quasar::EspressoV2Chain *v8;
  _QWORD *v9;
  _QWORD *v10;
  kaldi::quasar::EspressoV2Chain *v11;
  kaldi::quasar::EspressoV2Chain *v12;
  const char *last_error_message;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  void **v17[34];

  *(_QWORD *)this = &off_1E5D330F0;
  v2 = (char *)this + 136;
  v3 = (char *)this + 128;
  v4 = (char *)*((_QWORD *)this + 16);
  if (v4 != (char *)this + 136)
  {
    while (!*((_QWORD *)v4 + 7) || !e5rt_execution_stream_release())
    {
      v5 = (char *)*((_QWORD *)v4 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v4 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
      if (v6 == v2)
        goto LABEL_10;
    }
LABEL_25:
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Espresso V2 failure: ", 21);
    v15 = strlen(last_error_message);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)last_error_message, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
LABEL_10:
  v8 = (kaldi::quasar::EspressoV2Chain *)*((_QWORD *)this + 19);
  if (v8 != (kaldi::quasar::EspressoV2Chain *)((char *)this + 160))
  {
    do
    {
      v9 = (_QWORD *)*((_QWORD *)v8 + 7);
      v10 = (_QWORD *)*((_QWORD *)v8 + 8);
      while (v9 != v10)
      {
        if (*v9 && e5rt_async_event_release())
          goto LABEL_25;
        ++v9;
      }
      v11 = (kaldi::quasar::EspressoV2Chain *)*((_QWORD *)v8 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(kaldi::quasar::EspressoV2Chain **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (kaldi::quasar::EspressoV2Chain *)*((_QWORD *)v8 + 2);
          v7 = *(_QWORD *)v12 == (_QWORD)v8;
          v8 = v12;
        }
        while (!v7);
      }
      v8 = v12;
    }
    while (v12 != (kaldi::quasar::EspressoV2Chain *)((char *)this + 160));
  }
  if (*((_QWORD *)this + 22) && e5rt_async_event_release())
    goto LABEL_25;
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  std::__tree<std::string>::destroy((uint64_t)v3, *((char **)this + 17));
  std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 104, *((_QWORD **)this + 14));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  v17[0] = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v17);
  v17[0] = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v17);
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::quasar::EspressoV2Chain::~EspressoV2Chain(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::EspressoV2Chain::CreateData(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8));
}

{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 24))(**(_QWORD **)(a1 + 8));
}

{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
}

{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 40))(**(_QWORD **)(a1 + 8));
}

uint64_t kaldi::quasar::EspressoV2Chain::CreateZeroedDataInt32(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 48))(**(_QWORD **)(a1 + 8));
}

uint64_t kaldi::quasar::EspressoV2Chain::CopyFloat16(kaldi::quasar::EspressoV2Plan ***this, const kaldi::quasar::ComputeEngineBufferItf *a2, kaldi::quasar::ComputeEngineBufferItf *a3)
{
  return kaldi::quasar::EspressoV2Plan::CopyFloat16(*this[1], a2, a3);
}

uint64_t kaldi::quasar::EspressoV2Chain::CreateCopyFloat16@<X0>(kaldi::quasar::EspressoV2Plan ***this@<X0>, const kaldi::quasar::ComputeEngineBufferItf *a2@<X1>, _QWORD *a3@<X8>)
{
  return kaldi::quasar::EspressoV2Plan::CreateCopyFloat16(*this[1], a2, a3);
}

uint64_t kaldi::quasar::EspressoV2Chain::CreateConcat(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 96))(**(_QWORD **)(a1 + 8));
}

uint64_t kaldi::quasar::EspressoV2Chain::CreateSplit(kaldi::quasar::EspressoV2Chain *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  return (*(uint64_t (**)(_QWORD, const kaldi::quasar::ComputeEngineBufferItf *))(***((_QWORD ***)this + 1)
                                                                                          + 104))(**((_QWORD **)this + 1), a2);
}

uint64_t kaldi::quasar::EspressoV2Chain::CreateSlice(kaldi::quasar::EspressoV2Chain *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  return (*(uint64_t (**)(_QWORD, const kaldi::quasar::ComputeEngineBufferItf *))(***((_QWORD ***)this + 1)
                                                                                          + 112))(**((_QWORD **)this + 1), a2);
}

void kaldi::quasar::EspressoV2Chain::Run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, __p, a2, a3, a4, a5);
  if (v11 < 0)
    operator delete(__p[0]);
}

{
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "main");
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, __p, a2, a3, a4, a5);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_1ADF0E154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADF0E1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::EspressoV2Chain::RunFunction(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 *v10;
  __int128 *v11;
  void *v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void **v20;
  void **v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  std::string v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void **v31[5];

  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a3;
  v11 = a3[1];
  if (*a3 != v11)
  {
    do
    {
      v12 = (void *)*((_QWORD *)v10 + 3);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v13 = *v10;
        v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v13;
      }
      v27 = v12;
      v14 = v29;
      if (v29 >= v30)
      {
        v16 = (uint64_t)(v29 - v28) >> 5;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v18 = v30 - v28;
        if ((uint64_t)(v30 - v28) >> 4 > v17)
          v17 = v18 >> 4;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
          v19 = 0x7FFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        v31[4] = (void **)&v30;
        v20 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v30, v19);
        v21 = &v20[4 * v16];
        v31[0] = v20;
        v31[1] = v21;
        v31[3] = &v20[4 * v22];
        v23 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
        v21[2] = (void *)v26.__r_.__value_.__r.__words[2];
        *(_OWORD *)v21 = v23;
        memset(&v26, 0, sizeof(v26));
        v21[3] = v27;
        v31[2] = v21 + 4;
        std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v28, v31);
        v24 = v29;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v31);
        v29 = v24;
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
      }
      else
      {
        v15 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
        *(_QWORD *)(v29 + 16) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
        *(_OWORD *)v14 = v15;
        memset(&v26, 0, sizeof(v26));
        *(_QWORD *)(v14 + 24) = v27;
        v29 = v14 + 32;
      }
      v10 += 2;
    }
    while (v10 != v11);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, a2, &v28, a4, a5, a6);
  v31[0] = (void **)&v28;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v31);
}

void sub_1ADF0E3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  __p = &a18;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2Chain::PrepareIntermediates(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  std::vector<std::string> *v33;
  std::vector<std::string> *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::string *v38;
  std::string *v39;
  char **v40;
  char **v41;
  std::vector<std::string> *v42;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v45;
  std::string *v46;
  std::vector<std::string>::pointer begin;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  std::string *v52;
  std::string *v53;
  __int128 v54;
  std::vector<std::string> *v55;
  std::vector<std::string> *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::string *v60;
  std::string *v61;
  char **v62;
  char **v63;
  std::vector<std::string> *v64;
  std::string *v65;
  std::vector<std::string>::pointer v66;
  __int128 v67;
  std::string *v68;
  std::vector<std::string>::pointer v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  std::string *v74;
  std::string *v75;
  __int128 v76;
  const char *v77;
  _QWORD *v78;
  size_t v79;
  _QWORD *v80;
  const char *last_error_message;
  _QWORD *v82;
  size_t v83;
  _QWORD *v84;
  const char *v85;
  _QWORD *v86;
  size_t v87;
  _QWORD *v88;
  const char *v89;
  _QWORD *v90;
  size_t v91;
  _QWORD *v92;
  char *i;
  void *v95[2];
  std::string::size_type v96;
  unint64_t v97;
  void *__p[2];
  std::string::size_type v99;
  void *v100;
  char **v101;
  std::__split_buffer<std::string> __v;
  unint64_t v103;
  __int128 **v104;
  std::vector<std::string> *v105;
  unint64_t v106;
  __int128 **v107;
  std::vector<std::string> *v108;
  unint64_t v109;
  char *v110;
  char *v111;
  _QWORD v112[2];

  v110 = 0;
  v111 = 0;
  v112[0] = 0;
  v4 = *(char *)(a2 + 23);
  if (v4 < 0)
  {
    if (*(_QWORD *)(a2 + 8) != 4)
      goto LABEL_7;
    v5 = *(_DWORD **)a2;
  }
  else
  {
    v5 = (_DWORD *)a2;
    if (v4 != 4)
    {
LABEL_7:
      v6 = *(_QWORD **)(a1 + 8);
      v7 = *(_QWORD **)(a1 + 16);
      if (v6 != v7)
      {
        do
        {
          v8 = (uint64_t **)(*v6 + 224);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)a2;
          v9 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__v);
          v10 = v9;
          v11 = v111;
          if ((unint64_t)v111 >= v112[0])
          {
            v13 = (v111 - v110) >> 3;
            if ((unint64_t)(v13 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v14 = (uint64_t)(v112[0] - (_QWORD)v110) >> 2;
            if (v14 <= v13 + 1)
              v14 = v13 + 1;
            if (v112[0] - (_QWORD)v110 >= 0x7FFFFFFFFFFFFFF8uLL)
              v15 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v15 = v14;
            if (v15)
              v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v112, v15);
            else
              v16 = 0;
            v17 = &v16[8 * v13];
            *(_QWORD *)v17 = v10[7];
            v12 = v17 + 8;
            v19 = v110;
            v18 = v111;
            if (v111 != v110)
            {
              do
              {
                v20 = *((_QWORD *)v18 - 1);
                v18 -= 8;
                *((_QWORD *)v17 - 1) = v20;
                v17 -= 8;
              }
              while (v18 != v19);
              v18 = v110;
            }
            v110 = v17;
            v111 = v12;
            v112[0] = &v16[8 * v15];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *(_QWORD *)v111 = v9[7];
            v12 = v11 + 8;
          }
          v111 = v12;
          v6 += 2;
        }
        while (v6 != v7);
        goto LABEL_47;
      }
LABEL_46:
      v12 = 0;
      goto LABEL_47;
    }
  }
  if (*v5 != 1852399981)
    goto LABEL_7;
  v21 = *(uint64_t **)(a1 + 8);
  v22 = *(uint64_t **)(a1 + 16);
  if (v21 == v22)
    goto LABEL_46;
  v12 = 0;
  do
  {
    v23 = *v21;
    if ((unint64_t)v12 >= v112[0])
    {
      v24 = (v12 - v110) >> 3;
      if ((unint64_t)(v24 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v25 = (uint64_t)(v112[0] - (_QWORD)v110) >> 2;
      if (v25 <= v24 + 1)
        v25 = v24 + 1;
      if (v112[0] - (_QWORD)v110 >= 0x7FFFFFFFFFFFFFF8uLL)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v112, v26);
      else
        v27 = 0;
      v28 = &v27[8 * v24];
      *(_QWORD *)v28 = *(_QWORD *)(v23 + 216);
      v12 = v28 + 8;
      v30 = v110;
      v29 = v111;
      if (v111 != v110)
      {
        do
        {
          v31 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *((_QWORD *)v28 - 1) = v31;
          v28 -= 8;
        }
        while (v29 != v30);
        v29 = v110;
      }
      v110 = v28;
      v111 = v12;
      v112[0] = &v27[8 * v26];
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_QWORD *)v12 = *(_QWORD *)(v23 + 216);
      v12 += 8;
    }
    v111 = v12;
    v21 += 2;
  }
  while (v21 != v22);
LABEL_47:
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v32 = v110;
  for (i = v12; v32 != i; v32 += 8)
  {
    v33 = v105;
    if ((unint64_t)v105 >= v106)
    {
      v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v105 - (char *)v104) >> 3);
      v36 = v35 + 1;
      if (v35 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v106 - (_QWORD)v104) >> 3) > v36)
        v36 = 0x5555555555555556 * ((uint64_t)(v106 - (_QWORD)v104) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - (_QWORD)v104) >> 3) >= 0x555555555555555)
        v37 = 0xAAAAAAAAAAAAAAALL;
      else
        v37 = v36;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v106;
      if (v37)
        v38 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v106, v37);
      else
        v38 = 0;
      v39 = v38 + v35;
      __v.__first_ = v38;
      __v.__begin_ = v39;
      __v.__end_cap_.__value_ = &v38[v37];
      v39->__r_.__value_.__r.__words[0] = 0;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      __v.__end_ = v39 + 1;
      std::vector<std::vector<std::string>>::__swap_out_circular_buffer((uint64_t *)&v104, &__v);
      v34 = v105;
      std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)&__v.__first_);
    }
    else
    {
      v105->__begin_ = 0;
      v33->__end_ = 0;
      v34 = v33 + 1;
      v33->__end_cap_.__value_ = 0;
    }
    v105 = v34;
    v103 = 0;
    if (e5rt_execution_stream_operation_get_num_outputs())
    {
      last_error_message = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__v);
      v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)"Espresso V2 failure: ", 21);
      v83 = strlen(last_error_message);
      v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)last_error_message, v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"\n", 1);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__v);
    }
    std::vector<char const*>::vector(&v100, v103);
    if (e5rt_execution_stream_operation_get_output_names())
    {
      v77 = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__v);
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)"Espresso V2 failure: ", 21);
      v79 = strlen(v77);
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v77, v79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"\n", 1);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__v);
    }
    v41 = (char **)v100;
    v40 = v101;
    while (v41 != v40)
    {
      v42 = v105;
      std::string::basic_string[abi:ne180100]<0>(__p, *v41);
      value = v42[-1].__end_cap_.__value_;
      end = v42[-1].__end_;
      if (end >= value)
      {
        begin = v42[-1].__begin_;
        v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
        v49 = v48 + 1;
        if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
        if (2 * v50 > v49)
          v49 = 2 * v50;
        if (v50 >= 0x555555555555555)
          v51 = 0xAAAAAAAAAAAAAAALL;
        else
          v51 = v49;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v42[-1].__end_cap_;
        if (v51)
          v52 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v42[-1].__end_cap_, v51);
        else
          v52 = 0;
        v53 = v52 + v48;
        __v.__first_ = v52;
        __v.__begin_ = v53;
        __v.__end_cap_.__value_ = &v52[v51];
        v54 = *(_OWORD *)__p;
        v53->__r_.__value_.__r.__words[2] = v99;
        *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
        __p[1] = 0;
        v99 = 0;
        __p[0] = 0;
        __v.__end_ = v53 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(v42 - 1, &__v);
        v46 = v42[-1].__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      }
      else
      {
        v45 = *(_OWORD *)__p;
        end->__r_.__value_.__r.__words[2] = v99;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v45;
        __p[1] = 0;
        v99 = 0;
        __p[0] = 0;
        v46 = end + 1;
        v42[-1].__end_ = end + 1;
      }
      v42[-1].__end_ = v46;
      if (SHIBYTE(v99) < 0)
        operator delete(__p[0]);
      ++v41;
    }
    v55 = v108;
    if ((unint64_t)v108 >= v109)
    {
      v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (char *)v107) >> 3);
      v58 = v57 + 1;
      if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v109 - (_QWORD)v107) >> 3) > v58)
        v58 = 0x5555555555555556 * ((uint64_t)(v109 - (_QWORD)v107) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v109 - (_QWORD)v107) >> 3) >= 0x555555555555555)
        v59 = 0xAAAAAAAAAAAAAAALL;
      else
        v59 = v58;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v109;
      if (v59)
        v60 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v109, v59);
      else
        v60 = 0;
      v61 = v60 + v57;
      __v.__first_ = v60;
      __v.__begin_ = v61;
      __v.__end_cap_.__value_ = &v60[v59];
      v61->__r_.__value_.__r.__words[0] = 0;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      __v.__end_ = v61 + 1;
      std::vector<std::vector<std::string>>::__swap_out_circular_buffer((uint64_t *)&v107, &__v);
      v56 = v108;
      std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)&__v.__first_);
    }
    else
    {
      v108->__begin_ = 0;
      v55->__end_ = 0;
      v56 = v55 + 1;
      v55->__end_cap_.__value_ = 0;
    }
    v108 = v56;
    v97 = 0;
    if (e5rt_execution_stream_operation_get_num_inputs())
    {
      v89 = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__v);
      v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)"Espresso V2 failure: ", 21);
      v91 = strlen(v89);
      v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)v89, v91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"\n", 1);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__v);
    }
    std::vector<char const*>::vector(__p, v97);
    if (e5rt_execution_stream_operation_get_input_names())
    {
      v85 = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__v);
      v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)"Espresso V2 failure: ", 21);
      v87 = strlen(v85);
      v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)v85, v87);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"\n", 1);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__v);
    }
    v63 = (char **)__p[0];
    v62 = (char **)__p[1];
    if (__p[0] != __p[1])
    {
      do
      {
        v64 = v108;
        std::string::basic_string[abi:ne180100]<0>(v95, *v63);
        v65 = v64[-1].__end_cap_.__value_;
        v66 = v64[-1].__end_;
        if (v66 >= v65)
        {
          v69 = v64[-1].__begin_;
          v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)v69) >> 3);
          v71 = v70 + 1;
          if (v70 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v72 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65 - (char *)v69) >> 3);
          if (2 * v72 > v71)
            v71 = 2 * v72;
          if (v72 >= 0x555555555555555)
            v73 = 0xAAAAAAAAAAAAAAALL;
          else
            v73 = v71;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v64[-1].__end_cap_;
          if (v73)
            v74 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v64[-1].__end_cap_, v73);
          else
            v74 = 0;
          v75 = v74 + v70;
          __v.__first_ = v74;
          __v.__begin_ = v75;
          __v.__end_cap_.__value_ = &v74[v73];
          v76 = *(_OWORD *)v95;
          v75->__r_.__value_.__r.__words[2] = v96;
          *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
          v95[1] = 0;
          v96 = 0;
          v95[0] = 0;
          __v.__end_ = v75 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(v64 - 1, &__v);
          v68 = v64[-1].__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        }
        else
        {
          v67 = *(_OWORD *)v95;
          v66->__r_.__value_.__r.__words[2] = v96;
          *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
          v95[1] = 0;
          v96 = 0;
          v95[0] = 0;
          v68 = v66 + 1;
          v64[-1].__end_ = v66 + 1;
        }
        v64[-1].__end_ = v68;
        if (SHIBYTE(v96) < 0)
          operator delete(v95[0]);
        ++v63;
      }
      while (v63 != v62);
      v63 = (char **)__p[0];
    }
    if (v63)
    {
      __p[1] = v63;
      operator delete(v63);
    }
    if (v100)
    {
      v101 = (char **)v100;
      operator delete(v100);
    }
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIP31e5rt_execution_stream_operationNS_9allocatorIS5_EEEENS3_INS3_INS_12basic_stringIcNS_11char_traitsIcEENS6_IcEEEENS6_ISD_EEEENS6_ISF_EEEESH_EEC2B8ne180100IJLm0ELm1ELm2EEJS8_SH_SH_EJEJEJRS8_RSH_SL_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSN_IJDpT2_EEEDpOT3_(a3, (uint64_t)&v110, &v107, &v104);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v104;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v107;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
}

void sub_1ADF0ED24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  JUMPOUT(0x1ADF0EDF4);
}

void sub_1ADF0ED44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  JUMPOUT(0x1ADF0EE04);
}

void sub_1ADF0ED70()
{
  JUMPOUT(0x1ADF0EE04);
}

void sub_1ADF0ED78()
{
  JUMPOUT(0x1ADF0EE24);
}

void sub_1ADF0ED84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__pa, uint64_t a20,uint64_t a21,std::__split_buffer<std::wstring> *a22)
{
  if (SHIBYTE(a21) < 0)
    operator delete(__pa);
  JUMPOUT(0x1ADF0EDDCLL);
}

void sub_1ADF0EDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__split_buffer<std::wstring> *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a24);
  JUMPOUT(0x1ADF0EDC8);
}

void sub_1ADF0EDD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1ADF0EDF4);
}

void sub_1ADF0EDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  __p = (void *)(v22 - 160);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)(v22 - 160) = v22 - 136;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 160));
  v24 = *(void **)(v22 - 112);
  if (v24)
  {
    *(_QWORD *)(v22 - 104) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2Chain::RunFunction(uint64_t a1, uint64_t a2, uint64_t *a3, const std::string **a4, uint64_t a5, uint64_t **a6)
{
  uint64_t v10;
  uint64_t v11;
  void *__p;
  void *v13;
  uint64_t v14;
  std::string v15;
  _QWORD v16[3];
  _QWORD v17[3];
  void **v18;

  kaldi::quasar::EspressoV2Chain::PrepareIntermediates(a1, a2, &v15);
  v10 = **(_QWORD **)(a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  std::vector<e5rt_execution_stream_operation *>::__init_with_size[abi:ne180100]<e5rt_execution_stream_operation **,e5rt_execution_stream_operation **>(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_, (uint64_t)(v15.__r_.__value_.__l.__size_ - v15.__r_.__value_.__r.__words[0]) >> 3);
  kaldi::quasar::EspressoV2Plan::RunOpChain(v10, (uint64_t)&__p, a3, a4, v11, a6, v17, v16);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  v18 = (void **)v17;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v18);
  v18 = (void **)v16;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (v15.__r_.__value_.__r.__words[0])
  {
    v15.__r_.__value_.__l.__size_ = v15.__r_.__value_.__r.__words[0];
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1ADF0EF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  std::tuple<std::vector<e5rt_execution_stream_operation *>,std::vector<std::vector<std::string>>,std::vector<std::vector<std::string>>>::~tuple((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::vector<e5rt_execution_stream_operation *>,std::vector<std::vector<std::string>>,std::vector<std::vector<std::string>>>::~tuple(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 48);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 24);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void kaldi::quasar::EspressoV2Chain::PrepareRun(uint64_t a1, const void **a2, uint64_t *a3, const std::string **a4, uint64_t a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 *v14;
  __int128 *i;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  void *v31;
  const char *last_error_message;
  _QWORD *v33;
  size_t v34;
  _QWORD *v35;
  const char *v36;
  _QWORD *v37;
  size_t v38;
  _QWORD *v39;
  const std::string **v40;
  void *__p;
  void *v42;
  uint64_t v43;
  std::string v44;
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54[2];

  v11 = (uint64_t **)(a1 + 56);
  if (std::__tree<std::string>::__count_unique<std::string>(a1 + 56, a2)
    || std::__tree<std::string>::__count_unique<std::string>(a1 + 80, a2)
    || std::__tree<std::string>::__count_unique<std::string>(a1 + 128, a2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v50, "Rebinding buffers for EspressoV2Chain is not supported!");
    goto LABEL_31;
  }
  v40 = a4;
  *(_QWORD *)&v50 = a2;
  v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v50);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v12 + 7, a3);
  *(_QWORD *)&v50 = a2;
  v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 80), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v50);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v13 + 7, a6);
  *(_QWORD *)&v50 = a2;
  std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 128), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v50);
  if (e5rt_execution_stream_create())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Espresso V2 failure: ", 21);
    v34 = strlen(last_error_message);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)last_error_message, v34);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v35, "\n");
LABEL_31:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v50);
  }
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v14 = *(__int128 **)*a3;
  for (i = *(__int128 **)(*a3 + 8); v14 != i; v14 += 2)
  {
    v16 = *((_QWORD *)v14 + 3);
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v17 = *v14;
      v44.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
    }
    v45[0] = v16;
    v18 = v48;
    if (v48 >= v49)
    {
      v20 = (uint64_t)(v48 - v47) >> 5;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v22 = v49 - v47;
      if ((uint64_t)(v49 - v47) >> 4 > v21)
        v21 = v22 >> 4;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0)
        v23 = 0x7FFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      *((_QWORD *)&v52 + 1) = &v49;
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v49, v23);
      v25 = &v24[32 * v20];
      *(_QWORD *)&v50 = v24;
      *((_QWORD *)&v50 + 1) = v25;
      *(_QWORD *)&v52 = &v24[32 * v26];
      v27 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
      *((_QWORD *)v25 + 2) = *((_QWORD *)&v44.__r_.__value_.__l + 2);
      *(_OWORD *)v25 = v27;
      memset(&v44, 0, sizeof(v44));
      *((_QWORD *)v25 + 3) = v45[0];
      v51 = (uint64_t)(v25 + 32);
      std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v47, &v50);
      v28 = v48;
      std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v50);
      v48 = v28;
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
    }
    else
    {
      v19 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
      *(_QWORD *)(v48 + 16) = *((_QWORD *)&v44.__r_.__value_.__l + 2);
      *(_OWORD *)v18 = v19;
      memset(&v44, 0, sizeof(v44));
      *(_QWORD *)(v18 + 24) = v45[0];
      v48 = v18 + 32;
    }
  }
  kaldi::quasar::EspressoV2Chain::PrepareIntermediates(a1, (uint64_t)a2, &v44);
  v54[0] = (__int128 *)a2;
  std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 128), a2, (uint64_t)&std::piecewise_construct, v54);
  v42 = 0;
  v43 = 0;
  __p = 0;
  std::vector<e5rt_execution_stream_operation *>::__init_with_size[abi:ne180100]<e5rt_execution_stream_operation **,e5rt_execution_stream_operation **>(&__p, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_, (uint64_t)(v44.__r_.__value_.__l.__size_ - v44.__r_.__value_.__r.__words[0]) >> 3);
  kaldi::quasar::EspressoV2Plan::PrepareOpChain(&__p, &v47, v40, (uint64_t **)*a6, v46, (uint64_t)&v50, v45, 1);
  v54[0] = (__int128 *)a2;
  v29 = std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 104), a2, (uint64_t)&std::piecewise_construct, v54);
  v54[0] = (__int128 *)a2;
  v30 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 152), a2, (uint64_t)&std::piecewise_construct, v54);
  std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__vdeallocate((void **)v29 + 7);
  *(_OWORD *)(v29 + 7) = v50;
  v29[9] = v51;
  v31 = (void *)v30[7];
  v51 = 0;
  v50 = 0uLL;
  if (v31)
  {
    v30[8] = (uint64_t)v31;
    operator delete(v31);
    v30[7] = 0;
    v30[8] = 0;
    v30[9] = 0;
  }
  *(_OWORD *)(v30 + 7) = v52;
  v30[9] = v53;
  v53 = 0;
  v52 = 0uLL;
  v54[0] = &v50;
  std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  *(_QWORD *)&v50 = a2;
  std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 128), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v50);
  e5rt_execution_stream_prewire_in_use_allocations();
  if (!*(_QWORD *)(a1 + 176) && e5rt_async_event_create())
  {
    v36 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Espresso V2 failure: ", 21);
    v38 = strlen(v36);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v36, v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v50);
  }
  *(_QWORD *)&v50 = v46;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  *(_QWORD *)&v50 = v45;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  if (v44.__r_.__value_.__r.__words[0])
  {
    v44.__r_.__value_.__l.__size_ = v44.__r_.__value_.__r.__words[0];
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&v50 = &v47;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
}

void sub_1ADF0F4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::pair<std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::vector<e5rt_async_event *>>::~pair((uint64_t)&a27);
  JUMPOUT(0x1ADF0F4B4);
}

void sub_1ADF0F4C8()
{
  uint64_t v0;

  std::tuple<std::vector<e5rt_execution_stream_operation *>,std::vector<std::vector<std::string>>,std::vector<std::vector<std::string>>>::~tuple(&v0);
  JUMPOUT(0x1ADF0F510);
}

void sub_1ADF0F4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void **v31;
  uint64_t v32;

  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&a30);
  if (a20 < 0)
    operator delete(__p);
  v31 = (void **)&v32;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v31);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2Chain::RunFunction(uint64_t a1, __int128 *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  const char *last_error_message;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  __int128 *v14[34];

  v4 = (uint64_t **)(a1 + 152);
  v14[0] = a2;
  v5 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 152), (const void **)a2, (uint64_t)&std::piecewise_construct, v14);
  if (v5[7] == v5[8])
  {
    v14[0] = a2;
    std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 128), (const void **)a2, (uint64_t)&std::piecewise_construct, v14);
    result = e5rt_execution_stream_execute_sync();
    if ((_DWORD)result)
      goto LABEL_11;
  }
  else
  {
    ++*(_QWORD *)(a1 + 184);
    v14[0] = a2;
    v6 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (const void **)a2, (uint64_t)&std::piecewise_construct, v14);
    v7 = v6[7];
    v8 = v6[8];
    while (v7 != v8)
    {
      if (e5rt_async_event_set_active_future_value())
        goto LABEL_11;
      v7 += 8;
    }
    v14[0] = a2;
    std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 128), (const void **)a2, (uint64_t)&std::piecewise_construct, v14);
    if (e5rt_execution_stream_submit_async() || (result = e5rt_async_event_sync_wait(), (_DWORD)result))
    {
LABEL_11:
      last_error_message = (const char *)e5rt_get_last_error_message();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Espresso V2 failure: ", 21);
      v12 = strlen(last_error_message);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)last_error_message, v12);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "\n");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
    }
  }
  return result;
}

void sub_1ADF0F7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t ___ZN5kaldi6quasar15EspressoV2Chain11RunFunctionERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  char *last_error_message;
  _QWORD *v6;
  const char *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD v11[34];

  if (a4)
  {
    last_error_message = (char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Espresso V2 failure during async call: ", 39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, last_error_message);
    goto LABEL_6;
  }
  result = e5rt_async_event_signal();
  if ((_DWORD)result)
  {
    v7 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Espresso V2 failure: ", 21);
    v9 = strlen(v7);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v7, v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "\n");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return result;
}

void kaldi::quasar::EspressoV2TensorData::Copy(kaldi::quasar::EspressoV2TensorData *this)
{
  kaldi::quasar::EspressoV2TensorData *v2;

  v2 = (kaldi::quasar::EspressoV2TensorData *)operator new();
  kaldi::quasar::EspressoV2TensorData::EspressoV2TensorData(v2, this);
}

void sub_1ADF0F8E8()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = v1;
}

void sub_1ADF0F8FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40ACDA1BA3);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2TensorData::CopyToMatrix(kaldi::quasar::EspressoV2TensorData *a1, int32x2_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *last_error_message;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD v16[35];
  uint64_t *v17;

  v16[34] = 0;
  v17 = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Espresso V2 failure: ", 21);
    v14 = strlen(last_error_message);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)last_error_message, v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  v4 = *v17;
  v5 = v17[1];
  kaldi::Matrix<float>::Resize(a2, *v17, v5, 1, 0);
  kaldi::quasar::EspressoV2TensorData::GetDataFloat(a1);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      if (v5)
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = *(_QWORD *)a2 + 4 * a2[2].i32[0] * (int)i;
        do
        {
          *(_DWORD *)(v11 + (v9 >> 30)) = *(_DWORD *)(v6 + 4 * v10++);
          v9 += 0x100000000;
          v8 -= 4;
        }
        while (v5 != v10);
        v6 -= v8;
      }
    }
  }
}

uint64_t kaldi::quasar::EspressoV2TensorData::CopyToMatrix(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2 + 8);
}

float kaldi::quasar::EspressoV2TensorData::CopyToVector(kaldi::quasar::EspressoV2TensorData *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float result;
  const char *last_error_message;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD v13[36];

  kaldi::quasar::EspressoV2TensorData::GetDataFloat(a1);
  v4 = v3;
  v13[34] = 0;
  v13[35] = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Espresso V2 failure: ", 21);
    v11 = strlen(last_error_message);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)last_error_message, v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  kaldi::CuVector<float>::Resize(a2, 1, 1);
  v5 = 0;
  v6 = 0;
  v7 = *(_QWORD *)(a2 + 8);
  do
  {
    result = *(float *)(v4 + 4 * v6);
    *(float *)(v7 + (v5 >> 30)) = result;
    ++v6;
    v5 += 0x100000000;
  }
  while (v6 != 1);
  return result;
}

void kaldi::quasar::EspressoV2TensorData::CopyToStdVector(kaldi::quasar::EspressoV2TensorData *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  int *v16;
  int v17;
  const char *last_error_message;
  _QWORD *v19;
  size_t v20;
  _QWORD *v21;
  _QWORD v22[37];

  kaldi::quasar::EspressoV2TensorData::GetDataFloat(a1);
  v4 = v3;
  v22[34] = 0;
  v22[35] = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Espresso V2 failure: ", 21);
    v20 = strlen(last_error_message);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)last_error_message, v20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v21, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  v5 = *(int **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v6 = 0;
  v7 = (_QWORD *)(a2 + 16);
  do
  {
    v8 = (int)*(float *)(v4 + 4 * v6);
    if ((unint64_t)v5 >= *v7)
    {
      v10 = *(int **)a2;
      v11 = ((uint64_t)v5 - *(_QWORD *)a2) >> 2;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v13 = *v7 - (_QWORD)v10;
      if (v13 >> 1 > v12)
        v12 = v13 >> 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v14);
        v10 = *(int **)a2;
        v5 = *(int **)(a2 + 8);
      }
      else
      {
        v15 = 0;
      }
      v16 = (int *)&v15[4 * v11];
      *v16 = v8;
      v9 = v16 + 1;
      while (v5 != v10)
      {
        v17 = *--v5;
        *--v16 = v17;
      }
      *(_QWORD *)a2 = v16;
      *(_QWORD *)(a2 + 8) = v9;
      *(_QWORD *)(a2 + 16) = &v15[4 * v14];
      if (v10)
        operator delete(v10);
    }
    else
    {
      *v5 = v8;
      v9 = v5 + 1;
    }
    *(_QWORD *)(a2 + 8) = v9;
    ++v6;
    v5 = v9;
  }
  while (v6 != 1);
}

{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  const char *last_error_message;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  _QWORD v21[36];

  kaldi::quasar::EspressoV2TensorData::GetDataFloat(a1);
  v4 = v3;
  v21[34] = 0;
  v21[35] = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Espresso V2 failure: ", 21);
    v19 = strlen(last_error_message);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)last_error_message, v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  v5 = *(_DWORD **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v6 = 0;
  v7 = (_QWORD *)(a2 + 16);
  do
  {
    if ((unint64_t)v5 >= *v7)
    {
      v9 = *(_DWORD **)a2;
      v10 = ((uint64_t)v5 - *(_QWORD *)a2) >> 2;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v12 = *v7 - (_QWORD)v9;
      if (v12 >> 1 > v11)
        v11 = v12 >> 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v13);
        v9 = *(_DWORD **)a2;
        v5 = *(_DWORD **)(a2 + 8);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[4 * v10];
      *(_DWORD *)v15 = *(_DWORD *)(v4 + 4 * v6);
      v8 = v15 + 4;
      while (v5 != v9)
      {
        v16 = *--v5;
        *((_DWORD *)v15 - 1) = v16;
        v15 -= 4;
      }
      *(_QWORD *)a2 = v15;
      *(_QWORD *)(a2 + 8) = v8;
      *(_QWORD *)(a2 + 16) = &v14[4 * v13];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v5 = *(_DWORD *)(v4 + 4 * v6);
      v8 = v5 + 1;
    }
    *(_QWORD *)(a2 + 8) = v8;
    ++v6;
    v5 = v8;
  }
  while (v6 != 1);
}

uint64_t kaldi::quasar::EspressoV2TensorData::CopyFromImpl(kaldi::quasar::EspressoV2TensorData *this, const kaldi::quasar::ComputeEngineBufferItf *lpsrc)
{
  uint64_t result;
  const char *last_error_message;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  _QWORD v7[34];

  result = e5rt_tensor_utils_copy_tensor();
  if ((_DWORD)result)
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Espresso V2 failure: ", 21);
    v5 = strlen(last_error_message);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)last_error_message, v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return result;
}

void *kaldi::quasar::EspressoV2TensorData::FlatRangeCopy(kaldi::quasar::EspressoV2TensorData *this, const kaldi::quasar::ComputeEngineBufferItf *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[34];

  v9 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)a2 + 128))(a2);
  kaldi::quasar::EspressoV2TensorData::GetWritableDataFloat(this);
  if (a4 - a3 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "srcend - srcstart >= 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  return memcpy((void *)(v10 + 4 * a5), (const void *)(v9 + 4 * a3), 4 * (a4 - a3));
}

float kaldi::quasar::EspressoV2TensorData::FlatRangeCopy(kaldi::quasar::EspressoV2TensorData *this, int *a2, unsigned int a3, int a4)
{
  uint64_t v7;
  float result;
  float *v9;
  uint64_t v10;
  int v11;
  _QWORD v12[34];

  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "length >= 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  kaldi::quasar::EspressoV2TensorData::GetWritableDataFloat(this);
  if (a3)
  {
    v9 = (float *)(v7 + 4 * a4);
    v10 = a3;
    do
    {
      v11 = *a2++;
      result = (float)v11;
      *v9++ = (float)v11;
      --v10;
    }
    while (v10);
  }
  return result;
}

void *kaldi::quasar::EspressoV2TensorData::FlatRangeCopy(kaldi::quasar::EspressoV2TensorData *this, const float *a2, unsigned int a3, int a4)
{
  uint64_t v7;
  _QWORD v9[34];

  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "length >= 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  kaldi::quasar::EspressoV2TensorData::GetWritableDataFloat(this);
  return memcpy((void *)(v7 + 4 * a4), a2, 4 * a3);
}

float kaldi::quasar::EspressoV2TensorData::AssignScalar(kaldi::quasar::EspressoV2TensorData *this, int a2, int a3)
{
  float result;
  uint64_t v6;

  kaldi::quasar::EspressoV2TensorData::GetWritableDataFloat(this);
  result = (float)a2;
  *(float *)(v6 + 4 * a3) = (float)a2;
  return result;
}

void kaldi::quasar::EspressoV2TensorData::AssignScalar(kaldi::quasar::EspressoV2TensorData *this, float a2, int a3)
{
  uint64_t v5;

  kaldi::quasar::EspressoV2TensorData::GetWritableDataFloat(this);
  *(float *)(v5 + 4 * a3) = a2;
}

float kaldi::quasar::EspressoV2TensorData::GetFloatScalar(kaldi::quasar::EspressoV2TensorData *this, int a2)
{
  uint64_t v3;

  kaldi::quasar::EspressoV2TensorData::GetDataFloat(this);
  return *(float *)(v3 + 4 * a2);
}

void kaldi::quasar::EspressoV2TensorData::GetWritableDataFloat(kaldi::quasar::EspressoV2TensorData *this)
{
  _QWORD *v1;
  const char *last_error_message;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD v6[34];
  int v7;

  v7 = 0;
  if (e5rt_tensor_desc_dtype_get_component_dtype()
    || e5rt_tensor_desc_dtype_get_component_pack())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Espresso V2 failure: ", 21);
    v4 = strlen(last_error_message);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)last_error_message, v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "\n");
  }
  else
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Not implemented GetWritableDataFloat from non-E5RT_TENSOR_DESC_COMPONENT_DTYPE_FLOAT, non-fp32 types", 100);
    v1 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)", ", 2);
    std::ostream::operator<<();
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
}

void kaldi::quasar::EspressoV2TensorData::GetDataFloat(kaldi::quasar::EspressoV2TensorData *this)
{
  const char *last_error_message;
  _QWORD *v2;
  size_t v3;
  _QWORD *v4;
  _QWORD v5[34];
  int v6;

  v6 = 0;
  if (e5rt_tensor_desc_dtype_get_component_dtype())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Espresso V2 failure: ", 21);
    v3 = strlen(last_error_message);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)last_error_message, v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "\n");
  }
  else
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Not implemented GetDataFloat const from non-E5RT_TENSOR_DESC_COMPONENT_DTYPE_FLOAT types", 88);
    std::ostream::operator<<();
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
}

uint64_t kaldi::quasar::EspressoV2TensorData::GetNumDims(kaldi::quasar::EspressoV2TensorData *this)
{
  const char *last_error_message;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD v6[34];
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Espresso V2 failure: ", 21);
    v4 = strlen(last_error_message);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)last_error_message, v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return v7;
}

uint64_t kaldi::quasar::EspressoV2TensorData::GetDimSize(kaldi::quasar::EspressoV2TensorData *this, int a2)
{
  const char *last_error_message;
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD v8[35];
  uint64_t v9;

  v8[34] = 0;
  v9 = 0;
  if (e5rt_tensor_desc_get_shape())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Espresso V2 failure: ", 21);
    v6 = strlen(last_error_message);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)last_error_message, v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return *(_QWORD *)(v9 + 8 * a2);
}

void kaldi::quasar::EspressoV2TensorData::Reshape()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented TODO");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char [4],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

kaldi::quasar::EspressoV2NetworkConfig *kaldi::quasar::EspressoV2NetworkConfig::EspressoV2NetworkConfig(kaldi::quasar::EspressoV2NetworkConfig *this, const kaldi::quasar::EspressoV2NetworkConfig *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)this = off_1E5D33BC8;
  *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  v4 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 3) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  *(_QWORD *)this = &off_1E5D33C60;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v7;
  }
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 64), *((__int128 **)a2 + 8), *((__int128 **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 11, (const void ***)a2 + 11);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 112), *((__int128 **)a2 + 14), *((__int128 **)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 3));
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), *((const std::string::value_type **)a2 + 17), *((_QWORD *)a2 + 18));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 136);
    *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
    *(_OWORD *)((char *)this + 136) = v8;
  }
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 160), *((__int128 **)a2 + 20), *((__int128 **)a2 + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 3));
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 184), *((__int128 **)a2 + 23), *((__int128 **)a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 3));
  return this;
}

void sub_1ADF10A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v4, *(_QWORD **)(v2 + 96));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 63) < 0)
    operator delete(*v3);
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)v2);
  _Unwind_Resume(a1);
}

void sub_1ADF10AF8()
{
  JUMPOUT(0x1ADF10AD8);
}

_QWORD *kaldi::quasar::EspressoV2TensorData::EspressoV2TensorData(_QWORD *a1)
{
  _QWORD *v2;
  const char *last_error_message;
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  const char *v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  const char *v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD v16[34];

  v2 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  *v2 = &off_1E5D33950;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  if (e5rt_io_port_retain_tensor_desc())
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Espresso V2 failure: ", 21);
    v6 = strlen(last_error_message);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)last_error_message, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (e5rt_tensor_desc_retain_dtype())
  {
    v8 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Espresso V2 failure: ", 21);
    v10 = strlen(v8);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v8, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (e5rt_tensor_desc_alloc_buffer_object())
  {
    v12 = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Espresso V2 failure: ", 21);
    v14 = strlen(v12);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v12, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  return a1;
}

{
  _QWORD *v2;

  v2 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  *v2 = &off_1E5D33950;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  kaldi::quasar::EspressoV2TensorData::InitWithShape();
  return a1;
}

void sub_1ADF10CC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)v1);
  _Unwind_Resume(a1);
}

std::string *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIP31e5rt_execution_stream_operationNS_9allocatorIS5_EEEENS3_INS3_INS_12basic_stringIcNS_11char_traitsIcEENS6_IcEEEENS6_ISD_EEEENS6_ISF_EEEESH_EEC2B8ne180100IJLm0ELm1ELm2EEJS8_SH_SH_EJEJEJRS8_RSH_SL_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSN_IJDpT2_EEEDpOT3_(std::string *a1, uint64_t a2, __int128 ***a3, __int128 ***a4)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<e5rt_execution_stream_operation *>::__init_with_size[abi:ne180100]<e5rt_execution_stream_operation **,e5rt_execution_stream_operation **>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(a1 + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  a1[2].__r_.__value_.__r.__words[0] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  a1[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(a1 + 2, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (a4[1] - *a4));
  return a1;
}

void sub_1ADF10DA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

std::string *std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(std::string *result, __int128 **a2, __int128 **a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1ADF10E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2TensorData::EspressoV2TensorData(kaldi::quasar::EspressoV2TensorData *this, const kaldi::quasar::EspressoV2TensorData *a2)
{
  _QWORD *v2;
  _QWORD v3[34];

  v2 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(this);
  *v2 = &off_1E5D33950;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Copies of espressoV2 Tensors are not supported", 46);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
}

void sub_1ADF10EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,e5rt_execution_stream_operation **>>::__assign_with_size[abi:ne180100]<std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **> const*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  unint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **>*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,0>(__str, v15, v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **>*>(v8, (__int128 *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,quasar::EuclidNeighbor *,0>(__str, (std::string *)a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0)
        operator delete(*(void **)(v18 - 32));
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_1ADF11020(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADF11028(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **> const*,std::pair<std::string,e5rt_execution_stream_operation **>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      v4[1].__r_.__value_.__r.__words[0] = *((_QWORD *)v6 + 3);
      v6 += 2;
      v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::pair<std::string,e5rt_execution_stream_operation **>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1ADF110E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::pair<std::string,e5rt_execution_stream_operation **>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::pair<std::string,e5rt_execution_stream_operation **>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<std::pair<std::string,e5rt_execution_stream_operation **>>::__emplace_back_slow_path<std::string const&,e5rt_execution_stream_operation **>(uint64_t *a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[2];
  std::string *v18;
  char *v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v20 = a1 + 2;
  if (v11)
    v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[4 * v5];
  v17[0] = v12;
  v17[1] = v13;
  v18 = v13;
  v19 = (char *)&v12[4 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v13 = v18;
  }
  else
  {
    v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v12[4 * v5 + 3] = *a3;
  v18 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,e5rt_execution_stream_operation **>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1ADF11230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,e5rt_execution_stream_operation **>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,e5rt_execution_stream_operation **>>,std::reverse_iterator<std::pair<std::string,e5rt_execution_stream_operation **>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

void sub_1ADF113F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoV2TensorData::InitWithShape()
{
  uint64_t result;
  const char *last_error_message;
  _QWORD *v2;
  size_t v3;
  _QWORD *v4;
  _QWORD v5[34];

  if (e5rt_tensor_desc_dtype_create()
    || e5rt_tensor_desc_create()
    || (result = e5rt_tensor_desc_alloc_buffer_object(), (_DWORD)result))
  {
    last_error_message = (const char *)e5rt_get_last_error_message();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Espresso V2 failure: ", 21);
    v3 = strlen(last_error_message);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)last_error_message, v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "\n");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  return result;
}

char *std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADF115F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADF11668(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&> const*,std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&> const*,std::insert_iterator<std::map<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>>@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  double result;
  std::string __p;
  uint64_t v10;
  __int128 v11;

  v5 = a1;
  *(_QWORD *)&v11 = a3;
  *((_QWORD *)&v11 + 1) = a4;
  if (a1 != a2)
  {
    do
    {
      if (*(char *)(v5 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
      else
        __p = *(std::string *)v5;
      v10 = *(_QWORD *)(v5 + 24);
      std::insert_iterator<std::map<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::operator=[abi:ne180100]((uint64_t)&v11, (const void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v5 += 32;
    }
    while (v5 != a2);
    v5 = a2;
  }
  *(_QWORD *)a5 = v5;
  result = *(double *)&v11;
  *(_OWORD *)(a5 + 8) = v11;
  return result;
}

void sub_1ADF1172C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::insert_iterator<std::map<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<std::__value_type<std::string,BOOL *>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,BOOL *> const&>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy(i - 24, *(_QWORD **)(i - 16));
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1ADF11B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<e5rt_execution_stream_operation *>::__init_with_size[abi:ne180100]<e5rt_execution_stream_operation **,e5rt_execution_stream_operation **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADF11BD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::shared_ptr<kaldi::quasar::EspressoV2Plan>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::EspressoV2Plan>*,std::shared_ptr<kaldi::quasar::EspressoV2Plan>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADF11C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1ADF11E44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::vector<std::map<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 24;
        std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t quasar::EvaluationTask::EvaluationTask(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  const std::string::value_type *v8;
  _QWORD *v9;
  int v10;
  const std::string *v11;
  std::string::size_type size;
  uint64_t v13;
  char i;
  char v15;
  _QWORD *v16;
  int v17;
  const std::string *data;
  std::string::size_type v19;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *j;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  const std::string *v49;
  uint64_t v50;
  uint64_t v51;

  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = a4;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  kaldi::SplitStringToVector((const std::string *)a2, "-", 1, (uint64_t)&v49);
  if (v50 - (_QWORD)v49 != 48)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"invalid evaluation task specification ", 38);
    v29 = *(char *)(a2 + 23);
    if (v29 >= 0)
      v30 = a2;
    else
      v30 = *(_QWORD *)a2;
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(a2 + 23);
    else
      v31 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v32);
  }
  v7 = 0;
  v8 = "train";
  while (std::string::compare(v49, v8))
  {
    ++v7;
    v8 += 20;
    if (v7 == 4)
      goto LABEL_5;
  }
  *(_DWORD *)a1 = v7;
  if ((_DWORD)v7 == 4)
  {
LABEL_5:
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"invalid data specifier: ", 24);
    v10 = SHIBYTE(v49->__r_.__value_.__r.__words[2]);
    if (v10 >= 0)
      v11 = v49;
    else
      v11 = (const std::string *)v49->__r_.__value_.__r.__words[0];
    if (v10 >= 0)
      size = HIBYTE(v49->__r_.__value_.__r.__words[2]);
    else
      size = v49->__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, size);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v32);
  }
  v13 = 0;
  for (i = 1; ; i = 0)
  {
    v15 = i;
    if (!std::string::compare(v49 + 1, &quasar::EvaluationTask::metricOptions[20 * v13]))
      break;
    v13 = 1;
    if ((v15 & 1) == 0)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"invalid metric specifier: ", 26);
      v17 = SHIBYTE(v49[1].__r_.__value_.__r.__words[2]);
      if (v17 >= 0)
        data = v49 + 1;
      else
        data = (const std::string *)v49[1].__r_.__value_.__l.__data_;
      if (v17 >= 0)
        v19 = HIBYTE(v49[1].__r_.__value_.__r.__words[2]);
      else
        v19 = v49[1].__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)data, v19);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v32);
    }
  }
  *(_DWORD *)(a1 + 4) = v13;
  v20 = *(unsigned __int8 *)(a3 + 23);
  if ((v20 & 0x80u) != 0)
    v20 = *(_QWORD *)(a3 + 8);
  if (v20)
  {
    v21 = 0;
    for (j = "none"; std::string::compare((const std::string *)a3, j); j += 20)
    {
      if (++v21 == 3)
      {
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v32 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"invalid optimization specifier: ", 32);
        v24 = *(char *)(a3 + 23);
        if (v24 >= 0)
          v25 = a3;
        else
          v25 = *(_QWORD *)a3;
        if (v24 >= 0)
          v26 = *(unsigned __int8 *)(a3 + 23);
        else
          v26 = *(_QWORD *)(a3 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v32);
      }
    }
    *(_DWORD *)(a1 + 8) = v21;
  }
  *(_QWORD *)&v32 = &v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  return a1;
}

void sub_1ADF1223C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::EvaluationTask::printTask(quasar::EvaluationTask *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(&v11, &quasar::EvaluationTask::dataSetOptions[20 * *(unsigned int *)this]);
  v4 = std::string::append(&v11, "-");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, &quasar::EvaluationTask::metricOptions[20 * *((unsigned int *)this + 1)]);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1ADF12350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::EvaluationTask::optimizationPtree(quasar::EvaluationTask *this@<X0>, float a2@<S0>, quasar::PTree *a3@<X8>)
{
  quasar *v6;
  std::string __p;
  int Type;
  std::string v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14[2];
  char v15;

  quasar::PTree::PTree(a3);
  std::string::basic_string[abi:ne180100]<0>(v14, "select-based-on");
  quasar::EvaluationTask::printTask(this, &__p);
  quasar::PTree::PTree(&Type, &__p);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v14, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(v14[0]);
  std::string::basic_string[abi:ne180100]<0>(v14, "optimization-method");
  std::string::basic_string[abi:ne180100]<0>(&__p, &quasar::EvaluationTask::optimizeOptions[20 * *((unsigned int *)this + 2)]);
  quasar::PTree::PTree(&Type, &__p);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v14, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(v14[0]);
  v6 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v14, "best-weight");
  Type = quasar::getType(v6, a2);
  std::to_string(&v9, a2);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v14, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v15 < 0)
    operator delete(v14[0]);
}

void sub_1ADF12518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  quasar::PTree *v15;
  uint64_t v16;

  quasar::PTree::~PTree((quasar::PTree *)&a15);
  if (*(char *)(v16 - 33) < 0)
    operator delete(*(void **)(v16 - 56));
  quasar::PTree::~PTree(v15);
  _Unwind_Resume(a1);
}

uint64_t quasar::getFloatRangeFromSpecifier(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  int v11;
  float *v12;
  float i;
  float v14;
  float v15;
  unint64_t v16;
  float *v17;
  float *v18;
  float *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  float *v25;
  int v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  float *v45;
  float *v46;
  uint64_t v47;

  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  kaldi::SplitStringToFloats<float>(a1, ":", 1, &v45);
  if ((char *)v46 - (char *)v45 == 12)
  {
    v7 = v45[2];
    if (v7 <= *v45 || (v8 = v45[1], fabsf(v8) < 0.000001))
    {
      if (quasar::gLogLevel >= 2)
      {
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"weight list contains invalid range specification (should be e.g.\"0.0:0.2:10.0\")", 79);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v28);
      }
LABEL_16:
      v9 = 0;
      goto LABEL_42;
    }
    v10 = (float)(v7 - *v45) * 1000.0 / v8;
    v11 = (int)(floor(roundf(v10) * 0.001) + 1.0);
    if (v11 > a3)
    {
      if (quasar::gLogLevel >= 2)
      {
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"weight list range specification exceeds maximum number of weights: ", 67);
        std::ostream::operator<<();
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v28);
      }
      goto LABEL_16;
    }
    std::vector<float>::reserve((void **)a2, v11);
    v12 = v45;
    for (i = *v45; ; i = v15 + v45[1])
    {
      v14 = v12[2];
      if (i > v14
        && (COERCE_INT(fabs(i - v14)) > 2139095039 || fabsf(i - v14) > (float)((float)(fabsf(i) + fabsf(v14)) * 0.001)))
      {
        break;
      }
      if (i <= v14)
        v15 = i;
      else
        v15 = v12[2];
      v17 = *(float **)(a2 + 8);
      v16 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v17 >= v16)
      {
        v19 = *(float **)a2;
        v20 = ((uint64_t)v17 - *(_QWORD *)a2) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v22 = v16 - (_QWORD)v19;
        if (v22 >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v23);
          v19 = *(float **)a2;
          v17 = *(float **)(a2 + 8);
        }
        else
        {
          v24 = 0;
        }
        v25 = (float *)&v24[4 * v20];
        *v25 = v15;
        v18 = v25 + 1;
        while (v17 != v19)
        {
          v26 = *((_DWORD *)v17-- - 1);
          *((_DWORD *)v25-- - 1) = v26;
        }
        *(_QWORD *)a2 = v25;
        *(_QWORD *)(a2 + 8) = v18;
        *(_QWORD *)(a2 + 16) = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v17 = v15;
        v18 = v17 + 1;
      }
      *(_QWORD *)(a2 + 8) = v18;
      v12 = v45;
    }
  }
  else
  {
    kaldi::SplitStringToFloats<float>(a1, ",", 1, (_QWORD *)a2);
    if (a3 < (unint64_t)((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2))
    {
      if (quasar::gLogLevel >= 2)
      {
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"weight list should be comma-separated list of maximum size ", 59);
        std::ostream::operator<<();
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v28);
      }
      goto LABEL_16;
    }
  }
  v9 = 1;
LABEL_42:
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  return v9;
}

void sub_1ADF12950(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(_QWORD *)(v1 - 96) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::LmEvaluator::LmEvaluator(std::string *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  double Weight;
  clockid_t v14;
  std::string::size_type v15;
  std::string::size_type size;
  void **v17;
  std::string *v18;
  float *v19;
  std::string::size_type v20;
  uint64_t v21;
  unint64_t v22;
  std::string::size_type *v23;
  _OWORD *v24;
  std::string::size_type v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  std::string::size_type v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::pointer data;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  __int128 v39;
  std::string::pointer v40;
  char *v41;
  char *v42;
  std::string::size_type v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  std::string::size_type v50;
  std::string::pointer v51;
  std::string::size_type v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  char *v58;
  std::string::pointer v59;
  _QWORD *v60;
  void **v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void **v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  std::string::size_type v69;
  std::string::size_type v70;
  _DWORD *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _DWORD *v75;
  std::string::pointer v76;
  std::string::size_type v77;
  uint64_t v78;
  int v79;
  std::string::pointer v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  char *v92;
  std::string::size_type v93;
  int v94;
  char *v95;
  int v96;
  std::string::size_type v97;
  float *j;
  float v99;
  float v100;
  BOOL v101;
  float v102;
  BOOL v103;
  float *v104;
  unint64_t v105;
  unint64_t v106;
  float *v107;
  float *v108;
  float v109;
  std::string *v112;
  std::string *v113;
  float *v114;
  int64x2_t v115;
  std::string *v116;
  void *v117[2];
  __int128 v118;
  int v119;
  uint64_t v120[3];
  void *__p[2];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141[2];
  char v142;
  void *v143[2];
  uint64_t v144;
  std::string v145;
  std::string v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  std::string v150[64];
  std::string v151;

  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    v7 = *(_OWORD *)a4;
    this->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 16);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  v115 = vdupq_n_s64(0x4076800000000000uLL);
  *(int64x2_t *)&v150[0].__r_.__value_.__l.__data_ = v115;
  *(double *)&this[2].__r_.__value_.__l.__size_ = quasar::Location::getLatitude((quasar::Location *)v150);
  *(int64x2_t *)&v150[0].__r_.__value_.__l.__data_ = v115;
  Weight = quasar::corrective_reranking::VoiceEditingWFST::Path::getWeight((quasar::corrective_reranking::VoiceEditingWFST::Path *)v150);
  __asm { FMOV            V1.4S, #-1.0 }
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = _Q1;
  *(double *)&this[2].__r_.__value_.__r.__words[2] = Weight;
  LODWORD(this[3].__r_.__value_.__l.__data_) = 1;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__s.__data_[16] = 0;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = 0u;
  v116 = this + 4;
  v113 = this + 5;
  this[6].__r_.__value_.__r.__words[0] = 0x7FFFFFFF00000000;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = xmmword_1AE18D4A0;
  v114 = (float *)&this[6].__r_.__value_.__r.__words[1];
  LODWORD(this[7].__r_.__value_.__r.__words[2]) = -1082130432;
  this[9].__r_.__value_.__s.__data_[0] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)&this[8], v14);
  this[9].__r_.__value_.__l.__size_ = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    v15 = *(_QWORD *)(a3 + 8);
    if (v15)
    {
      std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)a3, v15);
      goto LABEL_10;
    }
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    v151 = *(std::string *)a3;
    goto LABEL_10;
  }
  std::string::basic_string[abi:ne180100]<0>(&v151, "lm-personalize.evaluator");
LABEL_10:
  v117[0] = 0;
  v117[1] = 0;
  *(_QWORD *)&v118 = 0;
  *(_OWORD *)__p = 0u;
  v122 = 0u;
  LODWORD(v123) = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v150, a2, (uint64_t *)v117, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v148 = 0;
  v147 = 0;
  v149 = 0;
  memset(&v146, 0, sizeof(v146));
  memset(&v145, 0, sizeof(v145));
  v143[1] = 0;
  v143[0] = 0;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(v141, "Dictation");
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v151.__r_.__value_.__r.__words[2]);
  else
    size = v151.__r_.__value_.__l.__size_;
  v112 = this + 1;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
  if ((SBYTE7(v122) & 0x80u) == 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if (size)
  {
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v151;
    else
      v18 = (std::string *)v151.__r_.__value_.__r.__words[0];
    memmove(v17, v18, size);
  }
  *(_WORD *)((char *)v17 + size) = 46;
  quasar::SystemConfig::setPrefix(v150, (const std::string *)__p);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "latitude");
  std::string::basic_string[abi:ne180100]<0>(v117, "Latitude used in evaluation");
  quasar::SystemConfig::Register<double>((uint64_t)v150, (const void **)__p, (uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)v117, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "longitude");
  std::string::basic_string[abi:ne180100]<0>(v117, "Longitude used in evaluation");
  quasar::SystemConfig::Register<double>((uint64_t)v150, (const void **)__p, (uint64_t)&this[2].__r_.__value_.__r.__words[2], (uint64_t)v117, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "evaluation-metrics");
  std::string::basic_string[abi:ne180100]<0>(v117, "List of metrics calculated during evaluation (e.g. dev-ppl, test-wer)");
  quasar::SystemConfig::Register<std::string>((uint64_t)v150, (const void **)__p, (uint64_t)&v146, (uint64_t)v117, 1, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "select-model-based-on");
  std::string::basic_string[abi:ne180100]<0>(v117, "Metric based on which the best model is selected (i.e. usually dev-ppl)");
  quasar::SystemConfig::Register<std::string>((uint64_t)v150, (const void **)__p, (uint64_t)&v145, (uint64_t)v117, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "optimization-method");
  std::string::basic_string[abi:ne180100]<0>(v117, "Method to find the best model: \"interpolation\"(default) or \"sweep-weights\"");
  quasar::SystemConfig::Register<std::string>((uint64_t)v150, (const void **)__p, (uint64_t)v143, (uint64_t)v117, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sweep-weights");
  std::string::basic_string[abi:ne180100]<0>(v117, "Range of interpolation weights tested with optimization \"sweep-weights\"");
  quasar::SystemConfig::Register<std::string>((uint64_t)v150, (const void **)__p, (uint64_t)&v147, (uint64_t)v117, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "min-audio");
  std::string::basic_string[abi:ne180100]<0>(v117, "Required number of audio files");
  quasar::SystemConfig::Register<int>((uint64_t)v150, (const void **)__p, (uint64_t)&this[6], (uint64_t)v117, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-audio");
  std::string::basic_string[abi:ne180100]<0>(v117, "Maximum number of audio files");
  quasar::SystemConfig::Register<int>((uint64_t)v150, (const void **)__p, (uint64_t)this[6].__r_.__value_.__r.__words + 4, (uint64_t)v117, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "remove-unk");
  std::string::basic_string[abi:ne180100]<0>(v117, "If true simply removes all OOVs from input");
  quasar::SystemConfig::Register<BOOL>((uint64_t)v150, (const void **)__p, (uint64_t)&this[3].__r_.__value_.__r.__words[2], (uint64_t)v117, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "min-weight");
  std::string::basic_string[abi:ne180100]<0>(v117, "If final weight <= this value, model will not be used");
  quasar::SystemConfig::Register<float>((uint64_t)v150, (const void **)__p, (uint64_t)v114, (uint64_t)v117, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-weight");
  std::string::basic_string[abi:ne180100]<0>(v117, "Weight will get clipped to this value when saving model");
  v19 = (float *)&this[6].__r_.__value_.__r.__words[1] + 1;
  quasar::SystemConfig::Register<float>((uint64_t)v150, (const void **)__p, (uint64_t)&this[6].__r_.__value_.__r.__words[1] + 4, (uint64_t)v117, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "min-pass-rate");
  std::string::basic_string[abi:ne180100]<0>(v117, "If >= 0: Fail the evaluation if ANY computeTextStats() call (1) returns failure OR (2) returns success but doesn't process enough utterances correctly to meet this threshold");
  quasar::SystemConfig::Register<float>((uint64_t)v150, (const void **)__p, (uint64_t)&this[6].__r_.__value_.__r.__words[2], (uint64_t)v117, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "min-unadapted-dev-ppl");
  std::string::basic_string[abi:ne180100]<0>(v117, "If >= 0: Model will not be used if this condition is not met");
  quasar::SystemConfig::Register<float>((uint64_t)v150, (const void **)__p, (uint64_t)&this[6].__r_.__value_.__r.__words[2] + 4, (uint64_t)v117, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-unadapted-dev-ppl");
  std::string::basic_string[abi:ne180100]<0>(v117, "If >= 0: Model will not be used if this condition is not met");
  quasar::SystemConfig::Register<float>((uint64_t)v150, (const void **)__p, (uint64_t)&this[7], (uint64_t)v117, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "min-best-weight-dev-ppl");
  std::string::basic_string[abi:ne180100]<0>(v117, "If >= 0: Model will not be used if this condition is not met");
  quasar::SystemConfig::Register<float>((uint64_t)v150, (const void **)__p, (uint64_t)this[7].__r_.__value_.__r.__words + 4, (uint64_t)v117, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-best-weight-dev-ppl");
  std::string::basic_string[abi:ne180100]<0>(v117, "If >= 0: Model will not be used if this condition is not met");
  quasar::SystemConfig::Register<float>((uint64_t)v150, (const void **)__p, (uint64_t)&this[7].__r_.__value_.__l.__size_, (uint64_t)v117, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "min-dev-ppl-abs-improvement");
  std::string::basic_string[abi:ne180100]<0>(v117, "If >= 0: Model will not be used if this condition is not met");
  quasar::SystemConfig::Register<float>((uint64_t)v150, (const void **)__p, (uint64_t)&this[7].__r_.__value_.__r.__words[1] + 4, (uint64_t)v117, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "min-dev-ppl-rel-improvement");
  std::string::basic_string[abi:ne180100]<0>(v117, "If >= 0: Model will not be used if this condition is not met");
  quasar::SystemConfig::Register<float>((uint64_t)v150, (const void **)__p, (uint64_t)&this[7].__r_.__value_.__r.__words[2], (uint64_t)v117, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "task-name");
  std::string::basic_string[abi:ne180100]<0>(v117, "Name of the task to lookup, e.g., Dictation");
  quasar::SystemConfig::Register<std::string>((uint64_t)v150, (const void **)__p, (uint64_t)v141, (uint64_t)v117, 0, 192, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-chain-name");
  std::string::basic_string[abi:ne180100]<0>(v117, "Name of the decoder for the given task from which to take the bigG FST, e.g., msg");
  quasar::SystemConfig::Register<std::string>((uint64_t)v150, (const void **)__p, (uint64_t)&this[1], (uint64_t)v117, 0, 192, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SBYTE7(v118) < 0)
    operator delete(v117[0]);
  if (SBYTE7(v122) < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::readPtree((uint64_t)v150, (uint64_t)&v151, 0, 0);
  this[4].__r_.__value_.__l.__size_ = this[4].__r_.__value_.__r.__words[0];
  v20 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = v145.__r_.__value_.__l.__size_;
  if (!v20)
    MEMORY[0x1AF44C914](&v145, "dev-ppl");
  v139 = 0;
  v138 = 0;
  v140 = 0;
  kaldi::SplitStringToVector(&v145, ",", 1, (uint64_t)&v138);
  v21 = v138;
  if (0xAAAAAAAAAAAAAAABLL * ((v139 - v138) >> 3) >= 2 && quasar::gLogLevel >= 4)
  {
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Model selection can only be done on a single metric (select-model-based-on)", 75);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    v21 = v138;
  }
  quasar::EvaluationTask::EvaluationTask((uint64_t)__p, v21, (uint64_t)v143, 1);
  v23 = &this[4].__r_.__value_.__r.__words[2];
  v22 = this[4].__r_.__value_.__r.__words[2];
  v24 = (_OWORD *)this[4].__r_.__value_.__l.__size_;
  if ((unint64_t)v24 >= v22)
  {
    v26 = (uint64_t)((uint64_t)v24 - v116->__r_.__value_.__r.__words[0]) >> 4;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v28 = v22 - v116->__r_.__value_.__r.__words[0];
    if (v28 >> 3 > v27)
      v27 = v28 >> 3;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
      v29 = 0xFFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
      v30 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&this[4].__r_.__value_.__r.__words[2], v29);
    else
      v30 = 0;
    v31 = (std::string::size_type)v30 + 16 * v26;
    v32 = (std::string::size_type)v30 + 16 * v29;
    *(_OWORD *)v31 = *(_OWORD *)__p;
    v25 = v31 + 16;
    data = this[4].__r_.__value_.__l.__data_;
    v33 = this[4].__r_.__value_.__l.__size_;
    if ((std::string::pointer)v33 != data)
    {
      do
      {
        v35 = *(_QWORD *)(v33 - 16);
        v33 -= 16;
        v36 = *(_QWORD *)(v33 + 5);
        *(_QWORD *)(v31 - 16) = v35;
        v31 -= 16;
        *(_QWORD *)(v31 + 5) = v36;
      }
      while ((std::string::pointer)v33 != data);
      v33 = v116->__r_.__value_.__r.__words[0];
    }
    this[4].__r_.__value_.__r.__words[0] = v31;
    this[4].__r_.__value_.__l.__size_ = v25;
    this[4].__r_.__value_.__r.__words[2] = v32;
    if (v33)
      operator delete((void *)v33);
  }
  else
  {
    *v24 = *(_OWORD *)__p;
    v25 = (std::string::size_type)(v24 + 1);
  }
  this[4].__r_.__value_.__l.__size_ = v25;
  kaldi::SplitStringToVector(&v146, ",", 1, (uint64_t)&v138);
  v37 = v138;
  for (i = v139; v37 != i; v37 += 24)
  {
    if (*(char *)(v37 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v37, *(_QWORD *)(v37 + 8));
    }
    else
    {
      v39 = *(_OWORD *)v37;
      *(_QWORD *)&v122 = *(_QWORD *)(v37 + 16);
      *(_OWORD *)__p = v39;
    }
    quasar::EvaluationTask::EvaluationTask((uint64_t)v117, (uint64_t)__p, (uint64_t)v143, 0);
    v40 = this[4].__r_.__value_.__l.__data_;
    v41 = (char *)this[4].__r_.__value_.__l.__size_;
    if (v40 == v41)
    {
      v42 = this[4].__r_.__value_.__l.__data_;
    }
    else
    {
      v42 = this[4].__r_.__value_.__l.__data_;
      while (*((_DWORD *)v42 + 1) + 2 * *(_DWORD *)v42 != HIDWORD(v117[0]) + 2 * LODWORD(v117[0]))
      {
        v42 += 16;
        if (v42 == v41)
        {
          v42 = (char *)this[4].__r_.__value_.__l.__size_;
          break;
        }
      }
    }
    if (v42 == v41)
    {
      if ((unint64_t)v41 >= *v23)
      {
        v44 = (v41 - v40) >> 4;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v46 = *v23 - (_QWORD)v40;
        if (v46 >> 3 > v45)
          v45 = v46 >> 3;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
          v47 = 0xFFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&this[4].__r_.__value_.__r.__words[2], v47);
        else
          v48 = 0;
        v49 = &v48[16 * v44];
        *(_OWORD *)v49 = *(_OWORD *)v117;
        v51 = this[4].__r_.__value_.__l.__data_;
        v50 = this[4].__r_.__value_.__l.__size_;
        v52 = (std::string::size_type)v49;
        if ((std::string::pointer)v50 != v51)
        {
          do
          {
            v53 = *(_QWORD *)(v50 - 16);
            v50 -= 16;
            v54 = *(_QWORD *)(v50 + 5);
            *(_QWORD *)(v52 - 16) = v53;
            v52 -= 16;
            *(_QWORD *)(v52 + 5) = v54;
          }
          while ((std::string::pointer)v50 != v51);
          v50 = v116->__r_.__value_.__r.__words[0];
        }
        v43 = (std::string::size_type)(v49 + 16);
        this[4].__r_.__value_.__r.__words[0] = v52;
        this[4].__r_.__value_.__l.__size_ = (std::string::size_type)(v49 + 16);
        this[4].__r_.__value_.__r.__words[2] = (std::string::size_type)&v48[16 * v47];
        if (v50)
          operator delete((void *)v50);
      }
      else
      {
        *(_OWORD *)v41 = *(_OWORD *)v117;
        v43 = (std::string::size_type)(v41 + 16);
      }
      this[4].__r_.__value_.__l.__size_ = v43;
    }
    if (SBYTE7(v122) < 0)
      operator delete(__p[0]);
  }
  v55 = (int)this[6].__r_.__value_.__l.__data_;
  if (v55 < 0 || (v56 = HIDWORD(this[6].__r_.__value_.__r.__words[0]), v56 < 0) || v55 > v56)
  {
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"invalid choice of min-audio and max-audio", 41);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v57 = HIBYTE(v149);
  if (v149 < 0)
    v57 = v148;
  if (v57 && (quasar::getFloatRangeFromSpecifier((uint64_t)&v147, (uint64_t)v113, 500) & 1) == 0)
  {
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"sweep-weights specified in wrong format", 39);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v59 = this[5].__r_.__value_.__l.__data_;
  v58 = (char *)this[5].__r_.__value_.__l.__size_;
  if (v59 == v58)
  {
    v70 = this[5].__r_.__value_.__r.__words[2];
    if ((unint64_t)v59 >= v70)
    {
      v72 = v70 - (_QWORD)v59;
      v73 = (uint64_t)(v70 - (_QWORD)v59) >> 1;
      if (v73 <= 1)
        v73 = 1;
      if (v72 >= 0x7FFFFFFFFFFFFFFCLL)
        v74 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v74 = v73;
      v75 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this[5].__r_.__value_.__r.__words[2], v74);
      v76 = this[5].__r_.__value_.__l.__data_;
      v77 = this[5].__r_.__value_.__l.__size_;
      v70 = (std::string::size_type)&v75[v78];
      *v75 = 0;
      v71 = v75 + 1;
      while ((std::string::pointer)v77 != v76)
      {
        v79 = *(_DWORD *)(v77 - 4);
        v77 -= 4;
        *--v75 = v79;
      }
      this[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
      this[5].__r_.__value_.__l.__size_ = (std::string::size_type)v71;
      this[5].__r_.__value_.__r.__words[2] = v70;
      if (v76)
      {
        operator delete(v76);
        v70 = this[5].__r_.__value_.__r.__words[2];
      }
    }
    else
    {
      *(_DWORD *)v59 = 0;
      v71 = v59 + 4;
    }
    this[5].__r_.__value_.__l.__size_ = (std::string::size_type)v71;
    if ((unint64_t)v71 < v70)
    {
      *v71 = 1065353216;
      v69 = (std::string::size_type)(v71 + 1);
      goto LABEL_232;
    }
    v80 = (std::string::pointer)v113->__r_.__value_.__r.__words[0];
    v81 = (uint64_t)((uint64_t)v71 - v113->__r_.__value_.__r.__words[0]) >> 2;
    v82 = v81 + 1;
    if ((unint64_t)(v81 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v83 = v70 - (_QWORD)v80;
    if (v83 >> 1 > v82)
      v82 = v83 >> 1;
    if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
      v84 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v84 = v82;
    if (v84)
    {
      v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this[5].__r_.__value_.__r.__words[2], v84);
      v80 = this[5].__r_.__value_.__l.__data_;
      v71 = (_DWORD *)this[5].__r_.__value_.__l.__size_;
    }
    else
    {
      v85 = 0;
    }
    v92 = &v85[4 * v81];
    v93 = (std::string::size_type)&v85[4 * v84];
    *(_DWORD *)v92 = 1065353216;
    v69 = (std::string::size_type)(v92 + 4);
    while (v71 != (_DWORD *)v80)
    {
      v94 = *--v71;
      *((_DWORD *)v92 - 1) = v94;
      v92 -= 4;
    }
    this[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
LABEL_230:
    this[5].__r_.__value_.__l.__size_ = v69;
    this[5].__r_.__value_.__r.__words[2] = v93;
    if (v80)
      operator delete(v80);
    goto LABEL_232;
  }
  if (*(_DWORD *)(v116->__r_.__value_.__r.__words[0] + 8) == 2)
  {
    if (*(float *)v59 != 0.0)
    {
      if (quasar::gLogLevel >= 5)
      {
        v136 = 0u;
        v137 = 0u;
        v134 = 0u;
        v135 = 0u;
        v132 = 0u;
        v133 = 0u;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adding 0.0 to sweep-weight list for optimization method \"", 57);
        std::string::basic_string[abi:ne180100]<0>(v117, &quasar::EvaluationTask::optimizeOptions[20 * *(unsigned int *)(v116->__r_.__value_.__r.__words[0] + 8)]);
        if ((SBYTE7(v118) & 0x80u) == 0)
          v61 = v117;
        else
          v61 = (void **)v117[0];
        if ((SBYTE7(v118) & 0x80u) == 0)
          v62 = BYTE7(v118);
        else
          v62 = (uint64_t)v117[1];
        v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"\"", 1);
        if (SBYTE7(v118) < 0)
          operator delete(v117[0]);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        v59 = (std::string::pointer)v113->__r_.__value_.__r.__words[0];
      }
      LODWORD(__p[0]) = 0;
      std::vector<float>::insert((uint64_t)v113, v59, (float *)__p);
      v58 = (char *)this[5].__r_.__value_.__l.__size_;
    }
    if (*((float *)v58 - 1) != 1.0)
    {
      if (quasar::gLogLevel >= 5)
      {
        v136 = 0u;
        v137 = 0u;
        v134 = 0u;
        v135 = 0u;
        v132 = 0u;
        v133 = 0u;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adding 1.0 to sweep-weight list for optimization method \"", 57);
        std::string::basic_string[abi:ne180100]<0>(v117, &quasar::EvaluationTask::optimizeOptions[20 * *(unsigned int *)(v116->__r_.__value_.__r.__words[0] + 8)]);
        if ((SBYTE7(v118) & 0x80u) == 0)
          v65 = v117;
        else
          v65 = (void **)v117[0];
        if ((SBYTE7(v118) & 0x80u) == 0)
          v66 = BYTE7(v118);
        else
          v66 = (uint64_t)v117[1];
        v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\"", 1);
        if (SBYTE7(v118) < 0)
          operator delete(v117[0]);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        v58 = (char *)this[5].__r_.__value_.__l.__size_;
      }
      v68 = this[5].__r_.__value_.__r.__words[2];
      if ((unint64_t)v58 < v68)
      {
        *(_DWORD *)v58 = 1065353216;
        v69 = (std::string::size_type)(v58 + 4);
LABEL_232:
        this[5].__r_.__value_.__l.__size_ = v69;
        v58 = (char *)v69;
        goto LABEL_233;
      }
      v80 = (std::string::pointer)v113->__r_.__value_.__r.__words[0];
      v86 = (uint64_t)&v58[-v113->__r_.__value_.__r.__words[0]] >> 2;
      v87 = v86 + 1;
      if ((unint64_t)(v86 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v88 = v68 - (_QWORD)v80;
      if (v88 >> 1 > v87)
        v87 = v88 >> 1;
      _CF = (unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL;
      v89 = 0x3FFFFFFFFFFFFFFFLL;
      if (!_CF)
        v89 = v87;
      if (v89)
      {
        v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this[5].__r_.__value_.__r.__words[2], v89);
        v89 = v91;
        v80 = this[5].__r_.__value_.__l.__data_;
        v58 = (char *)this[5].__r_.__value_.__l.__size_;
      }
      else
      {
        v90 = 0;
      }
      v95 = &v90[4 * v86];
      v93 = (std::string::size_type)&v90[4 * v89];
      *(_DWORD *)v95 = 1065353216;
      v69 = (std::string::size_type)(v95 + 4);
      while (v58 != v80)
      {
        v96 = *((_DWORD *)v58 - 1);
        v58 -= 4;
        *((_DWORD *)v95 - 1) = v96;
        v95 -= 4;
      }
      this[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
      goto LABEL_230;
    }
  }
LABEL_233:
  v97 = v113->__r_.__value_.__r.__words[0];
  if (v113->__r_.__value_.__l.__data_ != v58)
  {
    for (j = (float *)(v97 + 4); j != (float *)v58; ++j)
    {
      v100 = *(j - 1);
      v99 = *j;
      if (v99 < v100)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"std::is_sorted(evalWeightsList.begin(), evalWeightsList.end())", 62);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
    }
  }
  v101 = *v114 < 0.0 || *v114 > 1.0;
  if (v101 || ((v102 = *v19, *v19 >= 0.0) ? (v103 = v102 > 1.0) : (v103 = 1), v103))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"minWeight >= 0.0 && minWeight <= 1.0 && maxWeight >= 0.0 && maxWeight <= 1.0", 76);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (v102 < 1.0)
  {
    if ((char *)v97 == v58)
    {
LABEL_260:
      std::vector<float>::insert((uint64_t)v113, v58, &this[6].__r_.__value_.__s.__data_[12]);
      goto LABEL_261;
    }
    v104 = (float *)v113->__r_.__value_.__r.__words[0];
    while (*v104 != v102)
    {
      if (++v104 == (float *)v58)
      {
        v104 = (float *)v58;
        break;
      }
    }
    if (v104 == (float *)v58)
    {
      if ((char *)v97 != v58)
      {
        v105 = (uint64_t)&v58[-v97] >> 2;
        do
        {
          v106 = v105 >> 1;
          v107 = (float *)(v97 + 4 * (v105 >> 1));
          v109 = *v107;
          v108 = v107 + 1;
          v105 += ~(v105 >> 1);
          if (v102 < v109)
            v105 = v106;
          else
            v97 = (std::string::size_type)v108;
        }
        while (v105);
        v58 = (char *)v97;
      }
      goto LABEL_260;
    }
  }
LABEL_261:
  memset(v120, 0, sizeof(v120));
  *(_OWORD *)v117 = 0u;
  v118 = 0u;
  v119 = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)__p, a4, v120, (uint64_t)v117);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v117);
  v117[0] = v120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v117);
  quasar::getOrValidateDecoderChainName((quasar *)__p, (uint64_t)v141, (const void **)&v112->__r_.__value_.__l.__data_, (std::string *)v117);
  if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112->__r_.__value_.__l.__data_);
  *(_OWORD *)&v112->__r_.__value_.__l.__data_ = *(_OWORD *)v117;
  this[1].__r_.__value_.__r.__words[2] = v118;
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)__p);
  __p[0] = &v138;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v142 < 0)
    operator delete(v141[0]);
  if (SHIBYTE(v144) < 0)
    operator delete(v143[0]);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v150);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  return this;
}

char *std::vector<float>::insert(uint64_t a1, char *__src, float *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 2) + 1;
    if (v15 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v16 = (__src - v14) >> 2;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 1 > v15)
      v15 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[4 * v16];
    v23 = v22;
    v24 = &v19[4 * v18];
    std::__split_buffer<float>::push_back(&__p, a3);
    v4 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(float *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 4;
  }
  else
  {
    v10 = __src + 4;
    v11 = v6 - 4;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_DWORD *)v11;
      v11 += 4;
      *(_DWORD *)v12 = v13;
      v12 += 4;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-4 * ((v6 - v10) >> 2)], __src, v6 - v10);
    *(float *)v4 = *a3;
  }
  return v4;
}

void sub_1ADF143D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _DWORD *v11;
  int v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 2) + 1;
    if (v14 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 2;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 1 > v14)
      v14 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[4 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[4 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 1;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8, v22);
        v20 = &v23[v22 & 0xFFFFFFFFFFFFFFFCLL];
        __p = v23;
        v27 = v20;
        v29 = &v23[4 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 4 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_DWORD *)v20 = *(_DWORD *)v3;
    v28 = v20 + 4;
    v4 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_DWORD *)__src = *(_DWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 4;
  }
  else
  {
    v9 = __src + 4;
    v10 = v6 - 4;
    v11 = *(_DWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_DWORD *)v10;
      v10 += 4;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-4 * ((v6 - v9) >> 2)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 4 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_DWORD *)v4 = *(_DWORD *)v3;
  }
  return v4;
}

void sub_1ADF14614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmEvaluator::runEvaluation(uint64_t a1, uint64_t a2, uint64_t *a3, quasar *a4, float *a5, int a6, char a7)
{
  double Seconds;
  quasar::PTree *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  uint64_t v19;
  float *v20;
  __int128 *v21;
  float v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t *v27;
  quasar *v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  int v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  double v39;
  quasar *v40;
  double v41;
  uint64_t i;
  std::string v46;
  std::string __p[2];
  char **v48;
  char *v49[2];
  __int128 v50;
  void *v51;
  _BYTE *v52;
  uint64_t v53;
  void *v54[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[88];
  _QWORD v72[11];

  v72[9] = *MEMORY[0x1E0C80C00];
  Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)a2);
  quasar::PTree::PTree((quasar::PTree *)v71);
  if (!*(_QWORD *)(a1 + 80))
  {
    v14 = operator new();
    quasar::FstLmScorer::FstLmScorer(v14, a1);
    v15 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v16 = 0;
  *(_BYTE *)(a1 + 48) = a7;
  do
  {
    v17 = &v71[v16 + 64];
    v17[2] = 0;
    *(_QWORD *)&v71[v16 + 72] = 0;
    *v17 = &v71[v16 + 72];
    v16 += 24;
  }
  while (v16 != 96);
  v18 = *(__int128 **)(a1 + 96);
  if (!*((_BYTE *)v18 + 12))
  {
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    *(_OWORD *)v54 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"First task should be on tuning on dev set", 41);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v54);
  }
  if (*((_DWORD *)v18 + 2) == 2)
  {
    v20 = *(float **)(a1 + 120);
    v19 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)(v19 - (_QWORD)v20) < 5 || *v20 != 0.0 || *(float *)(v19 - 4) != 1.0)
    {
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      *(_OWORD *)v54 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"For interpolated models, we should evaluate weights 0 and 1", 59);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v54);
    }
  }
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v21 = *(__int128 **)(a1 + 104);
  if (v18 == v21)
  {
    v22 = 0.0;
    v32 = 1;
  }
  else
  {
    v22 = 0.0;
    while (1)
    {
      v50 = *v18;
      v49[0] = 0;
      v49[1] = 0;
      v48 = v49;
      v23 = *((_QWORD *)&v50 + 1);
      v24 = (uint64_t **)&v71[24 * v50 + 64];
      if ((quasar::LmEvaluator::runTask(a1, v50, *((uint64_t *)&v50 + 1), a2, a3, &v51, v24, (uint64_t **)&v48) & 1) == 0)
        break;
      if ((v23 & 0xFF00000000) != 0 && (unint64_t)(v52 - (_BYTE *)v51) >= 5)
      {
        v22 = *((float *)v51 + 1);
        std::string::basic_string[abi:ne180100]<0>(__p, "model-selection");
        quasar::EvaluationTask::optimizationPtree((quasar::EvaluationTask *)&v50, v22, (quasar::PTree *)v54);
        quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)v54, 1);
        quasar::PTree::~PTree((quasar::PTree *)v54);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      quasar::PTree::PTree((quasar::PTree *)v54);
      v27 = *v24;
      v25 = v24 + 1;
      v26 = v27;
      if (v27 != (uint64_t *)v25)
      {
        do
        {
          quasar::CorpusStats::Ptree((quasar::CorpusStats *)v26[5], a6 ^ 1, (quasar::PTree *)__p);
          quasar::weightToStr((uint64_t *)&v46, v28, *((float *)v26 + 8));
          quasar::PTree::putChild((uint64_t)v54, (uint64_t)&v46, (uint64_t)__p, 0);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v46.__r_.__value_.__l.__data_);
          quasar::PTree::~PTree((quasar::PTree *)__p);
          v29 = (uint64_t *)v26[1];
          if (v29)
          {
            do
            {
              v30 = v29;
              v29 = (uint64_t *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              v30 = (uint64_t *)v26[2];
              v31 = *v30 == (_QWORD)v26;
              v26 = v30;
            }
            while (!v31);
          }
          v26 = v30;
        }
        while (v30 != (uint64_t *)v25);
      }
      quasar::EvaluationTask::printTask((quasar::EvaluationTask *)&v50, &v46);
      quasar::times2Ptree(&v48, (quasar::PTree *)__p);
      quasar::PTree::putChild((uint64_t)v71, (uint64_t)&v46, (uint64_t)__p, 0);
      quasar::PTree::~PTree((quasar::PTree *)__p);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      quasar::EvaluationTask::printTask((quasar::EvaluationTask *)&v50, __p);
      quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)v54, 0);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      quasar::PTree::~PTree((quasar::PTree *)v54);
      std::__tree<std::string>::destroy((uint64_t)&v48, v49[0]);
      if (++v18 == v21)
      {
        v32 = 1;
        goto LABEL_37;
      }
    }
    if (quasar::gLogLevel >= 4)
    {
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      *(_OWORD *)v54 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Task failed", 11);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v54);
    }
    std::__tree<std::string>::destroy((uint64_t)&v48, v49[0]);
    v32 = 0;
  }
LABEL_37:
  if (a6)
    quasar::roundCountsInPtree(a4, v13);
  v33 = *(float *)(a1 + 156);
  if (v22 <= v33)
  {
    v33 = v22;
  }
  else if (quasar::gLogLevel >= 4)
  {
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    *(_OWORD *)v54 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"bestWeight (", 12);
    v34 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)") exceeds maxWeight (", 21);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"). Clipping to maxWeight", 24);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v54);
    v33 = *(float *)(a1 + 156);
  }
  if (v33 == 0.0 || v33 < *(float *)(a1 + 152))
  {
    if (quasar::gLogLevel < 4)
    {
LABEL_48:
      v38 = 0;
      goto LABEL_49;
    }
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    *(_OWORD *)v54 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"bestWeight (", 12);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)") is below minWeight (", 22);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"). Model will not be used", 25);
LABEL_47:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v54);
    goto LABEL_48;
  }
  if (!v32)
    goto LABEL_48;
  if (!quasar::LmEvaluator::checkPpl(a1, (uint64_t)v72, v33))
  {
    if (quasar::gLogLevel < 4)
      goto LABEL_48;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    *(_OWORD *)v54 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"PPL checks failed", 17);
    goto LABEL_47;
  }
  v38 = 1;
LABEL_49:
  if (a5)
    *a5 = v33;
  v39 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)v13);
  v40 = (quasar *)std::string::basic_string[abi:ne180100]<0>(__p, "totalTime");
  v41 = v39 - Seconds;
  LODWORD(v54[0]) = quasar::getType(v40, *(float *)&v41);
  std::to_string((std::string *)&v54[1], v41);
  v56 = 0uLL;
  *(_QWORD *)&v57 = 0;
  BYTE8(v57) = 1;
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)__p, (uint64_t)v54, 1);
  quasar::PTree::~PTree((quasar::PTree *)v54);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v54, "times");
  quasar::PTree::putChild((uint64_t)a4, (uint64_t)v54, (uint64_t)v71, 1);
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  for (i = 0; i != -12; i -= 3)
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy((uint64_t)&v72[i + 6], (_QWORD *)v72[i + 7]);
  quasar::PTree::~PTree((quasar::PTree *)v71);
  return v38;
}

void sub_1ADF14DD8()
{
  uint64_t v0;

  MEMORY[0x1AF44D190](v0, 0x10A1C402FEF67C7);
  JUMPOUT(0x1ADF14F7CLL);
}

void sub_1ADF14DF8()
{
  JUMPOUT(0x1ADF14F7CLL);
}

void sub_1ADF14E08(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADF14F84);
}

void sub_1ADF14E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t v68;
  uint64_t i;

  if (a36 < 0)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  for (i = 0; i != -96; i -= 24)
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy(v68 - 224 + i + 72, *(_QWORD **)(v68 - 224 + i + 80));
  quasar::PTree::~PTree((quasar::PTree *)&a68);
  _Unwind_Resume(a1);
}

void sub_1ADF14E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t v68;
  uint64_t i;

  quasar::PTree::~PTree((quasar::PTree *)&a34);
  if (a19 < 0)
    JUMPOUT(0x1ADF14E74);
  if (a31)
    operator delete(a31);
  for (i = 0; i != -96; i -= 24)
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy(v68 - 224 + i + 72, *(_QWORD *)(v68 - 224 + i + 80));
  quasar::PTree::~PTree((quasar::PTree *)&a68);
  _Unwind_Resume(a1);
}

void sub_1ADF14E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;
  uint64_t i;

  if (__p)
    operator delete(__p);
  for (i = 0; i != -96; i -= 24)
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy(v65 - 224 + i + 72, *(_QWORD **)(v65 - 224 + i + 80));
  quasar::PTree::~PTree((quasar::PTree *)&a65);
  _Unwind_Resume(a1);
}

void sub_1ADF14E50()
{
  JUMPOUT(0x1ADF14F84);
}

void sub_1ADF14E58()
{
  JUMPOUT(0x1ADF14F58);
}

void sub_1ADF14E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;
  uint64_t i;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a31);
  if (a28)
    operator delete(a28);
  for (i = 0; i != -96; i -= 24)
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy(v65 - 224 + i + 72, *(_QWORD **)(v65 - 224 + i + 80));
  quasar::PTree::~PTree((quasar::PTree *)&a65);
  _Unwind_Resume(a1);
}

void sub_1ADF14E8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  quasar::PTree::~PTree((quasar::PTree *)&a34);
  if (a19 < 0)
    operator delete(__p);
  std::__tree<std::string>::destroy((uint64_t)&a25, a26);
  JUMPOUT(0x1ADF14F48);
}

void sub_1ADF14EBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADF14F34);
}

void sub_1ADF14F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::__tree<std::string>::destroy(&a22, a23);
  JUMPOUT(0x1ADF14F48);
}

void sub_1ADF14F08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  quasar::PTree::~PTree((quasar::PTree *)&a34);
  JUMPOUT(0x1ADF14F3CLL);
}

uint64_t quasar::LmEvaluator::runTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6, uint64_t **a7, uint64_t **a8)
{
  int v10;
  uint64_t *Sentences;
  quasar *v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type size;
  _QWORD *v17;
  _QWORD *v18;
  float *v19;
  float *v20;
  char v21;
  void *v22;
  float v23;
  BOOL v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  void *v29;
  uint64_t *v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  float v37;
  _QWORD *v38;
  _QWORD *v39;
  double *v40;
  char *v41;
  float *v42;
  char *v43;
  float *v44;
  unint64_t v45;
  unint64_t v46;
  float *v47;
  char *v48;
  float v49;
  _QWORD *v50;
  std::string *v51;
  std::string::size_type v52;
  _QWORD *v53;
  std::string *v54;
  std::string::size_type v55;
  uint64_t v56;
  quasar *v58;
  float *v59;
  float *v60;
  uint64_t **v61;
  float v62;
  uint64_t *v63;
  uint64_t **v64;
  uint64_t *v65;
  double *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t **v77;
  char *v78;
  char *v79;
  uint64_t *v80;
  uint64_t *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t **v88;
  char *v89;
  char *v90;
  uint64_t *v91;
  float v92;
  std::string::size_type v93;
  uint64_t **v94;
  quasar *v95;
  std::string *v96;
  __int128 v97;
  void **v98;
  uint64_t v99;
  _QWORD *v100;
  int64x2_t v101;
  kaldi::Timer *v102;
  int64x2_t v105;
  std::string v107;
  void *v108[2];
  int64_t v109;
  void *p_p;
  char *v111;
  char *v112;
  _OWORD *v113[3];
  float v114;
  std::string v115;
  __int128 __p;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  std::string v133;
  _QWORD v134[4];

  v10 = HIDWORD(a2);
  v134[0] = a2;
  v134[1] = a3;
  Sentences = (uint64_t *)quasar::LmData::getSentences(a4, a2);
  quasar::EvaluationTask::printTask((quasar::EvaluationTask *)v134, &v133);
  if (quasar::gLogLevel >= 4)
  {
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Running evaluation task ", 24);
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v133;
    else
      v15 = (std::string *)v133.__r_.__value_.__r.__words[0];
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
    else
      size = v133.__r_.__value_.__l.__size_;
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" with ", 6);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" utterances", 11);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  }
  if (v10 == 1)
  {
    if (quasar::gLogLevel < 2)
      goto LABEL_80;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"no audio data available for ", 28);
    quasar::EvaluationTask::printTask((quasar::EvaluationTask *)v134, &v115);
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &v115;
    else
      v51 = (std::string *)v115.__r_.__value_.__r.__words[0];
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
    else
      v52 = v115.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v115.__r_.__value_.__l.__data_);
LABEL_64:
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
    goto LABEL_80;
  }
  if (v10)
  {
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"invalid evaluation metric", 25);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  if (Sentences[1] == *Sentences)
  {
    if (quasar::gLogLevel < 2)
      goto LABEL_80;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"no text data available for ", 27);
    quasar::EvaluationTask::printTask((quasar::EvaluationTask *)v134, &v115);
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = &v115;
    else
      v54 = (std::string *)v115.__r_.__value_.__r.__words[0];
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
    else
      v55 = v115.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v115.__r_.__value_.__l.__data_);
    goto LABEL_64;
  }
  v20 = *(float **)(a1 + 120);
  v19 = *(float **)(a1 + 128);
  if (v20 == v19)
  {
LABEL_80:
    v56 = 0;
    goto LABEL_81;
  }
  v100 = a6;
  v21 = 0;
  v102 = (kaldi::Timer *)(a1 + 192);
  v22 = &std::piecewise_construct;
  v101 = vdupq_n_s64(0x444B1AE4D6E2EF50uLL);
  do
  {
    LODWORD(p_p) = 0;
    v23 = *v20;
    *(float *)&p_p = *v20;
    if ((_DWORD)a3 != 2 || (v23 != 0.0 ? (v24 = v23 == 1.0) : (v24 = 1), v24))
    {
      quasar::weightToStr((uint64_t *)&__p, v13, v23);
      v113[0] = &__p;
      v25 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)&__p, (uint64_t)v22, v113);
      quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)&v115, v102, v25 + 7);
      if (SBYTE7(v117) < 0)
        operator delete((void *)__p);
      *(_DWORD *)(*a5 + 12) = (_DWORD)p_p;
      v26 = operator new();
      *(_DWORD *)v26 = *(_DWORD *)(a1 + 72);
      *(_OWORD *)(v26 + 8) = 0u;
      *(_OWORD *)(v26 + 24) = 0u;
      *(_OWORD *)(v26 + 40) = 0u;
      *(int64x2_t *)(v26 + 56) = v101;
      *(_OWORD *)(v26 + 72) = 0u;
      *(_OWORD *)(v26 + 88) = 0u;
      *(_OWORD *)(v26 + 104) = 0u;
      *(_OWORD *)(v26 + 120) = 0u;
      *(_QWORD *)(v26 + 136) = 0;
      LODWORD(__p) = (_DWORD)p_p;
      v113[0] = 0;
      *((_QWORD *)&__p + 1) = v26;
      std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::__emplace_unique_key_args<float,std::pair<float const,std::unique_ptr<quasar::CorpusStats>>>(a7, (float *)&__p, (uint64_t)&__p);
      v27 = *((_QWORD *)&__p + 1);
      *((_QWORD *)&__p + 1) = 0;
      if (v27)
        std::default_delete<quasar::CorpusStats>::operator()[abi:ne180100]((uint64_t)&__p + 8, v27);
      v28 = v113[0];
      v113[0] = 0;
      if (v28)
        std::default_delete<quasar::CorpusStats>::operator()[abi:ne180100]((uint64_t)v113, (uint64_t)v28);
      *(_QWORD *)&__p = &p_p;
      v29 = v22;
      v30 = std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(a7, (float *)&p_p, (uint64_t)v22, (_DWORD **)&__p)[5];
      v31 = quasar::LmEvaluator::computeTextStats(a1, Sentences, a5, (quasar::CorpusStats *)v30);
      v32 = v31;
      if (*(float *)(a1 + 160) >= 0.0)
      {
        if ((v31 & 1) == 0)
        {
          if (quasar::gLogLevel >= 1)
          {
            v131 = 0u;
            v132 = 0u;
            v129 = 0u;
            v130 = 0u;
            v127 = 0u;
            v128 = 0u;
            v125 = 0u;
            v126 = 0u;
            v123 = 0u;
            v124 = 0u;
            v121 = 0u;
            v122 = 0u;
            v119 = 0u;
            v120 = 0u;
            v117 = 0u;
            v118 = 0u;
            __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"computeTextStats failed", 23);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
          }
          goto LABEL_79;
        }
        v33 = v30[9];
        v34 = v30[10];
        if (v33 == v34)
        {
          v35 = 0;
        }
        else
        {
          v35 = 0;
          do
          {
            v35 += *(unsigned __int8 *)(v33 + 36);
            v33 += 104;
          }
          while (v33 != v34);
        }
        v36 = (Sentences[1] - *Sentences) >> 7;
        v37 = (float)v35 / (float)(unint64_t)v36;
        if (quasar::gLogLevel > 3)
        {
          v131 = 0u;
          v132 = 0u;
          v129 = 0u;
          v130 = 0u;
          v127 = 0u;
          v128 = 0u;
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Pass rate: ", 11);
          v38 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" passes: ", 9);
          v39 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" total: ", 8);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
          v36 = (Sentences[1] - *Sentences) >> 7;
        }
        if (v35 != v36 && v37 < *(float *)(a1 + 160))
        {
          if (quasar::gLogLevel >= 1)
          {
            v131 = 0u;
            v132 = 0u;
            v129 = 0u;
            v130 = 0u;
            v127 = 0u;
            v128 = 0u;
            v125 = 0u;
            v126 = 0u;
            v123 = 0u;
            v124 = 0u;
            v121 = 0u;
            v122 = 0u;
            v119 = 0u;
            v120 = 0u;
            v117 = 0u;
            v118 = 0u;
            __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Pass rate too low", 17);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
          }
LABEL_79:
          quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)&v115);
          goto LABEL_80;
        }
      }
      v21 |= v32;
      quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)&v115);
      v22 = v29;
    }
    ++v20;
  }
  while (v20 != v19);
  if ((v21 & 1) == 0)
    goto LABEL_80;
  if ((a3 & 0xFF00000000) == 0)
    goto LABEL_87;
  std::string::basic_string[abi:ne180100]<0>(&v115, "model-selection");
  v113[0] = &v115;
  v40 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)&v115.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v113);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)&__p, v102, v40 + 7);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  quasar::LmEvaluator::optimizePerplexity(a1, a7, a3, (uint64_t)v100);
  v41 = *(char **)(a1 + 120);
  v42 = *(float **)(a1 + 128);
  v43 = (char *)(*v100 + 4);
  if (v41 == (char *)v42)
  {
    v41 = *(char **)(a1 + 128);
  }
  else
  {
    v44 = *(float **)(a1 + 120);
    while (*v44 != *(float *)v43)
    {
      if (++v44 == v42)
      {
        v44 = *(float **)(a1 + 128);
        break;
      }
    }
    if (v44 != v42)
      goto LABEL_86;
    v45 = ((char *)v42 - v41) >> 2;
    do
    {
      v46 = v45 >> 1;
      v47 = (float *)&v41[4 * (v45 >> 1)];
      v49 = *v47;
      v48 = (char *)(v47 + 1);
      v45 += ~(v45 >> 1);
      if (*(float *)v43 < v49)
        v45 = v46;
      else
        v41 = v48;
    }
    while (v45);
  }
  std::vector<float>::insert(a1 + 120, v41, v43);
LABEL_86:
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)&__p);
LABEL_87:
  v58 = (quasar *)std::vector<float>::vector(&v115, 2uLL);
  v59 = *(float **)(a1 + 120);
  v60 = *(float **)(a1 + 128);
  if (v59 != v60)
  {
    v61 = a7 + 1;
    v105 = vdupq_n_s64(0x444B1AE4D6E2EF50uLL);
    do
    {
      v114 = 0.0;
      v62 = *v59;
      v114 = *v59;
      v63 = *v61;
      if (!*v61)
        goto LABEL_96;
      v64 = a7 + 1;
      do
      {
        v65 = v63 + 1;
        if (*((float *)v63 + 8) >= v62)
        {
          v65 = v63;
          v64 = (uint64_t **)v63;
        }
        v63 = (uint64_t *)*v65;
      }
      while (*v65);
      if (v64 == v61 || v62 < *((float *)v64 + 8))
      {
LABEL_96:
        quasar::weightToStr((uint64_t *)&__p, v58, v62);
        p_p = &__p;
        v66 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
        quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v113, v102, v66 + 7);
        if (SBYTE7(v117) < 0)
          operator delete((void *)__p);
        v67 = operator new();
        *(_DWORD *)v67 = *(_DWORD *)(a1 + 72);
        *(_OWORD *)(v67 + 8) = 0u;
        *(_OWORD *)(v67 + 24) = 0u;
        *(_OWORD *)(v67 + 40) = 0u;
        *(int64x2_t *)(v67 + 56) = v105;
        *(_OWORD *)(v67 + 72) = 0u;
        *(_OWORD *)(v67 + 88) = 0u;
        *(_OWORD *)(v67 + 104) = 0u;
        *(_OWORD *)(v67 + 120) = 0u;
        *(_QWORD *)(v67 + 136) = 0;
        *(float *)&__p = v114;
        p_p = 0;
        *((_QWORD *)&__p + 1) = v67;
        std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::__emplace_unique_key_args<float,std::pair<float const,std::unique_ptr<quasar::CorpusStats>>>(a7, (float *)&__p, (uint64_t)&__p);
        v68 = *((_QWORD *)&__p + 1);
        *((_QWORD *)&__p + 1) = 0;
        if (v68)
          std::default_delete<quasar::CorpusStats>::operator()[abi:ne180100]((uint64_t)&__p + 8, v68);
        v69 = p_p;
        p_p = 0;
        if (v69)
          std::default_delete<quasar::CorpusStats>::operator()[abi:ne180100]((uint64_t)&p_p, (uint64_t)v69);
        p_p = 0;
        v111 = 0;
        v112 = 0;
        LODWORD(v108[0]) = 0;
        *(_QWORD *)&__p = v108;
        v70 = std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(a7, (float *)v108, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)[5];
        v71 = v111;
        if (v111 >= v112)
        {
          v73 = (v111 - (_BYTE *)p_p) >> 3;
          if ((unint64_t)(v73 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v74 = (v112 - (_BYTE *)p_p) >> 2;
          if (v74 <= v73 + 1)
            v74 = v73 + 1;
          if ((unint64_t)(v112 - (_BYTE *)p_p) >= 0x7FFFFFFFFFFFFFF8)
            v75 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v75 = v74;
          if (v75)
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v112, v75);
          else
            v76 = 0;
          v77 = (uint64_t **)&v76[8 * v73];
          *v77 = v70;
          v72 = (char *)(v77 + 1);
          v79 = (char *)p_p;
          v78 = v111;
          if (v111 != p_p)
          {
            do
            {
              v80 = (uint64_t *)*((_QWORD *)v78 - 1);
              v78 -= 8;
              *--v77 = v80;
            }
            while (v78 != v79);
            v78 = (char *)p_p;
          }
          p_p = v77;
          v111 = v72;
          v112 = &v76[8 * v75];
          if (v78)
            operator delete(v78);
        }
        else
        {
          *(_QWORD *)v111 = v70;
          v72 = v71 + 8;
        }
        v111 = v72;
        LODWORD(v108[0]) = 1065353216;
        *(_QWORD *)&__p = v108;
        v81 = std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(a7, (float *)v108, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)[5];
        v82 = v111;
        if (v111 >= v112)
        {
          v84 = (v111 - (_BYTE *)p_p) >> 3;
          if ((unint64_t)(v84 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v85 = (v112 - (_BYTE *)p_p) >> 2;
          if (v85 <= v84 + 1)
            v85 = v84 + 1;
          if ((unint64_t)(v112 - (_BYTE *)p_p) >= 0x7FFFFFFFFFFFFFF8)
            v86 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v86 = v85;
          if (v86)
            v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v112, v86);
          else
            v87 = 0;
          v88 = (uint64_t **)&v87[8 * v84];
          *v88 = v81;
          v83 = (char *)(v88 + 1);
          v90 = (char *)p_p;
          v89 = v111;
          if (v111 != p_p)
          {
            do
            {
              v91 = (uint64_t *)*((_QWORD *)v89 - 1);
              v89 -= 8;
              *--v88 = v91;
            }
            while (v89 != v90);
            v89 = (char *)p_p;
          }
          p_p = v88;
          v111 = v83;
          v112 = &v87[8 * v86];
          if (v89)
            operator delete(v89);
        }
        else
        {
          *(_QWORD *)v111 = v81;
          v83 = v82 + 8;
        }
        v111 = v83;
        v92 = v114;
        v93 = v115.__r_.__value_.__r.__words[0];
        *(float *)v115.__r_.__value_.__l.__data_ = 1.0 - v114;
        *(float *)(v93 + 4) = v92;
        *(_QWORD *)&__p = &v114;
        v94 = std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(a7, &v114, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
        if (!quasar::CorpusStats::interpolateCorpusStatsWithBestWeights((char **)&p_p, (uint64_t)&v115, (uint64_t)v94[5]))
        {
          v131 = 0u;
          v132 = 0u;
          v129 = 0u;
          v130 = 0u;
          v127 = 0u;
          v128 = 0u;
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          __p = 0u;
          v95 = (quasar *)kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          quasar::weightToStr((uint64_t *)&v107, v95, v114);
          v96 = std::string::insert(&v107, 0, "perplexity interpolation failed for weight ");
          v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
          v109 = v96->__r_.__value_.__r.__words[2];
          *(_OWORD *)v108 = v97;
          v96->__r_.__value_.__l.__size_ = 0;
          v96->__r_.__value_.__r.__words[2] = 0;
          v96->__r_.__value_.__r.__words[0] = 0;
          if (v109 >= 0)
            v98 = v108;
          else
            v98 = (void **)v108[0];
          if (v109 >= 0)
            v99 = HIBYTE(v109);
          else
            v99 = (uint64_t)v108[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v98, v99);
          if (SHIBYTE(v109) < 0)
            operator delete(v108[0]);
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v107.__r_.__value_.__l.__data_);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
        }
        if (p_p)
        {
          v111 = (char *)p_p;
          operator delete(p_p);
        }
        quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v113);
      }
      ++v59;
    }
    while (v59 != v60);
  }
  if (v115.__r_.__value_.__r.__words[0])
  {
    v115.__r_.__value_.__l.__size_ = v115.__r_.__value_.__r.__words[0];
    operator delete(v115.__r_.__value_.__l.__data_);
  }
  v56 = 1;
LABEL_81:
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  return v56;
}

void sub_1ADF15CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (__p)
    operator delete(__p);
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)&a30);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  if (*(char *)(v42 - 129) < 0)
    operator delete(*(void **)(v42 - 152));
  _Unwind_Resume(a1);
}

void sub_1ADF15D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a37);
  JUMPOUT(0x1ADF15DC8);
}

void sub_1ADF15D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)&a34);
  if (*(char *)(v34 - 129) < 0)
    operator delete(*(void **)(v34 - 152));
  _Unwind_Resume(a1);
}

void sub_1ADF15D64()
{
  JUMPOUT(0x1ADF15DC8);
}

void sub_1ADF15D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;

  v38 = a38;
  a38 = 0;
  if (v38)
    std::default_delete<quasar::CorpusStats>::operator()[abi:ne180100](a12, v38);
  v39 = a30;
  a30 = 0;
  if (v39)
    std::default_delete<quasar::CorpusStats>::operator()[abi:ne180100]((uint64_t)&a30, v39);
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)&a34);
  JUMPOUT(0x1ADF15DC8);
}

void sub_1ADF15D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a37);
  JUMPOUT(0x1ADF15DA8);
}

void sub_1ADF15DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a42 < 0)
    JUMPOUT(0x1ADF15DC4);
  if (*(char *)(v42 - 129) < 0)
    operator delete(*(void **)(v42 - 152));
  _Unwind_Resume(a1);
}

uint64_t quasar::weightToStr(quasar *this, double a2)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  *(_QWORD *)((char *)&v3[2] + *(_QWORD *)(v3[0] - 24)) = 16;
  std::ostream::operator<<();
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v5);
}

void sub_1ADF15EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL quasar::LmEvaluator::checkPpl(uint64_t a1, uint64_t a2, float a3)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  float *v10;
  char v11;
  char v12;
  float v13;
  int v14;
  uint64_t v15;
  float v16;
  float *v17;
  uint64_t *v18;
  uint64_t v19;
  double v20;
  double v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  float v25;
  double v27;
  double v28;
  _QWORD *v29;
  float v30;
  float v31;
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int64x2_t v51;
  _DWORD v52[2];
  _DWORD v53[2];
  _DWORD v54[2];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 164);
  v5 = *(_DWORD *)(a1 + 168);
  *(float *)&v54[1] = a3;
  v6 = *(_DWORD *)(a1 + 172);
  v7 = *(_DWORD *)(a1 + 176);
  v53[0] = v4;
  v53[1] = v6;
  v54[0] = 0;
  v52[0] = v5;
  v52[1] = v7;
  v51 = vdupq_n_s64(0x444B1AE4D6E2EF50uLL);
  v8 = *(float *)(a1 + 180) >= 0.0 || *(float *)(a1 + 184) >= 0.0;
  v9 = 0;
  v10 = (float *)(a2 + 8);
  v11 = 1;
  do
  {
    v12 = v11;
    v13 = *(float *)&v53[v9];
    if (v13 >= 0.0 || (*(float *)&v52[v9] >= 0.0 ? (v14 = 1) : (v14 = v8), v14 == 1))
    {
      v15 = *(_QWORD *)v10;
      if (!*(_QWORD *)v10)
        goto LABEL_37;
      v16 = *(float *)&v54[v9];
      v17 = v10;
      do
      {
        v18 = (uint64_t *)(v15 + 8);
        if (*(float *)(v15 + 32) >= v16)
        {
          v18 = (uint64_t *)v15;
          v17 = (float *)v15;
        }
        v15 = *v18;
      }
      while (*v18);
      if (v17 == v10 || v16 < v17[8])
      {
LABEL_37:
        if (quasar::gLogLevel >= 4)
        {
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v34 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"checkPPL ", 9);
          v33 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)": No CorpusStat", 15);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v34);
        }
        return 0;
      }
      v19 = *((_QWORD *)v17 + 5);
      v20 = *(double *)(v19 + 56);
      *(double *)&v51.i64[v9] = v20;
      v21 = v20;
      if (quasar::gLogLevel >= 4)
      {
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"checkPPL ", 9);
        v22 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ppl ", 6);
        v23 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" minPpl ", 8);
        v24 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" maxPpl ", 8);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v34);
        v21 = *(double *)(v19 + 56);
      }
      if (v21 == 1.0e21 || v13 >= 0.0 && v20 < v13)
        return 0;
      v25 = *(float *)&v52[v9];
      if (v25 >= 0.0 && v20 > v25)
        return 0;
    }
    v11 = 0;
    v9 = 1;
  }
  while ((v12 & 1) != 0);
  if (!v8)
    return 1;
  if (*(double *)v51.i64 == 0.0)
    return 0;
  v27 = *(double *)v51.i64 - *(double *)&v51.i64[1];
  v28 = (*(double *)v51.i64 - *(double *)&v51.i64[1]) / *(double *)v51.i64;
  if (quasar::gLogLevel >= 4)
  {
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"checkPPL: absImprovement ", 25);
    v29 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" relImprovement ", 16);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v34);
  }
  v30 = *(float *)(a1 + 180);
  if (v30 >= 0.0 && v27 < v30)
    return 0;
  v31 = *(float *)(a1 + 184);
  return v28 >= v31 || v31 < 0.0;
}

void sub_1ADF16264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmEvaluator::computeTextStats(uint64_t a1, uint64_t *a2, uint64_t *a3, quasar::CorpusStats *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v33;
  int64x2_t v35;
  __int128 *v36[3];
  void *__p[2];
  char v38;
  __int128 *v39;
  _QWORD *v40;
  _QWORD *v41;
  int64x2_t v42;
  __int128 v43;
  _BYTE v44[8];
  uint64_t v45;
  void *v46;
  char v47;
  void *v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (quasar::gLogLevel >= 4)
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"computing text stats for weight ", 32);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v50);
  }
  v8 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v35 = vdupq_n_s64(0x4076800000000000uLL);
    do
    {
      quasar::LmInfo::LmInfo((uint64_t)v44, *(_DWORD *)(a1 + 72), (__int128 *)(v8 + 8));
      v9 = *(_QWORD *)(a1 + 80);
      v50 = 0uLL;
      *(_QWORD *)&v51 = 0;
      v10 = *(double *)(a1 + 56);
      v11 = *(double *)(a1 + 64);
      v42 = v35;
      *(_QWORD *)&v43 = quasar::Location::knownOrFallback((uint64_t)&v42, v10, v11);
      *((_QWORD *)&v43 + 1) = v12;
      v13 = *(unsigned __int8 *)(a1 + 48);
      v15 = *a3;
      v14 = a3[1];
      v68 = *a3;
      v69 = v14;
      if (v14)
      {
        v16 = (unint64_t *)(v14 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v39 = 0;
      v40 = 0;
      v41 = 0;
      __p[0] = &v39;
      LOBYTE(__p[1]) = 0;
      v18 = operator new(0x10uLL);
      v39 = (__int128 *)v18;
      v40 = v18;
      v41 = v18 + 2;
      v19 = v69;
      *v18 = v15;
      v18[1] = v19;
      if (v19)
      {
        v20 = (unint64_t *)(v19 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v40 = v18 + 2;
      v22 = *(unsigned __int8 *)(a1 + 88);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      memset(v36, 0, sizeof(v36));
      BYTE2(v33) = 0;
      LOWORD(v33) = 0;
      v23 = quasar::FstLmScorer::computeLmScore(v9, (uint64_t)&v50, &v43, (__int128 *)(a1 + 24), (__int128 **)(v8 + 32), v13 != 0, (uint64_t)v44, (_QWORD **)&v39, v22 != 0, (__int128 *)__p, (int **)(v8 + 56), v33, 0, v36, 1);
      v67 = v36;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      if (v38 < 0)
        operator delete(__p[0]);
      __p[0] = &v39;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v68);
      v39 = &v50;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
      if (v23)
      {
        if (quasar::gLogLevel >= 6)
        {
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v50 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
          v24 = *(char *)(v8 + 31);
          if (v24 >= 0)
            v25 = v8 + 8;
          else
            v25 = *(_QWORD *)(v8 + 8);
          if (v24 >= 0)
            v26 = *(unsigned __int8 *)(v8 + 31);
          else
            v26 = *(_QWORD *)(v8 + 16);
          v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, v25, v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ", 1);
          std::ostream::operator<<();
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v50);
        }
        quasar::CorpusStats::addUtterance(a4, (quasar::LmInfo *)v44);
      }
      else if (quasar::gLogLevel >= 4)
      {
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v50 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
        v28 = *(char *)(v8 + 31);
        if (v28 >= 0)
          v29 = v8 + 8;
        else
          v29 = *(_QWORD *)(v8 + 8);
        if (v28 >= 0)
          v30 = *(unsigned __int8 *)(v8 + 31);
        else
          v30 = *(_QWORD *)(v8 + 16);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, v29, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" FAILED", 7);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v50);
      }
      if (v48)
      {
        v49 = v48;
        operator delete(v48);
      }
      if (v47 < 0)
        operator delete(v46);
      *(_QWORD *)&v50 = &v45;
      std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      v8 += 128;
    }
    while (v8 != v7);
  }
  if (quasar::CorpusStats::computePerplexity(a4))
  {
    if (*((_QWORD *)a4 + 3))
    {
      quasar::CorpusStats::print(a4);
      return 1;
    }
  }
  else if (quasar::gLogLevel >= 2)
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"perplexity calculation failed, numTokens is ", 44);
    std::ostream::operator<<();
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v50);
  }
  return 0;
}

void sub_1ADF166E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a52);
  _Unwind_Resume(a1);
}

void sub_1ADF167B4()
{
  JUMPOUT(0x1ADF167ACLL);
}

uint64_t quasar::LmEvaluator::optimizePerplexity(uint64_t a1, uint64_t **a2, int a3, uint64_t a4)
{
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  float v10;
  double v11;
  uint64_t *v12;
  uint64_t **v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t **v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t **v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  float *v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  void *__p;
  char *v45;
  unint64_t v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int64x2_t v51;
  __int128 v52;
  void *v53[2];
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 __src;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a4 + 8) != *(_QWORD *)a4)
  {
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    __src = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "bestWeights should be empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__src);
  }
  if (a3 == 1)
  {
    v9 = *a2;
    if (*a2 == (uint64_t *)(a2 + 1))
    {
      v10 = INFINITY;
    }
    else
    {
      v10 = INFINITY;
      v11 = 1.0e21;
      do
      {
        if (*(double *)(v9[5] + 56) < v11)
        {
          v10 = *((float *)v9 + 8);
          v11 = *(double *)(v9[5] + 56);
        }
        v12 = (uint64_t *)v9[1];
        if (v12)
        {
          do
          {
            v13 = (uint64_t **)v12;
            v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (uint64_t **)v9[2];
            v14 = *v13 == v9;
            v9 = (uint64_t *)v13;
          }
          while (!v14);
        }
        v9 = (uint64_t *)v13;
      }
      while (v13 != a2 + 1);
    }
    *(float *)&__src = 1.0 - v10;
    *((float *)&__src + 1) = v10;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a4, (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  }
  else
  {
    if (a3 != 2)
    {
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      __src = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "invalid optimization method");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__src);
    }
    v47 = *(_DWORD *)(a1 + 72);
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = vdupq_n_s64(0x444B1AE4D6E2EF50uLL);
    v52 = 0u;
    *(_OWORD *)v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0;
    __p = 0;
    v45 = 0;
    v46 = 0;
    LODWORD(v43) = 0;
    *(_QWORD *)&__src = &v43;
    v6 = std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(a2, (float *)&v43, (uint64_t)&std::piecewise_construct, (_DWORD **)&__src)[5];
    v7 = v45;
    if ((unint64_t)v45 >= v46)
    {
      v15 = (v45 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v16 = (uint64_t)(v46 - (_QWORD)__p) >> 2;
      if (v16 <= v15 + 1)
        v16 = v15 + 1;
      if (v46 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v46, v17);
      else
        v18 = 0;
      v19 = (uint64_t **)&v18[8 * v15];
      v20 = &v18[8 * v17];
      *v19 = v6;
      v8 = (char *)(v19 + 1);
      v22 = (char *)__p;
      v21 = v45;
      if (v45 != __p)
      {
        do
        {
          v23 = (uint64_t *)*((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v19 = v23;
        }
        while (v21 != v22);
        v21 = (char *)__p;
      }
      __p = v19;
      v45 = v8;
      v46 = (unint64_t)v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v45 = v6;
      v8 = v7 + 8;
    }
    v45 = v8;
    LODWORD(v43) = 1065353216;
    *(_QWORD *)&__src = &v43;
    v24 = std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(a2, (float *)&v43, (uint64_t)&std::piecewise_construct, (_DWORD **)&__src)[5];
    v25 = v45;
    if ((unint64_t)v45 >= v46)
    {
      v27 = (v45 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v27 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v28 = (uint64_t)(v46 - (_QWORD)__p) >> 2;
      if (v28 <= v27 + 1)
        v28 = v27 + 1;
      if (v46 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      if (v29)
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v46, v29);
      else
        v30 = 0;
      v31 = (uint64_t **)&v30[8 * v27];
      v32 = &v30[8 * v29];
      *v31 = v24;
      v26 = (char *)(v31 + 1);
      v34 = (char *)__p;
      v33 = v45;
      if (v45 != __p)
      {
        do
        {
          v35 = (uint64_t *)*((_QWORD *)v33 - 1);
          v33 -= 8;
          *--v31 = v35;
        }
        while (v33 != v34);
        v33 = (char *)__p;
      }
      __p = v31;
      v45 = v26;
      v46 = (unint64_t)v32;
      if (v33)
        operator delete(v33);
    }
    else
    {
      *(_QWORD *)v45 = v24;
      v26 = v25 + 8;
    }
    v45 = v26;
    if (!quasar::CorpusStats::interpolateCorpusStatsWithBestWeights((char **)&__p, a4, (uint64_t)&v47))
    {
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      __src = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"best weight estimation for perplexity interpolation failed", 58);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__src);
    }
    v36 = *(float **)a4;
    if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 != 8
      || (v10 = v36[1], v37 = *v36 + v10, v37 != 1.0)
      && (COERCE_INT(fabs(v37 + -1.0)) > 2139095039 || fabsf(v37 + -1.0) > (float)((float)(fabsf(v37) + 1.0) * 0.001)))
    {
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      __src = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"best weights have wrong size or don't sum up to one", 51);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__src);
    }
    std::make_unique[abi:ne180100]<quasar::CorpusStats,quasar::CorpusStats&>((uint64_t)&v47, &v43);
    *(float *)&__src = v10;
    v38 = v43;
    v43 = 0;
    *((_QWORD *)&__src + 1) = v38;
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::__emplace_unique_key_args<float,std::pair<float const,std::unique_ptr<quasar::CorpusStats>>>(a2, (float *)&__src, (uint64_t)&__src);
    v39 = *((_QWORD *)&__src + 1);
    *((_QWORD *)&__src + 1) = 0;
    if (v39)
      std::default_delete<quasar::CorpusStats>::operator()[abi:ne180100]((uint64_t)&__src + 8, v39);
    v40 = v43;
    v43 = 0;
    if (v40)
      std::default_delete<quasar::CorpusStats>::operator()[abi:ne180100]((uint64_t)&v43, v40);
    if (__p)
    {
      v45 = (char *)__p;
      operator delete(__p);
    }
    *(_QWORD *)&__src = &v55;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
    if (v53[1])
    {
      *(void **)&v54 = v53[1];
      operator delete(v53[1]);
    }
    *(_QWORD *)&__src = &v52;
    std::vector<quasar::LmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
  }
  if ((LODWORD(v10) & 0x7FFFFFFFu) > 0x7F7FFFFF || v10 < 0.0 || v10 > 1.0)
  {
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    __src = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "model selection returned an invalid weight");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__src);
  }
  if (quasar::gLogLevel >= 4)
  {
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    __src = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"best weight: ", 13);
    v41 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" PPL: ", 6);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__src);
  }
  return 1;
}

void sub_1ADF16EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
    operator delete(__p);
  quasar::CorpusStats::~CorpusStats((quasar::CorpusStats *)&a14);
  _Unwind_Resume(a1);
}

void sub_1ADF16ECC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1ADF16EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a33);
  _Unwind_Resume(a1);
}

_QWORD *std::make_unique[abi:ne180100]<quasar::CorpusStats,quasar::CorpusStats&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *result;

  v4 = operator new();
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 48) = v5;
  v6 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 16) = v7;
  *(_QWORD *)(v4 + 72) = 0;
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  std::vector<quasar::LmInfo>::__init_with_size[abi:ne180100]<quasar::LmInfo*,quasar::LmInfo*>((_QWORD *)(v4 + 72), v6, v8, 0x4EC4EC4EC4EC4EC5 * ((v8 - v6) >> 3));
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v4 + 96), *(const void **)(a1 + 96), *(_QWORD *)(a1 + 104), (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2);
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  result = std::vector<std::vector<unsigned long long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long long>*,std::vector<unsigned long long>*>((_QWORD *)(v4 + 120), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3));
  *a2 = v4;
  return result;
}

void sub_1ADF16FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 104) = v5;
    operator delete(v5);
  }
  std::vector<quasar::LmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MEMORY[0x1AF44D190](v2, 0x1030C4063630190);
  _Unwind_Resume(a1);
}

void quasar::CorpusStats::~CorpusStats(quasar::CorpusStats *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 120);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 72);
  std::vector<quasar::LmInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void quasar::LmEvaluator::~LmEvaluator(quasar::LmEvaluator *this)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::vector<quasar::LmInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<quasar::LmInfo>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

float std::__split_buffer<float>::push_back(_QWORD *a1, float *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  char *v25;
  float result;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 1;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1[4], v16);
      v19 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
      v20 = (int *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFFCLL];
        v22 = 4 * (v21 >> 2);
        v23 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
          v24 = *v20++;
          *(_DWORD *)v23 = v24;
          v23 += 4;
          v22 -= 4;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[4 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 2;
      v8 = v6 >> 2 < -1;
      v9 = (v6 >> 2) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-4 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-4 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[4 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  result = *a2;
  *(float *)v4 = *a2;
  a1[2] = v4 + 4;
  return result;
}

void std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::destroy(a1, a2[1]);
    v4 = a2[5];
    a2[5] = 0;
    if (v4)
      std::default_delete<quasar::CorpusStats>::operator()[abi:ne180100]((uint64_t)(a2 + 5), v4);
    operator delete(a2);
  }
}

void std::default_delete<quasar::CorpusStats>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 120);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
    v3 = *(void **)(a2 + 96);
    if (v3)
    {
      *(_QWORD *)(a2 + 104) = v3;
      operator delete(v3);
    }
    v4 = (void **)(a2 + 72);
    std::vector<quasar::LmInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x1AF44D190](a2, 0x1030C4063630190);
  }
}

uint64_t **std::__tree<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::__map_value_compare<float,std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>,std::less<float>,true>,std::allocator<std::__value_type<float,std::unique_ptr<quasar::CorpusStats>>>>::__emplace_unique_key_args<float,std::pair<float const,std::unique_ptr<quasar::CorpusStats>>>(uint64_t **a1, float *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  float v7;
  uint64_t **v8;
  float v9;
  _DWORD *v10;
  uint64_t v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((float *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v5;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x30uLL);
    v10[8] = *(_DWORD *)a3;
    v11 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *((_QWORD *)v10 + 5) = v11;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_QWORD *std::vector<quasar::LmInfo>::__init_with_size[abi:ne180100]<quasar::LmInfo*,quasar::LmInfo*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<kaldi::ChosenArc>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmInfo>,quasar::LmInfo*,quasar::LmInfo*,quasar::LmInfo*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADF17484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::LmInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmInfo>,quasar::LmInfo*,quasar::LmInfo*,quasar::LmInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<quasar::LmInfo>::construct[abi:ne180100]<quasar::LmInfo,quasar::LmInfo&>(a1, v4, v6);
      v6 += 104;
      v4 = v12 + 104;
      v12 += 104;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,quasar::LmInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1ADF17538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,quasar::LmInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<quasar::LmInfo>::construct[abi:ne180100]<quasar::LmInfo,quasar::LmInfo&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  __int128 v6;
  uint64_t v7;
  char v8;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  std::vector<quasar::TokenLmInfo>::__init_with_size[abi:ne180100]<quasar::TokenLmInfo*,quasar::TokenLmInfo*>((std::string *)(a2 + 8), *(__int128 **)(a3 + 8), *(__int128 **)(a3 + 16), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3));
  v5 = *(_DWORD *)(a3 + 32);
  *(_BYTE *)(a2 + 36) = *(_BYTE *)(a3 + 36);
  *(_DWORD *)(a2 + 32) = v5;
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a2 + 40), *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 40);
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
    *(_OWORD *)(a2 + 40) = v6;
  }
  v7 = *(_QWORD *)(a3 + 64);
  v8 = *(_BYTE *)(a3 + 72);
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 72) = v8;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a2 + 80), *(const void **)(a3 + 80), *(_QWORD *)(a3 + 88), (uint64_t)(*(_QWORD *)(a3 + 88) - *(_QWORD *)(a3 + 80)) >> 2);
}

void sub_1ADF17624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,quasar::LmInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,quasar::LmInfo*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmInfo>,quasar::LmInfo*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 104;
      std::allocator<quasar::LmInfo>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

_QWORD *std::vector<std::vector<unsigned long long>>::__init_with_size[abi:ne180100]<std::vector<unsigned long long>*,std::vector<unsigned long long>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::vector<unsigned long long>*,std::vector<unsigned long long>*,std::vector<unsigned long long>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADF1773C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::vector<unsigned long long>*,std::vector<unsigned long long>*,std::vector<unsigned long long>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::vector<unsigned long long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADF177F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::vector<unsigned long long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADF17868(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::vector<unsigned long long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void sub_1ADF17A1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1ADF17ABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t tknLogString(const char *a1)
{
  fputs(a1, (FILE *)*MEMORY[0x1E0C80C10]);
  return fflush((FILE *)*MEMORY[0x1E0C80C20]);
}

void quasar::E2EAsrConfidence::finishInit(quasar::E2EAsrConfidence *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void **v25;

  if (*((char *)this + 471) < 0)
  {
    if (*((_QWORD *)this + 57))
    {
LABEL_3:
      *((_BYTE *)this + 504) = 1;
      v2 = *((_DWORD *)this + 124);
      if (v2 < 0)
      {
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v13 = 0u;
        v14 = 0u;
        v11 = 0u;
        v12 = 0u;
        v9 = 0u;
        v10 = 0u;
        v8 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v8, "num-input-hyps must be provided for using model-based confidence");
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
      }
      if ((*((_DWORD *)this + 125) & 0x80000000) != 0)
        *((_DWORD *)this + 125) = v2;
      v3 = operator new();
      kaldi::quasar::LogisticRegressionModel::LogisticRegressionModel(v3, (char *)this + 448);
      v4 = *((_QWORD *)this + 64);
      *((_QWORD *)this + 64) = v3;
      if (v4)
        std::default_delete<kaldi::quasar::LogisticRegressionModel>::operator()[abi:ne180100]((uint64_t)this + 512, v4);
      if (*((char *)this + 495) < 0)
      {
        if (!*((_QWORD *)this + 60))
          goto LABEL_11;
      }
      else if (!*((_BYTE *)this + 495))
      {
LABEL_11:
        v5 = *((_QWORD *)this + 64);
        *(_QWORD *)&v9 = 0;
        v8 = 0uLL;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v8, *(__int128 **)(v5 + 32), *(__int128 **)(v5 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 40) - *(_QWORD *)(v5 + 32)) >> 3));
        v6 = operator new();
        kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ConfidenceFeatureExtractor(v6, *((unsigned int *)this + 124), &v8, *((unsigned int *)this + 125), (char *)this + 528, 0.00001);
        goto LABEL_15;
      }
      kaldi::quasar::ReadUnigramFrequencies<std::string>((uint64_t)this + 472, (uint64_t)this + 528);
      goto LABEL_11;
    }
  }
  else if (*((_BYTE *)this + 471))
  {
    goto LABEL_3;
  }
  if (!*((_BYTE *)this + 505))
    return;
  v8 = 0uLL;
  *(_QWORD *)&v9 = 0;
  v6 = operator new();
  kaldi::quasar::ConfidenceFeatureExtractor<std::string>::ConfidenceFeatureExtractor(v6, *((unsigned int *)this + 124), &v8, *((unsigned int *)this + 125), (char *)this + 528, 0.00001);
LABEL_15:
  v7 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = v6;
  if (v7)
    std::default_delete<kaldi::quasar::ConfidenceFeatureExtractor<std::string>>::operator()[abi:ne180100]((uint64_t)this + 520, v7);
  v25 = (void **)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
}

uint64_t quasar::E2EAsrConfidence::runImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t i;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::vector<std::wstring> *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  float v59;
  float v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  double **v64;
  double *v65;
  double *v66;
  float *v67;
  double v68;
  float v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  const std::string *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  float TokenWeight;
  uint64_t v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD **v100;
  unint64_t v101;
  _QWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  std::string::size_type *p_size;
  uint64_t v119;
  _QWORD *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  std::string v129;
  _QWORD v130[3];
  void *v131[3];
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135[3];
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139[3];
  __int128 __p;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  _QWORD v157[3];
  _QWORD *v158;
  _QWORD v159[3];
  _QWORD *v160;
  std::string v161;
  std::string *v162;
  _BYTE v163[24];
  _BYTE *v164;
  void *v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(*(_QWORD *)a3 + 352);
  if (v4)
  {
    v5 = a3;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3);
    if (v7 == 1)
    {
      if (*(_QWORD *)(*v4 + 8) == *(_QWORD *)*v4)
      {
        if (quasar::gLogLevel < 5)
          return 0;
        v155 = 0u;
        v156 = 0u;
        v153 = 0u;
        v154 = 0u;
        v151 = 0u;
        v152 = 0u;
        v149 = 0u;
        v150 = 0u;
        v147 = 0u;
        v148 = 0u;
        v145 = 0u;
        v146 = 0u;
        v143 = 0u;
        v144 = 0u;
        v141 = 0u;
        v142 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Only one result in resultChoices and its empty. Skipping confidence estimation", 78);
        goto LABEL_6;
      }
    }
    else if (!v7)
    {
      goto LABEL_4;
    }
    if ((*(_DWORD *)(a1 + 496) & 0x80000000) != 0)
    {
      *(_DWORD *)(a1 + 496) = v7;
      if (*(_BYTE *)(a1 + 505))
        **(_DWORD **)(a1 + 520) = v7;
    }
    v8 = *(_DWORD *)(a1 + 500);
    v9 = *(_DWORD *)(*(_QWORD *)a4 + 16);
    if (v8 < 0 || v8 > v9)
    {
      if (v9 >= *(_DWORD *)(a1 + 496))
        v9 = *(_DWORD *)(a1 + 496);
      *(_DWORD *)(a1 + 500) = v9;
      if (*(_BYTE *)(a1 + 505))
        *(_DWORD *)(*(_QWORD *)(a1 + 520) + 4) = v9;
    }
    std::vector<std::vector<std::string>>::vector(v139, *(int *)(a1 + 496));
    v127 = v5;
    v128 = a1;
    v10 = *v4;
    v11 = v4[1];
    v12 = -1431655765 * ((unint64_t)(v11 - *v4) >> 3);
    v13 = *(_DWORD *)(a1 + 496);
    if (v13 < v12)
      v12 = *(_DWORD *)(a1 + 496);
    if (v12 >= 1)
    {
      for (i = 0; i < v27; ++i)
      {
        v15 = *(_QWORD *)(v10 + 24 * i);
        if (*(_QWORD *)(v10 + 24 * i + 8) != v15)
        {
          v16 = 0;
          do
          {
            v17 = v15 + 224 * v16;
            v18 = *(__int128 **)(v17 + 120);
            if (*(__int128 **)(v17 + 128) == v18)
            {
              v23 = (uint64_t *)(v139[0] + 24 * i);
              v24 = v23 + 1;
              v25 = v23[1];
              if (v25 >= v23[2])
              {
                v26 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v23, (__int128 *)v17);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v23, (__int128 *)v17);
                v26 = v25 + 24;
              }
              *v24 = v26;
              v10 = *v4;
              v15 = *(_QWORD *)(*v4 + 24 * i);
            }
            else
            {
              do
              {
                v19 = (uint64_t *)(v139[0] + 24 * i);
                v20 = v19 + 1;
                v21 = v19[1];
                if (v21 >= v19[2])
                {
                  v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v19, v18);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v19, v18);
                  v22 = v21 + 24;
                }
                *v20 = v22;
                v18 += 2;
                v10 = *v4;
                v15 = *(_QWORD *)(*v4 + 24 * i);
              }
              while (v18 != *(__int128 **)(v15 + 224 * v16 + 128));
            }
            ++v16;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v10 + 24 * i + 8) - v15) >> 5) > v16);
          v11 = v4[1];
          v5 = v127;
          v13 = *(_DWORD *)(a1 + 496);
        }
        v27 = -1431655765 * ((unint64_t)(v11 - v10) >> 3);
        if (v13 < v27)
          v27 = v13;
      }
    }
    v136 = 0;
    v137 = 0;
    v138 = 0;
    v28 = a1;
    if (*(_BYTE *)(a1 + 504) || *(_BYTE *)(a1 + 505))
    {
      v29 = **(double ***)(*(_QWORD *)v5 + 392);
      v30 = *(_QWORD *)(a1 + 520);
      __p = 0uLL;
      *(_QWORD *)&v141 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((char *)&__p, v29, &v29[v13], v13);
      kaldi::quasar::ConfidenceFeatureExtractor<std::string>::GetConfidenceFeaturesFromNBest(v30, v139, (uint64_t)&__p, *(_DWORD *)(*(_QWORD *)v5 + 576), &v136);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v31 = (_QWORD *)(*(_QWORD *)v5 + 224);
      if (!*v31)
      {
        v32 = operator new(0x30uLL);
        v32[2] = 0;
        *v32 = &unk_1E5D45820;
        v32[1] = 0;
        v32[4] = 0;
        v32[5] = 0;
        v32[3] = 0;
        *(_QWORD *)&__p = v32 + 3;
        *((_QWORD *)&__p + 1) = v32;
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v31, &__p);
        v33 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v34 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v36 = *(_QWORD *)(a1 + 520);
        *(_QWORD *)&v141 = 0;
        __p = 0uLL;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__p, *(__int128 **)(v36 + 56), *(__int128 **)(v36 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v36 + 64) - *(_QWORD *)(v36 + 56)) >> 3));
        v37 = *(std::vector<std::wstring> **)(*(_QWORD *)v5 + 224);
        std::vector<std::string>::__vdeallocate(v37);
        *(_OWORD *)&v37->__begin_ = __p;
        v37->__end_cap_.__value_ = (std::wstring *)v141;
        __p = 0uLL;
        *(_QWORD *)&v141 = 0;
        v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
      }
      v38 = operator new(0x30uLL);
      v38[2] = 0;
      *v38 = &unk_1E5D45660;
      v38[1] = 0;
      v38[4] = 0;
      v38[5] = 0;
      v38[3] = 0;
      *(_QWORD *)&__p = v38 + 3;
      *((_QWORD *)&__p + 1) = v38;
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*(_QWORD *)v5 + 240, &__p);
      v39 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v40 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(uint64_t **)(*(_QWORD *)v5 + 240);
      if (v42 != &v136)
        std::vector<kaldi::Matrix<float>>::__assign_with_size[abi:ne180100]<kaldi::Matrix<float>*,kaldi::Matrix<float>*>((uint64_t)v42, v136, v137, 0xCCCCCCCCCCCCCCCDLL * ((v137 - v136) >> 3));
      v43 = operator new(0x30uLL);
      v43[2] = 0;
      *v43 = &unk_1E5D45740;
      v43[1] = 0;
      v43[4] = 0;
      v43[5] = 0;
      v43[3] = 0;
      *(_QWORD *)&__p = v43 + 3;
      *((_QWORD *)&__p + 1) = v43;
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*(_QWORD *)v5 + 256, &__p);
      v44 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v45 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (*(_BYTE *)(a1 + 504))
      {
        v47 = v136;
        if (v137 != v136)
        {
          v48 = 0;
          do
          {
            __p = 0uLL;
            *(_QWORD *)&v141 = 0;
            v49 = *(_QWORD *)(v128 + 512);
            v50 = *(_QWORD *)(v128 + 520);
            memset(&v161, 0, sizeof(v161));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v161, *(__int128 **)(v50 + 56), *(__int128 **)(v50 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v50 + 64) - *(_QWORD *)(v50 + 56)) >> 3));
            kaldi::quasar::LogisticRegressionModel::GetOutput(v49, v47 + 40 * v48, (unsigned __int8 **)&v161, &__p);
            v135[0] = &v161;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v135);
            v51 = (uint64_t *)(*v4 + 24 * v48);
            v52 = *v51;
            v53 = v51[1];
            if (v52 != v53)
            {
              v54 = 0;
              v55 = __p;
              do
              {
                v57 = *(_QWORD *)(v52 + 120);
                v56 = *(_QWORD *)(v52 + 128);
                if (v56 == v57)
                {
                  *(float *)(v52 + 40) = roundf(*(float *)(v55 + 4 * v54++) * 1000.0);
                }
                else
                {
                  v58 = (float *)(v55 + 4 * v54);
                  v59 = 1.0;
                  do
                  {
                    *(float *)(v57 + 24) = roundf(*v58 * 1000.0);
                    v60 = *v58++;
                    v59 = v59 * v60;
                    v57 += 32;
                    ++v54;
                  }
                  while (v57 != v56);
                  *(float *)(v52 + 40) = roundf(v59 * 1000.0);
                }
                v52 += 224;
              }
              while (v52 != v53);
            }
            v61 = *(_QWORD *)(*(_QWORD *)v127 + 256);
            v62 = *(_QWORD *)(v61 + 8);
            if (v62 >= *(_QWORD *)(v61 + 16))
            {
              v63 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(*(uint64_t **)(*(_QWORD *)v127 + 256), (uint64_t)&__p);
            }
            else
            {
              std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(*(_QWORD *)(*(_QWORD *)v127 + 256), (uint64_t)&__p);
              v63 = v62 + 24;
            }
            *(_QWORD *)(v61 + 8) = v63;
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            ++v48;
            v47 = v136;
          }
          while (0xCCCCCCCCCCCCCCCDLL * ((v137 - v136) >> 3) > v48);
        }
LABEL_154:
        *(_QWORD *)&__p = &v136;
        std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        *(_QWORD *)&__p = v139;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        return 0;
      }
    }
    std::vector<float>::vector(v135, (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 392) + 8) - **(_QWORD **)(*(_QWORD *)v5 + 392)) >> 3);
    v64 = *(double ***)(*(_QWORD *)v5 + 392);
    v65 = *v64;
    v66 = v64[1];
    if (v65 != v66)
    {
      v67 = (float *)v135[0];
      do
      {
        v68 = *v65++;
        v69 = v68;
        *v67++ = -v69;
      }
      while (v65 != v66);
    }
    kaldi::quasar::ApplySoftMax((float **)v135);
    v159[0] = &unk_1E5D3D670;
    v160 = v159;
    v157[0] = &unk_1E5D3D6C8;
    v158 = v157;
    kaldi::quasar::ConfusionNetwork<std::string>::ConfusionNetwork(&v161, v139, v135, v159, v157);
    v70 = v158;
    if (v158 == v157)
    {
      v71 = 4;
      v70 = v157;
    }
    else
    {
      if (!v158)
        goto LABEL_89;
      v71 = 5;
    }
    (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_89:
    v72 = v160;
    if (v160 == v159)
    {
      v73 = 4;
      v72 = v159;
    }
    else
    {
      if (!v160)
        goto LABEL_94;
      v73 = 5;
    }
    (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_94:
    std::vector<std::vector<float>>::resize(*(uint64_t **)(*(_QWORD *)v5 + 256), *(int *)(a1 + 500));
    v132 = 0;
    v133 = 0;
    v134 = 0;
    std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__init_with_size[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*>(&v132, v168, v169, 0x2E8BA2E8BA2E8BA3 * ((v169 - v168) >> 4));
    v74 = *(int *)(a1 + 496);
    *(_QWORD *)&__p = 0;
    std::vector<unsigned long>::vector(v131, v74, &__p);
    v75 = *(int *)(a1 + 496);
    __p = 0uLL;
    *(_QWORD *)&v141 = 0;
    std::vector<std::vector<unsigned long>>::vector(v130, v75, (uint64_t)&__p);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    v77 = v132;
    v76 = v133;
    if (v133 != v132)
    {
      v78 = 0;
      LODWORD(v79) = *(_DWORD *)(a1 + 500);
      do
      {
        if ((int)v79 >= 1)
        {
          v80 = 0;
          do
          {
            if ((kaldi::quasar::ConfusionNetworkSlot<std::string>::HasTokenFromSequence(v132 + 176 * v78, v80) & 1) != 0)
            {
              memset(&v129, 0, sizeof(v129));
              v81 = *((_QWORD *)v131[0] + v80);
              v82 = *(_QWORD *)(*v4 + 24 * v80);
              v83 = *(_QWORD *)(v82 + 224 * v81 + 120);
              v84 = *(_QWORD *)(v82 + 224 * v81 + 128);
              if (v84 == v83)
              {
                v89 = (const std::string *)(v82 + 224 * v81);
              }
              else
              {
                v85 = (uint64_t *)(v130[0] + 24 * v80);
                v86 = *v85;
                if (v85[1] == *v85)
                {
                  v87 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*v4 + 24 * v80 + 8) - v82) >> 5);
                  *(_QWORD *)&__p = 0;
                  std::vector<unsigned long>::resize((uint64_t)v85, v87, &__p);
                  v81 = *((_QWORD *)v131[0] + v80);
                  v86 = *(_QWORD *)(v130[0] + 24 * v80);
                  v83 = *(_QWORD *)(*(_QWORD *)(*v4 + 24 * v80) + 224 * v81 + 120);
                  v84 = *(_QWORD *)(*(_QWORD *)(*v4 + 24 * v80) + 224 * v81 + 128);
                }
                v88 = *(_QWORD *)(v86 + 8 * v81);
                if (v88 >= (v84 - v83) >> 5)
                {
                  v155 = 0u;
                  v156 = 0u;
                  v153 = 0u;
                  v154 = 0u;
                  v151 = 0u;
                  v152 = 0u;
                  v149 = 0u;
                  v150 = 0u;
                  v147 = 0u;
                  v148 = 0u;
                  v145 = 0u;
                  v146 = 0u;
                  v143 = 0u;
                  v144 = 0u;
                  v141 = 0u;
                  v142 = 0u;
                  __p = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Subword token index exceeds the number of subwords in the token", 63);
                  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
                }
                v89 = (const std::string *)(v83 + 32 * v88);
              }
              std::string::operator=(&v129, v89);
              if (!kaldi::quasar::ConfusionNetworkSlot<std::string>::HasToken(v132 + 176 * v78, (uint64_t)&v129))
              {
                v155 = 0u;
                v156 = 0u;
                v153 = 0u;
                v154 = 0u;
                v151 = 0u;
                v152 = 0u;
                v149 = 0u;
                v150 = 0u;
                v147 = 0u;
                v148 = 0u;
                v145 = 0u;
                v146 = 0u;
                v143 = 0u;
                v144 = 0u;
                v141 = 0u;
                v142 = 0u;
                __p = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Hypothesis token (", 18);
                v122 = *(_QWORD *)(*v4 + 24 * v80) + 224 * *((_QWORD *)v131[0] + v80);
                v123 = *(char *)(v122 + 23);
                if (v123 >= 0)
                  v124 = *(_QWORD *)(*v4 + 24 * v80) + 224 * *((_QWORD *)v131[0] + v80);
                else
                  v124 = *(_QWORD *)v122;
                if (v123 >= 0)
                  v125 = *(unsigned __int8 *)(v122 + 23);
                else
                  v125 = *(_QWORD *)(v122 + 8);
                v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, v124, v125);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)") does not match any arc in the confusion network slot", 54);
                quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
              }
              v90 = *((_QWORD *)v131[0] + v80);
              v91 = v132 + 176 * v78;
              v92 = *(_QWORD *)(v139[0] + 24 * v80) + 24 * v90;
              if (*(_QWORD *)(*(_QWORD *)(*v4 + 24 * v80) + 224 * v90 + 128) == *(_QWORD *)(*(_QWORD *)(*v4 + 24 * v80)
                                                                                           + 224 * v90
                                                                                           + 120))
              {
                TokenWeight = kaldi::quasar::ConfusionNetworkSlot<std::string>::GetTokenWeight(v91, v92);
                v94 = *((_QWORD *)v131[0] + v80);
                v95 = *(_QWORD *)(*v4 + 24 * v80);
                *(float *)(v95 + 224 * v94 + 40) = roundf(TokenWeight * 1000.0);
              }
              else
              {
                v93 = kaldi::quasar::ConfusionNetworkSlot<std::string>::GetTokenWeight(v91, v92);
                v94 = *((_QWORD *)v131[0] + v80);
                v95 = *(_QWORD *)(*v4 + 24 * v80);
                *(float *)(*(_QWORD *)(v95 + 224 * v94 + 120)
                         + 32 * *(_QWORD *)(*(_QWORD *)(v130[0] + 24 * v80) + 8 * v94)
                         + 24) = roundf(v93 * 1000.0);
              }
              v97 = **(_QWORD **)(*(_QWORD *)v5 + 256) + 24 * v80;
              v98 = (_DWORD *)(v95 + 224 * v94 + 40);
              v100 = (_DWORD **)(v97 + 8);
              v99 = *(_DWORD **)(v97 + 8);
              v102 = (_QWORD *)(v97 + 16);
              v101 = *(_QWORD *)(v97 + 16);
              if ((unint64_t)v99 >= v101)
              {
                v104 = *(_DWORD **)v97;
                v105 = ((uint64_t)v99 - *(_QWORD *)v97) >> 2;
                v106 = v105 + 1;
                if ((unint64_t)(v105 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v107 = v101 - (_QWORD)v104;
                if (v107 >> 1 > v106)
                  v106 = v107 >> 1;
                if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
                  v108 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v108 = v106;
                if (v108)
                {
                  v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v102, v108);
                  v99 = *v100;
                  v104 = *(_DWORD **)v97;
                }
                else
                {
                  v109 = 0;
                }
                v110 = &v109[4 * v105];
                *(_DWORD *)v110 = *v98;
                v103 = v110 + 4;
                if (v99 == v104)
                {
                  v5 = v127;
                }
                else
                {
                  v5 = v127;
                  do
                  {
                    v111 = *--v99;
                    *((_DWORD *)v110 - 1) = v111;
                    v110 -= 4;
                  }
                  while (v99 != v104);
                }
                *(_QWORD *)v97 = v110;
                *v100 = v103;
                *v102 = &v109[4 * v108];
                if (v104)
                  operator delete(v104);
              }
              else
              {
                *v99 = *v98;
                v103 = v99 + 1;
              }
              v28 = v128;
              *v100 = v103;
              v112 = *((_QWORD *)v131[0] + v80);
              v113 = *(_QWORD *)(*(_QWORD *)(*v4 + 24 * v80) + 224 * v112 + 128)
                   - *(_QWORD *)(*(_QWORD *)(*v4 + 24 * v80) + 224 * v112 + 120);
              if (v113
                && (v114 = *(_QWORD *)(v130[0] + 24 * v80), v115 = *(_QWORD *)(v114 + 8 * v112) + 1, v115 != v113 >> 5))
              {
                *(_QWORD *)(v114 + 8 * v112) = v115;
              }
              else
              {
                *((_QWORD *)v131[0] + v80) = v112 + 1;
              }
              if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v129.__r_.__value_.__l.__data_);
            }
            ++v80;
            v79 = *(int *)(v28 + 500);
          }
          while (v80 < v79);
          v77 = v132;
          v76 = v133;
        }
        ++v78;
      }
      while (0x2E8BA2E8BA2E8BA3 * ((v76 - v77) >> 4) > v78);
    }
    *(_QWORD *)&__p = v130;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v131[0])
    {
      v131[1] = v131[0];
      operator delete(v131[0]);
    }
    *(_QWORD *)&__p = &v132;
    std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    *(_QWORD *)&__p = &v168;
    std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    *(_QWORD *)&__p = &v167;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v165)
    {
      v166 = v165;
      operator delete(v165);
    }
    v116 = v164;
    if (v164 == v163)
    {
      v117 = 4;
      v116 = v163;
    }
    else
    {
      if (!v164)
        goto LABEL_147;
      v117 = 5;
    }
    (*(void (**)(void))(*v116 + 8 * v117))();
LABEL_147:
    p_size = (std::string::size_type *)v162;
    if (v162 == (std::string *)&v161.__r_.__value_.__r.__words[1])
    {
      v119 = 4;
      p_size = &v161.__r_.__value_.__l.__size_;
    }
    else
    {
      if (!v162)
        goto LABEL_152;
      v119 = 5;
    }
    (*(void (**)(void))(*p_size + 8 * v119))();
LABEL_152:
    if (v135[0])
    {
      v135[1] = v135[0];
      operator delete(v135[0]);
    }
    goto LABEL_154;
  }
LABEL_4:
  if (quasar::gLogLevel >= 5)
  {
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v151 = 0u;
    v152 = 0u;
    v149 = 0u;
    v150 = 0u;
    v147 = 0u;
    v148 = 0u;
    v145 = 0u;
    v146 = 0u;
    v143 = 0u;
    v144 = 0u;
    v141 = 0u;
    v142 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"No result choices available. Skipping confidence estimation", 59);
LABEL_6:
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
  }
  return 0;
}

void sub_1ADF18C6C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADF18D0CLL);
}

void sub_1ADF18C80()
{
  JUMPOUT(0x1ADF18C9CLL);
}

void sub_1ADF18C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char *a36)
{
  uint64_t v36;

  if (a17 < 0)
    operator delete(__p);
  a36 = &a18;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  a36 = &a24;
  std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  kaldi::quasar::ConfusionNetwork<std::string>::~ConfusionNetwork(v36 - 248);
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  a36 = &a30;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  a36 = &a33;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  _Unwind_Resume(a1);
}

void quasar::E2EAsrConfidence::registerParams(quasar::E2EAsrConfidence *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "e2e-asr-confidence");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 171, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "confidence-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Filename for confidence model file. Each line must have the format: intercept <value> OR, <FEATURE> <WEIGHT> [ <FEATURE-MEAN> [ <FEATURE-STD> ] ](feature mean and std values are both optional, could be provided for feature normalization)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 0, 171, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "token-unigram-freqs");
  std::string::basic_string[abi:ne180100]<0>(v4, "Name of the file with token unigram frequencies");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 472, (uint64_t)v4, 0, 171, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num-input-hyps");
  std::string::basic_string[abi:ne180100]<0>(v4, "number of hypotheses to expect as input to the confidence feature extractor");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 496, (uint64_t)v4, 0, 171, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num-output-hyps");
  std::string::basic_string[abi:ne180100]<0>(v4, "number of hypotheses to produce confidence values for");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 500, (uint64_t)v4, 0, 171, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "extract-features");
  std::string::basic_string[abi:ne180100]<0>(v4, "Extract confidence features (even if model is not provided)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 505, (uint64_t)v4, 0, 195, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1ADF18F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::E2EAsrConfidence::~E2EAsrConfidence(quasar::E2EAsrConfidence *this)
{
  quasar::E2EAsrConfidence::~E2EAsrConfidence(this);
  JUMPOUT(0x1AF44D190);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E5D35CB0;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 528);
  v2 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v2)
    std::default_delete<kaldi::quasar::ConfidenceFeatureExtractor<std::string>>::operator()[abi:ne180100]((uint64_t)this + 520, v2);
  v3 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v3)
    std::default_delete<kaldi::quasar::LogisticRegressionModel>::operator()[abi:ne180100]((uint64_t)this + 512, v3);
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  quasar::Decoder::~Decoder((void **)this);
}

void std::default_delete<kaldi::quasar::LogisticRegressionModel>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  if (a2)
  {
    v3 = *(void **)(a2 + 80);
    if (v3)
    {
      *(_QWORD *)(a2 + 88) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a2 + 56);
    if (v4)
    {
      *(_QWORD *)(a2 + 64) = v4;
      operator delete(v4);
    }
    v6 = (void **)(a2 + 32);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    v5 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x1AF44D190](a2, 0x10A0C40763862BBLL);
  }
}

uint64_t std::default_delete<kaldi::quasar::ConfidenceFeatureExtractor<std::string>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 56);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 8);
    return MEMORY[0x1AF44D190](a2, 0x10A0C40C6F6957FLL);
  }
  return result;
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>(char *result, double *a2, double *a3, unint64_t a4)
{
  char *v6;
  float *v7;
  double v8;
  float v9;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = (float *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      v9 = v8;
      *v7++ = v9;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADF191B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45820;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_emplace<std::vector<kaldi::Matrix<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<kaldi::Matrix<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45660;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::vector<kaldi::Matrix<float>>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::vector<kaldi::Matrix<float>>::__assign_with_size[abi:ne180100]<kaldi::Matrix<float>*,kaldi::Matrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = a1 + 16;
  v9 = *(int32x2_t **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<kaldi::Matrix<float>>::__vdeallocate((void **)a1);
    if (a4 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::Matrix<float>>,kaldi::Matrix<float>*,kaldi::Matrix<float>*,kaldi::Matrix<float>*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,0>(a2, v13, v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::Matrix<float>>,kaldi::Matrix<float>*,kaldi::Matrix<float>*,kaldi::Matrix<float>*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,0>(a2, a3, v9);
  v15 = v14;
  result = *(_QWORD *)(a1 + 8);
  if (result != v14)
  {
    do
      result = kaldi::Matrix<float>::~Matrix(result - 40);
    while (result != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_1ADF19414(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADF1941C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<kaldi::Matrix<float>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = kaldi::Matrix<float>::~Matrix(v3 - 40);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::Matrix<float>>,kaldi::Matrix<float>*,kaldi::Matrix<float>*,kaldi::Matrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      kaldi::Matrix<float>::Matrix(a4 + v7, a2 + v7);
      v7 += 40;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADF194DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 40;
    do
    {
      kaldi::Matrix<float>::~Matrix(v4 + v2);
      v2 -= 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,0>(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      kaldi::Matrix<float>::operator=(a3, v4);
      v4 += 40;
      a3 += 5;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::__shared_ptr_emplace<std::vector<std::vector<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::vector<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::vector<std::vector<float>>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

_QWORD *std::vector<std::vector<unsigned long>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1ADF19668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

quasar::corrective_reranking::Parser::RunArgs *quasar::corrective_reranking::Parser::RunArgs::RunArgs(quasar::corrective_reranking::Parser::RunArgs *this, const quasar::PTree *a2)
{
  uint64_t *v4;
  quasar::PTree *Child;
  const std::string *String;
  quasar::PTree *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 BoolOptional;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  uint64_t Int;
  unsigned __int16 v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  uint64_t v21;
  unsigned __int16 v22;
  void *__p[2];
  char v25;

  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  v4 = (uint64_t *)((char *)this + 24);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 12) = 0x101010101010101;
  *((_DWORD *)this + 26) = 0;
  *((_WORD *)this + 54) = 257;
  *((_BYTE *)this + 110) = 0;
  *((_DWORD *)this + 28) = 10;
  *((_WORD *)this + 58) = 256;
  std::string::basic_string[abi:ne180100]<0>(__p, "displayed_text");
  Child = (quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, (__int128 *)__p);
  String = (const std::string *)quasar::PTree::getString(Child);
  std::string::operator=((std::string *)this, String);
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "asr_candidates");
  v7 = (quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, (__int128 *)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  v8 = quasar::PTree::begin(v7);
  v9 = quasar::PTree::end(v7);
  while (v8 != v9)
  {
    std::vector<quasar::corrective_reranking::ASRCandidate>::emplace_back<quasar::PTree const&>(v4, (quasar::PTree *)(v8 + 24));
    v8 += 88;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "early_exit_if_no_wfst_edit_parses");
  BoolOptional = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if (BoolOptional >= 0x100u)
    *((_BYTE *)this + 96) = BoolOptional;
  std::string::basic_string[abi:ne180100]<0>(__p, "use_edit_gating");
  v11 = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if (v11 >= 0x100u)
    *((_BYTE *)this + 97) = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "use_override_phrases");
  v12 = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if (v12 >= 0x100u)
    *((_BYTE *)this + 98) = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "use_target_corrector");
  v13 = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if (v13 >= 0x100u)
    *((_BYTE *)this + 99) = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "use_payload_corrector");
  v14 = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if (v14 >= 0x100u)
    *((_BYTE *)this + 100) = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "use_reranking");
  v15 = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if (v15 >= 0x100u)
    *((_BYTE *)this + 101) = v15;
  std::string::basic_string[abi:ne180100]<0>(__p, "use_parse_clean_heuristic");
  v16 = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if (v16 >= 0x100u)
    *((_BYTE *)this + 102) = v16;
  std::string::basic_string[abi:ne180100]<0>(__p, "randomly_sampled_parses_num");
  Int = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if ((Int & 0xFF00000000) != 0)
    *((_DWORD *)this + 26) = Int;
  std::string::basic_string[abi:ne180100]<0>(__p, "lowercase_top_parse_payload_when_conflicts_exist");
  v18 = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if (v18 >= 0x100u)
    *((_BYTE *)this + 108) = v18;
  std::string::basic_string[abi:ne180100]<0>(__p, "skip_floating_punctuation_removal_if_conflicts_exist");
  v19 = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if (v19 >= 0x100u)
    *((_BYTE *)this + 109) = v19;
  std::string::basic_string[abi:ne180100]<0>(__p, "disambiguation_ui_active");
  v20 = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if (v20 >= 0x100u)
    *((_BYTE *)this + 110) = v20;
  std::string::basic_string[abi:ne180100]<0>(__p, "disambiguation_num_occurrences");
  v21 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if ((v21 & 0xFF00000000) != 0)
    *((_DWORD *)this + 28) = v21;
  std::string::basic_string[abi:ne180100]<0>(__p, "verbose");
  v22 = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (v25 < 0)
    operator delete(__p[0]);
  if (v22 >= 0x100u)
    *((_BYTE *)this + 116) = v22;
  return this;
}

void sub_1ADF19AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v17;
  void *v18;

  if (a15 < 0)
    operator delete(__p);
  v17 = *(void **)(v15 + 72);
  if (v17)
  {
    *(_QWORD *)(v15 + 80) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(v15 + 48);
  if (v18)
  {
    *(_QWORD *)(v15 + 56) = v18;
    operator delete(v18);
  }
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::corrective_reranking::ASRCandidate>::emplace_back<quasar::PTree const&>(uint64_t *a1, quasar::PTree *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  quasar::corrective_reranking::ASRCandidate *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = (quasar::corrective_reranking::ASRCandidate *)&v13[32 * v9];
    v18 = &v13[32 * v12];
    quasar::corrective_reranking::ASRCandidate::ASRCandidate(v16, a2);
    v17 = (char *)v16 + 32;
    std::vector<quasar::corrective_reranking::ASRCandidate>::__swap_out_circular_buffer(a1, &v15);
    v8 = a1[1];
    std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    quasar::corrective_reranking::ASRCandidate::ASRCandidate(*(quasar::corrective_reranking::ASRCandidate **)(v4 - 8), a2);
    v8 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v8;
  return v8 - 32;
}

void sub_1ADF19CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::Parser::Output::toPtree(unsigned int *a1@<X0>, uint64_t *a2@<X1>, quasar::PTree *a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  quasar *v10;
  float v11;
  void *v12[2];
  char v13;
  void *__p;
  std::string v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int Type;
  std::string v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  quasar::PTree::PTree(a3);
  if (*((_BYTE *)a1 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "disambiguation_ui_result");
    if (!*((_BYTE *)a1 + 4))
      std::__throw_bad_optional_access[abi:ne180100]();
    v6 = *a1;
    Type = quasar::getType((quasar *)*a1);
    std::to_string(&v21, v6);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 1;
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)&__p, (uint64_t)&Type, 1);
    quasar::PTree::~PTree((quasar::PTree *)&Type);
    if (v15.__r_.__value_.__s.__data_[15] < 0)
      operator delete(__p);
  }
  quasar::PTree::PTree((quasar::PTree *)&Type);
  v7 = *((_QWORD *)a1 + 1);
  v8 = *((_QWORD *)a1 + 2);
  while (v7 != v8)
  {
    quasar::corrective_reranking::Parse::toPtree(v7, a2, (quasar::PTree *)&__p);
    quasar::PTree::addChild((quasar::PTree *)&Type, (const quasar::PTree *)&__p);
    quasar::PTree::~PTree((quasar::PTree *)&__p);
    v7 += 232;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "parses");
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)&__p, (uint64_t)&Type, 1);
  if (v15.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  if (*((_BYTE *)a1 + 33))
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "intent_gating_passed");
    if (!*((_BYTE *)a1 + 33))
      std::__throw_bad_optional_access[abi:ne180100]();
    v9 = *((unsigned __int8 *)a1 + 32);
    LODWORD(__p) = quasar::getType((quasar *)*((unsigned __int8 *)a1 + 32));
    std::to_string(&v15, v9);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 1;
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v12, (uint64_t)&__p, 1);
    quasar::PTree::~PTree((quasar::PTree *)&__p);
    if (v13 < 0)
      operator delete(v12[0]);
  }
  if (*((_BYTE *)a1 + 40))
  {
    v10 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v12, "edit_intent_score");
    if (!*((_BYTE *)a1 + 40))
      std::__throw_bad_optional_access[abi:ne180100]();
    v11 = *((float *)a1 + 9);
    LODWORD(__p) = quasar::getType(v10, v11);
    std::to_string(&v15, v11);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 1;
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v12, (uint64_t)&__p, 1);
    quasar::PTree::~PTree((quasar::PTree *)&__p);
    if (v13 < 0)
      operator delete(v12[0]);
  }
  quasar::PTree::~PTree((quasar::PTree *)&Type);
}

void sub_1ADF19F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  quasar::PTree *v27;

  quasar::PTree::~PTree((quasar::PTree *)&a16);
  if (a15 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a27);
  quasar::PTree::~PTree(v27);
  _Unwind_Resume(a1);
}

const quasar::corrective_reranking::Config *quasar::corrective_reranking::Parser::Parser(const quasar::corrective_reranking::Config *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = quasar::corrective_reranking::Config::Config((uint64_t)a1, a2);
  quasar::corrective_reranking::Models::Models((quasar::corrective_reranking::Models *)(v3 + 592), a1);
  return a1;
}

void sub_1ADF19FFC(_Unwind_Exception *a1)
{
  void **v1;

  quasar::corrective_reranking::Config::~Config(v1);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser *this@<X0>, const quasar::corrective_reranking::Parser::RunArgs *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  std::string *v11;
  __int128 v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  int v16;
  char v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  quasar::corrective_reranking::Parse *v21;
  quasar::corrective_reranking::Parse *v22;
  _BOOL4 v25;
  uint64_t v26;
  char *v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  int v34;
  _QWORD *v35;
  const char *v36;
  uint64_t v37;
  int v38;
  quasar::corrective_reranking::Parse *i;
  quasar::corrective_reranking::Parse *v40;
  _BOOL4 v43;
  uint64_t v44;
  int v45;
  int *v46;
  int v47;
  int v48;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _QWORD v54[3];
  uint64_t v55[3];
  void **v56[3];
  __int128 *v57[3];
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61[2];
  char v62;
  void *v63;
  void *v64;
  const quasar::corrective_reranking::Parser::RunArgs *v65;
  char v66;
  __int128 *v67[3];
  void *__p[2];
  unsigned __int8 v69;
  __int128 v70;
  uint64_t v71;
  void ***v72;
  _BYTE v73[32];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t (**v89)();
  __int128 v90;
  uint64_t (***v91)();
  uint64_t (**v92)();
  __int128 v93;
  uint64_t (***v94)();
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v89 = &off_1E5D3F668;
  *(_QWORD *)&v90 = this;
  *((_QWORD *)&v90 + 1) = a2;
  v91 = &v89;
  v94 = &v92;
  v92 = &off_1E5D3F668;
  v93 = v90;
  v4 = *((unsigned __int8 *)a2 + 103);
  v6 = *((_QWORD *)a2 + 3);
  v7 = *((_QWORD *)a2 + 4);
  v5 = (uint64_t *)((char *)a2 + 24);
  v70 = 0uLL;
  v71 = 0;
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = (__int128 *)(a3 + 8);
  *(_BYTE *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 36) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 44) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 32) = 0;
  if (v6 == v7)
    goto LABEL_145;
  v53 = v4;
  if (*((_BYTE *)a2 + 116))
  {
    v11 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    do
    {
      if (v11 >= (std::string *)v65)
      {
        v11 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v63, (__int128 *)v6);
      }
      else
      {
        if (*(char *)(v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
        }
        else
        {
          v12 = *(_OWORD *)v6;
          v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
        }
        ++v11;
      }
      v64 = v11;
      v6 += 32;
    }
    while (v6 != v7);
    if (quasar::gLogLevel > 4)
    {
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      memset(v73, 0, sizeof(v73));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"== UTTERANCES: ", 15);
      quasar::joinToList<std::vector<std::string>>((uint64_t *)&v63, 0);
      if ((v69 & 0x80u) == 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      if ((v69 & 0x80u) == 0)
        v15 = v69;
      else
        v15 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      if ((char)v69 < 0)
        operator delete(__p[0]);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
    }
    *(_QWORD *)v73 = &v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
  }
  if (!*((_BYTE *)a2 + 110)
    || (v16 = quasar::corrective_reranking::TargetIndexFilter::filterAsrCandidatesForTargetIndex(*((_QWORD *)this + 80), v5, *((_DWORD *)a2 + 28)), !v17))
  {
    quasar::corrective_reranking::Models::generateWFSTParses((uint64_t)this + 592, 1, v5, (unsigned __int8 *)a2, 0, 0, (uint64_t *)__p);
    *(_BYTE *)(a3 + 44) = quasar::corrective_reranking::containsParseWithCompleteCommand((quasar::corrective_reranking::Parse **)__p);
    if (*((_BYTE *)a2 + 116) && quasar::gLogLevel >= 5)
    {
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      memset(v73, 0, sizeof(v73));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"hasVoiceCommandInExhaustiveParses: ", 35);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
    }
    quasar::corrective_reranking::Models::generateWFSTParses((uint64_t)this + 592, 0, v5, (unsigned __int8 *)a2, 0, 0, (uint64_t *)v73);
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)&v70);
    v70 = *(_OWORD *)v73;
    v71 = *(_QWORD *)&v73[16];
    memset(v73, 0, 24);
    v63 = v73;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
    if (*((_BYTE *)a2 + 116))
    {
      if (quasar::gLogLevel >= 5)
      {
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v74 = 0u;
        memset(v73, 0, sizeof(v73));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"== WFST PARSES ==", 17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
        if (quasar::gLogLevel >= 5)
        {
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v74 = 0u;
          memset(v73, 0, sizeof(v73));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
          v63 = &v70;
          LOBYTE(v64) = 0;
          v65 = a2;
          quasar::corrective_reranking::operator<<(v73, (uint64_t **)&v63);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
        }
      }
    }
    if (*((_BYTE *)a2 + 98))
    {
      quasar::corrective_reranking::CorrectiveReranker::applyOverridePhrases(*((_QWORD *)this + 78), (uint64_t *)&v70, 0, (std::string::size_type)v73);
      std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)&v70);
      v70 = *(_OWORD *)v73;
      v71 = *(_QWORD *)&v73[16];
      memset(v73, 0, 24);
      v63 = v73;
      std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
      if (*((_BYTE *)a2 + 116))
      {
        if (quasar::gLogLevel >= 5)
        {
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v74 = 0u;
          memset(v73, 0, sizeof(v73));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"[Apply Override Phrases]\n", 25);
          v63 = &v70;
          LOBYTE(v64) = 0;
          v65 = a2;
          quasar::corrective_reranking::operator<<(v20, (uint64_t **)&v63);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
        }
      }
    }
    v22 = (quasar::corrective_reranking::Parse *)*((_QWORD *)&v70 + 1);
    v21 = (quasar::corrective_reranking::Parse *)v70;
    if ((_QWORD)v70 == *((_QWORD *)&v70 + 1))
    {
      v27 = (char *)a2 + 24;
      v26 = *((_QWORD *)a2 + 3);
      if (*((_QWORD *)v27 + 1) == v26)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      memset(v67, 0, sizeof(v67));
      LOBYTE(v63) = 0;
      v66 = 0;
      std::string::basic_string[abi:ne180100]<0>(v61, "");
      v58 = 0;
      v59 = 0;
      v60 = 0;
      memset(v57, 0, sizeof(v57));
      memset(v56, 0, sizeof(v56));
      quasar::corrective_reranking::Parse::Parse((std::string *)v73, v26, v67, (uint64_t)&v63, (__int128 *)v61, (uint64_t)&v58, 1, v57, INFINITY, 0.0, (__int128 **)v56);
      std::vector<quasar::corrective_reranking::Parse>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*>(a3 + 8, (uint64_t)v73, (uint64_t)&v86 + 8, 1uLL);
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)v73);
      v72 = v56;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
      v56[0] = (void **)v57;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v56);
      if (v58)
      {
        v59 = v58;
        operator delete(v58);
      }
      if (v62 < 0)
        operator delete(v61[0]);
      if (v66 && v63)
      {
        v64 = v63;
        operator delete(v63);
      }
      v63 = v67;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
LABEL_71:
      v28 = 256;
LABEL_143:
      *(_WORD *)(a3 + 32) = v28;
LABEL_144:
      *(_QWORD *)v73 = __p;
      std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
      goto LABEL_145;
    }
    if (*((_BYTE *)a2 + 96))
    {
      do
      {
        quasar::corrective_reranking::Parse::getIntent(v21, (uint64_t)v73);
        if ((v73[23] & 0x80000000) != 0)
        {
          if (*(_QWORD *)&v73[8] != 7)
          {
            operator delete(*(void **)v73);
            goto LABEL_73;
          }
          v25 = **(_DWORD **)v73 != 1952672100 || *(_DWORD *)(*(_QWORD *)v73 + 3) != 1702125940;
          operator delete(*(void **)v73);
          if (v25)
            goto LABEL_73;
        }
        else
        {
          if (v73[23] != 7)
            goto LABEL_73;
          if (*(_DWORD *)v73 != 1952672100 || *(_DWORD *)&v73[3] != 1702125940)
            goto LABEL_73;
        }
        v21 = (quasar::corrective_reranking::Parse *)((char *)v21 + 232);
      }
      while (v21 != v22);
      if (*((_BYTE *)a2 + 116) && quasar::gLogLevel >= 5)
      {
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v74 = 0u;
        memset(v73, 0, sizeof(v73));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Early Exit due to no edit parses", 32);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
      }
      if (*((_QWORD *)&v70 + 1) == (_QWORD)v70)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      quasar::corrective_reranking::Parse::Parse((std::string *)v73, (const quasar::corrective_reranking::Parse *)v70);
      std::vector<quasar::corrective_reranking::Parse>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*>(a3 + 8, (uint64_t)v73, (uint64_t)&v86 + 8, 1uLL);
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)v73);
      goto LABEL_71;
    }
LABEL_73:
    *(_BYTE *)(a3 + 45) = quasar::corrective_reranking::containsParseWithCompleteCommand((quasar::corrective_reranking::Parse **)&v70);
    if (*((_BYTE *)a2 + 116) && quasar::gLogLevel >= 5)
    {
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      memset(v73, 0, sizeof(v73));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"hasVoiceCommandParses: ", 23);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
    }
    v29 = (uint64_t)(v5 + 3);
    v30 = (uint64_t)(v5 + 6);
    if (*((_BYTE *)a2 + 97))
    {
      v31 = *((_QWORD *)this + 79);
      memset(v55, 0, sizeof(v55));
      std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(v55, v70, *((uint64_t *)&v70 + 1), 0x34F72C234F72C235 * ((uint64_t)(*((_QWORD *)&v70 + 1) - v70) >> 3));
      v32 = quasar::corrective_reranking::FusedIntentClassifier::classifyIntent(v31, v55, (uint64_t)a2, v29, v30);
      *(_QWORD *)v73 = v55;
      std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
      *(float *)(a3 + 36) = v32;
      *(_BYTE *)(a3 + 40) = 1;
      v33 = *((float *)this + 66);
      v34 = quasar::gLogLevel;
      if (*((_BYTE *)a2 + 116))
      {
        if (quasar::gLogLevel >= 5)
        {
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v74 = 0u;
          memset(v73, 0, sizeof(v73));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"== PASS 1: Edit Intent Score ==", 31);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
          v34 = quasar::gLogLevel;
          if (quasar::gLogLevel >= 5)
          {
            v87 = 0u;
            v88 = 0u;
            v85 = 0u;
            v86 = 0u;
            v83 = 0u;
            v84 = 0u;
            v81 = 0u;
            v82 = 0u;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v75 = 0u;
            v76 = 0u;
            v74 = 0u;
            memset(v73, 0, sizeof(v73));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Edit score = ", 13);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
            v34 = quasar::gLogLevel;
            if (quasar::gLogLevel >= 5)
            {
              v87 = 0u;
              v88 = 0u;
              v85 = 0u;
              v86 = 0u;
              v83 = 0u;
              v84 = 0u;
              v81 = 0u;
              v82 = 0u;
              v79 = 0u;
              v80 = 0u;
              v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              v74 = 0u;
              memset(v73, 0, sizeof(v73));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
              v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Intent = ", 9);
              if (v32 < v33)
                v36 = "Dictate";
              else
                v36 = "Edit";
              if (v32 < v33)
                v37 = 7;
              else
                v37 = 4;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
              v34 = quasar::gLogLevel;
            }
          }
        }
      }
      v38 = *((unsigned __int8 *)a2 + 116);
      if (v32 < v33)
      {
        if (*((_BYTE *)a2 + 116) && v34 >= 5)
        {
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v74 = 0u;
          memset(v73, 0, sizeof(v73));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Early Exit in Pass 1", 20);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
        }
        memset(v73, 0, 24);
        v40 = (quasar::corrective_reranking::Parse *)*((_QWORD *)&v70 + 1);
        for (i = (quasar::corrective_reranking::Parse *)v70;
              i != v40;
              i = (quasar::corrective_reranking::Parse *)((char *)i + 232))
        {
          quasar::corrective_reranking::Parse::getIntent(i, (uint64_t)&v63);
          if (SHIBYTE(v65) < 0)
          {
            if (v64 == (void *)7)
            {
              v43 = *(_DWORD *)v63 != 1952672100 || *(_DWORD *)((char *)v63 + 3) != 1702125940;
              operator delete(v63);
              if (!v43)
              {
LABEL_146:
                v51 = *(_QWORD *)&v73[8];
                if (*(_QWORD *)&v73[8] >= *(_QWORD *)&v73[16])
                {
                  v52 = std::vector<quasar::corrective_reranking::Parse>::__emplace_back_slow_path<quasar::corrective_reranking::Parse const&>((uint64_t *)v73, i);
                }
                else
                {
                  quasar::corrective_reranking::Parse::Parse(*(std::string **)&v73[8], i);
                  v52 = v51 + 232;
                }
                *(_QWORD *)&v73[8] = v52;
                break;
              }
            }
            else
            {
              operator delete(v63);
            }
          }
          else if (SHIBYTE(v65) == 7 && (_DWORD)v63 == 1952672100 && *(_DWORD *)((char *)&v63 + 3) == 1702125940)
          {
            goto LABEL_146;
          }
        }
        if (v8 != (__int128 *)v73)
          std::vector<quasar::corrective_reranking::Parse>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(a3 + 8, *(uint64_t *)v73, *(uint64_t *)&v73[8], 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)&v73[8] - *(_QWORD *)v73) >> 3));
        *(_WORD *)(a3 + 32) = 256;
        v63 = v73;
        std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
        goto LABEL_144;
      }
    }
    else
    {
      v38 = *((unsigned __int8 *)a2 + 116);
      v34 = quasar::gLogLevel;
    }
    *(_BYTE *)(a3 + 46) = 1;
    if (v38 && v34 >= 5)
    {
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v74 = 0u;
      memset(v73, 0, sizeof(v73));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"== PASS 2: Corrective Re-Ranking ==", 35);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
    }
    v44 = *((_QWORD *)this + 78);
    memset(v54, 0, sizeof(v54));
    std::vector<quasar::corrective_reranking::Parse>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(v54, v70, *((uint64_t *)&v70 + 1), 0x34F72C234F72C235 * ((uint64_t)(*((_QWORD *)&v70 + 1) - v70) >> 3));
    quasar::corrective_reranking::CorrectiveReranker::performCorrectiveReranking(v44, (uint64_t)v54, (uint64_t)a2, v29, v30, *((unsigned __int8 *)a2 + 99), *((unsigned __int8 *)a2 + 100), *((unsigned __int8 *)a2 + 101), (uint64_t)v73, *((_BYTE *)a2 + 102), v53 != 0, *((_DWORD *)a2 + 26), *((_WORD *)a2 + 54), HIBYTE(*((_WORD *)a2 + 54)), *((_BYTE *)a2 + 116));
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)&v70);
    v70 = *(_OWORD *)v73;
    v71 = *(_QWORD *)&v73[16];
    memset(v73, 0, 24);
    v63 = v73;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
    v63 = v54;
    std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
    if (*((_BYTE *)a2 + 116))
    {
      if ((_QWORD)v70 != *((_QWORD *)&v70 + 1) && quasar::gLogLevel >= 5)
      {
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v74 = 0u;
        memset(v73, 0, sizeof(v73));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"== TOP PARSE ==", 15);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
        if (quasar::gLogLevel >= 5)
        {
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v74 = 0u;
          memset(v73, 0, sizeof(v73));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
          quasar::corrective_reranking::operator<<(v73, v70);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
        }
      }
    }
    if ((_QWORD)v70 == *((_QWORD *)&v70 + 1))
    {
      *(_BYTE *)(a3 + 47) = 0;
    }
    else
    {
      quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)v70, (uint64_t)v73);
      v45 = v73[23];
      if ((v73[23] & 0x80000000) != 0)
      {
        if (*(_QWORD *)&v73[8] != 7)
        {
          *(_BYTE *)(a3 + 47) = 1;
LABEL_139:
          operator delete(*(void **)v73);
          goto LABEL_140;
        }
        v46 = *(int **)v73;
LABEL_129:
        v47 = *v46;
        v48 = *(int *)((char *)v46 + 3);
        v50 = v47 != 1952672100 || v48 != 1702125940;
        *(_BYTE *)(a3 + 47) = v50;
        if ((v45 & 0x80000000) == 0)
          goto LABEL_140;
        goto LABEL_139;
      }
      if (v73[23] == 7)
      {
        v46 = (int *)v73;
        goto LABEL_129;
      }
      *(_BYTE *)(a3 + 47) = 1;
    }
LABEL_140:
    if (v8 != &v70)
      std::vector<quasar::corrective_reranking::Parse>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(a3 + 8, v70, *((uint64_t *)&v70 + 1), 0x34F72C234F72C235 * ((uint64_t)(*((_QWORD *)&v70 + 1) - v70) >> 3));
    v28 = 257;
    goto LABEL_143;
  }
  v18 = v16;
  if (*((_BYTE *)a2 + 116) && quasar::gLogLevel > 4)
  {
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v74 = 0u;
    memset(v73, 0, sizeof(v73));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Early exit due to Disambiguation UI with option: ", 49);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v73);
  }
  *(_DWORD *)a3 = v18;
  *(_BYTE *)(a3 + 4) = 1;
LABEL_145:
  *(_QWORD *)v73 = &v70;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)&v92);
}

void sub_1ADF1AEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char **a32,uint64_t a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char *a52,uint64_t a53)
{
  uint64_t v53;

  a32 = &a52;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  a52 = (char *)&a42;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  a52 = &a48;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)(v53 - 152));
  _Unwind_Resume(a1);
}

uint64_t quasar::joinToList<std::vector<std::string>>(uint64_t *a1, int a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v7[2];
  _QWORD v8[2];
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"[", 1);
  if (*a1 != a1[1])
  {
    if (a2)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n ", 2);
      v4 = ",\n ";
    }
    else
    {
      v4 = ", ";
    }
    v7[0] = (uint64_t)v4;
    v7[1] = strlen(v4);
    quasar::joinToStream<std::vector<std::string>>(v9, a1, v7);
    if (a2)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"]", 1);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v9[0] = v5;
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v11);
}

void sub_1ADF1B244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::corrective_reranking::containsParseWithCompleteCommand(quasar::corrective_reranking::Parse **a1)
{
  quasar::corrective_reranking::Parse *v1;
  quasar::corrective_reranking::Parse *v2;
  BOOL isIncomplete;
  void *__p[2];
  char v8;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  while (1)
  {
    quasar::corrective_reranking::Parse::getIntent(v1, (uint64_t)__p);
    if ((v8 & 0x80000000) == 0)
      break;
    if (__p[1] != (void *)7)
      goto LABEL_15;
    if (*(_DWORD *)__p[0] != 1952672100 || *(_DWORD *)((char *)__p[0] + 3) != 1702125940)
      goto LABEL_15;
    operator delete(__p[0]);
LABEL_18:
    v1 = (quasar::corrective_reranking::Parse *)((char *)v1 + 232);
    if (v1 == v2)
      return 0;
  }
  if (v8 == 7 && LODWORD(__p[0]) == 1952672100 && *(_DWORD *)((char *)__p + 3) == 1702125940)
    goto LABEL_18;
LABEL_15:
  isIncomplete = quasar::corrective_reranking::Parse::isIncomplete(v1);
  if (v8 < 0)
    operator delete(__p[0]);
  if (isIncomplete)
    goto LABEL_18;
  return 1;
}

void sub_1ADF1B344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::Parser::runJson(quasar::corrective_reranking::Parser *a1, const std::string *a2)
{
  _BYTE v3[64];
  _BYTE v4[264];
  unsigned int v5[14];
  uint64_t v6[15];
  _BYTE v7[64];
  _QWORD v8[34];

  std::istringstream::basic_istringstream[abi:ne180100](v8, a2, 8);
  quasar::PTree::PTree((quasar::PTree *)v7);
  quasar::PTree::readJson((uint64_t)v7, v8);
  quasar::corrective_reranking::Parser::RunArgs::RunArgs((quasar::corrective_reranking::Parser::RunArgs *)v6, (const quasar::PTree *)v7);
  quasar::corrective_reranking::Parser::run(a1, (const quasar::corrective_reranking::Parser::RunArgs *)v6, (uint64_t)v5);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  quasar::corrective_reranking::Parser::Output::toPtree(v5, v6, (quasar::PTree *)v3);
  quasar::PTree::writeProperJson();
}

uint64_t sub_1ADF1B3E4()
{
  uint64_t v0;
  uint64_t v2;
  void **v3[11];
  char v4;
  uint64_t v5;
  void *v6[8];
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[12];
  char v15;
  uint64_t v16;

  quasar::PTree::~PTree((quasar::PTree *)&v2);
  std::stringbuf::str();
  v3[0] = *(void ***)MEMORY[0x1E0DE4F60];
  *(void ***)((char *)v3 + (unint64_t)*(v3[0] - 3)) = *(void ***)(MEMORY[0x1E0DE4F60] + 24);
  v0 = MEMORY[0x1E0DE4FB8];
  v3[1] = (void **)(MEMORY[0x1E0DE4FB8] + 16);
  if (v4 < 0)
    operator delete(v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v5);
  v3[0] = v6;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100](v3);
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  v3[0] = (void **)&v8;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v3);
  if (v7 < 0)
    operator delete(v6[6]);
  quasar::PTree::~PTree((quasar::PTree *)&v13);
  v14[0] = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v14[2] = v0 + 16;
  if (v15 < 0)
    operator delete((void *)v14[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x1AF44D094](&v16);
}

void sub_1ADF1B528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  std::ostringstream::~ostringstream((uint64_t)&a18);
  a18 = (void **)&a52;
  std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100](&a18);
  quasar::corrective_reranking::Parser::RunArgs::~RunArgs((quasar::corrective_reranking::Parser::RunArgs *)&a58);
  quasar::PTree::~PTree((quasar::PTree *)&STACK[0x200]);
  std::istringstream::~istringstream((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_1ADF1B598()
{
  JUMPOUT(0x1ADF1B588);
}

void quasar::corrective_reranking::Parser::clearLongTermCache(quasar::corrective_reranking::PhoneticMatcher **this)
{
  quasar::corrective_reranking::Models::clearLongTermCache(this + 74);
}

void quasar::corrective_reranking::intentToCommandIdentifier(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  int v2;
  uint64_t *v3;
  std::string::size_type v5;
  char *v10;

  v2 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v3 = a1;
    switch(*((_BYTE *)a1 + 23))
    {
      case 9:
        goto LABEL_46;
      case 0xA:
        goto LABEL_40;
      case 0xB:
        if (*a1 != 0x6661747265736E69 || *(uint64_t *)((char *)a1 + 3) != 0x7265746661747265)
          goto LABEL_60;
        goto LABEL_36;
      case 0xC:
        goto LABEL_22;
      case 0xD:
        if (*a1 != 0x6562747265736E69 || *(uint64_t *)((char *)a1 + 5) != 0x6E65657774656274)
          goto LABEL_60;
        goto LABEL_35;
      default:
        goto LABEL_60;
    }
  }
  v3 = (uint64_t *)*a1;
  v5 = a1[1];
  if (v5 == 11)
  {
    if (*v3 != 0x6661747265736E69 || *(uint64_t *)((char *)v3 + 3) != 0x7265746661747265)
    {
      v3 = (uint64_t *)*a1;
      v5 = a1[1];
      goto LABEL_21;
    }
LABEL_36:
    v10 = "insertAfter";
LABEL_62:
    std::string::basic_string[abi:ne180100]<0>(a2, v10);
    return;
  }
  if (v5 == 13 && *v3 == 0x6562747265736E69 && *(uint64_t *)((char *)v3 + 5) == 0x6E65657774656274)
  {
LABEL_35:
    v10 = "insertBetween";
    goto LABEL_62;
  }
LABEL_21:
  if (v5 != 12)
    goto LABEL_39;
LABEL_22:
  if (*v3 == 0x6562747265736E69 && *((_DWORD *)v3 + 2) == 1701998438)
  {
    v10 = "insertBefore";
    goto LABEL_62;
  }
  if ((v2 & 0x80) == 0)
  {
    if (v2 == 9)
      goto LABEL_46;
    v3 = a1;
    if (v2 != 10)
      goto LABEL_60;
    goto LABEL_40;
  }
  v3 = (uint64_t *)*a1;
  v5 = a1[1];
LABEL_39:
  if (v5 != 10)
    goto LABEL_54;
LABEL_40:
  if (*v3 == 0x696C617469706163 && *((_WORD *)v3 + 4) == 25978)
  {
    v10 = "uppercase";
    goto LABEL_62;
  }
  if ((v2 & 0x80) == 0)
  {
    if (v2 == 9)
    {
LABEL_46:
      if (*a1 != 0x7361637265707075 || *((_BYTE *)a1 + 8) != 101)
        goto LABEL_60;
      goto LABEL_61;
    }
LABEL_60:
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = a1[2];
    return;
  }
  v3 = (uint64_t *)*a1;
  v5 = a1[1];
LABEL_54:
  if (v5 == 9)
  {
    if (*v3 == 0x7361637265707075 && *((_BYTE *)v3 + 8) == 101)
    {
LABEL_61:
      v10 = "allCaps";
      goto LABEL_62;
    }
    if ((v2 & 0x80) == 0)
      goto LABEL_60;
  }
  std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v3, v5);
}

uint64_t quasar::configSupportsVoiceCommands(quasar *this, const quasar::SystemConfig *a2)
{
  uint64_t PtreeOptional;
  quasar::PTree *v4;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.voice-commands.enable");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p);
  v4 = (quasar::PTree *)PtreeOptional;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v4)
      return quasar::PTree::getBool(v4);
  }
  else if (PtreeOptional)
  {
    return quasar::PTree::getBool(v4);
  }
  return 0;
}

void sub_1ADF1B88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::localeSupportsVoiceCommands(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t PtreeOptional;
  quasar::PTree *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t String;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *i;
  void *__p[2];
  char v18;

  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.voice-commands.locales");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional(a1, (uint64_t)__p);
  v5 = (quasar::PTree *)PtreeOptional;
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if (!v5)
      return 1;
  }
  else if (!PtreeOptional)
  {
    return 1;
  }
  v6 = quasar::PTree::begin(v5);
  v7 = quasar::PTree::end(v5);
  if (v6 != v7)
  {
    v8 = v7;
    do
    {
      String = quasar::PTree::getString((quasar::PTree *)(v6 + 24));
      v10 = a2[23];
      if ((v10 & 0x80u) == 0)
        v11 = a2[23];
      else
        v11 = *((_QWORD *)a2 + 1);
      v12 = *(unsigned __int8 *)(String + 23);
      v13 = (char)v12;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(String + 8);
      if (v11 == v12)
      {
        if (v13 >= 0)
          v14 = (unsigned __int8 *)String;
        else
          v14 = *(unsigned __int8 **)String;
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)a2, v14, *((_QWORD *)a2 + 1)))
            return 1;
        }
        else
        {
          if (!a2[23])
            return 1;
          for (i = a2; *i == *v14; ++i)
          {
            ++v14;
            if (!--v10)
              return 1;
          }
        }
      }
      v6 += 88;
    }
    while (v6 != v8);
  }
  return 0;
}

void sub_1ADF1B9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL quasar::configSupportsCorrectiveReranking(quasar *this, const quasar::SystemConfig *a2)
{
  uint64_t PtreeOptional;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.voice-commands.corrective-reranking");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  return PtreeOptional != 0;
}

void sub_1ADF1BA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0,std::allocator<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0,std::allocator<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3F668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0,std::allocator<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3F668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0,std::allocator<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  quasar::corrective_reranking::TransformerClassifier **v2;

  v2 = (quasar::corrective_reranking::TransformerClassifier **)(*(_QWORD *)(a1 + 8) + 592);
  quasar::corrective_reranking::Models::clearShortTermCache(v2);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 117))
    quasar::corrective_reranking::Models::clearLongTermCache(v2);
}

uint64_t std::__function::__func<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0,std::allocator<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0,std::allocator<quasar::corrective_reranking::Parser::run(quasar::corrective_reranking::Parser::RunArgs const&)::$_0>,void ()(void)>::target_type()
{
}

void std::vector<quasar::corrective_reranking::Parse>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a1);
    if (a4 > 0x11A7B9611A7B961)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x69EE58469EE5846ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x8D3DCB08D3DCB0)
      v11 = 0x11A7B9611A7B961;
    else
      v11 = v10;
    std::vector<quasar::corrective_reranking::Parse>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,quasar::corrective_reranking::Parse *,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse const*,quasar::corrective_reranking::Parse*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,quasar::corrective_reranking::Parse *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v16 - 232));
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADF1BCD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADF1BCE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::corrective_reranking::Parse>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)a1);
    if (a4 > 0x11A7B9611A7B961)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x69EE58469EE5846ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x8D3DCB08D3DCB0)
      v11 = 0x11A7B9611A7B961;
    else
      v11 = v10;
    std::vector<quasar::corrective_reranking::Parse>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,quasar::corrective_reranking::Parse *,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*,quasar::corrective_reranking::Parse*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,std::__wrap_iter<quasar::corrective_reranking::Parse *>,quasar::corrective_reranking::Parse *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
      quasar::corrective_reranking::Parse::~Parse((quasar::corrective_reranking::Parse *)(v16 - 232));
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADF1BE60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADF1BE68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t Opt_Parse(int a1, const char **a2, unint64_t a3, int a4, unsigned int a5)
{
  unsigned int v7;
  int v8;
  const char **v10;
  int v11;
  int v12;
  const char *v13;
  const char *v14;
  const char *v15;
  unsigned int v16;
  unint64_t v17;
  const char *v18;
  const char *v19;
  int v20;
  int v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  unsigned int v25;
  _BOOL4 v26;
  double v27;
  const char *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  time_t v35;
  int v36;
  FILE **v37;
  int v38;
  const char **v39;
  const char *v40;
  size_t v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  const char *v46;
  int v47;
  int v48;
  unint64_t v49;
  int v51;
  int v52;
  const char **v53;
  unsigned int v54;
  tm __endptr;
  char *v56[2];

  v7 = a1 - 1;
  if (a1 == 1)
  {
    v38 = 0;
    v11 = 1;
    goto LABEL_81;
  }
  v8 = a4;
  v49 = a3 + 32 * (a4 - 1);
  v10 = a2 + 1;
  v48 = (a5 >> 1) & 1;
  v11 = 1;
  v12 = -1;
  while (1)
  {
    v13 = *v10;
    if (**v10 == 45)
      break;
    a2[v11++] = v13;
    ++v10;
    --v7;
    v36 = v48;
LABEL_70:
    v38 = 0;
    if (!v7 || v36)
      goto LABEL_78;
  }
  v52 = v11;
  v14 = v13 + 1;
  if (!strcmp(v13 + 1, "?") || !strcmp(v14, "help"))
  {
    v42 = (size_t)*a2;
    v43 = a3;
    v44 = v8;
LABEL_85:
    Opt_PrintUsage(v42, v43, v44);
    exit(0);
  }
  v51 = 0;
  --v7;
  ++v10;
  v15 = v14;
  v53 = v10;
  v47 = v12;
  v16 = v7;
LABEL_7:
  if (v8 < 1)
  {
    v36 = 0;
    v12 = v47;
    if ((a5 & 4) != 0)
      goto LABEL_77;
LABEL_69:
    v37 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unknown option \"-%s\";", v14);
    fprintf(*v37, "  type \"%s -help\" for information\n", *a2);
    v11 = v52;
    goto LABEL_70;
  }
  v54 = v16;
  v17 = v49;
  do
  {
    v18 = *(const char **)(v17 + 8);
    if (v18 && *(unsigned __int8 *)v18 == *(unsigned __int8 *)v15)
    {
      v19 = *(const char **)(v17 + 8);
      if ((a5 & 1) != 0)
      {
        v12 = strlen(v19);
        if (!strncmp(v18, v15, v12))
        {
LABEL_17:
          v20 = *(_DWORD *)v17;
          if ((*(_DWORD *)v17 & 0x80000000) != 0)
          {
            switch(v20)
            {
              case -9:
                if (!v54)
                  goto LABEL_39;
                v22 = *v53;
                v45 = *(uint64_t **)(v17 + 16);
                v46 = *a2;
                v56[0] = 0;
                memset(&__endptr.tm_wday, 0, 32);
                v23 = strtol(v22, v56, 0);
                v24 = v22;
                v25 = v54;
                if (v56[0] == v22)
                  goto LABEL_57;
                if (*v56[0] != 46)
                {
                  if (!*v56[0])
                  {
                    *v45 = v23;
                    goto LABEL_58;
                  }
LABEL_57:
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s: can't parse \"%s\" as a time.\n", v46, v24);
                  goto LABEL_58;
                }
                v29 = v23 - 1900;
                if ((int)v23 <= 1900)
                  v29 = v23;
                __endptr.tm_year = v29;
                v30 = strtol(v56[0] + 1, v56, 0);
                v24 = v22;
                __endptr.tm_mon = v30 - 1;
                if (v56[0] == v22)
                  goto LABEL_57;
                if (*v56[0] != 46)
                  goto LABEL_57;
                v31 = strtol(v56[0] + 1, v56, 0);
                v24 = v22;
                __endptr.tm_mday = v31;
                if (v56[0] == v22)
                  goto LABEL_57;
                if (*v56[0] != 46)
                  goto LABEL_57;
                v32 = strtol(v56[0] + 1, v56, 0);
                v24 = v22;
                __endptr.tm_hour = v32;
                if (v56[0] == v22)
                  goto LABEL_57;
                if (*v56[0] != 46)
                  goto LABEL_57;
                v33 = strtol(v56[0] + 1, v56, 0);
                v24 = v22;
                __endptr.tm_min = v33;
                if (v56[0] == v22)
                  goto LABEL_57;
                if (*v56[0] != 46)
                  goto LABEL_57;
                v34 = strtol(v56[0] + 1, v56, 0);
                v24 = v22;
                __endptr.tm_sec = v34;
                if (v56[0] == v22 || *v56[0])
                  goto LABEL_57;
                v35 = mktime(&__endptr);
                if (v35 == -1)
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s: can't represent the time \"%s\".\n", v46, v22);
                else
                  *v45 = v35;
                v25 = v54;
LABEL_58:
                ++v53;
                v16 = v25 - 1;
LABEL_59:
                v8 = a4;
                break;
              case -8:
                v42 = (size_t)*a2;
                v43 = a3;
                v44 = a4;
                goto LABEL_85;
              case -7:
                v16 = (*(uint64_t (**)(const char *, _QWORD, const char **))(v17 + 16))(v18, v54, v53);
                goto LABEL_59;
              case -6:
                v26 = (*(uint64_t (**)(const char *, const char *))(v17 + 16))(v18, *v53) != 0;
                v53 += v26;
                v16 = v54 - v26;
                goto LABEL_59;
              case -5:
                if (!v54)
                  goto LABEL_39;
                *(_QWORD *)&__endptr.tm_sec = 0;
                v27 = strtod(*v53, (char **)&__endptr);
                if (*(const char **)&__endptr.tm_sec == *v53)
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Warning: option \"-%s\" got non-floating-point argument \"%s\".  Using default: %lg.\n");
                else
                  **(double **)(v17 + 16) = v27;
                goto LABEL_43;
              case -4:
                **(_DWORD **)(v17 + 16) = v52;
                v51 = 1;
                goto LABEL_19;
              case -3:
                if (!v54)
                  goto LABEL_39;
                v28 = *v53++;
                **(_QWORD **)(v17 + 16) = v28;
                v16 = v54 - 1;
                goto LABEL_59;
              case -2:
              case -1:
                if (!v54)
                {
LABEL_39:
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Warning: %s option \"-%s\" needs an argument\n", *a2, v18);
                  v16 = 0;
                  goto LABEL_59;
                }
                *(_QWORD *)&__endptr.tm_sec = 0;
                v21 = strtol(*v53, (char **)&__endptr, 0);
                if (*(const char **)&__endptr.tm_sec == *v53)
                {
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "Warning: option \"-%s\" got a non-numeric argument \"%s\".  Using default: %d\n");
LABEL_43:
                  v8 = a4;
                }
                else
                {
                  v8 = a4;
                  if (*(_DWORD *)v17 == -2 && v21 < 0)
                    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Warning: option \"-%s\" got a negative argument \"%s\".  Using default: %u.\n", *(const char **)(v17 + 8), *v53, **(_DWORD **)(v17 + 16));
                  else
                    **(_DWORD **)(v17 + 16) = v21;
                }
                ++v53;
                v16 = v54 - 1;
                break;
              default:
                goto LABEL_19;
            }
          }
          else
          {
            **(_DWORD **)(v17 + 16) = v20;
LABEL_19:
            v8 = a4;
            v16 = v54;
          }
          if ((a5 & 1) == 0 || (v15 += v12, !*v15))
          {
            v10 = v53;
            v7 = v16;
            v36 = v51;
            v11 = v52;
            goto LABEL_70;
          }
          goto LABEL_7;
        }
      }
      else if (!strcmp(v19, v15))
      {
        goto LABEL_17;
      }
    }
    v17 -= 32;
  }
  while (v17 >= a3);
  v14 = v15;
  v10 = v53;
  v7 = v54;
  v8 = a4;
  v36 = v51;
  if ((a5 & 4) == 0)
    goto LABEL_69;
LABEL_77:
  v38 = 1;
  v11 = v52;
LABEL_78:
  if (v7)
  {
    v39 = &a2[v11];
    v11 += v7;
    do
    {
      v40 = *v10++;
      *v39++ = v40;
      --v7;
    }
    while (v7);
  }
LABEL_81:
  a2[v11] = 0;
  if (((v38 != 0) & (a5 >> 2)) != 0)
    return 0xFFFFFFFFLL;
  else
    return v11;
}

size_t Opt_PrintUsage(size_t result, uint64_t a2, int a3)
{
  const char *v5;
  uint64_t v6;
  size_t *v7;
  int v8;
  uint64_t v9;
  FILE **v10;
  uint64_t v11;
  FILE *v12;
  int v13;

  v5 = (const char *)result;
  v6 = a3;
  if (a3 < 1)
  {
    v8 = 4;
  }
  else
  {
    v7 = (size_t *)(a2 + 8);
    v8 = 4;
    v9 = a3;
    do
    {
      result = *v7;
      if (*v7)
      {
        result = strlen((const char *)result);
        if (v8 <= (int)result)
          v8 = result;
      }
      v7 += 4;
      --v9;
    }
    while (v9);
  }
  v10 = (FILE **)MEMORY[0x1E0C80C10];
  if (v5)
    result = fprintf((FILE *)*MEMORY[0x1E0C80C10], "Usage of command \"%s\"\n", v5);
  if (a3 >= 1)
  {
    v11 = a2 + 16;
    do
    {
      v12 = *v10;
      if (*(_DWORD *)(v11 - 16) == -8)
      {
        result = fprintf(v12, " %s\n");
      }
      else
      {
        v13 = strlen(*(const char **)(v11 - 8));
        result = fprintf(v12, " -%s%-*s %s\n", *(const char **)(v11 - 8), v8 + 1 - v13, ":", *(const char **)(v11 + 8));
        switch(*(_DWORD *)(v11 - 16))
        {
          case 0xFFFFFFFB:
            result = fprintf(*v10, "\t\tDefault value: %lg\n");
            break;
          case 0xFFFFFFFD:
            if (**(_QWORD **)v11)
              result = fprintf(*v10, "\t\tDefault value: \"%s\"\n");
            break;
          case 0xFFFFFFFE:
            result = fprintf(*v10, "\t\tDefault value: %u\n");
            break;
          case 0xFFFFFFFF:
            result = fprintf(*v10, "\t\tDefault value: %d\n");
            break;
          default:
            break;
        }
      }
      v11 += 32;
      --v6;
    }
    while (v6);
  }
  if (v5)
    return fprintf(*v10, " -help%-*s Print this message\n", v8 - 3, ":");
  return result;
}

void MemStats::clearAllocStats(MemStats *this)
{
  bzero((char *)this + 16, 0x404uLL);
}

void MemStats::MemStats(MemStats *this)
{
  bzero(this, 0x414uLL);
}

_QWORD *MemStats::print(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  std::locale::id *v15;
  _QWORD *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  std::locale v23;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"total memory ", 13);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" (", 2);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"M)", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", used ", 7);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" (", 2);
  v8 = (_QWORD *)std::ostream::operator<<();
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"M)", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", wasted ", 9);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (", 2);
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"M)", 2);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v23, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v23);
  std::ostream::put();
  std::ostream::flush();
  v14 = 0;
  v15 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  do
  {
    if (*(_DWORD *)(a1 + 16 + 4 * v14))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"allocations of size ", 20);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
      v18 = std::locale::use_facet(&v23, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale(&v23);
      std::ostream::put();
      std::ostream::flush();
    }
    ++v14;
  }
  while (v14 != 256);
  if (*(_DWORD *)(a1 + 1040))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"allocations of size >= ", 23);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
    v21 = std::locale::use_facet(&v23, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(&v23);
    std::ostream::put();
    std::ostream::flush();
  }
  return a2;
}

void sub_1ADF1C9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

double kaldi::quasar::NnlmDecoderWord::NnlmDecoderWord(kaldi::quasar::NnlmDecoderWord *this)
{
  double result;

  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  *((_QWORD *)this + 25) = 0;
  result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  return result;
}

uint64_t kaldi::quasar::NnlmDecoderWord::GetWordId(kaldi::quasar::NnlmDecoderWord *this, unsigned int a2)
{
  _QWORD v4[35];

  if ((a2 & 0x80000000) != 0 || *((_QWORD *)this + 4) <= (unint64_t)a2)
  {
    if (kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4, 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Word passed to NNLM doesn't exist in wordmap. The decoder will use <oos> to score instead", 89);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4);
    }
    a2 = *((_DWORD *)this + 44);
  }
  return *(unsigned int *)(*((_QWORD *)this + 3) + 4 * (int)a2);
}

void sub_1ADF1CA84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::NnlmDecoderWord::IsPhoneWord(kaldi::quasar::NnlmDecoderWord *this, signed int a2)
{
  uint64_t *i;
  int v4;
  _QWORD v6[35];

  if (a2 < 0 || *((_QWORD *)this + 4) <= (unint64_t)a2)
  {
    if (kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v6, 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Word passed to NNLM doesn't exist in wordmap. The decoder will use <oos> to score instead", 89);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v6);
    }
    a2 = *((_DWORD *)this + 44);
  }
  if (a2 <= *((_DWORD *)this + 19) && a2 >= *((_DWORD *)this + 18))
  {
    for (i = (uint64_t *)*((_QWORD *)this + 7); i; i = (uint64_t *)*i)
    {
      v4 = *((_DWORD *)i + 7);
      if (a2 >= v4)
      {
        if (v4 >= a2)
          return 1;
        ++i;
      }
    }
  }
  return 0;
}

void sub_1ADF1CB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::NnlmDecoderWord::ReadMapped(uint64_t a1, uint64_t a2)
{
  fst::MappedFile *v3;
  uint64_t result;

  v3 = kaldi::ReadMapped<kaldi::quasar::NnlmDecoderWord>(a2, a1);
  result = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

fst::MappedFile *kaldi::ReadMapped<kaldi::quasar::NnlmDecoderWord>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  fst::MappedFile *v5;
  uint64_t *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[15];
  unsigned __int8 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[35];

  v27[34] = *MEMORY[0x1E0C80C00];
  v17 = 0;
  kaldi::Input::Input(v16, a1, &v17);
  if (!v17)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Memory mapping failed. Not a valid Kaldi binary file: ", 54);
    v13 = *(char *)(a1 + 23);
    if (v13 >= 0)
      v14 = a1;
    else
      v14 = *(_QWORD *)a1;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 23);
    else
      v15 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  v4 = kaldi::Input::Stream((kaldi::Input *)v16);
  std::istream::seekg();
  std::istream::tellg();
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  std::istream::seekg();
  v5 = fst::MappedFile::Map(v4, a1, v27[16]);
  kaldi::Input::~Input((kaldi::Input *)v16);
  if (!v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "Memory mapping failed. mapped_file_ is NULL");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  v17 = 0;
  kaldi::Input::Input(v16, a1, &v17);
  v6 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v16);
  kaldi::quasar::NnlmDecoderWord::ReadData(a2, v6, v17, *((_QWORD *)v5 + 1));
  kaldi::Input::Close((kaldi::Input *)v16);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"memory mapped file ", 19);
    v8 = *(char *)(a1 + 23);
    if (v8 >= 0)
      v9 = a1;
    else
      v9 = *(_QWORD *)a1;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 23);
    else
      v10 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v27);
  }
  kaldi::Input::~Input((kaldi::Input *)v16);
  return v5;
}

void sub_1ADF1CDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Input::~Input((kaldi::Input *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::NnlmDecoderWord::ReadData(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  std::vector<int>::pointer begin;
  size_t v9;
  void *v10;
  std::vector<int>::pointer v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  void *v19;
  int64_t v20;
  char v21;
  int64_t v22;
  void *v23;
  std::vector<int> __p;

  kaldi::ExpectToken(a2, a3, "<UnknownWord>");
  kaldi::ReadToken(a2, a3, a1 + 80);
  kaldi::ReadBasicType<int>(a2, a3, a1 + 176);
  kaldi::ExpectToken(a2, a3, "<BeginOfSentenceWord>");
  kaldi::ReadToken(a2, a3, a1 + 128);
  kaldi::ReadBasicType<int>(a2, a3, a1 + 184);
  kaldi::ExpectToken(a2, a3, "<EndOfSentenceWord>");
  kaldi::ReadToken(a2, a3, a1 + 152);
  kaldi::ReadBasicType<int>(a2, a3, a1 + 188);
  kaldi::ExpectToken(a2, a3, "<NullWord>");
  kaldi::ReadToken(a2, a3, a1 + 104);
  kaldi::ReadBasicType<int>(a2, a3, a1 + 180);
  kaldi::ExpectToken(a2, a3, "<ContextSize>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 192);
  kaldi::ExpectToken(a2, a3, "<SymbolToWord>");
  memset(&__p, 0, sizeof(__p));
  v22 = 0;
  v23 = 0;
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, a4, 0, &v23, &v22);
  begin = __p.__begin_;
  if (__p.__begin_ == __p.__end_)
  {
    v10 = v23;
    v20 = v22;
    v21 = 0;
  }
  else
  {
    v9 = (char *)__p.__end_ - (char *)__p.__begin_;
    v20 = __p.__end_ - __p.__begin_;
    v21 = 1;
    v10 = (void *)operator new[]();
    memcpy(v10, begin, v9);
    begin = __p.__begin_;
  }
  v19 = v10;
  if (begin)
  {
    __p.__end_ = begin;
    operator delete(begin);
  }
  kaldi::MappableVector<int>::operator=(a1 + 24, (uint64_t)&v19);
  if (v21 && v19)
    MEMORY[0x1AF44D160](v19, 0x1000C8077774924);
  kaldi::ExpectToken(a2, a3, "<WordToSymbol>");
  memset(&__p, 0, sizeof(__p));
  v22 = 0;
  v23 = 0;
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, a4, 0, &v23, &v22);
  v11 = __p.__begin_;
  if (__p.__begin_ == __p.__end_)
  {
    v13 = v23;
    v20 = v22;
    v21 = 0;
  }
  else
  {
    v12 = (char *)__p.__end_ - (char *)__p.__begin_;
    v20 = __p.__end_ - __p.__begin_;
    v21 = 1;
    v13 = (void *)operator new[]();
    memcpy(v13, v11, v12);
    v11 = __p.__begin_;
  }
  v19 = v13;
  if (v11)
  {
    __p.__end_ = v11;
    operator delete(v11);
  }
  kaldi::MappableVector<int>::operator=(a1, (uint64_t)&v19);
  if (v21 && v19)
    MEMORY[0x1AF44D160](v19, 0x1000C8077774924);
  kaldi::ExpectToken(a2, a3, "<PhoneWordSymbol>");
  memset(&__p, 0, sizeof(__p));
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, 0, 0, 0, 0);
  kaldi::CopyVectorToSet<int>(&__p.__begin_, a1 + 48);
  if (*(_QWORD *)(a1 + 64))
  {
    v14 = a1 + 56;
    v15 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 28);
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = *(_QWORD *)(v15 + 8);
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = *(_QWORD *)(v14 + 16);
        v17 = *(_QWORD *)v16 == v14;
        v14 = v16;
      }
      while (v17);
    }
    v18 = *(_DWORD *)(v16 + 28);
  }
  else
  {
    v18 = -1;
    *(_DWORD *)(a1 + 72) = -1;
  }
  *(_DWORD *)(a1 + 76) = v18;
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1ADF1D19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::CopyVectorToSet<int>(int **a1, uint64_t a2)
{
  uint64_t *v4;
  int *v5;
  int *v6;

  v4 = (uint64_t *)(a2 + 8);
  std::__tree<int>::destroy(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = 0;
  *v4 = 0;
  v5 = *a1;
  v6 = a1[1];
  while (v5 != v6)
  {
    std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a2, v4, v5, v5);
    ++v5;
  }
}

uint64_t kaldi::quasar::NnlmDecoderWord::BosSymbol(kaldi::quasar::NnlmDecoderWord *this)
{
  return *((unsigned int *)this + 46);
}

_QWORD *quasar::PDecModelVersionChecker::PDecModelVersionChecker(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

void quasar::PDecModelVersionChecker::checkVersion(quasar::PDecModelVersionChecker *this, int a2)
{
  uint64_t v3;
  const void **v4;
  uint64_t v5;
  quasar::PDecModelVersionChecker *v6;
  quasar::PDecModelVersionChecker *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const void **v15;
  uint64_t v16;
  quasar::PDecModelVersionChecker *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  const void **v25;
  const void ***v26;
  BOOL v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v3 = *(_QWORD *)this;
  v4 = (const void **)(*(_QWORD *)this + 3552);
  v5 = quasar::PDecModelVersionChecker::modelTypeMinimumVersion(this);
  v6 = (quasar::PDecModelVersionChecker *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v5, v4);
  v7 = (quasar::PDecModelVersionChecker *)quasar::PDecModelVersionChecker::modelTypeMinimumVersion(v6);
  if ((quasar::PDecModelVersionChecker *)((char *)v7 + 8) == v6)
  {
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Unknown PDec model type: ", 25);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v31, (uint64_t)v4);
    goto LABEL_30;
  }
  if (*((_DWORD *)v6 + 14) > a2)
  {
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Incompatible system config version. Needs to be >= ", 51);
    v32 = (_QWORD *)std::ostream::operator<<();
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)".0 to use PDec model type: ", 27);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v33, (uint64_t)v4);
    goto LABEL_30;
  }
  if (quasar::gLogLevel >= 5)
  {
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Compatible system config version (", 34);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)".0) for PDec model type ", 24);
    v10 = *(char *)(v3 + 3575);
    if (v10 >= 0)
      v11 = (uint64_t)v4;
    else
      v11 = *(_QWORD *)(v3 + 3552);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v3 + 3575);
    else
      v12 = *(_QWORD *)(v3 + 3560);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (", 2);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)".0 required)", 12);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v34);
  }
  v15 = *(const void ***)(v3 + 3600);
  if (v15 != (const void **)(v3 + 3608))
  {
    while (1)
    {
      v16 = quasar::PDecModelVersionChecker::featureFlagMinimumVersion(v7);
      v17 = (quasar::PDecModelVersionChecker *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v16, v15 + 4);
      v7 = (quasar::PDecModelVersionChecker *)quasar::PDecModelVersionChecker::featureFlagMinimumVersion(v17);
      if ((quasar::PDecModelVersionChecker *)((char *)v7 + 8) == v17)
      {
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Unknown PDec feature flag: ", 27);
        std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v28, (uint64_t)(v15 + 4));
        goto LABEL_30;
      }
      if (*((_DWORD *)v17 + 14) > a2)
        break;
      if (quasar::gLogLevel >= 5)
      {
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Compatible system config version (", 34);
        v18 = (_QWORD *)std::ostream::operator<<();
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)".0) for PDec feature flag ", 26);
        v20 = *((char *)v15 + 55);
        if (v20 >= 0)
          v21 = (uint64_t)(v15 + 4);
        else
          v21 = (uint64_t)v15[4];
        if (v20 >= 0)
          v22 = *((unsigned __int8 *)v15 + 55);
        else
          v22 = (uint64_t)v15[5];
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" (", 2);
        v24 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)".0 required)", 12);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v34);
      }
      v25 = (const void **)v15[1];
      if (v25)
      {
        do
        {
          v26 = (const void ***)v25;
          v25 = (const void **)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (const void ***)v15[2];
          v27 = *v26 == v15;
          v15 = (const void **)v26;
        }
        while (!v27);
      }
      v15 = (const void **)v26;
      if (v26 == (const void ***)(v3 + 3608))
        return;
    }
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Incompatible system config version. Needs to be >= ", 51);
    v29 = (_QWORD *)std::ostream::operator<<();
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)".0 to use PDec feature flag: ", 29);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v30, (uint64_t)(v15 + 4));
LABEL_30:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v34);
  }
}

void sub_1ADF1D624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

uint64_t quasar::PDecModelVersionChecker::modelTypeMinimumVersion(quasar::PDecModelVersionChecker *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t i;
  const void *v5[3];
  int v6;
  _QWORD v7[3];
  int v8;
  _QWORD v9[3];
  int v10;
  _QWORD v11[3];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v5, "TorchN");
    v6 = 35;
    std::string::basic_string[abi:ne180100]<0>(v7, "TorchM");
    v8 = 35;
    std::string::basic_string[abi:ne180100]<0>(v9, "TorchT");
    v10 = 35;
    std::string::basic_string[abi:ne180100]<0>(v11, "TorchF");
    v12 = 35;
    std::map<std::string,int>::map[abi:ne180100](v3, v5, 4);
    for (i = 0; i != -16; i -= 4)
    {
      if (SHIBYTE(v11[i + 2]) < 0)
        operator delete((void *)v11[i]);
    }
    quasar::PDecModelVersionChecker::modelTypeMinimumVersion(void)::versionMap = v3;
  }
  return quasar::PDecModelVersionChecker::modelTypeMinimumVersion(void)::versionMap;
}

void sub_1ADF1D7B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 119) < 0)
      operator delete(*(void **)(v2 + v4 + 96));
    v4 -= 32;
    if (v4 == -128)
    {
      MEMORY[0x1AF44D190](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t quasar::PDecModelVersionChecker::featureFlagMinimumVersion(quasar::PDecModelVersionChecker *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4;
  const void *v5[3];
  int v6;
  _QWORD v7[3];
  int v8;
  _QWORD v9[3];
  int v10;
  _QWORD v11[3];
  int v12;
  _QWORD v13[3];
  int v14;
  _QWORD v15[3];
  int v16;
  _QWORD v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  _QWORD v21[3];
  int v22;
  _QWORD v23[3];
  int v24;
  _QWORD v25[3];
  int v26;
  _QWORD v27[3];
  int v28;
  _QWORD v29[3];
  int v30;
  _QWORD v31[3];
  int v32;
  _QWORD v33[3];
  int v34;
  _QWORD v35[3];
  int v36;
  _QWORD v37[3];
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v5, "BPE");
    v6 = 35;
    std::string::basic_string[abi:ne180100]<0>(v7, "SHORTLIST");
    v8 = 121;
    std::string::basic_string[abi:ne180100]<0>(v9, "TMPATT");
    v10 = 35;
    std::string::basic_string[abi:ne180100]<0>(v11, "CHILD");
    v12 = 35;
    std::string::basic_string[abi:ne180100]<0>(v13, "PyTorch");
    v14 = 35;
    std::string::basic_string[abi:ne180100]<0>(v15, "DotT");
    v16 = 35;
    std::string::basic_string[abi:ne180100]<0>(v17, "AddTag");
    v18 = 35;
    std::string::basic_string[abi:ne180100]<0>(v19, "TagFormat");
    v20 = 35;
    std::string::basic_string[abi:ne180100]<0>(v21, "ShareEmbed");
    v22 = 35;
    std::string::basic_string[abi:ne180100]<0>(v23, "EncPos");
    v24 = 35;
    std::string::basic_string[abi:ne180100]<0>(v25, "DecPos");
    v26 = 35;
    std::string::basic_string[abi:ne180100]<0>(v27, "AddSrcBos");
    v28 = 35;
    std::string::basic_string[abi:ne180100]<0>(v29, "AddSrcEos");
    v30 = 35;
    std::string::basic_string[abi:ne180100]<0>(v31, "AlignModel");
    v32 = 35;
    std::string::basic_string[abi:ne180100]<0>(v33, "ShiftedAlignments");
    v34 = 35;
    std::string::basic_string[abi:ne180100]<0>(v35, "MultipleDecoders");
    v36 = 35;
    std::string::basic_string[abi:ne180100]<0>(v37, "NoSymbolTables");
    v38 = 242;
    std::map<std::string,int>::map[abi:ne180100](v3, v5, 17);
    v4 = 68;
    do
    {
      if (*((char *)&v5[v4 - 1] - 1) < 0)
        operator delete((void *)v5[v4 - 4]);
      v4 -= 4;
    }
    while (v4 * 8);
    quasar::PDecModelVersionChecker::featureFlagMinimumVersion(void)::versionMap = v3;
  }
  return quasar::PDecModelVersionChecker::featureFlagMinimumVersion(void)::versionMap;
}

void sub_1ADF1DB04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 544;
  while (1)
  {
    if (*(char *)(v2 + v4 - 9) < 0)
      operator delete(*(void **)(v2 + v4 - 32));
    v4 -= 32;
    if (!v4)
    {
      MEMORY[0x1AF44D190](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string,int>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1ADF1DBF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *quasar::AmbiguityAnnotatorOptions::options@<X0>(quasar::AmbiguityAnnotatorOptions *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *result;

  v4 = (char *)this + 2256;
  v5 = *(_QWORD *)(*((_QWORD *)this + 282) - 24);
  v6 = (char *)this + 2408;
  v7 = *(_QWORD *)(*((_QWORD *)this + 301) - 24);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  result = operator new(0x48uLL);
  a2[1] = result + 9;
  a2[2] = result + 9;
  *result = (char *)this + 1216;
  result[1] = (char *)this + 1376;
  result[2] = (char *)this + 1536;
  result[3] = (char *)this + 1680;
  result[4] = (char *)this + 1824;
  result[5] = (char *)this + 1968;
  result[6] = (char *)this + 2112;
  result[7] = &v4[v5];
  result[8] = &v6[v7];
  *a2 = result;
  return result;
}

void quasar::AmbiguityAnnotatorBlock::init(quasar::AmbiguityAnnotatorBlock *this)
{
  std::string *v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  __int128 *v7;
  unsigned __int8 *v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  std::string v12;
  std::string v13;
  void *__p[2];
  std::string::size_type v15;

  std::string::basic_string[abi:ne180100]<0>(&v13, "AmbiguityAnnotatorBlock");
  v2 = std::string::append(&v13, " config:");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v15 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  quasar::OptionsBase::debugLog((void (***)(_QWORD **__return_ptr, _QWORD))this + 1, (uint64_t)__p);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v4 = quasar::OptionValue<std::string>::value((_QWORD *)this + 173);
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v12.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 3);
  v7 = (__int128 *)quasar::OptionValue<std::string>::value((_QWORD *)this + 115);
  v8 = (unsigned __int8 *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 135);
  quasar::PhraseBookFactory::createPhraseBook(&v12, v6 != 0, v7, *v8, &v13);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 2688, (__int128 *)&v13);
  size = (std::__shared_weak_count *)v13.__r_.__value_.__l.__size_;
  if (v13.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(v13.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_1ADF1DE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'quasar::AmbiguityAnnotatorBlock::init(quasar::AmbiguityAnnotatorBlock *this)
{
  quasar::AmbiguityAnnotatorBlock::init((quasar::AmbiguityAnnotatorBlock *)((char *)this
                                                                          + *(_QWORD *)(*(_QWORD *)this - 88)));
}

void quasar::AmbiguityAnnotatorBlock::addAnnotation(quasar::AmbiguityAnnotatorBlock *this, quasar::MetaInfo::Impl **a2, const quasar::AmbiguityAnnotatorBlock::SenseMatches *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  std::string *v11;
  std::string *v12;
  __int128 v14;
  uint64_t v15;
  std::string __str;
  std::string v17;
  std::string v18;
  std::string v19;
  void *v20[9];
  std::string v21;
  uint64_t v22;
  std::string v23;
  uint64_t v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  uint64_t v30;
  std::string *v31;
  unint64_t v32;

  v30 = 0;
  v31 = 0;
  v32 = 0;
  std::vector<quasar::MetaInfo::Sense>::reserve(&v30, 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*((_QWORD *)a3 + 1) - *(_QWORD *)a3) >> 3));
  v5 = *(_QWORD *)a3;
  v6 = *((_QWORD *)a3 + 1);
  if (*(_QWORD *)a3 != v6)
  {
    v7 = (_QWORD *)((char *)this + 2120);
    do
    {
      if (*(char *)(v5 + 111) < 0)
      {
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(v5 + 88), *(_QWORD *)(v5 + 96));
      }
      else
      {
        v8 = *(_OWORD *)(v5 + 88);
        v19.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 104);
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
      }
      if (*(char *)(v5 + 135) < 0)
      {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v5 + 112), *(_QWORD *)(v5 + 120));
      }
      else
      {
        v9 = *(_OWORD *)(v5 + 112);
        v18.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 128);
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
      }
      if (*(char *)(v5 + 159) < 0)
      {
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v5 + 136), *(_QWORD *)(v5 + 144));
      }
      else
      {
        v10 = *(_OWORD *)(v5 + 136);
        v17.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 152);
        *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v10;
      }
      quasar::MetaInfo::Sense::Sense((uint64_t)v20, (__int128 *)&v19, (__int128 *)&v18, (__n128 *)&v17);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      quasar::AmbiguityAnnotatorBlock::Match::toString((quasar::AmbiguityAnnotatorBlock::Match *)v5, (uint64_t)&__str);
      std::string::operator=(&v21, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v22 = *(_QWORD *)(v5 + 24);
      quasar::AmbiguityAnnotatorBlock::Match::toString((quasar::AmbiguityAnnotatorBlock::Match *)(v5 + 32), (uint64_t)&__str);
      std::string::operator=(&v23, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v24 = *(_QWORD *)(v5 + 56);
      std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(&v25, (const std::string *)(v5 + 160));
      std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(&v26, (const std::string *)(v5 + 184));
      if (!*(_BYTE *)quasar::OptionValue<BOOL>::value(v7))
        std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(&v27, (const std::string *)(v5 + 208));
      std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(&v28, (const std::string *)(v5 + 232));
      std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(&v29, (const std::string *)(v5 + 256));
      v11 = v31;
      if ((unint64_t)v31 >= v32)
      {
        v12 = (std::string *)std::vector<quasar::MetaInfo::Sense>::__emplace_back_slow_path<quasar::MetaInfo::Sense&>(&v30, (const quasar::MetaInfo::Sense *)v20);
      }
      else
      {
        quasar::MetaInfo::Sense::Sense(v31, (const quasar::MetaInfo::Sense *)v20);
        v12 = (std::string *)((char *)v11 + 296);
      }
      v31 = v12;
      quasar::MetaInfo::Sense::~Sense(v20);
      v5 += 280;
    }
    while (v5 != v6);
  }
  v14 = 0uLL;
  v15 = 0;
  std::vector<quasar::MetaInfo::Sense>::__init_with_size[abi:ne180100]<quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(&v14, v30, (uint64_t)v31, 0x14C1BACF914C1BADLL * (((uint64_t)v31 - v30) >> 3));
  quasar::MetaInfo::setAmbiguityAnnotatorSenses(a2, &v14);
  v20[0] = &v14;
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  v20[0] = &v30;
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
}

void sub_1ADF1E168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40)
{
  uint64_t v40;

  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  a40 = v40 - 112;
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::MetaInfo::Sense>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x14C1BACF914C1BADLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xDD67C8A60DD67DLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 296 * v6;
    std::vector<quasar::MetaInfo::Sense>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::MetaInfo::Sense>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADF1E2CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::MetaInfo::Sense>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::AmbiguityAnnotatorBlock::Match::toString(quasar::AmbiguityAnnotatorBlock::Match *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  kaldi::JoinVectorToString((uint64_t *)this, " ", 1, (__int128 *)a2);
}

void sub_1ADF1E318(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(std::string *this, const std::string *a2)
{
  __int128 v3;

  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void quasar::AmbiguityAnnotatorBlock::extractTokenSequence(uint64_t a1, uint64_t a2, std::vector<std::string> *a3)
{
  uint64_t v4;
  uint64_t ChildOptional;
  quasar::PTree *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::vector<std::string>::pointer end;
  std::string *value;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  std::string *v20;
  int v21;
  void *__p[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39[2];
  char v40;
  std::string v41;
  char v42;
  std::string v43;

  v4 = quasar::MetaInfo::get((quasar::MetaInfo *)(a2 + 192));
  std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer output");
  ChildOptional = quasar::PTree::getChildOptional(v4, (uint64_t)__p);
  v6 = (quasar::PTree *)ChildOptional;
  if (SBYTE7(v23) < 0)
  {
    operator delete(__p[0]);
    if (v6)
    {
LABEL_3:
      v7 = quasar::PTree::begin(v6);
      v8 = quasar::PTree::end(v6);
      if (v7 != v8)
      {
        v9 = v8;
        do
        {
          std::string::basic_string[abi:ne180100]<0>(v39, "text");
          quasar::PTree::getStringOptional(v7 + 24, (uint64_t)v39, &v41);
          if (v42)
          {
            v43 = v41;
            memset(&v41, 0, sizeof(v41));
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v43, "");
          }
          end = a3->__end_;
          value = a3->__end_cap_.__value_;
          if (end >= value)
          {
            v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a3->__begin_) >> 3);
            v14 = v13 + 1;
            if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a3->__begin_) >> 3);
            if (2 * v15 > v14)
              v14 = 2 * v15;
            if (v15 >= 0x555555555555555)
              v16 = 0xAAAAAAAAAAAAAAALL;
            else
              v16 = v14;
            *(_QWORD *)&v24 = &a3->__end_cap_;
            if (v16)
              v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&a3->__end_cap_, v16);
            else
              v17 = 0;
            v18 = &v17[24 * v13];
            __p[0] = v17;
            __p[1] = v18;
            *((_QWORD *)&v23 + 1) = &v17[24 * v16];
            v19 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
            *((_QWORD *)v18 + 2) = *((_QWORD *)&v43.__r_.__value_.__l + 2);
            *(_OWORD *)v18 = v19;
            memset(&v43, 0, sizeof(v43));
            *(_QWORD *)&v23 = v18 + 24;
            std::vector<std::string>::__swap_out_circular_buffer(a3, (std::__split_buffer<std::string> *)__p);
            v20 = a3->__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
            v21 = SHIBYTE(v43.__r_.__value_.__r.__words[2]);
            a3->__end_ = v20;
            if (v21 < 0)
              operator delete(v43.__r_.__value_.__l.__data_);
          }
          else
          {
            v12 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
            end->__r_.__value_.__r.__words[2] = v43.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
            memset(&v43, 0, sizeof(v43));
            a3->__end_ = end + 1;
          }
          if (v42 && SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v41.__r_.__value_.__l.__data_);
          if (v40 < 0)
            operator delete(v39[0]);
          v7 += 88;
        }
        while (v7 != v9);
      }
      return;
    }
  }
  else if (ChildOptional)
  {
    goto LABEL_3;
  }
  if (quasar::gLogLevel >= 2)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"an input to the AmbiguityAnnotatorBlock has not come from a TokenizerBlock", 74);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
  }
}

void sub_1ADF1E63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  _Unwind_Resume(a1);
}

void quasar::AmbiguityAnnotatorBlock::convertTokenToCharacterSpan(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v6;
  uint64_t ChildOptional;
  quasar::PTree *v8;
  uint64_t i;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t **v13;
  void *v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *__p[2];
  char v32;
  std::string v33;
  char v34;
  std::string v35;
  void *v36[2];
  char v37;
  std::string __str;
  int v39;
  uint64_t *v40;
  _QWORD *v41[2];
  int *v42;

  v6 = quasar::MetaInfo::get((quasar::MetaInfo *)(a2 + 192));
  v41[0] = 0;
  v41[1] = 0;
  v40 = (uint64_t *)v41;
  std::string::basic_string[abi:ne180100]<0>(v14, "tokenizer output");
  ChildOptional = quasar::PTree::getChildOptional(v6, (uint64_t)v14);
  v8 = (quasar::PTree *)ChildOptional;
  if (SBYTE7(v15) < 0)
  {
    operator delete(v14[0]);
    if (v8)
    {
LABEL_3:
      v39 = 0;
      for (i = quasar::PTree::begin(v8); i != quasar::PTree::end(v8); i = v10 + 64)
      {
        std::string::basic_string[abi:ne180100]<0>(v36, "start");
        v10 = i + 24;
        quasar::PTree::getStringOptional(v10, (uint64_t)v36, (std::string *)v14);
        if (BYTE8(v15))
        {
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v14;
          __str.__r_.__value_.__r.__words[2] = v15;
          v14[1] = 0;
          *(_QWORD *)&v15 = 0;
          v14[0] = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
        }
        v11 = std::stoi(&__str, 0, 10);
        std::string::basic_string[abi:ne180100]<0>(__p, "length");
        quasar::PTree::getStringOptional(v10, (uint64_t)__p, &v33);
        if (v34)
        {
          v35 = v33;
          memset(&v33, 0, sizeof(v33));
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v35, "");
        }
        v12 = std::stoi(&v35, 0, 10);
        v42 = &v39;
        std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v40, &v39, (uint64_t)&std::piecewise_construct, &v42)[4] = (uint64_t *)(v11 | (unint64_t)(v12 << 32));
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (v34 && SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
        if (v32 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (BYTE8(v15) && SBYTE7(v15) < 0)
          operator delete(v14[0]);
        if (v37 < 0)
          operator delete(v36[0]);
        ++v39;
      }
      v14[0] = a3;
      *a4 = *((_DWORD *)std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v40, a3, (uint64_t)&std::piecewise_construct, (_DWORD **)v14)+ 8);
      LODWORD(v33.__r_.__value_.__l.__data_) = *a3 + a3[1] - 1;
      v14[0] = &v33;
      v13 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v40, (int *)&v33, (uint64_t)&std::piecewise_construct, (_DWORD **)v14);
      a4[1] = *((_DWORD *)v13 + 9) + *((_DWORD *)v13 + 8) - *a4;
      goto LABEL_31;
    }
  }
  else if (ChildOptional)
  {
    goto LABEL_3;
  }
  if (quasar::gLogLevel >= 2)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)v14 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"an input to the AmbiguityAnnotatorBlock has not come from a TokenizerBlock", 74);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v14);
  }
  *(_QWORD *)a4 = *(_QWORD *)a3;
LABEL_31:
  std::__tree<int>::destroy((uint64_t)&v40, v41[0]);
}

void sub_1ADF1EA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  std::__tree<int>::destroy(v54 - 128, *(_QWORD **)(v54 - 120));
  _Unwind_Resume(a1);
}

void quasar::AmbiguityAnnotatorBlock::processBody(quasar::AmbiguityAnnotatorBlock *this)
{
  quasar::AmbiguityAnnotatorBlock *v1;
  quasar::ProcessingInput *v2;
  _QWORD *Value;
  quasar::ProcessingInput *v5;
  _QWORD *v6;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t p_p;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  quasar::ProcessingInput *v24;
  quasar::AmbiguityAnnotatorBlock *v25;
  __int128 __p;
  uint64_t v27;
  std::vector<std::string> v28;
  _QWORD v29[3];
  __int128 v30;
  uint64_t v31;
  std::vector<std::string> v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v1 = this;
  v2 = (quasar::AmbiguityAnnotatorBlock *)((char *)this + 2576);
  Value = (_QWORD *)quasar::ProcessingInput::getValue((quasar::AmbiguityAnnotatorBlock *)((char *)this + 2576));
  if (*Value == Value[1] && quasar::gLogLevel >= 1)
  {
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"empty source input received", 27);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v33);
  }
  v5 = (quasar::AmbiguityAnnotatorBlock *)((char *)v1 + 2632);
  v6 = (_QWORD *)quasar::ProcessingInput::getValue((quasar::AmbiguityAnnotatorBlock *)((char *)v1 + 2632));
  if (*v6 == v6[1] && quasar::gLogLevel >= 1)
  {
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"empty nbest input received", 26);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v33);
  }
  v8 = (uint64_t *)quasar::ProcessingInput::getValue(v2);
  v9 = *v8;
  memset(&v32, 0, sizeof(v32));
  quasar::AmbiguityAnnotatorBlock::extractTokenSequence((uint64_t)v8, v9, &v32);
  if (quasar::gLogLevel >= 5)
  {
    v30 = 0uLL;
    v31 = 0;
    kaldi::JoinVectorToString((uint64_t *)&v32, "\", \"", 1, &v30);
    if (quasar::gLogLevel >= 5)
    {
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"received ", 9);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"-token source: [\"", 17);
      if (v31 >= 0)
        v12 = (uint64_t)&v30;
      else
        v12 = v30;
      if (v31 >= 0)
        v13 = HIBYTE(v31);
      else
        v13 = *((_QWORD *)&v30 + 1);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v12, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\"]", 2);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v33);
    }
    v24 = (quasar::AmbiguityAnnotatorBlock *)((char *)v1 + 2632);
    v25 = v1;
    memset(v29, 0, sizeof(v29));
    v15 = (uint64_t *)quasar::ProcessingInput::getValue((quasar::AmbiguityAnnotatorBlock *)((char *)v1 + 2632));
    v16 = *v15;
    v17 = v15[1];
    if (*v15 != v17)
    {
      do
      {
        memset(&v28, 0, sizeof(v28));
        quasar::AmbiguityAnnotatorBlock::extractTokenSequence((uint64_t)v15, v16, &v28);
        __p = 0uLL;
        v27 = 0;
        kaldi::JoinVectorToString((uint64_t *)&v28, "\", \"", 1, &__p);
        if (quasar::gLogLevel >= 5)
        {
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          v33 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
          v18 = (_QWORD *)std::ostream::operator<<();
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-token hyp: [\"", 14);
          if (v27 >= 0)
            p_p = (uint64_t)&__p;
          else
            p_p = __p;
          if (v27 >= 0)
            v21 = HIBYTE(v27);
          else
            v21 = *((_QWORD *)&__p + 1);
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, p_p, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\"]", 2);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v33);
        }
        if (SHIBYTE(v27) < 0)
          operator delete((void *)__p);
        *(_QWORD *)&v33 = &v28;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
        v16 += 200;
      }
      while (v16 != v17);
    }
    *(_QWORD *)&v33 = v29;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    if (SHIBYTE(v31) < 0)
      operator delete((void *)v30);
    v5 = v24;
    v1 = v25;
  }
  v23 = (uint64_t *)quasar::ProcessingInput::getValue(v5);
  v33 = 0uLL;
  *(_QWORD *)&v34 = 0;
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v33, *v23, v23[1], 0x8F5C28F5C28F5C29 * ((v23[1] - *v23) >> 3));
  quasar::AmbiguityAnnotatorBlock::annotateAmbiguity(v1, v9, &v32, (uint64_t *)&v33);
  *(_QWORD *)&v30 = &v33;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  *(_QWORD *)&v33 = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_1ADF1EEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,char *a33)
{
  if (a29 < 0)
    operator delete(__p);
  a33 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

uint64_t quasar::AmbiguityAnnotatorBlock::annotateAmbiguity(quasar::AmbiguityAnnotatorBlock *a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int *v10;
  int v11;
  unsigned __int8 *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t **v20;
  uint64_t **v21;
  const quasar::AmbiguityAnnotatorBlock::SenseMatches *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  const quasar::TranslationPhraseInternal *v27;
  std::string *v28;
  std::string *v29;
  unint64_t v30;
  int v33;
  char **v34;
  char *v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  char *v54;
  std::string *v55;
  std::string *v56;
  unint64_t v57;
  void (***v58)(std::pair<std::string, std::string> **__return_ptr);
  std::__shared_weak_count *v59;
  int *v60;
  uint64_t *v61[10];

  v61[7] = *(uint64_t **)MEMORY[0x1E0C80C00];
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 337);
  v58 = (void (***)(std::pair<std::string, std::string> **__return_ptr))*((_QWORD *)a1 + 336);
  v59 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (int *)quasar::OptionValue<int>::value((_QWORD *)a1 + 193);
  v11 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((_QWORD *)a1 + 211);
  v12 = (unsigned __int8 *)quasar::OptionValue<BOOL>::value((_QWORD *)a1 + 229);
  quasar::AmbiguityAnnotatorBlock::Senses::Senses(v61, a3, &v58, v10, v11 != 0, *v12);
  v13 = v59;
  if (v59)
  {
    v14 = (unint64_t *)&v59->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v55 = 0;
  v56 = 0;
  v57 = 0;
  quasar::AmbiguityAnnotatorBlock::Senses::keys((quasar::AmbiguityAnnotatorBlock::Senses **)v61, &v53);
  v17 = v53;
  v16 = v54;
  if (v53 != v54)
  {
    while (1)
    {
      if (quasar::gLogLevel >= 5)
      {
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v36 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"source span: ", 13);
        quasar::operator<<(v18);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v36);
      }
      v35[0] = 0;
      v35[1] = 0;
      v34 = v35;
      if (quasar::AmbiguityAnnotatorBlock::findAlternatives((uint64_t)a1, (uint64_t)v17, (uint64_t)v61, (uint64_t **)&v34, a4))
      {
        break;
      }
      std::__tree<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::__map_value_compare<int,std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>>>::destroy((uint64_t)&v34, v35[0]);
      v17 += 8;
      if (v17 == v16)
        goto LABEL_33;
    }
    if (quasar::gLogLevel >= 5)
    {
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v36 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" alternatives", 13);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v36);
    }
    v33 = 0;
    if (a4[1] != *a4)
    {
      while (1)
      {
        v60 = &v33;
        v20 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v34, &v33, (uint64_t)&std::piecewise_construct, &v60);
        if (v20[6] != v20[5])
          break;
        if (!*(_BYTE *)quasar::OptionValue<BOOL>::value((quasar::AmbiguityAnnotatorBlock *)((char *)a1
                                                                                           + *(_QWORD *)(*((_QWORD *)a1 + 283) - 24)
                                                                                           + 2264)))
        {
          v27 = (const quasar::TranslationPhraseInternal *)(*a4 + 200 * v33);
          v28 = v56;
          if ((unint64_t)v56 < v57)
            goto LABEL_23;
LABEL_27:
          v29 = (std::string *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>((uint64_t *)&v55, v27);
LABEL_28:
          v56 = v29;
        }
        v30 = ++v33;
        if (0x8F5C28F5C28F5C29 * ((a4[1] - *a4) >> 3) <= v30)
          goto LABEL_32;
      }
      v60 = &v33;
      v21 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v34, &v33, (uint64_t)&std::piecewise_construct, &v60);
      v22 = (const quasar::AmbiguityAnnotatorBlock::SenseMatches *)v21[5];
      *(_QWORD *)&v36 = 0;
      quasar::AmbiguityAnnotatorBlock::convertTokenToCharacterSpan((uint64_t)v21, a2, v17, &v36);
      v24 = (_DWORD *)*((_QWORD *)v22 + 1);
      if (*(_DWORD **)v22 != v24)
      {
        v25 = (_DWORD *)(*(_QWORD *)v22 + 56);
        do
        {
          v60 = 0;
          quasar::AmbiguityAnnotatorBlock::convertTokenToCharacterSpan(v23, *a4 + 200 * v33, v25, &v60);
          *((_QWORD *)v25 - 4) = v36;
          *(_QWORD *)v25 = v60;
          v26 = v25 + 56;
          v25 += 70;
        }
        while (v26 != v24);
      }
      quasar::AmbiguityAnnotatorBlock::addAnnotation(a1, (quasar::MetaInfo::Impl **)(*a4 + 200 * v33 + 192), v22);
      v27 = (const quasar::TranslationPhraseInternal *)(*a4 + 200 * v33);
      v28 = v56;
      if ((unint64_t)v56 >= v57)
        goto LABEL_27;
LABEL_23:
      quasar::TranslationPhraseInternal::TranslationPhraseInternal(v56, v27);
      v29 = (std::string *)((char *)v28 + 200);
      goto LABEL_28;
    }
LABEL_32:
    std::__tree<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::__map_value_compare<int,std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>>>::destroy((uint64_t)&v34, v35[0]);
LABEL_33:
    v17 = v53;
  }
  if (v17)
  {
    v54 = v17;
    operator delete(v17);
  }
  if (v55 == v56)
  {
    if (quasar::gLogLevel >= 5)
    {
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v36 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"no alternatives", 15);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v36);
    }
  }
  else
  {
    a4 = (uint64_t *)&v55;
  }
  quasar::AmbiguityAnnotatorBlock::sender(a1, a4);
  *(_QWORD *)&v36 = &v55;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  return std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::~__tree((uint64_t)v61);
}

void sub_1ADF1F484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13, uint64_t a14, void **a15)
{
  uint64_t v15;
  uint64_t v16;
  void *v18;

  std::__tree<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::__map_value_compare<int,std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>>>::destroy((uint64_t)&a12, a13);
  v18 = *(void **)(v15 + 272);
  if (v18)
  {
    *(_QWORD *)(v15 + 280) = v18;
    operator delete(v18);
  }
  a15 = (void **)(v16 - 216);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::~__tree(v16 - 160);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'quasar::AmbiguityAnnotatorBlock::processBody(quasar::AmbiguityAnnotatorBlock *this)
{
  quasar::AmbiguityAnnotatorBlock::processBody((quasar::AmbiguityAnnotatorBlock *)((char *)this - 2568));
}

BOOL quasar::AmbiguityAnnotatorBlock::findAlternatives(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  std::string *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  char v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  __int128 *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t *v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  int *v58;
  _QWORD *v59;
  __int128 *v60;
  uint64_t v61;
  int v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  __int128 *v68;
  __int128 *v69;
  BOOL v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  int v87;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t **v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  char *v98;
  char **v99;
  uint64_t v100;
  _BOOL8 v101;
  uint64_t **v104;
  uint64_t v105;
  void *v107;
  char *v108;
  unsigned __int8 v109;
  _BYTE v110[32];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t *v129;
  _QWORD *v130[2];
  std::string *v131;
  std::string *v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t *v135;
  unsigned int *v136;

  v8 = std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::vector(&v134, 0x8F5C28F5C28F5C29 * ((a5[1] - *a5) >> 3));
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v9 = *a5;
  for (i = a5[1]; v9 != i; v9 += 200)
  {
    memset(v110, 0, 24);
    quasar::AmbiguityAnnotatorBlock::extractTokenSequence((uint64_t)v8, v9, (std::vector<std::string> *)v110);
    v11 = v132;
    if ((unint64_t)v132 >= v133)
    {
      v12 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)&v131, (__int128 **)v110);
    }
    else
    {
      v132->__r_.__value_.__r.__words[0] = 0;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *(__int128 **)v110, *(__int128 **)&v110[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v110[8] - *(_QWORD *)v110) >> 3));
      v12 = (uint64_t)&v11[1];
    }
    v132 = (std::string *)v12;
    v129 = (uint64_t *)v110;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
  }
  v104 = a4;
  v130[0] = 0;
  v130[1] = 0;
  v129 = (uint64_t *)v130;
  v13 = (uint64_t *)std::map<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,std::allocator<std::pair<quasar::AmbiguityAnnotatorBlock::MatchSpan const,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::at(a3, a2);
  v14 = *v13;
  v105 = v13[1];
  if (*v13 != v105)
  {
    while (1)
    {
      v15 = (uint64_t)v131;
      v16 = v132;
      if (v131 != v132)
        break;
LABEL_50:
      v14 += 280;
      if (v14 == v105)
        goto LABEL_51;
    }
    v17 = 0;
    while (1)
    {
      v18 = *(unsigned __int8 **)v15;
      v19 = *(_QWORD *)(v15 + 8);
      v20 = *(unsigned __int8 **)(v14 + 64);
      v21 = *(unsigned __int8 **)(v14 + 72);
      LOBYTE(v107) = 0;
      v22 = std::__search_impl[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>,std::__equal_to,std::__identity,std::__identity>(v18, v19, v20, v21, (uint64_t)&v126, (uint64_t)&v107, (uint64_t)&v107);
      if (*(unsigned __int8 **)(v15 + 8) != v22)
      {
        if (!*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)(a1
                                                                  + 2416
                                                                  + *(_QWORD *)(*(_QWORD *)(a1 + 2416) - 24))))
        {
          std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)v110, (__int128 *)(v14 + 88), (__int128 *)(v14 + 208));
          std::__tree<std::pair<std::string,std::string>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(&v129, (const void **)v110, (uint64_t)v110);
          v24 = v23;
          if (SHIBYTE(v111) < 0)
            operator delete(*(void **)&v110[24]);
          if ((v110[23] & 0x80000000) != 0)
            operator delete(*(void **)v110);
          if (!v24)
            goto LABEL_49;
        }
        v128 = -1431655765 * ((unint64_t)&v22[-*(_QWORD *)v15] >> 3);
        *(_DWORD *)v110 = -1431655765 * ((*(_QWORD *)(v14 + 72) - *(_QWORD *)(v14 + 64)) >> 3);
        quasar::AmbiguityAnnotatorBlock::SenseMatch::addTargetMatch(v14, (__int128 **)(v14 + 64), &v128, (int *)v110);
        if (quasar::gLogLevel >= 5)
        {
          v126 = 0uLL;
          v127 = 0;
          kaldi::JoinVectorToString((uint64_t *)(v14 + 64), " ", 1, &v126);
          if (quasar::gLogLevel >= 5)
          {
            v124 = 0u;
            v125 = 0u;
            v122 = 0u;
            v123 = 0u;
            v120 = 0u;
            v121 = 0u;
            v118 = 0u;
            v119 = 0u;
            v116 = 0u;
            v117 = 0u;
            v114 = 0u;
            v115 = 0u;
            v112 = 0u;
            v113 = 0u;
            v111 = 0u;
            memset(v110, 0, sizeof(v110));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"in hypothesis ", 14);
            v25 = (_QWORD *)std::ostream::operator<<();
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" ", 1);
            v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\"", 1);
            quasar::AmbiguityAnnotatorBlock::Match::toString((quasar::AmbiguityAnnotatorBlock::Match *)v14, (uint64_t)&v107);
            if ((v109 & 0x80u) == 0)
              v28 = &v107;
            else
              v28 = v107;
            if ((v109 & 0x80u) == 0)
              v29 = v109;
            else
              v29 = (uint64_t)v108;
            v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
            v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\" ", 2);
            v32 = quasar::operator<<(v31);
            v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" is translated as \"", 19);
            if (v127 >= 0)
              v34 = &v126;
            else
              v34 = (__int128 *)v126;
            if (v127 >= 0)
              v35 = HIBYTE(v127);
            else
              v35 = *((_QWORD *)&v126 + 1);
            v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
            v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\" ", 2);
            v136 = (unsigned int *)__PAIR64__(-1431655765 * ((*(_QWORD *)(v14 + 72) - *(_QWORD *)(v14 + 64)) >> 3), v128);
            v38 = quasar::operator<<(v37);
            v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" in sense ", 10);
            v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"\"", 1);
            v41 = *(char *)(v14 + 111);
            if (v41 >= 0)
              v42 = v14 + 88;
            else
              v42 = *(_QWORD *)(v14 + 88);
            if (v41 >= 0)
              v43 = *(unsigned __int8 *)(v14 + 111);
            else
              v43 = *(_QWORD *)(v14 + 96);
            v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
            v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\"", 1);
            v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" (", 2);
            v47 = *(_BYTE *)(v14 + 135);
            if (v47 >= 0)
              v48 = v14 + 112;
            else
              v48 = *(_QWORD *)(v14 + 112);
            if (v47 >= 0)
              v49 = *(unsigned __int8 *)(v14 + 135);
            else
              v49 = *(_QWORD *)(v14 + 120);
            v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, v48, v49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)")", 1);
            if ((char)v109 < 0)
              operator delete(v107);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v110);
          }
          if (SHIBYTE(v127) < 0)
            operator delete((void *)v126);
        }
        quasar::AmbiguityAnnotatorBlock::SenseMatches::add((quasar::AmbiguityAnnotatorBlock::SenseMatches *)&v134[3 * v17], (const quasar::AmbiguityAnnotatorBlock::SenseMatch *)v14);
      }
      ++v17;
LABEL_49:
      v15 += 24;
      if ((std::string *)v15 == v16)
        goto LABEL_50;
    }
  }
LABEL_51:
  v51 = v134;
  v52 = v135;
  if (v134 != v135)
  {
    v53 = (_QWORD *)(a1 + 1976);
    do
    {
      v54 = 0xAF8AF8AF8AF8AF8BLL * ((v51[1] - *v51) >> 3);
      if (v54 >= 2 && v54 > *(int *)quasar::OptionValue<int>::value(v53))
      {
        if (quasar::gLogLevel >= 5)
        {
          v124 = 0u;
          v125 = 0u;
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          v118 = 0u;
          v119 = 0u;
          v116 = 0u;
          v117 = 0u;
          v114 = 0u;
          v115 = 0u;
          v112 = 0u;
          v113 = 0u;
          v111 = 0u;
          memset(v110, 0, sizeof(v110));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"limiting senses to ", 19);
          quasar::OptionValue<int>::value(v53);
          v55 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": ", 2);
          v56 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" before limit", 13);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v110);
        }
        v57 = *v51;
        v58 = (int *)quasar::OptionValue<int>::value(v53);
        std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::erase((uint64_t)v51, v57 + 280 * *v58, v51[1]);
        if (quasar::gLogLevel >= 5)
        {
          v124 = 0u;
          v125 = 0u;
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          v118 = 0u;
          v119 = 0u;
          v116 = 0u;
          v117 = 0u;
          v114 = 0u;
          v115 = 0u;
          v112 = 0u;
          v113 = 0u;
          v111 = 0u;
          memset(v110, 0, sizeof(v110));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
          v59 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" after limit", 12);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v110);
        }
      }
      v51 += 3;
    }
    while (v51 != v52);
    if (v135 != v134 && *v134 != v134[1])
    {
      quasar::AmbiguityAnnotatorBlock::SenseMatches::senseIDs(v134, (uint64_t)&v126);
      v60 = (__int128 *)v126;
      v61 = (uint64_t)v104;
      if ((__int128 *)v126 != (__int128 *)((char *)&v126 + 8))
      {
        v62 = quasar::gLogLevel;
        do
        {
          if (v62 >= 5)
          {
            v124 = 0u;
            v125 = 0u;
            v122 = 0u;
            v123 = 0u;
            v120 = 0u;
            v121 = 0u;
            v118 = 0u;
            v119 = 0u;
            v116 = 0u;
            v117 = 0u;
            v114 = 0u;
            v115 = 0u;
            v112 = 0u;
            v113 = 0u;
            v111 = 0u;
            memset(v110, 0, sizeof(v110));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
            v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"found the sense \"", 17);
            v64 = *((char *)v60 + 55);
            if (v64 >= 0)
              v65 = (uint64_t)(v60 + 2);
            else
              v65 = *((_QWORD *)v60 + 4);
            if (v64 >= 0)
              v66 = *((unsigned __int8 *)v60 + 55);
            else
              v66 = *((_QWORD *)v60 + 5);
            v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, v65, v66);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\" in 1-best", 11);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v110);
            v62 = quasar::gLogLevel;
          }
          v68 = (__int128 *)*((_QWORD *)v60 + 1);
          if (v68)
          {
            do
            {
              v69 = v68;
              v68 = *(__int128 **)v68;
            }
            while (v68);
          }
          else
          {
            do
            {
              v69 = (__int128 *)*((_QWORD *)v60 + 2);
              v70 = *(_QWORD *)v69 == (_QWORD)v60;
              v60 = v69;
            }
            while (!v70);
          }
          v60 = v69;
        }
        while (v69 != (__int128 *)((char *)&v126 + 8));
      }
      if (*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)(a1 + 2416 + *(_QWORD *)(*(_QWORD *)(a1 + 2416) - 24))))
      {
        *(_DWORD *)v110 = 0;
        if (v135 != v134)
        {
          do
          {
            v107 = v110;
            v71 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v104, (int *)v110, (uint64_t)&std::piecewise_construct, (_DWORD **)&v107);
            v72 = (uint64_t *)(v71 + 5);
            v73 = &v134[3 * *(int *)v110];
            v74 = v71[6];
            if (v74 >= v71[7])
            {
              v75 = std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__push_back_slow_path<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>(v72, v73);
            }
            else
            {
              std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__construct_one_at_end[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>((uint64_t)v72, v73);
              v75 = (uint64_t)(v74 + 3);
            }
            v71[6] = (uint64_t *)v75;
            v76 = *(int *)v110 + 1;
            ++*(_DWORD *)v110;
          }
          while (0xAAAAAAAAAAAAAAABLL * (v135 - v134) > v76);
        }
        goto LABEL_123;
      }
      *(_DWORD *)v110 = 0;
      v107 = v110;
      v77 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v104, (int *)v110, (uint64_t)&std::piecewise_construct, (_DWORD **)&v107);
      v78 = (uint64_t *)(v77 + 5);
      v79 = v77[6];
      if (v79 >= v77[7])
      {
        v80 = std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__push_back_slow_path<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>(v78, v134);
      }
      else
      {
        std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__construct_one_at_end[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>((uint64_t)v78, v134);
        v80 = (uint64_t)(v79 + 3);
      }
      v77[6] = (uint64_t *)v80;
      v128 = 1;
      v81 = v134;
      if (0xAAAAAAAAAAAAAAABLL * (v135 - v134) < 2)
      {
LABEL_122:
        v61 = (uint64_t)v104;
LABEL_123:
        std::__tree<std::string>::destroy((uint64_t)&v126, *((char **)&v126 + 1));
        goto LABEL_124;
      }
      v82 = 1;
      while (1)
      {
        quasar::AmbiguityAnnotatorBlock::SenseMatches::senseIDs(&v81[3 * v82], (uint64_t)&v107);
        v83 = (char *)v107;
        if (v107 != &v108)
          break;
LABEL_121:
        std::__tree<std::string>::destroy((uint64_t)&v107, v108);
        v82 = (int)v128++ + 1;
        v81 = v134;
        if (0xAAAAAAAAAAAAAAABLL * (v135 - v134) <= v82)
          goto LABEL_122;
      }
      while (1)
      {
        if ((__int128 *)((char *)&v126 + 8) == (__int128 *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v126, (const void **)v83 + 4))goto LABEL_103;
        if (v83[55] < 0)
        {
          v85 = (unsigned __int8 *)*((_QWORD *)v83 + 4);
          v84 = *((_QWORD *)v83 + 5);
          if (v84)
          {
LABEL_98:
            v86 = 0;
            do
            {
              v87 = *v85++;
              if (v87 == 46)
                ++v86;
              --v84;
            }
            while (v84);
            if (v86 != 3)
              goto LABEL_115;
LABEL_103:
            if (quasar::gLogLevel >= 5)
            {
              v124 = 0u;
              v125 = 0u;
              v122 = 0u;
              v123 = 0u;
              v120 = 0u;
              v121 = 0u;
              v118 = 0u;
              v119 = 0u;
              v116 = 0u;
              v117 = 0u;
              v114 = 0u;
              v115 = 0u;
              v112 = 0u;
              v113 = 0u;
              v111 = 0u;
              memset(v110, 0, sizeof(v110));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
              v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"found the sense \"", 17);
              v89 = v83[55];
              if (v89 >= 0)
                v90 = (uint64_t)(v83 + 32);
              else
                v90 = *((_QWORD *)v83 + 4);
              if (v89 >= 0)
                v91 = v83[55];
              else
                v91 = *((_QWORD *)v83 + 5);
              v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, v90, v91);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"\" in hypothesis ", 16);
              std::ostream::operator<<();
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v110);
            }
            v136 = &v128;
            v93 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v104, (int *)&v128, (uint64_t)&std::piecewise_construct, &v136);
            v94 = (uint64_t *)(v93 + 5);
            v95 = &v134[3 * (int)v128];
            v96 = v93[6];
            if (v96 >= v93[7])
            {
              v97 = std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__push_back_slow_path<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>(v94, v95);
            }
            else
            {
              std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__construct_one_at_end[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>((uint64_t)v94, v95);
              v97 = (uint64_t)(v96 + 3);
            }
            v93[6] = (uint64_t *)v97;
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v126, (const void **)v83 + 4, (uint64_t)(v83 + 32));
          }
        }
        else
        {
          v84 = v83[55];
          v85 = (unsigned __int8 *)(v83 + 32);
          if (v83[55])
            goto LABEL_98;
        }
LABEL_115:
        v98 = (char *)*((_QWORD *)v83 + 1);
        if (v98)
        {
          do
          {
            v99 = (char **)v98;
            v98 = *(char **)v98;
          }
          while (v98);
        }
        else
        {
          do
          {
            v99 = (char **)*((_QWORD *)v83 + 2);
            v70 = *v99 == v83;
            v83 = (char *)v99;
          }
          while (!v70);
        }
        v83 = (char *)v99;
        if (v99 == &v108)
          goto LABEL_121;
      }
    }
  }
  v61 = (uint64_t)v104;
  if (quasar::gLogLevel >= 5)
  {
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    memset(v110, 0, sizeof(v110));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"best hypothesis has no sense match", 34);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v110);
  }
LABEL_124:
  v100 = *(_QWORD *)(v61 + 16);
  if (v100 == 1)
  {
    std::__tree<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::__map_value_compare<int,std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>>>::destroy(v61, *(char **)(v61 + 8));
    v100 = 0;
    *(_QWORD *)v61 = v61 + 8;
    *(_QWORD *)(v61 + 16) = 0;
    *(_QWORD *)(v61 + 8) = 0;
  }
  v101 = v100 != 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v129, v130[0]);
  *(_QWORD *)v110 = &v131;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
  *(_QWORD *)v110 = &v134;
  std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
  return v101;
}

void sub_1ADF200B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  uint64_t v22;

  std::__tree<std::string>::destroy(v22 - 216, *(char **)(v22 - 208));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v22 - 184, *(_QWORD **)(v22 - 176));
  a22 = v22 - 160;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = v22 - 136;
  std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void quasar::AmbiguityAnnotatorBlock::SenseMatch::addTargetMatch(uint64_t a1, __int128 **a2, _DWORD *a3, int *a4)
{
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  std::string v9;
  uint64_t v10;
  std::string *v11;

  v6 = *a4;
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  LODWORD(v10) = *a3;
  HIDWORD(v10) = v6;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
  v7 = v9.__r_.__value_.__r.__words[2];
  v8 = v10;
  memset(&v9, 0, sizeof(v9));
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  v11 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
}

uint64_t quasar::AmbiguityAnnotatorBlock::SenseMatches::add(quasar::AmbiguityAnnotatorBlock::SenseMatches *this, const quasar::AmbiguityAnnotatorBlock::SenseMatch *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = *((_QWORD *)this + 1);
  if (v3 >= *((_QWORD *)this + 2))
  {
    result = std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__push_back_slow_path<quasar::AmbiguityAnnotatorBlock::SenseMatch const&>((uint64_t *)this, a2);
  }
  else
  {
    quasar::AmbiguityAnnotatorBlock::SenseMatch::SenseMatch(*((quasar::AmbiguityAnnotatorBlock::SenseMatch **)this + 1), a2);
    result = v3 + 280;
    *((_QWORD *)this + 1) = v3 + 280;
  }
  *((_QWORD *)this + 1) = result;
  return result;
}

void sub_1ADF202F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::AmbiguityAnnotatorBlock::SenseMatch *,quasar::AmbiguityAnnotatorBlock::SenseMatch *,quasar::AmbiguityAnnotatorBlock::SenseMatch *,0>(a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
        quasar::AmbiguityAnnotatorBlock::SenseMatch::~SenseMatch((void **)(v7 - 280));
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t *quasar::AmbiguityAnnotatorBlock::SenseMatches::senseIDs@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = *this;
  v4 = this[1];
  while (v3 != v4)
  {
    this = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a2, (const void **)(v3 + 88), v3 + 88);
    v3 += 280;
  }
  return this;
}

void sub_1ADF203BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void quasar::AmbiguityAnnotatorBlock::sender(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  quasar::PTree *v6;
  void *__p[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (quasar::gLogLevel >= 6)
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"metainfo for the alternatives:", 30);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
  }
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v6 = (quasar::PTree *)quasar::MetaInfo::get((quasar::MetaInfo *)(v4 + 192));
      std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer input");
      quasar::PTree::erase((uint64_t)v6, (unsigned __int8 *)__p);
      if (SBYTE7(v8) < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer output");
      quasar::PTree::erase((uint64_t)v6, (unsigned __int8 *)__p);
      if (SBYTE7(v8) < 0)
        operator delete(__p[0]);
      if (quasar::gLogLevel >= 6)
      {
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        v19 = 0u;
        v16 = 0u;
        v17 = 0u;
        v14 = 0u;
        v15 = 0u;
        v12 = 0u;
        v13 = 0u;
        v10 = 0u;
        v11 = 0u;
        v8 = 0u;
        v9 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        quasar::operator<<(__p, v6);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
      }
      v4 += 200;
    }
    while (v4 != v5);
  }
  quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)a2, 0);
}

void sub_1ADF20568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
  _Unwind_Resume(a1);
}

void quasar::AmbiguityAnnotatorBlock::Senses::keys(quasar::AmbiguityAnnotatorBlock::Senses **this@<X0>, char **a2@<X8>)
{
  quasar::AmbiguityAnnotatorBlock::Senses **v2;
  quasar::AmbiguityAnnotatorBlock::Senses *v3;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  quasar::AmbiguityAnnotatorBlock::Senses *v16;
  quasar::AmbiguityAnnotatorBlock::Senses **v17;
  BOOL v18;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this + 1;
  v3 = *this;
  if (*this != (quasar::AmbiguityAnnotatorBlock::Senses *)(this + 1))
  {
    v5 = 0;
    v6 = a2 + 2;
    do
    {
      if ((unint64_t)v5 >= *v6)
      {
        v7 = (v5 - *a2) >> 3;
        if ((unint64_t)(v7 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v8 = *v6 - (_QWORD)*a2;
        v9 = v8 >> 2;
        if (v8 >> 2 <= (unint64_t)(v7 + 1))
          v9 = v7 + 1;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v6, v10);
        else
          v11 = 0;
        v12 = &v11[8 * v7];
        *(_QWORD *)v12 = *((_QWORD *)v3 + 4);
        v5 = v12 + 8;
        v14 = *a2;
        v13 = a2[1];
        if (v13 != *a2)
        {
          do
          {
            v15 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          v13 = *a2;
        }
        *a2 = v12;
        a2[1] = v5;
        a2[2] = &v11[8 * v10];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v5 = *((_QWORD *)v3 + 4);
        v5 += 8;
      }
      a2[1] = v5;
      v16 = (quasar::AmbiguityAnnotatorBlock::Senses *)*((_QWORD *)v3 + 1);
      if (v16)
      {
        do
        {
          v17 = (quasar::AmbiguityAnnotatorBlock::Senses **)v16;
          v16 = *(quasar::AmbiguityAnnotatorBlock::Senses **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (quasar::AmbiguityAnnotatorBlock::Senses **)*((_QWORD *)v3 + 2);
          v18 = *v17 == v3;
          v3 = (quasar::AmbiguityAnnotatorBlock::Senses *)v17;
        }
        while (!v18);
      }
      v3 = (quasar::AmbiguityAnnotatorBlock::Senses *)v17;
    }
    while (v17 != v2);
  }
}

void sub_1ADF206E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::AmbiguityAnnotatorBlock::minConfigVersion(quasar::AmbiguityAnnotatorBlock *this)
{
  return 144;
}

uint64_t `virtual thunk to'quasar::AmbiguityAnnotatorBlock::minConfigVersion(quasar::AmbiguityAnnotatorBlock *this)
{
  return 144;
}

void quasar::ConfiguredProcessingBlock<quasar::AmbiguityAnnotatorOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1ADF207EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::AmbiguityAnnotatorOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::AmbiguityAnnotatorOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::AmbiguityAnnotatorOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::AmbiguityAnnotatorOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::AmbiguityAnnotatorBlock::~AmbiguityAnnotatorBlock(quasar::AmbiguityAnnotatorBlock *this)
{
  char **v2;
  void **v3;

  *(_QWORD *)this = off_1E5D39168;
  v2 = (char **)((char *)this + 2704);
  *((_QWORD *)this + 338) = off_1E5D39268;
  *((_QWORD *)this + 321) = &off_1E5D391C8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2688);
  v3 = (void **)((char *)this + 2664);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 2655) < 0)
    operator delete(*((void **)this + 329));
  v3 = (void **)((char *)this + 2608);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 2599) < 0)
    operator delete(*((void **)this + 322));
  *(_QWORD *)this = off_1E5D05268;
  *((_QWORD *)this + 338) = &unk_1E5D052F0;
  quasar::AmbiguityAnnotatorOptions::~AmbiguityAnnotatorOptions((quasar::AmbiguityAnnotatorBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;
  void **v3;

  *(_QWORD *)this = off_1E5D39168;
  v2 = (char **)((char *)this + 2704);
  *((_QWORD *)this + 338) = off_1E5D39268;
  *((_QWORD *)this + 321) = &off_1E5D391C8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2688);
  v3 = (void **)((char *)this + 2664);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 2655) < 0)
    operator delete(*((void **)this + 329));
  v3 = (void **)((char *)this + 2608);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 2599) < 0)
    operator delete(*((void **)this + 322));
  *(_QWORD *)this = off_1E5D05268;
  *((_QWORD *)this + 338) = &unk_1E5D052F0;
  quasar::AmbiguityAnnotatorOptions::~AmbiguityAnnotatorOptions((quasar::AmbiguityAnnotatorBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](this, 0x10F3C400DFE6407);
}

const char *quasar::AmbiguityAnnotatorBlock::blockType(quasar::AmbiguityAnnotatorBlock *this)
{
  return "AmbiguityAnnotatorBlock";
}

_QWORD *quasar::AmbiguityAnnotatorBlock::inputs@<X0>(quasar::AmbiguityAnnotatorBlock *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *result = (char *)this + 2576;
  result[1] = (char *)this + 2632;
  *a2 = result;
  return result;
}

